{
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1, 3, 5, 7])",
        "minimumRightShifts(nums = [0, 1, 2])",
        "minimumRightShifts(nums=[1,2,3,4,5])",
        "minimumRightShifts(nums = [1, 3, 4, 2])",
        "minimumRightShifts(nums = [3, 1, 2])",
        "minimumRightShifts(nums = [2, 1, 6, 7, 9, 0, 3, 5])"
    ],
    "sample_453": [
        "minChanges(s = \"010101\")",
        "minChanges(s = \"0101\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"aabaa\")",
        "minChanges(s = \"abca\")",
        "minChanges(s = \"abacaba\")",
        "minChanges(s = \"00110011\")",
        "minChanges(s = \"abbaa\")",
        "minChanges(s = \"01010100\")"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [1], target = 2)",
        "lengthOfLongestSubsequence(nums = [1], target = 2)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 1], target = 2)",
        "lengthOfLongestSubsequence(nums = [5,4,3,2,1], target = 15)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5, 7], target = 9)",
        "lengthOfLongestSubsequence(nums = [5, 4, 1, 2, 3], target = 9)",
        "lengthOfLongestSubsequence(nums = [3,2,4,1,5], target = 8)",
        "lengthOfLongestSubsequence(nums = [2, 5, 7, 1, 3], target = 10)",
        "lengthOfLongestSubsequence(nums=[5,4,1,2,3,7,8,6], target=4)"
    ],
    "sample_367": [
        "sortVowels(s = \"lYmph\")",
        "sortVowels(s = \"lYmph\")",
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = 'lHymp')",
        "sortVowels(s = 'HlypM')",
        "sortVowels(s = 'HlyMp')",
        "sortVowels(s = 'Helylo')"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1], target = 2)",
        "lengthOfLongestSubsequence(nums = [1], target = 2)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 5)",
        "lengthOfLongestSubsequence(nums = [], target = 1)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [4, 4, 4, 4, 4], target = 4)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9,10], target = 50)",
        "lengthOfLongestSubsequence(nums = [4, 1, 4, 3, 2], target = 6)",
        "lengthOfLongestSubsequence(nums = [4, 1, 2, 2, 1], target = 1)"
    ],
    "sample_381": [
        "countPairs(nums = [1, 2, 3, 4], t = 5)",
        "countPairs(nums = [1, 2, 3, 4], t = 5)",
        "countPairs(nums = [1, 2, 3, 4], t = 5)",
        "countPairs(nums=[1,2,3,4], t=5)",
        "countPairs(nums=[1,2,3,4], t=6)",
        "countPairs(nums=[1,2,3,4], t=6)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 5)",
        "countPairs(nums=[1,2,3,4], t=7)",
        "countPairs(nums=[1,2,3,4],t=6)",
        "countPairs(nums=[1,2,3,4], t=4)"
    ],
    "sample_366": [
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [0, 1, 2])",
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 4, 5, 7, 8, 9])"
    ],
    "sample_369": [
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"lYmph\")",
        "sortVowels(s = 'Lymph')",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"Hello World!\")",
        "sortVowels(s = 'Happy')",
        "sortVowels(s = \"Humpty\")",
        "sortVowels(\"Hlmyp\")"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 3])",
        "minimumRightShifts(nums = [5, 1, 2, 3, 4])",
        "minimumRightShifts(nums = [1,2,3])",
        "minimumRightShifts(nums = [7, 5, 8, 9, 1, 2])",
        "minimumRightShifts(nums = [2, 3, 4, 1])",
        "minimumRightShifts(nums = [6, 2, 3, 4])",
        "minimumRightShifts(nums = [4, 0, 2, 1, 3])"
    ],
    "sample_448": [
        "minChanges(s = \"abba\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"00110011\")",
        "minChanges(s = \"01\")",
        "minChanges(s = \"caab\")",
        "minChanges(s = \"abcdefgh\")",
        "minChanges(s = \"abcda\")",
        "minChanges(s = \"11001101\")"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"ab\", s2 = \"cd\")",
        "canBeEqual(s1 = \"abcdef\", s2 = \"defabc\")",
        "canBeEqual(s1 = \"abcdef\", s2 = \"acbdef\")",
        "canBeEqual(s1 = \"1234\", s2 = \"1324\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"fghij\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"111\", s2 = \"111\")",
        "canBeEqual(s1 = \"1324\", s2 = \"1243\")",
        "canBeEqual(s1 = \"xyc\", s2 = \"xcy\")",
        "canBeEqual(s1 = \"43524\", s2 = \"53424\")"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1,2,3])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1,2,3,2,1,1,3])",
        "minLengthAfterRemovals(nums = [2,2,1,2,2,1])",
        "minLengthAfterRemovals(nums = [2, 3, 3, 2, 5, 2, 2, 2, 2, 2, 2, 2, 2])"
    ],
    "sample_361": [
        "isGood(a = [1, 2, 3, 4, 4])",
        "isGood(a = [0, 1, 1, 2, 3])",
        "isGood(a = [0, 1, 1, 2])",
        "isGood(a = [0, 2, 1, 3])",
        "isGood(a = [1, 2, 2, 4, 4])",
        "isGood(a = [1, 2, 2, 2, 3, 4])",
        "isGood(a = [0, 1, 1, 3, 4, 5])",
        "isGood(a = [1, 0, 2, 0, 3, 4])",
        "isGood(a = [2, 3, 3, 4, 4])",
        "isGood(a=[0, 1, 2, 2, 2, 3, 4])"
    ],
    "sample_419": [
        "minOperations(nums = [5, 4, 3, 2, 1], k = 2)",
        "minOperations(nums = [5, 4, 3, 2, 1], k = 2)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [2, 1, 3, 1, 2], k = 2)",
        "minOperations(nums = [5,1,4,3,2], k = 3)",
        "minOperations(nums = [2, 1, 4, 5, 3, 2, 8, 7], k = 3)",
        "minOperations(nums = [3,2,2,1], k = 2)",
        "minOperations(nums = [2, 1, 5, 2, 1], k = 3)",
        "minOperations(nums = [3, 1, 3, 3, 2, 1], k = 2)",
        "minOperations(nums = [5,6,7,8,1,2,3,4], k = 2)"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1])",
        "findMaximumLength(nums = [1, 2])",
        "findMaximumLength(nums = [1,1])",
        "findMaximumLength(nums = [1, 1])",
        "findMaximumLength(nums = [2, 1])",
        "findMaximumLength(nums = [0, 1])",
        "findMaximumLength(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "findMaximumLength(nums = [3,1,2])",
        "findMaximumLength(nums = [1, 2, 1, 1, 2])",
        "findMaximumLength(nums=[1,1,0,1])"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 1, 0, 0, 1])",
        "maxSubarrays(nums = [3, 4, 5, 6, 7])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 0])",
        "maxSubarrays(nums = [3, 1, 5, 2, 2])",
        "maxSubarrays(nums=[1, 3, 2, 5])",
        "maxSubarrays(nums = [5, 2, 6, 3, 1])",
        "maxSubarrays(nums=[1, 1, 0, 0, 1, 0, 0, 1])",
        "maxSubarrays(nums = [3, 4, 2, 6, 7, 8, 9, 10, 11, 12])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"def\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"cd\")",
        "canMakeSubsequence(str1 = \"xyz\", str2 = \"xzy\")",
        "canMakeSubsequence(str1 = \"acd\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"bca\", str2 = \"abd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"aeb\")",
        "canMakeSubsequence(str1 = \"xz\", str2 = \"ay\")",
        "canMakeSubsequence(str1 = \"dfg\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"h\")",
        "canMakeSubsequence(str1 = \"bcd\", str2 = \"abczde\")"
    ],
    "sample_402": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(nums = [1], m = 1, k = 1)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "maxSum(nums = [1, 1, 1, 1, 1, 1], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7], m = 2, k = 4)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 11, k = 5)",
        "maxSum(nums = [1,2,3,4,5], m = 100, k = 1000)",
        "maxSum(nums = [1,2,3,4,5,6,7,8], m = 4, k = 10)",
        "maxSum(nums=[3, 4, 5], m=2, k=3)",
        "maxSum(nums = [1, 3, 4, 5, 6, 7, 8, 9], m = 4, k = 3)"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"x\")",
        "findWordsContaining(words = [\"ab\", \"cd\", \"ef\"], x = \"g\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"grape\")",
        "findWordsContaining(words = [\"java\", \"python\", \"c++\"], x = \"z\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"t\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"carrot\"], x = \"m\")",
        "findWordsContaining(words = [\"app\", \"bppp\", \"c\", \"ddd\"], x = \"z\")",
        "findWordsContaining(words = [\"animal\", \"banana\", \"cat\", \"dog\"], x = \"g\")",
        "findWordsContaining(words=[\"miao\", \"miya\"], x=\"a\")",
        "findWordsContaining(words = [\"abacus\", \"banana\", \"comet\", \"tuna\"], x = \"z\")"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = ['1', '2', '3', 'prev', 'prev', 'prev'])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"4\", \"prev\", \"3\", \"prev\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words=[\"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\",\"prev\",\"2\",\"3\",\"prev\"])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [5, 4, 3, 2, 1], k = 2)",
        "minOperations(nums = [1, 1, 2, 2], k = 2)",
        "minOperations(nums = [1, 1, 3, 2, 4], k = 3)",
        "minOperations(nums = [2, 1, 5, 2, 3, 2, 4], k = 3)",
        "minOperations(nums = [2, 1, 4, 5, 2, 6, 4, 8, 4, 3], k = 3)",
        "minOperations(nums = [2, 1, 4, 5, 3, 2, 6, 7, 8, 9, 3], k = 5)",
        "minOperations(nums = [14, 11, 7, 10, 6, 11], k = 2)",
        "minOperations(nums = [4, 1, 5, 2, 1, 7, 3, 1, 1, 5, 2, 6, 8, 1, 5], k = 3)",
        "minOperations(nums=[3, 5, 4, 8, 4, 6], k=4)"
    ],
    "sample_418": [
        "minOperations(nums = [14, 11, 7, 6, 3, 2], k = 3)",
        "minOperations(nums = [14, 10, 6, 13, 9, 7, 3], k = 3)",
        "minOperations(nums = [14, 11, 7, 6, 3, 6], k = 4)",
        "minOperations(nums=[2, 3, 6, 10, 11], k=3)",
        "minOperations(nums=[3, 1, 2, 2, 3], k=1)",
        "minOperations(nums = [2, 4, 2, 3, 1, 5], k = 3)",
        "minOperations(nums = [5, 4, 3, 2, 1, 5, 3, 2, 1, 4], k = 4)",
        "minOperations(nums = [2,3,1,5,4,6,7,8,9,10,11], k = 3)",
        "minOperations(nums = [14, 1, 17, 11, 17, 3, 5, 7, 9, 12], k = 2)",
        "minOperations(nums = [3, 4, 7, 4, 3, 6, 7, 8, 2, 2, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 5)"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums=[1])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7])",
        "minimumSeconds(nums = [3,2,1])",
        "minimumSeconds(nums = [3, 3, 3])",
        "minimumSeconds(nums = [3, 3, 3])",
        "minimumSeconds(nums = [1, 3, 5, 2, 4, 6])",
        "minimumSeconds(nums = [3, 2, 1, 4])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 1, 1, 1, 1], target = 2)",
        "countPairs(nums = [1, 1, 1, 1], target = 2)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 10)",
        "countPairs(nums = [1, 1, 1, 1, 1], target = 3)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 5)",
        "countPairs(nums=[1, 2, 3, 4, 5], target=10)",
        "countPairs(nums = [2, 4, 3, 0, 1, 5], target = 8)"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"happy\", \"new\", \"year\"], x = \"p\")",
        "findWordsContaining(words = [\"abcd\", \"efgh\", \"ijkl\", \"mnop\"], x = \"c\")",
        "findWordsContaining(words = [\"banana\", \"cherry\", \"date\"], x = \"ana\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"these\", \"are\", \"words\"], x = \"e\")",
        "findWordsContaining(words = [\"the\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\"], x = \"b\")",
        "findWordsContaining(words = [\"abca\", \"abcd\", \"acd\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\", \"not\", \"python\"], x = \"python\")",
        "findWordsContaining(words = [\"xylophone\", \"bassoon\", \"harp\"], x = \"s\")",
        "findWordsContaining(words = [\"glow\", \"wow\", \"wow\"], x = \"wow\")",
        "findWordsContaining(words = [\"noon\", \"meat\", \"nine\", \"night\", \"dog\"], x = \"n\")"
    ],
    "sample_372": [
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = 'Let code')",
        "sortVowels(s = \"LeoTcEde\")",
        "sortVowels(s = 'The quick brown fox jumps over the lazy dog')",
        "sortVowels(s = 'eLetcedo')",
        "sortVowels(s = 'Let us do it today.')",
        "sortVowels(s = 'Letodcse')",
        "sortVowels(s = 'The output is leetcode')",
        "sortVowels(s = \"Learn to code by coding less!\")"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 3])"
    ],
    "sample_452": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"ababab\")",
        "minChanges(s = \"ababab\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aabba\")",
        "minChanges(s = \"aabc\")",
        "minChanges(s = \"ababaa\")"
    ],
    "sample_385": [
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 8)",
        "countPairs(nums = [1, 2, 3], target = 5)",
        "countPairs(nums=[1, 2, 3, 4], target=5)",
        "countPairs(nums=[1,2,3,4], target=6)",
        "countPairs(nums=[1, 2, 3, 4, 5], target=8)",
        "countPairs(nums = [2,3,4,5], target = 7)",
        "countPairs(nums = [2, 3, 4, 5, 6], target = 9)"
    ],
    "sample_427": [
        "minOperations(nums = [1,1,2,3])",
        "minOperations(nums = [1,1,2,3])",
        "minOperations(nums = [1, 2, 3, 3, 4, 5])",
        "minOperations(nums = [1,1,2,2,3,3,3])",
        "minOperations(nums = [3,3,3,3])",
        "minOperations(nums = [1,1,2,2,2,3,3])",
        "minOperations(nums = [1, 2, 1, 2, 1, 2, 1])",
        "minOperations(nums=[1,2,3,3,3,4,4,4,5])",
        "minOperations(nums = [2,2,2,4,4,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,",
        "minOperations(nums = [2, 3, 3, 5, 2, 2, 1, 1, 3, 2])"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 5, 5])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2])",
        "minLengthAfterRemovals(nums = [2, 3, 3, 3, 5, 5, 5, 5])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 1, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [0, 1, 1, 3, 3])",
        "minLengthAfterRemovals(nums = [1,1,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5])"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 1, 1])",
        "minimumCoins(prices=[1, 1])",
        "minimumCoins(prices=[1, 2, 5])",
        "minimumCoins(prices = [1, 1, 1, 1, 1, 1])",
        "minimumCoins(prices=[1, 5, 6, 8])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"ab\", \"cd\", \"ef\", \"ab\"], x = \"ab\")",
        "findWordsContaining(words = [\"python\", \"is\", \"fun\"], x = \"n\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\", \"haskell\"], x = \"l\")",
        "findWordsContaining(words = [\"ab\", \"cd\", \"ef\", \"cd\"], x = \"cd\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"grape\", \"grapefruit\"], x = \"a\")",
        "findWordsContaining(words = [\"abc\", \"def\", \"bcd\", \"efg\"], x = \"b\")",
        "findWordsContaining(words=['python', 'java', 'kotlin', 'scala'], x='t')",
        "findWordsContaining(words = [\"elephant\", \"rat\", \"eagle\"], x = \"e\")"
    ],
    "sample_420": [
        "minOperations(nums = [5, 4, 3, 2, 1], k = 2)",
        "minOperations(nums = [1, 2, 3, 4], k = 2)",
        "minOperations(nums = [2, 1, 3, 4, 2], k = 2)",
        "minOperations(nums = [2, 2, 3, 1, 2], k = 2)",
        "minOperations(nums = [5, 4, 3, 2, 1, 2], k = 3)",
        "minOperations(nums = [2, 1, 3, 4, 5, 7], k = 2)",
        "minOperations(nums = [2, 3, 5, 7, 8, 10], k = 3)",
        "minOperations(nums = [2, 1, 5, 3], k = 2)",
        "minOperations(nums = [2, 5, 6, 1, 4], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], k = 7)"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1, 2, 3, 4, 6])",
        "isGood(nums = [1, 2, 3, 4, 6])",
        "isGood(nums = [2, 3, 1])",
        "isGood(nums = [1, 2, 4, 5])",
        "isGood(nums = [1, 3, 5])",
        "isGood(nums = [1,2,5])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0])",
        "isGood(nums = [0, 3, 4])",
        "isGood(nums = [2, 1, 3, 4, 6, 5, 7, 8, 10, 9])"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [], target = 0)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 1)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 3)",
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 0)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5, 7, 11], target = 0)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7, 9], target = 100)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5, 7, 9], target = 0)"
    ],
    "sample_365": [
        "isGood(nums = [1, 2, 4])",
        "isGood(nums = [1, 2, 4])",
        "isGood(nums = [1, 2, 4])",
        "isGood(nums = [1, 2, 4, 5])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1,2,3,4,5,6,7])",
        "isGood(nums = [1, 3, 4, 5])",
        "isGood(nums = [2,3,4,5,6,7])",
        "isGood(nums = [1, 2, 3, 4, 6, 8])",
        "isGood(nums = [1,2,3,4,6,8,7])"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [4, 2, 1, 6])",
        "maxSubarrays(nums = [2, 1, 3, 10, 5])",
        "maxSubarrays(nums = [1, 2, 4, 8])",
        "maxSubarrays(nums=[1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 0, 1, 1, 1])",
        "maxSubarrays(nums=[1,1,1,1,1])"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [1], target = 0)",
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 0)",
        "lengthOfLongestSubsequence(nums=[1,2,3], target=4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,1,1,1,1], target = 2)",
        "lengthOfLongestSubsequence(nums = [2, 3], target = 2)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5, 7], target = 2)",
        "lengthOfLongestSubsequence(nums=[1, 3, 5, 7], target=2)",
        "lengthOfLongestSubsequence(nums = [2, 4, 7, 9], target = 9)"
    ],
    "sample_450": [
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"aabbbb\")",
        "minChanges(s = \"010101\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s=\"ababab\")",
        "minChanges(s=\"aabbaa\")",
        "minChanges(s = \"xy\")",
        "minChanges(s = \"caababa\")",
        "minChanges(s = \"abaabbaa\")"
    ],
    "sample_463": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 4, limit = 1)",
        "distributeCandies(n = 2, limit = 1)",
        "distributeCandies(n = 8, limit = 3)",
        "distributeCandies(n = 8, limit = 2)",
        "distributeCandies(n = 1, limit = 1)"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [1, 1, 2, 2])",
        "sumCounts(nums = [1, 1, 2, 3])",
        "sumCounts(nums = [0, 1, 2, 3])",
        "sumCounts(nums = [3, 1, 2])",
        "sumCounts(nums = [2, 1, 1])"
    ],
    "sample_449": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abababab\")",
        "minChanges(s = \"ababab\")",
        "minChanges(s = \"ababab\")",
        "minChanges(s = \"aabba\")",
        "minChanges(s = \"0011\")",
        "minChanges(s = \"aabbaabb\")",
        "minChanges(s = \"aabbaabbaa\")",
        "minChanges(s = \"abacadaba\")"
    ],
    "sample_425": [
        "minOperations(nums = [1, 1, 1])",
        "minOperations(nums = [1, 2, 3])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 1, 2, 2])",
        "minOperations(nums = [1, 1, 2, 3, 3])",
        "minOperations(nums = [1, 2, 2, 2])",
        "minOperations(nums = [1,1,1,1,1])",
        "minOperations(nums=[3,3,3,3,3])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4])",
        "minOperations(nums=[1, 2, 1, 2, 1, 2, 1, 2])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"abz\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"bz\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"aa\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"bc\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"cba\")",
        "canMakeSubsequence(str1 = \"yxz\", str2 = \"ayb\")",
        "canMakeSubsequence(str1 = \"bza\", str2 = \"abz\")",
        "canMakeSubsequence(str1 = \"zaz\", str2 = \"aabc\")",
        "canMakeSubsequence(str1 = \"zxb\", str2 = \"abcz\")"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [0])",
        "minimumSeconds(nums = [0])",
        "minimumSeconds(nums = [1, 2, 3])",
        "minimumSeconds(nums = [1, 2])",
        "minimumSeconds(nums = [1, 3, 2])",
        "minimumSeconds(nums = [1, 1, 1, 1, 1, 1])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])",
        "minimumSeconds(nums=[3,1,3,4,1])",
        "minimumSeconds(nums = [4, 2, 2, 4, 1, 4])"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1], target = 0)",
        "lengthOfLongestSubsequence(nums = [100], target = 99)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 15)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [100, 4, 200, 1, 3, 2], target = 2)",
        "lengthOfLongestSubsequence(nums = [3, 1, 2], target = 1)",
        "lengthOfLongestSubsequence(nums = [9], target = 8)"
    ],
    "sample_370": [
        "sortVowels(s = \"let's code\")",
        "sortVowels(s = \"let's code\")",
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = 'leetcode')",
        "sortVowels(s = 'loTeCede')",
        "sortVowels(s = 'loTEcede')",
        "sortVowels(s='Let us go to the store.')",
        "sortVowels(s = 'EOlctedae')"
    ],
    "sample_421": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [3, 1, 3, 4, 3], k = 2)",
        "minOperations(nums = [2, 1, 5, 2, 2], k = 3)",
        "minOperations(nums = [3, 1, 3, 4, 3], k = 1)",
        "minOperations(nums = [1,1,2,2,3,3,3,4,4,4,4,5,5,5,5,5], k = 3)",
        "minOperations(nums = [2, 3, 4, 7, 6], k = 4)",
        "minOperations(nums = [2, 5, 4, 1, 6], k = 2)",
        "minOperations(nums = [5, 8, 3, 1, 2, 4], k = 3)",
        "minOperations(nums = [4, 8, 9, 9], k = 5)"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 3, 5, 7])",
        "maxSubarrays(nums = [3, 3, 2, 2, 1, 1])",
        "maxSubarrays(nums = [3, 2, 1, 3])",
        "maxSubarrays(nums = [3, 4, 5, 1, 2])",
        "maxSubarrays(nums = [5, 1, 3])",
        "maxSubarrays(nums = [3, 3, 1, 5, 5])",
        "maxSubarrays(nums=[1,2,3,4])",
        "maxSubarrays(nums = [3, 2, 1, 1, 1, 2, 3])",
        "maxSubarrays(nums = [1, 0, 3, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 3, 1, 0, 5, 1])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], k = 1)",
        "countPairs(coordinates = [[0,0],[1,1],[1,0]], k = 1)",
        "countPairs(coordinates = [[0, 1], [1, 0], [1, 1], [0, 0]], k = 1)",
        "countPairs(coordinates = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2]], k = 1)",
        "countPairs(coordinates = [[1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 3], [4, 5], [5, 6], [3, 4], [6, 7], [7, 8]], k = 3)",
        "countPairs(coordinates = [[1, 2], [2, 3], [4, 5], [1, 5], [5, 6], [4, 6], [7, 8], [8, 9]], k = 3)",
        "countPairs(coordinates = [[0, 0], [0, 0], [0, 1], [1, 0], [1, 1], [1, 1], [1, 2], [2, 1]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 3], [2, 4], [5, 6], [7, 8], [8, 9], [1, 5], [1, 6], [3, 4], [4, 5], [6, 7], [7, 8]], k = 3)",
        "countPairs(coordinates = [[1, 2], [2, 3], [4, 5], [3, 4], [1, 3], [5, 6], [4, 6], [4, 5], [2, 4], [6, 7]], k = 2)"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 3)",
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 0)",
        "lengthOfLongestSubsequence(nums = [], target = 2)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 100)",
        "lengthOfLongestSubsequence(nums=[1], target=3)"
    ],
    "sample_445": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums=[1])",
        "sumCounts(nums=[1, 2, 2])",
        "sumCounts(nums=[1,1])",
        "sumCounts(nums = [2, 1, 2, 2])",
        "sumCounts(nums = [1, 2, 2, 2, 3, 3, 3, 3])"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"a\")",
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"ab\")",
        "minimumBeautifulSubstrings(s = \"ab\")",
        "minimumBeautifulSubstrings(s = \"beautiful\")",
        "minimumBeautifulSubstrings(s = \"dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd",
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(s = \"1\")",
        "minimumBeautifulSubstrings(s = \"asdf\")",
        "minimumBeautifulSubstrings(s = \"aaaaaaaaaaaaaaaaaa\")"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 2, 3])",
        "maxSubarrays(nums = [3, 2, 6, 6, 5])",
        "maxSubarrays(nums = [2, 3, 1, 5, 4])",
        "maxSubarrays(nums = [1,1,0,1,1])",
        "maxSubarrays(nums = [1, 2, 3, 0])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 0])",
        "maxSubarrays(nums=[1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 0, 3, 1, 2, 4])",
        "maxSubarrays(nums = [2, 3, 1, 2, 1, 2, 1, 2])"
    ],
    "sample_401": [
        "maxSum(nums = [1, 2, 3], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 2)",
        "maxSum(nums=[1,2,3,4,5], m=3, k=2)",
        "maxSum(nums = [1, 2, 3], m = 4, k = 2)",
        "maxSum(nums = [1, 2], m = 1, k = 2)",
        "maxSum(nums = [0, 0, 0, 0], m = 2, k = 1)",
        "maxSum(nums=[1, 2, 3, 4, 5], m=1, k=3)",
        "maxSum(nums = [-1, -2, -3, -4, -5], m = 2, k = 3)",
        "maxSum(nums=[-1,-2,-3,-4,-5], m=5, k=2)",
        "maxSum(nums = [4, 2, 1, 3], m = 1, k = 1000000000)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3], m = 2, k = 2)",
        "maxSum(A = [1], m = 1, k = 1)",
        "maxSum(A = [1, 2, 3], m = 3, k = 2)",
        "maxSum(A = [1,2,3], m = 2, k = 2)",
        "maxSum(A = [1, 1], m = 1, k = 1)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 10, k = 1)",
        "maxSum(A = [1, 1, 1, 2, 3], m = 2, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 4, k = 4)",
        "maxSum(A = [1, 2, 1, 2, 3, 1, 2, 3], m = 2, k = 5)",
        "maxSum(A = [1,2,3,1,2,3], m = 3, k = 3)"
    ],
    "sample_363": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [1, 2, 3, 4, 4])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7])",
        "isGood(nums = [2, 1, 3, 4])",
        "isGood(nums=[3, 2, 1, 4])",
        "isGood(nums = [0, 2, 1, 4, 3])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [2, 1, 2, 4, 2, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumSeconds(nums=[1,2,3,4,5])",
        "minimumSeconds(nums=[2, 1, 5, 4, 3])",
        "minimumSeconds(nums=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "minimumSeconds(nums = [2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 2, 1, 4, 4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4])"
    ],
    "sample_376": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [0])",
        "minimumSeconds(nums = [1, 3, 2, 4, 5])",
        "minimumSeconds(nums = [1,2,3,4,5,6])",
        "minimumSeconds(nums = [0, 2, 1])",
        "minimumSeconds(nums = [4, 5, 0, 3, 1, 6, 2])"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1, 2, 3])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,1])",
        "minLengthAfterRemovals(nums = [1,1,1,2,2,2])",
        "minLengthAfterRemovals(nums = [3,2,1,3,2,1])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums=[1,1,3,3,3,4])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 1, 1, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [5,5,5,5,5,5,5])",
        "minLengthAfterRemovals(nums = [4, 1, 2, 4, 2, 2, 1, 3, 2, 3, 4, 2])"
    ],
    "sample_399": [
        "maxSum(nums = [1,2,3], m = 2, k = 1)",
        "maxSum(nums = [1, 2, 3], m = 2, k = 1)",
        "maxSum(nums = [1,2], m = 1, k = 1)",
        "maxSum(nums=[1], m=2, k=1)",
        "maxSum(nums=[], m=0, k=0)",
        "maxSum(nums=[1,2,1], m=2, k=2)",
        "maxSum(nums=[0,0], m=1, k=1)",
        "maxSum(nums=[-1,2], m=3, k=1)",
        "maxSum(nums = [3, 1, 4, 2, 2, 1], m = 3, k = 2)",
        "maxSum(nums = [4, 7, 2, 3, 4, 7], m = 2, k = 2)"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3], m = 2, k = 1)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 4)",
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 4)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 1, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 5, k = 5)",
        "maxSum(nums = [1, 2, 3, 4], m = 3, k = 10)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 4, k = 2)",
        "maxSum(nums = [5, 4, 3, 2, 1], m = 3, k = 2)",
        "maxSum(nums=[-1,-2,-3,-4], m=4, k=2)"
    ],
    "sample_364": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums=[1,2,3])",
        "isGood(nums=[1,2,3])",
        "isGood(nums=[2, 3, 4, 5])",
        "isGood(nums = [2,1,3])",
        "isGood(nums = [0, 1, 2, 4, 3])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 1])",
        "minLengthAfterRemovals(nums = [1, 1])",
        "minLengthAfterRemovals(nums = [1,1,1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 3, 3, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [2,2,2,2,2,2,2])",
        "minLengthAfterRemovals(nums=[1,2,3,2,1])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 1, 1, 1])",
        "minLengthAfterRemovals(nums=[3,1,3,4,2])",
        "minLengthAfterRemovals(nums = [6,6,5,5,4,4])"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"l\")",
        "findWordsContaining(words = [\"banana\", \"cherry\", \"apple\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apples\", \"bananas\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"pear\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apples\", \"bananas\", \"cherries\", \"dates\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"anana\"], x = \"ana\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"grape\", \"mango\"], x = \"a\")",
        "findWordsContaining(words = [\"dog\", \"cat\", \"mouse\", \"hamster\"], x = \"at\")",
        "findWordsContaining(words=[\"Babble\", \"Banana\"], x=\"ba\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 1])",
        "minimumCoins(prices = [2, 2, 3, 4, 5, 6, 7, 8])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"01234\")",
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"0\")",
        "minimumBeautifulSubstrings(s = \"0\")",
        "minimumBeautifulSubstrings(s = \"01\")",
        "minimumBeautifulSubstrings(s = \"010\")",
        "minimumBeautifulSubstrings(s = \"01234567890123456789\")",
        "minimumBeautifulSubstrings(s = \"aabab\")",
        "minimumBeautifulSubstrings(s = \"dbba\")",
        "minimumBeautifulSubstrings(s = \"01011001011\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abc\", s2 = \"bad\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bad\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"efgh\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"aab\", s2 = \"bba\")",
        "canBeEqual(s1 = \"abac\", s2 = \"bcba\")",
        "canBeEqual(s1 = \"xyab\", s2 = \"xaby\")",
        "canBeEqual(s1 = \"aceb\", s2 = \"bcaf\")"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ade\")",
        "canMakeSubsequence(str1 = \"bcz\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"cde\")",
        "canMakeSubsequence(str1 = \"abd\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"abcz\", str2 = \"defg\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"za\")",
        "canMakeSubsequence(str1 = \"abd\", str2 = \"acd\")",
        "canMakeSubsequence(str1 = \"aeiou\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abcz\", str2 = \"yabz\")",
        "canMakeSubsequence(str1 = \"def\", str2 = \"cba\")"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 5, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums=[1,2,2,3,3,3,4,4,4,4])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 4])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1,1,1,2,2])",
        "minLengthAfterRemovals(nums = [3,1,2,3,4,2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 1, 4, 5, 6, 5, 4])",
        "minLengthAfterRemovals(nums = [3, 1, 4, 2, 2])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cab\")",
        "canBeEqual(s1 = \"abc\", s2 = \"acb\")",
        "canBeEqual(s1 = \"abc\", s2 = \"acb\")",
        "canBeEqual(s1 = \"abac\", s2 = \"baca\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"aac\", s2 = \"abc\")",
        "canBeEqual(s1 = \"1122\", s2 = \"2211\")",
        "canBeEqual(s1 = \"aacdd\", s2 = \"aabcd\")"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 10)",
        "countPairs(nums=[1, 2, 3, 4], target=5)",
        "countPairs(nums=[1,2,3,4], target=6)",
        "countPairs(nums = [2, 1, 3], target = 6)",
        "countPairs(nums = [2, 2, 3, 5, 7, 8, 9], target = 10)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"abcz\", s2 = \"abza\")",
        "canMakeSubsequence(s1 = \"abz\", s2 = \"abcz\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"axz\")",
        "canMakeSubsequence(s1 = \"zba\", s2 = \"az\")",
        "canMakeSubsequence(s1 = \"yxz\", s2 = \"abc\")",
        "canMakeSubsequence(s1 = \"abcb\", s2 = \"abca\")",
        "canMakeSubsequence(s1 = \"bb\", s2 = \"bab\")",
        "canMakeSubsequence(s1 = \"nqzo\", s2 = \"nqzo\")",
        "canMakeSubsequence(s1 = \"fmaqz\", s2 = \"mazz\")",
        "canMakeSubsequence(s1 = \"zvgfqfq\", s2 = \"vgfqfq\")"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = ['1', '2', '3', 'prev', 'prev', 'prev'])",
        "lastVisitedIntegers(words = [\"4\", \"prev\", \"3\", \"prev\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\",\"2\",\"prev\",\"prev\",\"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = ['1','1','prev','2','prev','prev'])",
        "lastVisitedIntegers(words = [\"3\", \"6\", \"prev\", \"prev\", \"2\"])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[1, 1], [2, 2], [1, 2], [2, 1], [3, 3]], k = 1)",
        "countPairs(coordinates = [[0,0],[1,1],[2,0]], k = 1)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1], [1, 2], [2, 1], [2, 2], [2, 3], [3, 2], [3, 3]], k = 2)",
        "countPairs(coordinates = [[0,0],[1,1],[2,1]], k = 1)",
        "countPairs(coordinates = [[0,0],[1,1],[2,2],[3,3],[4,4]], k = 4)",
        "countPairs(coordinates = [[0,0], [1,1], [1,0], [0,1]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 0], [0, 1], [1, 1], [2, 2]], k = 1)",
        "countPairs(coordinates = [[1, 3], [2, 2], [3, 1], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [11, 11], [12, 12]], k = 5)",
        "countPairs(coordinates = [[0,0], [1,1], [1,0], [0,1], [3,3], [3,2], [2,3], [2,2], [3,1], [1,3]], k = 2)",
        "countPairs(coordinates = [[1,2], [2,3], [4,5], [5,6], [6,7], [7,8], [8,9], [1,5], [2,6], [3,7], [4,8], [5,9]], k = 2)"
    ],
    "sample_451": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"010101\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"abbc\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"ab\")",
        "minChanges(s = \"abcdef\")",
        "minChanges(s = \"axxxy\")"
    ],
    "sample_461": [
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 11, limit = 2)",
        "distributeCandies(n = 12, limit = 4)",
        "distributeCandies(n = 15, limit = 2)",
        "distributeCandies(n=5, limit=2)",
        "distributeCandies(n = 2, limit = 2)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"1234\", s2 = \"1423\")",
        "canBeEqual(s1 = \"1234\", s2 = \"3412\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"1234\", s2 = \"1234\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"caebd\")",
        "canBeEqual(s1 = \"1234\", s2 = \"2134\")"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 1, limit = 1)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 5, limit = 2)"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 35)",
        "accountBalanceAfterPurchase(p = 55)",
        "accountBalanceAfterPurchase(p = 55)",
        "accountBalanceAfterPurchase(p = 20)",
        "accountBalanceAfterPurchase(p = 85)",
        "accountBalanceAfterPurchase(p = 100)",
        "accountBalanceAfterPurchase(p = 65)",
        "accountBalanceAfterPurchase(p = 5)",
        "accountBalanceAfterPurchase(p = 19)",
        "accountBalanceAfterPurchase(p = 13)"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [0, 1, 2, 3])",
        "sumCounts(nums = [2, 1, 2, 1])",
        "sumCounts(nums=[0, 1, 0, 1])",
        "sumCounts(nums = [2, 1, 1, 2, 2])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4])",
        "minimumSeconds(A = [1,2,3,4,5])",
        "minimumSeconds(A = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(A = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(A = [1, 1, 1, 1])",
        "minimumSeconds(A = [1, 1, 1, 1])",
        "minimumSeconds(A = [1,2,3,4])",
        "minimumSeconds(A = [1, 1, 1, 1, 1])",
        "minimumSeconds(A = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"def\")",
        "canMakeSubsequence(str1 = \"a\", str2 = \"z\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ade\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ade\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"cde\")",
        "canMakeSubsequence(str1 = \"bca\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"abz\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"bz\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"acb\")",
        "canMakeSubsequence(str1 = \"xy\", str2 = \"yz\")"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2])",
        "minimumRightShifts(nums = [1, 3, 5])",
        "minimumRightShifts(nums = [1])",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums=[1, 2])",
        "minimumRightShifts(nums=[1, 1, 1])",
        "minimumRightShifts(nums = [0, 1, 2, 3])",
        "minimumRightShifts(nums = [2, 1, 3, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 1, 5])"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1,2], l = 1, r = 2)",
        "countSubMultisets(nums = [1,2,3], l = 1, r = 2)",
        "countSubMultisets(nums = [1,2,3], l = 2, r = 4)",
        "countSubMultisets(nums = [1], l = 0, r = 0)",
        "countSubMultisets(nums = [1, 2], l = 0, r = 2)",
        "countSubMultisets(nums = [3, 3], l = 1, r = 2)",
        "countSubMultisets(nums = [0, 1, 2], l = 0, r = 3)",
        "countSubMultisets(nums = [1, 1, 1, 2, 2], l = 0, r = 2)",
        "countSubMultisets(nums=[3, 5], l=1, r=8)",
        "countSubMultisets(nums = [1, 3, 5, 7, 1], l = 2, r = 10)"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 1, 1, 1, 1])",
        "minimumCoins(prices = [1, 1, 1, 1])",
        "minimumCoins(prices = [1, 2, 1, 1])",
        "minimumCoins(prices=[3,2,5])",
        "minimumCoins(prices = [3, 2, 1, 2, 5])",
        "minimumCoins(prices = [3,2,4,1])",
        "minimumCoins(prices = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1",
        "minimumCoins(prices=[2, 5, 1, 8])",
        "minimumCoins(prices = [4, 2, 0, 1, 1])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [2, 3, 4, 5])",
        "minimumCoins(prices = [1, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 10])",
        "minimumCoins(prices = [5, 1, 2, 10])",
        "minimumCoins(prices = [5, 1, 2, 6])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"3\", \"prev\", \"prev\"])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 2, 3, 3, 3])",
        "minOperations(nums = [1,2,3,3,3])",
        "minOperations(nums = [3,3,3,3])",
        "minOperations(nums = [1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums=[1,1,2,3])",
        "minOperations(nums=[3,3,3,3,3])",
        "minOperations(nums = [1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums=[1,1,2,2,2,3,3,3,4,4,4,5,5,5])",
        "minOperations(nums = [1, 2, 2, 1, 1, 1, 2])",
        "minOperations(nums = [2, 2, 2, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5])"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"pop\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"pop\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"p\", \"p\", \"p\", \"1\", \"2\"])",
        "lastVisitedIntegers(words = [\"push\", \"pop\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words=[\"push\", \"2\", \"push\", \"1\", \"pop\"])",
        "lastVisitedIntegers(words=[\"push\",\"pop\",\"push\",\"pop\",\"push\",\"pop\",\"pop\"])",
        "lastVisitedIntegers(words = ['push', '1', 'push', '2', 'top', 'top', 'top'])"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 3, 2])",
        "minimumSeconds(nums = [1, 1, 1])",
        "minimumSeconds(nums = [5, 1, 3, 4, 2])",
        "minimumSeconds(nums = [7,6,5,4,3,2,1])",
        "minimumSeconds(nums = [2, 1, 5, 1, 2, 2])",
        "minimumSeconds(nums = [7,6,5,9])",
        "minimumSeconds(nums = [5, 7, 3])"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"pear\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"a\", \"b\", \"c\"], x = \"a\")",
        "findWordsContaining(words=['apple', 'banana', 'orange'], x='a')",
        "findWordsContaining(words = [\"abc\", \"def\", \"ab\", \"cde\"], x = \"a\")",
        "findWordsContaining(words = [\"apples\", \"oranges\", \"bananas\", \"grapes\"], x = \"a\")",
        "findWordsContaining(words = [\"python\", \"java\", \"kotlin\", \"ruby\"], x = \"on\")",
        "findWordsContaining(words = [\"sparklers\", \"lemons\", \"balsa\"], x = \"s\")"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 1, 0, 0, 1, 1])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 0])",
        "maxSubarrays(nums = [1, 2, 3, 0])",
        "maxSubarrays(nums = [1, 2, 0, 3, 0])",
        "maxSubarrays(nums = [1, 2, 3, 0, 4])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 0, 1, 1])",
        "maxSubarrays(nums = [2, 1, 3, 4, 5, 6, 7])"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"4\", \"prev\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words=['1', '2', 'prev', 'prev', 'prev'])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"4\", \"8\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"3\", \"9\", \"prev\", \"prev\", \"7\", \"prev\", \"prev\"])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 1, 1, 1, 1], target = 2)",
        "countPairs(nums = [1, 2, 3, 4], target = 7)",
        "countPairs(nums = [1, 2, 3, 4], target = 7)",
        "countPairs(nums=[1, 2, 3, 4, 5], target=9)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abc\", s2 = \"bad\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bad\")",
        "canBeEqual(s1 = \"abac\", s2 = \"baca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cde\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"fghij\")",
        "canBeEqual(s1 = \"even\", s2 = \"odd\")",
        "canBeEqual(s1 = \"abac\", s2 = \"dada\")",
        "canBeEqual(s1 = \"aaca\", s2 = \"bbbd\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\",\"2\",\"prev\",\"prev\",\"3\"])",
        "lastVisitedIntegers(words=[\"1\", \"2\", \"3\", \"4\", \"prev\", \"prev\", \"prev\"])"
    ],
    "sample_464": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n=3, limit=2)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n=5, limit=5)",
        "distributeCandies(n=5, limit=5)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 0, 1])",
        "minimumRightShifts(nums = [1, 0, 1])",
        "minimumRightShifts(nums = [1, 4, 3, 2])",
        "minimumRightShifts(nums = [0, 1, 2, 3])",
        "minimumRightShifts(nums = [2, 1, 3, 5])",
        "minimumRightShifts(nums = [1, 3, 1, 4, 2])",
        "minimumRightShifts(nums = [1,3,0,2,5])",
        "minimumRightShifts(nums = [2, 1, 1, 3])",
        "minimumRightShifts(nums = [1, 4, 2, 7, 6, 8])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"l\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"l\")",
        "findWordsContaining(words = [\"banana\", \"cherry\", \"apple\"], x = \"an\")",
        "findWordsContaining(words = [\"cat\", \"banana\", \"dog\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"kiwi\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"ban\"], x = \"ba\")",
        "findWordsContaining(words = [\"cat\", \"hat\", \"rat\"], x = \"at\")",
        "findWordsContaining(words = [\"banana\", \"cherry\", \"mango\"], x = \"a\")",
        "findWordsContaining(words=[\"banana\", \"ban\"], x=\"ba\")",
        "findWordsContaining(words = [\"animal\", \"banana\", \"tree\"], x = \"a\")"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 3], m = 2, k = 2)",
        "maxSum(nums = [1], m = 2, k = 1)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3], m = 1, k = 2)",
        "maxSum(nums = [1, 2], m = 2, k = 1)",
        "maxSum(nums = [2,2,2,2,2], m = 3, k = 2)",
        "maxSum(nums=[], m=2, k=10)",
        "maxSum(nums = [3, 4, 1], m = 2, k = 3)",
        "maxSum(nums = [0, 0, 1, 2], m = 2, k = 2)",
        "maxSum(nums=[-2, 3, 3, 1, 0, 3], m=2, k=3)"
    ],
    "sample_424": [
        "minOperations(nums = [3,3,3,3,3])",
        "minOperations(nums = [1,1,2,2,3,3,3,3])",
        "minOperations(nums = [3,3,2,1,1])",
        "minOperations(nums=[3,3,3,3,3])",
        "minOperations(nums = [3,3,3,3,4,4,4,4,5,5,5,5])",
        "minOperations(nums = [1,3,3,3,4,4,5,5])",
        "minOperations(nums = [1,1,2,2,3,3,3,4,4,4,4,5,5,5,6,6])",
        "minOperations(nums = [2,2,2,2,3,3])",
        "minOperations(nums = [3,2,3,2,3,6,7])",
        "minOperations(nums = [2,2,1,2,2,2,2,2,2,2,2])"
    ],
    "sample_417": [
        "minOperations(nums = [5, 4, 3, 2, 1], k = 2)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "minOperations(nums = [3, 1, 5, 4, 2], k = 2)",
        "minOperations(nums=[3,1,3,4,3], k=2)",
        "minOperations(nums = [3,1,3,3,2,4,2], k = 3)",
        "minOperations(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], k=5)",
        "minOperations(nums = [5, 1, 4, 2, 8, 10, 11], k = 3)",
        "minOperations(nums = [2, 2, 2, 2, 2, 1, 3, 2, 3], k = 5)",
        "minOperations(nums = [7, 3, 1, 1, 2, 3, 0, 2, 2], k = 4)"
    ],
    "sample_371": [
        "sortVowels(s = 'lYmph')",
        "sortVowels(s = \"lYmph\")",
        "sortVowels(s = \"lYmph\")",
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = 'Lymph')",
        "sortVowels(s = 'lHymp')",
        "sortVowels(s = 'lHmyp')",
        "sortVowels(s = \"lmYpH\")"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 2, limit = 1)",
        "distributeCandies(n = 2, limit = 1)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 4, limit = 2)"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums=[1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [0, 0, 0, 1])"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 1, 0, 0, 1])",
        "maxSubarrays(nums = [2, 3, 4, 5])",
        "maxSubarrays(nums = [1,2,3,0])",
        "maxSubarrays(nums = [0, 1, 1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [3, 2, 6, 4, 1, 5])",
        "maxSubarrays(nums=[0,1,0,1,0])",
        "maxSubarrays(nums = [2, 1, 2, 1, 1])",
        "maxSubarrays(nums = [2, 1, 1, 2, 1])",
        "maxSubarrays(nums=[1, 2, 0, 1, 2, 0, 0, 1, 2, 0])"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 1])",
        "sumCounts(nums=[1])",
        "sumCounts(nums=[2, 2, 2])"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"ab\", s2 = \"cd\")",
        "canBeEqual(s1 = \"abbc\", s2 = \"acbc\")",
        "canBeEqual(s1 = \"attention\", s2 = \"tationatt\")",
        "canBeEqual(s1 = \"abccde\", s2 = \"cdeab\")",
        "canBeEqual(s1 = \"aabccc\", s2 = \"cccaabb\")",
        "canBeEqual(s1 = \"aabc\", s2 = \"aab\")"
    ],
    "sample_380": [
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 6)",
        "countPairs(nums = [1,2,3,4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums=[1,2,3,4], target=5)",
        "countPairs(nums = [1, 1, 1, 1], target = 2)",
        "countPairs(nums=[1, 2, 3, 4, 5], target=6)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 1, 1, 2, 2, 3])",
        "sumCounts(nums = [2, 1, 2, 1, 3])"
    ],
    "sample_368": [
        "sortVowels(s = \"lYmph\")",
        "sortVowels(s = 'lYmph')",
        "sortVowels(s = 'lYmph')",
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmPh\")",
        "sortVowels(s = 'Hlyp')",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = 'mHlyp')",
        "sortVowels(s = \"HmlyLP\")"
    ],
    "sample_462": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 2, limit = 1)",
        "distributeCandies(n = 12, limit = 5)",
        "distributeCandies(n = 30, limit = 20)"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices=[1,2,3,4])",
        "minimumCoins(prices=[1, 2, 5])",
        "minimumCoins(prices = [1, 3, 2, 1])",
        "minimumCoins(prices=[2, 3, 2, 4, 2])",
        "minimumCoins(prices = [2, 2, 3, 3, 1])",
        "minimumCoins(prices = [5, 2, 4, 1, 3, 6, 7, 8, 9, 10])"
    ],
    "sample_426": [
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1])",
        "minOperations(nums = [1])",
        "minOperations(nums = [1, 2, 3, 4, 5])",
        "minOperations(nums = [1, 1, 2, 2, 2, 3, 3])",
        "minOperations(nums = [3,3,3,3])",
        "minOperations(nums = [3, 3, 3, 3, 3])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 1, 2, 2, 2, 2, 2, 2])",
        "minOperations(nums = [1,2,1,2,1,2,1,2,1])"
    ],
    "sample_423": [
        "minOperations(nums = [1, 2, 3, 3, 3])",
        "minOperations(nums = [3,3,3,3,3])",
        "minOperations(nums = [2, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1, 1])",
        "minOperations(nums = [2, 3, 5, 4, 1])",
        "minOperations(nums = [1, 2, 3, 3, 3, 3])",
        "minOperations(nums=[1,2,3])",
        "minOperations(nums = [3,3,3,3,1])",
        "minOperations(nums = [3, 3, 1, 2, 2])"
    ],
    "sample_476": [
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1,2,5])",
        "minimumCoins(prices = [1, 2, 1])",
        "minimumCoins(prices=[1, 2, 3])",
        "minimumCoins(prices = [2, 3, 1])",
        "minimumCoins(prices=[1, 2, 1])",
        "minimumCoins(prices = [1, 2, 1, 1, 2])",
        "minimumCoins(prices=[5, 7, 1, 1])",
        "minimumCoins(prices=[3, 2, 1, 2, 4])",
        "minimumCoins(prices=[1, 5, 7, 2, 4])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [3, 4, 1, 5])",
        "minimumRightShifts(nums = [3,4,5,1,2])",
        "minimumRightShifts(nums = [4, 5, 6, 7])",
        "minimumRightShifts(nums = [1,2,3,4,5,6,7])",
        "minimumRightShifts(nums = [0,1,2,3])",
        "minimumRightShifts(nums=[1, 3, 5])",
        "minimumRightShifts(nums = [2, 1, 0, 4, 3, 6, 5, 7])"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 3, 5, 7, 9])",
        "minimumRightShifts(nums = [1, 3, 5, 7, 9])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums=[1, 2, 3])",
        "minimumRightShifts(nums = [0,0,0])",
        "minimumRightShifts(nums = [2, 5, 1, 3, 6])"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"cd\", s3 = \"ef\")",
        "findMinimumOperations(s1 = \"abx\", s2 = \"aby\", s3 = \"abz\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abe\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"abc\", s3 = \"def\")",
        "findMinimumOperations(s1 = \"qwe\", s2 = \"qwe\", s3 = \"qwe\")",
        "findMinimumOperations(s1 = \"hey\", s2 = \"hey\", s3 = \"hey\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"aabbccdd\", s3 = \"aabbccdd\")",
        "findMinimumOperations(s1 = \"abd\", s2 = \"bad\", s3 = \"bas\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"aabbccd\", s3 = \"aabbcc\")"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"abacb\")",
        "longestSemiRepetitiveSubstring(s = \"abacb\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abdefg\")",
        "longestSemiRepetitiveSubstring(s = \"abacaba\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbaaa\")",
        "longestSemiRepetitiveSubstring(s = \"ababbbab\")",
        "longestSemiRepetitiveSubstring(s = \"babacbaa\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"aba\",\"abb\"])",
        "maximumNumberOfStringPairs(words = [\"aba\",\"ab\",\"abc\",\"abd\"])",
        "maximumNumberOfStringPairs(words = [\"radar\", \"leetcode\", \"codeleet\"])",
        "maximumNumberOfStringPairs(words=['rk', 'kr'])",
        "maximumNumberOfStringPairs(words = ['hank', 'hanna', 'hank'])",
        "maximumNumberOfStringPairs(words = [\"abcde\", \"cba\", \"a\", \"ab\", \"b\", \"cd\", \"edc\"])"
    ],
    "sample_247": [
        "minOperations(s1 = \"abba\", s2 = \"abab\", x = 1)",
        "minOperations(s1 = \"ab\", s2 = \"ac\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"bcd\", x = 2)",
        "minOperations(s1 = \"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "minOperations(s1 = \"b\", s2 = \"a\", x = 1)",
        "minOperations(s1 = \"abac\", s2 = \"abac\", x = 2)",
        "minOperations(s1 = \"abab\", s2 = \"abba\", x = 0)",
        "minOperations(s1 = \"cde\", s2 = \"abc\", x = 1)",
        "minOperations(s1 = \"abcd\", s2 = \"adcb\", x = 5)",
        "minOperations(s1 = \"bad\", s2 = \"bag\", x = 2)"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yx\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"a\"])",
        "maximumNumberOfStringPairs(words = [\"level\", \"lever\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"ab\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"x\", \"y\", \"z\", \"z\"])"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [3,3,2,2,1,1])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3,4,4,5,5])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,2,2,2,2,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [2, 2, 1, 3])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,4,5])",
        "minGroupsForValidAssignment(nums = [2, 3, 1, 2, 1, 2])",
        "minGroupsForValidAssignment(nums=[2, 2, 2, 2, 3, 3, 4, 4])",
        "minGroupsForValidAssignment(nums = [2, 1, 2, 3, 2, 3, 4, 1, 2, 3])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 6, m = 3)",
        "differenceOfSums(n = 7, m = 3)",
        "differenceOfSums(n = 7, m = 3)",
        "differenceOfSums(n = 9, m = 4)"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"1101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101001\", k = 2)",
        "shortestBeautifulSubstring(s = '1011101', k = 2)",
        "shortestBeautifulSubstring(s = \"10011101\", k = 2)",
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = \"11011111100010111111\", k = 2)",
        "shortestBeautifulSubstring(s = '110110110110001', k = 2)",
        "shortestBeautifulSubstring(s = \"101001101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"10101000000000000000000110100000010\", k = 2)",
        "shortestBeautifulSubstring(s
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"bbb\", s3 = \"ccc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"def\")",
        "findMinimumOperations(s1 = \"abab\", s2 = \"bab\", s3 = \"ababab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"cd\", s3 = \"abab\")",
        "findMinimumOperations(s1 = \"baa\", s2 = \"aba\", s3 = \"aab\")",
        "findMinimumOperations(s1 = \"pqrs\", s2 = \"abcd\", s3 = \"ab\")"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abacaba\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"abac\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaab\")",
        "longestSemiRepetitiveSubstring(s = \"abacabb\")",
        "longestSemiRepetitiveSubstring(s = \"ababccd\")",
        "longestSemiRepetitiveSubstring(s = \"abbbbccbbbb\")",
        "longestSemiRepetitiveSubstring(s = \"abbaabbaab\")"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1=[1, 2, 3], nums2=[4, 5, 6])",
        "minSum(nums1 = [2, 3], nums2 = [4, 5])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [2, 2, 2, 2])",
        "minSum(nums1=[1, 3], nums2=[2, 4])",
        "minSum(nums1=[1, 1, 0, 1], nums2=[0, 0, 1, 1])",
        "minSum(nums1=[0, 0, 0, 0, 0, 0], nums2=[0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5])",
        "minSum(nums1 = [2, 1, 3, 1, 5], nums2 = [8, 0, 2, 0, 0])"
    ],
    "sample_289": [
        "minimumSteps(s = \"1\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"00\")",
        "minimumSteps(s = '101010')",
        "minimumSteps(s = \"100000\")",
        "minimumSteps(s = \"0000000\")",
        "minimumSteps(s = \"1000101\")",
        "minimumSteps(s = \"011000\")"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [])",
        "maximumTripletValue(nums = [])",
        "maximumTripletValue(nums = [3, 2, 1])",
        "maximumTripletValue(nums = [2, 1, 2])",
        "maximumTripletValue(nums = [-1, 0, 2])",
        "maximumTripletValue(nums = [-1,0,1,2,-1,-4])",
        "maximumTripletValue(nums = [4, 2, 6])"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"abc\", k = 1)",
        "beautifulSubstrings(s = \"abcd\", k = 1)",
        "beautifulSubstrings(s = \"beautiful\", k = 3)",
        "beautifulSubstrings(s = \"abcde\", k = 1)",
        "beautifulSubstrings(s = \"ab\", k = 2)",
        "beautifulSubstrings(s = \"hello world\", k = 1)",
        "beautifulSubstrings(s = \"beautifullll\", k = 3)",
        "beautifulSubstrings(s = \"pabab\", k = 1)",
        "beautifulSubstrings(s = \"qweaert\", k = 2)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"123\")",
        "minimumBeautifulSubstrings(s = \"1234\")",
        "minimumBeautifulSubstrings(s = \"12345\")",
        "minimumBeautifulSubstrings(s = \"0123456789\")",
        "minimumBeautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "minimumBeautifulSubstrings(s = \"11\")",
        "minimumBeautifulSubstrings(s = \"55555\")",
        "minimumBeautifulSubstrings(s = \"abaa\")",
        "minimumBeautifulSubstrings(s = \"abdcd\")",
        "minimumBeautifulSubstrings(s = \"00101000001\")"
    ],
    "sample_313": [
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[0]])",
        "matrixSum(a = [[0,1]])",
        "matrixSum(a = [[0, 1, 2], [3, 4, 5]])",
        "matrixSum(a = [[1, 1]])",
        "matrixSum(a = [[1,1,1]])",
        "matrixSum(a = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "matrixSum(a = [[-1, 0], [0, -1]])",
        "matrixSum(a = [[0, 1, 0], [1, 1, 0], [1, 1, 1]])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [1, 3], nums2 = [2, 4])",
        "minSum(nums1 = [1,2,3,4,0], nums2 = [4,3,2,1,0])",
        "minSum(nums1 = [2, 3, 0, 1], nums2 = [4, 5, 0, 0])",
        "minSum(nums1=[0,1,2], nums2=[0,0,0])",
        "minSum(nums1 = [1, 3, 0, 5], nums2 = [1, 0, 2, 4])",
        "minSum(nums1 = [2, 3, 0, 5], nums2 = [2, 5, 6, 0])"
    ],
    "sample_282": [
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [2, 3, 4, 5])",
        "minOperations(nums1 = [1,2,3], nums2 = [3,2,1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 3, 2])",
        "minOperations(nums1 = [1,2,3], nums2 = [2,3,4])",
        "minOperations(nums1=[1,1,1], nums2=[2,2,2])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [2, 1, 3, 5])",
        "minOperations(nums1 = [1,3,5], nums2 = [2,3,4])",
        "minOperations(nums1 = [3, 2, 1], nums2 = [2, 3, 1])",
        "minOperations(nums1 = [4,1,3], nums2 = [2,3,5])",
        "minOperations(nums1 = [4, 5, 3, 1], nums2 = [1, 3, 4, 5])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1, 2, 2, 2, 2])",
        "alternatingSubarray(nums = [1, 2, 2, 2, 2])",
        "alternatingSubarray(nums = [1, 2, 2, 2, 2])",
        "alternatingSubarray(nums = [1, 2, 2, 2, 2])",
        "alternatingSubarray(nums=[1, 2, 2, 2, 2])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 3, 4])",
        "alternatingSubarray(nums = [1,2,2,2,2,6,6,6,6,7,7,7,7])",
        "alternatingSubarray(nums = [1, 2, 2, 2, 2, 4, 4, 4])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 3], money = 1)",
        "buyChoco(prices = [1, 2], money = 3)",
        "buyChoco(prices = [1, 3, 5], money = 2)",
        "buyChoco(prices = [10, 10, 20], money = 10)",
        "buyChoco(prices = [3, 5, 10], money = 8)",
        "buyChoco(prices = [5, 10, 15, 20], money = 5)",
        "buyChoco(prices = [4, 3, 1], money = 10)",
        "buyChoco(prices = [50, 40, 20], money = 50)",
        "buyChoco(prices=[2, 5, 1], money=3)",
        "buyChoco(prices = [10, 20, 5, 3], money = 25)"
    ],
    "sample_302": [
        "countSeniors(details = ['12345678901', '23456789012', '34567890123'])",
        "countSeniors(details = [\"A1234567890123456\", \"B1234567890123456\", \"C1234567890123456\", \"D1234567890123456\", \"E1234567890123456\"])",
        "countSeniors(details = [\"198004010000\", \"199006010000\"])",
        "countSeniors(details = [\"Alice Smith 2000-01-01\", \"Bob Johnson 1969-01-01\", \"Charlie Brown 1990-01-01\"])",
        "countSeniors(details = [\"abcdefg1970\", \"hijklmnop1980\", \"qrstuvwx1965\", \"yzABCDEFG1955\"])",
        "countSeniors(details = [\"111-11-1111\", \"2001-11-11\", \"1989-12-12\"])",
        "countSeniors(details = [\"21/12/1967\", \"12/02/1990\", \"23/05/1980\"])",
        "countSeniors(details = [\"JohnDoe19800202\", \"JaneDoe19671207\", \"BobSmith19990505\"])",
        "countSeniors(details = [\"Steve_23_M\", \"Lily_21_F\", \"Tom_58_M\", \"Bob_65_M\"])",
        "countSeniors(details = [\"Liu 12 30 2011\", \"Wang 15 20 2005\", \"Zhang 22 35 1985\"])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyz\", k = 1)",
        "beautifulSubstrings(s = \"hello\", k = 1)",
        "beautifulSubstrings(s = \"abcdefg\", k = 3)",
        "beautifulSubstrings(s = \"leetcode\", k = 2)",
        "beautifulSubstrings(s = \"abacad\", k = 2)",
        "beautifulSubstrings(s = \"abacax\", k = 2)",
        "beautifulSubstrings(s = 'aeiou', k = 5)",
        "beautifulSubstrings(s = \"w\", k = 2)",
        "beautifulSubstrings(s = \"bcdfghjklmnopqrstuvwxyzaeiou\", k = 2)",
        "beautifulSubstrings(s = \"fjgkh\", k = 1)"
    ],
    "sample_255": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [3,4,5,6,7])",
        "minimumSum(nums = [2, 1, 5, 6, 4, 3])",
        "minimumSum(nums = [4,6,7,8])",
        "minimumSum(nums = [1,2,3,4,5,6,7])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumSum(nums = [1, 3, 4, 5])",
        "minimumSum(nums=[5,4,3,2,1])",
        "minimumSum(nums=[4,1,2,6,5])",
        "minimumSum(nums=[6, 3, 1, 2, 4, 5])"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [5, 4, 3, 2, 1])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,3,4,5,6])",
        "minGroupsForValidAssignment(nums = [2,2,1,2,1,2])",
        "minGroupsForValidAssignment(nums = [12, 10, 8, 6, 4, 2, 2, 2, 2, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [2, 3, 5, 5, 7, 7, 7])",
        "minGroupsForValidAssignment(nums = [1,2,1,1,1,3,1,1,1,2,3])"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 5])",
        "alternatingSubarray(nums = [1, 2, 4, 5, 7])",
        "alternatingSubarray(nums = [1, 3, 2, 3, 1])",
        "alternatingSubarray(nums = [1,2,2,3,3,4])",
        "alternatingSubarray(nums = [1, 2, 1, 3, 5])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 3, 2, 4, 5])",
        "alternatingSubarray(nums = [2,3,5,6,2,1,5,7,9])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = \"10101\", k = 2)",
        "shortestBeautifulSubstring(s = '10111', k = 2)",
        "shortestBeautifulSubstring(s = \"11010110\", k = 2)",
        "shortestBeautifulSubstring(s = \"111101\", k = 2)",
        "shortestBeautifulSubstring(s = '10101111', k = 3)",
        "shortestBeautifulSubstring(s = '1010101010101001', k = 3)",
        "shortestBeautifulSubstring(s = \"11010010010010001\", k = 2)",
        "shortestBeautifulSubstring(s = \"010101000000000000001010101000000000000010101010000000000000101010100000000000001010101000000000000010101010000000000000101010100000000000001010101000000000000010101010000000000000101010100000000000001010101000000000000010101010000000000000101010100000000000001010101000000000000010101010000000000000101010100000000000001010101000000000000010101010000000000000101010100000000000001010101000000000000010101010000000000000101010100000000000001010101000000000000010101010000000000000101010100000000000001010101000000000000010101010000000000000101010",
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = \"1001110010101001101101000011000101110011000110110001011011110011101101111011110001\", k = 2)"
    ],
    "sample_293": [
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"001\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"01\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"00100\")",
        "minimumSteps(s = \"11001\")",
        "minimumSteps(s = \"11001\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"abcdabcd\")",
        "longestSemiRepetitiveSubstring(s = \"ababaab\")",
        "longestSemiRepetitiveSubstring(s = \"abcdcde\")",
        "longestSemiRepetitiveSubstring(s = \"aabaab!\")",
        "longestSemiRepetitiveSubstring(s = \"abdefghijk\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbcc\")",
        "longestSemiRepetitiveSubstring(s = \"abbbbbbbbbbbbbbbbbbbb\")",
        "longestSemiRepetitiveSubstring(s = \"asdassdasssssssssssssssssssssss\")"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [3,1,1,2,2,2])",
        "minGroupsForValidAssignment(nums = [3, 1, 1, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6])",
        "minGroupsForValidAssignment(nums = [1,2,1,2,1])",
        "minGroupsForValidAssignment(nums = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5",
        "minGroupsForValidAssignment(nums = [2,2,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [2,3,2,2,2])",
        "minGroupsForValidAssignment(nums = [2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minGroupsForValidAssignment(nums = [4, 1, 2, 3, 3, 4])"
    ],
    "sample_307": [
        "countSeniors(details = [\"2000/01/01\", \"2000/01/02\"])",
        "countSeniors(details = [\"1995-01-01\", \"1995-01-01\", \"1995-01-01\"])",
        "countSeniors(details=[\"2001-01-01\", \"1965-01-01\", \"2010-01-01\"])",
        "countSeniors(details = [\"1990\", \"1972\", \"1965\", \"1950\"])",
        "countSeniors(details = [\"Jones, 24, 1956\", \"Smith, 34, 1985\", \"Anderson, 44, 1977\", \"Garcia, 55, 1965\"])",
        "countSeniors(details = [\"19900201-1234\", \"19850615-2222\"])",
        "countSeniors(details = [\"23461990\", \"34561989\", \"23461950\", \"56782000\"])",
        "countSeniors(details = [\"Ram_1999_01_01_1234\",\"Shyam_2000_02_02_2345\",\"Mohan_1988_03_03_3456\"])",
        "countSeniors(details = [\"19730405\", \"19811020\", \"19771230\", \"19840505\"])",
        "countSeniors(details = ['20032004-12-31', '19872008-09-16', '19722011-11-26'])"
    ],
    "sample_290": [
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"0110\")",
        "minimumSteps(s = \"0110100\")",
        "minimumSteps(s = \"00000000000000\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [2], moveFrom = [2], moveTo = [2])",
        "relocateMarbles(nums=[1,2], moveFrom=[1], moveTo=[2])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [1,1,2,2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums=[1, 1, 2], moveFrom=[1], moveTo=[2])",
        "relocateMarbles(nums = [1, 2, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [2,2], moveFrom = [1,1], moveTo = [2,2])",
        "relocateMarbles(nums = [1, 2, 2, 3, 4], moveFrom = [2], moveTo = [4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8], moveFrom = [3, 5, 7], moveTo = [2, 4, 6])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3])",
        "alternatingSubarray(nums = [0, 1, 0])",
        "alternatingSubarray(nums = [0, 1, 0, 1, 1, 0])",
        "alternatingSubarray(nums = [1,2,3,2,1])",
        "alternatingSubarray(nums=[1,2,3,4])",
        "alternatingSubarray(nums = [4, 2, 4, 2, 4, 2])",
        "alternatingSubarray(nums = [4, 2, 1, 2])",
        "alternatingSubarray(nums = [4, 1, 2, 3, 4])",
        "alternatingSubarray(nums = [3, 2, 4, 1, 5, 3])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"abaac\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"abcd\", k = 2)",
        "beautifulSubstrings(s = \"a\", k = 2)",
        "beautifulSubstrings(s = \"a\", k = 2)",
        "beautifulSubstrings(s = \"abc\", k = 1)",
        "beautifulSubstrings(s = \"abacaba\", k = 7)",
        "beautifulSubstrings(s = \"asdfg\", k = 2)",
        "beautifulSubstrings(s = \"abcaab\", k = 2)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [0, 1, 2])",
        "maximumTripletValue(nums = [0,0,0])",
        "maximumTripletValue(nums=[-1,0,1])",
        "maximumTripletValue(nums = [0, 1, 2, 3, 4, 5])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abab\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"d\", \"d\"])",
        "maximumNumberOfStringPairs(words = [\"abcde\", \"edcba\", \"aabb\"])",
        "maximumNumberOfStringPairs(words = [\"aab\",\"bba\",\"abb\",\"bbc\"])",
        "maximumNumberOfStringPairs(words=[\"aba\",\"aba\",\"aab\"])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n = 4, m = 3)",
        "differenceOfSums(n = 4, m = 3)",
        "differenceOfSums(n = 7, m = 3)"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 3, 4], money = 3)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 3)",
        "buyChoco(prices = [2, 3, 4], money = 5)",
        "buyChoco(prices = [10, 20, 30], money = 30)",
        "buyChoco(prices = [50, 50, 100], money = 100)",
        "buyChoco(prices = [100, 50, 150], money = 200)",
        "buyChoco(prices = [50, 40, 100], money = 90)",
        "buyChoco(prices = [1, 1, 100], money = 3)",
        "buyChoco(prices = [1, 1, 2, 2, 3, 3], money = 6)",
        "buyChoco(prices=[4, 5, 6, 7], money=12)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bca\"])",
        "maximumNumberOfStringPairs(words=['ab', 'ba'])",
        "maximumNumberOfStringPairs(words=['ab', 'ba'])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yz\", \"zx\"])"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"abba\")",
        "longestSemiRepetitiveSubstring(s = \"aabab\")",
        "longestSemiRepetitiveSubstring(s = \"aabab\")",
        "longestSemiRepetitiveSubstring(s = \"aabacbebebe\")",
        "longestSemiRepetitiveSubstring(s = \"ababc\")",
        "longestSemiRepetitiveSubstring(s = \"ababaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaab\")",
        "longestSemiRepetitiveSubstring(s = \"bbbab\")",
        "longestSemiRepetitiveSubstring(s = \"dddd\")",
        "longestSemiRepetitiveSubstring(s = \"ababbbabbababa\")"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"cat\",\"bt\",\"hat\",\"tree\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"bird\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"cat\", \"cat\"])",
        "minimizeConcatenatedLength(words = ['cat','dog','rat'])",
        "minimizeConcatenatedLength(words = [\"cat\",\"dog\",\"catdog\",\"dogcat\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"rat\", \"mat\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"mouse\", \"dog\", \"tree\"])",
        "minimizeConcatenatedLength(words=['cat', 'dog', 'cats', 'dogg', 'doggo'])",
        "minimizeConcatenatedLength(words = [\"ar\", \"bb\", \"am\"])"
    ],
    "sample_323": [
        "isFascinating(n = 1)",
        "isFascinating(n = 11)",
        "isFascinating(n = 6)",
        "isFascinating(n = 6)",
        "isFascinating(n = 23)",
        "isFascinating(n = 50)",
        "isFascinating(n = 1001)",
        "isFascinating(n = 46)",
        "isFascinating(n = 110)",
        "isFascinating(n = 198)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"abacb\")",
        "longestSemiRepetitiveSubstring(s = \"abacb\")",
        "longestSemiRepetitiveSubstring(s = \"aabab\")",
        "longestSemiRepetitiveSubstring(s = \"aabab\")",
        "longestSemiRepetitiveSubstring(s = \"aaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbcdee\")",
        "longestSemiRepetitiveSubstring(s = \"abcabca\")",
        "longestSemiRepetitiveSubstring(s = \"abacbade\")",
        "longestSemiRepetitiveSubstring(s = \"abcdeed\")",
        "longestSemiRepetitiveSubstring(s = \"abbbbbccb\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"2000-01-01\", \"2000-01-01\"])",
        "countSeniors(details = [\"111111111111\", \"111111111111\", \"111111111111\"])",
        "countSeniors(details = [\"22/01/2001\"])",
        "countSeniors(details = [\"22/07/1980\"])",
        "countSeniors(details = [\"21/12/1990\", \"23/04/1998\"])",
        "countSeniors(details = [\"19890228111111\", \"20001111111111\"])",
        "countSeniors(details = [\"1000980920020807\", \"1000980920020808\", \"1000980920020809\"])",
        "countSeniors(details = [\"s02\", \"age12\", \"s03\", \"age32\", \"s04\", \"age42\"])",
        "countSeniors(details = [\"199801010010\", \"200112200032\", \"200405100005\"])",
        "countSeniors(details = [\"Bruce,19,F,1234\",\"Alan,45,M,5678\",\"Steve,67,M,9101\"])"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [3,1,1,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [3, 1, 1, 2])",
        "minGroupsForValidAssignment(nums = [1, 1, 1])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [2, 3, 1, 2])",
        "minGroupsForValidAssignment(nums = [2,2,1])",
        "minGroupsForValidAssignment(nums = [1, 1, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [5, 3, 3, 1, 1, 1, 2, 2, 2, 4])"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [])",
        "minimumSum(nums = [2, 3, 4, 5])",
        "minimumSum(nums = [8])",
        "minimumSum(nums = [4, 2, 1, 2, 5])",
        "minimumSum(nums = [2, 3, 5, 5])",
        "minimumSum(nums = [3, 1, 4, 2, 5, 1, 2, 3])"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"abab\", \"ab\"])",
        "maximumNumberOfStringPairs(words=[\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"level\",\"me\"])",
        "maximumNumberOfStringPairs(words = [\"ana\", \"na\", \"nana\"])",
        "maximumNumberOfStringPairs(words=['abcd', 'dcba', 'ab'])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aaa\", \"aab\", \"baa\"])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = '10111', k = 3)",
        "shortestBeautifulSubstring(s = \"1101101101\", k = 2)",
        "shortestBeautifulSubstring(s = '1001101001', k = 2)",
        "shortestBeautifulSubstring(s = \"11100011101\", k = 2)",
        "shortestBeautifulSubstring(s = \"100011101\", k = 2)",
        "shortestBeautifulSubstring(s = \"111000111000111000111\", k = 3)",
        "shortestBeautifulSubstring(s = '1100110110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s = \"001001101100\", k = 2)",
        "shortestBeautifulSubstring(s = '1110010001111110000', k = 4)",
        "shortestBeautifulSubstring(s = \"0110111011001110111110111101111101101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [1, 4, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [3, 8, 1, 5, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 5, 3, 8, 9], limit = 3)",
        "lexicographicallySmallestArray(nums = [8, 1, 5, 3, 9], limit = 3)",
        "lexicographicallySmallestArray(nums = [8, 5, 1, 9, 3], limit = 7)",
        "lexicographicallySmallestArray(nums = [2, 1, 5, 8, 9], limit = 3)",
        "lexicographicallySmallestArray(nums = [5, 8, 9, 3, 1], limit = 1)",
        "lexicographicallySmallestArray(nums = [8, 1, 5, 3, 9], limit = 4)",
        "lexicographicallySmallestArray(nums = [1, 3, 8, 9, 5], limit = 10)",
        "lexicographicallySmallestArray(nums = [5, 2, 3, 8, 6], limit = 4)"
    ],
    "sample_310": [
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum(a = [[1], [0]])",
        "matrixSum(a = [[1, 0], [0, 1]])",
        "matrixSum(a = [[0,1],[1,0]])",
        "matrixSum(a = [[2, 1], [3, 4]])",
        "matrixSum(a = [[0, -1], [1, 0]])",
        "matrixSum(a = [[-1, -2], [1, 2]])",
        "matrixSum(a = [[0, 1, 1, 2], [2, 2, 2, 2], [3, 3, 3, 3]])"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"abcdefg\", k = 3)",
        "beautifulSubstrings(s = \"abcdefg\", k = 3)",
        "beautifulSubstrings(s = \"abacabadabacaba\", k = 3)",
        "beautifulSubstrings(s = \"beautiful\", k = 1)",
        "beautifulSubstrings(s = \"aabacbebeb\", k = 3)",
        "beautifulSubstrings(s = 'abacaba', k = 2)",
        "beautifulSubstrings(s = \"google\", k = 2)",
        "beautifulSubstrings(s = \"aabbbaaa\", k = 2)",
        "beautifulSubstrings(s = \"bbaaaca\", k = 4)"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"level\", \"lever\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"level\", \"java\", \"python\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"car\", \"dog\", \"god\"])",
        "maximumNumberOfStringPairs(words = [\"level\", \"level\", \"level\", \"wave\"])",
        "maximumNumberOfStringPairs(words = [\"level\", \"java\", \"kotlin\"])",
        "maximumNumberOfStringPairs(words=[\"abba\", \"abcd\", \"abca\"])",
        "maximumNumberOfStringPairs(words = [\"racecar\", \"cat\", \"mouse\"])",
        "maximumNumberOfStringPairs(words = [\"level\", \"words\", \"happy\", \"lead\"])",
        "maximumNumberOfStringPairs(words = [\"level\",\"love\",\"situate\",\"videotape\"])"
    ],
    "sample_325": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 1)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 15)",
        "isFascinating(n = 5)",
        "isFascinating(n = 4)",
        "isFascinating(n = 20)",
        "isFascinating(n = 20)",
        "isFascinating(n = 46)"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [0, 0, 0, 0])",
        "maximumTripletValue(nums = [2, 3, 4])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [5, 1, 2])",
        "maximumTripletValue(nums = [2, 4, 3])"
    ],
    "sample_312": [
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6]])",
        "matrixSum(nums = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "matrixSum(nums = [[1,2,3,4,5],[6,7,8,9,10]])",
        "matrixSum(nums = [[1], [0]])",
        "matrixSum(nums = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]])",
        "matrixSum(nums = [[0,0],[1,1]])",
        "matrixSum(nums = [[-1,2,1],[-3,1,3]])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [3, 2, 1])",
        "minOperations(a = [1, 2, 3, 4], b = [2, 1, 4, 3])",
        "minOperations(a = [1, 2, 3, 4], b = [2, 1, 4, 3])",
        "minOperations(a = [1, 2], b = [3, 4])",
        "minOperations(a = [1, 2, 3], b = [1, 2, 3])",
        "minOperations(a = [1, 2], b = [1, 2])",
        "minOperations(a=[1, 2, 3], b=[4, 5, 6])",
        "minOperations(a = [1, 3, 2, 4], b = [2, 4, 1, 3])",
        "minOperations(a = [4, 2, 3], b = [5, 1, 6])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1, 1, 1], nums2 = [2, 2, 2])",
        "minOperations(nums1 = [1,2,3,4], nums2 = [2,3,4,5])",
        "minOperations(nums1 = [1,1,1], nums2 = [2,2,2])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [2, 3, 1, 4])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 4])",
        "minOperations(nums1 = [3, 2, 1], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1,3], nums2 = [2,3])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 5])",
        "minOperations(nums1 = [2,4,3], nums2 = [1,2,3])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [2, 2, 2])",
        "maximumTripletValue(nums = [5, 5, 5])",
        "maximumTripletValue(nums = [4, 5, 1, 2])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"110100010\", k = 3)",
        "shortestBeautifulSubstring(s = \"1111\", k = 4)",
        "shortestBeautifulSubstring(s = \"01010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"0000000000000000000\", k = 2)",
        "shortestBeautifulSubstring(s = \"11011110\", k = 3)",
        "shortestBeautifulSubstring(s = '000', k = 2)",
        "shortestBeautifulSubstring(s = \"110110110\", k = 3)",
        "shortestBeautifulSubstring(s = \"00100101001\", k = 3)",
        "shortestBeautifulSubstring(s = \"1101000110010110110001011100111011101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s = \"1101100110001011000011111011011110111111110011001111110111111110001111111101111111111111111111111100111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    ],
    "sample_256": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,4,2])",
        "minimumSum(nums = [2, 3, 4, 5])",
        "minimumSum(nums = [2, 3, 4, 5])",
        "minimumSum(nums = [5, 2, 1, 4, 3])",
        "minimumSum(nums = [5,2,1,2,4])",
        "minimumSum(nums = [3, 5, 3, 2, 4])",
        "minimumSum(nums = [2, 3, 5, 7, 1, 3, 4])",
        "minimumSum(nums = [1,3,4,3,2,1])",
        "minimumSum(nums = [4,5,2,5,1,6])"
    ],
    "sample_291": [
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"00000000\")",
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"10000\")",
        "minimumSteps(s = '01')",
        "minimumSteps(s = \"0111011\")",
        "minimumSteps(s = \"00010101001\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1, 2], nums2 = [2, 1])",
        "minOperations(nums1 = [1, 2], nums2 = [2, 1])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [4, 3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [2, 3, 4, 1])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 3, 2, 4])",
        "minOperations(nums1 = [1,2,3,4], nums2 = [4,3,2,1])",
        "minOperations(nums1 = [1,2,3,4], nums2 = [4,3,2,1])",
        "minOperations(nums1 = [1,2,3], nums2 = [1,2,3])",
        "minOperations(nums1 = [1, 1, 1, 1], nums2 = [1, 1, 1, 2])"
    ],
    "sample_277": [
        "findChampion(grid = [[1, 2, 3], [4, 0, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0], [0, 0]])",
        "findChampion(grid = [[1,2,3],[4,0,6],[7,8,9]])",
        "findChampion(grid = [[0, 0, 0, 1], [0, 1, 0, 0], [0, 0, 1, 0], [1, 0, 0, 0]])",
        "findChampion(grid = [[1, 1, 1, 1], [1, 1, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]])",
        "findChampion(grid = [[0, 2, 0], [0, 0, 1], [0, 0, 1]])",
        "findChampion(grid = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]])",
        "findChampion(grid = [[0,0,1,1,1,1,1,1], [0,0,1,1,1,1,1,1], [0,0,1,1,1,1,1,1], [0,0,1,1,1,1,1,1], [0,0,1,1,1,1,1,1], [0,0,1,1,1,1,1,1], [0,0,1,1,1,1,1,1], [0,0,1,1,1,1,1,1]])",
        "findChampion(grid = [[1,1,0,0,0],[0,0,0,1,1],[1,0,0,0,0],[1,0,0,0,0],[0,1,1,0,0]])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 100, m = 3)",
        "differenceOfSums(n = 7, m = 3)",
        "differenceOfSums(n = 20, m = 2)",
        "differenceOfSums(n = 9, m = 5)",
        "differenceOfSums(n=9, m=4)"
    ],
    "sample_292": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"010101\")",
        "minimumSteps(s = \"1011\")",
        "minimumSteps(s = \"11011\")",
        "minimumSteps(s = \"10101010\")",
        "minimumSteps(s = \"0001011101\")",
        "minimumSteps(s = \"11111110\")"
    ],
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2])",
        "alternatingSubarray(nums = [0, 1, 0, 1])",
        "alternatingSubarray(nums = [3, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1,2,3,2,1])",
        "alternatingSubarray(nums = [2, 3, 4, 5, 6])",
        "alternatingSubarray(nums=[1, 4, 2, 3])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 4, 4, 5, 6])"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [2], moveFrom = [], moveTo = [])",
        "relocateMarbles(nums=[2], moveFrom=[], moveTo=[])",
        "relocateMarbles(nums = [1,2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums=[1], moveFrom=[], moveTo=[2])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 2], moveTo = [4, 3])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [2, 2, 2])",
        "maximumTripletValue(nums = [0, 1, 2])"
    ],
    "sample_273": [
        "findChampion(grid = [[0, 0], [0, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [1, 1, 1], [2, 2, 2]])",
        "findChampion(grid = [[0,1,2], [3,4,5], [6,7,8]])",
        "findChampion(grid = [[1, 1, 0], [0, 0, 1], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 1, 1, 1], [1, 0, 1, 1], [1, 1, 1, 1]])",
        "findChampion(grid=[[0,1,2], [0,0,2], [0,1,2]])",
        "findChampion(grid = [[1,1,0,0,1], [0,1,0,1,1], [1,1,1,1,1], [0,1,0,1,1], [0,1,0,1,1]])",
        "findChampion(grid = [[1, 0, 2, 3], [0, 0, 0, 2], [1, 2, 0, 1], [1, 2, 2, 0]])"
    ],
    "sample_267": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2], nums2 = [3, 4])",
        "minSum(nums1 = [1, 2], nums2 = [3, 4])",
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1=[1,2,3], nums2=[1,2,3])",
        "minSum(nums1 = [0, 0], nums2 = [0, 0])",
        "minSum(nums1=[3,3,3], nums2=[1,1,1])",
        "minSum(nums1=[3,2,1], nums2=[3,3,3])",
        "minSum(nums1=[0,0,0,0,0,0], nums2=[1,1,1,1,1,1])",
        "minSum(nums1 = [1, 1, 1, 1], nums2 = [0, 0, 1])"
    ],
    "sample_294": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"1\")",
        "minimumSteps(s = \"01\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = '101')",
        "minimumSteps(s = '1')",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"0111011010\")"
    ],
    "sample_274": [
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 0], [0, 1]])",
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[1, -1], [1, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[1,0,1],[1,1,0],[0,1,1]])",
        "findChampion(grid = [[1, 0, 1], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[-1,-2,-3,-4],[-5,-6,-7,-8],[-9,-10,-11,-12],[-13,-14,-15,-16]])"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [3, 3, 2, 1, 1])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,3])",
        "minGroupsForValidAssignment(nums = [4,4,4])",
        "minGroupsForValidAssignment(nums = [4,5,6,7])",
        "minGroupsForValidAssignment(nums=[1, 1, 1, 1, 1])",
        "minGroupsForValidAssignment(nums=[3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minGroupsForValidAssignment(nums = [5, 2, 3, 7, 4, 5])",
        "minGroupsForValidAssignment(nums = [2, 1, 2, 2, 4, 2, 2, 1, 4])"
    ],
    "sample_270": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2], nums2 = [3, 4])",
        "minSum(nums1 = [1, 2], nums2 = [3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 3, 5], nums2 = [2, 4, 6])",
        "minSum(nums1 = [2, 1], nums2 = [1, 2])",
        "minSum(nums1=[1, 2], nums2=[3, 4, 5])",
        "minSum(nums1 = [1, 0, 0, 1], nums2 = [1, 1, 1, 0])",
        "minSum(nums1 = [3, 2, 5], nums2 = [1, 3, 4])"
    ],
    "sample_317": [
        "buyChoco(prices = [1, 2, 3, 4], money = 4)",
        "buyChoco(prices = [2,3,4], money = 5)",
        "buyChoco(prices = [3, 2, 4], money = 5)",
        "buyChoco(prices = [10, 20, 30, 40], money = 40)",
        "buyChoco(prices = [1, 5, 6], money = 10)",
        "buyChoco(prices = [5, 6, 7], money = 6)",
        "buyChoco(prices = [5, 2, 3, 4], money = 7)",
        "buyChoco(prices=[1, 5, 8, 9], money=6)",
        "buyChoco(prices = [2, 3, 1, 5], money = 15)",
        "buyChoco(prices = [3, 5, 9, 1, 2, 7, 8, 10, 6], money = 6)"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"hello\", k = 2)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"a\", k = 2)",
        "beautifulSubstrings(s = \"asdf\", k = 2)",
        "beautifulSubstrings(s = \"abacaba\", k = 1)",
        "beautifulSubstrings(s = \"hhh\", k = 1)",
        "beautifulSubstrings(s = \"zyxwvutsrqponmlkjihgfedcba\", k = 4)",
        "beautifulSubstrings(s = \"zzz\", k = 10)",
        "beautifulSubstrings(s = \"Izqoye\", k = 2)"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abacb\")",
        "longestSemiRepetitiveSubstring(s = \"abacb\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"ababababab\")",
        "longestSemiRepetitiveSubstring(s = \"abdef\")",
        "longestSemiRepetitiveSubstring(s = \"aaaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabaab!\")",
        "longestSemiRepetitiveSubstring(s = \"abccdd\")"
    ],
    "sample_341": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 3, y = 5, z = 2)",
        "longestString(x = 3, y = 5, z = 2)",
        "longestString(x = 3, y = 5, z = 1)",
        "longestString(x = 4, y = 5, z = 3)",
        "longestString(x=2, y=3, z=4)",
        "longestString(x = 3, y = 2, z = 4)",
        "longestString(x = 3, y = 5, z = 6)",
        "longestString(x = 4, y = 1, z = 10)"
    ],
    "sample_271": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2], nums2 = [3, 4])",
        "minSum(nums1 = [1,2], nums2 = [3,4])",
        "minSum(nums1=[1, 2, 3], nums2=[4, 5, 6])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minSum(nums1 = [1,2,3,4], nums2 = [1,1,1,1])",
        "minSum(nums1 = [1, 2, 0, 1], nums2 = [3, 4, 5, 6])",
        "minSum(nums1=[1,2,3,4],nums2=[5,6,7,8])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 3])",
        "minSum(nums1=[0,2,2], nums2=[2,2])"
    ],
    "sample_340": [
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 3, y = 4, z = 1)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 1, y = 3, z = 2)",
        "longestString(x = 1, y = 3, z = 2)",
        "longestString(x = 2, y = 3, z = 3)",
        "longestString(x = 1, y = 3, z = 5)",
        "longestString(x = 6, y = 7, z = 2)",
        "longestString(x=5, y=3, z=2)",
        "longestString(x = 10, y = 7, z = 4)"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"1234567890\", k = 3)",
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = \"111\", k = 2)",
        "shortestBeautifulSubstring(s = \"123456\", k = 3)",
        "shortestBeautifulSubstring(s = '10111', k = 3)",
        "shortestBeautifulSubstring(s = \"1010101010\", k = 2)",
        "shortestBeautifulSubstring(s = \"1011\", k = 2)",
        "shortestBeautifulSubstring(s = \"12345678901234567890\", k = 3)",
        "shortestBeautifulSubstring(s = '11111111', k = 3)",
        "shortestBeautifulSubstring(s = \"5555555555555555555555511\", k = 2)"
    ],
    "sample_324": [
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1234)",
        "isFascinating(n = 2)",
        "isFascinating(n = 121)",
        "isFascinating(n = 24)",
        "isFascinating(n = 1111111)"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [3, 4, 5, 1, 2])",
        "minimumSum(nums = [3, 1, 5, 2, 7])",
        "minimumSum(nums = [4, 2, 5, 1, 1])",
        "minimumSum(nums = [3, 1, 4, 2, 9])",
        "minimumSum(nums=[4, 2, 5, 1, 3, 4])"
    ],
    "sample_268": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "minSum(nums1 = [0, 1, 2, 3], nums2 = [4, 5, 6, 7])",
        "minSum(nums1=[1,2,3,4], nums2=[1,2,3,4])",
        "minSum(nums1 = [1,0], nums2 = [2,2])",
        "minSum(nums1 = [0,0,0,0], nums2 = [1,1,1,1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 0, 2, 3])",
        "minSum(nums1 = [2, 3, 0], nums2 = [3, 2, 0])",
        "minSum(nums1 = [0, 0, 3], nums2 = [3, 0, 0])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"cd\", s3 = \"ef\")",
        "findMinimumOperations(s1 = \"geeks\", s2 = \"geeks\", s3 = \"geeks\")",
        "findMinimumOperations(s1 = \"abd\", s2 = \"abe\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"geeksforgeeks\", s2 = \"geeksquiz\", s3 = \"geeksabc\")",
        "findMinimumOperations(s1 = \"abacaba\", s2 = \"cabacab\", s3 = \"bacabac\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abz\")",
        "findMinimumOperations(s1 = \"geeks\", s2 = \"gseek\", s3 = \"gks\")"
    ],
    "sample_321": [
        "maxStrength(nums = [1, 2, -3, -4, 5])",
        "maxStrength(nums = [1, -2, 3, -4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, -5])",
        "maxStrength(nums = [1, 2, 3, 4, -5])",
        "maxStrength(nums = [2, 3, 4, -1, -2])",
        "maxStrength(nums = [4, -3, 2, -1, 3])",
        "maxStrength(nums = [10, 2, 3, -4, -5])",
        "maxStrength(nums = [1,2,3,4,5,6,-1,-2])",
        "maxStrength(nums = [4, -3, -4, 5, 1, 2])",
        "maxStrength(nums = [1, 1, 2, 4, -1, -2, -4])"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [2], moveFrom = [2], moveTo = [2])",
        "relocateMarbles(nums = [2], moveFrom = [2], moveTo = [2])",
        "relocateMarbles(nums = [2], moveFrom = [2], moveTo = [2])",
        "relocateMarbles(nums = [1], moveFrom = [], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [])",
        "relocateMarbles(nums = [1, 2], moveFrom = [], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 2])"
    ],
    "sample_357": [
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [8])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [2])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [4])",
        "relocateMarbles(nums=[5, 6, 7, 8, 9], moveFrom=[7], moveTo=[4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 8, 9], moveFrom = [3, 4], moveTo = [7, 8])",
        "relocateMarbles(nums = [5, 6, 8], moveFrom = [8], moveTo = [9])",
        "relocateMarbles(nums = [5, 5, 6, 8, 8, 9, 9], moveFrom = [8, 9], moveTo = [10, 11])",
        "relocateMarbles(nums = [5, 5, 6, 6, 8, 8, 9, 9], moveFrom = [6, 9], moveTo = [7, 10])",
        "relocateMarbles(nums = [5, 5, 5, 6, 6, 8, 9, 9], moveFrom = [5, 8], moveTo = [9, 6])",
        "relocateMarbles(nums=[5, 5, 6, 8, 9], moveFrom=[5, 8], moveTo=[1, 3])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 1)",
        "buyChoco(prices = [1, 2, 3], money = 1)",
        "buyChoco(prices = [1], money = 1)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 5)",
        "buyChoco(prices = [5], money = 5)",
        "buyChoco(prices = [2], money = 2)",
        "buyChoco(prices=[1, 2, 3, 4, 5], money=10)",
        "buyChoco(prices = [5, 15, 10, 20, 8], money = 15)"
    ],
    "sample_308": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1], [2], [3]])",
        "matrixSum(nums = [[0, 1, 1], [1, 0, 1]])",
        "matrixSum(nums=[[0,0,1], [1,0,0]])",
        "matrixSum(nums = [[-1,-2,-3],[0,0,0],[-20,-30,-40]])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2], money = 3)",
        "buyChoco(prices = [1, 2], money = 1)",
        "buyChoco(prices = [1, 2, 3], money = 0)",
        "buyChoco(prices = [10, 20, 30], money = 10)",
        "buyChoco(prices = [2, 3, 4], money = 2)",
        "buyChoco(prices = [2, 3, 4], money = 6)",
        "buyChoco(prices = [100, 100, 100], money = 297)",
        "buyChoco(prices = [1,2,1], money = 3)",
        "buyChoco(prices = [150, 200, 1000], money = 200)",
        "buyChoco(prices = [5, 3, 6, 10], money = 1)"
    ],
    "sample_259": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1])",
        "minimumSum(nums = [1,2,3])",
        "minimumSum(nums = [1,2])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [5,4,3,2,1])",
        "minimumSum(nums = [3,4,5,6,7])",
        "minimumSum(nums=[1, 1, 1])",
        "minimumSum(nums = [5,4,3,2])",
        "minimumSum(nums = [3,1,100,4,2])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [0, 1, 2, 3, 4])",
        "alternatingSubarray(nums = [2, 1, 4, 3, 6, 5, 8, 7])",
        "alternatingSubarray(nums = [1,3,2,4,3])",
        "alternatingSubarray(nums=[1,2,4,3,5,6])",
        "alternatingSubarray(nums = [1,3,5,2,4,6])"
    ],
    "sample_311": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1, 0, 1], [0, 0, 1], [1, 1, 1]])",
        "matrixSum(nums = [[1,2,3], [4,5,6], [7,8,9]])",
        "matrixSum(nums = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "matrixSum(nums = [[0, 1], [0, 0]])",
        "matrixSum(nums = [[1, 0, 0], [0, 1, 1], [0, 1, 1]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 2, 3], money = 3)",
        "buyChoco(a = [1, 2, 3], money = 1)",
        "buyChoco(a = [1, 2, 3], money = 1)",
        "buyChoco(a = [1, 2], money = 0)",
        "buyChoco(a = [1, 2, 3, 4], money = 3)",
        "buyChoco(a = [1, 2, 3, 4], money = 5)",
        "buyChoco(a = [3, 4], money = 5)",
        "buyChoco(a = [1, 3, 5], money = 3)",
        "buyChoco(a = [10, 15, 30], money = 25)",
        "buyChoco(a = [1, 3, 4, 5], money = 1)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,3])",
        "minGroupsForValidAssignment(nums=[1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [3, 2, 3, 2, 1])",
        "minGroupsForValidAssignment(nums = [2, 2, 3, 3, 2])",
        "minGroupsForValidAssignment(nums=[2, 2, 2, 2, 2, 2, 2, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 3, 3, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 2, 3, 4, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [5,1,1,1,1,5])",
        "minGroupsForValidAssignment(nums = [33, 1, 2, 6, 10, 13, 19, 23, 26, 30])"
    ],
    "sample_276": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[1, 0], [0, 1]])",
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0, 1], [0, 1, 1, 0], [0, 1, 1, 0], [1, 0, 0, 1]])",
        "findChampion(grid = [[1,1,0],[0,1,1],[1,0,1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 1], [1, 0, 1]])",
        "findChampion(grid = [[1,0,1], [0,0,1], [0,1,0]])"
    ],
    "sample_320": [
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [5, 4, 3, 2])",
        "maxStrength(nums = [2, 3, 5, 4])",
        "maxStrength(nums = [5, 1, 2, 3, 4])",
        "maxStrength(nums = [4, 2, 5, 8, 9])",
        "maxStrength(nums = [10, 2, 3, 4, 5])",
        "maxStrength(nums = [2, 1, 5, 4, 8])",
        "maxStrength(nums = [5, 5, 5, 5])",
        "maxStrength(nums=[5, 1, 4, 3])",
        "maxStrength(nums = [10, 4, 1, 5, 6])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"cat\",\"bt\",\"hat\",\"tree\"])",
        "minimizeConcatenatedLength(words = [\"cat\",\"bt\",\"hat\",\"tree\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"bt\", \"nat\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"bt\", \"nat\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"cat\"])",
        "minimizeConcatenatedLength(words=[\"cat\",\"bt\",\"hat\",\"tree\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"cats\", \"doggy\"])",
        "minimizeConcatenatedLength(words = [\"cat\",\"dog\",\"catdog\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"hen\", \"cat\", \"bat\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"taxi\", \"taxi\", \"dog\", \"cat\"])"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ac\", s3 = \"ad\")",
        "findMinimumOperations(s1 = \"geeksforgeeks\", s2 = \"geeksquiz\", s3 = \"geeksforgeeksquiz\")",
        "findMinimumOperations(s1 = \"geeksforgeeks\", s2 = \"geeks\", s3 = \"geek\")",
        "findMinimumOperations(s1 = \"geeksforgeeks\", s2 = \"geeksquiz\", s3 = \"geeks\", n = 14, m = 12, k = 5)",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"zxy\", s3 = \"mnz\")",
        "findMinimumOperations(s1 = \"hegf\", s2 = \"dbca\", s3 = \"gebc\")"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums=[1, 2, 3, 4])",
        "alternatingSubarray(nums = [4, 2, 1, 6, 10, 7, 6])",
        "alternatingSubarray(nums = [2, 1, 2, 1, 2, 1, 2])",
        "alternatingSubarray(nums = [4,2,1,5,3,6])"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 1, 0], [0, 1, 1], [1, 0, 1]])",
        "findChampion(grid = [[1,0,0], [0,1,0], [0,0,1]])",
        "findChampion(grid = [[1, 1, 0], [1, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 1, 1, 0], [0, 1, 1, 0], [0, 0, 1, 0], [0, 0, 0, 1]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[1, 0, 0, 1], [0, 0, 1, 0], [0, 0, 0, 1], [1, 0, 0, 0]])",
        "findChampion(grid = [[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 0, 0]])"
    ],
    "sample_304": [
        "countSeniors(details
        "countSeniors(details = [\"12345678901\", \"23456789012\", \"34567890123\", \"45678901234\", \"56789012345\"])",
        "countSeniors(details = [\"John_1980_Male\", \"Mary_1990_Female\", \"Bob_1960_Male\", \"Alice_1970_Female\"])",
        "countSeniors(details = [\"01/02/2000\", \"22/03/1955\", \"31/12/1999\"])",
        "countSeniors(details = [\"1970/05/04\", \"1980/02/29\", \"1990/12/31\"])",
        "countSeniors(details = ['0001011990020', '0001011985020', '0001011991020'])",
        "countSeniors(details = [\"194509101034\",\"195509101034\",\"196509101034\"])",
        "countSeniors(details = [\"2000-01-01_John_Smith_70\", \"1999-12-31_Sarah_Jones_55\", \"1967-08-13_Michael_Brown_72\"])",
        "countSeniors(details = [\"John, 32\", \"Jill, 72\", \"Bob, 14\", \"Alex, 68\"])",
        "countSeniors(details=[\"Ms. Jessica Smith, 27\", \"Dr. William Johnson, 45\", \"Mrs. Karen Davis, 62\", \"Mr. David Jones, 70\"])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"beautiful\", k = 3)",
        "beautifulSubstrings(s = \"beautiful\", k = 3)",
        "beautifulSubstrings(s = \"beautiful\", k = 3)",
        "beautifulSubstrings(s = \"abcde\", k = 2)",
        "beautifulSubstrings(s = \"abcde\", k = 2)",
        "beautifulSubstrings(s = \"abcdaef\", k = 3)",
        "beautifulSubstrings(s = \"acacacacac\", k = 3)",
        "beautifulSubstrings(s = \"abacdfghe\", k = 3)",
        "beautifulSubstrings(s = \"babe\", k = 2)",
        "beautifulSubstrings(s = \"chicagohoodie\", k = 2)"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"0110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"1100110\", k = 2)",
        "shortestBeautifulSubstring(s = \"11001\", k = 2)",
        "shortestBeautifulSubstring(s = \"11011001\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = '11001111', k = 2)",
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = '0101111111', k = 3)",
        "shortestBeautifulSubstring(s = '101001011', k = 2)",
        "shortestBeautifulSubstring(s = \"1001011010010101001\", k = 2)"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"xy\", \"yz\"])",
        "minimizeConcatenatedLength(words=['a', 'b', 'c', 'd'])",
        "minimizeConcatenatedLength(words = [\"ad\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"b\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"c\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"f\", \"g\"])",
        "minimizeConcatenatedLength(words = [\"xy\", \"yz\", \"zx\"])",
        "minimizeConcatenatedLength(words = ['cat', 'cats', 'sand', 'dog'])",
        "minimizeConcatenatedLength(words = [\"abbc\", \"cdd\", \"cdeb\"])"
    ],
    "sample_327": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1234)",
        "isFascinating(n = 234)",
        "isFascinating(n = 50)",
        "isFascinating(n = 39)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1], [1]])",
        "matrixSum(nums = [[1], [1]])",
        "matrixSum(nums = [[1], [1]])",
        "matrixSum(nums = [[1, 1], [1, 1]])",
        "matrixSum(nums = [[1, 2], [3, 0]])",
        "matrixSum(nums = [[0, 2], [1, 1], [1, 2]])"
    ],
    "sample_326": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123456)"
    ],
    "sample_275": [
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[1, 1, 0], [1, 1, 1], [0, 1, 1]])",
        "findChampion(grid = [[1, 0], [1, 1]])",
        "findChampion(grid = [[1, 1, 0], [0, 1, 1], [1, 0, 1]])",
        "findChampion(grid = [[1, 1, 0], [0, 1, 1], [1, 0, 1]])",
        "findChampion(grid = [[1, 1, 1], [1, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 0], [1, 1, 0]])",
        "findChampion(grid = [[1,0,0,0], [1,1,1,1], [1,1,1,1], [1,1,1,1]])"
    ],
    "sample_260": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [2, 1, 5, 3, 5])",
        "minimumSum(nums = [5, 2, 3, 6])",
        "minimumSum(nums=[2, 3, 1, 5])",
        "minimumSum(nums = [3,2,4,1,5])",
        "minimumSum(nums=[5,3,2,4])",
        "minimumSum(nums=[5, 4, 3, 6, 2])",
        "minimumSum(nums = [4, 5, 6, 1, 2, 3])",
        "minimumSum(nums=[7, 3, 1, 5, 4, 10])"
    ],
    "sample_322": [
        "isFascinating(n = 123456789)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1234)",
        "isFascinating(n = 111)",
        "isFascinating(n = 23)",
        "isFascinating(n = 13)",
        "isFascinating(n = 37)",
        "isFascinating(n = 3456)",
        "isFascinating(n = 701)"
    ],
    "sample_248": [
        "minOperations(s1 = \"01\", s2 = \"10\", x = 1)",
        "minOperations(s1 = \"01\", s2 = \"10\", x = 2)",
        "minOperations(s1 = \"01\", s2 = \"10\", x = 2)",
        "minOperations(s1 = \"010\", s2 = \"101\", x = 3)",
        "minOperations(s1 = \"101\", s2 = \"010\", x = 3)",
        "minOperations(s1 = \"10101\", s2 = \"01010\", x = 4)",
        "minOperations(s1 = \"101\", s2 = \"100\", x = 2)",
        "minOperations(s1 = \"101\", s2 = \"110\", x = 5)",
        "minOperations(s1 = \"1101\", s2 = \"0100\", x = 1)",
        "minOperations(s1 = \"0100\", s2 = \"0110\", x = 4)"
    ],
    "sample_342": [
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 3, y = 2, z = 2)",
        "longestString(x = 2, y = 1, z = 2)",
        "longestString(x = 2, y = 1, z = 2)",
        "longestString(x = 2, y = 1, z = 3)",
        "longestString(x = 1, y = 1, z = 1)"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 8], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [8, 9], moveTo = [10, 11])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 2], moveTo = [4, 5])",
        "relocateMarbles(nums = [8, 5, 9, 6], moveFrom = [8, 9], moveTo = [5, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 8, 9], moveFrom = [1, 2, 3, 4], moveTo = [5, 6, 8, 9])",
        "relocateMarbles(nums = [4, 5, 6, 8, 9], moveFrom = [4, 6], moveTo = [1, 7])",
        "relocateMarbles(nums = [5, 5, 5, 8, 8], moveFrom = [5], moveTo = [9])",
        "relocateMarbles(nums = [5, 8, 9, 6], moveFrom = [9], moveTo = [4])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9], moveFrom = [3,6,7], moveTo = [9,5,8])",
        "relocateMarbles(nums = [8, 5, 6, 7, 9], moveFrom = [7, 5], moveTo = [6, 9])"
    ],
    "sample_306": [
        "countSeniors(details = [\"1000000000000016\", \"1000000000000017\"])",
        "countSeniors(details = [\"John Doe 1975\", \"Alice Smith 1956\", \"Bob Johnson 1945\"])",
        "countSeniors(details = [\"abcdefghijk67\", \"lmnopqrstuv60\", \"wxyzabcd61ef\"])",
        "countSeniors(details = [\"John Doe 03/24/1955\", \"Jane Doe 05/07/1997\"])",
        "countSeniors(details = [\"John Doe - 56789 - Male - 63\", \"Jane Doe - 56789 - Female - 58\", \"Jimmy Doe - 56789 - Male - 65\"])",
        "countSeniors(details = ['john doe 01/01/1980', 'jane doe 02/02/1979', 'jimmy doe 03/03/1985'])",
        "countSeniors(details = [\"1990-12-19 10:00:00 1\", \"1991-12-19 10:00:00 2\"])",
        "countSeniors(details=[\"100035959762\", \"100035959779\", \"100035959753\"])",
        "countSeniors(details = [\"John Smith 1950-02-08 22:13:01\", \"Jane Doe 1975-08-27 09:23:12\", \"Bob Johnson 2001-05-12 14:43:18\"])",
        "countSeniors(details = [\"2019-05-02:C104:Lisa James:F:07\", \"2001-01-18:C104:Tom Smith:M:03\", \"2008-03-25:C106:Mary Johnson:F:09\", \"2005-07-24:C106:John Davis:M:07\"])"
    ],
    "sample_303": [
        "countSeniors(details = [\"Alice_24_F\", \"Bob_56_M\", \"Charlie_78_M\", \"David_32_M\"])",
        "countSeniors(details = ['John 1990-01-01', 'Jane 1970-01-01', 'Bob 1960-01-01'])",
        "countSeniors(details = [\"Amy;F;1990\", \"Bob;M;1995\", \"Charlie;M;1970\", \"Dorothy;F;1960\"])",
        "countSeniors(details = [\"Nathan, 33\", \"Susan, 67\", \"Mike, 19\", \"Sarah, 72\"])",
        "countSeniors(details = [\"John Doe_45_NY\", \"Jane Smith_67_LA\", \"Bob Johnson_22_NY\", \"Mary Williams_71_CA\"])",
        "countSeniors(details = [\"15/03/1998 123456\", \"25/04/1997 234567\", \"30/05/1996 345678\", \"05/06/1995 456789\"])",
        "countSeniors(details=['Mary A 2018', 'Tom B 1990', 'Jane C 1985', 'John D 1950'])",
        "countSeniors(details = [\"John Smith 01/02/1970\", \"Mary Johnson 02/03/1980\", \"David Evans 03/04/1950\", \"Angela Williams 04/05/1960\"])",
        "countSeniors(details = [\"Jane Doe, 1990-08-13, 800 Main St, New York, NY, 10001\", \"John Doe, 1975-05-10, 123 Oak Ave, Syracuse, NY, 13204\"])",
        "countSeniors(details = [\"Susan Richards:12-12-1960:8457452365:richards.susan@example.com\", \"John Smith:05-10-1980:9305101236:johnsmith@example.com\", \"Jane Doe:22-05-1955:8574521235:janedoe@example.com\", \"Jack Johnson:18-02-1950:9457452365:jack.johnson@example.com\"])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [8])",
        "relocateMarbles(nums = [4, 5, 6, 7], moveFrom = [4, 7], moveTo = [8, 9])",
        "relocateMarbles(nums = [4, 5, 6, 7], moveFrom = [4, 7], moveTo = [8, 9])",
        "relocateMarbles(nums=[5, 6, 7, 8, 9], moveFrom=[7], moveTo=[10])",
        "relocateMarbles(nums = [4, 5, 6, 7, 8, 9], moveFrom = [7, 8], moveTo = [5, 6])",
        "relocateMarbles(nums = [1, 5, 6, 8], moveFrom = [1, 8], moveTo = [9, 5])",
        "relocateMarbles(nums = [5, 8, 3, 9], moveFrom = [8, 3], moveTo = [6, 5])",
        "relocateMarbles(nums = [4, 5, 6, 8, 9], moveFrom = [4, 5], moveTo = [9, 6])",
        "relocateMarbles(nums = [3, 4, 5, 6, 8, 9], moveFrom = [4, 6], moveTo = [1, 7])",
        "relocateMarbles(nums = [5, 7, 8, 9], moveFrom = [7, 9], moveTo = [8, 10])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"cde\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ac\", s3 = \"bc\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"aac\", s3 = \"aab\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"aba\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"c\", s3 = \"ab\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"cd\", s3 = \"ef\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"aba\", s3 = \"aba\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"cd\", s3 = \"de\")",
        "findMinimumOperations(s1 = \"bot\", s2 = \"top\", s3 = \"pot\")",
        "findMinimumOperations(s1 = \"bca\", s2 = \"abc\", s3 = \"def\")",
        "findMinimumOperations(s1 = \"abd\", s2 = \"def\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"dog\", s2 = \"cat\", s3 = \"bat\")",
        "findMinimumOperations(s1 = \"abcdef\", s2 = \"abcfg\", s3 = \"abcf\")"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [2, 1])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums=[2, 1, 3])",
        "semiOrderedPermutation(nums = [4, 3, 2, 1])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1])",
        "semiOrderedPermutation(nums = [2, 4, 3, 1])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1, 2, 3, 4, 5])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [0, 2, 1, 3, 4])",
        "continuousSubarrays(a = [1,3,2,1,4,1])",
        "continuousSubarrays(a = [3, 2, 1, 1, 3, 2])",
        "continuousSubarrays(a = [2,1,3,4,1,2,3])",
        "continuousSubarrays(a = [4, 5, 5, 5, 5])",
        "continuousSubarrays(a = [0,2,2,2,1,2,1,2])",
        "continuousSubarrays(a = [4, 3, 5, 6, 4, 6, 5, 3, 5, 6, 5, 4, 4, 4, 4, 4, 4, 5, 6])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [4, 2, 5, 3])",
        "continuousSubarrays(nums = [4, 2, 5, 3, 1, 6, 7])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5])",
        "continuousSubarrays(nums = [4, 2, 5, 3, 1, 6])",
        "continuousSubarrays(nums = [0, 1, 2, 3, 4, 5, 6, 7])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays(nums=[2, 3, 4, 5, 6])",
        "continuousSubarrays(nums = [2, 3, 4, 5, 6, 8])",
        "continuousSubarrays(nums = [2, 6, 4, 5, 1, 2])",
        "continuousSubarrays(nums = [3, 2, 1, 2, 3, 5, 2, 1, 4])"
    ],
    "sample_8": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 2, queries = [[1, 1], [1, 1]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 2], [0, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [2, 2], [1, 2]])",
        "colorTheArray(n = 3, queries = [[1, 2], [2, 2], [1, 1], [3, 2], [1, 2]])"
    ],
    "sample_97": [
        "maximumJumps(nums = [1,2,3,4,5], target = 1)",
        "maximumJumps(nums = [1, 2, 3], target = 1)",
        "maximumJumps(nums = [1,2,3,4,5], target = 3)",
        "maximumJumps(nums = [1,2,1,1,1], target = 0)",
        "maximumJumps(nums=[1,1,1,1,1], target=0)",
        "maximumJumps(nums = [1,2,3,4,5,6,7], target = 1)",
        "maximumJumps(nums=[1,2], target=2)",
        "maximumJumps(nums = [4, 1, 1, 1, 1], target = 4)",
        "maximumJumps(nums = [3,1,2,1,2], target = 1)",
        "maximumJumps(nums = [1,3,7,9,2], target = 3)"
    ],
    "sample_22": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABACD\")",
        "minLength(s = \"ABBCD\")",
        "minLength(s = \"ABCDEF\")",
        "minLength(s = \"ADACB\")",
        "minLength(s = \"ACDBD\")"
    ],
    "sample_7": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [2, 1], [1, 1]])",
        "colorTheArray(n = 2, queries = [[1,2],[0,2]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [1, 2]])",
        "colorTheArray(n = 2, queries = [[1, 1], [1, 2], [2, 1], [1, 1], [2, 2]])"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[0, 1], [1, 1], [2, 1], [3, 1], [4, 1]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,1],[2,1],[3,1],[4,1]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,1],[2,1],[3,1],[4,1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 1], [3, 1], [4, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [2, 2], [1, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 2], [4, 1], [5, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [4, 1], [1, 1], [2, 1], [3, 1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 2], [1, 1], [4, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 1], [3, 1], [2, 1], [2, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [3, 1], [4, 2]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [3, 1, 4, 2])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])",
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [1, 2, 3, 5, 4])",
        "semiOrderedPermutation(nums = [4, 2, 3, 1])",
        "semiOrderedPermutation(nums = [4, 2, 3, 1])",
        "semiOrderedPermutation(nums = [4,1,3,2])",
        "semiOrderedPermutation(nums = [1,4,2,5,3])",
        "semiOrderedPermutation(nums = [1, 5, 3, 2, 6, 4])",
        "semiOrderedPermutation(nums = [2, 5, 3, 1, 4])"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [1, 17, 5, 10, 13], threshold = 9)",
        "longestAlternatingSubarray(nums = [1, 17, 5, 10], threshold = 9)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 2, 2], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 3], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 5, 2, 4, 3], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 4], threshold = 2)",
        "longestAlternatingSubarray(nums = [5, 6, 7, 7, 8], threshold = 7)",
        "longestAlternatingSubarray(nums = [1, 2, 2, 2, 5, 6], threshold = 7)",
        "longestAlternatingSubarray(nums=[3, 6, 2, 5, 4], threshold=6)",
        "longestAlternatingSubarray(nums = [2, 2, 1, 5, 1, 3, 3, 5, 1, 2, 2], threshold = 1)"
    ],
    "sample_33": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = \"51230100000\")",
        "removeTrailingZeros(num='512301.0000000')"
    ],
    "sample_50": [
        "smallestString(s = \"abac\")",
        "smallestString(s = \"abac\")",
        "smallestString(s = \"abaac\")",
        "smallestString(s = 'abaac')",
        "smallestString(s = \"abacab\")",
        "smallestString(s = 'abacab')",
        "smallestString(s = 'aabab')",
        "smallestString(s = 'aaab')",
        "smallestString(s = 'abaaab')",
        "smallestString(s = \"aabbbc\")"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1, 1])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4, 4, 5, 6, 6])",
        "distinctDifferenceArray(nums = [0, 1, 2, 2, 3, 3, 3, 4, 5, 6])",
        "distinctDifferenceArray(nums = [5, 3, 2, 1, 5, 3])",
        "distinctDifferenceArray(nums = [2, 2, 1, 3, 4, 5, 2])",
        "distinctDifferenceArray(nums = [2, 1, 2, 4, 4, 4])"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 2)",
        "distanceTraveled(mainTank = 25, additionalTank = 1)"
    ],
    "sample_118": [
        "minimumIndex(nums = [3, 1, 3, 3, 2, 3])",
        "minimumIndex(nums = [3,1,3,3,2,3])",
        "minimumIndex(nums = [1, 0, 1, 1, 0, 1, 1])",
        "minimumIndex(nums = [1,1,0,0,0,1,1])",
        "minimumIndex(nums = [2, 1, 2, 3, 1])",
        "minimumIndex(nums = [1, 1, 1, 2, 2, 2, 2])",
        "minimumIndex(nums = [1, 0, 1, 1, 1, 0, 1, 0, 1, 0])",
        "minimumIndex(nums = [3, 2, 3, 2])",
        "minimumIndex(nums = [2,1,3,2,2])",
        "minimumIndex(nums = [1, 2, 0, 3, 0, 0, 4, 4, 5])"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 34])",
        "countBeautifulPairs(nums = [12, 28, 29, 30, 45])",
        "countBeautifulPairs(nums = [12,23,45])",
        "countBeautifulPairs(nums = [12,23,45,67,89])",
        "countBeautifulPairs(nums = [220, 284, 290])",
        "countBeautifulPairs(nums = [220, 231, 120])",
        "countBeautifulPairs(nums = [220, 221, 222, 223])",
        "countBeautifulPairs(nums = [12,23,34,54,26])",
        "countBeautifulPairs(nums = [220, 284, 245, 219, 154])"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = '512301000000000')"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"leetcode\")",
        "minimizedStringLength(s = \"aaabbbccc\")",
        "minimizedStringLength(s = \"abab\")",
        "minimizedStringLength(s = \"abca\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abacabadabacaba\")",
        "minimizedStringLength(s = \"aabc\")",
        "minimizedStringLength(s = \"abacb\")",
        "minimizedStringLength(s = \"babab\")",
        "minimizedStringLength(s = \"abbcccddddeeeeeffffff\")"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 4, 5, 7], k = 2)",
        "maximumBeauty(nums = [1, 3, 4, 10], k = 2)",
        "maximumBeauty(nums = [1, 4, 6, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 10)",
        "maximumBeauty(nums = [1, 3, 2, 6, 1, 12], k = 2)",
        "maximumBeauty(nums = [1, 2, 5, 8, 10], k = 4)",
        "maximumBeauty(nums = [1, 3, 2, 6, 4, 12, 78], k = 5)"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 6, num2 = 3)",
        "makeTheIntegerZero(num1 = 12, num2 = 6)",
        "makeTheIntegerZero(num1 = 17, num2 = 5)",
        "makeTheIntegerZero(num1 = 15, num2 = 4)",
        "makeTheIntegerZero(num1 = 10, num2 = 11)",
        "makeTheIntegerZero(num1 = 21, num2 = 4)",
        "makeTheIntegerZero(num1 = 14, num2 = 6)",
        "makeTheIntegerZero(num1 = 50, num2 = 2)"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [3, 1, 2])",
        "findValueOfPartition(nums = [1, 3, 4])",
        "findValueOfPartition(nums = [1, 1, 1, 2])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 10])",
        "findValueOfPartition(nums = [1, 2, 2, 4])",
        "findValueOfPartition(nums = [1, 2, 3, 100, 101])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank=1, additionalTank=0)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0,1,0,1])",
        "doesValidArrayExist(derived = [1,0,1,0,0])",
        "doesValidArrayExist(derived = [1,0,0])"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = 'neven')",
        "makeSmallestPalindrome(s = 'neven')",
        "makeSmallestPalindrome(s = 'neven')",
        "makeSmallestPalindrome(s = 'noon')",
        "makeSmallestPalindrome(s = 'nene')",
        "makeSmallestPalindrome(s = 'aven')",
        "makeSmallestPalindrome(s = 'nevenv')",
        "makeSmallestPalindrome(s = \"abccba\")",
        "makeSmallestPalindrome(s = \"nevenen\")",
        "makeSmallestPalindrome(s = \"nelven\")"
    ],
    "sample_110": [
        "checkArray(nums = [1, 2, 3, 1, 1], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 1)",
        "checkArray(nums = [0, 1], k = 1)",
        "checkArray(nums = [1, 2, 3, 1, 2, 3], k = 3)",
        "checkArray(nums = [1, 1, 1, 2], k = 2)",
        "checkArray(nums = [2, 2, 2, 3, 4], k = 2)",
        "checkArray(nums = [2, 3, 5], k = 1)",
        "checkArray(nums = [1, 2, 3, 2, 1], k = 1)",
        "checkArray(nums = [1, 2, 1, 4, 5], k = 2)",
        "checkArray(nums = [2, 3, 3, 3, 3], k = 2)"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0])",
        "doesValidArrayExist(derived = [1, 0])",
        "doesValidArrayExist(derived = [1, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0,"
    ],
    "sample_54": [
        "smallestString(s = \"kddsbncde\")",
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = 'kddsbncda')",
        "smallestString(s = 'kdeeebncd')",
        "smallestString(s = 'kdeeebcd')",
        "smallestString(s = 'kddsbcne')",
        "smallestString(s = 'kdebsncd')",
        "smallestString(s = 'kddsbncee')",
        "smallestString(s = \"kddebncd\")",
        "smallestString(s = 'kdebsbcd')"
    ],
    "sample_93": [
        "continuousSubarrays(A = [4, 2, 2, 3, 1, 5])",
        "continuousSubarrays(A = [4, 2, 2, 3, 1, 5])",
        "continuousSubarrays(A = [0, 1, 2, 3, 4, 5])",
        "continuousSubarrays(A = [0, 1, 2, 3])",
        "continuousSubarrays(A = [4, 2, 2, 4, 1, 4])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2])",
        "continuousSubarrays(A = [4, 2, 2, 2, 4, 4, 2])",
        "continuousSubarrays(A = [2, 1, 2, 2, 1, 2, 2, 1, 2, 2])",
        "continuousSubarrays(A = [4, 1, 2, 3, 4, 5, 6, 7])",
        "continuousSubarrays(A = [3, 2, 1, 4, 5, 6, 2, 3])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = 'abd')",
        "makeSmallestPalindrome(s = 'abacd')",
        "makeSmallestPalindrome(s = 'abacaba')",
        "makeSmallestPalindrome(s = \"abc\")",
        "makeSmallestPalindrome(s = 'abracadabra')",
        "makeSmallestPalindrome(s = 'abbaa')",
        "makeSmallestPalindrome(s = \"abbd\")",
        "makeSmallestPalindrome(s = \"abdb\")",
        "makeSmallestPalindrome(s = \"aabcbc\")"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 1])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5, 6, 7])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 6])",
        "findValueOfPartition(nums = [3, 1, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 4, 5, 7, 8, 9])",
        "findValueOfPartition(nums = [2, 3, 3, 5, 5, 7, 8])"
    ],
    "sample_51": [
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = 'kdeebncd')",
        "smallestString(s = 'kddsbncda')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kdebsncd')",
        "smallestString(s = 'kdebsncd')",
        "smallestString(s = \"kddsbcnd\")",
        "smallestString(s = \"kddsbncg\")",
        "smallestString(s = \"kdeebndc\")",
        "smallestString(s = 'kddefddsbnce')"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 7, 8, 9], k = 3)",
        "maximumBeauty(nums = [3, 1, 5, 4, 2], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "maximumBeauty(nums = [2,3,4,5], k = 2)",
        "maximumBeauty(nums = [1, 3, 6, 2, 4, 8, 9], k = 3)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1, 2, 3], k = 2)",
        "checkArray(nums = [1, 2, 3, 4], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 1)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "checkArray(nums = [1, 2, 3, 3, 4, 5], k = 2)",
        "checkArray(nums = [2, 1, 2, 2, 1], k = 2)",
        "checkArray(nums = [2, 1, 4, 5, 2, 6], k = 3)",
        "checkArray(nums = [4, 3, 3, 2, 1, 1], k = 3)"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 6, additionalTank = 0)",
        "distanceTraveled(mainTank=10, additionalTank=0)",
        "distanceTraveled(mainTank = 7, additionalTank = 2)",
        "distanceTraveled(mainTank=3, additionalTank=0)"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 1, 1, 2, 2])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2])",
        "distinctDifferenceArray(nums = [2, 2, 2, 3, 4])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1, 2, 3, 4, 5])",
        "continuousSubarrays(A = [1,2,3])",
        "continuousSubarrays(A = [1,2,3,4,5,6])",
        "continuousSubarrays(A = [4, 2, 2, 3, 1, 5])",
        "continuousSubarrays(A = [1,2,3,2,1])",
        "continuousSubarrays(A = [1,2,1,2,1])",
        "continuousSubarrays(A = [1,1,2,2,3])",
        "continuousSubarrays(A = [1,2,3,4,5,2,3,4,5,6])",
        "continuousSubarrays(A = [1, 2, 3, 3, 3, 4, 4, 4, 5])",
        "continuousSubarrays(A = [4, 4, 4, 4, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9])"
    ],
    "sample_6": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 1, queries = [[0,0]])",
        "colorTheArray(n=1, queries=[[0, 0]])",
        "colorTheArray(n = 2, queries = [[0,1]])",
        "colorTheArray(n = 2, queries = [[1, 1]])",
        "colorTheArray(n = 2, queries = [[1, 1]])"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 2)",
        "makeTheIntegerZero(a = 11, b = 1)",
        "makeTheIntegerZero(a = 23, b = 5)",
        "makeTheIntegerZero(a = 12, b = 5)",
        "makeTheIntegerZero(a = 30, b = 5)",
        "makeTheIntegerZero(a = 22, b = 2)",
        "makeTheIntegerZero(a=15, b=4)",
        "makeTheIntegerZero(a = 44, b = 3)",
        "makeTheIntegerZero(a = 123456789, b = 3)"
    ],
    "sample_100": [
        "maximumJumps(nums = [6, 4, 14, 6, 8, 13, 9, 7, 10, 6, 12], target = 2)",
        "maximumJumps(nums = [3, 2, 5, 1, 1, 5, 2, 1], target = 2)",
        "maximumJumps(nums = [5, 1, 3, 4, 2], target = 2)",
        "maximumJumps(nums = [3, 4, 2, 1, 2, 3, 7, 1, 1, 1, 3], target = 3)",
        "maximumJumps(nums=[3, 4, 2, 1, 2, 3, 7, 1, 1, 1, 3], target=2)",
        "maximumJumps(nums = [6, 3, 5, 2, 4, 1, 7], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 8, 9, 10], target = 2)",
        "maximumJumps(nums=[5, 1, 3, 4, 2], target=2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6], target = 2)",
        "maximumJumps(nums = [4, 1, 5, 3, 2], target = 2)"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [2, 1], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 1, 4, 3], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 3, 2, 3, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [4, 1, 2, 3, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [2,3,4,5,6,7,8,9,10], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 1, 4, 5, 8, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 5, 1, 1, 3, 4, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 4, 3, 6, 5, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 5, 3, 6, 7, 4, 5, 8, 9, 10], threshold = 9)"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [3, 4, 5, 1, 2], b = [2, 1, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1, 2, 3, 2], b = [1, 2, 2, 3])",
        "maxNonDecreasingLength(a = [1, 4, 5, 8], b = [2, 3, 6, 7])",
        "maxNonDecreasingLength(a = [3, 5, 7, 1, 2], b = [1, 3, 2, 5, 7])",
        "maxNonDecreasingLength(a = [3, 4, 5, 1, 6, 2], b = [4, 5, 6, 2, 1, 3])",
        "maxNonDecreasingLength(a = [5, 1, 3, 2, 1, 5], b = [1, 2, 3, 4, 5, 6])",
        "maxNonDecreasingLength(a = [2, 3, 1, 2, 3], b = [2, 2, 1, 2, 1])",
        "maxNonDecreasingLength(a = [13, 4, 7, 1, 2], b = [13, 1, 1, 1, 1])",
        "maxNonDecreasingLength(a = [3, 5, 4, 6, 2], b = [1, 2, 3, 3, 4])",
        "maxNonDecreasingLength(a = [3, 2, 5, 6, 4, 7, 8], b = [4, 3, 2, 5, 6, 7, 8])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1])",
        "numberOfGoodSubarraySplits(nums=[1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1])",
        "numberOfGoodSubarraySplits(nums=[1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums=[0,1,1,0])",
        "numberOfGoodSubarraySplits(nums=[1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums=[1, 0, 1, 0, 1, 0, 1, 0, 1])"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [0, 1, 0], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 3], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9], threshold = 7)",
        "longestAlternatingSubarray(nums = [2, 1, 3, 2, 4], threshold = 2)",
        "longestAlternatingSubarray(nums = [0, 2, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [10, 8, 4, 6], threshold = 10)",
        "longestAlternatingSubarray(nums = [11, 12, 5, 6], threshold = 11)",
        "longestAlternatingSubarray(nums=[4,2,7,1,3,7], threshold=6)"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 6])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5, 6])",
        "findValueOfPartition(nums = [1, 2, 2, 2])",
        "findValueOfPartition(nums = [1, 3, 5, 7])",
        "findValueOfPartition(nums = [1, 1, 2, 2])",
        "findValueOfPartition(nums=[1, 2, 2, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 5, 8])",
        "findValueOfPartition(nums=[1,1,1,1,2,3])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = 'abab')",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = 'abd')",
        "makeSmallestPalindrome(s = 'ab')",
        "makeSmallestPalindrome(s = 'aabd')",
        "makeSmallestPalindrome(s = 'abcda')",
        "makeSmallestPalindrome(s = \"abacada\")",
        "makeSmallestPalindrome(s = \"abacaba\")",
        "makeSmallestPalindrome(s = 'aabbc')",
        "makeSmallestPalindrome(s = \"abcecba\")"
    ],
    "sample_18": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDEF\")",
        "minLength(s = \"ABACD\")",
        "minLength(s = \"ABABABCDCDCD\")",
        "minLength(s = \"ABABCDABCD\")",
        "minLength(s = \"ABCDC\")"
    ],
    "sample_99": [
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [2, 1, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [3, 4, 2, 1, 2], target = 1)",
        "maximumJumps(nums = [1,1,1,1,1], target = 4)",
        "maximumJumps(nums = [1,1,1,1,1], target = 3)",
        "maximumJumps(nums = [3,4,2,5,1], target = 1)",
        "maximumJumps(nums = [4, 2, 5, 3, 8], target = 5)",
        "maximumJumps(nums = [3, 1, 2, 4], target = 0)"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 2], [4, 1], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 2], [4, 1], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])",
        "colorTheArray(n = 5, queries = [[1,1], [2,2], [3,1], [4,1], [5,1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [1, 2], [3, 2], [2, 1], [3, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [3, 1], [2, 2], [2, 1], [1, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [1, 3], [5, 1], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1,1], [2,2], [1,3], [3,3], [2,1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [4, 1], [5, 2], [2, 1], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1, 2], [1, 1], [4, 2], [4, 1], [2, 3]])"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank=1, additionalTank=0)",
        "distanceTraveled(mainTank=1, additionalTank=0)",
        "distanceTraveled(mainTank=1, additionalTank=0)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 0, additionalTank = 1)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [220, 360])",
        "countBeautifulPairs(nums = [220, 284, 250])",
        "countBeautifulPairs(nums = [22, 45, 88])",
        "countBeautifulPairs(nums = [220, 284, 228])",
        "countBeautifulPairs(nums = [220, 284, 282, 229])",
        "countBeautifulPairs(nums=[324, 123, 456, 789])",
        "countBeautifulPairs(nums = [12, 28, 6, 14, 40])",
        "countBeautifulPairs(nums = [12, 28, 6, 999, 10])"
    ],
    "sample_56": [
        "minCost(A = [1,2,3], x = 2)",
        "minCost(A = [2, 3, 5], x = 2)",
        "minCost(A = [2, 3, 1], x = 2)",
        "minCost(A = [1, 2, 3], x = 1)",
        "minCost(A = [5, 6, 7], x = 2)",
        "minCost(A = [3, 4, 5], x = 3)",
        "minCost(A = [3, 2, 1, 4], x = 2)",
        "minCost(A = [3, 2, 6, 4, 5], x = 5)",
        "minCost(A = [2, 1, 1], x = 2)",
        "minCost(A = [6, 5, 7], x = 2)"
    ],
    "sample_98": [
        "maximumJumps(nums = [1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [5, 1, 3, 4, 2], target = 2)",
        "maximumJumps(nums = [2, 1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [3,4,2,1,2], target = 1)",
        "maximumJumps(nums = [1,2,3,4], target = 3)",
        "maximumJumps(nums = [4, 1, 3, 2], target = 1)",
        "maximumJumps(nums = [2, 3, 5], target = 2)",
        "maximumJumps(nums=[2, 1, 1, 1, 1], target=4)",
        "maximumJumps(nums=[2,3,4], target=1)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1])",
        "numberOfGoodSubarraySplits(nums=[1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 2, 3, 4])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1,2,3,2,1])",
        "distinctDifferenceArray(nums = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5])",
        "distinctDifferenceArray(nums=[1,2,3,2,1,4,5])",
        "distinctDifferenceArray(nums = [5, 1, 2, 3, 1])",
        "distinctDifferenceArray(nums = [1,2,1,3,3,3,4])",
        "distinctDifferenceArray(nums = [5, 1, 1, 3, 2, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [7, 3, 2, 1, 5, 4, 6, 7, 8])",
        "distinctDifferenceArray(nums = [4, 4, 4, 4, 5, 5, 6, 6, 6])",
        "distinctDifferenceArray(nums = [5, 2, 3, 2, 5, 3, 5, 1, 2, 4, 1, 3])"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [12, 34, 56, 78, 90])",
        "countBeautifulPairs(nums = [12, 34, 56, 78, 90])",
        "countBeautifulPairs(nums = [12, 28, 46, 35, 17])",
        "countBeautifulPairs(nums = [12, 28, 46, 32, 50])",
        "countBeautifulPairs(nums = [12, 28, 6, 13, 19])",
        "countBeautifulPairs(nums = [12, 56, 97, 21, 73])",
        "countBeautifulPairs(nums = [220, 284, 222, 228, 286, 220, 280, 220])",
        "countBeautifulPairs(nums=[12, 28, 24, 21, 13, 32, 46, 19])",
        "countBeautifulPairs(nums = [45, 43, 20, 23, 46, 47, 48, 32])",
        "countBeautifulPairs(nums = [12, 288, 99, 825, 22, 121, 107, 39])"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"leetcode\")",
        "minimizedStringLength(s = \"leetcode\")",
        "minimizedStringLength(s = \"leetcode\")",
        "minimizedStringLength(s = \"leetcode\")",
        "minimizedStringLength(s = \"leetcode\")",
        "minimizedStringLength(s = \"aaabbbccc\")",
        "minimizedStringLength(s = \"aaabbbccc\")",
        "minimizedStringLength(s = \"aab\")",
        "minimizedStringLength(s = \"abac\")",
        "minimizedStringLength(s = \"abababab\")"
    ],
    "sample_41": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"aababcb\")",
        "minimumCost(s = \"caadbbb\")"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 2, 1])",
        "distinctDifferenceArray(nums = [9, 8, 7, 6, 5])",
        "distinctDifferenceArray(nums = [5, 5, 5, 5, 5])",
        "distinctDifferenceArray(nums = [3,1,2,2,2])",
        "distinctDifferenceArray(nums = [2, 2, 2, 3, 3, 4])",
        "distinctDifferenceArray(nums = [5, 3, 3, 7, 5])",
        "distinctDifferenceArray(nums=[2, 1, 3, 1, 3])"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [1, 2, 3])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "doesValidArrayExist(derived = [1, 0, 0])",
        "doesValidArrayExist(derived = [2, 2, 2, 2, 2, 2, 2])",
        "doesValidArrayExist(derived=[2, 1, 3])",
        "doesValidArrayExist(derived = [4, 8, 2, 16, 1, 12])"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 6])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 0])",
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 2])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 0, 0, 1])"
    ],
    "sample_52": [
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = 'kdeebncee')",
        "smallestString(s = 'kdeebbncd')",
        "smallestString(s = 'kddsbncde')",
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = \"kddsbncfa\")",
        "smallestString(s = 'kdsebncd')",
        "smallestString(s = 'kdfabcd')"
    ],
    "sample_40": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abac\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"caab\")",
        "minimumCost(s = \"abcb\")",
        "minimumCost(s = \"abcb\")",
        "minimumCost(s = \"acb\")"
    ],
    "sample_38": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abacaba\")",
        "minimumCost(s = \"leetcode\")",
        "minimumCost(s = \"abaaca\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aabbbab\")"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 1, 1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 1, 3])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 4])",
        "distinctDifferenceArray(nums = [2, 1, 1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 1, 1, 1, 2, 2, 2])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 4, 2, 4])"
    ],
    "sample_53": [
        "smallestString(s = 'bacd')",
        "smallestString(s = 'bacd')",
        "smallestString(s = 'bacd')",
        "smallestString(s = 'bacd')",
        "smallestString(s = 'baacd')",
        "smallestString(s = 'baacd')",
        "smallestString(s = 'baccd')",
        "smallestString(s = 'bacba')",
        "smallestString(s = 'bcccaa')",
        "smallestString(s = \"baccc\")"
    ],
    "sample_109": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [1,2,3,1,2], k = 2)",
        "checkArray(nums = [3, 2, 1, 2, 1, 2], k = 2)",
        "checkArray(nums=[1,2,3,4], k=2)",
        "checkArray(nums=[1,1,1,1,1], k=0)",
        "checkArray(nums = [5,1,3,4,2], k = 3)",
        "checkArray(nums = [0,2,4,6,8], k = 1)",
        "checkArray(nums = [0, 1, 2, 1], k = 1)",
        "checkArray(nums=[4, 1, 3, 2], k=2)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [0, 1, 2, 3, 4, 5, 6], k = 2)",
        "maximumBeauty(nums = [3, 1, 6, 10, 15], k = 3)",
        "maximumBeauty(nums = [0, 1, 2, 2, 3], k = 1)",
        "maximumBeauty(nums = [1, 2, 4, 5, 8, 9, 10], k = 3)",
        "maximumBeauty(nums = [3, 6, 1, 4, 1], k = 1)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 2, 3, 4])",
        "distinctDifferenceArray(a = [1, 2, 3, 2, 1, 4, 5])",
        "distinctDifferenceArray(a = [1, 1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 2, 2, 3, 3, 3, 4, 4, 5])",
        "distinctDifferenceArray(a = [1, 1, 2, 2, 3, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 2, 1, 1, 2])",
        "distinctDifferenceArray(a = [5, 3, 2, 7, 8])",
        "distinctDifferenceArray(a = [5, 2, 1, 7, 4, 3, 1])",
        "distinctDifferenceArray(a = [1, 2, 2, 1, 5, 4, 7, 8])"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '51230100000')",
        "removeTrailingZeros(a = '51230100000')",
        "removeTrailingZeros(a = '512300001')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = 'evenn')",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = 'neven')",
        "makeSmallestPalindrome(s = \"nevenn\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s='nevenn')",
        "makeSmallestPalindrome(s = 'abcde')",
        "makeSmallestPalindrome(s = \"abcdcba\")",
        "makeSmallestPalindrome(s = 'nevk')",
        "makeSmallestPalindrome(s = \"nreve\")"
    ],
    "sample_55": [
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddebncd')",
        "smallestString(s = 'kddsbncde')",
        "smallestString(s = 'kdeebncd')",
        "smallestString(s = 'kdeesbncd')",
        "smallestString(s = 'kdeebsncd')",
        "smallestString(s = \"kddsbcne\")",
        "smallestString(s = \"kdeehsbncd\")"
    ],
    "sample_35": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = '5123010000000')"
    ],
    "sample_23": [
        "minLength(s = \"ABCDABCDAB\")",
        "minLength(s = \"ABCDCDABCD\")",
        "minLength(s = \"CDABCDABCDAB\")",
        "minLength(s = \"ABAABCD\")",
        "minLength(s = \"ABCDEFABCD\")",
        "minLength(s = \"ABabCDcd\")",
        "minLength(s = \"CDCDCD\")",
        "minLength(s = \"ACBDBCDA\")",
        "minLength(s = \"AABABCDCD\")",
        "minLength(s = \"AACABADBACD\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100000')"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 11, num2 = 3)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 9, num2 = 3)",
        "makeTheIntegerZero(num1 = 14, num2 = 2)",
        "makeTheIntegerZero(num1 = 21, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1=8, num2=3)",
        "makeTheIntegerZero(num1 = 29, num2 = 3)",
        "makeTheIntegerZero(num1 = 11111, num2 = 3)"
    ],
    "sample_57": [
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 2)",
        "distanceTraveled(a=1, b=1)",
        "distanceTraveled(a = 3, b = 1)",
        "distanceTraveled(a = 3, b = 1)",
        "distanceTraveled(a=1, b=0)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [2, 3, 4, 5], t = 5)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6], t = 6)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 3], t = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7], t = 7)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 1, 1], t = 2)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2], t = 2)",
        "longestAlternatingSubarray(nums = [2, 1, 4, 3, 7], t = 6)",
        "longestAlternatingSubarray(nums = [5, 1, 4, 3, 2], t = 2)",
        "longestAlternatingSubarray(nums = [3, 4, 5, 6], t = 2)",
        "longestAlternatingSubarray(nums=[10, 5, 11, 6, 20], t=12)"
    ],
    "sample_102": [
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1], target = 0)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4], target = 0)",
        "maximumJumps(nums = [1, 1, 1], target = 0)",
        "maximumJumps(nums = [1,2,3], target = 0)",
        "maximumJumps(nums = [1, 3, 5, 10], target = 0)",
        "maximumJumps(nums = [1, 2, 3, 1], target = 1)",
        "maximumJumps(nums = [4, 1, 3, 2, 5], target = 2)",
        "maximumJumps(nums=[4, 2, 5, 1], target=1)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = '512301000000000')",
        "removeTrailingZeros(num='5123010000000')"
    ],
    "sample_101": [
        "maximumJumps(nums = [1], target = 2)",
        "maximumJumps(nums = [5, 1, 3, 4, 2], target = 3)",
        "maximumJumps(nums = [3, 2, 1], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], target = 2)",
        "maximumJumps(nums=[1, 2, 3, 4, 5], target=0)",
        "maximumJumps(nums = [3, 2, 1, 2, 3], target = 2)",
        "maximumJumps(nums = [3, 4, 1, 2, 3], target = 1)",
        "maximumJumps(nums=[1, 2, 3, 1], target=2)",
        "maximumJumps(nums = [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201",
        "maximumJumps(nums=[-10,-10,-8,-5,-3,-3,-1,0,2,4,4,5,6,6,6,7,9,10,10], target=2)"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1])",
        "doesValidArrayExist(derived = [0, 0, 1, 1])",
        "doesValidArrayExist(derived = [2, 2, 2])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 1, 0, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 0, 0, 0, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [2, 1, 2, 1, 2])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 2, 1, 1, 2])",
        "numberOfGoodSubarraySplits(nums=[1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 0, 1, 0, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 2, 1, 1, 1, 1])"
    ],
    "sample_19": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABCDCD\")",
        "minLength(s = 'ABCD')",
        "minLength(s = 'ABCDabcd')",
        "minLength(s = \"ACBADD\")",
        "minLength(s = \"abABcdCDAB\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'noon')",
        "makeSmallestPalindrome(s = 'noon')",
        "makeSmallestPalindrome(s = 'noon')",
        "makeSmallestPalindrome(s = 'evenn')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s='neven')",
        "makeSmallestPalindrome(s='nevenn')",
        "makeSmallestPalindrome(s = 'aebcbda')",
        "makeSmallestPalindrome(s = 'enev')"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4])",
        "semiOrderedPermutation(nums = [1, 5, 2, 4, 3])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums=[3, 1, 2, 4])",
        "semiOrderedPermutation(nums=[1, 5, 2, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4, 5])",
        "semiOrderedPermutation(nums = [4, 3, 2, 1])",
        "semiOrderedPermutation(nums=[3,1,4,2])",
        "semiOrderedPermutation(nums = [2, 3, 4, 5, 1])"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums=[1, 1, 1])",
        "numberOfGoodSubarraySplits(nums=[1,2,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,2,2,1])"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "maximumBeauty(nums = [1, 3, 2, 6, 1, 4, 2, 3], k = 3)",
        "maximumBeauty(nums = [1, 3, 2, 6, 1, 5, 4], k = 2)",
        "maximumBeauty(nums=[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], k=3)",
        "maximumBeauty(nums = [1, 3, 2, 6, 1, 12, 8, 10], k = 3)",
        "maximumBeauty(nums = [2, 3, 5, 6, 7, 8, 10], k = 1)",
        "maximumBeauty(nums = [1, 3, 4, 10, 12, 13, 20, 21], k = 3)"
    ],
    "sample_117": [
        "minimumIndex(nums = [3,1,3,3,2,3])",
        "minimumIndex(nums = [3,1,3,3,2,3])",
        "minimumIndex(nums = [1, 0, 1, 1, 1])",
        "minimumIndex(nums = [3, 4, 5, 1, 2, 2])",
        "minimumIndex(nums = [3, 4, 5, 1, 2, 2, 2])",
        "minimumIndex(nums = [3, 2, 3, 1, 2, 4, 5])",
        "minimumIndex(nums = [3, 2, 1, 2, 5])",
        "minimumIndex(nums = [1, 0, 1, 1, 1, 0, 0, 0, 0, 1])",
        "minimumIndex(nums = [3,2,2,1])",
        "minimumIndex(nums = [0, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 8, num2 = 2)",
        "makeTheIntegerZero(num1 = 8, num2 = 2)",
        "makeTheIntegerZero(num1 = 11, num2 = 3)",
        "makeTheIntegerZero(num1 = 14, num2 = 3)",
        "makeTheIntegerZero(num1 = 12, num2 = 5)",
        "makeTheIntegerZero(num1 = 27, num2 = 3)",
        "makeTheIntegerZero(num1 = 24, num2 = 1)"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56])",
        "countBeautifulPairs(nums = [12, 23, 34, 45])",
        "countBeautifulPairs(nums = [12, 23])",
        "countBeautifulPairs(nums = [12, 34])",
        "countBeautifulPairs(nums = [22, 23, 24])",
        "countBeautifulPairs(nums = [12, 28, 6, 14])",
        "countBeautifulPairs(nums = [12, 20, 35, 40])",
        "countBeautifulPairs(nums = [12,33,56,77])",
        "countBeautifulPairs(nums = [22, 24, 39, 42])",
        "countBeautifulPairs(nums = [22, 11, 66, 55, 44])"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 11, num2 = 2)",
        "makeTheIntegerZero(num1 = 11, num2 = 1)",
        "makeTheIntegerZero(num1 = 7, num2 = 1)",
        "makeTheIntegerZero(num1 = 20, num2 = 4)",
        "makeTheIntegerZero(num1 = 17, num2 = 5)",
        "makeTheIntegerZero(num1 = 15, num2 = 4)",
        "makeTheIntegerZero(num1 = 12, num2 = 5)",
        "makeTheIntegerZero(num1 = 31, num2 = 2)",
        "makeTheIntegerZero(num1 = 30, num2 = 12)",
        "makeTheIntegerZero(num1 = 77, num2 = 8)"
    ],
    "sample_20": [
        "minLength(s = \"ABCDEF\")",
        "minLength(s = \"ABCDEF\")",
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABABABCDCDCD\")",
        "minLength(s = \"ABCDABCDAB\")",
        "minLength(s = \"ABABABABCDCDCD\")",
        "minLength(s = \"AABBCCDD\")",
        "minLength(s = \"ABCDCDABCDABABCD\")",
        "minLength(s = \"ABABAABCDCDA\")",
        "minLength(s = \"ACBDEAF\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1, 4, 5, 10, 11], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "maximumBeauty(nums = [1, 3, 2, 6, 1, 12, 5], k = 4)",
        "maximumBeauty(nums = [1, 2, 4, 5, 7], k = 2)",
        "maximumBeauty(nums = [1, 4, 5, 10, 11, 12], k = 2)",
        "maximumBeauty(nums = [1, 5, 2, 4, 3], k = 2)",
        "maximumBeauty(nums = [2, 3, 5, 5, 6, 8, 12, 13], k = 3)"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums=[12, 34, 56, 78])",
        "countBeautifulPairs(nums=[12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12,24,36,48,60])",
        "countBeautifulPairs(nums=[22, 23, 24, 25, 26])",
        "countBeautifulPairs(nums=[12, 28, 6, 8])",
        "countBeautifulPairs(nums=[22,45,73])",
        "countBeautifulPairs(nums=[44, 55, 444, 555])",
        "countBeautifulPairs(nums=[35,55,25,55])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 15, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 11, num2 = 2)",
        "makeTheIntegerZero(num1 = 17, num2 = 5)",
        "makeTheIntegerZero(num1 = 23, num2 = 3)",
        "makeTheIntegerZero(num1 = 17, num2 = 2)",
        "makeTheIntegerZero(num1=9, num2=3)",
        "makeTheIntegerZero(num1 = 51, num2 = 3)",
        "makeTheIntegerZero(num1 = 29, num2 = 6)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'evenn')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"nven\")",
        "makeSmallestPalindrome(s = 'nene')",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = 'venen')",
        "makeSmallestPalindrome(s = \"leve\")",
        "makeSmallestPalindrome(s='abcba')",
        "makeSmallestPalindrome(s = \"rev\")"
    ],
    "sample_37": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abac\")",
        "minimumCost(s = \"abac\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abaab\")",
        "minimumCost(s = \"aabab\")",
        "minimumCost(s = \"abcda\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums=[1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 0, 0, 1])"
    ],
    "sample_105": [
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1, 1, 1], k = 2)",
        "checkArray(nums = [2, 1, 1], k = 2)",
        "checkArray(nums = [1, 1], k = 1)",
        "checkArray(nums = [2,1,3], k = 2)",
        "checkArray(nums = [5, 3, 1, 4, 2], k = 2)",
        "checkArray(nums = [5, 3, 2, 1, 1], k = 3)",
        "checkArray(nums = [3, 2, 1, 1, 2], k = 3)",
        "checkArray(nums = [3, 4, 5, 2, 1], k = 3)",
        "checkArray(nums=[5, 1, 4, 2, 1], k=3)"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 5, 2, 4, 3])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [1, 5, 2, 6, 3, 7, 4])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [1, 4, 2, 5, 3])",
        "semiOrderedPermutation(nums = [1, 3, 2, 6, 5, 4])",
        "semiOrderedPermutation(nums = [1, 3, 2, 5, 4])",
        "semiOrderedPermutation(nums = [1, 5, 2, 3, 4, 6])",
        "semiOrderedPermutation(nums = [1, 2, 4, 3, 5])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 1, 1], k = 2)",
        "checkArray(nums = [1, 2, 3, 4], k = 1)",
        "checkArray(nums = [23,2,4,6,7], k = 2)",
        "checkArray(nums = [1, 2, 3, 4], k = 3)",
        "checkArray(nums = [1, 2, 1], k = 2)",
        "checkArray(nums = [1,2,3,4,5,6], k = 2)",
        "checkArray(nums = [1,2], k = 1)",
        "checkArray(nums = [3, 2, 1, 1], k = 2)",
        "checkArray(nums = [23,2,3,1,2], k = 2)"
    ],
    "sample_39": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"leetcode\")",
        "minimumCost(s = \"abaaca\")",
        "minimumCost(s = \"ab\")"
    ],
    "sample_65": [
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5, 6])",
        "findValueOfPartition(a = [2, 1, 1, 3])",
        "findValueOfPartition(a = [1, 2, 2, 3, 7])",
        "findValueOfPartition(a = [2, 2, 3, 4, 5])",
        "findValueOfPartition(a = [5, 1, 4, 3, 2])",
        "findValueOfPartition(a = [3, 1, 5, 7])",
        "findValueOfPartition(a = [1, 5, 2, 3, 4])",
        "findValueOfPartition(a = [5, 1, 2, 4, 7])",
        "findValueOfPartition(a = [0, 1, 2, 3, 4, 5, 6, 7, 8])"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 6, additionalTank = 0)",
        "distanceTraveled(mainTank=1, additionalTank=0)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank=3, additionalTank=0)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 2])",
        "doesValidArrayExist(derived = [2, 6, 4])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0, 1, 0])"
    ],
    "sample_106": [
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "checkArray(nums = [1, 2, 3], k = 2)",
        "checkArray(nums = [1, 2, 3], k = 1)",
        "checkArray(nums = [3, 2, 1, 4], k = 2)",
        "checkArray(nums = [2, 1, 4, 3, 2], k = 2)",
        "checkArray(nums = [1, 1, 1, 1], k = 3)",
        "checkArray(nums=[1, 2, 3], k=3)",
        "checkArray(nums = [2, 3, 4, 5, 6, 7, 8], k = 2)",
        "checkArray(nums = [3, 1, 1, 3], k = 2)",
        "checkArray(nums = [0,0,0,0,0,0], k = 2)"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [1, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums=[1, 2], threshold=3)",
        "longestAlternatingSubarray(nums = [3, 4], threshold = 2)",
        "longestAlternatingSubarray(nums = [5, 2, 3, 4], threshold = 5)",
        "longestAlternatingSubarray(nums = [0, 1, 1, 0, 1, 1], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 17, 8], threshold = 8)",
        "longestAlternatingSubarray(nums = [0, 2], threshold = 10)",
        "longestAlternatingSubarray(nums=[5,2,3], threshold=5)",
        "longestAlternatingSubarray(nums = [3, 7], threshold = 25)"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [12, 28, 46, 34])",
        "countBeautifulPairs(nums = [12, 28, 6, 10])",
        "countBeautifulPairs(nums = [12, 28, 6, 8])",
        "countBeautifulPairs(nums = [11, 22, 33])",
        "countBeautifulPairs(nums = [12, 28, 19, 36])",
        "countBeautifulPairs(nums = [12, 28, 46, 32, 7])",
        "countBeautifulPairs(nums=[12,28,36,50])",
        "countBeautifulPairs(nums = [12, 28, 6, 18, 42])",
        "countBeautifulPairs(nums = [22,23,45,33])",
        "countBeautifulPairs(nums = [220, 284, 230, 226])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1], t = 1)",
        "longestAlternatingSubarray(nums = [1], t = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 3], t = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3], t = 3)",
        "longestAlternatingSubarray(nums = [2], t = 2)",
        "longestAlternatingSubarray(nums = [2, 1], t = 2)",
        "longestAlternatingSubarray(nums = [2, 1], t = 2)",
        "longestAlternatingSubarray(nums = [1,2], t = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], t = 10)",
        "longestAlternatingSubarray(nums = [2, 1, 4, 3, 6], t = 5)"
    ],
    "sample_36": [
        "minimumCost(s = \"abac\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abacabad\")",
        "minimumCost(s = \"ABAB\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"aaca\")",
        "minimumCost(s = \"caaad\")",
        "minimumCost(s = \"ACAB\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDEF\")",
        "minLength(s = \"ABCDCDABCD\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABACDAB\")",
        "minLength(s = \"ABCDEABCDE\")",
        "minLength(s = \"ABCDabCDAB\")",
        "minLength(s = \"ABABAACD\")"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,0,1])",
        "numberOfGoodSubarraySplits(nums=[1, 0, 1, 1, 0, 0, 1, 0])"
    ],
    "sample_9": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 1]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 1]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]])",
        "colorTheArray(n = 3, queries = [[1, 1], [1, 2], [1, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [4, 1], [3, 2], [2, 2]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [1, 3, 2])",
        "maxNonDecreasingLength(nums1 = [1, 2, 1], nums2 = [2, 1, 2])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 2, 1], nums2 = [1, 3, 2, 2, 1])",
        "maxNonDecreasingLength(nums1=[13, 4, 7], nums2=[5, 8, 10])",
        "maxNonDecreasingLength(nums1=[13, 4, 7], nums2=[5, 8, 10])",
        "maxNonDecreasingLength(nums1 = [3, 4, 5, 6], nums2 = [2, 3, 4, 5])",
        "maxNonDecreasingLength(nums1 = [2, 3, 4, 5], nums2 = [1, 3, 4, 6])",
        "maxNonDecreasingLength(nums1 = [3, 4, 5, 5], nums2 = [4, 3, 5, 5])",
        "maxNonDecreasingLength(nums1 = [2, 5, 3, 4, 6], nums2 = [1, 3, 2, 4, 5])",
        "maxNonDecreasingLength(nums1 = [5, 4, 3, 2], nums2 = [1, 1, 2, 2])"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums=[1,2,3,4,5], k=1)",
        "maximumBeauty(nums = [2, 3, 5, 1, 6], k = 1)",
        "maximumBeauty(nums = [1, 4, 2, 3], k = 0)",
        "maximumBeauty(nums = [1, 10, 2, 3, 3], k = 2)",
        "maximumBeauty(nums = [5, 2, 8, 12, 9], k = 1)",
        "maximumBeauty(nums = [3, 2, 5, 4, 7, 2, 3], k = 3)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2])",
        "findValueOfPartition(nums = [1, 1, 1])",
        "findValueOfPartition(nums = [2,3,4])",
        "findValueOfPartition(nums = [3, 3, 1])",
        "findValueOfPartition(nums = [3, 5, 5, 7])",
        "findValueOfPartition(nums = [2, 2, 3, 5, 5, 7, 8])",
        "findValueOfPartition(nums = [2, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1,2,3,4])",
        "findValueOfPartition(nums = [1,2,3,4,5])",
        "findValueOfPartition(nums = [1,2,5])",
        "findValueOfPartition(nums = [1, 3, 5, 7, 9])",
        "findValueOfPartition(nums = [1, 5, 7, 8])",
        "findValueOfPartition(nums = [1, 2, 2, 3, 3])",
        "findValueOfPartition(nums = [2,3,4,5,6,7])",
        "findValueOfPartition(nums = [2, 3, 3, 4])",
        "findValueOfPartition(nums = [3, 4, 5, 7, 8, 9])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [4, 1, 3, 2])",
        "semiOrderedPermutation(nums = [1, 4, 2, 5, 3])",
        "semiOrderedPermutation(nums = [1, 3, 5, 2, 4, 6])",
        "semiOrderedPermutation(nums=[0, 1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [0, 2, 1, 3, 4])",
        "semiOrderedPermutation(nums = [1, 4, 2, 3, 7, 6, 5, 8])"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [2, 1, 3, 4, 5])",
        "semiOrderedPermutation(nums = [2, 1, 3, 5, 4, 6])",
        "semiOrderedPermutation(nums = [1, 2, 5, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3, 6, 5, 4])",
        "semiOrderedPermutation(nums=[1, 3, 2, 4])",
        "semiOrderedPermutation(nums = [2, 4, 3, 1])",
        "semiOrderedPermutation(nums = [1, 5, 4, 2, 3])",
        "semiOrderedPermutation(nums = [2,1,3,6,5,4])",
        "semiOrderedPermutation(nums=[3, 4, 1, 5, 2])",
        "semiOrderedPermutation(nums = [4, 5, 1, 3, 2, 6])"
    ],
    "sample_167": [
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words=[\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"water\", \"fun\", \"time\"], s = \"wft\")",
        "isAcronym(words = [\"united\", \"nations\"], s = \"us\")",
        "isAcronym(words = [\"ball\", \"paddle\", \"bat\"], s = \"BPB\")",
        "isAcronym(words=[\"university\", \"of\", \"california\", \"berkeley\"], s = \"UCB\")",
        "isAcronym(words = [\"cool\", \"dude\", \"apples\"], s = \"CAD\")",
        "isAcronym(words = [\"wine\", \"is\", \"an\", \"acronym\"], s = \"wia\")",
        "isAcronym(words = [\"C\", \"s\"], s = \"S\")",
        "isAcronym(words=[\"as\", \"long\", \"as\", \"a\"], s=\"ASL\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], m = 2, k = 0)",
        "countInterestingSubarrays(nums=[1, 2, 3, 1, 2, 3], m=2, k=1)",
        "countInterestingSubarrays(nums=[2, 2, 2, 1], m=2, k=1)",
        "countInterestingSubarrays(nums = [1,2,3,1,2], m = 2, k = 1)",
        "countInterestingSubarrays(nums=[2, 1, 3], m=2, k=0)",
        "countInterestingSubarrays(nums=[2, 1, 3, 2, 3], m=2, k=1)",
        "countInterestingSubarrays(nums = [2, 3, 1, 4, 5], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 3, 2, 1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 3, 2, 4], m = 3, k = 0)",
        "countInterestingSubarrays(nums=[7, 3, 4], m=2, k=0)"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1,2],[2,3],[4,5]])",
        "numberOfPoints(nums = [[1,5],[2,3],[4,7]])",
        "numberOfPoints(nums = [[1,5],[2,3],[4,7]])",
        "numberOfPoints(nums = [[1,5],[2,3],[7,8]])",
        "numberOfPoints(nums = [[1,5],[2,3]])",
        "numberOfPoints(nums = [[1,5],[3,4]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[4,5]])",
        "numberOfPoints(nums = [[1,3],[2,4],[7,8]])",
        "numberOfPoints(nums = [[2,5],[1,2],[4,7]])",
        "numberOfPoints(nums = [[0, 1], [2, 4], [5, 6], [7, 8]])"
    ],
    "sample_127": [
        "splitWordsBySeparator(words=['easy-problem'], separator='-')",
        "splitWordsBySeparator(words = [\"easy_problem\"], separator = \"_\")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \"-\")",
        "splitWordsBySeparator(words=['easy_problem'], separator='_')",
        "splitWordsBySeparator(words = ['easy', 'problem'], separator = '-')",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \"_\")",
        "splitWordsBySeparator(words=[\"easy_problem\"], separator=\"_\")",
        "splitWordsBySeparator(words = [\"easy,problem\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easyproblem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easyproblem\"], separator = \"_\")"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1,2],[2,3],[4,6]])",
        "numberOfPoints(nums = [[1, 5], [10, 20], [2, 8]])",
        "numberOfPoints(nums = [[1,5],[1,5],[3,4]])",
        "numberOfPoints(nums = [[1,2], [2,4], [4,7]])",
        "numberOfPoints(nums = [[0, 3], [4, 6], [8, 10]])",
        "numberOfPoints(nums=[[1,5],[2,3]])",
        "numberOfPoints(nums = [[0,1],[3,4],[2,3]])",
        "numberOfPoints(nums = [[0,1],[0,3],[3,4]])",
        "numberOfPoints(nums=[[0, 3], [5, 7], [8, 10]])",
        "numberOfPoints(nums = [[0, 1], [1, 2], [2, 4], [0, 2], [5, 5]])"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2])",
        "countCompleteSubarrays(nums = [1,1,2,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 3])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words=['one', 'two', 'three', 'four', 'five', 'six'], separator=' ')",
        "splitWordsBySeparator(words=['one', 'two', 'three', 'four', 'five', 'six'], separator=' ')",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"*\")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = '-')",
        "splitWordsBySeparator(words = [\"one two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words=['one', 'two', 'three', 'four', 'five', 'six'], separator='*')",
        "splitWordsBySeparator(words=['one', 'two', '', 'three', 'four', 'five', 'six'], separator='-')",
        "splitWordsBySeparator(words=['one', 'two', '', 'three', 'four', 'five', '', 'six'], separator='-')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', '', 'four', '', '', 'five', '', '', 'six'], separator = ' ')"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3])",
        "maxIncreasingGroups(u = [1, 2, 2, 3])",
        "maxIncreasingGroups(u = [1, 2, 4, 5, 6])",
        "maxIncreasingGroups(u = [3, 2, 1, 2, 3])",
        "maxIncreasingGroups(u = [1, 2, 4, 3, 5])",
        "maxIncreasingGroups(u = [3, 5, 1, 2, 4])",
        "maxIncreasingGroups(u = [5, 5, 3])",
        "maxIncreasingGroups(u = [1, 3, 6, 9, 10, 11])",
        "maxIncreasingGroups(u = [2, 1, 3, 5, 1, 2, 3, 4])"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1, 2, 3, 4, 5], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [1, 3, 6, 10, 15], x = 3)",
        "minAbsoluteDifference(nums = [4, 2, 1, 3], x = 1)",
        "minAbsoluteDifference(nums = [1, 3, 5], x = 1)",
        "minAbsoluteDifference(nums = [3, 8, -10, 23, 19, -4, -14, 27], x = 3)",
        "minAbsoluteDifference(nums=[1, 2, 3], x=1)",
        "minAbsoluteDifference(nums = [2, 1, 3, 1, 2], x = 2)",
        "minAbsoluteDifference(nums = [5, 3, 2, 1], x = 2)",
        "minAbsoluteDifference(nums = [2, 7, 2, 7], x = 2)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4, 5], modulo=3, k=0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [3, 3, 3], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [3, 1, 4, 1, 5], modulo = 4, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [4, 5, 1, 2], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [3, 5, 7, 9], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [3, 2, 1, 3], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [3, 4, 1], modulo = 4, k = 2)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 1, 1, 1], m = 2)",
        "canSplitArray(nums = [7, 2, 5, 8, 1, 3], m = 10)",
        "canSplitArray(nums=[2, 2, 1, 1], m=4)",
        "canSplitArray(nums = [7, 1, 1, 1, 2], m = 3)",
        "canSplitArray(nums = [2, 2, 3, 3, 4, 4], m = 5)",
        "canSplitArray(nums = [2, 3, 5, 7, 8], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 1, 1, 1, 1, 1, 1, 1], m = 5)",
        "canSplitArray(nums = [7, 14, 15], m = 14)",
        "canSplitArray(nums = [7, 1, 1, 7, 7, 1, 7, 1, 1], m = 4)",
        "canSplitArray(nums = [7, 15, 23, 17], m = 27)"
    ],
    "sample_169": [
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words=[\"quick\", \"brown\", \"fox\"], s=\"qbf\")",
        "isAcronym(words = [\"abc\", \"def\", \"ghi\"], s = \"adg\")",
        "isAcronym(words = [\"apple\", \"banana\", \"carrot\"], s = \"abc\")",
        "isAcronym(words = [\"ruby\", \"on\", \"rails\"], s = \"ROR\")",
        "isAcronym(words = [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"], s = \"Mhalal\")",
        "isAcronym(words=['quick', 'brown', 'fox'], s='QBF')",
        "isAcronym(words = [\"The\", \"quick\", \"brown\"], s = \"Tqb\")",
        "isAcronym(words = [\"fast\", \"car\", \"together\"], s = \"fcat\")",
        "isAcronym(words = [\"Some\", \"Fruit\", \"Apple\", \"Cake\"], s = \"SFA\")"
    ],
    "sample_121": [
        "minimumIndex(nums = [3,1,3,3,2,4])",
        "minimumIndex(nums = [3,1,3,3,2,4])",
        "minimumIndex(nums = [3,1,3,3,2,4])",
        "minimumIndex(nums = [3,1,3,4,2])",
        "minimumIndex(nums = [3, 1, 3, 3, 2, 4])",
        "minimumIndex(nums = [3,1,3,2,4,2])",
        "minimumIndex(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2",
        "minimumIndex(nums=[1,2,3,4,5])",
        "minimumIndex(nums = [1, 4, 2, 10, 3, 1])",
        "minimumIndex(nums = [4, 2, 1, 5, 3])"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 4, 3], [3, 5, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 4, 2], [2, 5, 1], [3, 7, 3]])",
        "maximizeTheProfit(n = 6, offers = [[1, 4, 2], [2, 5, 3], [3, 6, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,3], [2,4,4], [3,5,5], [4,6,6], [5,7,7]])",
        "maximizeTheProfit(n = 6, offers = [[1, 3, 4], [2, 4, 2], [3, 5, 3], [4, 6, 1]])",
        "maximizeTheProfit(n = 4, offers = [[1, 4, 5], [2, 3, 6], [4, 5, 8], [3, 4, 10]])",
        "maximizeTheProfit(n=6, offers=[[1, 4, 1], [2, 5, 2], [3, 6, 1]])",
        "maximizeTheProfit(n=5, offers=[[1,3,10],[2,4,100],[3,5,100]])",
        "maximizeTheProfit(n = 4, offers = [[1, 4, 10], [3, 4, 10], [2, 4, 10], [1, 2, 5]])",
        "maximizeTheProfit(n = 6, offers = [[1, 4, 2], [3, 6, 1], [2, 5, 3], [4, 7, 4], [1, 2, 5]])"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums=[1, 2, 3, 4])",
        "maximumTripletValue(nums = [-2, 1, 2])",
        "maximumTripletValue(nums = [-1, 1, -1])",
        "maximumTripletValue(nums = [1,2,3,4,5,6,7,8])"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"L_R_\")",
        "furthestDistanceFromOrigin(moves = \"L_R\")",
        "furthestDistanceFromOrigin(moves = \"L_R_L_R\")",
        "furthestDistanceFromOrigin(moves = \"__L_R_\")",
        "furthestDistanceFromOrigin(moves = \"_LRL\")",
        "furthestDistanceFromOrigin(moves = 'L__R__')",
        "furthestDistanceFromOrigin(moves = \"L_____R_\")",
        "furthestDistanceFromOrigin(moves = \"RL_RL\")",
        "furthestDistanceFromOrigin(moves = \"_____LRLRLR\")",
        "furthestDistanceFromOrigin(moves = 'U_U_U_L_L')"
    ],
    "sample_149": [
        "finalString(s = \"This is a string\")",
        "finalString(s = \"sing\")",
        "finalString(s = \"This is a test string.\")",
        "finalString(s = 'kitten')",
        "finalString(s = 'impossible')",
        "finalString(s = 'right')",
        "finalString(s = \"fishing\")",
        "finalString(s = 'irisng')",
        "finalString(s = \"abcdefghi\")",
        "finalString(s = \"if you are reading this\")"
    ],
    "sample_162": [
        "maxSum(nums=[9, 88, 77])",
        "maxSum(nums = [88, 95, 100, 200])",
        "maxSum(nums = [83, 9, 88, 86])",
        "maxSum(nums = [338, 440, 555, 66, 77])",
        "maxSum(nums = [12, 345, 2, 6, 78, 9, 87, 1, 10, 12])",
        "maxSum(nums = [111, 10001, 11111, 90])",
        "maxSum(nums = [15, 9, 77, 10, 35])",
        "maxSum(nums = [47, 23, 34, 76, 65, 88, 10])",
        "maxSum(nums = [39, 29, 24, 4, 12, 18])",
        "maxSum(nums = [123, 23, 12, 55, 78, 9, 87, 98, 77, 66, 1, 2, 3, 99, 99, 99, 99, 99, 99, 99, 99])"
    ],
    "sample_230": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2])",
        "countWays(nums=[1, 2, 3])",
        "countWays(nums=[1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [2, 1, 2])",
        "countWays(nums = [1, 1, 2, 2])",
        "countWays(nums=[1,1,1,1])",
        "countWays(nums = [2, 2, 3, 3])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 4, target = 3)",
        "minimumPossibleSum(n = 4, target = 5)",
        "minimumPossibleSum(n = 5, target = 30)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 3, offers = [[1, 2, 2], [2, 3, 3]])",
        "maximizeTheProfit(N = 4, offers = [[1, 3, 2], [2, 4, 1], [3, 4, 3]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 2], [1, 3, 3], [2, 3, 1]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 2], [2, 3, 3], [3, 4, 4], [4, 5, 5]])",
        "maximizeTheProfit(N = 4, offers = [[1, 3, 1], [2, 4, 1], [3, 4, 1]])",
        "maximizeTheProfit(N = 4, offers = [[1, 2, 2], [2, 3, 3], [4, 5, 1]])",
        "maximizeTheProfit(N = 5, offers = [[1, 5, 3], [2, 4, 2], [3, 5, 4]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 1], [2, 3, 2], [3, 4, 3]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 100], [2, 3, 100], [3, 4, 100], [4, 5, 100], [2, 5, 200]])",
        "maximizeTheProfit(N = 3, offers = [[1,2,3], [2,3,4], [1,3,2]])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 4, 4], [3, 5, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [3, 4, 3], [4, 5, 4]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 10], [2, 3, 1]])",
        "maximizeTheProfit(n = 4, offers = [[1, 3, 5], [3, 4, 2]])",
        "maximizeTheProfit(n = 10, offers = [[1, 5, 2], [3, 6, 3], [7, 10, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 4, 4], [2, 3, 2], [2, 5, 3]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 2], [2, 4, 2], [2, 5, 3], [3, 5, 1]])",
        "maximizeTheProfit(n=7, offers=[[1,3,4],[2,4,5],[3,7,6]])",
        "maximizeTheProfit(n = 6, offers = [[1, 4, 8], [2, 3, 7], [4, 6, 3], [5, 6, 4]])",
        "maximizeTheProfit(n = 6, offers = [[2, 4, 2], [4, 6, 1], [2, 5, 2]])"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 35)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [30, 40, 50], target = 55)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4, 5, 6, 7, 8], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 8, 12], target = 14)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 10, 20, 15], target = 25)",
        "numberOfEmployeesWhoMetTarget(hours = [15, 10, 20, 5], target = 12)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 18, 19, 21, 17], target = 25)"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1,2,3,4])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums=[1,2,3])",
        "countCompleteSubarrays(nums = [2,3,2,3,2])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1,2,3])",
        "countWays(nums = [1, 3, 2])",
        "countWays(nums = [2, 3, 4, 5])",
        "countWays(nums = [3, 2, 1, 4])",
        "countWays(nums = [4, 1, 3])",
        "countWays(nums = [2, 3, 5, 8, 10])",
        "countWays(nums = [1, 3, 2, 1, 2])",
        "countWays(nums=[0,1,2,4,6])"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [3, 2, 1])",
        "maxIncreasingGroups(usageLimits = [1, 1, 1, 1])",
        "maxIncreasingGroups(usageLimits = [1, 2, 1])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5, 6, 7, 8])",
        "maxIncreasingGroups(usageLimits=[1, 2, 3, 4, 5, 6, 7])",
        "maxIncreasingGroups(usageLimits = [1,2,3,4,5,6])",
        "maxIncreasingGroups(usageLimits = [8, 5, 2, 1])",
        "maxIncreasingGroups(usageLimits = [0, 0, 1, 1, 2])",
        "maxIncreasingGroups(usageLimits = [2, 2, 4, 1])",
        "maxIncreasingGroups(usageLimits = [4,2,1,1,1])"
    ],
    "sample_173": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 3, k = 2)"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 2, 3], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 2, 2], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [3, 4, 5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 1, 3, 2], m = 2, k = 0)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4], m=3, k=2)",
        "countInterestingSubarrays(nums = [2, 1, 3], m = 4, k = 0)",
        "countInterestingSubarrays(nums = [2, 2, 2, 1, 2, 2, 2], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 6, 4, 5, 3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], m = 3, k = 1)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 0)",
        "longestEqualSubarray(nums = [1,1,1,1,1], k = 0)",
        "longestEqualSubarray(nums = [1,2,3,4], k = 1)",
        "longestEqualSubarray(nums = [1, 1, 1, 1, 1], k = 1)",
        "longestEqualSubarray(nums = [1, 1, 1, 1], k = 0)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 2, 2, 2], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 1, 2, 3, 4], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,2,2,2,2,2,2,2,2,2,2], k = 0)"
    ],
    "sample_170": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"apple\", \"banana\"], s = \"ab\")",
        "isAcronym(words = [\"ab\", \"c\"], s = \"ac\")",
        "isAcronym(words = [\"water\", \"fruit\", \"yellow\"], s = \"WFY\")",
        "isAcronym(words = [\"code\", \"wars\", \"expert\"], s = \"cde\")",
        "isAcronym(words = [\"good\", \"night\", \"moon\"], s = \"GINM\")",
        "isAcronym(words=[\"water\", \"falls\", \"cold\"], s=\"WFAC\")",
        "isAcronym(words=[\"these\", \"words\", \"are\", \"not\", \"an\", \"acronym\"], s=\"tnaa\")",
        "isAcronym(words = [\"best\", \"of\", \"fortune\"], s = \"BOOTS\")"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = '00')",
        "maximumOddBinaryNumber(s = '110')",
        "maximumOddBinaryNumber(s = '100')",
        "maximumOddBinaryNumber(s = '0110')",
        "maximumOddBinaryNumber(s = '010101')",
        "maximumOddBinaryNumber(s = '1011')",
        "maximumOddBinaryNumber(s = \"1001\")",
        "maximumOddBinaryNumber(s = '01001')",
        "maximumOddBinaryNumber(s = \"1000101\")",
        "maximumOddBinaryNumber(s = '10110000')"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1,2,3])",
        "countWays(nums = [1,2,3,4,5])",
        "countWays(nums = [1,2,3,4,5])",
        "countWays(nums = [1, 1, 2, 2])",
        "countWays(nums = [1, 2, 2, 3, 3])",
        "countWays(nums=[2, 3, 4])",
        "countWays(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 4, offers = [[1, 2, 5], [3, 4, 10]])",
        "maximizeTheProfit(n = 3, offers = [[1,1,2], [2,2,3], [3,3,4]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 2], [1, 4, 5], [2, 3, 3], [3, 5, 3]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,10],[2,4,15],[3,5,20],[4,5,5],[5,5,25]])",
        "maximizeTheProfit(n = 4, offers = [[1, 3, 3], [2, 4, 4], [2, 3, 2], [1, 4, 4]])",
        "maximizeTheProfit(n = 4, offers = [[1, 3, 3], [2, 4, 1], [3, 3, 2], [2, 2, 2]])",
        "maximizeTheProfit(n = 4, offers = [[1, 4, 6], [2, 2, 9], [3, 1, 8]])",
        "maximizeTheProfit(n = 7, offers = [[3, 4, 5], [1, 2, 5]])",
        "maximizeTheProfit(n = 6, offers = [[3, 4, 1], [1, 2, 5], [5, 6, 3]])",
        "maximizeTheProfit(n = 3, offers = [[1, 1, 3], [3, 2, 3], [1, 3, 2], [2, 3, 1]])"
    ],
    "sample_122": [
        "minimumIndex(nums = [3,1,3,3,2,3])",
        "minimumIndex(nums = [3,1,3,3,2,4])",
        "minimumIndex(nums=[3,1,3,3,2])",
        "minimumIndex(nums = [1,1,2,2,3,3])",
        "minimumIndex(nums = [2, 1, 2, 2, 2])",
        "minimumIndex(nums = [1,2,2,3,4,4,5,6])",
        "minimumIndex(nums = [2, 1, 3, 2])",
        "minimumIndex(nums = [3,1,2,1,3])",
        "minimumIndex(nums = [2,2,2,3,3])",
        "minimumIndex(nums = [3, 1, 3, 4, 1, 1])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1,2],[2,3],[4,5]])",
        "numberOfPoints(nums = [[1,2],[2,3],[4,5]])",
        "numberOfPoints(nums = [[1,5],[2,3],[7,8]])",
        "numberOfPoints(nums = [[1,3], [2,4], [3,5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 5]])",
        "numberOfPoints(nums = [[1, 5], [2, 6], [3, 7]])",
        "numberOfPoints(nums = [[1,2], [2,3], [4,5], [5,7]])",
        "numberOfPoints(nums = [[1, 2], [2, 4], [5, 6], [7, 8], [8, 9]])",
        "numberOfPoints(nums = [[1,2], [2,4], [4,5], [7,8]])",
        "numberOfPoints(nums=[[1,5], [2,4], [1, 3]])"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"\", \"\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"\"], separator = \"\")",
        "splitWordsBySeparator(words=[\"\"], separator=\",\")",
        "splitWordsBySeparator(words = [\"\", \"\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"\"], separator = \"#\")",
        "splitWordsBySeparator(words = [\"\"], separator = \"#\")",
        "splitWordsBySeparator(words = [\"\", \"\", \"\"], separator = \",\")",
        "splitWordsBySeparator(words = ['', '', ''])",
        "splitWordsBySeparator(words = [\"abc\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"orange\"], separator = \"#\")"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n=2, target=3)",
        "minimumPossibleSum(n=10, target=1)"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1,3],[1,4],[2,4],[2,5]])",
        "numberOfPoints(nums = [[1,5],[2,3]])",
        "numberOfPoints(nums = [[1,5],[2,4]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1,2],[2,4],[4,7]])",
        "numberOfPoints(nums = [[1,2],[2,3],[4,7]])",
        "numberOfPoints(nums = [[0,2],[2,4],[4,6]])",
        "numberOfPoints(nums = [[0,1],[1,2],[2,3],[4,5],[5,6],[6,7]])",
        "numberOfPoints(nums = [[1,5],[2,3],[1,5]])",
        "numberOfPoints(nums = [[1,3],[1,5],[7,8],[4,6]])"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 3], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3], m = 3, k = 1)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4], m=3, k=0)",
        "countInterestingSubarrays(nums = [3, 4, 5, 2, 1], m = 3, k = 1)",
        "countInterestingSubarrays(nums=[3, 2, 1, 1, 1], m=3, k=1)",
        "countInterestingSubarrays(nums = [3, 4, 0], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 3], m = 4, k = 0)",
        "countInterestingSubarrays(nums = [7, 3, 2, 1, 4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [3, 4, 4], m = 6, k = 1)"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums=[1, 3, 5], k=1)",
        "sumIndicesWithKSetBits(nums = [5, 2, 6, 1, 8], k = 2)"
    ],
    "sample_203": [
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"55\")",
        "minimumOperations(num = \"55\")",
        "minimumOperations(num = \"1234\")",
        "minimumOperations(num = \"02\")",
        "minimumOperations(num = \"001\")",
        "minimumOperations(num = \"88\")",
        "minimumOperations(num = \"14\")",
        "minimumOperations(num = \"5025\")",
        "minimumOperations(num = \"825\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], modulo = 10, k = 1)",
        "countInterestingSubarrays(nums = [3, 1, 4, 1, 5, 9, 2], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 2, 2, 1, 1], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,2,1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 1, 1, 2, 2], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums=[1, 1, 1, 1], modulo=1000000007, k=0)",
        "countInterestingSubarrays(nums=[1,1], modulo=1000000007, k=1)",
        "countInterestingSubarrays(nums=[2,1,3], modulo=2, k=0)"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1,2,3,4,5], K = 1)",
        "longestEqualSubarray(A = [1,1,1,1,1], K = 2)",
        "longestEqualSubarray(A = [1,1,1,1,1], K = 2)",
        "longestEqualSubarray(A = [1,2,3,4,5], K = 0)",
        "longestEqualSubarray(A = [1,2,3,4,5], K = 0)",
        "longestEqualSubarray(A = [1, 1, 1, 1], K = 1)",
        "longestEqualSubarray(A = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2",
        "longestEqualSubarray(A = [2, 2, 2, 3, 3, 4, 4, 4, 4], K = 2)",
        "longestEqualSubarray(A = [1,2,3,4,4,4,4], K = 0)",
        "longestEqualSubarray(A = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], K = 1)"
    ],
    "sample_146": [
        "finalString(s = 'pointer')",
        "finalString(s = 'pointer')",
        "finalString(s = \"pointer\")",
        "finalString(s = \"pointer\")",
        "finalString(s = 'racecar')",
        "finalString(s = \"poitni\")",
        "finalString(s = 'string')",
        "finalString(s = 'pohtnie')",
        "finalString(s = 'potient')",
        "finalString(s = \"Pqeitnroo\")"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 15, 18, 20], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 35)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 5, 10, 3], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 24, 30, 18, 22], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 9, 8, 12, 11], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 14, 15, 16], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [24, 25, 26, 24, 25], target = 25)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 8, 12, 3, 9, 22], target = 8)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1,5],[1,5]])",
        "numberOfPoints(nums = [[1, 2], [3, 5], [6, 7]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1,2],[3,4],[5,6],[7,8]])",
        "numberOfPoints(nums = [[1,3],[6,9]])",
        "numberOfPoints(nums = [[1,5],[2,4],[3,5]])",
        "numberOfPoints(nums = [[1, 5], [2, 3], [3, 4], [3, 4]])",
        "numberOfPoints(nums = [[0,1],[2,3],[1,3]])",
        "numberOfPoints(nums = [[1,3],[1,5],[3,4],[4,5]])"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1])",
        "maxIncreasingGroups(A = [1])",
        "maxIncreasingGroups(A = [1, 2, 3, 4])",
        "maxIncreasingGroups(A = [1, 1, 1])",
        "maxIncreasingGroups(A = [1, 1, 1])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 1, 1, 1, 1])",
        "maxIncreasingGroups(A = [1, 1, 2, 2])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(A = [1,1])"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 5, offers = [[2, 1, 1], [4, 1, 1], [5, 1, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,50], [2,4,70], [3,4,60]])",
        "maximizeTheProfit(n = 4, offers = [[1,2,4], [3,2,3]])",
        "maximizeTheProfit(n = 4, offers = [[1, 3, 3], [2, 3, 2], [1, 4, 1]])",
        "maximizeTheProfit(n = 4, offers = [[2,1,1],[3,2,1],[1,3,2]])",
        "maximizeTheProfit(n=2, offers=[[1,2,2],[1,1,1],[2,2,1]])",
        "maximizeTheProfit(n=5, offers=[[1, 2, 2], [1, 4, 1], [2, 4, 3]])",
        "maximizeTheProfit(n=3,offers=[[2,1,1],[1,1,1],[3,1,1]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 5], [3, 4, 7], [2, 3, 1]])",
        "maximizeTheProfit(n=10, offers=[[3, 2, 1], [2, 4, 2], [6, 8, 3], [9, 10, 5]])"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves = \"R_R_R_R_R_R_R_\")",
        "furthestDistanceFromOrigin(moves = \"L_R_L_L_L_R\")",
        "furthestDistanceFromOrigin(moves = \"RLRL_RL_\")",
        "furthestDistanceFromOrigin(moves=\"L_____R\")",
        "furthestDistanceFromOrigin(moves = \"RR__LL__\")",
        "furthestDistanceFromOrigin(moves = \"R_R_L_R_L_L_L_R_R\")",
        "furthestDistanceFromOrigin(moves = \"L_L_L_R_R_L_L_L_L_\")",
        "furthestDistanceFromOrigin(moves = \"RLL__LL_\")",
        "furthestDistanceFromOrigin(moves = \"L_RRR_L_RRR_L_RRR_L_RRR_L_R\")"
    ],
    "sample_175": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 6)",
        "minimumSum(n = 2, k = 7)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[1,3]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[1,3]])",
        "numberOfPoints(nums = [[1,5],[2,3],[4,7]])",
        "numberOfPoints(nums = [[1,3],[2,4],[2,4]])",
        "numberOfPoints(nums=[[1,5],[2,3],[7,8]])",
        "numberOfPoints(nums=[[1,5]])",
        "numberOfPoints(nums = [[1,5],[2,3],[7,7]])",
        "numberOfPoints(nums = [[1,5],[1,7],[2,4],[4,5]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [1, 5], [1, 6], [6, 8], [8, 10]])",
        "numberOfPoints(nums = [[0,4],[1,2],[2,3],[3,4],[5,5],[8,10]])"
    ],
    "sample_205": [
        "minimumOperations(num = \"0123456789\")",
        "minimumOperations(num = \"1234\")",
        "minimumOperations(num = \"025\")",
        "minimumOperations(num = \"40\")",
        "minimumOperations(num = \"1202\")",
        "minimumOperations(num = \"132\")",
        "minimumOperations(num = \"11010\")",
        "minimumOperations(num = \"30100\")",
        "minimumOperations(num = \"4982\")",
        "minimumOperations(num = \"102537\")"
    ],
    "sample_120": [
        "minimumIndex(nums = [3, 4, 5, 1, 2, 2, 2])",
        "minimumIndex(nums = [3, 4, 5, 1, 2, 2, 2, 2, 2, 2])",
        "minimumIndex(nums = [2, 7, 11, 15])",
        "minimumIndex(nums = [1, 0, 1, 1, 1, 1, 1, 1])",
        "minimumIndex(nums=[3, 1, 2, 1])",
        "minimumIndex(nums = [1, 2, 0, 0, 0, 3])",
        "minimumIndex(nums = [7, 6, 7, 7, 10])",
        "minimumIndex(nums = [4, 4, 3, 3, 3, 1, 1, 2, 2, 2])",
        "minimumIndex(nums = [7, 5, 5, 1, 2, 3])",
        "minimumIndex(nums = [4, 1, 4, 2, 3, 2, 4, 2])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"L_R_R_R_R\")",
        "furthestDistanceFromOrigin(moves = \"L__R_L_R\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLRLRLRLRLR\")",
        "furthestDistanceFromOrigin(moves = \"LL__RR\")",
        "furthestDistanceFromOrigin(moves = \"R_L_R__R__\")",
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves = \"RRLRRRRR_RRLR\")",
        "furthestDistanceFromOrigin(moves = \"_____LLLRRRRRRRRRRR______\")",
        "furthestDistanceFromOrigin(moves = \"RRLRRRLRRRLRRRRLRRRLRRRRLRRRLLLRLRRRRRLRRRRRLRRRRRRRRLRRRRRLRRRRRRLRRRRRLRRRRRLRRRRRLRRRRLLLRLRRRRRLRRRRRRLRRRRLLLRLRRRRRRRRRLRRRRRRRRRLRRRRLLLRRRRRRRRRRLRRRRLLLRRRRRRRRRRLRRRRRRRRRLRRRRRRRRRRRLRRRRLLLRLRRRRRRLRRRRRLRRRRRLRRRRRLLLRLRRRRRRRRRRLRRRRLLLRLRRRRRRRRRRLRRRRLLLRRRRRRRRRRLRRRRRRRRRLRRRRRRRRRRRLRRRRLLLRLRRRRRRLRRRRRLRRRRRLRRRRRLLLRLRRRRRRRRRRLRRRRLLLRLRRRRRRRRRRLRRRRLLLRRRRRRRRRRLRRRRRRRRRLRRRRRRRRRRRRLRRRRLLLRLRRRRRRRLRRRRRLRRRRRLRRRRRLLLRLRRRRRRRRRRLRRRRLLLRLRRRRRRRRRRLRRRRLLLRRRRRRRRRRLRRRRRRRRRRRRLRRRRLLLRRRRRRRRRRLRRRRRRRRRRRRLRRRRRRRRRRRRLRRRRLLLRLRRRRRRRLRRRRRLRRRRRLRRRRRLLLRLRRRRRRRRRRLRRRRLLLRLRRRRRRRRRRLRRRRLLLRRRRRRRRRRLRRRRRRRRRRRRLRRRRRRRRRRRRLRRRRLLLRLRRRRRRRLRRRRRLRRRRRLRRRRRLLLRLRR"
    ],
    "sample_161": [
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [10, 20, 30])",
        "maxSum(nums = [101, 102, 103, 104, 105])",
        "maxSum(nums = [123, 45, 6789])",
        "maxSum(nums = [98, 12, 78, 22, 11])"
    ],
    "sample_160": [
        "maxSum(nums = [])",
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums = [1,2,3])",
        "maxSum(nums = [0])",
        "maxSum(nums=[-1])",
        "maxSum(nums = [33, 55])",
        "maxSum(nums = [23,234,34])",
        "maxSum(nums = [2355, 2355, 2355])",
        "maxSum(nums = [13, 24, 10, 3, 25])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = [\"one,two,three\", \"four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one-two\", \"three,four;five.six\"], separator = \"-,;.\")",
        "splitWordsBySeparator(words = [\"one-two\", \"three:four\", \"five six\"], separator = \"-:\")",
        "splitWordsBySeparator(words = [\"one-two\", \"three:four\", \"five.six\"], separator = \"-:.\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three,four,five,six\"], separator = ',')",
        "splitWordsBySeparator(words = [\"one-two-three\", \"four---five\", \"six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one-two-three\", \"four\", \"five--six\"])",
        "splitWordsBySeparator(words=['one-two', 'three-', 'four', '-five', '-six'], separator='-')",
        "splitWordsBySeparator(words = ['one,two', 'three-four', 'five:six'], separator = '-,:')",
        "splitWordsBySeparator(words=['one', 'two,three', 'four-five', 'six'], separator=',')"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours=[], target=10)",
        "numberOfEmployeesWhoMetTarget(hours=[10, 20, 30], target=40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 50)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 8, 8], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours=[3,5,6,7], target=8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 9], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [24, 23, 22, 21], target = 25)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 5, 1], target = 5)"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours=[1, 2, 3, 4, 5], target=10)",
        "numberOfEmployeesWhoMetTarget(hours=[1, 2, 3], target=5)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours=[10, 12, 14], target=15)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 13, 14], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 30, 40], target = 50)",
        "numberOfEmployeesWhoMetTarget(hours = [0,0,0,0], target = 100)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 1, 1], target = 5)"
    ],
    "sample_171": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 1, k = 1)",
        "minimumSum(n = 1, k = 1)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 1, k = 2)",
        "minimumSum(n=3, k=2)"
    ],
    "sample_159": [
        "maxSum(nums = [1,2,3])",
        "maxSum(nums = [1,2,3])",
        "maxSum(nums = [1,2,3,4])",
        "maxSum(nums=[1,2,3])",
        "maxSum(nums = [0, 1])",
        "maxSum(nums = [0,1])",
        "maxSum(nums = [2,3,4,5,6,7,8,9])",
        "maxSum(nums=[123, 45, 678])",
        "maxSum(nums = [3,2,5,6,7])",
        "maxSum(nums = [111111, 2, 3, 4, 5])"
    ],
    "sample_157": [
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 15)",
        "canSplitArray(nums = [2, 1, 2], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [3, 2, 1], m = 3)",
        "canSplitArray(nums=[2, 2, 1], m=3)",
        "canSplitArray(nums = [1, 2, 2], m = 3)",
        "canSplitArray(nums = [2, 3, 4, 5, 6], m = 7)",
        "canSplitArray(nums = [2, 1, 5, 2], m = 3)",
        "canSplitArray(nums = [4, 4, 4, 4, 4, 4], m = 2)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [\"\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"\"], separator = \",\")",
        "splitWordsBySeparator(words = [], separator = \",\")",
        "splitWordsBySeparator(words = [\"\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"\"], separator = \"_\")",
        "splitWordsBySeparator(words = [], separator = 'a')",
        "splitWordsBySeparator(words = [\"1\", \"2\", \"3\"], separator = \"\")",
        "splitWordsBySeparator(words=[\"\", \"\",\"\"])",
        "splitWordsBySeparator(words = [\"I\", \"am\", \"a\", \"string\"], separator = \"e\")"
    ],
    "sample_172": [
        "minimumSum(n = 1, k = 1)",
        "minimumSum(n = 1, k = 1)",
        "minimumSum(n = 1, k = 1)",
        "minimumSum(n = 1, k = 1)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n=2, k=2)",
        "minimumSum(n = 3, k = 5)"
    ],
    "sample_228": [
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [0, 1, 2, 3, 4])",
        "countWays(nums = [0, 1, 2])",
        "countWays(nums=[0,1,2,3])",
        "countWays(nums=[2,3,4])",
        "countWays(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countWays(nums = [0,0,0,1,2,3,4,5])",
        "countWays(nums=[3,5,1,2,4])",
        "countWays(nums = [2, 1, 0, 1, 2, 2, 1, 0])"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '0000')",
        "maximumOddBinaryNumber(s = '1010')",
        "maximumOddBinaryNumber(s = '1010')",
        "maximumOddBinaryNumber(s = '10101')",
        "maximumOddBinaryNumber(s = '1011')",
        "maximumOddBinaryNumber(s = \"0110\")"
    ],
    "sample_119": [
        "minimumIndex(nums = [3,1,3,3,2,3])",
        "minimumIndex(nums = [3,1,3,3,2,3])",
        "minimumIndex(nums = [3, 1, 3, 3, 2, 3])",
        "minimumIndex(nums = [3, 1, 3, 3, 2, 4])",
        "minimumIndex(nums=[3, 1, 3, 3, 2, 3])",
        "minimumIndex(nums = [3, 2, 3])",
        "minimumIndex(nums = [1,1,1,2,2,2])",
        "minimumIndex(nums = [1, 0, 1, 1, 1])",
        "minimumIndex(nums = [2, 1, 3, 2, 2])",
        "minimumIndex(nums = [3, 2, 3, 1, 3, 3])"
    ],
    "sample_153": [
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums=[7,2,5,10,8], m=2)",
        "canSplitArray(nums=[7,2,5,10,8], m=2)",
        "canSplitArray(nums=[7,2,5,10,8], m=2)",
        "canSplitArray(nums = [1,1], m = 1)",
        "canSplitArray(nums = [2,2,1,1], m = 2)",
        "canSplitArray(nums = [2, 1, 2, 2, 2, 2, 2], m = 5)",
        "canSplitArray(nums = [2,1,2,2,1,2], m = 3)",
        "canSplitArray(nums=[368, 988, 349, 113, 495, 519, 847, 83, 368, 848, 297, 981, 456, 105, 903, 837, 842, 399, 722, 658, 722, 624, 382, 126, 583, 584, 495, 214, 221, 535, 316, 700, 442, 800, 688, 906, 158, 683, 499, 121, 763, 669, 351, 87, 328, 712, 165, 549, 517, 456, 52, 951, 41, 490, 926, 631, 349, 680, 429, 502, 244, 289, 272, 622, 726, 814, 207, 938, 916, 709, 178, 647, 137, 616, 572, 178, 926, 881, 519, 164, 926, 530, 286, 744, 905, 79, 775, 270, 240, 499, 101, 678, 744, 839, 564, 174, 405, 602, 634, 405, 405, 405, 405, 405"
    ],
    "sample_147": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = 'This is a test string')",
        "finalString(s = 'This is a test string')",
        "finalString(s = \"This is a test string\")",
        "finalString(s = 'mining')",
        "finalString(s = 'silent')",
        "finalString(s = 'imagine')",
        "finalString(s = 'imagine')",
        "finalString(s = \"thisisagood\")"
    ],
    "sample_174": [
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 2, k = 6)",
        "minimumSum(n = 2, k = 10)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n=2, k=2)"
    ],
    "sample_154": [
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [2, 1, 1], m = 2)",
        "canSplitArray(nums = [1,2,3,3,4,5], m = 6)",
        "canSplitArray(nums = [2,3,1,4,2], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7, 8], m = 10)",
        "canSplitArray(nums = [2, 3, 1, 5], m = 5)",
        "canSplitArray(nums = [2,1,2], m = 2)",
        "canSplitArray(nums = [2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [7, 13, 24], m = 100)"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3])",
        "countCompleteSubarrays(nums=[1, 2, 3, 4])",
        "countCompleteSubarrays(nums=[1, 2, 3])",
        "countCompleteSubarrays(nums=[1, 1, 2, 2, 3])",
        "countCompleteSubarrays(nums=[1, 2, 3, 2, 1, 1, 1])"
    ],
    "sample_150": [
        "finalString(s = \"This is a test string\")",
        "finalString(s = \"This is a string\")",
        "finalString(s = 'This is a string')",
        "finalString(s = \"sitting\")",
        "finalString(s = \"singing\")",
        "finalString(s = \"imagine\")",
        "finalString(s = 'hackerrank')",
        "finalString(s = 'Kill me')",
        "finalString(s = \"pistonly\")",
        "finalString(s = 'ThisisTheFinalString')"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 10, target = 11)"
    ],
    "sample_176": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 2, k = 6)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 3, k = 20)",
        "minimumSum(n = 10, k = 100)"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4, 5], modulo=3, k=1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 4, k = 1)",
        "countInterestingSubarrays(nums = [1, 1, 1, 1, 1], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [3, 1, 4, 1, 5], modulo = 4, k = 0)",
        "countInterestingSubarrays(nums = [2,3,4,5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums=[3, 1, 4, 2], modulo=2, k=0)",
        "countInterestingSubarrays(nums = [2, 5, 3], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums=[1, 3, 2, 6, 1], modulo=4, k=1)"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums=[1, 2, 3, 4], k=2)",
        "sumIndicesWithKSetBits(nums=[1,2,3,4], k=1)",
        "sumIndicesWithKSetBits(nums = [5, 1, 3, 4, 2], k = 2)"
    ],
    "sample_151": [
        "finalString(s = 'This is a string')",
        "finalString(s = 'This is a test')",
        "finalString(s = 'This is a test')",
        "finalString(s = 'string')",
        "finalString(s = 'sitting')",
        "finalString(s = 'this is a test')",
        "finalString(s = 'singing')",
        "finalString(s = 'This is a simple string')",
        "finalString(s = \"This is a simple string\")",
        "finalString(s = \"This is an example\")"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5], k = 1)",
        "sumIndicesWithKSetBits(nums=[0, 1, 0], k=1)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5], k = 2)"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [2, 3, 4])",
        "maxIncreasingGroups(usageLimits = [2, 2, 3, 4])",
        "maxIncreasingGroups(usageLimits=[1,2,3,4])",
        "maxIncreasingGroups(usageLimits = [1, 5, 6])",
        "maxIncreasingGroups(usageLimits = [1, 2, 2, 3, 3, 4])",
        "maxIncreasingGroups(usageLimits = [10, 12, 20])",
        "maxIncreasingGroups(usageLimits = [2, 1, 5, 3, 7])",
        "maxIncreasingGroups(usageLimits = [5, 4, 10, 1, 2, 3])"
    ],
    "sample_204": [
        "minimumOperations(s = \"00\")",
        "minimumOperations(s = \"00\")",
        "minimumOperations(s = \"0100\")",
        "minimumOperations(s = \"0100\")",
        "minimumOperations(s = \"0001\")",
        "minimumOperations(s = \"010\")",
        "minimumOperations(s = \"0101\")",
        "minimumOperations(s = \"0110\")",
        "minimumOperations(s = \"1101\")",
        "minimumOperations(s = \"12\")"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours=[10, 20, 30, 40, 50], target=30)",
        "numberOfEmployeesWhoMetTarget(hours=[10, 20, 30, 40], target=30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 8, 12, 9, 11], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 6, 7, 8], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 10, 5, 7], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 5, 10, 2], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 30, 40, 45, 50], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours=[10, 20, 19, 25, 20], target=20)",
        "numberOfEmployeesWhoMetTarget(hours = [40, 44, 43, 50, 60], target = 45)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 22, 21, 19, 17, 20, 23, 22], target = 22)"
    ],
    "sample_148": [
        "finalString(s = 'pointer')",
        "finalString(s = \"pointers\")",
        "finalString(s = 'pinoter')",
        "finalString(s = \"racecar\")",
        "finalString(s = \"Pointers\")",
        "finalString(s = 'tin')",
        "finalString(s = \"spinning\")",
        "finalString(s = 'minip')",
        "finalString(s = 'pooniter')",
        "finalString(s = 'tiitp')"
    ],
    "sample_168": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"HW\")",
        "isAcronym(words=[\"quick\", \"brown\", \"fox\"], s=\"QBF\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"Jump\")",
        "isAcronym(words = [\"a\", \"b\", \"c\"], s = \"abd\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"ab\")",
        "isAcronym(words = [\"my\", \"name\", \"is\"], s = \"MN\")",
        "isAcronym(words = [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"], s = \"MLAL\")",
        "isAcronym(words = [\"explicit\", \"is\", \"better\", \"than\", \"implicit\"], s = \"XBTI\")",
        "isAcronym(words = [\"north\", \"east\", \"south\"], s = \"wens\")",
        "isAcronym(words = ['computer', 'science', 'program'], s = \"CSS\")"
    ],
    "sample_201": [
        "minOperations(nums = [1, 1, 1, 1, 1], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 15)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 100)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 100)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 12)",
        "minOperations(nums = [1, 2], target = 7)",
        "minOperations(nums = [1, 2, 3], target = 10)",
        "minOperations(nums = [1, 2], target = 8)",
        "minOperations(nums=[1, 1, 1, 1, 1], target=100)",
        "minOperations(nums = [1,1], target = 5)"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '10101')",
        "maximumOddBinaryNumber(s = '0011')",
        "maximumOddBinaryNumber(s = '1001')",
        "maximumOddBinaryNumber(s = '1110')",
        "maximumOddBinaryNumber(s = '10110111')",
        "maximumOddBinaryNumber(s = '1011000')",
        "maximumOddBinaryNumber(s = \"1110011\")"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '110')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = \"010\")",
        "maximumOddBinaryNumber(s = '1011')",
        "maximumOddBinaryNumber(s = \"0010\")",
        "maximumOddBinaryNumber(s = '00010')",
        "maximumOddBinaryNumber(s = \"110\")"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 2, target = 7)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 4, target = 11)",
        "minimumPossibleSum(n = 4, target = 9)",
        "minimumPossibleSum(n = 3, target = 12)",
        "minimumPossibleSum(n = 3, target = 15)",
        "minimumPossibleSum(n=3, target=6)",
        "minimumPossibleSum(n = 5, target = 26)"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LLRRL\")",
        "furthestDistanceFromOrigin(moves = \"LRL\")",
        "furthestDistanceFromOrigin(moves = \"LRLRL\")",
        "furthestDistanceFromOrigin(moves = 'LLR')",
        "furthestDistanceFromOrigin(moves = \"LRLRRL\")",
        "furthestDistanceFromOrigin(moves = 'RRRL')",
        "furthestDistanceFromOrigin(moves = \"LRLRLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LRRRRLLL\")",
        "furthestDistanceFromOrigin(moves = \"RLRLLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLARRRLLLLR\")"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 10)",
        "minimumPossibleSum(n=2, target=1)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 6, 7], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 0, 0], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 5, 7, 8], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 8, 5, 6, 9], target = 11)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 9, 11, 13], target = 10)"
    ],
    "sample_231": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 3, 5])",
        "countWays(nums = [1, 3, 5])",
        "countWays(nums = [1,2,3])",
        "countWays(nums = [2, 1, 3])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 5, 6])",
        "countWays(nums=[0, 1, 2, 4, 5, 6, 7, 8, 9])",
        "countWays(nums = [3, 2, 1, 0, 6])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves = \"LLRRR__\")",
        "furthestDistanceFromOrigin(moves = \"R_L_L_R_\")",
        "furthestDistanceFromOrigin(moves = \"LLRR_R_\")",
        "furthestDistanceFromOrigin(moves = \"RRRR_LLL_\")",
        "furthestDistanceFromOrigin(moves = \"_____LLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLL__RRR___\")",
        "furthestDistanceFromOrigin(moves = \"R_R_L_R_L_R_L_R_L_L_L_L\")",
        "furthestDistanceFromOrigin(moves = \"L_R_R__L___L____\")",
        "furthestDistanceFromOrigin(moves = \"LRLR_LRRR_LLLRR\")"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 1, target = 3)",
        "minimumPossibleSum(n = 1, target = 4)",
        "minimumPossibleSum(n = 1, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 2, target = 7)",
        "minimumPossibleSum(n=1, target=4)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n=2, target=5)"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6])",
        "countCompleteSubarrays(nums=[2, 1, 2, 3, 1])"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [7,2,5,10,8], m = 24)",
        "canSplitArray(nums = [7,2,5,10,8], m = 24)",
        "canSplitArray(nums = [1,2,3,4], m = 5)",
        "canSplitArray(nums = [2, 3, 1, 2], m = 5)",
        "canSplitArray(nums = [1, 1, 2], m = 2)",
        "canSplitArray(nums = [2, 3, 1, 2], m = 1)",
        "canSplitArray(nums = [7, 2, 5, 3, 4], m = 7)",
        "canSplitArray(nums = [3, 4, 5, 1, 1, 1], m = 6)"
    ],
    "sample_200": [
        "minOperations(nums = [1, 2, 3, 4, 5], target = 6)",
        "minOperations(nums = [1, 2, 3, 4], target = 10)",
        "minOperations(nums = [1, 2, 3], target = 7)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 11)",
        "minOperations(nums = [1, 1], target = 5)",
        "minOperations(nums = [1,2,3,4,5], target = 15)",
        "minOperations(nums=[1, 1, 1, 1], target=5)",
        "minOperations(nums = [1, 1, 2, 2], target = 5)",
        "minOperations(nums = [5, 3, 1], target = 8)",
        "minOperations(nums = [10, 20], target = 40)"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 4, 6, 8], k = 2)"
    ],
    "sample_165": [
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"QBF\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"HW\")",
        "isAcronym(words = [\"Python\", \"is\", \"fun\"], s = \"PIF\")",
        "isAcronym(words = [\"Mission\", \"Impossible\"], s = \"MI\")",
        "isAcronym(words = [\"php\", \"hypertext\", \"preprocessor\"], s = \"PHP\")",
        "isAcronym(words = [\"Awesome\", \"Cool\", \"Dudes\"], s = \"ACD\")",
        "isAcronym(words = ['I', 'Love', 'You'], s = \"ILY\")",
        "isAcronym(words = [\"Python\", \"Ruby\", \"Swift\", \"Dart\", \"Java\"], s = \"PRSDJ\")"
    ],
    "sample_227": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [-1, 0, 1, 2])",
        "countWays(nums = [-2, 1, 2])",
        "countWays(nums = [2, 3, 1, 0, 4])",
        "countWays(nums = [-1,0,1,1])",
        "countWays(nums = [2, 3, 1, 4, 0])",
        "countWays(nums = [5, 1, 2, 3])",
        "countWays(nums = [0, 1, 2, 3, 5, 6])",
        "countWays(nums = [1, 3, 4, 6, 8])",
        "countWays(nums = [-2,0,1])"
    ],
    "sample_158": [
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [0, 0, 0])",
        "maxSum(nums = [11, 22, 33, 44, 55, 66, 77, 88])",
        "maxSum(nums = [3, 5, 7, 2])"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1,1,1,1,1], k = 0)",
        "longestEqualSubarray(nums = [1,1,1,1,1], k = 1)",
        "longestEqualSubarray(nums = [1, 1, 1, 1, 1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3], k = 0)",
        "longestEqualSubarray(nums = [1,2,2,2,3], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,1,1,1,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,2,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,3,3,3,4,5,5], k = 2)"
    ],
    "sample_177": [
        "maximizeTheProfit(n=5, offers=[[1, 2, 10], [2, 4, 15], [3, 5, 7], [4, 5, 9]])",
        "maximizeTheProfit(n = 5, offers = [[1, 1, 1], [2, 2, 1], [3, 3, 1], [4, 4, 1], [5, 5, 1]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 10], [3, 4, 5]])",
        "maximizeTheProfit(n = 2, offers = [[1, 2, 3], [2, 1, 4]])",
        "maximizeTheProfit(n=3, offers=[(1, 1, 2), (2, 2, 3), (1, 2, 4)])",
        "maximizeTheProfit(n = 4, offers = [[1,2,2], [3,4,4], [2,3,3], [4,4,4]])",
        "maximizeTheProfit(n = 3, offers = [[1, 1, 10], [1, 2, 10], [2, 2, 10], [3, 3, 10]])",
        "maximizeTheProfit(n = 3, offers = [[1, 1, 2], [1, 2, 1], [1, 3, 2]])",
        "maximizeTheProfit(n=5, offers=[[1,2,4], [2,4,5], [3,5,6], [4,6,10], [5,7,12]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 5], [2, 3, 5], [4, 5, 5], [2, 4, 6], [3, 5, 6], [1, 4, 7]])"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 6, 7])",
        "maxIncreasingGroups(x = [1, 1, 2, 3, 4])",
        "maxIncreasingGroups(x = [3, 2, 1, 4, 5])",
        "maxIncreasingGroups(x = [1, 3, 6, 10, 15, 15])",
        "maxIncreasingGroups(x = [0, 1, 2, 5, 6])",
        "maxIncreasingGroups(x = [1, 3, 1, 3, 2, 3])",
        "maxIncreasingGroups(x = [2, 5, 11, 13, 17])",
        "maxIncreasingGroups(x = [1, 1, 2, 3, 5, 7, 9, 11])"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums=[1, 2, 3, 4, 5], k=2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 1)",
        "sumIndicesWithKSetBits(nums=[1,2,3,4,5], k=3)"
    ],
    "sample_207": [
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"100\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00000\")",
        "minimumOperations(num = \"000000\")",
        "minimumOperations(num = \"0\")",
        "minimumOperations(num = \"123456\")",
        "minimumOperations(num = \"019\")",
        "minimumOperations(num = \"10011\")",
        "minimumOperations(num = \"77557\")"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LRL\")",
        "furthestDistanceFromOrigin(moves = \"RRRLLL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLL\")",
        "furthestDistanceFromOrigin(moves = \"LLLRR\")",
        "furthestDistanceFromOrigin(moves = \"LRRLR\")",
        "furthestDistanceFromOrigin(moves=\"RRRL\")",
        "furthestDistanceFromOrigin(moves = 'LRRLLL')",
        "furthestDistanceFromOrigin(moves=\"RRLLRRLLRRLLRRLL\")"
    ],
    "sample_206": [
        "minimumOperations(num = \"100\")",
        "minimumOperations(num = \"4321\")",
        "minimumOperations(num = \"6355\")",
        "minimumOperations(num = \"345\")",
        "minimumOperations(num = \"352\")",
        "minimumOperations(num = \"1111\")",
        "minimumOperations(num = \"27\")",
        "minimumOperations(num = '236')",
        "minimumOperations(num = '1255')",
        "minimumOperations(num = \"50250250250250250250250250250\")"
    ],
    "sample_155": [
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 3)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 3)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 5)",
        "canSplitArray(nums = [2, 2, 1, 1], m = 3)",
        "canSplitArray(nums = [7,2,5,10,8], m = 20)",
        "canSplitArray(nums=[7,2,5,10,8], m=10)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 16)",
        "canSplitArray(nums = [2, 3, 1, 2, 2], m = 3)",
        "canSplitArray(nums = [3, 4, 5, 1], m = 2)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 1, 2, 1, 1])",
        "countCompleteSubarrays(nums=[1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1])"
    ],
    "sample_202": [
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"50\")",
        "minimumOperations(num = \"0\")",
        "minimumOperations(num = \"0075\")",
        "minimumOperations(num = \"0250\")",
        "minimumOperations(num = \"123456789\")",
        "minimumOperations(num = \"01250\")",
        "minimumOperations(num = \"1000000000000000000\")"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [\"\"], b = \" \")",
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [\"\", \"\"], b = \" \")",
        "splitWordsBySeparator(a = [\"\", \"\"], b = \" \")",
        "splitWordsBySeparator(a = [], b = \"\")",
        "splitWordsBySeparator(a = [], b = ' ')",
        "splitWordsBySeparator(a = [\"\", \"\", \"\"], b = \" \")",
        "splitWordsBySeparator(a = [\"\"], b = \"#\")",
        "splitWordsBySeparator(a = [\"\", \"\"], b = \":\")",
        "splitWordsBySeparator(a = [\"b\", \"a\", \"n\", \"a\", \"n\", \"a\"], b = \"n\")"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4], k = 1)",
        "sumIndicesWithKSetBits(nums=[5, 1, 3, 4, 2], k=2)"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = '1010')",
        "maximumOddBinaryNumber(s = '1011')",
        "maximumOddBinaryNumber(s = '1011')",
        "maximumOddBinaryNumber(s = '10101')",
        "maximumOddBinaryNumber(s = '10101')",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '1100')",
        "maximumOddBinaryNumber(s = '101010')",
        "maximumOddBinaryNumber(s = '10110110')"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,1,1,1,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 1)",
        "longestEqualSubarray(nums = [1,1,1,1,1], k = 0)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,3,3], k = 0)",
        "longestEqualSubarray(nums = [1,1,1,1,1,1,1,1,1], k = 3)"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 0)",
        "longestEqualSubarray(nums = [2, 2, 2, 3, 3, 3, 2, 2, 2], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,2,3,3,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,3,4], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 1, 1, 1, 1, 1], k = 0)",
        "longestEqualSubarray(nums = [1,2,3,4,4,4,4,4,5,6,7,8], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,4,3,2,1,1,1], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 3, 1, 1], k = 2)",
        "longestEqualSubarray(nums = [0, 1, 0, 2, 1, 0, 2, 1, 0, 2], k = 1)"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '00')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = \"100\")",
        "maximumOddBinaryNumber(s = \"1100\")",
        "maximumOddBinaryNumber(s = '01001')",
        "maximumOddBinaryNumber(s = \"00101\")",
        "maximumOddBinaryNumber(s = '01111001')"
    ],
    "sample_166": [
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"ABC\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"quickbrownfox\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"quickbrownfox\")",
        "isAcronym(words = [\"apple\", \"banana\"], s = \"banana\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hwdlo\")",
        "isAcronym(words = [\"Moscow\", \"University\"], s = \"MU\")",
        "isAcronym(words = [\"Hello\", \"my\", \"name\"], s = \"Hmn\")",
        "isAcronym(words = [\"bat\", \"man\", \"go\", \"es\"], s = \"bgm\")",
        "isAcronym(words = [\"sand\", \"water\", \"juice\"], s = \"SWJ\")",
        "isAcronym(words = [\"make\", \"love\"], s = \"mlake\")"
    ],
    "sample_163": [
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [1, 2])",
        "maxSum(nums = [1, 11, 111])",
        "maxSum(nums = [2,3,4,5])",
        "maxSum(nums = [12, 23])",
        "maxSum(nums = [90, 81, 9])"
    ]
}