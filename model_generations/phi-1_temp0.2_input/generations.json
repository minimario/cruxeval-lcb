{
    "sample_287": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abcbca\")",
        "longestSemiRepetitiveSubstring(\"abcba\")",
        "longestSemiRepetitiveSubstring(\"abcde\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"na\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"na\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"na\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"na\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"car\", \"care\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"car\", \"care\", \"arc\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"car\", \"care\", \"arc\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"car\", \"care\", \"acre\"])",
        "maximumNumberOfStringPairs(words = [\"racecar\", \"car\", \"level\", \"deified\", \"radar\", \"madam\"])",
        "maximumNumberOfStringPairs(words = [\"racecar\", \"car\", \"level\", \"deified\", \"radar\"])"
    ],
    "sample_247": [
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 1)",
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 1)",
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 1)",
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 1)",
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 1)",
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 1)",
        "minOperations(s1 = \"ab\", s2 = \"ba\", x = 1)",
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"def\", x = 1)",
        "minOperations(s1 = \"abcde\", s2 = \"bcdea\", x = 2)"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"def\", \"bac\", \"fed\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"def\", \"bac\", \"fed\", \"cab\"])"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_246": [
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"nan\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"nan\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"nan\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"nan\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"nan\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"banana\")"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"abcbdeffed\")"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 4, 5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 4, 5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 4, 5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 4, 5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])"
    ],
    "sample_289": [
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")"
    ],
    "sample_241": [
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"ba\", k = 2)",
        "beautifulSubstrings(s = \"ba\", k = 2)",
        "beautifulSubstrings(s = \"ba\", k = 2)",
        "beautifulSubstrings(s = \"ba\", k = 2)",
        "beautifulSubstrings(s = \"ba\", k = 2)",
        "beautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "beautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "beautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "beautifulSubstrings(s = \"ababab\", k = 2)",
        "beautifulSubstrings(\"abab\", 2)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum([[1, 2], [3, 4]])",
        "matrixSum([[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 0, 3], nums2 = [3, 2, 1, 4])",
        "minSum(nums1 = [1, 2, 0, 3], nums2 = [3, 2, 1, 4])"
    ],
    "sample_282": [
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])"
    ],
    "sample_350": [
        "alternatingSubarray([1,2,3,4,5])",
        "alternatingSubarray([1,2,3,4,5])",
        "alternatingSubarray([1,2,3,4,5])",
        "alternatingSubarray([1,2,3,4,5])",
        "alternatingSubarray([1,2,3,4,5])",
        "alternatingSubarray([1,2,3,4,5])",
        "alternatingSubarray([1,2,3,4,5])",
        "alternatingSubarray([1,2,3,4,5])",
        "alternatingSubarray([1,2,3,4,5])",
        "alternatingSubarray([1,2,3,4,5])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 5], money = 4)",
        "buyChoco(prices = [1, 2, 5], money = 4)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 5], money = 4)",
        "buyChoco(prices = [1, 2, 5], money = 4)",
        "buyChoco(prices = [1, 2, 5], money = 3)",
        "buyChoco(prices = [1, 2, 5], money = 3)",
        "buyChoco(prices = [1, 2, 5], money = 4)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 8)"
    ],
    "sample_302": [
        "countSeniors(details = [\"John Smith, 35, Male\", \"Jane Doe, 42, Female\"])",
        "countSeniors(details = [\"John Smith, 35, Male\", \"Jane Doe, 42, Female\"])",
        "countSeniors(details = [\"John Smith, 35, Male\", \"Jane Doe, 42, Female\"])",
        "countSeniors(details = [\"John Smith, 35, Male\", \"Jane Doe, 42, Female\"])",
        "countSeniors(details = [\"John Smith, 35, Male\", \"Jane Doe, 42, Female\"])",
        "countSeniors(details = [\"John Smith, 35, Male\", \"Jane Doe, 42, Female\"])",
        "countSeniors(details = [\"John Smith - 35\", \"Jane Doe - 42\", \"Bob Johnson - 60\"])",
        "countSeniors(details = [\"John Smith - 35\", \"Jane Doe - 42\", \"Bob Johnson - 60\"])",
        "countSeniors(details = [\"John sent 78\", \"Jane received 56\", \"Bob sent 42\"])",
        "countSeniors(details = [\"John sent 78\", \"Jane sent 60\", \"Bob sent 42\"])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"ba\", k = 2)",
        "beautifulSubstrings(s = \"ba\", k = 2)",
        "beautifulSubstrings(s = \"ba\", k = 2)",
        "beautifulSubstrings(s = \"ba\", k = 2)",
        "beautifulSubstrings(s = \"ba\", k = 2)",
        "beautifulSubstrings(s = \"ba\", k = 2)",
        "beautifulSubstrings(s = \"ba\", k = 2)",
        "beautifulSubstrings(s = \"ba\", k = 2)",
        "beautifulSubstrings(s = \"ba\", k = 2)",
        "beautifulSubstrings(s = \"ba\", k = 3)"
    ],
    "sample_255": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment([1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment([1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment([1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment([1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment([1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment([1,2,3,4,5,6,7,8,9,10])"
    ],
    "sample_349": [
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)"
    ],
    "sample_293": [
        "minimumSteps(s1 = \"1010\", s2 = \"0101\")",
        "minimumSteps(s1 = \"1010\", s2 = \"0101\")",
        "minimumSteps(s1 = \"1010\", s2 = \"0101\")",
        "minimumSteps(s1 = \"1010\", s2 = \"0101\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"1010101\", s2 = \"1110001\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"abcbdbdbbdcdabd\")",
        "longestSemiRepetitiveSubstring(\"abcbdbdbbdcdabd\")",
        "longestSemiRepetitiveSubstring(\"abcbdbdbbdcdabd\")",
        "longestSemiRepetitiveSubstring(\"abcbda\")",
        "longestSemiRepetitiveSubstring(\"abcbda\")",
        "longestSemiRepetitiveSubstring(\"abcbda\")",
        "longestSemiRepetitiveSubstring(\"abcbda\")"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])"
    ],
    "sample_307": [
        "countSeniors(details = [\"John Smith - 35\", \"Jane Doe - 42\", \"Bob Johnson - 55\"])",
        "countSeniors(details = [\"John Smith - 35\", \"Jane Doe - 42\", \"Bob Johnson - 55\"])",
        "countSeniors(details = [\"John Smith - 35\", \"Jane Doe - 42\", \"Bob Johnson - 55\"])",
        "countSeniors(details = [\"John Smith is 35 years old\", \"Jane Doe is 42 years old\"])",
        "countSeniors(details = [\"John Smith (45)\", \"Jane Doe (60)\", \"Bob Johnson (90)\"])",
        "countSeniors(details = [\"John Smith, 75\", \"Jane Doe, 90\", \"Bob Johnson, 60\"])",
        "countSeniors(details = [\"John Smith is 35 years old\", \"Jane Doe is 42 years old\", \"Bob Johnson is 50 years old\"])",
        "countSeniors(details = [\"John Smith, 555-1234, Male\", \"Jane Doe, 555-5678, Female\"])",
        "countSeniors(details = [\"John Smith is 5 years old\", \"Jane Doe is 65 years old\", \"Bob Johnson is 3 years old\"])",
        "countSeniors(details = [\"John Smith (50)\", \"Jane Doe (70)\", \"Bob Johnson (60)\"])"
    ],
    "sample_290": [
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"1010\", s2 = \"0101\")",
        "minimumSteps(s1 = \"1010\", s2 = \"0101\")",
        "minimumSteps(s1 = \"1010\", s2 = \"0101\")",
        "minimumSteps(s1 = \"1010\", s2 = \"0101\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [2,4], moveTo = [1,3])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [2,4], moveTo = [1,3])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9,10], moveFrom = [1,3,5,7,9], moveTo = [2,4,6,8,10])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9,10], moveFrom = [1,3,5,7,9], moveTo = [2,4,6,8,10])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9,10], moveFrom = [1,3,5,7,9], moveTo = [2,4,6,8,10])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9,10], moveFrom = [1,3,5,7,9], moveTo = [2,4,6,8,10])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9,10], moveFrom = [2,4,6,8], moveTo = [1,3,5,7])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9,10], moveFrom = [2,4,6,8], moveTo = [1,3,5,7])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9], moveFrom = [2,4,6], moveTo = [1,3,5])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9,10], moveFrom = [2,7,5], moveTo = [1,3,9])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"abab\", k = 4)",
        "beautifulSubstrings(s = \"abab\", k = 4)",
        "beautifulSubstrings(s = \"abab\", k = 4)",
        "beautifulSubstrings(s = \"abab\", k = 4)",
        "beautifulSubstrings(s = \"aeiou\", k = 20)",
        "beautifulSubstrings(s = \"aeiou\", k = 20)",
        "beautifulSubstrings(s = \"ababab\", k = 7)",
        "beautifulSubstrings(s = \"ababab\", k = 7)",
        "beautifulSubstrings(s = \"ababab\", k = 7)",
        "beautifulSubstrings(s = \"abacabadabacaba\", k = 10)"
    ],
    "sample_242": [
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\", \"cc\", \"dd\", \"dc\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\", \"cc\", \"dd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\", \"cc\", \"dd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\", \"cc\", \"dd\", \"dc\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"racecar\", \"car\", \"care\", \"acre\", \"arc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"racecar\", \"car\", \"care\", \"arc\"])"
    ],
    "sample_245": [
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 8)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 8)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 8)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 8)",
        "buyChoco(prices = [1, 2, 5], money = 3)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 8)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"code\", \"edoc\", \"da\", \"d\"])",
        "maximumNumberOfStringPairs(words = [\"code\", \"edoc\", \"da\", \"d\"])",
        "maximumNumberOfStringPairs(words = [\"code\", \"edoc\", \"da\", \"d\"])",
        "maximumNumberOfStringPairs(words = [\"code\", \"edoc\", \"da\", \"d\"])",
        "maximumNumberOfStringPairs(words = [\"code\", \"edoc\", \"da\", \"d\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"car\", \"care\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"car\", \"care\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"car\", \"care\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"car\", \"care\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"car\", \"care\", \"arc\"])"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"ababab\")",
        "longestSemiRepetitiveSubstring(\"ababab\")",
        "longestSemiRepetitiveSubstring(\"ababab\")",
        "longestSemiRepetitiveSubstring(\"abcde\")",
        "longestSemiRepetitiveSubstring(\"abcbdeffed\")",
        "longestSemiRepetitiveSubstring(\"abcbdeffed\")",
        "longestSemiRepetitiveSubstring(\"abcbdeffed\")"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])"
    ],
    "sample_323": [
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 2)",
        "isFascinating(n = 5)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 5)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(\"banana\")",
        "longestSemiRepetitiveSubstring(\"banana\")",
        "longestSemiRepetitiveSubstring(\"banana\")",
        "longestSemiRepetitiveSubstring(\"banana\")",
        "longestSemiRepetitiveSubstring(\"banana\")",
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"abcbca\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"John Smith 23\", \"Jane Doe 60\", \"Bob Johnson 45\"])",
        "countSeniors(details = [\"John Smith 23\", \"Jane Doe 60\", \"Bob Johnson 45\"])",
        "countSeniors(details = [\"John Smith 23\", \"Jane Doe 60\", \"Bob Johnson 45\"])",
        "countSeniors(details = [\"John Smith 23\", \"Jane Doe 60\", \"Bob Johnson 45\"])",
        "countSeniors(details = [\"John Smith 23:30 - 10:00\", \"Jane Doe 45:00 - 11:00\", \"Bob Johnson 60:00 - 12:00\"])",
        "countSeniors(details = [\"John Smith 23\", \"Jane Doe 55\", \"Bob Johnson 60\"])",
        "countSeniors(details = [\"John Smith 10:00 - 11:00\", \"Jane Doe 9:30 - 11:30\", \"Bob Johnson 13:00 - 14:00\"])",
        "countSeniors(details = [\"John Smith - 35\", \"Jane Doe - 42\", \"Bob Johnson - 60\"])",
        "countSeniors(details = [\"John Smith 23:30 - 11/12/1990\", \"Jane Doe 57:45 - 11/12/1995\", \"Bob Johnson 60:00 - 11/12/1980\"])",
        "countSeniors(details = [\"John Smith 10:00 - 11:00\", \"Jane Doe 9:30 - 11:30\", \"Bob Johnson 8:15 - 11:15\"])"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3])"
    ],
    "sample_257": [
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"na\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"na\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"na\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"def\", \"bac\", \"fed\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"def\", \"bac\", \"fed\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"def\", \"bac\", \"fed\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"def\", \"bac\", \"fed\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"def\", \"ghi\", \"ihg\", \"fed\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"na\", \"bb\"])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 2)",
        "shortestBeautifulSubstring(s1 = \"1010101\", k = 2)"
    ],
    "sample_301": [
        "lexicographicallySmallestArray([1, 2, 3, 4, 5], 2)",
        "lexicographicallySmallestArray([1, 3, 5, 8, 9], 2)",
        "lexicographicallySmallestArray([1, 2, 3, 4, 5], 2)",
        "lexicographicallySmallestArray([1, 2, 3, 4, 5], 2)",
        "lexicographicallySmallestArray([1, 2, 3, 4, 5], 2)",
        "lexicographicallySmallestArray([1, 3, 5, 8, 9], 2)",
        "lexicographicallySmallestArray([1, 3, 5, 8, 9], 2)",
        "lexicographicallySmallestArray([1, 2, 3, 4, 5], 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"abab\", k = 2)",
        "beautifulSubstrings(s = \"abab\", k = 2)",
        "beautifulSubstrings(s = \"abab\", k = 2)",
        "beautifulSubstrings(s = \"abab\", k = 2)",
        "beautifulSubstrings(s = \"abab\", k = 5)"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"racecar\", \"car\", \"level\", \"deified\", \"radar\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"na\"])"
    ],
    "sample_325": [
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)"
    ],
    "sample_240": [
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])"
    ],
    "sample_312": [
        "matrixSum([[1,2],[3,4]])",
        "matrixSum([[1,2],[3,4]])",
        "matrixSum([[1,2],[3,4]])",
        "matrixSum([[1,2],[3,4]])",
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1,2],[3,4]])",
        "matrixSum([[1,2],[3,4]])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [3, 2, 1])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1,2,3], nums2 = [3,4,5])",
        "minOperations(nums1 = [1,2,3], nums2 = [3,4,5])",
        "minOperations(nums1 = [1,2,3], nums2 = [3,4,5])",
        "minOperations(nums1 = [1,2,3], nums2 = [3,4,5])",
        "minOperations(nums1 = [1,2,3], nums2 = [3,4,5])",
        "minOperations(nums1 = [1,2,3], nums2 = [3,4,5])",
        "minOperations(nums1 = [1,2,3], nums2 = [3,4,5])",
        "minOperations(nums1 = [1,2,3], nums2 = [3,4,5])",
        "minOperations(nums1 = [1,2,3], nums2 = [3,4,5])",
        "minOperations(nums1 = [1,2,3], nums2 = [3,4,5])"
    ],
    "sample_243": [
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(\"101010101\", 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(\"101010101\", 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(\"101010101\", 2)",
        "shortestBeautifulSubstring(s = \"10101010101\", k = 3)"
    ],
    "sample_256": [
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum(nums = [3, 4, 2, 4, 1, 5])",
        "minimumSum(nums = [3, 4, 2, 3])"
    ],
    "sample_291": [
        "minimumSteps(s1 = \"101\", s2 = \"111\")",
        "minimumSteps(s1 = \"101\", s2 = \"111\")",
        "minimumSteps(s1 = \"101\", s2 = \"111\")",
        "minimumSteps(s1 = \"101\", s2 = \"111\")",
        "minimumSteps(s1 = \"101\", s2 = \"111\")",
        "minimumSteps(s1 = \"101\", s2 = \"111\")",
        "minimumSteps(s1 = \"101\", s2 = \"111\")",
        "minimumSteps(s1 = \"101\", s2 = \"111\")",
        "minimumSteps(s1 = \"101\", s2 = \"110\")",
        "minimumSteps(s1 = \"101\", s2 = \"110\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])"
    ],
    "sample_277": [
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [0, 1, 0]])"
    ],
    "sample_244": [
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)"
    ],
    "sample_292": [
        "minimumSteps(s1 = \"1010101\", s2 = \"1110111\")",
        "minimumSteps(s1 = \"1010101\", s2 = \"1110001\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101\", s2 = \"111\")",
        "minimumSteps(s1 = \"101\", s2 = \"111\")",
        "minimumSteps(s1 = \"1010101\", s2 = \"1110111\")",
        "minimumSteps(s1 = \"1010101\", s2 = \"11010101\")",
        "minimumSteps(s1 = \"101\", s2 = \"001\")"
    ],
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 3, 5], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [2, 3], moveTo = [1, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 3], moveTo = [2, 4])"
    ],
    "sample_239": [
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])"
    ],
    "sample_273": [
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [0, 0, 0]])"
    ],
    "sample_267": [
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 2, 1])"
    ],
    "sample_294": [
        "minimumSteps(s1 = \"101\")",
        "minimumSteps(s1 = \"101\")",
        "minimumSteps(s1 = \"101\")",
        "minimumSteps(s1 = \"101\")",
        "minimumSteps(s1 = \"101\")",
        "minimumSteps(s1 = \"101\")",
        "minimumSteps(s1 = \"101\")",
        "minimumSteps(s1 = \"101\")",
        "minimumSteps(s1 = \"101\")",
        "minimumSteps(s1 = \"101\")"
    ],
    "sample_274": [
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])"
    ],
    "sample_270": [
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 4, 5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 0, 3], nums2 = [1, 1, 2, 2])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 4])"
    ],
    "sample_317": [
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 8)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 8)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [2, 3, 4, 5], money = 8)",
        "buyChoco(prices = [2, 3, 4, 5], money = 8)"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"ba\", k = 5)",
        "beautifulSubstrings(s = \"ba\", k = 5)",
        "beautifulSubstrings(s = \"ba\", k = 5)",
        "beautifulSubstrings(s = \"ba\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"abaeiou\", k = 5)"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(\"ababab\")",
        "longestSemiRepetitiveSubstring(\"ababab\")",
        "longestSemiRepetitiveSubstring(\"ababab\")",
        "longestSemiRepetitiveSubstring(\"ababab\")",
        "longestSemiRepetitiveSubstring(\"ababab\")",
        "longestSemiRepetitiveSubstring(\"ababab\")",
        "longestSemiRepetitiveSubstring(\"ababab\")",
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"ababab\")",
        "longestSemiRepetitiveSubstring(\"banana\")"
    ],
    "sample_341": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)"
    ],
    "sample_271": [
        "minSum(nums1 = [1,0,1], nums2 = [0,1,1])",
        "minSum(nums1 = [1,0,1], nums2 = [0,1,1])",
        "minSum(nums1 = [1,0,1], nums2 = [0,1,1])",
        "minSum(nums1 = [1,0,1], nums2 = [0,1,1])",
        "minSum(nums1 = [1,0,1], nums2 = [0,1,1])",
        "minSum(nums1 = [1,0,1], nums2 = [0,1,1])",
        "minSum(nums1 = [1,2,3], nums2 = [2,3,4])",
        "minSum(nums1 = [1,2,3], nums2 = [2,3,4])",
        "minSum(nums1 = [1,2,3], nums2 = [1,2,3])",
        "minSum(nums1 = [1,2,3], nums2 = [1,2,3])"
    ],
    "sample_340": [
        "longestString(x = 3, y = 5, z = 2)",
        "longestString(x = 3, y = 5, z = 2)",
        "longestString(x = 3, y = 5, z = 2)",
        "longestString(x = 3, y = 5, z = 2)",
        "longestString(x = 3, y = 5, z = 2)",
        "longestString(x = 3, y = 5, z = 2)",
        "longestString(x = 3, y = 5, z = 2)",
        "longestString(x = 3, y = 5, z = 2)",
        "longestString(x = 3, y = 5, z = 2)",
        "longestString(x = 3, y = 5, z = 2)"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s1 = \"baaab\", k = 2)",
        "shortestBeautifulSubstring(s1 = \"baaab\", k = 2)",
        "shortestBeautifulSubstring(s1 = \"baaab\", k = 2)",
        "shortestBeautifulSubstring(s1 = \"baaab\", k = 2)",
        "shortestBeautifulSubstring(s = \"abcbdbdbbdcdabd\", k = 3)",
        "shortestBeautifulSubstring(s = \"abcbdbdbbdcdabd\", k = 3)",
        "shortestBeautifulSubstring(s = \"abcbda\", k = 3)",
        "shortestBeautifulSubstring(s = \"abcbdbbdcda\", k = 3)",
        "shortestBeautifulSubstring(s = \"abcbdbbdcda\", k = 5)",
        "shortestBeautifulSubstring(s = \"abcbdbdbbdcdabdabd\", k = 5)"
    ],
    "sample_324": [
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(my_int = 42)",
        "isFascinating(my_int = 42)"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [3, 4, 5, 6, 7])",
        "minimumSum(nums = [3, 4, 5, 6, 7])"
    ],
    "sample_268": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 4, 5])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(\"abcde\", \"bcdea\", \"abdea\")"
    ],
    "sample_321": [
        "maxStrength([1, 2, 3, 4, 5])",
        "maxStrength([1, 2, 3, 4, 5])",
        "maxStrength([1, 2, 3, 4, 5])",
        "maxStrength([1, 2, 3, 4, 5])",
        "maxStrength([1, -2, 3, -4, 5])",
        "maxStrength([1, -2, 3, -4, 5])",
        "maxStrength([1, -2, 3, -4, 5])",
        "maxStrength([1, 2, 3])",
        "maxStrength([1, 2, 3])",
        "maxStrength([1, 2, 3])"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 3])"
    ],
    "sample_357": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveFrom = [2, 7, 10], moveTo = [5, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 5, 7], moveTo = [6, 9])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 5, 7], moveTo = [6, 9])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 7, 8], moveTo = [5, 6, 9])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveFrom = [3, 6, 9], moveTo = [1, 4, 7])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 5, 7], moveTo = [4, 6, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 5, 7], moveTo = [4, 6, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 5, 8], moveTo = [6, 9])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 5, 8], moveTo = [6, 9])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 5, 8], moveTo = [6, 9])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 8)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 8)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 8)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 8)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 8)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 8)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 8)"
    ],
    "sample_308": [
        "matrixSum([[1,2],[3,4]])",
        "matrixSum([[1,2],[3,4]])",
        "matrixSum([[1,2],[3,4]])",
        "matrixSum([[1,2],[3,4]])",
        "matrixSum([[1,2],[3,4]])",
        "matrixSum([[1,2],[3,4]])",
        "matrixSum([[1,2],[3,4]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 5], money = 10)",
        "buyChoco(prices = [1, 2, 5], money = 10)",
        "buyChoco(prices = [1, 2, 5], money = 10)",
        "buyChoco(prices = [1, 2, 5], money = 5)"
    ],
    "sample_259": [
        "minimumSum([1,2,3,4,5])",
        "minimumSum([1,2,3,4,5])",
        "minimumSum([1,2,3,4,5])",
        "minimumSum([1,2,3,4,5])",
        "minimumSum([1,2,3,4,5])",
        "minimumSum([1,2,3,4,5])",
        "minimumSum([1,2,3,4,5])",
        "minimumSum([1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])"
    ],
    "sample_351": [
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_311": [
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1,2],[3,4]])",
        "matrixSum([[1,2],[3,4]])",
        "matrixSum([[1,2],[3,4]])",
        "matrixSum([[1, 2], [3, 4]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 2, 5], money = 10)",
        "buyChoco(a = [1, 2, 5], money = 10)",
        "buyChoco(a = [1, 2, 5], money = 10)",
        "buyChoco(a = [1, 2, 5], money = 10)",
        "buyChoco(a = [1, 2, 5], money = 10)",
        "buyChoco(a = [1, 2, 5], money = 10)",
        "buyChoco(my_list = [1, 2, 5], money = 10)",
        "buyChoco(my_list = [1, 2, 5], money = 10)",
        "buyChoco(my_list = [1, 2, 5], money = 10)",
        "buyChoco([1, 2, 3], 5)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_276": [
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])"
    ],
    "sample_320": [
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 4, 5])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"ca\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"ca\")"
    ],
    "sample_347": [
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])"
    ],
    "sample_304": [
        "countSeniors(details = [\"John Smith - 35 years old\", \"Jane Doe - 42 years old\"])",
        "countSeniors(details = [\"John Smith - 35 years old\", \"Jane Doe - 42 years old\"])",
        "countSeniors(details = [\"John Smith - 35 years old\", \"Jane Doe - 42 years old\"])",
        "countSeniors(details = [\"John Smith - 35 years old\", \"Jane Doe - 42 years old\"])",
        "countSeniors(details = [\"John Smith - 35\", \"Jane Doe - 42\", \"Bob Johnson - 60\"])",
        "countSeniors(details = [\"John Smith - 35\", \"Jane Doe - 42\", \"Bob Johnson - 60\"])",
        "countSeniors(details = [\"John Smith - 35\", \"Jane Doe - 42\", \"Bob Johnson - 60\"])",
        "countSeniors(details = [\"John Smith - 35 years old\", \"Jane Doe - 42 years old\", \"Bob Johnson - 60 years old\"])",
        "countSeniors(details = [\"John Smith, 35, Male\", \"Jane Doe, 42, Female\"])",
        "countSeniors(details = [\"John Smith 10 30\", \"Jane Doe 60 20\", \"Bob Johnson 80 90\"])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"ababab\", k = 2)",
        "beautifulSubstrings(s = \"ababab\", k = 2)",
        "beautifulSubstrings(s = \"ababab\", k = 2)",
        "beautifulSubstrings(s = \"ababab\", k = 2)",
        "beautifulSubstrings(s = \"ababab\", k = 2)",
        "beautifulSubstrings(s = \"ababab\", k = 2)",
        "beautifulSubstrings(s = \"ababab\", k = 2)",
        "beautifulSubstrings(s = \"ababab\", k = 2)",
        "beautifulSubstrings(s = \"ababab\", k = 2)",
        "beautifulSubstrings(s = \"abcb\", k = 2)"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 2)",
        "shortestBeautifulSubstring(sabcdefghijklmnopqrstuvwxyz\")\n    \"\"\"\n    for i in range(1, n):\n        for j in range(1, n):\n            if s1[i-1]",
        "shortestBeautifulSubstring(sabcdefghijklmnopqrstuvwxyz')\n    \"\"\"\n    for i in range(1, n):\n        for j in range(1, n):\n            if s1[i-1]"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghij\"])"
    ],
    "sample_327": [
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)"
    ],
    "sample_309": [
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1,2],[3,4]])",
        "matrixSum([[1, 2], [3, 4]])",
        "matrixSum([[1, 2], [3, 4]])"
    ],
    "sample_326": [
        "isFascinating(n = 1234)",
        "isFascinating(n = 1234)",
        "isFascinating(n = 1234)",
        "isFascinating(n = 1234)",
        "isFascinating(n = 1234)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)"
    ],
    "sample_275": [
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])"
    ],
    "sample_260": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_322": [
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(my_int = 5)",
        "isFascinating(my_int = 5)",
        "isFascinating(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isFascinating(n = 3)"
    ],
    "sample_248": [
        "minOperations(s1 = \"101\", s2 = \"010\", x = 1)",
        "minOperations(s1 = \"101\", s2 = \"010\", x = 1)",
        "minOperations(s1 = \"101\", s2 = \"010\", x = 1)",
        "minOperations(s1 = \"101\", s2 = \"010\", x = 1)",
        "minOperations(s1 = \"101\", s2 = \"010\", x = 1)",
        "minOperations(s1 = \"101\", s2 = \"010\", x = 1)",
        "minOperations(s1 = \"101\", s2 = \"010\", x = 1)",
        "minOperations(s1 = \"101\", s2 = \"110\", x = 1)",
        "minOperations(s1 = \"101\", s2 = \"110\", x = 1)",
        "minOperations(s1 = \"101\", s2 = \"110\", x = 1)"
    ],
    "sample_342": [
        "longestString(x = 3, y = 5, z = 2)",
        "longestString(x = 3, y = 5, z = 2)",
        "longestString(x = 3, y = 5, z = 2)",
        "longestString(x = 3, y = 5, z = 2)",
        "longestString(x = 3, y = 5, z = 2)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 5, y = 7, z = 3)",
        "longestString(x = 5, y = 7, z = 3)",
        "longestString(x = 5, y = 5, z = 5)"
    ],
    "sample_354": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 4, 6], moveTo = [1, 3, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 4, 6], moveTo = [1, 3, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 4, 6], moveTo = [1, 3, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 4, 6], moveTo = [1, 3, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 4, 6], moveTo = [1, 3, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3, 5, 7], moveTo = [2, 4, 6, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveFrom = [2, 4, 6], moveTo = [8, 10, 12])"
    ],
    "sample_306": [
        "countSeniors(details = [\"John (35) is a senior\", \"Jane (62) is middle-aged\"])",
        "countSeniors(details = [\"John (35) is a senior\", \"Jane (62) is a senior\"])",
        "countSeniors(details = [\"John (35) is a senior\", \"Jane (62) is a senior\"])",
        "countSeniors(details = [\"John (25)\", \"Jane (60)\", \"Bob (45)\", \"Alice (55)\"])",
        "countSeniors(details = [\"John Smith (35) - Male\", \"Jane Doe (50) - Female\"])",
        "countSeniors(details = [\"John (35) is a senior\", \"Jane (28) is a middle-aged student\"])",
        "countSeniors(details = [\"John (35) is a senior\", \"Jane (62) is a middle-aged student\"])",
        "countSeniors(details = [\"John (35) is a senior\", \"Jane (62) is a middle-aged student\"])",
        "countSeniors(details = [\"John (35) is a senior\", \"Jane (28) is not a senior\"])",
        "countSeniors(details = [\"John Smith (60-69)\", \"Jane Doe (65-69)\", \"Bob Johnson (70-79)\"])"
    ],
    "sample_303": [
        "countSeniors(details = [\"John Smith is 35 years old\", \"Jane Doe is 42 years old\"])",
        "countSeniors(details = [\"John Smith is 35 years old\", \"Jane Doe is 42 years old\"])",
        "countSeniors(details = [\"John Smith is 35 years old\", \"Jane Doe is 42 years old\"])",
        "countSeniors(details = [\"John Smith (50-65)\", \"Jane Doe (20-29)\", \"Bob Johnson (60-69)\"])",
        "countSeniors(details = [\"John Smith (50-65)\", \"Jane Doe (20-29)\", \"Bob Johnson (60-69)\"])",
        "countSeniors(details = [\"John Smith (50-65)\", \"Jane Doe (20-29)\", \"Bob Johnson (60-69)\"])",
        "countSeniors(details = [\"John Smith is 60 years old\", \"Jane Doe is 40 years old\"])",
        "countSeniors(details = [\"John Smith (35)\", \"Jane Doe (50)\", \"Bob Johnson (70)\"])",
        "countSeniors(details = [\"John Smith (50-65)\", \"Jane Doe (60-70)\", \"Bob Johnson (80-85)\"])",
        "countSeniors(details = [\"John Smith (50-59)\", \"Jane Doe (60-69)\", \"Bob Johnson (70-79)\"])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 4, 6], moveTo = [1, 3, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 4, 6], moveTo = [1, 3, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 4, 6], moveTo = [1, 3, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 4, 6], moveTo = [1, 3, 5])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(\"abc\", \"ab\", \"abc\")",
        "findMinimumOperations(\"abc\", \"def\", \"ghi\")",
        "findMinimumOperations(\"abc\", \"def\", \"ghi\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")"
    ],
    "sample_407": [
        "minimumRightShifts([4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts([4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts([4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts([4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts(nums = [1,3,4,5,6,7])",
        "minimumRightShifts(nums = [1,3,4,5,6,7])",
        "minimumRightShifts(nums = [1,3,4,5,6,7])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(my_list = [1, 3, 5, 7])",
        "minimumRightShifts(my_list = [1, 3, 5, 7, 9])"
    ],
    "sample_453": [
        "minChanges(s1 = \"abccba\")",
        "minChanges(s1 = \"abccba\")",
        "minChanges(s1 = \"abccba\")",
        "minChanges(s1 = \"ababab\")",
        "minChanges(s1 = \"ababab\")",
        "minChanges(s1 = \"ababab\", s2 = \"ababab\")",
        "minChanges(s1 = \"ababab\", s2 = \"ababab\")",
        "minChanges(s1 = \"ababab\")",
        "minChanges(s1 = \"abccba\")",
        "minChanges(s1 = \"baaab\", s2 = \"aaabaa\")"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 7)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 7)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 7)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 7)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 7)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 7)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 7)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 7)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 7)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 7)"
    ],
    "sample_367": [
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 5)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 5)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 5)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 5)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 5)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 5)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 5)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 5)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 5)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 5)"
    ],
    "sample_381": [
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [1,2,3,4,5], t = 7)",
        "countPairs(nums = [1,2,3,4,5], t = 7)"
    ],
    "sample_366": [
        "isGood([1, 2, 3])",
        "isGood([1, 2, 3])",
        "isGood([1, 2, 3])",
        "isGood([1, 2, 3])",
        "isGood([1, 2, 3])",
        "isGood([1, 2, 3])",
        "isGood([1, 2, 3])",
        "isGood([1, 2, 3])",
        "isGood([1, 2, 3])",
        "isGood([1, 2, 3])"
    ],
    "sample_369": [
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [1, 3, 5, 7])",
        "minimumRightShifts(nums = [1, 3, 5, 7])",
        "minimumRightShifts(nums = [1, 3, 5, 7])",
        "minimumRightShifts(nums = [1, 3, 5, 7])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts(nums = [4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts([1, 3, 5, 7])",
        "minimumRightShifts([4, 5, 6, 7, 1, 2, 3])"
    ],
    "sample_448": [
        "minChanges(s1 = \"ab\", s2 = \"ba\")",
        "minChanges(s1 = \"ab\", s2 = \"ba\")",
        "minChanges(s1 = \"ab\", s2 = \"ba\")",
        "minChanges(s1 = \"ab\", s2 = \"ba\")",
        "minChanges(s1 = \"ab\", s2 = \"ba\")",
        "minChanges(s1 = \"ab\", s2 = \"ba\")",
        "minChanges(s1 = \"ab\", s2 = \"ba\")",
        "minChanges(s1 = \"ab\", s2 = \"ba\")",
        "minChanges(s1 = \"ab\", s2 = \"ba\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")"
    ],
    "sample_409": [
        "minLengthAfterRemovals(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(my_list = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(my_list = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(my_list = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals([1,2,2,3,3,3,4,4,4,4])",
        "minLengthAfterRemovals([1,2,2,3,3,3,4,4,4,4])",
        "minLengthAfterRemovals([1,2,3,4,5,6,7,8,9,10])",
        "minLengthAfterRemovals(my_list = [1,2,2,3,3,3,4,4,5,5,5,5])"
    ],
    "sample_361": [
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])"
    ],
    "sample_419": [
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(my_list = [1,2,3,4,5], k = 3)",
        "minOperations(my_list = [1,2,3,4,5], k = 3)",
        "minOperations(my_list = [1,2,3,4,5], k = 3)",
        "minOperations(my_list = [1,2,3,4,5], k = 3)",
        "minOperations(my_list = [1,2,3,4,5], k = 3)",
        "minOperations([1,2,3,4,5], 3)"
    ],
    "sample_478": [
        "findMaximumLength([1,2,3,4,5])",
        "findMaximumLength([1,2,3,4,5])",
        "findMaximumLength([1,2,3,4,5])",
        "findMaximumLength([1,2,3,4,5])",
        "findMaximumLength([1,2,3,4,5])",
        "findMaximumLength([1,2,3,4,5])",
        "findMaximumLength([1,2,3,4,5])",
        "findMaximumLength([1,2,3,4,5])",
        "findMaximumLength([1,2,3,4,5])",
        "findMaximumLength([1,2,3,4,5])"
    ],
    "sample_433": [
        "maxSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_389": [
        "canMakeSubsequence(\"abc\", \"def\")",
        "canMakeSubsequence(\"abc\", \"def\")",
        "canMakeSubsequence(\"abc\", \"def\")",
        "canMakeSubsequence(\"abc\", \"def\")",
        "canMakeSubsequence(\"abc\", \"def\")",
        "canMakeSubsequence(\"abc\", \"def\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"def\")",
        "canMakeSubsequence(my_str1 = \"abc\", my_str2 = \"def\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"def\")",
        "canMakeSubsequence(my_str1 = \"abc\", my_str2 = \"def\")"
    ],
    "sample_402": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"curr\", \"next\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"curr\", \"next\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"curr\", \"next\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"curr\", \"next\", \"next\", \"prev\", \"prev\", \"curr\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"curr\", \"next\", \"next\", \"prev\", \"prev\", \"curr\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"curr\", \"next\", \"next\", \"prev\", \"prev\", \"curr\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"prev\", \"prev\", \"next\", \"next\", \"prev\", \"prev\", \"next\"])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations([1, 2, 3, 4, 5], 3)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)"
    ],
    "sample_375": [
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1, 2, 3, 4, 5])",
        "minimumSeconds([1, 2, 3, 4, 5])",
        "minimumSeconds([1, 2, 3, 4, 5])",
        "minimumSeconds([1, 2, 3, 4, 5])",
        "minimumSeconds([1, 2, 3, 4, 5])",
        "minimumSeconds([1, 2, 3, 4, 5])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")"
    ],
    "sample_372": [
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(s1 = \"banana\")"
    ],
    "sample_413": [
        "minLengthAfterRemovals(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(my_list = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(my_list = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(my_list = [1, 2, 3, 4, 5])"
    ],
    "sample_452": [
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")"
    ],
    "sample_385": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)"
    ],
    "sample_427": [
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_410": [
        "minLengthAfterRemovals(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(my_list = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(my_list = [1, 2, 3, 4, 5])"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins([1, 2, 3, 4, 5])",
        "minimumCoins([1, 2, 3, 4, 5])",
        "minimumCoins([2, 3, 1, 1, 5])",
        "minimumCoins([2, 3, 1, 1, 5])",
        "minimumCoins([2, 3, 1, 1, 5])",
        "minimumCoins([2, 7, 9, 3, 1])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")"
    ],
    "sample_420": [
        "minOperations([1, 2, 3, 4, 5], 3)",
        "minOperations([1, 2, 3, 4, 5], 3)",
        "minOperations([1, 2, 3, 4, 5], 3)",
        "minOperations([1, 2, 3, 4, 5], 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)"
    ],
    "sample_362": [
        "isGood([1, 2, 3])",
        "isGood([1, 2, 3])",
        "isGood([1, 2, 3])",
        "isGood([1, 2, 3])",
        "isGood([1, 2, 3])",
        "isGood([1, 2, 3])",
        "isGood([1, 2, 3])",
        "isGood([1, 2, 3])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3])"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 5)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 5)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 5)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 5)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 5)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 5)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 5)"
    ],
    "sample_365": [
        "isGood([1,2,3])",
        "isGood([1,2,3])",
        "isGood([1,2,3])",
        "isGood([1,2,3])",
        "isGood([1,2,3])",
        "isGood([1,2,3])",
        "isGood([1,2,3])",
        "isGood([1,2,3,4,5])",
        "isGood([1,2,3,4,5])",
        "isGood([1,2,3,4,5])"
    ],
    "sample_434": [
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence([1,2,3,4,5], 5)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 5)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 5)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 5)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 5)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 5)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 8)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 8)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 8)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 7)"
    ],
    "sample_450": [
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(s1 = \"aabbc\", s2 = \"aabbcc\")",
        "minChanges(s1 = \"abccba\")",
        "minChanges(s1 = \"baaab\", s2 = \"aaabaa\")"
    ],
    "sample_463": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 10, limit = 3)"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_449": [
        "minChanges(s1 = \"abccba\")",
        "minChanges(s1 = \"abccba\")",
        "minChanges(s1 = \"abccba\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(s1 = \"abccba\")",
        "minChanges(s1 = \"abccba\")",
        "minChanges(s1 = \"abccba\")",
        "minChanges(s1 = \"ababab\", s2 = \"ababab\")",
        "minChanges(s1 = \"ababab\", s2 = \"ababab\")"
    ],
    "sample_425": [
        "minOperations([1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3])",
        "minOperations([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])"
    ],
    "sample_386": [
        "canMakeSubsequence('abcz', 'abdc')",
        "canMakeSubsequence('abcz', 'abdc')",
        "canMakeSubsequence('abcz', 'abc')",
        "canMakeSubsequence('abcz', 'abc')",
        "canMakeSubsequence('abcz', 'abdc')",
        "canMakeSubsequence('az', 'za')",
        "canMakeSubsequence('az', 'za')",
        "canMakeSubsequence('az', 'za')",
        "canMakeSubsequence(str1 = \"az\", str2 = \"za\")",
        "canMakeSubsequence(\"ab\", \"az\")"
    ],
    "sample_377": [
        "minimumSeconds([1,2,3,4,5])",
        "minimumSeconds([1,2,3,4,5])",
        "minimumSeconds([1,2,3,4,5])",
        "minimumSeconds([1,2,3,4,5])",
        "minimumSeconds([1,2,3,4,5])",
        "minimumSeconds([1,2,3,4,5])",
        "minimumSeconds([1,2,3,4,5])",
        "minimumSeconds([1,2,3,4,5])",
        "minimumSeconds([1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds([1,2,3,4,5])"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence([1,2,3,4,5], 5)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 5)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 5)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 5)",
        "lengthOfLongestSubsequence([1,2,3,4,5,6,7,8,9,10], 5)",
        "lengthOfLongestSubsequence([1,2,3,4,5,6,7,8,9,10], 5)",
        "lengthOfLongestSubsequence([1,2,3,4,5,6,7,8,9,10], 5)",
        "lengthOfLongestSubsequence([1,2,3,4,5,6,7,8,9,10], 5)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 5)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 5)"
    ],
    "sample_370": [
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")"
    ],
    "sample_421": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations([1, 2, 3, 4, 5], 3)",
        "minOperations([1, 2, 3, 4, 5], 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])"
    ],
    "sample_415": [
        "countPairs([[0, 0], [1, 1], [2, 2], [3, 3]], 2)",
        "countPairs([[0, 0], [1, 1], [2, 2], [3, 3]], 2)",
        "countPairs([[0, 0], [1, 1], [2, 2], [3, 3]], 2)",
        "countPairs([[0, 0], [1, 1], [2, 2], [3, 3]], 2)",
        "countPairs([[0, 0], [1, 1], [2, 2], [3, 3]], 2)",
        "countPairs([[0, 0], [1, 1], [2, 2], [3, 3]], 2)",
        "countPairs([[0, 0], [1, 1], [2, 2], [3, 3]], 2)",
        "countPairs([[0, 0], [1, 1], [2, 2]], 2)",
        "countPairs([[0, 0], [1, 1], [2, 2]], 2)",
        "countPairs([[0, 0], [1, 1], [2, 2]], 3)"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 8)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 8)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 8)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 8)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 8)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 8)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 8)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 8)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)"
    ],
    "sample_445": [
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1,2,3,4,5])"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")"
    ],
    "sample_432": [
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_401": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 2)"
    ],
    "sample_363": [
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_374": [
        "minimumSeconds([1, 2, 3, 4, 5])",
        "minimumSeconds([1, 2, 3, 4, 5])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1, 2, 3, 4, 5])",
        "minimumSeconds([1, 2, 3, 4, 5])"
    ],
    "sample_376": [
        "minimumSeconds([1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds([1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds([1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds([1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds([1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds([1,2,3,4,5])",
        "minimumSeconds([1,2,3,4,5])",
        "minimumSeconds([1,2,3,4,5])",
        "minimumSeconds([1,2,3,4,5])",
        "minimumSeconds([1,2,3,4,5])"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals([1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])"
    ],
    "sample_399": [
        "maxSum(nums = [1,2,1,2,3,4,1,2], m = 2, k = 3)",
        "maxSum(nums = [1,2,1,2,3,4,1,2], m = 2, k = 3)",
        "maxSum(nums = [1,2,1,2,3,4,1,2], m = 2, k = 3)",
        "maxSum(nums = [1,2,1,2,3,4,1,2], m = 2, k = 3)",
        "maxSum(nums = [1,2,1,3,2,5,3,4], m = 3, k = 2)",
        "maxSum(nums = [1,2,1,3,2,5,3,4], m = 3, k = 2)",
        "maxSum(nums = [1,2,1,3,2,5,3,4], m = 3, k = 2)",
        "maxSum(nums = [1,2,1,2,3,4,3,2,1], m = 2, k = 2)",
        "maxSum(nums = [1,2,1], m = 2, k = 2)",
        "maxSum(nums = [1,2,1,3,2,5,3], m = 3, k = 2)"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)"
    ],
    "sample_364": [
        "isGood([1,2,3,4,5])",
        "isGood([1,2,3,4,5])",
        "isGood([1,2,3,4,5])",
        "isGood([1,2,3,4,5])",
        "isGood([1,2,3,4,5])",
        "isGood([1,2,3,4,5])",
        "isGood([1,2,3,4,5])",
        "isGood([1,2,3,4,5])",
        "isGood([1,2,3])",
        "isGood([1,2,3])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins(prices = [1, 5, 10, 25])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s = \"ababab\")",
        "minimumBeautifulSubstrings(s = \"ababab\")",
        "minimumBeautifulSubstrings(s = \"ababab\")",
        "minimumBeautifulSubstrings(s = \"ababab\")",
        "minimumBeautifulSubstrings(s = \"ababab\")",
        "minimumBeautifulSubstrings(s = \"ababab\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")"
    ],
    "sample_387": [
        "canMakeSubsequence('abc', 'def')",
        "canMakeSubsequence('abc', 'abdc')",
        "canMakeSubsequence('abc', 'abdc')",
        "canMakeSubsequence('abc', 'def')",
        "canMakeSubsequence('abc', 'def')",
        "canMakeSubsequence('abc', 'def')",
        "canMakeSubsequence('abc', 'abdc')",
        "canMakeSubsequence('abc', 'abdc')",
        "canMakeSubsequence('abc', 'abdc')",
        "canMakeSubsequence('abc', 'abdc')"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(my_list = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(my_list = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(my_list = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(my_list = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(my_list = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(my_list = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)"
    ],
    "sample_390": [
        "canMakeSubsequence(\"abc\", \"def\")",
        "canMakeSubsequence(\"abc\", \"def\")",
        "canMakeSubsequence(\"abc\", \"def\")",
        "canMakeSubsequence(\"abcz\", \"abc\")",
        "canMakeSubsequence(\"abcz\", \"abc\")",
        "canMakeSubsequence(\"abcz\", \"abc\")",
        "canMakeSubsequence(\"abcz\", \"abc\")",
        "canMakeSubsequence(s1 = \"ab\", s2 = \"ac\")",
        "canMakeSubsequence(s1 = \"ab\", s2 = \"ac\")",
        "canMakeSubsequence(\"abcz\", \"abdc\")"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"prev\", \"next\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"prev\", \"next\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"prev\", \"next\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"prev\", \"next\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"curr\", \"next\", \"next\", \"prev\", \"prev\", \"curr\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"prev\", \"next\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"prev\", \"next\", \"next\", \"prev\", \"prev\", \"next\"])"
    ],
    "sample_416": [
        "countPairs([[0, 0], [1, 1], [2, 2]], 1)",
        "countPairs([[0, 0], [1, 1], [2, 2]], 1)",
        "countPairs([[0, 0], [1, 1], [2, 2]], 2)",
        "countPairs([[0, 0], [0, 1], [1, 0], [1, 1]], 2)",
        "countPairs([[0, 0], [0, 1], [1, 0], [1, 1]], 2)",
        "countPairs([[1, 2], [2, 3], [3, 4]], 2)",
        "countPairs([[0, 0], [0, 1], [1, 0], [1, 1]], 2)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9]], k = 2)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3]], k = 1)"
    ],
    "sample_451": [
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(s1 = \"ababab\", s2 = \"ababab\")",
        "minChanges(s1 = \"baaab\", s2 = \"baba\")"
    ],
    "sample_461": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 10, limit = 2)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"banana\", s2 = \"nana\")",
        "canBeEqual(s1 = \"abba\", s2 = \"baab\")"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 75)",
        "accountBalanceAfterPurchase(p = 75)",
        "accountBalanceAfterPurchase(p = 75)",
        "accountBalanceAfterPurchase(p = 75)",
        "accountBalanceAfterPurchase(p = 75)",
        "accountBalanceAfterPurchase(p = 75)",
        "accountBalanceAfterPurchase(p = 75)",
        "accountBalanceAfterPurchase(p = 75)",
        "accountBalanceAfterPurchase(p = 75)",
        "accountBalanceAfterPurchase(p = 75)"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_378": [
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_388": [
        "canMakeSubsequence('abc', 'def')",
        "canMakeSubsequence('abc', 'def')",
        "canMakeSubsequence('abc', 'def')",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"def\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"def\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"def\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"def\")",
        "canMakeSubsequence(my_str1 = \"abc\", my_str2 = \"def\")",
        "canMakeSubsequence(my_str1 = \"abc\", my_str2 = \"def\")",
        "canMakeSubsequence(\"abc\", \"def\")"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 3, 5, 4, 2])",
        "minimumRightShifts(nums = [1, 3, 5, 4, 2])",
        "minimumRightShifts(nums = [1, 3, 5, 4, 2])",
        "minimumRightShifts(nums = [1, 3, 5, 4, 2])",
        "minimumRightShifts(nums = [1, 3, 5, 4, 2])",
        "minimumRightShifts([4, 5, 6, 7, 1, 2, 3])",
        "minimumRightShifts([4, 5, 6, 7, 1, 2, 3])",
        "minimumRightShifts([4, 5, 6, 7, 1, 2, 3])",
        "minimumRightShifts([4, 5, 6, 7, 1, 2, 3])",
        "minimumRightShifts(nums = [1, 3, 5, 4])"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1, 2, 3, 4, 5], l = 1, r = 5)",
        "countSubMultisets(nums = [1, 2, 3, 4, 5], l = 1, r = 5)",
        "countSubMultisets(nums = [1, 2, 3, 4, 5], l = 1, r = 5)",
        "countSubMultisets(nums = [1, 2, 3, 4, 5], l = 1, r = 5)",
        "countSubMultisets(nums = [1, 2, 3, 4, 5], l = 1, r = 5)",
        "countSubMultisets(nums = [1, 2, 3, 4, 5], l = 1, r = 5)",
        "countSubMultisets(nums = [1, 2, 3, 4, 5], l = 1, r = 5)",
        "countSubMultisets(nums = [1, 2, 3, 4, 5], l = 2, r = 4)",
        "countSubMultisets(nums = [1, 2, 3, 4, 5], l = 2, r = 4)",
        "countSubMultisets(my_list = [1, 2, 3, 4, 5], l = 2, r = 4)"
    ],
    "sample_475": [
        "minimumCoins([2, 3, 1, 1, 4])",
        "minimumCoins([2, 3, 1, 1, 4])",
        "minimumCoins([2, 3, 1, 1, 4])",
        "minimumCoins(prices = [2, 3, 1, 1, 4])",
        "minimumCoins(prices = [2, 3, 1, 1, 4])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins([2, 3, 1, 1, 2])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins([1, 2, 3, 4, 5])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"re\", \"ga\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"re\", \"im\", \"q\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"re\", \"im\", \"q\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"re\", \"ba\", \"nana\", \"prev\", \"z\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"re\", \"ga\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"re\", \"ga\", \"n\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"re\", \"im\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"re\", \"ga\", \"n\", \"a\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"re\", \"gq\", \"px\", \"zy\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"re\", \"ga\", \"nq\", \"qp\", \"prev\", \"re\", \"ga\"])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 2, 2, 2, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 2, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 2, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 2, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 2, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 2, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 2, 2, 3, 3, 4, 4, 4, 4])"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\",",
        "lastVisitedIntegers(words = [\"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\",",
        "lastVisitedIntegers(words = [\"apple\", \"pen\", \"book\", \"pencil\", \"ruler\"])",
        "lastVisitedIntegers(words = [\"apple\", \"pen\", \"book\", \"pencil\", \"ruler\"])",
        "lastVisitedIntegers(words = [\"apple\", \"pen\", \"book\", \"pencil\", \"ruler\"])",
        "lastVisitedIntegers(words = [\"apple\", \"pen\", \"book\", \"pencil\", \"ruler\"])",
        "lastVisitedIntegers(words = [\"pq\", \"px\", \"zy\"])",
        "lastVisitedIntegers(words = [\"apple\", \"pen\", \"pencil\", \"book\", \"tape\", \"integers\"])",
        "lastVisitedIntegers(words = [\"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\", \"p\", \"q\"])",
        "lastVisitedIntegers(words = [\"apple\", \"pen\", \"pencil\", \"book\", \"backpack\"])"
    ],
    "sample_379": [
        "minimumSeconds([1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds([1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds([1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds([1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds([1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds([1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds([1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds([1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1,2,3,4,5])"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")"
    ],
    "sample_431": [
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev1\", \"prev2\", \"prev3\", \"prev4\", \"prev5\", \"prev6\", \"prev7\", \"prev8\", \"prev9\", \"prev10\", \"prev11\", \"prev12\", \"prev13\", \"prev14\", \"prev15\", \"prev16\", \"prev17\", \"prev18\", \"prev19\", \"prev20\", \"prev21\", \"prev22\", \"prev23\", \"prev24\", \"prev25\", \"prev26\", \"prev27\", \"prev28\", \"prev29\", \"prev30\", \"prev31\", \"prev32\", \"prev33\", \"prev34\", \"prev35\", \"prev36\", \"prev37\", \"prev38\", \"prev39\", \"prev40\", \"prev41\", \"prev42\", \"prev43\", \"prev44\", \"prev45\", \"prev46\", \"prev47\", \"prev48\", \"prev49\", \"prev50\", \"prev51\", \"prev52\", \"prev53\", \"prev54\", \"prev55\", \"prev56\", \"prev57\", \"prev58\", \"prev59\", \"prev60\", \"prev61\", \"prev62\", \"prev63\", \"prev64\", \"prev65\", \"prev66\", \"prev67\", \"prev68\", \"prev69\", \"prev70\", \"prev71\", \"prev72\", \"prev73\", \"prev74\", \"prev75\", \"prev76\", \"prev77\", \"prev78\", \"prev79\", \"prev80\", \"prev81\", \"prev82\", \"prev83\", \"prev84\", \"prev85\", \"prev86\", \"prev87\", \"prev88\", \"prev89\", \"prev90\", \"prev91\", \"prev92\", \"prev93\", \"prev94\", \"prev95\", \"prev96\", \"prev97\", \"prev98\", \"prev99\", \"prev100\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"next\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"curr\", \"next\", \"next\", \"prev\", \"prev\", \"curr\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"curr\", \"next\", \"next\", \"prev\", \"prev\", \"curr\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"curr\", \"next\", \"next\", \"prev\", \"prev\", \"curr\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"curr\", \"next\", \"next\", \"prev\", \"prev\", \"curr\", \"next\"])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcda\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"curr\", \"next\", \"next\", \"prev\", \"prev\", \"curr\", \"next\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"prev\", \"prev\", \"curr\", \"curr\", \"curr\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"curr\", \"next\", \"next\", \"prev\", \"prev\", \"curr\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"prev\", \"next\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"curr\", \"next\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"curr\", \"next\", \"next\", \"prev\", \"prev\", \"curr\", \"next\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\", \"4\", \"5\", \"prev\", \"prev\", \"prev\", \"6\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"prev\", \"prev\", \"curr\", \"curr\", \"curr\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \""
    ],
    "sample_464": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts([4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts([4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts([4, 5, 6, 7, 0, 1, 2])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum([1, 2, 3, 4, 5], 3, 2)"
    ],
    "sample_424": [
        "minOperations([1,2,2,3,3,3])",
        "minOperations([1,2,2,3,3,3])",
        "minOperations([1,2,2,3,3,3])",
        "minOperations([1,2,2,3,3,3])",
        "minOperations(nums = [1,2,2,3,3,3])",
        "minOperations(nums = [1,2,2,3,3,3])",
        "minOperations(nums = [1,2,2,3,3,3])",
        "minOperations(nums = [1,2,2,3,3,3])",
        "minOperations(nums = [1,2,2,3,3,3])",
        "minOperations([1,2,2,3,3,3])"
    ],
    "sample_417": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations([1,2,3,4,5], 3)",
        "minOperations([1,2,3,4,5], 3)",
        "minOperations([1,2,3,4,5], 3)",
        "minOperations([1, 2, 3, 4, 5], 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)"
    ],
    "sample_371": [
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_429": [
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")"
    ],
    "sample_380": [
        "countPairs(nums = [1,2,3,4,5], target = 5)",
        "countPairs(nums = [1,2,3,4,5], target = 5)",
        "countPairs(nums = [1,2,3,4,5], target = 5)",
        "countPairs(nums = [1,2,3,4,5], target = 5)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 8)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 5)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts([1, 2, 3, 4, 5])",
        "sumCounts([1, 2, 3, 4, 5])"
    ],
    "sample_368": [
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels('aeiou')",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")"
    ],
    "sample_462": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)"
    ],
    "sample_474": [
        "minimumCoins(prices = [7, 1, 5, 3, 6, 4])",
        "minimumCoins(prices = [7, 1, 5, 3, 6, 4])",
        "minimumCoins(prices = [7, 1, 5, 3, 6, 4])",
        "minimumCoins([2, 7, 9, 3, 1])",
        "minimumCoins([2, 7, 9, 3, 1])",
        "minimumCoins([2, 7, 9, 3, 1])",
        "minimumCoins([2, 7, 9, 3, 1])",
        "minimumCoins([1, 2, 3, 4, 5])",
        "minimumCoins([2, 3, 1, 1, 5])",
        "minimumCoins([1, 2, 3, 4, 5])"
    ],
    "sample_426": [
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_423": [
        "minOperations(nums = [1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3])",
        "minOperations([1, 2, 2, 3, 3, 3])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 1, 2, 2, 3, 3])",
        "minOperations([1, 1, 2, 2, 3, 3])",
        "minOperations([1, 1, 2, 2, 3, 3])",
        "minOperations([1, 1, 2, 2, 3, 3, 4, 4, 5, 5])"
    ],
    "sample_476": [
        "minimumCoins(prices = [2,3,1,8,4])",
        "minimumCoins(prices = [2,3,1,8,4])",
        "minimumCoins(prices = [2,3,1,8,4])",
        "minimumCoins(prices = [2,3,1,8,4])",
        "minimumCoins(prices = [2,3,1,8,4])",
        "minimumCoins(prices = [1,2,3,4,5])",
        "minimumCoins(prices = [1,2,3,4,5])",
        "minimumCoins(prices = [1,2,3,4,5])",
        "minimumCoins([1,2,3,4,5])",
        "minimumCoins([1,2,3,4,5])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 3, 5, 7])",
        "minimumRightShifts(nums = [1, 3, 5, 7])",
        "minimumRightShifts(nums = [1, 3, 4, 5, 6])",
        "minimumRightShifts(nums = [1,3,4,5,6])",
        "minimumRightShifts(nums = [1,3,4,5,6])",
        "minimumRightShifts(nums = [1,3,4,5,6])",
        "minimumRightShifts(nums = [1,3,4,5,6])",
        "minimumRightShifts(nums = [1,3,4,5,6])",
        "minimumRightShifts(nums = [1, 3, 4, 5, 7, 8, 10, 11])",
        "minimumRightShifts(nums = [1, 3, 4, 5, 7, 9, 0, 2, 6, 8])"
    ],
    "sample_403": [
        "minimumRightShifts([4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts([4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts([4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts([4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts([4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts([4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts([4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts(nums = [1, 3, 5, 7])",
        "minimumRightShifts(nums = [1, 3, 5, 7])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])"
    ],
    "sample_167": [
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)"
    ],
    "sample_214": [
        "numberOfPoints([[1,2],[2,3],[3,4]])",
        "numberOfPoints([[1,2],[2,3],[3,4]])",
        "numberOfPoints([[1,2],[2,3],[3,4]])",
        "numberOfPoints([[1,2],[2,3],[3,4]])",
        "numberOfPoints([[1,2],[2,3],[3,4]])",
        "numberOfPoints([[1,2],[2,3],[3,4]])",
        "numberOfPoints([[1,2],[2,3],[3,4]])",
        "numberOfPoints([[1,2],[2,3],[3,4]])",
        "numberOfPoints([[1,2], [2,3], [4,5]])",
        "numberOfPoints([[1,2], [2,3], [4,5]])"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy, problem\", \"another, easy\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easy, problem\", \"another, easy\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easy, problem\", \"another, easy\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easy, problem\", \"another, easy\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easy,problem\", \"hard,harder\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easy,problem\", \"hard,harder\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easy, problem\", \"another, easy\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easy, problem\", \"another, easy\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easy,problem\", \"this,is,a,test\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easy, problem\", \"difficult, hard\"], separator = \",\")"
    ],
    "sample_216": [
        "numberOfPoints([[1, 5], [2, 4], [3, 6]])",
        "numberOfPoints([[1, 5], [2, 4], [3, 6]])",
        "numberOfPoints([[1, 5], [2, 4], [3, 6]])",
        "numberOfPoints([[1, 5], [2, 4], [3, 6]])",
        "numberOfPoints([[1, 5], [2, 4], [3, 6]])",
        "numberOfPoints([[1, 5], [2, 4], [3, 6]])",
        "numberOfPoints([[1, 5], [2, 4], [3, 6]])",
        "numberOfPoints([[1, 5], [2, 4], [3, 6]])",
        "numberOfPoints([[1, 5], [2, 4], [3, 6]])",
        "numberOfPoints(nums = [[1, 5], [3, 7], [4, 6]])"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 1, 1, 1])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"hello\", \"world\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello\", \"world\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello\", \"world\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello\", \"world\", \"how\", \"are\", \"you\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello\", \"world\", \"how\", \"are\", \"you\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello\", \"world\", \"how\", \"are\", \"you\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \"-\")"
    ],
    "sample_129": [
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups(my_list = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 3, 2, 4, 5])"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 2)"
    ],
    "sample_152": [
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 8)"
    ],
    "sample_169": [
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], s = \"NASA\")"
    ],
    "sample_121": [
        "minimumIndex([1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex([1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex([1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex([1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex([1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex([1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex([1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex([1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex(nums = [1,2,3,4,5,6,7,8,9,10])"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 4, 1], [3, 2, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 4, 1], [3, 2, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 4, 1], [3, 2, 5], [4, 5, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 4, 1], [3, 2, 5], [4, 5, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 4, 1], [3, 2, 5], [4, 5, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,5],[2,3,10],[3,4,15],[4,5,20],[5,6,25]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 4, 1], [3, 2, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 3, 1], [3, 2, 1], [4, 1, 2], [5, 2, 3]])",
        "maximizeTheProfit(n = 5, offers = [[1, 5, 10], [2, 3, 6], [4, 7, 8], [10, 12, 15], [11, 13, 17]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 4, 1], [3, 2, 5], [4, 3, 1], [5, 1, 2]])"
    ],
    "sample_238": [
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"RL_\")",
        "furthestDistanceFromOrigin(moves = \"RL_\")",
        "furthestDistanceFromOrigin(moves = \"LL_L_R\")",
        "furthestDistanceFromOrigin(moves = \"LL_L_R\")",
        "furthestDistanceFromOrigin(moves = \"LR_\")",
        "furthestDistanceFromOrigin(moves = \"RLRL_\")",
        "furthestDistanceFromOrigin(moves = \"RLRL_\")",
        "furthestDistanceFromOrigin(moves = \"RLRL_\")",
        "furthestDistanceFromOrigin(moves = \"RL_\")",
        "furthestDistanceFromOrigin(moves = \"LL_LRLR\")"
    ],
    "sample_149": [
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(my_string = \"hello\")"
    ],
    "sample_162": [
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_230": [
        "countWays([1, 2, 3, 4, 5])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays([1, 2, 3])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 5, target = 5)",
        "minimumPossibleSum(n = 5, target = 5)",
        "minimumPossibleSum(n = 5, target = 5)",
        "minimumPossibleSum(n = 5, target = 5)",
        "minimumPossibleSum(n = 5, target = 5)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 5)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 5, offers = [[1, 2, 1], [2, 3, 1], [3, 4, 1], [4, 5, 1], [1, 5, 2]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 1], [2, 3, 1], [3, 4, 1], [4, 5, 1], [1, 5, 2]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 1], [2, 3, 1], [3, 4, 1], [4, 5, 1], [1, 5, 2]])",
        "maximizeTheProfit(my_list = [1, 2, 3, 4, 5])",
        "maximizeTheProfit(my_list = [1, 2, 3, 4, 5])",
        "maximizeTheProfit(my_list = [1, 2, 3, 4, 5])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 1], [2, 3, 1], [3, 4, 1], [4, 5, 1], [1, 5, 2]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 1], [2, 3, 1], [3, 4, 1], [4, 5, 1], [1, 5, 2]])",
        "maximizeTheProfit(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maximizeTheProfit(my_list = [[1, 2, 1], [2, 3, 1], [3, 4, 1], [4, 5, 1], [5, 6, 1], [6, 7, 1], [7, 8, 1], [8, 9, 1], [9, 10, 1], [10, 11, 1], [11, 12, 1], [12, 13, 1], [13, 14, 1], [14, 15, 1], [15, 16, 1], [16, 17, 1], [17, 18, 1], [18, 19, 1], [19, 20, 1], [20, 21, 1], [21, 22, 1], [22, 23, 1], [23, 24, 1], [24, 25, 1], [25, 26, 1], [26, 27, 1], [27, 28, 1], [28, 29, 1], [29, 30, 1], [30, 31, 1], [31, 32, 1], [32, 33, 1], [33, 34, 1], [34, 35, 1], [35, 36, 1], [36, 37, 1], [37, 38, 1], [38, 39, 1], [39, 40, 1], [40, 41, 1], [41, 42, 1], [42, 43, 1], [43, 44, 1], [44, 45, 1], [45, 46, 1], [46, 47, 1], [47, 48, 1], [48, 49, 1], [49, 50, 1], [50, 51, 1], [51, 52, 1], [52, 53, 1], [53, 54, 1], [54, 55, 1], [55, 56, 1], [56, 57, 1], [57, 58, 1], [58, 59, 1], [59, 60, 1], [60, 61, 1], [61, 62, 1], [62, 63, 1], [63, 64, 1], [64, 65, 1], [65, 66, 1], [66, 67, 1], [67, 68, 1], [68, 69, 1], [69, 70, 1], [70, 71, 1], [71, 72, 1], [72, 73, 1], [73, 74, 1], [74, 75, 1], [75, 76, 1], [76, 77, 1], [77"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [1, 2, 3], [2, 3, 1], [3, 4, 2], [4, 5, 1]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [1, 2, 3], [2, 3, 1], [3, 4, 2], [4, 5, 1]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [1, 2, 3], [2, 3, 1], [3, 4, 2], [4, 5, 1]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [1, 2, 3], [2, 3, 1], [3, 4, 2], [4, 5, 1]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [1, 2, 3], [2, 3, 1], [3, 4, 2], [4, 5, 1]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [1, 2, 3], [2, 3, 1], [3, 4, 2], [4, 5, 1]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [1, 2, 3], [2, 3, 1], [3, 4, 2], [4, 5, 1]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [1, 2, 3], [2, 3, 1], [3, 4, 2], [4, 5, 1]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [1, 2, 3], [2, 3, 1], [3, 4, 2], [4, 5, 3]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [1, 2, 3], [2, 3, 1], [3, 4, 2], [4, 5, 3]])"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,2,3,1])",
        "countCompleteSubarrays([1,2,3,1])",
        "countCompleteSubarrays([1,2,3,1])",
        "countCompleteSubarrays([1,2,3,1])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,4])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,4])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,4])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,4,5,1,2,3,1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,4,5,1,2,3,1,2,3,4,5])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_132": [
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])"
    ],
    "sample_173": [
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1])",
        "countCompleteSubarrays([1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 4, 5, 4, 5])"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 5)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 5)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 5)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 5)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 5)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 5)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 5)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 5)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 5)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 5)"
    ],
    "sample_170": [
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], s = \"NASA\")"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"010\")",
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"010\")",
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"010\")",
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"010\")",
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"010\")",
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"010\")",
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"010\")",
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"010\")",
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"010\")",
        "maximumOddBinaryNumber(s1 = \"1010101\", s2 = \"1101010\")"
    ],
    "sample_226": [
        "countWays([1, 2, 3, 4, 5])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays([1, 2, 3, 4, 5])"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 1], [3, 4, 2], [4, 5, 3], [5, 6, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 1], [3, 4, 2], [4, 5, 3], [5, 6, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 1], [3, 4, 2], [4, 5, 3], [5, 6, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 1], [3, 4, 2], [4, 5, 3], [5, 6, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 1], [3, 4, 2], [4, 5, 3], [5, 6, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 1], [3, 4, 2], [4, 5, 3], [5, 6, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 1], [3, 4, 2], [4, 5, 3], [5, 6, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 1], [3, 4, 2], [4, 5, 3], [5, 6, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 1], [3, 4, 2], [4, 5, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 10], [3, 4, 15], [4, 5, 20], [5, 6, 25]])"
    ],
    "sample_122": [
        "minimumIndex([1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex([1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex([1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex([1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex([1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex([1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex([1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex([1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex([1,2,3,4,5])",
        "minimumIndex([1,2,3,4,5])"
    ],
    "sample_215": [
        "numberOfPoints([[1,2],[2,3],[3,4]])",
        "numberOfPoints([[1,2], [2,3], [4,5]])",
        "numberOfPoints([[1,2], [2,3], [4,5]])",
        "numberOfPoints([[1,2], [2,3], [3,4], [4,5], [5,6], [6,7], [7,8], [8,9], [9,10], [10,11], [11,12], [12,13], [13,14], [14,15], [15,16], [16,17], [17,18], [18,19], [19,20], [20,21], [21,22], [22,23], [23,24], [24,25], [25,26], [26,27], [27,28], [28,29], [29,30], [30,31], [31,32], [32,33], [33,34], [34,35], [35,36], [36,37], [37,38], [38,39], [39,40], [40,41], [41,42], [42,43], [43,44], [44,45], [45,46], [46,47], [47,48], [48,49], [49,50], [50,51], [51,52], [52,53], [53,54], [54,55], [55,56], [56,57], [57,58], [58,59], [59,60], [60,61], [61,62], [62,63], [63,64], [64,65], [65,66], [66,67], [67,68], [68,69], [69,70], [70,71], [71,72], [72,73], [73,74], [74,75], [75,76], [76,77], [77,78], [78,79], [79,80], [80,81], [81,82], [82,83], [83,84], [84,85], [85,86], [86,87], [87,88], [88,89], [89,90], [90,91], [91,92], [92,93], [93,94], [94,95], [95,96], [96,97], [97,98], [98,99], [99,100]])",
        "numberOfPoints([[1,2], [2,3], [3,4], [4,5], [5,6], [6,7], [7,8], [8,9], [9,10], [10,11], [11,12], [12,13], [13,14], [14,15], [15,16], [16,17], [17,18], [18,19], [19,20], [20,21], [21,22], [22,23], [23,24], [24,25], [25,26], [26,27], [27,28], [28,29], [29,30], [30,31], [31,32], [32,33], [33,34], [34,35], [35,36], [36,37], [37,38], [38,39], [39,40], [40,41], [41,42], [42,43], [43,44], [44,45], [45,46], [46,47], [47,48], [48,49], [49,50], [50,51], [51,52], [52,53], [53,54], [54,55], [55,56], [56,57], [57,58], [58,59], [59,60], [60,61], [61,62], [62,63], [63,64], [64,65], [65,66], [66,67], [67,68], [68,69], [69,70], [70,71], [71,72], [72,73], [73,74], [74,75], [75,76], [76,77], [77,78], [78,79], [79,80], [80,81], [81,82], [82,83], [83,84], [84,85], [85,86], [86,87], [87,88], [88,89], [89,90], [90,91], [91,92], [92,93], [93,94], [94,95], [95,96], [96,97], [97,98], [98,99], [99,100]])",
        "numberOfPoints([[1,2], [2,3], [3,4], [4,5], [5,6], [6,7], [7,8], [8,9], [9,10], [10,11], [11,12], [12,13], [13,14], [14,15], [15,16], [16,17], [17,18], [18,19], [19,20], [20,21], [21,22], [22,23], [23,24], [24,25], [25,26], [26,27], [27,28], [28,29], [29,30], [30,31], [31,32], [32,33], [33,34], [34,35], [35,36], [36,37], [37,38], [38,39], [39,40], [40,41], [41,42], [42,43], [43,44], [44,45], [45,46], [46,47], [47,48], [48,49], [49,50], [50,51], [51,52], [52,53], [53,54], [54,55], [55,56], [56,57], [57,58], [58,59], [59,60], [60,61], [61,62], [62,63], [63,64], [64,65], [65,66], [66,67], [67,68], [68,69], [69,70], [70,71], [71,72], [72,73], [73,74], [74,75], [75,76], [76,77], [77,78], [78,79], [79,80], [80,81], [81,82], [82,83], [83,84], [84,85], [85,86], [86,87], [87,88], [88,89], [89,90], [90,91], [91,92], [92,93], [93,94], [94,95], [95,96], [96,97], [97,98], [98,99], [99,100]])",
        "numberOfPoints([[1,2], [2,3], [3,4], [4,5], [5,6], [6,7], [7,8], [8,9], [9,10], [10,11], [11,12], [12,13], [13,14], [14,15], [15,16], [16,17], [17,18], [18,19], [19,20], [20,21], [21,22], [22,23], [23,24], [24,25], [25,26], [26,27], [27,28], [28,29], [29,30], [30,31], [31,32], [32,33], [33,34], [34,35], [35,36], [36,37], [37,38], [38,39], [39,40], [40,41], [41,42], [42,43], [43,44], [44,45], [45,46], [46,47], [47,48], [48,49], [49,50], [50,51], [51,52], [52,53], [53,54], [54,55], [55,56], [56,57], [57,58], [58,59], [59,60], [60,61], [61,62], [62,63], [63,64], [64,65], [65,66], [66,67], [67,68], [68,69], [69,70], [70,71], [71,72], [72,73], [73,74], [74,75], [75,76], [76,77], [77,78], [78,79], [79,80], [80,81], [81,82], [82,83], [83,84], [84,85], [85,86], [86,87], [87,88], [88,89], [89,90], [90,91], [91,92], [92,93], [93,94], [94,95], [95,96], [96,97], [97,98], [98,99], [99,100]])",
        "numberOfPoints([[1,2], [2,3], [3,4]])",
        "numberOfPoints([[1,2], [2,3], [3,4]])",
        "numberOfPoints([[1,2], [5,6], [3,4]])"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"hello world\", \"how are you\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello world\", \"how are you\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello world\", \"how are you\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello world\", \"how are you\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello world\", \"how are you\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello world\", \"how are you\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello world\", \"how are you\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello world\", \"how are you\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello world\", \"how are you\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello world\", \"how are you\"], separator = \" \")"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 5, target = 3)",
        "minimumPossibleSum(n = 5, target = 3)",
        "minimumPossibleSum(n = 5, target = 3)",
        "minimumPossibleSum(n = 5, target = 3)",
        "minimumPossibleSum(n = 5, target = 3)",
        "minimumPossibleSum(n = 5, target = 3)",
        "minimumPossibleSum(n = 5, target = 3)",
        "minimumPossibleSum(n = 5, target = 3)",
        "minimumPossibleSum(n = 5, target = 3)",
        "minimumPossibleSum(n = 5, target = 10)"
    ],
    "sample_219": [
        "numberOfPoints([[1, 5], [2, 4], [3, 6]])",
        "numberOfPoints([[1, 5], [2, 4], [3, 6]])",
        "numberOfPoints([[1, 5], [2, 4], [3, 6]])",
        "numberOfPoints([[1, 5], [2, 4], [3, 6]])",
        "numberOfPoints([[1, 5], [2, 4], [3, 6]])",
        "numberOfPoints([[1, 5], [2, 4], [3, 6]])",
        "numberOfPoints([[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints([[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints([[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[1, 5], [3, 7], [4, 6]])"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)"
    ],
    "sample_203": [
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 10, k = 3)"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1, 2, 3, 4, 5], K = 1)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5], K = 1)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5], K = 1)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5], K = 1)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5], K = 1)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5], K = 1)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5], K = 1)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5], K = 1)",
        "longestEqualSubarray(A = [1,2,3,4,5], K = 1)",
        "longestEqualSubarray(A = [1,2,3,2,1], K = 2)"
    ],
    "sample_146": [
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"banana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"banana\")"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)"
    ],
    "sample_218": [
        "numberOfPoints([[1, 5], [2, 4], [3, 6]])",
        "numberOfPoints([[1, 5], [2, 4], [3, 6]])",
        "numberOfPoints([[1, 5], [2, 4], [3, 6]])",
        "numberOfPoints([[1, 5], [2, 4], [3, 6]])",
        "numberOfPoints([[1, 5], [2, 4], [3, 6]])",
        "numberOfPoints([[1, 5], [2, 4], [3, 6]])",
        "numberOfPoints([[1, 5], [2, 4], [3, 6]])",
        "numberOfPoints([[1, 5], [2, 4], [3, 6]])",
        "numberOfPoints([[1, 3], [2, 4], [5, 7], [6, 8]])",
        "numberOfPoints([[1, 3], [2, 4], [5, 7], [6, 8]])"
    ],
    "sample_130": [
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 5, offers = [[1,2,3],[2,3,1],[3,4,2],[4,5,3],[5,1,4]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,3],[2,3,1],[3,4,2],[4,5,3],[5,1,4]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,3],[2,3,1],[3,4,2],[4,5,3],[5,1,4]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,3],[2,3,1],[3,4,2],[4,5,3],[5,1,4]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,3],[2,3,1],[3,4,2],[4,5,3],[5,1,4]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,3],[2,3,1],[3,4,2],[4,5,3],[5,1,4]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,3],[2,3,1],[3,4,2],[4,5,3],[5,1,4]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,2],[2,3,1],[3,4,2],[4,5,1]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,1],[2,3,1],[3,4,1]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,2],[2,3,3],[3,4,1]])"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"RL_\")",
        "furthestDistanceFromOrigin(moves = \"RL_\")",
        "furthestDistanceFromOrigin(moves = \"RL_\")",
        "furthestDistanceFromOrigin(moves = \"RL_\")",
        "furthestDistanceFromOrigin(moves = \"RL_\")",
        "furthestDistanceFromOrigin(moves = \"RL_\")",
        "furthestDistanceFromOrigin(moves = \"RL_\")",
        "furthestDistanceFromOrigin(moves = \"RL_\")",
        "furthestDistanceFromOrigin(moves = \"RL_\")",
        "furthestDistanceFromOrigin(moves = \"LL_L_R\")"
    ],
    "sample_175": [
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)"
    ],
    "sample_217": [
        "numberOfPoints([[1,2],[2,3],[3,4]])",
        "numberOfPoints([[1,2],[2,3],[3,4]])",
        "numberOfPoints([[1,2],[2,3],[3,4]])",
        "numberOfPoints([[1,2],[2,3],[3,4]])",
        "numberOfPoints([[1,2],[2,3],[3,4]])",
        "numberOfPoints([[1,2],[2,3],[3,4]])",
        "numberOfPoints([[1,2],[2,3],[3,4]])",
        "numberOfPoints([[1,2],[2,3],[3,4]])",
        "numberOfPoints([[1,2],[2,3],[3,4]])",
        "numberOfPoints([[1,2],[2,3],[3,4]])"
    ],
    "sample_205": [
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"1203\")",
        "minimumOperations(num = \"120345\")",
        "minimumOperations(num = \"1203\")"
    ],
    "sample_120": [
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex([1, 2, 3, 4, 5])",
        "minimumIndex([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"LL_L_R\")",
        "furthestDistanceFromOrigin(moves = \"LL_L_R\")",
        "furthestDistanceFromOrigin(moves = \"LL_L_R\")",
        "furthestDistanceFromOrigin(moves = \"LL_L_R\")",
        "furthestDistanceFromOrigin(moves = \"LL_L_R\")",
        "furthestDistanceFromOrigin(moves = \"LL_L_R_\")",
        "furthestDistanceFromOrigin(moves = \"LL_L_R_\")",
        "furthestDistanceFromOrigin(moves = \"LR_\")",
        "furthestDistanceFromOrigin(moves = \"LR_\")",
        "furthestDistanceFromOrigin(moves = \"LR_L_\")"
    ],
    "sample_161": [
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])"
    ],
    "sample_160": [
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = [\"apple,banana,orange\", \"grape,kiwi\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple,banana,orange\", \"grape,kiwi\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple,banana,orange\", \"grape,kiwi\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"ba\", \"nana\", \"apple\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"ba\", \"nana\", \"apple\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"ba\", \"nana\", \"apple\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"apple,banana,orange\", \"grape,kiwi,pineapple\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple,banana,orange\", \"grape,kiwi,pineapple\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple,banana,orange\", \"grape,kiwi,pineapple\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"ba\", \"nana\", \"apple\"], separator = \"a\")"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 6, 5, 4, 3, 2, 1], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 6, 5, 4, 3, 2, 1], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 9, 6], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 9, 6], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 9, 6], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 9, 6], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 9, 6], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 9, 6], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 9, 6, 8], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 9, 6, 8], target = 8)"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 9, 6], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 9, 6], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 9, 6], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 9, 6], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 9, 6], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 9, 6], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 9, 6], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 9, 6], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 9, 8], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 9, 8], target = 8)"
    ],
    "sample_171": [
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)"
    ],
    "sample_159": [
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])"
    ],
    "sample_157": [
        "canSplitArray([1, 2, 3, 4, 5], 5)",
        "canSplitArray([1, 2, 3, 4, 5], 5)",
        "canSplitArray([1, 2, 3, 4, 5], 5)",
        "canSplitArray([1, 2, 3, 4, 5], 5)",
        "canSplitArray([1, 2, 3, 4, 5], 5)",
        "canSplitArray([1, 2, 3, 4, 5], 5)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"hello world\", \"how are you\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello world\", \"how are you\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello world\", \"how are you\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello world\", \"how are you\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello world\", \"how are you\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello world\", \"how are you\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello world\", \"how are you\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello world\", \"how are you\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello world\", \"how are you\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"banana\", \"apple,orange\", \"grape\"], separator = \",\")"
    ],
    "sample_172": [
        "minimumSum(n=5, k=10)",
        "minimumSum(n=5, k=10)",
        "minimumSum(n=5, k=10)",
        "minimumSum(n=5, k=10)",
        "minimumSum(n=5, k=10)",
        "minimumSum(n=5, k=3)",
        "minimumSum(n=5, k=7)",
        "minimumSum(n=5, k=7)",
        "minimumSum(n=5, k=7)",
        "minimumSum(n=5, k=7)"
    ],
    "sample_228": [
        "countWays([1,2,3,4,5])",
        "countWays([1,2,3,4,5])",
        "countWays([1,2,3,4,5])",
        "countWays([1,2,3,4,5])",
        "countWays([1,2,3,4,5])",
        "countWays([1,2,3,4,5])",
        "countWays([1,2,3,4,5])",
        "countWays([0,1,2,3,4])",
        "countWays(nums = [1,2,3,4,5])",
        "countWays(nums = [1,2,3,4,5])"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"110\")",
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"110\")",
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"110\")",
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"110\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"111\")",
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"111\")"
    ],
    "sample_119": [
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex([1, 2, 3, 4, 5])",
        "minimumIndex([1, 2, 3, 4, 5])",
        "minimumIndex([1, 2, 3, 4, 5])",
        "minimumIndex(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_153": [
        "canSplitArray([1,2,3,4,5], 3)",
        "canSplitArray([1,2,3,4,5], 3)",
        "canSplitArray([1,2,3,4,5], 3)",
        "canSplitArray([1,2,3,4,5], 3)",
        "canSplitArray([1,2,3,4,5], 3)",
        "canSplitArray([1,2,3,4,5], 3)",
        "canSplitArray([1,2,3,4,5], 3)",
        "canSplitArray([1,2,3,4,5], 3)",
        "canSplitArray([1,2,3,4,5], 2)",
        "canSplitArray([1,2,3,4,5], 2)"
    ],
    "sample_147": [
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(\"hello\")",
        "finalString(\"hello\")",
        "finalString(s1 = \"banana\")"
    ],
    "sample_174": [
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 10, k = 7)"
    ],
    "sample_154": [
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1,2,3,4,5], 5)",
        "canSplitArray([1,2,3,4,5], 6)",
        "canSplitArray([1,2,3,4,5], 6)",
        "canSplitArray([1,2,3,4,5], 6)",
        "canSplitArray([1,2,3,4,5], 6)",
        "canSplitArray([1,2,3,4,5], 6)",
        "canSplitArray([1, 2, 3, 4, 5], 6)"
    ],
    "sample_142": [
        "countCompleteSubarrays([1, 2, 3, 1])",
        "countCompleteSubarrays([1, 2, 3, 1])",
        "countCompleteSubarrays([1, 2, 3, 1])",
        "countCompleteSubarrays([1, 2, 3, 1])",
        "countCompleteSubarrays([1,2,3,1])",
        "countCompleteSubarrays([1,2,3,1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1])",
        "countCompleteSubarrays([1,2,3,1,2,1,2,3])",
        "countCompleteSubarrays([1, 2, 3, 1, 2, 3, 4])",
        "countCompleteSubarrays([1,2,3,1,2,1,2,3])"
    ],
    "sample_150": [
        "finalString(\"hello\")",
        "finalString(\"hello\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"banana\")",
        "finalString(s1 = \"banana\", s2 = \"ni\")",
        "finalString(s1 = \"banana\", s2 = \"ni\")",
        "finalString(s1 = \"banana\")",
        "finalString(s1 = \"banana\")"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)"
    ],
    "sample_176": [
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 2)"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits([1, 2, 3, 4, 5], 2)",
        "sumIndicesWithKSetBits(my_list = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(my_list = [1, 2, 3, 4, 5], k = 3)"
    ],
    "sample_151": [
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"hello\", s2 = \"world\")"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)"
    ],
    "sample_133": [
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])"
    ],
    "sample_204": [
        "minimumOperations(s1 = \"00\", s2 = \"25\")",
        "minimumOperations(s1 = \"00\", s2 = \"25\")",
        "minimumOperations(s1 = \"00\", s2 = \"25\")",
        "minimumOperations(s = \"0011001\")",
        "minimumOperations(s = \"0011001\")",
        "minimumOperations(s = \"0011001\")",
        "minimumOperations(s = \"0011\")",
        "minimumOperations(s = \"00110101\")",
        "minimumOperations(s = \"0011\")",
        "minimumOperations(s = \"0011101\")"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)"
    ],
    "sample_148": [
        "finalString(s1 = \"banana\")",
        "finalString(s1 = \"banana\")",
        "finalString(s1 = \"banana\")",
        "finalString(s1 = \"banana\")",
        "finalString(s1 = \"banana\")",
        "finalString(s1 = \"banana\")",
        "finalString(s1 = \"banana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"banana\")"
    ],
    "sample_168": [
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"Apple\", \"Banana\", \"Cat\"], s = \"ABC\")",
        "isAcronym(words = [\"Apple\", \"Banana\", \"Cat\"], s = \"ABC\")",
        "isAcronym(words = [\"Apple\", \"Banana\", \"Cat\"], s = \"ABC\")"
    ],
    "sample_201": [
        "minOperations([1,2,4,8], 15)",
        "minOperations([1,2,4,8], 15)",
        "minOperations([1,2,4,8], 15)",
        "minOperations([1,2,4,8], 15)",
        "minOperations([1,2,4,8], 15)",
        "minOperations([1,2,4,8], 15)",
        "minOperations([1,2,4,8], 15)",
        "minOperations([1,2,4,8,16], 5)",
        "minOperations([1,2,4,8,16], 5)",
        "minOperations([1,2,4,8,16,32,64,128], 10)"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s1 = \"101\")",
        "maximumOddBinaryNumber(s1 = \"101\")",
        "maximumOddBinaryNumber(s1 = \"101\")",
        "maximumOddBinaryNumber(s1 = \"101\")",
        "maximumOddBinaryNumber(s1 = \"101\")",
        "maximumOddBinaryNumber(s1 = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s1 = \"1010101010\")"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"1010101\")",
        "maximumOddBinaryNumber(s = \"1010101\")",
        "maximumOddBinaryNumber(s = \"1010101\")",
        "maximumOddBinaryNumber(s = \"1010101\")",
        "maximumOddBinaryNumber(s = \"1010101\")",
        "maximumOddBinaryNumber(s = \"1010101\")",
        "maximumOddBinaryNumber(s = \"1010101\")"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 5, target = 8)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 5, target = 15)",
        "minimumPossibleSum(n = 3, target = 10)"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 5, target = 7)",
        "minimumPossibleSum(n = 5, target = 7)",
        "minimumPossibleSum(n = 5, target = 7)",
        "minimumPossibleSum(n = 5, target = 7)",
        "minimumPossibleSum(n = 5, target = 7)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)"
    ],
    "sample_231": [
        "countWays([0, 1, 2, 3, 4, 5])",
        "countWays([0, 1, 2, 3, 4, 5])",
        "countWays([0, 1, 2, 3, 4, 5])",
        "countWays([0, 1, 2, 3, 4, 5])",
        "countWays([0, 1, 2, 3, 4, 5])",
        "countWays([0, 1, 2, 3, 4, 5])",
        "countWays([0, 1, 2, 3, 4, 5])",
        "countWays([0, 1, 2, 3, 4, 5])",
        "countWays([0, 1, 2, 3, 4, 5])",
        "countWays([1, 2, 3, 4, 5])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"LL_L_R_R_L\")",
        "furthestDistanceFromOrigin(moves = \"LL_L_R_R_L\")",
        "furthestDistanceFromOrigin(moves = \"LL_L_R_R_L\")",
        "furthestDistanceFromOrigin(moves = \"LL_L_R_R_L\")",
        "furthestDistanceFromOrigin(moves = \"LL_L_R_R_L\")",
        "furthestDistanceFromOrigin(moves = \"LL_L_RR_R\")",
        "furthestDistanceFromOrigin(moves = \"LL_L_RRR_R\")",
        "furthestDistanceFromOrigin(moves = \"LL_L_RRR_\")",
        "furthestDistanceFromOrigin(moves = \"LL_L_RRR_R_LL\")",
        "furthestDistanceFromOrigin(moves = \"LL_LRRR_R_RLL\")"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 1, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 5)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 1, target = 3)"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 4, 5, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1])"
    ],
    "sample_156": [
        "canSplitArray([1, 2, 3, 4, 5], 5)",
        "canSplitArray([1, 2, 3, 4, 5], 5)",
        "canSplitArray([1, 2, 3, 4, 5], 5)",
        "canSplitArray([1, 2, 3, 4, 5], 5)",
        "canSplitArray([1, 2, 3, 4, 5], 5)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)"
    ],
    "sample_200": [
        "minOperations([1, 2, 3, 4, 5], 7)",
        "minOperations([1, 2, 3, 4, 5], 7)",
        "minOperations([1, 2, 3, 4, 5], 7)",
        "minOperations([1, 2, 3, 4, 5], 7)",
        "minOperations([1, 2, 3, 4, 5], 7)",
        "minOperations([1, 2, 3, 4, 5], 7)",
        "minOperations([1, 2, 3, 4, 5], 7)",
        "minOperations([1, 2, 3, 4, 5], 7)",
        "minOperations([1, 2, 3, 4, 5], 7)",
        "minOperations([1, 2, 3, 4, 5], 8)"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)"
    ],
    "sample_165": [
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")"
    ],
    "sample_227": [
        "countWays([-3, 0, 3])",
        "countWays([-3, 0, 3])",
        "countWays([-3, 0, 3])",
        "countWays([-3, 0, 3])",
        "countWays([-3, 0, 3])",
        "countWays([-3, 0, 3])",
        "countWays([-3, 0, 3])",
        "countWays([-3, 0, 3])",
        "countWays([-3, 0, 3])",
        "countWays([-3, 0, 3])"
    ],
    "sample_158": [
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 2)"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 3, 20], [3, 4, 30], [4, 5, 40], [5, 0, 50]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 3, 20], [3, 4, 30], [4, 5, 40], [5, 0, 50]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 3, 20], [3, 4, 30], [4, 5, 40], [5, 0, 50]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 3, 20], [3, 4, 30], [4, 5, 40], [5, 0, 50]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 3, 20], [3, 4, 30], [4, 5, 40], [5, 0, 50]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 5, 20], [3, 4, 30], [4, 5, 40], [5, 6, 50]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 3, 20], [3, 4, 30], [4, 5, 40], [5, 6, 50]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 50], [2, 3, 30], [3, 4, 20], [4, 5, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 5, 1], [2, 3, 1], [5, 2, 1], [10, 1, 1], [11, 1, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 3, 20], [3, 4, 30], [4, 5, 40], [5, 6, 50]])"
    ],
    "sample_131": [
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)"
    ],
    "sample_207": [
        "minimumOperations(num = \"1234\")",
        "minimumOperations(num = \"1234\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"0011\")",
        "minimumOperations(num = \"0011\")",
        "minimumOperations(num = \"0011\")",
        "minimumOperations(num = \"0011\")",
        "minimumOperations(num = \"1234\")"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")"
    ],
    "sample_206": [
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")"
    ],
    "sample_155": [
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 4])",
        "countCompleteSubarrays([1, 2, 3, 1])"
    ],
    "sample_202": [
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"0011\")"
    ],
    "sample_128": [
        "splitWordsBySeparator(my_list = [\"hello world\", \"how are you\"], \" \")",
        "splitWordsBySeparator(my_list = [\"hello world\", \"how are you\"], \" \")",
        "splitWordsBySeparator(my_list = [\"hello world\", \"how are you\"], \" \")",
        "splitWordsBySeparator(my_list = [\"mq\", \"px\", \"zy\"], b = \"x\")",
        "splitWordsBySeparator(my_list = [\"mq\", \"px\", \"zy\"], b = \"x\")",
        "splitWordsBySeparator(my_list = [\"mq\", \"px\", \"zy\"], b = \"x\")",
        "splitWordsBySeparator(my_list = [\"mq\", \"px\", \"zy\"], b = \"x\")",
        "splitWordsBySeparator(my_list = [\"apple,banana,orange\", \"grape,kiwi\"], \",\")",
        "splitWordsBySeparator(my_list = [\"mq\", \"px\", \"zy\"], b = \"p\")",
        "splitWordsBySeparator(my_list = [\"hello world\", \"how are you\"], sep = \" \")"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"1010101\")",
        "maximumOddBinaryNumber(s = \"1010101\")",
        "maximumOddBinaryNumber(s = '101010101')",
        "maximumOddBinaryNumber(s = \"101010101\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 1)"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = \"1010101\")",
        "maximumOddBinaryNumber(s = \"1010101\")",
        "maximumOddBinaryNumber(s = \"1010101\")",
        "maximumOddBinaryNumber(s = \"1010101\")",
        "maximumOddBinaryNumber(s = \"1010101\")",
        "maximumOddBinaryNumber(s = \"1010101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"1010101\")",
        "maximumOddBinaryNumber(s = \"1010101\")",
        "maximumOddBinaryNumber(s = \"1010101\")"
    ],
    "sample_166": [
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], s = \"NASA\")"
    ],
    "sample_163": [
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])"
    ],
    "sample_94": [
        "continuousSubarrays([1,2,3,4,5])",
        "continuousSubarrays([1,2,3,4,5])",
        "continuousSubarrays([1,2,3,4,5])",
        "continuousSubarrays([1,2,3,4,5])",
        "continuousSubarrays([1,2,3,4,5])",
        "continuousSubarrays([1,2,3,4,5])",
        "continuousSubarrays([1,2,3,4,5])",
        "continuousSubarrays([1,2,3,4,5])",
        "continuousSubarrays([1, 2, 3, 4, 5])",
        "continuousSubarrays([1,2,3,4,5,6,7,8,9,10])"
    ],
    "sample_95": [
        "continuousSubarrays([1, 2, 3, 4, 5])",
        "continuousSubarrays([1, 2, 3, 4, 5])",
        "continuousSubarrays([1, 2, 3, 4, 5])",
        "continuousSubarrays([1, 2, 3, 4, 5])",
        "continuousSubarrays([1, 2, 3, 4, 5])",
        "continuousSubarrays([1, 2, 3, 4, 5])",
        "continuousSubarrays([1, 2, 3, 4, 5])",
        "continuousSubarrays([1, 2, 3, 4, 5])",
        "continuousSubarrays([1, 2, 3, 4, 5])",
        "continuousSubarrays([1, 2, 3, 4, 5])"
    ],
    "sample_8": [
        "colorTheArray(n = 5, queries = [[2, 1], [4, 3], [1, 2]])",
        "colorTheArray(n = 5, queries = [[2, 1], [4, 3], [1, 2]])",
        "colorTheArray(n = 5, queries = [[2, 1], [2, 2], [3, 1], [3, 2], [4, 1]])",
        "colorTheArray(n = 5, queries = [[2, 1], [2, 2], [3, 1]])",
        "colorTheArray(n = 5, queries = [[2, 1], [2, 2], [3, 1]])",
        "colorTheArray(n = 5, queries = [[2, 2], [1, 3], [2, 1], [3, 2]])",
        "colorTheArray(n = 5, queries = [[2, 2], [1, 3], [4, 2]])",
        "colorTheArray(n = 5, queries = [[2, 2], [3, 3], [4, 4], [2, 1], [1, 2]])",
        "colorTheArray(n = 5, queries = [[2, 1], [2, 2], [3, 1], [3, 2], [3, 3]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [0, 3], [0, 4]])"
    ],
    "sample_97": [
        "maximumJumps(nums = [1,2,3,4,5], target = 5)",
        "maximumJumps(nums = [1,2,3,4,5], target = 5)",
        "maximumJumps(nums = [1,2,3,4,5], target = 5)",
        "maximumJumps(nums = [1,2,3,4,5], target = 5)",
        "maximumJumps(nums = [1,2,3,4,5], target = 5)",
        "maximumJumps(nums = [1,2,3,4,5], target = 5)",
        "maximumJumps(nums = [1,2,3,4,5], target = 5)",
        "maximumJumps([1,2,3,4,5], 5)",
        "maximumJumps([1,2,3,4,5], 5)",
        "maximumJumps([1,2,3,4,5], 7)"
    ],
    "sample_22": [
        "minLength(\"abc\")",
        "minLength(\"abc\")",
        "minLength(\"abc\")",
        "minLength(\"abc\")",
        "minLength(\"abc\")",
        "minLength(\"abc\")",
        "minLength(\"abc\")",
        "minLength(\"abc\")",
        "minLength(\"abc\")",
        "minLength(\"abc\")"
    ],
    "sample_7": [
        "colorTheArray(n = 5, queries = [[2,1],[1,2],[3,4]])",
        "colorTheArray(n = 5, queries = [[2,1],[1,2],[3,4]])",
        "colorTheArray(n = 5, queries = [[2,1],[1,2],[3,4]])",
        "colorTheArray(n = 5, queries = [[2,1],[4,2]])",
        "colorTheArray(n = 5, queries = [[2,1],[3,2],[1,3],[4,3]])",
        "colorTheArray(n = 5, queries = [[2,1],[3,2],[1,3],[4,3]])",
        "colorTheArray(n = 5, queries = [[2,1],[4,3]])",
        "colorTheArray(n = 5, queries = [[2,1],[3,2],[1,3],[4,3]])",
        "colorTheArray(n = 5, queries = [[2,1],[3,2]])",
        "colorTheArray(n = 5, queries = [[2,1],[3,1],[4,0],[0,2],[1,3],[2,4]])"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [0, 4]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [0, 4]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [0, 4]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [0, 4]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [0, 4]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [0, 4]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [0, 4]])",
        "colorTheArray(n = 5, queries = [[0, 1], [2, 3], [0, 4]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [0, 4]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [0, 3]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(my_list = [1,2,3,4,5])",
        "semiOrderedPermutation(my_list = [1,2,3,4,5])",
        "semiOrderedPermutation(my_list = [1,2,3,4,5])",
        "semiOrderedPermutation(my_list = [1,2,3,4,5])",
        "semiOrderedPermutation(my_list = [1,2,3,4,5])",
        "semiOrderedPermutation(my_list = [1,2,3,4,5])",
        "semiOrderedPermutation(my_list = [1,2,3,4,5])",
        "semiOrderedPermutation(my_list = [1,2,3,4,5])",
        "semiOrderedPermutation(my_list = [1,2,3,4,5])",
        "semiOrderedPermutation(my_list = [2,3,1,4])"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 3)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 5)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5], 3)"
    ],
    "sample_33": [
        "removeTrailingZeros(num = \"120304050\")",
        "removeTrailingZeros(num = \"120304050\")",
        "removeTrailingZeros(num = \"120304050\")",
        "removeTrailingZeros(num = \"120304050\")",
        "removeTrailingZeros(num = \"120304050\")",
        "removeTrailingZeros(num = \"120304050\")",
        "removeTrailingZeros(num = \"0\")",
        "removeTrailingZeros(num = \"0000\")",
        "removeTrailingZeros(num = \"0000\")",
        "removeTrailingZeros(my_list = [\"101\", \"0\", \"111\", \"0\", \"10\"])"
    ],
    "sample_50": [
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s = \"a\")",
        "smallestString(s = \"a\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s = \"abc\")",
        "smallestString(s = \"ab\")"
    ],
    "sample_2": [
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)"
    ],
    "sample_118": [
        "minimumIndex([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56, 67, 78, 89, 90])",
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])"
    ],
    "sample_30": [
        "removeTrailingZeros(my_str = \"512301\")",
        "removeTrailingZeros(my_str = \"512301\")",
        "removeTrailingZeros(my_str = \"512301\")",
        "removeTrailingZeros(my_str = \"512301\")",
        "removeTrailingZeros(my_str = \"512301\")",
        "removeTrailingZeros(my_str = \"0.0005\")",
        "removeTrailingZeros(my_str = \"0.0005\")",
        "removeTrailingZeros(my_str = \"512301\")",
        "removeTrailingZeros(my_num = \"512301\")",
        "removeTrailingZeros(my_list = [\"0512301\", \"12301\", \"01\"])"
    ],
    "sample_43": [
        "minimizedStringLength(s1 = \"ba\", s2 = \"nana\")",
        "minimizedStringLength(s1 = \"ba\", s2 = \"nana\")",
        "minimizedStringLength(s1 = \"ba\", s2 = \"nana\")",
        "minimizedStringLength(s1 = \"ba\", s2 = \"nana\")",
        "minimizedStringLength(s1 = \"ba\", s2 = \"nana\")",
        "minimizedStringLength(s1 = \"ba\", s2 = \"nana\")",
        "minimizedStringLength(s1 = \"ba\", s2 = \"nana\")",
        "minimizedStringLength(s1 = \"ba\", s2 = \"nana\")",
        "minimizedStringLength(s1 = \"ba\", s2 = \"nana\")",
        "minimizedStringLength(s = \"aabbc\")"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = -1, num2 = -2)",
        "makeTheIntegerZero(num1 = -1, num2 = -2)",
        "makeTheIntegerZero(num1 = -1, num2 = -2)",
        "makeTheIntegerZero(num1 = -1, num2 = -2)",
        "makeTheIntegerZero(num1 = -1, num2 = -2)",
        "makeTheIntegerZero(num1 = 1, num2 = -1)",
        "makeTheIntegerZero(num1 = 1, num2 = -1)",
        "makeTheIntegerZero(num1 = 1, num2 = -1)",
        "makeTheIntegerZero(num1 = -1, num2 = 2)",
        "makeTheIntegerZero(num1 = -1, num2 = 2)"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 5, 3, 4, 2])",
        "findValueOfPartition(nums = [1, 5, 3, 4, 2])",
        "findValueOfPartition(nums = [1, 5, 3, 4, 2])",
        "findValueOfPartition(nums = [1, 5, 3, 4, 2])",
        "findValueOfPartition(nums = [1, 5, 3, 4, 2])",
        "findValueOfPartition(nums = [1, 5, 3, 4, 2])",
        "findValueOfPartition(nums = [1, 5, 3, 4, 2])",
        "findValueOfPartition(nums = [1, 5, 3, 4, 2])",
        "findValueOfPartition(nums = [1, 5, 3, 4])",
        "findValueOfPartition(nums = [1, 5, 3, 4])"
    ],
    "sample_59": [
        "distanceTraveled(main_tank = 10, additional_tank = 3)",
        "distanceTraveled(main_tank = 10, additional_tank = 3)",
        "distanceTraveled(main_tank = 10, additional_tank = 2)",
        "distanceTraveled(main_tank = 10, additional_tank = 2)",
        "distanceTraveled(main_tank = 10, additional_tank = 2)",
        "distanceTraveled(main_tank = 10, additional_tank = 2)",
        "distanceTraveled(main_tank = 5, additional_tank = 2)",
        "distanceTraveled(main_tank = 5, additional_tank = 2)",
        "distanceTraveled(main_tank = 5, additional_tank = 2)",
        "distanceTraveled(main_tank = 10, additional_tank = 3)"
    ],
    "sample_16": [
        "doesValidArrayExist([1, 0, 1, 1])",
        "doesValidArrayExist([1, 0, 1, 1])",
        "doesValidArrayExist([1, 0, 1, 1])",
        "doesValidArrayExist([1, 0, 1, 1])",
        "doesValidArrayExist([1, 0, 1, 1])",
        "doesValidArrayExist([1, 0, 1, 1])",
        "doesValidArrayExist([1, 0, 1, 1])",
        "doesValidArrayExist([1,0,1,0,1])",
        "doesValidArrayExist([1,0,1,0,1])",
        "doesValidArrayExist([1,0,1,0])"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"hello\")",
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")",
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"hello\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"hello\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"hello\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"hello\")"
    ],
    "sample_110": [
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)"
    ],
    "sample_13": [
        "doesValidArrayExist([0, 1, 0, 1])",
        "doesValidArrayExist([0, 1, 0, 1])",
        "doesValidArrayExist([0, 1, 0, 1])",
        "doesValidArrayExist([0, 1, 0, 1])",
        "doesValidArrayExist([0, 1, 0, 1])",
        "doesValidArrayExist([0, 1, 0, 1])",
        "doesValidArrayExist([1, 0, 1])",
        "doesValidArrayExist([1, 0, 1])",
        "doesValidArrayExist([1, 0, 1])",
        "doesValidArrayExist([0, 1, 0])"
    ],
    "sample_54": [
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(\"banana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")"
    ],
    "sample_93": [
        "continuousSubarrays([1, 2, 3, 4, 5])",
        "continuousSubarrays([1, 2, 3, 4, 5])",
        "continuousSubarrays([1, 2, 3, 4, 5])",
        "continuousSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays([1, 2, 3, 4, 5])",
        "continuousSubarrays([1, 2, 3, 2, 1])",
        "continuousSubarrays([1, 2, 3, 4, 5])",
        "continuousSubarrays([1, 2, 3, 4, 5])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"level\")"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 5, 10])",
        "findValueOfPartition(nums = [1, 5, 10])",
        "findValueOfPartition(nums = [1, 5, 10])",
        "findValueOfPartition(nums = [1, 5, 10])",
        "findValueOfPartition(nums = [1, 5, 10])",
        "findValueOfPartition(nums = [1, 5, 10])",
        "findValueOfPartition(nums = [1, 5, 10])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 5])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 5])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 5])"
    ],
    "sample_51": [
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString('a')",
        "smallestString('abcde')",
        "smallestString(s1 = \"abcde\", s2 = \"bcdef\")"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)"
    ],
    "sample_107": [
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 3)"
    ],
    "sample_61": [
        "distanceTraveled(main_tank = 10, additional_tank = 3)",
        "distanceTraveled(main_tank = 10, additional_tank = 3)",
        "distanceTraveled(main_tank = 10, additional_tank = 3)",
        "distanceTraveled(main_tank = 10, additional_tank = 3)",
        "distanceTraveled(main_tank = 10, additional_tank = 5)",
        "distanceTraveled(main_tank = 10, additional_tank = 5)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(main_tank = 10, additional_tank = 2)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(main_tank = 5, additional_tank = 2)"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_96": [
        "continuousSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_6": [
        "colorTheArray(n = 5, queries = [[0,1],[1,2],[2,3],[0,4]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,2],[2,3],[0,4]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,2],[2,3],[0,4]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,2],[2,3],[0,4]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,2],[2,3],[0,4]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,2],[2,3],[3,4]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,2],[2,3],[0,4]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,2],[2,3],[0,2],[3,4]])",
        "colorTheArray(n = 5, queries = [[2,1],[4,2],[1,3],[3,4]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,2],[3,3],[4,4],[1,2],[2,1],[3,4],[4,3]])"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 1, b = 2)",
        "makeTheIntegerZero(a = 1, b = 2)",
        "makeTheIntegerZero(a = 1, b = 2)",
        "makeTheIntegerZero(a = 1, b = 2)",
        "makeTheIntegerZero(a = 1, b = 2)",
        "makeTheIntegerZero(a = 1, b = 2)",
        "makeTheIntegerZero(a = 1, b = 2)",
        "makeTheIntegerZero(my_list = [2, 3, 4, 5])",
        "makeTheIntegerZero(my_list = [2, 3, 4, 5])",
        "makeTheIntegerZero(my_list = [1, 2, 3])"
    ],
    "sample_100": [
        "maximumJumps(nums = [1, 3, 5, 9], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 9], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 9], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 9, 10], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [1, 3, 5, 9, 10], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 8, 9], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 9, 11, 13], target = 2)"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 3)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 5)"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [5, 4, 3, 2, 1])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [5, 4, 3, 2, 1])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [5, 4, 3, 2, 1])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [5, 4, 3, 2, 1])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [5, 4, 3, 2, 1])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [5, 4, 3, 2, 1])",
        "maxNonDecreasingLength(a = [1, 2, 3], b = [3, 2, 1])",
        "maxNonDecreasingLength(a = [1, 2, 3], b = [3, 2, 1])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3], b = [1, 2, 3])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits([1,0,1,0,1])",
        "numberOfGoodSubarraySplits([1,0,1,0,1])",
        "numberOfGoodSubarraySplits([1,0,1,0,1])",
        "numberOfGoodSubarraySplits([1,0,1,0,1])",
        "numberOfGoodSubarraySplits([1,0,1,0,1])",
        "numberOfGoodSubarraySplits([1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits([1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits([1,1,0,0,0,1,1,1,0,1,1])",
        "numberOfGoodSubarraySplits([1,1,0,0,0,1,1,1,0,0,0,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
    ],
    "sample_90": [
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 5)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 5)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 5)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 5)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 5, 3, 4, 2])",
        "findValueOfPartition(nums = [1, 5, 3, 4, 2])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 5])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 5])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 5])",
        "findValueOfPartition(nums = [1, 5, 9, 12])",
        "findValueOfPartition(nums = [1, 3, 5, 7])",
        "findValueOfPartition(nums = [1, 3, 5, 7])",
        "findValueOfPartition(nums = [1, 3, 5, 7])",
        "findValueOfPartition(nums = [1, 3, 5, 7])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")"
    ],
    "sample_18": [
        "minLength(\"abcABC\")",
        "minLength(\"abcABC\")",
        "minLength(\"abcABC\")",
        "minLength(\"abcABC\")",
        "minLength(\"abcABC\")",
        "minLength(\"abcABC\")",
        "minLength(\"abcABC\")",
        "minLength(\"abcABC\")",
        "minLength(\"hello world\")",
        "minLength(\"hello world\")"
    ],
    "sample_99": [
        "maximumJumps([1, 2, 3, 4, 5], 2)",
        "maximumJumps([1, 2, 3, 4, 5], 2)",
        "maximumJumps([1, 2, 3, 4, 5], 2)",
        "maximumJumps([1, 2, 3, 4, 5], 2)",
        "maximumJumps([1, 2, 3, 4, 5], 2)",
        "maximumJumps([1, 2, 3, 4, 5], 2)",
        "maximumJumps([1, 2, 3, 4, 5], 2)",
        "maximumJumps([1, 2, 3, 4, 5], 2)",
        "maximumJumps([1, 2, 3, 4, 5], 2)",
        "maximumJumps([1, 2, 3, 4, 5], 2)"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[2, 2], [3, 4], [1, 3]])",
        "colorTheArray(n = 5, queries = [[2, 1], [4, 2], [3, 3]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 5], [3, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[2, 2], [3, 4], [1, 3]])",
        "colorTheArray(n = 5, queries = [[2, 1], [4, 3], [1, 2]])",
        "colorTheArray(n = 5, queries = [[2, 1], [3, 2], [1, 3], [4, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4]])"
    ],
    "sample_62": [
        "distanceTraveled(main_tank = 5, additional_tank = 2)",
        "distanceTraveled(main_tank = 5, additional_tank = 2)",
        "distanceTraveled(main_tank = 5, additional_tank = 2)",
        "distanceTraveled(main_tank = 10, additional_tank = 5)",
        "distanceTraveled(main_tank = 10, additional_tank = 5)",
        "distanceTraveled(main_tank = 10, additional_tank = 5)",
        "distanceTraveled(main_tank = 10, additional_tank = 5)",
        "distanceTraveled(main_tank = 10, additional_tank = 5)",
        "distanceTraveled(main_tank=5, additional_tank=2)",
        "distanceTraveled(main_tank = 5, additional_tank = 3)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3, 4, 5], x = 2)",
        "minCost(A = [1, 2, 3, 4, 5], x = 2)",
        "minCost(A = [1, 2, 3, 4, 5], x = 2)",
        "minCost(A = [1, 2, 3, 4, 5], x = 2)",
        "minCost(A = [1, 2, 3, 4, 5], x = 2)",
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3, 4, 5], x = 2)"
    ],
    "sample_98": [
        "maximumJumps([1,2,3,4,5], 2)",
        "maximumJumps([1,2,3,4,5], 2)",
        "maximumJumps([1,2,3,4,5], 2)",
        "maximumJumps([1,2,3,4,5], 2)",
        "maximumJumps([1,2,3,4,5], 2)",
        "maximumJumps(nums = [1,2,3,4,5], target = 3)",
        "maximumJumps(nums = [1,2,3,4,5], target = 3)",
        "maximumJumps(nums = [1,2,3,4,5], target = 3)",
        "maximumJumps(nums = [1,2,3,4,5], target = 2)",
        "maximumJumps(nums = [1,2,3,4,5], target = 3)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits([1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits([1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits([1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits([1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1])"
    ],
    "sample_1": [
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_42": [
        "minimizedStringLength(s1 = \"abc\", s2 = \"def\")",
        "minimizedStringLength(s1 = \"abc\", s2 = \"def\")",
        "minimizedStringLength(s1 = \"abc\", s2 = \"def\")",
        "minimizedStringLength(s1 = \"abc\", s2 = \"def\")",
        "minimizedStringLength(s1 = \"abc\", s2 = \"def\")",
        "minimizedStringLength(s1 = \"ba\", s2 = \"nana\")",
        "minimizedStringLength(s1 = \"ba\", s2 = \"nana\")",
        "minimizedStringLength(s1 = \"ba\", s2 = \"nana\")",
        "minimizedStringLength(s1 = \"ba\", s2 = \"nana\")",
        "minimizedStringLength(s1 = \"ba\", s2 = \"nana\")"
    ],
    "sample_41": [
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_15": [
        "doesValidArrayExist([1, 2, 3])",
        "doesValidArrayExist([1, 2, 3])",
        "doesValidArrayExist([1, 2, 3])",
        "doesValidArrayExist([1, 2, 3])",
        "doesValidArrayExist([1, 2, 3])",
        "doesValidArrayExist([1, 2, 3])",
        "doesValidArrayExist([1, 2, 3])",
        "doesValidArrayExist([1, 2, 3])",
        "doesValidArrayExist([1, 2, 3])",
        "doesValidArrayExist([1, 2, 3])"
    ],
    "sample_17": [
        "doesValidArrayExist([1, 2, 3, 4, 5])",
        "doesValidArrayExist([1, 2, 3, 4, 5])",
        "doesValidArrayExist([1, 2, 3, 4, 5])",
        "doesValidArrayExist([1, 2, 3, 4, 5])",
        "doesValidArrayExist([1, 2, 3, 4, 5])",
        "doesValidArrayExist([1, 2, 3, 4, 5])",
        "doesValidArrayExist([1, 2, 3])",
        "doesValidArrayExist([1, 2, 3])",
        "doesValidArrayExist([1, 2, 3, 4])",
        "doesValidArrayExist([1, 2, 3, 4])"
    ],
    "sample_52": [
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")"
    ],
    "sample_40": [
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")"
    ],
    "sample_38": [
        "minimumCost(s1 = \"abcde\", s2 = \"edcba\")",
        "minimumCost(s1 = \"abcde\", s2 = \"edcba\")",
        "minimumCost(s1 = \"abcde\", s2 = \"edcba\")",
        "minimumCost(s1 = \"abcde\", s2 = \"edcba\")",
        "minimumCost(s1 = \"abcde\", s2 = \"edcba\")",
        "minimumCost(s1 = \"abcde\", s2 = \"bcdea\")",
        "minimumCost(s1 = \"abcde\", s2 = \"bcdea\")",
        "minimumCost(s1 = \"abcde\", s2 = \"bcdea\")",
        "minimumCost(s1 = \"abc\", s2 = \"def\")",
        "minimumCost(s1 = \"abc\", s2 = \"def\")"
    ],
    "sample_5": [
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_53": [
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")"
    ],
    "sample_109": [
        "checkArray([1,2,3,4,5], 2)",
        "checkArray([1,2,3,4,5], 2)",
        "checkArray([1,2,3,4,5], 2)",
        "checkArray([1,2,3,4,5], 2)",
        "checkArray([1,2,3,4,5], 2)",
        "checkArray([1,2,3,4,5], 2)",
        "checkArray([1,2,3,4,5], 2)",
        "checkArray([1,2,3,4,5], 2)",
        "checkArray([1,2,3,4,5], 2)",
        "checkArray([1,2,3,4,5], 2)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 2)"
    ],
    "sample_0": [
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])"
    ],
    "sample_34": [
        "removeTrailingZeros(my_str = \"0000\")",
        "removeTrailingZeros(my_str = \"0000\")",
        "removeTrailingZeros(my_str = \"0000123\")",
        "removeTrailingZeros(my_str = \"0000123\")",
        "removeTrailingZeros(my_string = \"00001234\")",
        "removeTrailingZeros(my_string = \"00001234\")",
        "removeTrailingZeros(my_string = \"00001234\")",
        "removeTrailingZeros(my_string = \"00001234\")",
        "removeTrailingZeros(my_string = \"00001234\")",
        "removeTrailingZeros(my_string = \"0000\")"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"hello\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"hello\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"hello\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"hello\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"hello\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"hello\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"hello\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"hello\")"
    ],
    "sample_55": [
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(\"abc\")"
    ],
    "sample_35": [
        "removeTrailingZeros(my_list = [\"0512301\", \"0512300\", \"051230\"])",
        "removeTrailingZeros(my_list = [\"0512301\", \"0512300\", \"051230\"])",
        "removeTrailingZeros(my_list = [\"0512301\", \"0512300\", \"051230\"])",
        "removeTrailingZeros(my_list = [\"0512301\", \"0512300\", \"051230\"])",
        "removeTrailingZeros(my_list = [\"0512301\", \"0512300\", \"051230\"])",
        "removeTrailingZeros(my_list = [\"0512301\", \"0512300\", \"051230\"])",
        "removeTrailingZeros(my_num = \"0512301\")",
        "removeTrailingZeros(my_num = \"0512301\")",
        "removeTrailingZeros(my_num = \"0512301\")",
        "removeTrailingZeros(my_list = [\"0512301\", \"0\", \"12301\"])"
    ],
    "sample_23": [
        "minLength(\"abcde\")",
        "minLength(\"abcde\")",
        "minLength(\"abcde\")",
        "minLength(\"abcde\")",
        "minLength(\"abcde\")",
        "minLength(\"abcde\")",
        "minLength(\"abcde\")",
        "minLength(\"abcde\")",
        "minLength(\"abcde\")",
        "minLength(\"hello world\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(my_num = \"512301\")",
        "removeTrailingZeros(num = \"0512301\")",
        "removeTrailingZeros(my_list = [\"mq\", \"px\", \"zy\", \"0\", \"000\"])",
        "removeTrailingZeros(my_list = [\"mq\", \"px\", \"zy\", \"0\", \"000\"])"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)"
    ],
    "sample_57": [
        "distanceTraveled(a = 5, b = 3)",
        "distanceTraveled(a = 5, b = 3)",
        "distanceTraveled(a = 5, b = 3)",
        "distanceTraveled(a = 5, b = 3)",
        "distanceTraveled(a = 5, b = 3)",
        "distanceTraveled(a = 5, b = 3)",
        "distanceTraveled(a = 5, b = 3)",
        "distanceTraveled(a = 5, b = 3)",
        "distanceTraveled(a = 5, b = 3)",
        "distanceTraveled(a = 3, b = 7)"
    ],
    "sample_92": [
        "longestAlternatingSubarray([1,2,3,4,5,6,7,8,9,10], 5)",
        "longestAlternatingSubarray([1,2,3,4,5,6,7,8,9,10], 5)",
        "longestAlternatingSubarray([1,2,3,4,5,6,7,8,9,10], 5)",
        "longestAlternatingSubarray([1,2,3,4,5,6,7,8,9], 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5], t = 3)",
        "longestAlternatingSubarray([1,2,3,4,5,6,7,8,9,10], 5)",
        "longestAlternatingSubarray([1,3,2,4,5,7,6,8], 6)",
        "longestAlternatingSubarray([1,2,3,4,5,6,7,8,9], 10)",
        "longestAlternatingSubarray([1,3,2,4,5,7,6,8], 5)",
        "longestAlternatingSubarray([1,3,2,4,5,7,6,8], 6)"
    ],
    "sample_102": [
        "maximumJumps(nums = [1, 3, 5, 8, 9], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 8, 9], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 8, 9], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 8, 9], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 9, 11, 13], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 9, 11, 13], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 9, 10], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [1, 3, 5, 9, 11, 13, 15], target = 2)"
    ],
    "sample_32": [
        "removeTrailingZeros(my_str = \"0000123\")",
        "removeTrailingZeros(my_str = \"0.0005\")",
        "removeTrailingZeros(my_str = \"0.0005\")",
        "removeTrailingZeros(my_num = \"512301\")",
        "removeTrailingZeros(my_str = \"512301\")",
        "removeTrailingZeros(my_num = \"512301\")",
        "removeTrailingZeros(my_num = \"512301\")",
        "removeTrailingZeros(my_str = \"5012\")",
        "removeTrailingZeros(my_list = [\"0512301\", \"0\", \"12301\"])",
        "removeTrailingZeros(my_str = \"12301\")"
    ],
    "sample_101": [
        "maximumJumps([1, 2, 3, 4, 5], 2)",
        "maximumJumps([1, 2, 3, 4, 5], 2)",
        "maximumJumps([1, 2, 3, 4, 5], 2)",
        "maximumJumps([1, 2, 3, 4, 5], 2)",
        "maximumJumps([1, 2, 3, 4, 5], 2)",
        "maximumJumps([1, 2, 3, 4, 5], 2)",
        "maximumJumps([1, 2, 3, 4, 5], 2)",
        "maximumJumps([1, 2, 3, 4, 5], 2)",
        "maximumJumps([1, 2, 3, 4, 5], 1)",
        "maximumJumps([1, 2, 3, 4, 5], 1)"
    ],
    "sample_14": [
        "doesValidArrayExist([1, 2, 3, 4, 5])",
        "doesValidArrayExist([1, 2, 3, 4, 5])",
        "doesValidArrayExist([1, 2, 3, 4, 5])",
        "doesValidArrayExist([1, 2, 3, 4, 5])",
        "doesValidArrayExist([1, 2, 3, 4, 5])",
        "doesValidArrayExist([1, 2, 3, 4, 5])",
        "doesValidArrayExist([1, 2, 3, 4, 5])",
        "doesValidArrayExist([1, 2, 3, 4, 5])",
        "doesValidArrayExist([1, 2, 3, 4, 5])",
        "doesValidArrayExist([1, 2, 3, 4, 5])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1])"
    ],
    "sample_19": [
        "minLength(\"abcABCabc\")",
        "minLength(\"abcABCabc\")",
        "minLength(\"abcABCabc\")",
        "minLength(\"abcABC\")",
        "minLength(\"abcABC\")",
        "minLength(\"abcABC\")",
        "minLength(\"abcABC\")",
        "minLength(\"abcABCD\")",
        "minLength(\"abcABCD\")",
        "minLength(s1 = \"abcde\", s2 = \"abfde\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"hello\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"hello\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"hello\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"hello\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"hello\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"hello\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"hello\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")"
    ],
    "sample_49": [
        "semiOrderedPermutation(my_list = [1, 2, 3, 4])",
        "semiOrderedPermutation(my_list = [1, 2, 3, 4])",
        "semiOrderedPermutation(my_list = [1, 2, 3, 4])",
        "semiOrderedPermutation(my_list = [1, 2, 3, 4])",
        "semiOrderedPermutation([1,2,3,4])",
        "semiOrderedPermutation([1,2,3,4])",
        "semiOrderedPermutation([1,2,3,4])",
        "semiOrderedPermutation(my_list = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(my_list = [1, 3, 2, 4])",
        "semiOrderedPermutation(my_list = [1, 2, 3])"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,0,1,1,1,0,1,1])"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)"
    ],
    "sample_117": [
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 2, 1])",
        "minimumIndex(nums = [1, 2, 3, 2, 1])",
        "minimumIndex([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 2, 3, 3, 3, 4, 4, 5])",
        "minimumIndex(nums = [1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 5])",
        "minimumIndex([1, 2, 3, 4, 5, 5, 5, 6, 6, 7, 7, 7, 7])",
        "minimumIndex([1, 2, 2, 3, 3, 3])"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = -5, num2 = 2)",
        "makeTheIntegerZero(num1 = -5, num2 = 2)",
        "makeTheIntegerZero(num1 = -5, num2 = 2)",
        "makeTheIntegerZero(num1 = -5, num2 = 2)",
        "makeTheIntegerZero(num1 = -5, num2 = 2)",
        "makeTheIntegerZero(num1 = -1, num2 = 2)",
        "makeTheIntegerZero(num1 = -1, num2 = 2)",
        "makeTheIntegerZero(num1 = -1, num2 = 2)",
        "makeTheIntegerZero(num1 = -1, num2 = 2)",
        "makeTheIntegerZero(num1 = -1, num2 = 2)"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50])"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)"
    ],
    "sample_20": [
        "minLength(s1 = \"ba\", s2 = \"nana\")",
        "minLength(s1 = \"ba\", s2 = \"nana\")",
        "minLength(s1 = \"ba\", s2 = \"nana\")",
        "minLength(s1 = \"ba\", s2 = \"nana\")",
        "minLength(s1 = \"ba\", s2 = \"nana\")",
        "minLength(s1 = \"ba\", s2 = \"nana\")",
        "minLength(s1 = \"ba\", s2 = \"nana\")",
        "minLength(s1 = \"ba\", s2 = \"nana\")",
        "minLength(\"abc\")",
        "minLength(\"abcde\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = -5, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")",
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")",
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")",
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")",
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")",
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")",
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")",
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")",
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")",
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")"
    ],
    "sample_37": [
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits([1,1,0,0,0,1,1,1,0,1,1])",
        "numberOfGoodSubarraySplits([1,1,0,0,1,1,1,0,1,1])",
        "numberOfGoodSubarraySplits([1,1,0,0,0,1,1,1,0,0,0,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,",
        "numberOfGoodSubarraySplits([1,1,0,0,1,1,1,0,1,1,1])",
        "numberOfGoodSubarraySplits([1,1,0,0,0,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    ],
    "sample_105": [
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 3)"
    ],
    "sample_46": [
        "semiOrderedPermutation(my_list = [1, 2, 3])",
        "semiOrderedPermutation(my_list = [1, 2, 3])",
        "semiOrderedPermutation(my_list = [1, 2, 3])",
        "semiOrderedPermutation(my_list = [1, 2, 3])",
        "semiOrderedPermutation(my_list = [1, 2, 3])",
        "semiOrderedPermutation(my_list = [1, 2, 3])",
        "semiOrderedPermutation(my_list = [1, 2, 3])",
        "semiOrderedPermutation(my_list = [1, 2, 3])",
        "semiOrderedPermutation(my_list = [3, 2, 1])",
        "semiOrderedPermutation(my_list = [2, 3, 1, 4])"
    ],
    "sample_108": [
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)"
    ],
    "sample_39": [
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s1 = \"abcde\", s2 = \"cdeab\")"
    ],
    "sample_65": [
        "findValueOfPartition(my_list = [1, 3, 5, 7])",
        "findValueOfPartition(my_list = [1, 3, 5, 7])",
        "findValueOfPartition(my_list = [1, 3, 2, 4, 5])",
        "findValueOfPartition(my_list = [1, 3, 2, 4, 5])",
        "findValueOfPartition(my_list = [1, 3, 2, 4, 5])",
        "findValueOfPartition(my_list = [1, 3, 2, 4, 5])",
        "findValueOfPartition(my_list = [1, 3, 2, 4, 5])",
        "findValueOfPartition(my_list = [1, 3, 2, 4, 5])",
        "findValueOfPartition([3, 1, 4, 2])",
        "findValueOfPartition(my_list = [1, 5, 3, 4, 2])"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 10, additionalTank = 3)",
        "distanceTraveled(mainTank = 10, additionalTank = 3)",
        "distanceTraveled(mainTank = 10, additionalTank = 3)",
        "distanceTraveled(mainTank = 10, additionalTank = 3)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)"
    ],
    "sample_12": [
        "doesValidArrayExist([1, 2, 3, 4])",
        "doesValidArrayExist([1, 2, 3, 4])",
        "doesValidArrayExist([1, 2, 3, 4])",
        "doesValidArrayExist([1, 2, 3, 4])",
        "doesValidArrayExist([1, 2, 3, 4])",
        "doesValidArrayExist([1, 2, 3, 4])",
        "doesValidArrayExist([1, 2, 3, 4])",
        "doesValidArrayExist([1, 2, 3, 4])",
        "doesValidArrayExist([1, 2, 3, 4])",
        "doesValidArrayExist([1, 2, 3])"
    ],
    "sample_106": [
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)"
    ],
    "sample_88": [
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 5)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 5)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 5)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 10)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5], 3)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5], 3)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5], 3)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 5)",
        "longestAlternatingSubarray([1, 3, 2, 4, 5, 7, 6, 8], 6)",
        "longestAlternatingSubarray([1, 3, 2, 4, 5, 7, 6, 8], 6)"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])"
    ],
    "sample_87": [
        "longestAlternatingSubarray([1,2,3,4,5,6,7,8,9], 5)",
        "longestAlternatingSubarray([1,2,3,4,5,6,7,8,9], 5)",
        "longestAlternatingSubarray([1,2,3,4,5,6,7,8,9], 5)",
        "longestAlternatingSubarray([1,2,3,4,5,6,7,8,9], 5)",
        "longestAlternatingSubarray([1,2,3,4,5,6,7,8,9], 5)",
        "longestAlternatingSubarray([1,3,2,4,5,7,6,8], 4)",
        "longestAlternatingSubarray([1,3,2,4,5,7,6,8], 4)",
        "longestAlternatingSubarray([1,3,2,4,5,7,6,8], 4)",
        "longestAlternatingSubarray([1,2,3,4,5], 3)",
        "longestAlternatingSubarray([1,3,2,4,5,7,6,8], 5)"
    ],
    "sample_36": [
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s1 = \"abcde\", s2 = \"bcdea\")",
        "minimumCost(s1 = \"abcde\", s2 = \"bcdea\")",
        "minimumCost(s1 = \"abcde\", s2 = \"bcdea\")",
        "minimumCost(s1 = \"abc\", s2 = \"def\")",
        "minimumCost(s1 = \"abc\", s2 = \"def\")"
    ],
    "sample_21": [
        "minLength(\"abcABC\")",
        "minLength(\"abcABC\")",
        "minLength(\"abcABC\")",
        "minLength(\"abcABC\")",
        "minLength(\"abcde\")",
        "minLength(\"abcde\")",
        "minLength(s1 = \"abcde\", s2 = \"defgh\")",
        "minLength(s1 = \"abcde\", s2 = \"defgh\")",
        "minLength(s1 = \"abcde\", s2 = \"abfde\")",
        "minLength(s1 = \"abcde\", s2 = \"abfde\")"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 1])"
    ],
    "sample_9": [
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [0, 4]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [0, 4]])",
        "colorTheArray(n = 5, queries = [[2, 1], [4, 3]])",
        "colorTheArray(n = 5, queries = [[2, 1], [4, 3]])",
        "colorTheArray(n = 5, queries = [[2, 1], [4, 3]])",
        "colorTheArray(n = 5, queries = [[2, 1], [4, 2], [1, 3]])",
        "colorTheArray(n = 5, queries = [[2, 1], [4, 3]])",
        "colorTheArray(n = 5, queries = [[2, 2], [4, 4]])",
        "colorTheArray(n = 5, queries = [[2, 2], [4, 4], [1, 3]])",
        "colorTheArray(n = 5, queries = [[2, 2], [4, 4], [1, 3], [3, 5]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 3, 2, 4, 5])"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1, 3, 2, 4, 5])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 5])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 5])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 5])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 5])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 5])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 5])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 5])",
        "findValueOfPartition(my_list = [1, 3, 2, 4, 5])",
        "findValueOfPartition([1,3,2,4,5])"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1, 3, 5, 7])",
        "findValueOfPartition(nums = [1, 3, 5, 7])",
        "findValueOfPartition(nums = [1, 3, 5, 7])",
        "findValueOfPartition(nums = [1, 3, 5, 7])",
        "findValueOfPartition(nums = [1, 3, 5, 7])",
        "findValueOfPartition(nums = [1, 5, 9, 15])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 5, 10])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 5])",
        "findValueOfPartition(my_list = [1, 3, 2, 4, 5])"
    ],
    "sample_47": [
        "semiOrderedPermutation(my_list = [1, 2, 3, 4])",
        "semiOrderedPermutation(my_list = [1, 2, 3, 4])",
        "semiOrderedPermutation(my_list = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(my_list = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(my_list = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(my_list = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(my_list = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(my_list = [1, 2, 3, 4])",
        "semiOrderedPermutation(my_list = [1, 2, 3, 4])",
        "semiOrderedPermutation(my_list = [1, 2, 3, 4, 5])"
    ],
    "sample_44": [
        "semiOrderedPermutation(my_list = [1, 2, 3])",
        "semiOrderedPermutation(my_list = [1, 2, 3])",
        "semiOrderedPermutation(my_list = [1, 2, 3])",
        "semiOrderedPermutation(my_list = [1, 2, 3])",
        "semiOrderedPermutation(my_list = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(my_list = [1, 2, 3, 4, 5])"
    ]
}