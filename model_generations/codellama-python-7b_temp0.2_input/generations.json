{
    "sample_287": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "longestSemiRepetitiveSubstring(s = \"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "longestSemiRepetitiveSubstring(s = \"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "longestSemiRepetitiveSubstring(s = \"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "longestSemiRepetitiveSubstring(s = \"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "longestSemiRepetitiveSubstring(s = \"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "longestSemiRepetitiveSubstring(s = \"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "longestSemiRepetitiveSubstring(s = \"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabc\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"abc\",\"ab\",\"eidba\",\"eid\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"ab\",\"eidba\",\"eid\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"ab\",\"eidba\",\"eid\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"ab\",\"eidba\",\"eid\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"ab\",\"abc\",\"ab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"ab\",\"cd\",\"def\",\"de\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"ab\",\"abcabc\",\"bc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"ab\",\"cd\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"ab\",\"cd\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"ab\",\"bc\",\"cba\"])"
    ],
    "sample_247": [
        "minOperations(s1 = \"abc\", s2 = \"abc\", x = 0)",
        "minOperations(s1 = \"abc\", s2 = \"abc\", x = 0)",
        "minOperations(s1 = \"abc\", s2 = \"abc\", x = 0)",
        "minOperations(s1 = \"abab\", s2 = \"abab\", x = 2)",
        "minOperations(s1 = \"abab\", s2 = \"abab\", x = 2)",
        "minOperations(s1 = \"abxabc\", s2 = \"abyabc\", x = 2)",
        "minOperations(s1 = \"abababab\", s2 = \"abababab\", x = 2)",
        "minOperations(s1 = \"ab\", s2 = \"bab\", x = 2)",
        "minOperations(s1 = \"ab\", s2 = \"a\", x = 2)",
        "minOperations(s1 = \"abc\", s2 = \"bcc\", x = 2)"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"bef\", \"bcd\", \"efg\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bef\", \"bcd\", \"efg\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bef\", \"bcd\", \"efg\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bef\", \"bcd\", \"efg\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"abc\",\"de\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"abc\",\"de\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"abc\",\"de\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"abc\",\"de\",\"de\",\"abc\",\"be\",\"abc\",\"abc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bef\", \"bcc\", \"bec\", \"bbc\", \"bdc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bef\", \"bcc\", \"bec\", \"bbc\", \"bdc\"])"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 10, m = 5)"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = \"10101011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s = \"10101011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s = \"111010111\", k = 2)"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabcd\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabca\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abcbcgh\")"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])"
    ],
    "sample_289": [
        "minimumSteps(s = \"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumSteps(s
        "minimumSteps(s
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s
        "minimumSteps(s
        "minimumSteps(s = \"101010101\")"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 1)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 1)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 1)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 1)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 1)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 1)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 1)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 1)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 1)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 1)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"abcde\")",
        "minimumBeautifulSubstrings(s = \"abcde\")",
        "minimumBeautifulSubstrings(s = \"abcde\")",
        "minimumBeautifulSubstrings(s = \"bbbbb\")",
        "minimumBeautifulSubstrings(s = \"bbbba\")"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [1, 1, 1, 1], nums2 = [1, 1, 1, 1])",
        "minSum(nums1 = [1, 1, 1, 1], nums2 = [1, 1, 1, 1])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [5, 6, 7, 8])"
    ],
    "sample_282": [
        "minOperations(nums1 = [1, 1, 1, 1], nums2 = [1, 1, 1, 1])",
        "minOperations(nums1 = [1, 1, 1, 1], nums2 = [1, 1, 1, 1])",
        "minOperations(nums1 = [1, 1, 1, 1], nums2 = [1, 1, 1, 1])",
        "minOperations(nums1 = [1, 1, 1, 1], nums2 = [1, 1, 1, 1])",
        "minOperations(nums1 = [1, 1, 1, 1], nums2 = [1, 1, 1, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 1, 2], nums2 = [2, 2, 2])",
        "minOperations(nums1 = [1, 1, 2], nums2 = [1, 2, 2])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,",
        "alternatingSubarray(nums = [1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,",
        "alternatingSubarray(nums = [1, 1, 7, 7, 7, 7, 7, 7])",
        "alternatingSubarray(nums = [1, 1, 7, 7, 7, 7, 7, 7])",
        "alternatingSubarray(nums = [1, 1, 7, 7, 7, 7, 7, 7])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2",
        "alternatingSubarray(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "alternatingSubarray(nums = [1,1,2,1,1,3,2,3,3,4,4,4,5,5])",
        "alternatingSubarray(nums = [1,1,2,2,1,2,2,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,",
        "alternatingSubarray(nums = [1,1,2,2,1,2,2,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4], money = 5)",
        "buyChoco(prices = [1, 2, 3, 4], money = 5)",
        "buyChoco(prices = [1, 2, 3, 4], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4], money = 10)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3, 4], money = 4)",
        "buyChoco(prices = [1, 2, 3, 4], money = 4)",
        "buyChoco(prices = [1, 2, 3, 4], money = 7)"
    ],
    "sample_302": [
        "countSeniors(details = [\"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234",
        "countSeniors(details = [\"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234",
        "countSeniors(details
        "countSeniors(details
        "countSeniors(details
        "countSeniors(details = [\"000000000000\", \"111111111111\", \"222222222222\"])",
        "countSeniors(details = [\"000000000000\", \"111111111111\", \"222222222222\", \"333333333333\", \"444444444444\", \"555555555555\", \"666666666666\"])",
        "countSeniors(details = [\"Name: John Smith\", \"Name: Mary Smith\", \"Name: John Doe\", \"Name: Mary Doe\"])",
        "countSeniors(details = [\"1000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010",
        "countSeniors(details = [\"Name: John Doe, Age: 30\", \"Name: Mary Jane, Age: 70\", \"Name: Tom, Age: 50\"])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 13)",
        "beautifulSubstrings(s = \"abooow\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"abcde\", k = 2)",
        "beautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyz\", k = 2)"
    ],
    "sample_255": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1,2,3,4,5,6,7,8,9])"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,4,3,2,1])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "minGroupsForValidAssignment(nums = [3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,3,2,1,1])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,3,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3,4,4,5,5])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20])"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10])",
        "alternatingSubarray(nums = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2",
        "alternatingSubarray(nums = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2",
        "alternatingSubarray(nums = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2",
        "alternatingSubarray(nums = [1,2,3,4,5,6])",
        "alternatingSubarray(nums = [1,2,3,4,5,4,3,2,1])",
        "alternatingSubarray(nums = [1,1,2,1,1])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = \"101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010",
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = \"101010111101\", k = 3)"
    ],
    "sample_293": [
        "minimumSteps(s = \"01010\")",
        "minimumSteps(s = \"01010\")",
        "minimumSteps(s = \"01010\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"0100101\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"1100101\")",
        "minimumSteps(s = \"010010101\")",
        "minimumSteps(s = \"11000000\")",
        "minimumSteps(s = \"0100101010010101\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "longestSemiRepetitiveSubstring(s = \"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"aabababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,3,1,1,2,2,2,2])"
    ],
    "sample_307": [
        "countSeniors(details = [\"123456789\", \"123456780\", \"123456700\"])",
        "countSeniors(details = [\"123456789\", \"123456780\", \"123456700\"])",
        "countSeniors(details = [\"123456789\", \"123456780\", \"123456700\"])",
        "countSeniors(details = [\"123456789\", \"123456780\", \"123456790\"])",
        "countSeniors(details = [\"123456789\", \"123456780\", \"123456790\"])",
        "countSeniors(details = [\"23\", \"45\", \"67\", \"89\", \"1011\"])",
        "countSeniors(details = [\"23\", \"45\", \"67\", \"89\"])",
        "countSeniors(details
        "countSeniors(details = [\"23\", \"34\", \"45\", \"56\", \"67\"])",
        "countSeniors(details = [\"120000\", \"123456\", \"126543\", \"180000\", \"199999\"])"
    ],
    "sample_290": [
        "minimumSteps(s = \"01010\")",
        "minimumSteps(s = \"01010\")",
        "minimumSteps(s = \"01010\")",
        "minimumSteps(s = \"01010\")",
        "minimumSteps(s = \"01010\")",
        "minimumSteps(s = \"01010\")",
        "minimumSteps(s = \"01010\")",
        "minimumSteps(s = \"01010\")",
        "minimumSteps(s = \"01010\")",
        "minimumSteps(s = \"01010\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9,10], moveFrom = [1,2,3,4,5,6,7,8,9,10], moveTo = [1,2,3,4,5,6,7,8,9,10])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7], moveFrom = [1,2,3], moveTo = [3,2,1])",
        "relocateMarbles(nums = [2, 4, 1, 4, 1, 2], moveFrom = [1, 2, 2], moveTo = [2, 1, 1])",
        "relocateMarbles(nums = [2, 4, 1, 4, 1, 2], moveFrom = [1, 2, 2], moveTo = [2, 1, 1])",
        "relocateMarbles(nums = [2, 4, 1, 4, 1, 2], moveFrom = [1, 2, 2], moveTo = [2, 1, 1])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [1,2], moveTo = [2,2])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [1,2], moveTo = [2,2])",
        "relocateMarbles(nums = [2,1,2,2,2,3,4,2], moveFrom = [1,3,4], moveTo = [2,3,4])",
        "relocateMarbles(nums = [2,1,2,2,2,3,4,2], moveFrom = [2,5], moveTo = [4,5])",
        "relocateMarbles(nums = [2, 4, 1, 4, 1, 2, 1, 3, 2], moveFrom = [1, 2, 2, 2], moveTo = [2, 3, 2, 1])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 1, 0, 0, 1, 1])",
        "alternatingSubarray(nums = [1, 1, 0, 0, 1, 1])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,",
        "alternatingSubarray(nums = [1, 1, 0, 1, 1, 1])",
        "alternatingSubarray(nums = [1, 1, 1, 1, 1])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2])",
        "alternatingSubarray(nums = [1,1,0,0,1,0,1])",
        "alternatingSubarray(nums = [1,1,1,1,1,1,1,1,1,1])",
        "alternatingSubarray(nums = [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 4)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 4)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiooaauuaeiu\", k = 4)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiooaauuaeiu\", k = 4)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"abc\", \"dea\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"abc\", \"dea\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"abc\", \"dea\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"abc\", \"dea\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"abc\", \"dea\", \"ea\", \"eac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"abc\", \"dea\", \"ea\", \"eac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"abc\", \"dea\", \"ea\", \"eac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"abc\", \"dea\", \"ead\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"abc\", \"dea\", \"bac\", \"bca\"])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 10, m = 5)"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4], money = 5)",
        "buyChoco(prices = [1, 2, 3, 4], money = 5)",
        "buyChoco(prices = [1, 2, 3, 4], money = 5)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"bef\", \"bcd\", \"efg\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"deq\",\"mee\",\"qex\",\"qex\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"deq\",\"mee\",\"qex\",\"qex\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bef\", \"abc\", \"fea\", \"abc\", \"bef\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bef\", \"abc\", \"fea\", \"abc\", \"bef\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"deq\",\"mee\",\"qex\",\"qex\",\"zzy\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bef\", \"abc\", \"fgh\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bef\", \"abc\", \"fgh\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bef\", \"abc\", \"fgh\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bef\", \"abc\", \"fea\", \"abc\", \"cba\"])"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabca\")"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"cat\", \"cats\", \"catsdogcats\", \"dog\", \"dogcatsdog\", \"hippopotamuses\", \"rat\", \"ratcatdogcat\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"cats\", \"catsdogcats\", \"dog\", \"dogcatsdog\", \"hippopotamuses\", \"rat\", \"ratcatdogcat\"])",
        "minimizeConcatenatedLength(words = [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"])",
        "minimizeConcatenatedLength(words = [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"])",
        "minimizeConcatenatedLength(words = [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"])",
        "minimizeConcatenatedLength(words = [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"])",
        "minimizeConcatenatedLength(words = [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"cats\", \"catsdogcats\", \"dog\", \"dogcatsdog\", \"hippopotamuses\", \"rat\", \"ratcatdogcat\"])",
        "minimizeConcatenatedLength(words = [\"code\",\"a\",\"dd\",\"d\"])",
        "minimizeConcatenatedLength(words = [\"code\",\"d\",\"dd\",\"ddd\",\"dddd\"])"
    ],
    "sample_323": [
        "isFascinating(n = 1)",
        "isFascinating(n = 10)",
        "isFascinating(n = 10)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 123)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabca\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabca\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "longestSemiRepetitiveSubstring(s = \"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "longestSemiRepetitiveSubstring(s = \"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabcd\")",
        "longestSemiRepetitiveSubstring(s = \"abcbcgfedcba\")"
    ],
    "sample_305": [
        "countSeniors(details
        "countSeniors(details
        "countSeniors(details
        "countSeniors(details = [\"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567",
        "countSeniors(details = [\"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567",
        "countSeniors(details = [\"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567",
        "countSeniors(details = [\"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "countSeniors(details
        "countSeniors(details = [\"Name: John Doe, Age: 30\", \"Name: Jane Doe, Age: 55\", \"Name: John Doe, Age: 60\"])",
        "countSeniors(details = [\"Name: John Smith\", \"Age: 32\", \"Gender: Male\", \"Name: Mary Smith\", \"Age: 62\", \"Gender: Female\", \"Name: Tom Smith\", \"Age: 19\", \"Gender: Male\"])"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 3])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [3, 4, 3, 3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,2,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,2,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 5, 5])"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"abc\",\"ab\",\"bc\",\"c\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"ab\",\"bc\",\"c\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"ab\",\"bc\",\"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"ab\",\"bc\",\"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"ab\",\"bc\",\"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"ab\",\"abcddc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bef\", \"bcd\", \"efg\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"ab\",\"bc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"ab\",\"abcddd\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"ab\",\"cd\",\"d\"])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = \"1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010",
        "shortestBeautifulSubstring(s = \"1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010",
        "shortestBeautifulSubstring(s = \"1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010",
        "shortestBeautifulSubstring(s = \"1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010",
        "shortestBeautifulSubstring(s = \"1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010",
        "shortestBeautifulSubstring(s = \"1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010",
        "shortestBeautifulSubstring(s = \"1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010",
        "shortestBeautifulSubstring(s = \"1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010",
        "shortestBeautifulSubstring(s = '1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s = \"0110\", k = 2)"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], limit = 1)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 1)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 1)"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"aeiaaioooaauuaeiu\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioooaauuaeiu\", k = 4)"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"abcde\", \"abced\", \"bacde\", \"baced\", \"cbaed\"])",
        "maximumNumberOfStringPairs(words = [\"abcde\", \"abced\", \"bacde\", \"baced\", \"cbaed\"])",
        "maximumNumberOfStringPairs(words = [\"abcde\", \"abcd\", \"cd\", \"def\", \"de\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bef\", \"bcd\", \"efg\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bef\", \"bcd\", \"efg\"])",
        "maximumNumberOfStringPairs(words = [\"abcde\", \"abced\", \"edcba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"abcd\",\"def\",\"de\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"ab\",\"e\"])",
        "maximumNumberOfStringPairs(words = [\"abcde\", \"abced\", \"edcba\", \"beed\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bef\", \"bcd\", \"efg\", \"abegf\"])"
    ],
    "sample_325": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_312": [
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2],[3,4]])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3], b = [1, 2, 3])",
        "minOperations(a = [1, 2, 3], b = [1, 2, 3])",
        "minOperations(a = [1, 2, 3], b = [1, 2, 3])",
        "minOperations(a = [1, 1, 1, 1], b = [1, 1, 1, 1])",
        "minOperations(a = [1, 2, 3, 4, 5], b = [1, 2, 3, 4, 5])",
        "minOperations(a = [1, 2, 3], b = [3, 2, 1])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [1, 2, 3])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minOperations(nums1 = [1, 1, 1, 1], nums2 = [1, 1, 1, 1])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [1, 1, 1, 1])",
        "maximumTripletValue(nums = [1, 1, 1, 1])",
        "maximumTripletValue(nums = [1, 1, 1, 3, 3, 2, 4, 5])",
        "maximumTripletValue(nums = [1, 1, 1, 3, 3, 2, 4, 5, 5, 5])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"0110\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110111\", k = 4)",
        "shortestBeautifulSubstring(s = \"00110110\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110110\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110110\", k = 2)",
        "shortestBeautifulSubstring(s = \"011010\", k = 2)",
        "shortestBeautifulSubstring(s = '01110111010111', k = 4)"
    ],
    "sample_256": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 1, 1, 1])",
        "minimumSum(nums = [1, 1, 1, 1])",
        "minimumSum(nums = [1, 1, 1, 1, 1])",
        "minimumSum(nums = [1, 1, 1, 1, 1])",
        "minimumSum(nums = [4, 2, 3, 1, 1, 2])"
    ],
    "sample_291": [
        "minimumSteps(s
        "minimumSteps(s
        "minimumSteps(s
        "minimumSteps(s
        "minimumSteps(s
        "minimumSteps(s
        "minimumSteps(s
        "minimumSteps(s = \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"011010110\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 3])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 3])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 3])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 3])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 3, 5, 2])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 3, 5, 2])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 3, 4, 2])"
    ],
    "sample_277": [
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1], [1, 0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1], [1, 0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[1, 1, 1, 1, 1], [1, 0, 0, 0, 1], [1, 0, 0, 0, 1], [1, 0, 0, 0, 1], [1, 1, 1, 1, 1]])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)"
    ],
    "sample_292": [
        "minimumSteps(s
        "minimumSteps(s = \"111000111\")",
        "minimumSteps(s = \"111000111\")",
        "minimumSteps(s = \"111000111\")",
        "minimumSteps(s = \"11011000\")",
        "minimumSteps(s = \"10111\")",
        "minimumSteps(s
        "minimumSteps(s = \"111000\")",
        "minimumSteps(s = \"0110\")",
        "minimumSteps(s = \"011010111111\")"
    ],
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 1, 2, 3, 4])"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 2, 3], moveTo = [3, 4, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 2, 3], moveTo = [3, 4, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 2], moveTo = [2, 2])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 2], moveTo = [2, 2])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 2], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [2, 1, 3, 4], moveFrom = [1, 2], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 2], moveTo = [2, 2])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6], moveFrom = [1, 3, 4], moveTo = [2, 3, 4])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_273": [
        "findChampion(grid = [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[1, 1, 0], [1, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 1, 0], [1, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 1], [1, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [1, 0, 0], [0, 0, 1]])"
    ],
    "sample_267": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [0, 1, 2], nums2 = [0, 1, 2])",
        "minSum(nums1 = [0, 1, 2], nums2 = [0, 1, 2])",
        "minSum(nums1 = [0, 0, 0], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 1, 1, 1], nums2 = [1, 1, 1, 1])",
        "minSum(nums1 = [1, 1, 1, 1], nums2 = [1, 1, 1, 1])",
        "minSum(nums1 = [1, 1, 1, 1], nums2 = [1, 1, 1, 1])",
        "minSum(nums1 = [0, 1, 2, 3], nums2 = [0, 1, 2, 3])"
    ],
    "sample_294": [
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s
        "minimumSteps(s
        "minimumSteps(s
        "minimumSteps(s = \"11001\")",
        "minimumSteps(s = \"1110001\")",
        "minimumSteps(s = \"0110110\")",
        "minimumSteps(s = \"11011000\")",
        "minimumSteps(s
        "minimumSteps(s = \"110010101\")"
    ],
    "sample_274": [
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0, 0], [1, 1, 0, 0], [0, 1, 0, 0], [1, 1, 1, 0]])",
        "findChampion(grid = [[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0, 0], [1, 1, 1, 1], [1, 0, 0, 0], [1, 1, 1, 1]])"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "minGroupsForValidAssignment(nums = [1,2,3,3,4,4,5,5])",
        "minGroupsForValidAssignment(nums = [1,2,3,3,4,4,5,5])",
        "minGroupsForValidAssignment(nums = [3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,3,3])"
    ],
    "sample_270": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [0, 1, 2], nums2 = [0, 2, 3])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [0, 1, 1, 0, 1], nums2 = [1, 1, 0, 1])"
    ],
    "sample_317": [
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1,2,3,4,5], money = 10)",
        "buyChoco(prices = [1,2,3,4,5], money = 10)",
        "buyChoco(prices = [1,2,3,4,5], money = 10)",
        "buyChoco(prices = [1,2,3,4,5,6], money = 10)",
        "buyChoco(prices = [1,2,3,4], money = 7)"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"aeiaaioooauuuaaaauuaeiu\", k = 4)",
        "beautifulSubstrings(s = \"aeiaaioooauuuaaaauuaeiu\", k = 4)",
        "beautifulSubstrings(s = \"aeiaaioooauuuaaaauuaeiu\", k = 4)",
        "beautifulSubstrings(s = \"aeiaaioooauuuaaaauuaeiu\", k = 4)",
        "beautifulSubstrings(s = \"aeiaaioooauuuaaaauuaeiu\", k = 4)",
        "beautifulSubstrings(s = \"aeiaaioooauuuaaaauuaeiu\", k = 4)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiooaauuaeiu\", k = 3)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiooaauuaeiu\", k = 3)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 4)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 4)"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "longestSemiRepetitiveSubstring(s = \"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "longestSemiRepetitiveSubstring(s = \"abcabcabc\")"
    ],
    "sample_341": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)"
    ],
    "sample_271": [
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [1,2,3,4], nums2 = [1,2,3,4])",
        "minSum(nums1 = [1,2,3,4], nums2 = [1,2,3,4])",
        "minSum(nums1 = [1,2,3,4], nums2 = [1,2,3,4])",
        "minSum(nums1 = [1,2,3,4], nums2 = [1,2,3,4])",
        "minSum(nums1 = [1,2,3,4], nums2 = [1,2,3,4])",
        "minSum(nums1 = [1,2,3,4], nums2 = [1,2,3,4])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10])"
    ],
    "sample_340": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 3, y = 4, z = 5)"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"123456\", k = 3)",
        "shortestBeautifulSubstring(s = \"123456\", k = 3)",
        "shortestBeautifulSubstring(s = \"123456\", k = 3)",
        "shortestBeautifulSubstring(s = \"123456\", k = 3)",
        "shortestBeautifulSubstring(s = \"123456\", k = 3)",
        "shortestBeautifulSubstring(s = \"123456\", k = 3)",
        "shortestBeautifulSubstring(s = \"0210\", k = 2)",
        "shortestBeautifulSubstring(s = \"0210\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110\", k = 2)",
        "shortestBeautifulSubstring(s = \"2011\", k = 2)"
    ],
    "sample_324": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_268": [
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [5, 6, 7, 8])",
        "minSum(nums1 = [1, 2, 3, 4, 5, 6], nums2 = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")"
    ],
    "sample_321": [
        "maxStrength(nums = [2, 3, -2, 4, -1])",
        "maxStrength(nums = [2, 3, -2, 4, -1])",
        "maxStrength(nums = [2, 3, -2, 4, -1])",
        "maxStrength(nums = [1, 2, 3, 4, -1, -2, -3, -4])",
        "maxStrength(nums = [1, -2, -3, 4])",
        "maxStrength(nums = [1, -2, 3, 4, -5])",
        "maxStrength(nums = [1, -2, 3, 4, -5])",
        "maxStrength(nums = [1,-2,-3,4])",
        "maxStrength(nums = [2, -3, 1, 0, -5])",
        "maxStrength(nums = [1, -2, 3, 4])"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 2, 3], moveTo = [3, 4, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 2, 3], moveTo = [3, 4, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 2, 3], moveTo = [3, 4, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 2, 3], moveTo = [3, 4, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 2, 3], moveTo = [3, 4, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 2, 3], moveTo = [3, 4, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 2], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 3, 5], moveTo = [3, 5, 1])"
    ],
    "sample_357": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6, 8, 9], moveTo = [5, 6, 8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6, 8, 9], moveTo = [5, 6, 8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6, 8, 9], moveTo = [5, 6, 8, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3, 7], moveTo = [3, 7, 4])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [5, 6, 7], moveTo = [8, 9, 10])",
        "relocateMarbles(nums = [5, 1, 3, 4, 2, 8, 9, 7, 6], moveFrom = [1, 3, 5], moveTo = [4, 5, 8])",
        "relocateMarbles(nums = [5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], moveFrom = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], moveTo = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9, 10, 11, 12], moveFrom = [1, 2, 3, 4], moveTo = [1, 2, 3, 4])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 2, 3, 4], money = 5)",
        "buyChoco(prices = [1, 2, 4], money = 4)",
        "buyChoco(prices = [1, 2, 4], money = 4)",
        "buyChoco(prices = [1, 2, 4], money = 4)",
        "buyChoco(prices = [1, 2, 3, 4], money = 4)",
        "buyChoco(prices = [1, 2, 3, 4], money = 4)",
        "buyChoco(prices = [1, 2, 3, 4], money = 4)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4], money = 6)",
        "buyChoco(prices = [1, 2, 4], money = 3)"
    ],
    "sample_308": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4], money = 5)"
    ],
    "sample_259": [
        "minimumSum(nums = [1,1,1,1,1])",
        "minimumSum(nums = [1,1,1,1,1])",
        "minimumSum(nums = [1,1,1,1,1])",
        "minimumSum(nums = [1,1,1,1,1])",
        "minimumSum(nums = [1,1,1,1,1])",
        "minimumSum(nums = [1,1,1,1,1])",
        "minimumSum(nums = [1, 1, 10, 10, 10])",
        "minimumSum(nums = [1, 1, 10, 10, 10])",
        "minimumSum(nums = [1, 1, 1, 1, 1])",
        "minimumSum(nums = [1,1,1,1,1,1,1,1])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])"
    ],
    "sample_311": [
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 2, 3], money = 4)",
        "buyChoco(a = [1, 2, 3], money = 5)",
        "buyChoco(a = [1, 2, 3], money = 5)",
        "buyChoco(a = [1, 2, 3], money = 4)",
        "buyChoco(a = [1, 2, 3], money = 4)",
        "buyChoco(a = [1, 2], money = 3)",
        "buyChoco(a = [1, 2], money = 3)",
        "buyChoco(a = [1, 2], money = 3)",
        "buyChoco(a = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(a = [1, 2, 3, 4], money = 6)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 4, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 4, 3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 3, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 3, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 3, 3, 2, 1, 1, 1])"
    ],
    "sample_276": [
        "findChampion(grid = [[1, 0, 0], [1, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0, 0], [1, 1, 1, 0], [0, 0, 0, 0], [1, 1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0, 0], [1, 1, 1, 0], [0, 0, 0, 0], [1, 1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0, 0], [1, 1, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0, 0], [1, 1, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0, 1], [1, 0, 0, 1], [1, 0, 0, 1], [1, 1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0, 1], [1, 0, 1, 1], [1, 1, 1, 1], [1, 0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0, 0], [0, 1, 0, 0], [0, 1, 0, 0], [1, 1, 0, 0]])"
    ],
    "sample_320": [
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"ab\", \"b\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"b\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"b\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\", \"d\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\", \"d\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"b\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"b\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"ba\", \"bca\", \"cab\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"ab\", \"ba\"])"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abe\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"bce\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"efg\")"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "alternatingSubarray(nums = [1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1",
        "alternatingSubarray(nums = [1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 0, 0], [1, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 1, 1, 1], [1, 0, 0, 1], [1, 0, 0, 1], [1, 0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0, 0], [1, 1, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0, 0], [1, 1, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 1], [1, 0, 0]])",
        "findChampion(grid = [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[1, 0, 0, 0], [1, 1, 0, 0], [0, 1, 0, 0], [1, 1, 1, 0]])",
        "findChampion(grid = [[1, 0, 0, 0], [1, 1, 0, 0], [0, 1, 0, 0], [1, 0, 0, 0]])"
    ],
    "sample_304": [
        "countSeniors(details
        "countSeniors(details
        "countSeniors(details = [\"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "countSeniors(details = [\"12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012",
        "countSeniors(details = [\"12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012",
        "countSeniors(details = [\"12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012",
        "countSeniors(details = [\"12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012",
        "countSeniors(details
        "countSeniors(details
        "countSeniors(details = [\"1234567890123\", \"1234567890124\", \"1234567890125\"])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 4)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 4)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 4)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 4)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 4)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 4)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiooouuu\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 3)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 1)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiooouuuooaauuaeiu\", k = 3)"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = \"1010\", k = 2)",
        "shortestBeautifulSubstring(s = \"101010111101\", k = 2)",
        "shortestBeautifulSubstring(s = \"101001\", k = 2)",
        "shortestBeautifulSubstring(s
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"b\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"b\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\", \"d\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\", \"d\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\", \"d\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\", \"d\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"b\", \"bc\"])"
    ],
    "sample_327": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 145)",
        "isFascinating(n = 145)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2], [3, 4], [5, 6]])",
        "matrixSum(nums = [[1, 2], [3, 4], [5, 6]])",
        "matrixSum(nums = [[1, 2], [3, 4], [5, 6]])",
        "matrixSum(nums = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])"
    ],
    "sample_326": [
        "isFascinating(n = 145)",
        "isFascinating(n = 145)",
        "isFascinating(n = 145)",
        "isFascinating(n = 145)",
        "isFascinating(n = 145)",
        "isFascinating(n = 145)",
        "isFascinating(n = 145)",
        "isFascinating(n = 145)",
        "isFascinating(n = 145)",
        "isFascinating(n = 145)"
    ],
    "sample_275": [
        "findChampion(grid = [[1, 0, 0], [1, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[1, 1, 0], [1, 1, 1], [1, 0, 1]])",
        "findChampion(grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]])"
    ],
    "sample_260": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_322": [
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 145)",
        "isFascinating(n = 10)",
        "isFascinating(n = 12345)"
    ],
    "sample_248": [
        "minOperations(s1 = \"1010\", s2 = \"1011\", x = 2)",
        "minOperations(s1 = \"1010\", s2 = \"1011\", x = 2)",
        "minOperations(s1 = \"1010\", s2 = \"1011\", x = 2)",
        "minOperations(s1 = \"1100\", s2 = \"1010\", x = 2)",
        "minOperations(s1 = \"101\", s2 = \"111\", x = 2)",
        "minOperations(s1 = \"101\", s2 = \"111\", x = 2)",
        "minOperations(s1 = \"1011\", s2 = \"1010\", x = 2)",
        "minOperations(s1 = \"111000\", s2 = \"101110\", x = 2)",
        "minOperations(s1 = \"101\", s2 = \"110\", x = 1)",
        "minOperations(s1 = \"101\", s2 = \"110\", x = 1)"
    ],
    "sample_342": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 2, y = 2, z = 10)"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [0, 1, 2], moveTo = [3, 3, 3])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [0, 1, 2], moveTo = [3, 3, 3])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [0, 1, 2], moveTo = [3, 3, 3])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [0, 1], moveTo = [1, 0])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 2, 3], moveTo = [4, 5, 6])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [0, 1], moveTo = [3, 4])",
        "relocateMarbles(nums = [5, 1, 3, 4, 2], moveFrom = [1, 3, 4], moveTo = [2, 4, 1])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 4, 7], moveTo = [1, 3, 8])",
        "relocateMarbles(nums = [5, 1, 6, 8, 9], moveFrom = [1, 3], moveTo = [3, 1])",
        "relocateMarbles(nums = [5, 1, 6, 8, 9, 2, 3, 4, 7], moveFrom = [1, 2, 3, 4], moveTo = [2, 3, 4, 5])"
    ],
    "sample_306": [
        "countSeniors(details = [\"name: John, age: 30\", \"name: Mary, age: 75\", \"name: Susan, age: 62\", \"name: James, age: 45\"])",
        "countSeniors(details = [\"Name: John Doe, Age: 32\", \"Name: Jane Doe, Age: 55\", \"Name: John Doe, Age: 62\"])",
        "countSeniors(details = [\"Name: John Smith, Age: 43\", \"Name: Mary Smith, Age: 78\", \"Name: Paul Smith, Age: 33\"])",
        "countSeniors(details = [\"Name: John, Age: 32\", \"Name: Mary, Age: 78\", \"Name: Sam, Age: 65\", \"Name: Tom, Age: 56\"])",
        "countSeniors(details = [\"name: John Doe, age: 32\", \"name: Jane Doe, age: 55\", \"name: John Doe, age: 60\"])",
        "countSeniors(details = [\"name: John, age: 32\", \"name: Ann, age: 78\", \"name: Bob, age: 54\"])",
        "countSeniors(details = [\"Name: John Smith, Age: 43\", \"Name: Mary Smith, Age: 78\", \"Name: Sam Smith, Age: 21\"])",
        "countSeniors(details = [\"name: John Doe, age: 32\", \"name: Mary Ann, age: 78\", \"name: John Smith, age: 55\"])",
        "countSeniors(details = [\"Name: John Smith, Age: 43\", \"Name: Mary Smith, Age: 78\", \"Name: Susan Smith, Age: 35\"])",
        "countSeniors(details = [\"Name: John Doe, Age: 61\", \"Name: Jane Doe, Age: 59\", \"Name: John Doe, Age: 62\"])"
    ],
    "sample_303": [
        "countSeniors(details = [\"1234567890\", \"1234567890\", \"1234567890\"])",
        "countSeniors(details = [\"1234567890\", \"1234567890\", \"1234567890\"])",
        "countSeniors(details = [\"1234567890\", \"1234567890\", \"1234567890\"])",
        "countSeniors(details = [\"1234567890\", \"1234567890\", \"1234567890\"])",
        "countSeniors(details
        "countSeniors(details = [\"name: 123456789\", \"name: 123456789\", \"name: 123456789\"])",
        "countSeniors(details = [\"name=John,age=23\", \"name=Peter,age=55\", \"name=John,age=60\"])",
        "countSeniors(details = [\"name=Jane Doe,age=50,gender=Female\", \"name=John Doe,age=62,gender=Male\", \"name=Jane Doe,age=60,gender=Female\"])",
        "countSeniors(details = [\"name: 23\", \"name: 50\", \"name: 60\"])",
        "countSeniors(details = [\"name: John Doe, age: 43\", \"name: Mary Ann, age: 78\", \"name: Jack, age: 33\", \"name: Jane, age: 67\"])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [0, 1], moveTo = [3, 4])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [0, 4], moveTo = [3, 1])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [0, 4], moveTo = [3, 1])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [0, 2, 4], moveTo = [1, 3, 4])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [0, 1, 2], moveTo = [3, 3, 3])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [6, 5])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [5, 6, 7], moveTo = [8, 9, 10])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [0, 1], moveTo = [1, 2])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3, 5], moveTo = [2, 4, 6])",
        "relocateMarbles(nums = [5, 1, 6, 8, 9, 2, 3, 4], moveFrom = [1, 3, 4], moveTo = [2, 4, 5])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [3, 1, 5, 2, 4])",
        "minimumRightShifts(nums = [3, 1, 2, 4])"
    ],
    "sample_453": [
        "minChanges(s = \"1100101\")",
        "minChanges(s = \"1100101\")",
        "minChanges(s = \"1100101\")",
        "minChanges(s = \"111000\")",
        "minChanges(s = \"111000\")",
        "minChanges(s = \"1212\")",
        "minChanges(s = \"aabbbc\")",
        "minChanges(s = \"121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212",
        "minChanges(s = \"1100110\")",
        "minChanges(s = \"11001010110\")"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 7)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 7)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 7)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 7)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 6)",
        "lengthOfLongestSubsequence(nums = [3, 4, 7], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)"
    ],
    "sample_367": [
        "sortVowels(s = \"lympH\")",
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = \"lympH\")",
        "sortVowels(s = \"lympH\")",
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = \"lympH\")",
        "sortVowels(s = \"lympH\")",
        "sortVowels(s = 'lymph')",
        "sortVowels(s = 'lymph')"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 100)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 7)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 7)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 7)"
    ],
    "sample_381": [
        "countPairs(nums = [1, 2, 3, 4], t = 5)",
        "countPairs(nums = [1, 2, 3, 4], t = 5)",
        "countPairs(nums = [1, 2, 3, 4], t = 5)",
        "countPairs(nums = [1, 2, 3, 4], t = 5)",
        "countPairs(nums = [1, 5, 3, 4, 2], t = 5)",
        "countPairs(nums = [1, 5, 3, 4, 2], t = 5)",
        "countPairs(nums = [1, 5, 3, 4, 2], t = 5)",
        "countPairs(nums = [1, 5, 3, 4, 2], t = 5)",
        "countPairs(nums = [1, 5, 3, 4, 2], t = 5)",
        "countPairs(nums = [1,2,3,4], t = 5)"
    ],
    "sample_366": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [0, 1, 2, 3, 4])"
    ],
    "sample_369": [
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = \"lympH\")",
        "sortVowels(s = \"lympH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = \"lympH\")",
        "sortVowels(s = \"Python\")",
        "sortVowels(s = \"Hey, what's up?\")",
        "sortVowels(s = \"aeiou\")"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [3, 1, 5, 2, 4])",
        "minimumRightShifts(nums = [3, 1, 5, 2, 4])",
        "minimumRightShifts(nums = [3, 1, 5, 2, 4])",
        "minimumRightShifts(nums = [3, 1, 5, 2, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [4, 3, 1, 2])"
    ],
    "sample_448": [
        "minChanges(s = \"aabbbc\")",
        "minChanges(s = \"aabbbc\")",
        "minChanges(s = \"aabbbc\")",
        "minChanges(s = \"aabbbc\")",
        "minChanges(s = \"aabbbc\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"123456789\")",
        "minChanges(s = \"123456789\")",
        "minChanges(s = \"123456789\")"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"1234\", s2 = \"4321\")",
        "canBeEqual(s1 = \"1234\", s2 = \"4321\")",
        "canBeEqual(s1 = \"1234\", s2 = \"4321\")",
        "canBeEqual(s1 = \"1234\", s2 = \"4321\")",
        "canBeEqual(s1 = \"1234\", s2 = \"4321\")",
        "canBeEqual(s1 = \"1234\", s2 = \"4321\")",
        "canBeEqual(s1 = \"1234\", s2 = \"4321\")",
        "canBeEqual(s1 = \"1234\", s2 = \"4321\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,"
    ],
    "sample_361": [
        "isGood(a = [1, 2, 3, 4, 4])",
        "isGood(a = [1, 2, 3, 4, 4])",
        "isGood(a = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "isGood(a = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "isGood(a = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "isGood(a = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "isGood(a = [1, 2, 3, 4, 3, 2, 1])",
        "isGood(a = [1, 2, 3, 4, 3, 2, 1])",
        "isGood(a = [1, 2, 3, 4, 4, 3, 2, 1])",
        "isGood(a = [1, 1, 2, 3, 3, 3, 4, 4, 4, 4])"
    ],
    "sample_419": [
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], k = 10)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], k = 10)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], k = 10)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], k = 10)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], k = 10)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], k = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 7)",
        "minOperations(nums = [1,1,1,1,1,1,1,1,1,1], k = 3)",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 2)",
        "minOperations(nums = [2, 3, 1, 5], k = 2)"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1,3,5,9,7])",
        "findMaximumLength(nums = [1,3,5,9,7])",
        "findMaximumLength(nums = [1,3,5,9,7])",
        "findMaximumLength(nums = [1,3,5,9,7])",
        "findMaximumLength(nums = [1,3,-1,4,2])",
        "findMaximumLength(nums = [1,3,-1,4,2])",
        "findMaximumLength(nums = [1,3,-1,4,2])",
        "findMaximumLength(nums = [1,3,-1,4,2])",
        "findMaximumLength(nums = [1,2,3,4,5])",
        "findMaximumLength(nums = [1,2,3,4,5])"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"zbax\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"zbax\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"acb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"acb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"acb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"acb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"acb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"acb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"zbcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"zab\")"
    ],
    "sample_402": [
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 1)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"ll\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"ll\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"ll\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"ll\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"ll\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"apple\", \"ball\"], x = \"ll\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"apple\", \"ball\"], x = \"ll\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"ll\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"apple\", \"ball\"], x = \"ll\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"1\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"1\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"1\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"1\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"1\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"1\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"1\",\"2\",\"prev\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"1\",\"2\",\"prev\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"1\",\"2\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"1\",\"2\",\"prev\"])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [1, 1, 1, 1, 1], k = 2)",
        "minOperations(nums = [1, 1, 1, 1, 1], k = 2)",
        "minOperations(nums = [1, 2, 3, 4], k = 2)",
        "minOperations(nums = [1, 2, 3, 4], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 7)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 1, 1, 1, 1], k = 2)",
        "minOperations(nums = [1, 1, 1, 1, 1], k = 2)",
        "minOperations(nums = [1, 1, 1, 1, 1], k = 2)",
        "minOperations(nums = [1, 1, 1, 1, 1], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 7)",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 2)",
        "minOperations(nums = [2, 3, 1, 2, 4, 3], k = 2)",
        "minOperations(nums = [2, 3, 1, 2, 4, 3], k = 2)",
        "minOperations(nums = [2, 2, 1, 2, 2, 2, 2, 2, 2, 2], k = 2)",
        "minOperations(nums = [2, 3, 1, 5, 4], k = 3)"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 4, 7])",
        "minimumSeconds(nums = [1, 2, 4])",
        "minimumSeconds(nums = [1, 2, 4, 5, 7, 1, 1, 1, 1])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 1, 1, 1, 1], target = 3)",
        "countPairs(nums = [1, 5, 3, 4, 2], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"ll\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"hi\", \"helix\", \"hiii\"], x = \"hi\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"hi\", \"helix\", \"hermes\"], x = \"el\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cat\", \"dog\", \"banana\", \"banana\", \"banana\"], x = \"an\")"
    ],
    "sample_372": [
        "sortVowels(s = \"leetcode\")",
        "sortVowels(s = \"leetcode\")",
        "sortVowels(s = \"leetcode\")",
        "sortVowels(s = \"leetcode\")",
        "sortVowels(s = \"leetcode\")",
        "sortVowels(s = \"leetcode\")",
        "sortVowels(s = \"leetcode\")",
        "sortVowels(s = \"leetcode\")",
        "sortVowels(s = \"leetcode\")",
        "sortVowels(s = \"leetcode\")"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 1, 1, 1])"
    ],
    "sample_452": [
        "minChanges(s = \"1212\")",
        "minChanges(s = \"1212\")",
        "minChanges(s = \"1212\")",
        "minChanges(s = \"bbbab\")",
        "minChanges(s = \"bbbab\")",
        "minChanges(s
        "minChanges(s
        "minChanges(s = \"111000\")",
        "minChanges(s = \"1234567890\")",
        "minChanges(s = \"111000101\")"
    ],
    "sample_385": [
        "countPairs(nums = [1, 5, 3, 4, 2], target = 5)",
        "countPairs(nums = [1, 5, 3, 4, 2], target = 5)",
        "countPairs(nums = [1, 5, 3, 4, 2], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1, 1, 1, 1], target = 2)",
        "countPairs(nums = [1, 1, 1, 1], target = 2)",
        "countPairs(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], target = 4)"
    ],
    "sample_427": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2])"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [4,4,4,4,4])",
        "minLengthAfterRemovals(nums = [4,4,4,4,4])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [3, 4, 4, 5, 5, 5, 2, 10])",
        "minLengthAfterRemovals(nums = [3, 4, 4, 5, 5, 5, 2, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
        "minLengthAfterRemovals(nums = [3, 2, 2, 2, 1, 1, 1, 2, 2])"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\", \"code\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\", \"code\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"o\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"or\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\", \"java\"], x = \"or\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"ll\")"
    ],
    "sample_420": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 7)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 7)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 7)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 10)",
        "minOperations(nums = [1, 2, 3, 4], k = 2)",
        "minOperations(nums = [1, 2, 3, 4], k = 2)",
        "minOperations(nums = [1, 2, 3, 4], k = 1)"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 7)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)"
    ],
    "sample_365": [
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 7)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 7)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 7)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)"
    ],
    "sample_450": [
        "minChanges(s = \"aabbbc\")",
        "minChanges(s = \"aabbbc\")",
        "minChanges(s = \"aabbbc\")",
        "minChanges(s = \"aabbbc\")",
        "minChanges(s = \"aabbcce\")",
        "minChanges(s = \"aabbcce\")",
        "minChanges(s = \"aabbcdd\")",
        "minChanges(s = \"aabbccee\")",
        "minChanges(s = \"aabbc\")",
        "minChanges(s = \"aababbabbaa\")"
    ],
    "sample_463": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 4)"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6])",
        "sumCounts(nums = [1, 2, 2, 3, 4, 4, 4])",
        "sumCounts(nums = [1, 2, 2, 3, 4, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1"
    ],
    "sample_449": [
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aabbbc\")",
        "minChanges(s = \"aabbbc\")",
        "minChanges(s = \"aabbbc\")",
        "minChanges(s = \"aabbbc\")"
    ],
    "sample_425": [
        "minOperations(nums = [1, 1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1, 1])",
        "minOperations(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 2, 7, 7, 7, 8, 8, 8, 8, 8, 8])",
        "minOperations(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
        "minOperations(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 2, 7, 7, 7, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10])",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 4, 5, 6, 7, 8, 8, 9, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 1"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"zab\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"zab\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"az\")"
    ],
    "sample_377": [
        "minimumSeconds(nums = [3, 4, 2])",
        "minimumSeconds(nums = [3, 4, 2])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [3,4,2,1,4,5])",
        "minimumSeconds(nums = [3, 4, 2, 1, 3])",
        "minimumSeconds(nums = [3, 4, 2, 1, 3])",
        "minimumSeconds(nums = [3, 4, 2, 1, 3])",
        "minimumSeconds(nums = [1, 1, 1, 1, 1])",
        "minimumSeconds(nums = [1, 1, 1])",
        "minimumSeconds(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 100)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 100)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 100)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 100)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 100)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 7)"
    ],
    "sample_370": [
        "sortVowels(s = \"leetcode\")",
        "sortVowels(s = \"leetcode\")",
        "sortVowels(s = \"leetcode\")",
        "sortVowels(s = \"leetcode\")",
        "sortVowels(s = \"leetcode\")",
        "sortVowels(s = \"letocede\")",
        "sortVowels(s = \"letocede\")",
        "sortVowels(s = \"letocede\")",
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = \"letocede\")"
    ],
    "sample_421": [
        "minOperations(nums = [1, 1, 1, 1, 1], k = 2)",
        "minOperations(nums = [1, 1, 1, 1, 1], k = 2)",
        "minOperations(nums = [1, 1, 1, 1, 1], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 1)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 1)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 1)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[1, 2], [3, 4], [4, 5]], k = 2)",
        "countPairs(coordinates = [[1, 2], [3, 4], [4, 5]], k = 2)",
        "countPairs(coordinates = [[1, 2], [3, 4], [4, 5]], k = 2)",
        "countPairs(coordinates = [[1, 1], [2, 2], [1, 1]], k = 2)",
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [7, 8]], k = 2)",
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [7, 8]], k = 2)",
        "countPairs(coordinates = [[1, 1], [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [3, 1], [3, 2], [3, 3], [3, 4], [4, 1], [4, 2], [4, 3], [4, 4]], k = 2)",
        "countPairs(coordinates = [[1, 1], [2, 2], [1, 2], [2, 1]], k = 2)",
        "countPairs(coordinates = [[1, 1], [3, 0], [5, 1], [4, 4], [0, 5], [1, 10], [2, 2], [3, 3], [4, 1]], k = 2)",
        "countPairs(coordinates = [[1, 1], [2, 2], [1, 1], [1, 1], [2, 2], [3, 3], [2, 2]], k = 2)"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 1], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 1], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 1], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 1], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 1], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 1], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 1], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 6)"
    ],
    "sample_445": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6])",
        "sumCounts(nums = [1,2,3,4,5])"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "minimumBeautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "minimumBeautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "minimumBeautifulSubstrings(s = \"abcde\")"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])"
    ],
    "sample_401": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 1)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)"
    ],
    "sample_363": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 4])",
        "isGood(nums = [1, 2, 3, 4, 3, 2, 1])",
        "isGood(nums = [1, 2, 3, 4, 4, 4])",
        "isGood(nums = [1, 2, 3, 4, 4, 4])",
        "isGood(nums = [1, 2, 3, 4, 4, 4, 5])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [3, 2, 1, 2, 3])",
        "minimumSeconds(nums = [3, 2, 1, 2, 3])"
    ],
    "sample_376": [
        "minimumSeconds(nums = [1, 1, 1, 1, 1])",
        "minimumSeconds(nums = [1, 1, 1, 1, 1])",
        "minimumSeconds(nums = [1, 1, 1, 1, 1])",
        "minimumSeconds(nums = [1, 1, 1, 1, 1])",
        "minimumSeconds(nums = [3, 2, 1, 2, 3])",
        "minimumSeconds(nums = [3, 2, 1, 2, 3])",
        "minimumSeconds(nums = [1, 1, 1])",
        "minimumSeconds(nums = [1, 1, 1])",
        "minimumSeconds(nums = [1, 1, 1])",
        "minimumSeconds(nums = [1, 1, 1])"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5])",
        "minLengthAfterRemovals(nums = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,",
        "minLengthAfterRemovals(nums = [3, 1, 4, 1, 5])",
        "minLengthAfterRemovals(nums = [3, 2, 2, 2, 1])",
        "minLengthAfterRemovals(nums = [1,2,2,1])"
    ],
    "sample_399": [
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 1)",
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 1)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 4)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100], m = 3, k = 10)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 2, k = 3)"
    ],
    "sample_397": [
        "maxSum(nums = [1, 4, 1, 5, 7, 9, 2, 3], m = 3, k = 2)",
        "maxSum(nums = [1, 4, 1, 5, 7, 9, 2, 3], m = 3, k = 2)",
        "maxSum(nums = [1, 4, 1, 5, 7, 9, 2, 3], m = 3, k = 2)",
        "maxSum(nums = [1, 1, 1, 1, 1], m = 2, k = 2)",
        "maxSum(nums = [1, 1, 1, 1, 1], m = 2, k = 2)",
        "maxSum(nums = [1, 1, 1, 1, 1], m = 2, k = 2)",
        "maxSum(nums = [1, 4, 1, 5, 7, 9, 3, 4], m = 3, k = 2)",
        "maxSum(nums = [1, 4, 1, 5, 7, 9, 3, 4], m = 3, k = 3)",
        "maxSum(nums = [1, 1, 1, 1, 1], m = 1, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 2)"
    ],
    "sample_364": [
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1, 2, 3, 4])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 1])"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"o\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"apple\", \"ball\"], x = \"ll\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"carrot\"], x = \"a\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 3, 10])",
        "minimumCoins(prices = [1, 2, 3, 10])",
        "minimumCoins(prices = [1, 2, 3, 100])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"abcde\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bacd\")"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"zbcz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"zbcz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"zbcz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"zbcz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"zbcz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"zbax\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"zbax\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"zbcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"zbcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"zab\")"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 1, 1, 2, 2, 2, 2])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bacd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bacd\")"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 5, 3, 4, 2], target = 5)",
        "countPairs(nums = [1, 1, 1, 1], target = 2)",
        "countPairs(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], target = 7)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"abc\", s2 = \"acb\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"acb\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"acb\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"acb\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"acb\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"acb\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"azb\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"azb\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"azb\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"za\")"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"1\",\"prev\",\"prev\",\"2\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"1\",\"prev\",\"prev\",\"2\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"1\",\"prev\",\"prev\",\"2\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"1\",\"prev\",\"prev\",\"2\",\"prev\",\"prev\",\"prev\",\"3\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"1\",\"prev\",\"prev\",\"prev\",\"2\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"1\",\"prev\",\"prev\",\"prev\",\"prev\",\"2\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"1\",\"prev\",\"prev\",\"prev\",\"2\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"1\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"2\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"3\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"1\",\"prev\",\"prev\",\"2\",\"prev\",\"prev\",\"prev\",\"3\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"4\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"1\",\"prev\",\"prev\",\"2\",\"prev\",\"prev\",\"prev\",\"3\",\"prev\",\"prev\",\"prev\",\"prev\",\"4\",\"prev\",\"prev\",\"prev\",\"prev\",\"5\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"6\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"7\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\""
    ],
    "sample_416": [
        "countPairs(coordinates = [[1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [",
        "countPairs(coordinates = [[1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [",
        "countPairs(coordinates = [[1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [2, 2], [1, 1], [",
        "countPairs(coordinates = [[1, 1], [1, 2], [1, 3], [1, 4], [2, 1], [2, 2], [2, 3], [2, 4], [3, 1], [3, 2], [3, 3], [3, 4]], k = 1)",
        "countPairs(coordinates = [[1, 1], [1, 2], [1, 3], [1, 4], [2, 1], [2, 2], [2, 3], [2, 4], [3, 1], [3, 2], [3, 3], [3, 4]], k = 1)",
        "countPairs(coordinates = [[1, 1], [1, 2], [1, 3], [1, 4], [2, 1], [2, 2], [2, 3], [2, 4], [3, 1], [3, 2], [3, 3], [3, 4]], k = 1)",
        "countPairs(coordinates = [[1, 1], [1, 2], [1, 3], [1, 4], [2, 1], [2, 2], [2, 3], [2, 4], [3, 1], [3, 2], [3, 3], [3, 4], [4, 1], [4, 2], [4, 3], [4, 4]], k = 1)",
        "countPairs(coordinates = [[1, 1], [2, 2], [1, 1]], k = 1)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 4], [2, 3]], k = 2)",
        "countPairs(coordinates = [[1, 2], [2, 3], [2, 2], [2, 2], [3, 1], [2, 2], [3, 2], [1, 3], [2, 2], [2, 2]], k = 2)"
    ],
    "sample_451": [
        "minChanges(s = \"1212\")",
        "minChanges(s = \"1212\")",
        "minChanges(s = \"1212\")",
        "minChanges(s = \"1212\")",
        "minChanges(s = \"1212\")",
        "minChanges(s = \"1212\")",
        "minChanges(s = \"bbbab\")",
        "minChanges(s = \"bbbab\")",
        "minChanges(s = \"bbbab\")",
        "minChanges(s = \"1100\")"
    ],
    "sample_461": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 4)",
        "distributeCandies(n = 10, limit = 4)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bacd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bacd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bacd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bacd\")",
        "canBeEqual(s1 = \"aba\", s2 = \"baa\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bd\")"
    ],
    "sample_460": [
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 6, limit = 2)"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 10)",
        "accountBalanceAfterPurchase(p = 10)",
        "accountBalanceAfterPurchase(p = 10)",
        "accountBalanceAfterPurchase(p = 10)",
        "accountBalanceAfterPurchase(p = 10)",
        "accountBalanceAfterPurchase(p = 10)",
        "accountBalanceAfterPurchase(p = 10)",
        "accountBalanceAfterPurchase(p = 100)",
        "accountBalanceAfterPurchase(p = 9)",
        "accountBalanceAfterPurchase(p = 9)"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(nums = [1, 2, 3, 4, 1, 3])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6])",
        "sumCounts(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1, 1, 1, 1, 1])",
        "minimumSeconds(A = [1, 1, 1, 1, 1])",
        "minimumSeconds(A = [1, 1, 1, 1, 1])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ac\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ac\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ac\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [3, 5, 2, 1, 4])",
        "minimumRightShifts(nums = [3, 5, 2, 1, 4])"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8,9,9,9,9,9,10,10,10,10,10,11,11,11,11,11,12,12,12,12,12], l = 1, r = 10)",
        "countSubMultisets(nums = [1,1,2,2,2,2], l = 1, r = 3)",
        "countSubMultisets(nums = [1,1,2,2,2,2], l = 1, r = 3)",
        "countSubMultisets(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "countSubMultisets(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "countSubMultisets(nums = [1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,",
        "countSubMultisets(nums = [1, 2, 3, 4, 5], l = 2, r = 4)",
        "countSubMultisets(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], l = 1, r = 3)",
        "countSubMultisets(nums = [1,1,1,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,",
        "countSubMultisets(nums = [1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"prev\", \"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"prev\", \"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"prev\", \"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"prev\", \"prev\", \"prev\", \"4\", \"prev\", \"5\", \"prev\", \"prev\", \"prev\", \"1\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"prev\", \"prev\", \"prev\", \"4\", \"prev\", \"5\", \"prev\", \"prev\", \"prev\", \"prev\", \"6\", \"prev\", \"7\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"8\", \"prev\", \"9\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"10\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\","
    ],
    "sample_428": [
        "minOperations(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 2, 7, 7, 7, 8, 8, 8, 8, 8, 8])",
        "minOperations(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
        "minOperations(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minOperations(nums = [3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minOperations(nums = [3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minOperations(nums = [2, 2, 3, 3, 3, 4])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minOperations(nums = [3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2])"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"p0\", \"p1\", \"p2\", \"p3\", \"p4\"])",
        "lastVisitedIntegers(words = [\"p0\", \"p1\", \"p2\", \"p3\", \"p4\"])",
        "lastVisitedIntegers(words = [\"p0\", \"p1\", \"p2\", \"p3\", \"p4\"])",
        "lastVisitedIntegers(words = [\"p0\", \"p1\", \"p2\", \"p3\", \"p4\"])",
        "lastVisitedIntegers(words = [\"p0\", \"p1\", \"p2\", \"p3\", \"p4\"])",
        "lastVisitedIntegers(words = [\"p0\", \"p1\", \"p2\", \"p3\", \"p4\"])",
        "lastVisitedIntegers(words = [\"p0\", \"p1\", \"p0\", \"p2\"])",
        "lastVisitedIntegers(words = [\"p0\", \"p1\", \"p0\", \"p2\"])",
        "lastVisitedIntegers(words = [\"p0\", \"p1\", \"p0\", \"p2\"])",
        "lastVisitedIntegers(words = [\"p0\", \"p1\", \"p0\", \"p2\"])"
    ],
    "sample_379": [
        "minimumSeconds(nums = [3, 2, 1, 2, 7])",
        "minimumSeconds(nums = [3, 2, 1, 2, 7])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [3,4,2,1,4,5])",
        "minimumSeconds(nums = [3,4,2,1,4,5])",
        "minimumSeconds(nums = [3, 2, 1, 2, 3])"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"apple\", \"ball\"], x = \"ll\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"apple\", \"ball\"], x = \"ll\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "maxSubarrays(nums = [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "maxSubarrays(nums = [1, 0, 1, 0, 0, 1, 1, 0, 1])"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"1\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"1\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"1\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"1\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"1\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"1\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"1\",\"2\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"1\",\"2\",\"prev\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"prev\"])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 5, 3, 4, 2], target = 5)",
        "countPairs(nums = [1, 5, 3, 4, 2], target = 5)",
        "countPairs(nums = [1, 1, 1, 1], target = 2)",
        "countPairs(nums = [1, 1, 1, 1], target = 2)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abcd\", s2 = \"bcda\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"aabb\", s2 = \"bbaa\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcad\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcad\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bacd\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"1\",\"prev\",\"prev\",\"prev\",\"2\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"1\",\"prev\",\"prev\",\"prev\",\"2\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"1\",\"prev\",\"prev\",\"prev\",\"2\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"1\",\"prev\",\"prev\",\"prev\",\"2\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"1\",\"prev\",\"prev\",\"prev\",\"2\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"1\",\"prev\",\"2\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"1\",\"prev\",\"2\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"1\",\"prev\",\"prev\",\"2\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"1\",\"prev\",\"prev\",\"prev\",\"prev\",\"2\",\"prev\",\"prev\",\"prev\",\"3\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"1\",\"prev\",\"prev\",\"prev\",\"2\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"3\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"4\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev"
    ],
    "sample_464": [
        "distributeCandies(n = 2, limit = 3)",
        "distributeCandies(n = 2, limit = 3)",
        "distributeCandies(n = 2, limit = 3)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 10, limit = 4)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [3, 5, 2, 1, 4])",
        "minimumRightShifts(nums = [3, 5, 2, 1, 4])",
        "minimumRightShifts(nums = [3, 5, 2, 1, 4])",
        "minimumRightShifts(nums = [3, 5, 2, 1, 4])",
        "minimumRightShifts(nums = [3, 5, 2, 1, 4])",
        "minimumRightShifts(nums = [3, 5, 2, 1, 4])",
        "minimumRightShifts(nums = [3, 1, 5, 2, 4])",
        "minimumRightShifts(nums = [3, 5, 2, 1, 4])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"apple\", \"ball\"], x = \"ll\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"apple\", \"ball\"], x = \"ll\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"apple\", \"ball\"], x = \"ll\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"apple\", \"ball\"], x = \"ll\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"hi\", \"hiya\", \"hi\", \"hiya\"], x = \"hi\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"or\")"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 1)",
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 1)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], m = 3, k = 10)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 2, k = 3)"
    ],
    "sample_424": [
        "minOperations(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "minOperations(nums = [1,1,1,2,2,2])",
        "minOperations(nums = [1,1,1,2,2,2])",
        "minOperations(nums = [1,1,1,2,2,3])",
        "minOperations(nums = [3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "minOperations(nums = [3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "minOperations(nums = [3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "minOperations(nums = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2",
        "minOperations(nums = [3,3,3,3,10,10,10])",
        "minOperations(nums = [1,1,1,1,1,1,1,1,1,1])"
    ],
    "sample_417": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 7)"
    ],
    "sample_371": [
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = \"lympH\")",
        "sortVowels(s = \"lympH\")"
    ],
    "sample_465": [
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 5, limit = 2)"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3, 4, 1, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 1, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 1, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 1, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 1, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 1, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 1, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 1, 5])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4, 1, 5, 1, 2, 3, 4, 1, 6, 1, 7, 1, 8, 1, 9, 1, 10, 1])"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [1, 2, 2, 3, 4])"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"aabb\", s2 = \"bbaa\")",
        "canBeEqual(s1 = \"aabb\", s2 = \"bbaa\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cbad\")"
    ],
    "sample_380": [
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1, 1, 1, 1], target = 2)",
        "countPairs(nums = [1, 5, 3, 4, 2], target = 5)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 1, 1])",
        "sumCounts(nums = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4])"
    ],
    "sample_368": [
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = \"lympH\")",
        "sortVowels(s = \"lympH\")",
        "sortVowels(s = \"lympH\")",
        "sortVowels(s = \"lympH\")",
        "sortVowels(s = \"lympH\")",
        "sortVowels(s = \"lympH\")",
        "sortVowels(s = \"lymph\")"
    ],
    "sample_462": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 2)"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 2])"
    ],
    "sample_426": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minOperations(nums = [3, 3, 3, 3, 10])",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10])",
        "minOperations(nums = [3, 2, 1, 2, 3])"
    ],
    "sample_423": [
        "minOperations(nums = [1, 1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1, 1])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10])"
    ],
    "sample_476": [
        "minimumCoins(prices = [1,2,5,10,20])",
        "minimumCoins(prices = [1,2,5,10,20])",
        "minimumCoins(prices = [1,2,5,10,20])",
        "minimumCoins(prices = [1,2,5,10,20])",
        "minimumCoins(prices = [1,2,5,10,20])",
        "minimumCoins(prices = [1,2,5,10,20])",
        "minimumCoins(prices = [1,2,5,10,20])",
        "minimumCoins(prices = [1,2,5,10,20])",
        "minimumCoins(prices = [1,2,5,10,20])",
        "minimumCoins(prices = [1,2,3])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [3, 1, 2, 4])",
        "minimumRightShifts(nums = [3, 1, 2, 4])"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [2, 4, 3, 1, 2, 3, 4, 4, 4])"
    ],
    "sample_167": [
        "isAcronym(words = [\"dear\", \"thanks\", \"best\", \"regards\"], s = \"DTHB\")",
        "isAcronym(words = [\"dear\", \"thanks\", \"best\", \"regards\"], s = \"DTHB\")",
        "isAcronym(words = [\"dear\", \"thanks\", \"best\", \"regards\"], s = \"DTHB\")",
        "isAcronym(words = [\"dear\", \"thanks\", \"best\", \"regards\"], s = \"DTHB\")",
        "isAcronym(words = [\"dear\", \"thanks\", \"best\", \"regards\"], s = \"DTHB\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"debitcard\")",
        "isAcronym(words = [\"dear\", \"thanks\", \"best\", \"regards\"], s = \"Dearthanksbestregards\")",
        "isAcronym(words = [\"dear\", \"thanks\", \"best\", \"regards\"], s = \"Dearthanksbestregards\")",
        "isAcronym(words = [\"dear\", \"friend\"], s = \"AF\")",
        "isAcronym(words = [\"dear\", \"I\", \"have\", \"a\", \"friend\"], s = \"DIAF\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 2, k = 1)"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1, 5], [2, 3], [4, 7]])",
        "numberOfPoints(nums = [[1, 5], [2, 3], [4, 7]])",
        "numberOfPoints(nums = [[1, 5], [2, 3], [4, 7]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1, 5], [2, 4], [4, 5]])",
        "numberOfPoints(nums = [[1,2],[3,4],[5,6]])",
        "numberOfPoints(nums = [[1,1000000000]])",
        "numberOfPoints(nums = [[1,10],[2,3],[3,5],[4,10],[5,6],[7,8]])"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\", \"solving\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy_problem\", \"hard\"], separator = \"_\")",
        "splitWordsBySeparator(words = [\"easy_problem\", \"hard\"], separator = \"_\")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\", \"solving\", \"is\", \"easy\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\", \"solving\", \"is\", \"easy\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\", \"solving\", \"is\", \"easy\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \"as\")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \"as\")",
        "splitWordsBySeparator(words = [\"easy_problem\", \"hard_problem\"], separator = \"_\")"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[-2, 2], [-3, -1], [0, 2]])",
        "numberOfPoints(nums = [[-2, 2], [-3, -1], [0, 2]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1, 5], [2, 3], [4, 7]])",
        "numberOfPoints(nums = [[-2, 2], [3, 3]])",
        "numberOfPoints(nums = [[-2, 2], [3, 4], [-1, 0], [2, 3], [-3, -1]])"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3, 3])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(u = [1, 3, 2, 4, 2, 3, 1, 3, 5, 2])"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [4,2,1,3], x = 1)",
        "minAbsoluteDifference(nums = [4,2,1,3], x = 1)",
        "minAbsoluteDifference(nums = [4,2,1,3], x = 1)",
        "minAbsoluteDifference(nums = [4,2,1,3], x = 1)",
        "minAbsoluteDifference(nums = [4,2,1,3], x = 1)",
        "minAbsoluteDifference(nums = [4,2,1,3], x = 1)",
        "minAbsoluteDifference(nums = [4,2,1,3], x = 1)",
        "minAbsoluteDifference(nums = [4,2,1,3], x = 2)",
        "minAbsoluteDifference(nums = [4,2,1,3], x = 2)",
        "minAbsoluteDifference(nums = [4,2,1,3], x = 2)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [2, 3, 1, 5, 2], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 1, 5, 2], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 1, 5, 2], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 1, 7, 2, 5, 1, 4], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 1, 5, 7, 2, 2, 1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,5,2], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,5,2], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,7,2,5,7], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,1,1,1,3,0,0,0,0,2], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [2,3,1,6,4], modulo = 4, k = 2)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 11)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 11)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 11)",
        "canSplitArray(nums = [1, 4, 3, 2], m = 3)",
        "canSplitArray(nums = [1, 4, 3, 2], m = 3)",
        "canSplitArray(nums = [1, 4, 3, 2], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 10)"
    ],
    "sample_169": [
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEBIT\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEBIT\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEBIT\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEBIT\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEBIT\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEBIT\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEBIT\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEBIT\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEBIT\")",
        "isAcronym(words = [\"dear\", \"thanks\", \"best\", \"regards\"], s = \"DTHB\")"
    ],
    "sample_121": [
        "minimumIndex(nums = [3,4,5,1,2])",
        "minimumIndex(nums = [3,4,5,1,2])",
        "minimumIndex(nums = [3,4,5,1,2])",
        "minimumIndex(nums = [3,4,5,1,2])",
        "minimumIndex(nums = [3,4,5,1,2])",
        "minimumIndex(nums = [3,4,5,1,2])",
        "minimumIndex(nums = [3,4,5,1,2])",
        "minimumIndex(nums = [3,4,5,1,2])",
        "minimumIndex(nums = [1,2,3,4,5])",
        "minimumIndex(nums = [1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 6, offers = [[1, 3, 2], [2, 5, 3], [3, 6, 4]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 1], [2, 5, 3], [3, 6, 4], [4, 7, 5]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 1], [2, 5, 3], [3, 6, 4], [4, 7, 5]])",
        "maximizeTheProfit(n = 6, offers = [[1, 3, 2], [3, 5, 3], [5, 6, 1]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 1], [2, 5, 3], [3, 6, 4]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 1], [2, 5, 3], [3, 6, 4]])",
        "maximizeTheProfit(n = 6, offers = [[1, 3, 2], [3, 5, 3], [5, 6, 1], [6, 7, 2]])",
        "maximizeTheProfit(n = 6, offers = [[1, 3, 2], [3, 5, 2], [6, 7, 8]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 10], [2, 4, 20], [3, 10, 30]])",
        "maximizeTheProfit(n = 10, offers = [[1, 2, 1], [2, 5, 3], [3, 6, 4], [4, 7, 5], [5, 8, 6], [6, 9, 7], [7, 10, 8], [8, 11, 9], [9, 12, 10]])"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"R_LLL_RRR\")",
        "furthestDistanceFromOrigin(moves = \"R_LLL\")",
        "furthestDistanceFromOrigin(moves = \"R_LLL\")",
        "furthestDistanceFromOrigin(moves = \"R_LLL_RRR_LLL\")",
        "furthestDistanceFromOrigin(moves = \"R_LLL_RRR_L_R\")",
        "furthestDistanceFromOrigin(moves = \"RRLRRRLLRLL\")",
        "furthestDistanceFromOrigin(moves = \"R_LLL_RRR_L\")",
        "furthestDistanceFromOrigin(moves = \"RRLRRRRRLL\")",
        "furthestDistanceFromOrigin(moves = \"R_L_R_R\")",
        "furthestDistanceFromOrigin(moves = \"R_RR_L_L\")"
    ],
    "sample_149": [
        "finalString(s = \"iitss\")",
        "finalString(s = \"iitss\")",
        "finalString(s = \"iitss\")",
        "finalString(s = \"iitss\")",
        "finalString(s = \"iitss\")",
        "finalString(s = \"iitss\")",
        "finalString(s = \"iitss\")",
        "finalString(s = \"iitss\")",
        "finalString(s = 'string')",
        "finalString(s = 'string')"
    ],
    "sample_162": [
        "maxSum(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "maxSum(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "maxSum(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "maxSum(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "maxSum(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSum(nums = [10, 2, 3, 99, 90, 30, 20, 40, 50, 60, 70, 80, 90])",
        "maxSum(nums = [10, 2, 3, 99, 90, 30, 20, 40, 50, 60, 70, 80, 90])",
        "maxSum(nums = [10, 2, 3, 4, 5, 1])",
        "maxSum(nums = [10, 2, 3, 99, 90, 30, 20, 20])"
    ],
    "sample_230": [
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [2, 3, 1, 1, 4])",
        "countWays(nums = [2, 3, 1, 1, 2])",
        "countWays(nums = [2, 3, 1, 1, 3])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 3, target = 1)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 3, offers = [[1, 2, 1], [2, 3, 1], [3, 4, 1], [4, 5, 1], [5, 6, 1]])",
        "maximizeTheProfit(N = 3, offers = [[1, 1, 1], [2, 2, 2], [3, 3, 3], [2, 1, 1]])",
        "maximizeTheProfit(N = 3, offers = [[1, 1, 1], [2, 2, 2], [3, 3, 3], [2, 1, 1]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 3], [2, 3, 1], [3, 5, 1], [2, 5, 4], [5, 6, 1]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 3], [2, 3, 3], [3, 3, 3]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 3], [2, 3, 3], [3, 3, 3]])",
        "maximizeTheProfit(N = 3, offers = [[1, 1, 1], [2, 2, 1], [3, 3, 1]])",
        "maximizeTheProfit(N = 3, offers = [[1, 1, 1], [2, 2, 2], [3, 3, 3], [2, 1, 1], [1, 2, 1], [2, 3, 1], [1, 3, 1], [3, 2, 1], [3, 1, 2], [3, 1, 2]])",
        "maximizeTheProfit(N = 3, offers = [[1, 1, 1], [2, 1, 1], [3, 1, 1], [2, 2, 1]])",
        "maximizeTheProfit(N = 4, offers = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 3, 10], [3, 4, 10], [4, 5, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 3, 10], [3, 4, 10], [4, 5, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 3, 10], [3, 4, 10], [4, 5, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 3, 10], [3, 4, 10], [4, 5, 10]])",
        "maximizeTheProfit(n = 6, offers = [[1, 3, 2], [2, 5, 3], [3, 4, 4], [4, 5, 5], [5, 6, 100]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 10], [3, 4, 11], [5, 6, 20]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 10], [3, 4, 11], [5, 6, 20]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 10], [2, 3, 10], [3, 1, 20]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 10], [2, 3, 10], [3, 1, 20]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [3, 4, 11], [5, 6, 20]])"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10, 10, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10, 10, 10, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], target = 10)"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,",
        "countCompleteSubarrays(nums = [1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,",
        "countCompleteSubarrays(nums = [1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,",
        "countCompleteSubarrays(nums = [1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1,1,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,",
        "countCompleteSubarrays(nums = [1,1,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,",
        "countCompleteSubarrays(nums = [1,1,2,1,1])",
        "countCompleteSubarrays(nums = [1,1,2,1,1])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5, 6])",
        "countWays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countWays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countWays(nums = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,",
        "countWays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countWays(nums = [1, 2, 2, 3, 4])"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(usageLimits = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
        "maxIncreasingGroups(usageLimits = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [2, 3, 1, 2, 3, 2, 3, 3])",
        "maxIncreasingGroups(usageLimits = [2, 2, 1, 2, 1, 2, 1, 2, 1, 2])",
        "maxIncreasingGroups(usageLimits = [2, 3, 1, 2, 3, 3, 2, 2, 2])"
    ],
    "sample_173": [
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 2, k = 3)"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1,2,1,2,3,4,2], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [1,2,1,2,3,4,2], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [1,2,1,2,3,4,2], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [1,1,1,1,3,3,4,3,2,2,2], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 3, 4, 2], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 3, 4, 2], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 3, 4, 2], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 3, 4, 2], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 2, k = 1)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3, 3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3, 3, 3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3, 3, 3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5])",
        "countCompleteSubarrays(nums = [1, 1, 2, 1, 2, 3, 2, 3, 3, 3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 1, 1, 1, 1])"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 2, 2, 3], k = 2)"
    ],
    "sample_170": [
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEBIT\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEBIT\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEBIT\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEBIT\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEBIT\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEBIT\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEBIT\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEBIT\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEBIT\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEFT\")"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = '1100101')"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3, 3, 4, 7])",
        "countWays(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 4, 5])",
        "countWays(nums = [1, 1, 2, 3, 3, 4, 7, 7, 8])",
        "countWays(nums = [1, 2, 3, 4, 4])",
        "countWays(nums = [1, 2, 3, 4, 4, 4, 5])",
        "countWays(nums = [1, 2, 2, 3, 4])",
        "countWays(nums = [1, 1, 2, 3, 4, 4, 5, 5, 5])",
        "countWays(nums = [1, 1, 2, 3, 4, 4, 5, 5, 5, 6])"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 5, 20]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 5, 20]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 1], [2, 5, 3]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 1], [2, 5, 3]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 1], [2, 5, 3]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 1], [2, 5, 3]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 1], [2, 5, 3]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 1], [2, 5, 3]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 100], [2, 5, 200], [3, 4, 300]])",
        "maximizeTheProfit(n = 6, offers = [[2, 2, 2], [2, 3, 7], [3, 3, 6]])"
    ],
    "sample_122": [
        "minimumIndex(nums = [4,4,3,3,4,4])",
        "minimumIndex(nums = [4,4,3,3,4,4])",
        "minimumIndex(nums = [1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,",
        "minimumIndex(nums = [1,1,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,",
        "minimumIndex(nums = [1,1,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,",
        "minimumIndex(nums = [4, 4, 3, 3, 4, 4])",
        "minimumIndex(nums = [4,4,4,4,4])",
        "minimumIndex(nums = [1,2,3,4,5])",
        "minimumIndex(nums = [1,1,2,2,2,2,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,",
        "minimumIndex(nums = [1,1,1,1,1])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\", \"d\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\", \"d\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\", \"d\"], separator = \"d\")",
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\", \"d\"], separator = \"d\")",
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\", \"d\"], separator = \"d\")",
        "splitWordsBySeparator(words = [\"abc\", \"def\", \"ghi\"], separator = \"d\")",
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\"], separator = \"d\")",
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\"], separator = \"d\")",
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\", \"d\"], separator = \"b\")",
        "splitWordsBySeparator(words = [\"hello\", \"world\", \"hi\", \"there\"], separator = \"o\")"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 3, target = 1)"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 1, 3, 2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 1, 3, 2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 1, 3, 2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 1, 3, 2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 1, 3, 2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 1, 3, 2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 1, 2, 1], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 1, 2, 1], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 1, 2, 1], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 1, 3, 2], m = 2, k = 1)"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 3, 4, 1, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 1, 3, 4, 1, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 1, 3, 4, 5, 0], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 1, 3, 4, 1, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [12,15,1024], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 2, 2], k = 2)",
        "sumIndicesWithKSetBits(nums = [12, 17, 22], k = 2)"
    ],
    "sample_203": [
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(num = \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(num
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1,1,1,1,3,3,3,3,3], modulo = 2, k = 3)",
        "countInterestingSubarrays(nums = [1,1,1,1,3,3,3,3,3], modulo = 2, k = 3)",
        "countInterestingSubarrays(nums = [1,1,1,1,3,3,3,3,3], modulo = 2, k = 3)",
        "countInterestingSubarrays(nums = [1,1,1,1,3,3,3,3,3], modulo = 2, k = 3)",
        "countInterestingSubarrays(nums = [1,1,1,1,3,3,3,3,3], modulo = 2, k = 3)",
        "countInterestingSubarrays(nums = [1,1,1,1,3,3,3,3,3], modulo = 2, k = 3)",
        "countInterestingSubarrays(nums = [1,1,1,1,3,3,3,3,3], modulo = 2, k = 3)",
        "countInterestingSubarrays(nums = [1,2,3,3], modulo = 3, k = 3)",
        "countInterestingSubarrays(nums = [2,3,1,5,6,2], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,5,2], modulo = 3, k = 2)"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1, 2, 1, 2, 3], K = 0)",
        "longestEqualSubarray(A = [1, 2, 1, 2, 3], K = 0)",
        "longestEqualSubarray(A = [1, 2, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4], K = 3)",
        "longestEqualSubarray(A = [1,2,1,2,3,4,5,2], K = 3)",
        "longestEqualSubarray(A = [1,2,1,2,3,4,5,2,3], K = 3)",
        "longestEqualSubarray(A = [1,2,1,2,3,4,5,2,3], K = 3)",
        "longestEqualSubarray(A = [1,1,1,2,2,3], K = 0)",
        "longestEqualSubarray(A = [1,1,1,2,2,3], K = 0)",
        "longestEqualSubarray(A = [1,1,1,2,2,2,3,3,3,4,4,4,4], K = 1)",
        "longestEqualSubarray(A = [1, 2, 1, 2, 3, 4, 1, 2, 1, 2, 3, 4, 1, 2, 1, 2, 3, 4], K = 3)"
    ],
    "sample_146": [
        "finalString(s = 'pinter')",
        "finalString(s = 'pinter')",
        "finalString(s = 'pinter')",
        "finalString(s = 'pinter')",
        "finalString(s = 'pinter')",
        "finalString(s = 'pinter')",
        "finalString(s = 'pint')",
        "finalString(s = 'pinter')",
        "finalString(s = 'pinter')",
        "finalString(s = 'pinter')"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10, 10, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 4)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 3], [0, 0], [3, 4]])",
        "numberOfPoints(nums = [[1, 3], [0, 0], [3, 4]])",
        "numberOfPoints(nums = [[1, 3], [0, 0], [3, 4]])",
        "numberOfPoints(nums = [[1, 3], [0, 0], [3, 4]])",
        "numberOfPoints(nums = [[1, 3], [0, 0], [3, 4]])",
        "numberOfPoints(nums = [[1, 3], [0, 0], [2, 6]])",
        "numberOfPoints(nums = [[1, 3], [0, 0], [2, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 3, offers = [[1, 1, 100], [2, 2, 100], [3, 3, 200]])",
        "maximizeTheProfit(n = 3, offers = [[1, 1, 100], [2, 2, 100], [3, 3, 200]])",
        "maximizeTheProfit(n = 3, offers = [[1, 1, 100], [2, 2, 100], [3, 3, 200]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 100], [2, 3, 100], [3, 4, 100]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 100], [2, 5, 100], [3, 4, 100]])",
        "maximizeTheProfit(n = 5, offers = [[1, 0, 1], [2, 1, 3], [3, 2, 4], [3, 0, 1], [3, 1, 100]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,100],[2,5,200],[3,4,300]])",
        "maximizeTheProfit(n = 5, offers = [[1, 0, 1], [2, 1, 1], [4, 2, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 0, 1], [2, 1, 3], [3, 2, 4], [3, 0, 1], [2, 0, 2], [1, 4, 100], [5, 3, 100]])",
        "maximizeTheProfit(n = 5, offers = [[1, 0, 1], [2, 1, 1], [3, 2, 1], [3, 0, 1]])"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"LLRRLLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLLR\")",
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves = \"LLRRRR_LL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRRR_LL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRRRRR_\")"
    ],
    "sample_175": [
        "minimumSum(n = 3, k = 9)",
        "minimumSum(n = 3, k = 9)",
        "minimumSum(n = 3, k = 9)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 6)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1,2],[3,4],[5,6]])",
        "numberOfPoints(nums = [[1,1],[2,2],[3,3],[4,4],[5,5]])",
        "numberOfPoints(nums = [[1,1],[2,2],[3,3],[4,4]])"
    ],
    "sample_205": [
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(num = \"00255075\")",
        "minimumOperations(num = \"00105025\")"
    ],
    "sample_120": [
        "minimumIndex(nums = [4, 4, 3, 3, 4, 4])",
        "minimumIndex(nums = [4, 4, 3, 3, 4, 4])",
        "minimumIndex(nums = [4, 4, 3, 3, 4, 4])",
        "minimumIndex(nums = [4, 4, 3, 3, 4, 4])",
        "minimumIndex(nums = [4, 4, 3, 3, 4, 4])",
        "minimumIndex(nums = [4, 4, 3, 3, 4, 4])",
        "minimumIndex(nums = [4, 4, 3, 3, 4, 4])",
        "minimumIndex(nums = [4, 5, 6])",
        "minimumIndex(nums = [4, 4, 3, 3, 4, 4])",
        "minimumIndex(nums = [1, 1, 2, 2, 3])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"LLRRRRR_\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRRR_\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRRLL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRR_LL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRR_LL_L\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLLRLL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRRR_LL\")",
        "furthestDistanceFromOrigin(moves = \"L_RRR\")",
        "furthestDistanceFromOrigin(moves = \"L_R_L_L_R_R_R_L_L_L_R_L_R_L_L_R_L_R_R_R_R_L_L_R_R_L_L_R_R_R_L_L_R_R_R_L_L_R_L_R_R_R_R_R_L_L_L_L_R_L_L_R_R_L_L_R_L_R_R_R_R_R_L_L_L_R_L_R_L_R_L_R_R_R_L_R_R_R_L_L_R_L_R_R_R_R_L_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_"
    ],
    "sample_161": [
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [1, 2, 3, 4])"
    ],
    "sample_160": [
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSum(nums = [10, 2])",
        "maxSum(nums = [10, 2])",
        "maxSum(nums = [10, 2])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19])",
        "maxSum(nums = [12,24,8,32])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = [\"one|two|three\", \"four|five|six\"], separator = \"|\")",
        "splitWordsBySeparator(words = [\"one|two|three\", \"four|five|six\"], separator = \"|\")",
        "splitWordsBySeparator(words = ['one|two|three', 'four|five|six'], separator = '|')",
        "splitWordsBySeparator(words = ['one|two|three', 'four|five|six'], separator = '|')",
        "splitWordsBySeparator(words = ['one|two|three', 'four|five|six'], separator = '|')",
        "splitWordsBySeparator(words = [\"one|two|three\", \"four|five|six\"], separator = \"|\")",
        "splitWordsBySeparator(words = ['one|two|three', 'four|five|six'], separator = '|')",
        "splitWordsBySeparator(words = [\"one|two|three\", \"four|five|six\"], separator = \"|\")",
        "splitWordsBySeparator(words = [\"one|two|three\", \"four|five|six\"], separator = \"|\")",
        "splitWordsBySeparator(words = ['one|two|three', 'four|five|six'], separator = '|')"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10, 10, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 10, 12], target = 10)"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5], target = 4)"
    ],
    "sample_171": [
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)"
    ],
    "sample_159": [
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums = [1,2,3,4])",
        "maxSum(nums = [1,2,3,4])",
        "maxSum(nums = [1,2,3,4])",
        "maxSum(nums = [1,2,3,4,5,6])",
        "maxSum(nums = [1,1,1,1])",
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums = [10, 2, 3, 4])",
        "maxSum(nums = [10, 11, 12, 13, 14])",
        "maxSum(nums = [10, 2, 5, 1, 8, 20])"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 4, 3, 2], m = 3)",
        "canSplitArray(nums = [1, 4, 3, 2], m = 3)",
        "canSplitArray(nums = [1, 4, 3, 2], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 11)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"abc\", \"def\"], separator = \"d\")",
        "splitWordsBySeparator(words = [\"abc\", \"def\"], separator = \"d\")",
        "splitWordsBySeparator(words = [\"abc\", \"def\"], separator = \"d\")",
        "splitWordsBySeparator(words = [\"abc\", \"def\"], separator = \"d\")",
        "splitWordsBySeparator(words = [\"abc\", \"def\"], separator = \"d\")",
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\", \"d\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"apple\", \"orange\", \"banana\"], separator = \"ae\")",
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"hello\", \"world\"], separator = \"o\")",
        "splitWordsBySeparator(words = [\"apple\", \"orange\", \"banana\"], separator = \"a\")"
    ],
    "sample_172": [
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)"
    ],
    "sample_228": [
        "countWays(nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
        "countWays(nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [0,1,0,1,1])",
        "countWays(nums = [0,1,0,1,1])",
        "countWays(nums = [0,1,0,1,1])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countWays(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countWays(nums = [0, 1, 0, 1, 1])"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = \"00101101\")",
        "maximumOddBinaryNumber(s = '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = '10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010",
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = \"0110\")",
        "maximumOddBinaryNumber(s = '1110001')",
        "maximumOddBinaryNumber(s
    ],
    "sample_119": [
        "minimumIndex(nums = [1, 1, 2, 2, 2, 2])",
        "minimumIndex(nums = [1, 1, 2, 2, 2, 2])",
        "minimumIndex(nums = [1, 1, 2, 2, 2, 2])",
        "minimumIndex(nums = [1, 1, 2, 2, 2, 2])",
        "minimumIndex(nums = [1, 1, 2, 2, 2, 2])",
        "minimumIndex(nums = [1, 1, 2, 2, 2, 2])",
        "minimumIndex(nums = [1, 1, 2, 2, 2, 2])",
        "minimumIndex(nums = [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
        "minimumIndex(nums = [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
        "minimumIndex(nums = [1, 1, 2, 2, 3, 1])"
    ],
    "sample_153": [
        "canSplitArray(nums = [1,4,3,2,7,10], m = 18)",
        "canSplitArray(nums = [1,4,3,2,7,10,10,11,12,9,8,10,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "canSplitArray(nums = [1,4,3,2,7,10,10,11,12,8,12,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "canSplitArray(nums = [1,4,3,2,7,10,10,11,12,8,12,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "canSplitArray(nums = [1,4,2,3,1,3], m = 3)",
        "canSplitArray(nums = [1,4,2,3,1,3], m = 3)",
        "canSplitArray(nums = [1,4,3,2,7,10,10,12,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "canSplitArray(nums = [1,4,2,5,1,3,1,3,7,2], m = 12)",
        "canSplitArray(nums = [1,4,3,2,7,10,10,11,12,9,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,",
        "canSplitArray(nums = [1,4,3,2,7,10,10,11,12,9,8,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,"
    ],
    "sample_147": [
        "finalString(s = \"iitss\")",
        "finalString(s = \"iitss\")",
        "finalString(s = \"iitss\")",
        "finalString(s = \"iitss\")",
        "finalString(s = 'string')",
        "finalString(s = 'this is a string')",
        "finalString(s = 'this is a string')",
        "finalString(s = 'this is a string')",
        "finalString(s = 'this is a test')",
        "finalString(s = \"rtsng\")"
    ],
    "sample_174": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 5)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1,4,3,2], m = 3)",
        "canSplitArray(nums = [1,4,3,2], m = 3)",
        "canSplitArray(nums = [1,4,3,2], m = 3)",
        "canSplitArray(nums = [1,4,3,2], m = 3)",
        "canSplitArray(nums = [1,4,3,2], m = 3)",
        "canSplitArray(nums = [1,4,3,2], m = 3)",
        "canSplitArray(nums = [1,4,3,2], m = 3)",
        "canSplitArray(nums = [1,4,3,2], m = 3)",
        "canSplitArray(nums = [1, 4, 3, 2], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 1)"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1,1,2,1,1])"
    ],
    "sample_150": [
        "finalString(s = 'this is a test')",
        "finalString(s = 'this is a test')",
        "finalString(s = 'this is a test')",
        "finalString(s = 'this is a test')",
        "finalString(s = 'this is a test')",
        "finalString(s = \"iitss\")",
        "finalString(s = \"iitss\")",
        "finalString(s = \"iitss\")",
        "finalString(s = \"iitss\")",
        "finalString(s = \"iitss\")"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)"
    ],
    "sample_176": [
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [2,3,1,6,4], modulo = 4, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,6,4], modulo = 4, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,6,4], modulo = 4, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,6,4], modulo = 4, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,6,4], modulo = 4, k = 2)",
        "countInterestingSubarrays(nums = [1,1,1,1,3,3,3,3,3], modulo = 2, k = 3)",
        "countInterestingSubarrays(nums = [1,1,1,1,3,3,3,3,3], modulo = 2, k = 3)",
        "countInterestingSubarrays(nums = [1,1,1,1,3,3,3,3,3], modulo = 3, k = 3)",
        "countInterestingSubarrays(nums = [1,1,1,1,3,3,3,3,3], modulo = 3, k = 3)",
        "countInterestingSubarrays(nums = [2,3,1,4,5,1,2], modulo = 3, k = 2)"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 2)"
    ],
    "sample_151": [
        "finalString(s = 'rtsng')",
        "finalString(s = 'rtsng')",
        "finalString(s = 'rtsng')",
        "finalString(s = 'rtsng')",
        "finalString(s = 'iitss')",
        "finalString(s = 'iitss')",
        "finalString(s = 'this is a test')",
        "finalString(s = 'this is a string')",
        "finalString(s = \"iitss\")",
        "finalString(s = \"iitss\")"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 0], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 0], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 0], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], k = 1)"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(usageLimits = [2, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "maxIncreasingGroups(usageLimits = [2, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "maxIncreasingGroups(usageLimits = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2",
        "maxIncreasingGroups(usageLimits = [2, 3, 4, 5, 6, 7, 8])"
    ],
    "sample_204": [
        "minimumOperations(s = \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(s = \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(s
        "minimumOperations(s
        "minimumOperations(s
        "minimumOperations(s
        "minimumOperations(s
        "minimumOperations(s
        "minimumOperations(s
        "minimumOperations(s = \"001101\")"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 14, 12, 13, 15], target = 13)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 14, 12, 13, 14, 15, 16, 17, 18], target = 14)"
    ],
    "sample_148": [
        "finalString(s = \"pint\")",
        "finalString(s = \"pint\")",
        "finalString(s = \"pint\")",
        "finalString(s = \"pint\")",
        "finalString(s = \"pint\")",
        "finalString(s = 'pinter')",
        "finalString(s = 'pinter')",
        "finalString(s = 'pinter')",
        "finalString(s = 'pinter')",
        "finalString(s = \"pinter\")"
    ],
    "sample_168": [
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEBIT\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEBIT\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEBIT\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEBIT\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEBIT\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEBIT\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEBIT\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEBIT\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEB\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEF\")"
    ],
    "sample_201": [
        "minOperations(nums = [1, 1, 1, 1, 1], target = 3)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 3)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 3)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 3)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 3)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 3)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 3)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 3)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 3)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 3)"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '1010')",
        "maximumOddBinaryNumber(s
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = '00101101')",
        "maximumOddBinaryNumber(s = '00110011')",
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = '1010')",
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = '001100110011')"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 13)",
        "minimumPossibleSum(n = 3, target = 13)",
        "minimumPossibleSum(n = 3, target = 13)"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 2, target = 3)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10, 10, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], target = 40)"
    ],
    "sample_231": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0])",
        "countWays(nums = [1, 1, 2, 3, 4, 4, 5, 6, 6, 6])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"LLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLLLLLLRRRRRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLLLLLLRRRRRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLLLLLLRRRRRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLLRLL\")",
        "furthestDistanceFromOrigin(moves = \"LLLLLLRRRRRR\")"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 4)"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3, 3, 3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5])",
        "countCompleteSubarrays(nums = [1, 1, 2, 3, 2, 3, 2, 3, 4, 2])"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 4, 3, 2], m = 3)",
        "canSplitArray(nums = [1, 4, 3, 2], m = 3)",
        "canSplitArray(nums = [1, 4, 3, 2], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 4)"
    ],
    "sample_200": [
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 100)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 16)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 3, 4, 5, 0], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], k = 3)"
    ],
    "sample_165": [
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEBIT\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEBIT\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEBIT\")",
        "isAcronym(words = [\"dear\", \"friend\"], s = \"DF\")",
        "isAcronym(words = [\"dear\", \"friend\"], s = \"DF\")",
        "isAcronym(words = [\"dear\", \"I\", \"love\", \"you\"], s = \"DILY\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEF\")",
        "isAcronym(words = [\"dear\", \"I\", \"have\", \"a\", \"friend\"], s = \"DIAF\")",
        "isAcronym(words = [\"dear\", \"I\", \"have\", \"a\", \"friend\"], s = \"DIAF\")",
        "isAcronym(words = [\"dear\", \"I\", \"have\", \"a\", \"friend\"], s = \"DIAF\")"
    ],
    "sample_227": [
        "countWays(nums = [1, 2, 2, 3, 4, 7])",
        "countWays(nums = [1, 2, 2, 3, 4, 7])",
        "countWays(nums = [1, 2, 2, 3, 4, 7])",
        "countWays(nums = [1, 2, 2, 3, 4, 7])",
        "countWays(nums = [1, 2, 2, 3, 4, 7])",
        "countWays(nums = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5",
        "countWays(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "countWays(nums = [1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9, 10])",
        "countWays(nums = [1, 2, 3, 4, 5, 5, 5, 6])",
        "countWays(nums = [1, 2, 3, 4, 5, 5, 5, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_158": [
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [10, 2, 5, 1, 8, 20])",
        "maxSum(nums = [1, 1, 1, 1])",
        "maxSum(nums = [10, 10, 10, 10])"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 2, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 2, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 2, 2, 3], k = 2)"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 5, 3], [3, 4, 4], [4, 5, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 5, 3], [3, 4, 4], [4, 5, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 5, 3], [3, 4, 4], [4, 5, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 0, 5], [2, 1, 1], [4, 2, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 0, 5], [2, 1, 1], [4, 2, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 3, 10], [3, 5, 20], [4, 5, 20]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 10], [2, 3, 10], [3, 4, 10]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 10], [2, 3, 10], [3, 4, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 0, 5], [2, 5, 10], [4, 0, 10], [3, 4, 10], [5, 2, 500]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 3], [2, 4, 10], [3, 1, 1], [2, 1, 2]])"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,1,2,1,2], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 2, 2], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 2, 2], k = 2)"
    ],
    "sample_207": [
        "minimumOperations(num = \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(num = \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(num = \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(num = \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(num = \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(num = \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"25000\")",
        "minimumOperations(num = \"00025\")"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"LLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLLRLL\")",
        "furthestDistanceFromOrigin(moves = \"RLLLLRRRRLLR\")",
        "furthestDistanceFromOrigin(moves = \"RLLLLRRRRLLRLLLLRRRR\")"
    ],
    "sample_206": [
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num
        "minimumOperations(num = \"0000\")"
    ],
    "sample_155": [
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 11)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 11)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 11)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 11)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3, 3])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 2, 1, 2, 3, 2, 1])"
    ],
    "sample_202": [
        "minimumOperations(num
        "minimumOperations(num
        "minimumOperations(num
        "minimumOperations(num
        "minimumOperations(num
        "minimumOperations(num = \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(num
        "minimumOperations(num
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"100100\")"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [\"a\", \"b\", \"c\"], b = \"d\")",
        "splitWordsBySeparator(a = [\"a\", \"b\", \"c\"], b = \"d\")",
        "splitWordsBySeparator(a = [\"a\", \"b\", \"c\"], b = \"d\")",
        "splitWordsBySeparator(a = [\"a\", \"b\", \"c\"], b = \"d\")",
        "splitWordsBySeparator(a = [\"a\", \"b\", \"c\"], b = \"d\")",
        "splitWordsBySeparator(a = [\"a\", \"b\", \"c\"], b = \"d\")",
        "splitWordsBySeparator(a = [\"a\", \"b\", \"c\"], b = \"d\")",
        "splitWordsBySeparator(a = [\"a\", \"b\", \"c\", \"d\"], b = \"d\")",
        "splitWordsBySeparator(a = [\"a\", \"b\", \"c\", \"d\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"a\", \"b\", \"c\", \"d\"], b = \" \")"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 1, 3, 4, 1, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 1, 3, 4, 1, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 1, 3, 4, 1, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 1, 3, 4, 1, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 1, 3, 4, 1, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 3, 4, 5, 0], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], k = 2)"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = '101010')",
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = '1110')",
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = '10101')",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = '0110')"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 0)"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = '1010')",
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
    ],
    "sample_166": [
        "isAcronym(words = [\"debit\", \"card\"], s = \"debitcard\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"debitcard\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"debitcard\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"debitcard\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"debitcard\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"debitcard\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"debitcard\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"debitcard\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"debit card\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"debit card\")"
    ],
    "sample_163": [
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [10, 100, 1000])",
        "maxSum(nums = [10, 10, 10, 10, 10])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,",
        "continuousSubarrays(a = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,",
        "continuousSubarrays(a = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,",
        "continuousSubarrays(a = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,",
        "continuousSubarrays(a = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2])",
        "continuousSubarrays(a = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2])",
        "continuousSubarrays(a = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2])",
        "continuousSubarrays(a = [1, 2, 1, 2, 1])",
        "continuousSubarrays(a = [1, 2, 1, 2, 1, 2, 1, 2, 1])",
        "continuousSubarrays(a = [1, 2, 1, 2, 1, 2, 1, 2, 1])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays(nums = [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2",
        "continuousSubarrays(nums = [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2",
        "continuousSubarrays(nums = [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2",
        "continuousSubarrays(nums = [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2",
        "continuousSubarrays(nums = [2, 2, 2, 1, 2, 2, 1, 2, 2, 2])",
        "continuousSubarrays(nums = [1, 2, 3, 4])",
        "continuousSubarrays(nums = [1, 2, 3, 4])",
        "continuousSubarrays(nums = [2,2,2,2,2])"
    ],
    "sample_8": [
        "colorTheArray(n = 5, queries = [[0, 0], [1, 1], [2, 2], [2, 0], [3, 1], [3, 2], [4, 0]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 1], [2, 2], [2, 0], [3, 1], [3, 2], [4, 0]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 1], [2, 2], [2, 0], [3, 1], [3, 2], [4, 0]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 1], [2, 2], [2, 3], [3, 0], [3, 1], [4, 0]])",
        "colorTheArray(n = 5, queries = [[0, 0], [4, 1], [4, 1], [2, 0], [2, 0], [3, 1]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 1], [2, 2], [2, 3], [3, 3], [3, 4], [4, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 2], [4, 2], [5, 2]])",
        "colorTheArray(n = 5, queries = [[0, 0], [4, 1], [4, 1], [2, 0], [1, 1], [2, 1], [2, 1], [4, 0]])",
        "colorTheArray(n = 5, queries = [[0, 0], [4, 1], [4, 1], [2, 0], [1, 1], [2, 0], [3, 1], [0, 0], [3, 1], [0, 0], [4, 1], [4, 1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 3], [4, 4], [0, 0], [2, 2], [2, 3], [3, 3], [3, 4], [4, 4]])"
    ],
    "sample_97": [
        "maximumJumps(nums = [1,2,3,4,5,5,1,2,3], target = 10)",
        "maximumJumps(nums = [1,2,3,4,5,5,1,2,3], target = 10)",
        "maximumJumps(nums = [1,2,3,4,5,5,1,2,3], target = 10)",
        "maximumJumps(nums = [1,2,3,4,5,5,1,2,3], target = 10)",
        "maximumJumps(nums = [1,2,3,4,5,6,7,8,9,10], target = 10)",
        "maximumJumps(nums = [1,2,3,4,5], target = 100)",
        "maximumJumps(nums = [1,2,3,4,5], target = 100)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 10)",
        "maximumJumps(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100], target = 100)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 1)"
    ],
    "sample_22": [
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")"
    ],
    "sample_7": [
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 2], [3, 3], [3, 3], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 2], [3, 3], [3, 3], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 2], [3, 3], [3, 3], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 2], [3, 3], [3, 3], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 2], [3, 3], [3, 3], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 2], [3, 3], [3, 3], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 2], [3, 3], [3, 3], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 2], [3, 3], [3, 3], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 2], [3, 3], [3, 3], [4, 3], [4, 3]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 2], [3, 3], [3, 3], [3, 1], [4, 2]])"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [2, 4], [3, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [2, 4], [3, 4], [4, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [2, 4], [3, 4], [4, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 2], [4, 2], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [2, 4], [3, 4], [1, 3], [4, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [2, 2], [1, 1], [2, 1], [2, 2], [4, 3]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 3], [3, 3], [4, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [2, 2], [1, 1], [1, 2], [2, 3], [3, 4], [4, 5], [1, 2], [2, 3], [3, 4], [4, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [2, 2], [1, 2], [2, 3], [3, 4], [4, 5], [2, 2], [1, 2], [2, 3], [3, 4], [4, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [2, 2], [1, 2], [2, 3], [3, 4], [4, 5], [2, 2], [1, 2], [2, 3], [3, 4], [4, 5]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [1,2,3,4,5,6,7,8,9,10])",
        "semiOrderedPermutation(nums = [1,2,3,4,5,6,7,8,9,10])",
        "semiOrderedPermutation(nums = [1,2,3,4,5,6,7,8,9])",
        "semiOrderedPermutation(nums = [1,2,3,4,5,6,7,8])"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 3], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 3], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,"
    ],
    "sample_33": [
        "removeTrailingZeros(num = \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "removeTrailingZeros(num
        "removeTrailingZeros(num
        "removeTrailingZeros(num
        "removeTrailingZeros(num = \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "removeTrailingZeros(num
        "removeTrailingZeros(num
        "removeTrailingZeros(num
        "removeTrailingZeros(num
        "removeTrailingZeros(num = '512301')"
    ],
    "sample_50": [
        "smallestString(s = \"abab\")",
        "smallestString(s = \"aab\")",
        "smallestString(s = \"aab\")",
        "smallestString(s = \"abba\")",
        "smallestString(s = \"abba\")",
        "smallestString(s = \"ba\")",
        "smallestString(s = \"baa\")",
        "smallestString(s = \"abaab\")",
        "smallestString(s = \"abaab\")",
        "smallestString(s = \"bbabba\")"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 10, additionalTank = 10)",
        "distanceTraveled(mainTank = 10, additionalTank = 10)",
        "distanceTraveled(mainTank = 10, additionalTank = 10)",
        "distanceTraveled(mainTank = 10, additionalTank = 10)",
        "distanceTraveled(mainTank = 10, additionalTank = 10)",
        "distanceTraveled(mainTank = 10, additionalTank = 10)",
        "distanceTraveled(mainTank = 10, additionalTank = 10)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)"
    ],
    "sample_118": [
        "minimumIndex(nums = [4, 5, 6])",
        "minimumIndex(nums = [4, 5, 6])",
        "minimumIndex(nums = [4, 5, 6])",
        "minimumIndex(nums = [4, 5, 6])",
        "minimumIndex(nums = [4, 5, 6])",
        "minimumIndex(nums = [4, 5, 6, 7, 0, 1, 2])",
        "minimumIndex(nums = [4, 5, 6, 7, 0, 1, 2])",
        "minimumIndex(nums = [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
        "minimumIndex(nums = [4, 5, 6, 7, 0, 1, 2])",
        "minimumIndex(nums = [4, 5, 6])"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [12, 34, 23, 45, 12, 34])",
        "countBeautifulPairs(nums = [12, 34, 23, 45, 12, 34])",
        "countBeautifulPairs(nums = [12, 34, 23, 45, 12, 34])",
        "countBeautifulPairs(nums = [12, 34, 23, 45, 12, 34])",
        "countBeautifulPairs(nums = [12, 34, 25, 10, 20, 5])",
        "countBeautifulPairs(nums = [12, 34, 25, 10, 20, 5])",
        "countBeautifulPairs(nums = [12, 34, 23, 45, 123, 234, 345])",
        "countBeautifulPairs(nums = [12, 34, 23, 45, 123, 1234, 12345])",
        "countBeautifulPairs(nums = [2, 4, 6, 8])",
        "countBeautifulPairs(nums = [25, 10, 5])"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"aabbbc\")",
        "minimizedStringLength(s = \"aabbbc\")",
        "minimizedStringLength(s = \"aabbbc\")",
        "minimizedStringLength(s = \"aabbbc\")",
        "minimizedStringLength(s = \"aabbbc\")",
        "minimizedStringLength(s = \"abababab\")",
        "minimizedStringLength(s = \"abbbc\")",
        "minimizedStringLength(s = \"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",
        "minimizedStringLength(s = \"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",
        "minimizedStringLength(s = \"ababab\")"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 11)",
        "makeTheIntegerZero(num1 = 10, num2 = 11)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 15)",
        "makeTheIntegerZero(num1 = 1, num2 = 1)"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [3, 4, 1, 2])",
        "findValueOfPartition(nums = [3, 4, 1, 2])",
        "findValueOfPartition(nums = [3, 4, 1, 2])",
        "findValueOfPartition(nums = [3, 4, 1, 2])",
        "findValueOfPartition(nums = [3, 4, 1, 2])",
        "findValueOfPartition(nums = [3, 4, 1, 2])",
        "findValueOfPartition(nums = [3, 4, 1, 2])",
        "findValueOfPartition(nums = [1, 4, 3, 2])",
        "findValueOfPartition(nums = [3, 1, 2, 4, 3])",
        "findValueOfPartition(nums = [3, 1, 2, 4, 3])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"aaabba\")"
    ],
    "sample_110": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [1, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [1, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [1, 1, 1, 1, 1], k = 2)"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0, 0, 0, 1])"
    ],
    "sample_54": [
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = \"abcd\")",
        "smallestString(s = \"abcd\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1, 2, 1, 3, 4, 1, 5])",
        "continuousSubarrays(A = [1, 2, 1, 3, 4, 1, 5])",
        "continuousSubarrays(A = [1, 2, 1, 3, 4, 1, 5])",
        "continuousSubarrays(A = [1, 2, 1, 3, 4, 1, 5])",
        "continuousSubarrays(A = [1, 2, 1, 3, 4, 1, 5])",
        "continuousSubarrays(A = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "continuousSubarrays(A = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "continuousSubarrays(A = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "continuousSubarrays(A = [1, 2, 1, 2, 3, 1, 2, 1, 2, 3, 1, 2, 1, 2, 3])",
        "continuousSubarrays(A = [1, 1, 1, 2, 2, 2, 3, 3, 3])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcdcba\")",
        "makeSmallestPalindrome(s = \"abcdcba\")",
        "makeSmallestPalindrome(s = \"abccba\")",
        "makeSmallestPalindrome(s = \"abcd\")"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [3, 1, 2, 4, 3])",
        "findValueOfPartition(nums = [3, 1, 2, 4, 3])",
        "findValueOfPartition(nums = [3, 1, 4, 1, 5])",
        "findValueOfPartition(nums = [1, 4, 3, 2, 5, 2])",
        "findValueOfPartition(nums = [1, 4, 3, 2, 5, 2])",
        "findValueOfPartition(nums = [1, 4, 3, 2, 5, 2])",
        "findValueOfPartition(nums = [1, 4, 3, 2, 5, 2])",
        "findValueOfPartition(nums = [1, 4, 3, 2, 5, 2])",
        "findValueOfPartition(nums = [1, 4, 3, 2, 10])",
        "findValueOfPartition(nums = [1, 4, 3, 2])"
    ],
    "sample_51": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'a')",
        "smallestString(s = 'a')"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 1, 2, 3, 4, 5], k = 2)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 1, 2, 3], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 10)",
        "distanceTraveled(mainTank = 10, additionalTank = 10)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 6, additionalTank = 0)"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1, 2, 1, 2, 3, 2, 2, 2])",
        "continuousSubarrays(A = [1, 2, 1, 2, 3, 2, 2, 2])",
        "continuousSubarrays(A = [1, 2, 1, 2, 3, 2, 2, 2])",
        "continuousSubarrays(A = [1, 2, 1, 3, 4, 1, 5])",
        "continuousSubarrays(A = [1, 2, 1, 3, 4, 1, 5])",
        "continuousSubarrays(A = [1, 2, 1, 3, 4, 1, 5])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(A = [1, 2, 1, 2, 3, 4, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1",
        "continuousSubarrays(A = [1, 1, 1, 1, 1])"
    ],
    "sample_6": [
        "colorTheArray(n = 5, queries = [[0,0],[1,1],[2,2],[3,0],[3,1],[4,0]])",
        "colorTheArray(n = 5, queries = [[0,0],[1,1],[2,2],[3,0],[3,1],[4,0]])",
        "colorTheArray(n = 5, queries = [[0,0],[1,1],[2,2],[3,0],[3,1],[4,0]])",
        "colorTheArray(n = 5, queries = [[0,0],[1,1],[2,2],[3,0],[3,1],[4,1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 4], [0, 4], [0, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 4], [0, 4], [0, 1]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,2],[2,3],[3,4],[3,0],[2,0],[1,0],[0,0]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,2],[3,2],[3,1],[2,2],[1,2],[2,1],[2,2]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,2],[3,2],[3,1],[2,1],[1,2],[2,1],[2,2]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,2],[3,2],[3,1],[2,1],[1,2],[2,1],[2,2]])"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 2)",
        "makeTheIntegerZero(a = 10, b = 2)",
        "makeTheIntegerZero(a = 10, b = 2)",
        "makeTheIntegerZero(a = 15, b = 5)",
        "makeTheIntegerZero(a = 15, b = 5)"
    ],
    "sample_100": [
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 2, 6, 7, 9, 0], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 2, 6, 7, 9, 0], target = 3)",
        "maximumJumps(nums = [1, 5, 6, 1, 9, 3, 4, 9, 2, 8], target = 2)"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 1, 2, 3, 4, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,1,2,2,3,3,4,4,5,5], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 5)",
        "longestAlternatingSubarray(nums = [1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,1",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232,"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [1, 2, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [1, 2, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [1, 2, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 3, 5, 7], b = [1, 4, 7, 9])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [2, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1, 3, 2, 4], b = [2, 1, 3, 4])",
        "maxNonDecreasingLength(a = [1, 3, 2, 4], b = [2, 1, 3, 4])",
        "maxNonDecreasingLength(a = [1, 3, 2, 4], b = [2, 1, 3, 4])",
        "maxNonDecreasingLength(a = [1, 3, 2, 4], b = [1, 3, 2, 4])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,0,1,1])"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], threshold = 10)"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [3, 1, 2, 4, 3])",
        "findValueOfPartition(nums = [3, 1, 2, 4, 3])",
        "findValueOfPartition(nums = [3, 1, 2, 4, 3])",
        "findValueOfPartition(nums = [3, 1, 2, 4, 3])",
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 4, 3, 2, 2, 2])",
        "findValueOfPartition(nums = [3, 2, 3, 1])",
        "findValueOfPartition(nums = [3, 5, 1, 4, 2])",
        "findValueOfPartition(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcdcba\")",
        "makeSmallestPalindrome(s = \"abccba\")"
    ],
    "sample_18": [
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")"
    ],
    "sample_99": [
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 1)",
        "maximumJumps(nums = [10, 16, 2, 7, 0, 1, 9], target = 5)"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [1, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [1, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [1, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [1, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [1, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [1, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [1, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [1, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [1, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [1, 5]])"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 3)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [12, 34, 25, 13, 91])",
        "countBeautifulPairs(nums = [12, 34, 25, 13, 91])",
        "countBeautifulPairs(nums = [12, 34, 25, 13, 91])",
        "countBeautifulPairs(nums = [12, 34, 25, 13, 91])",
        "countBeautifulPairs(nums = [12, 34, 23, 45, 12, 34])",
        "countBeautifulPairs(nums = [12, 34, 23, 45, 12, 34])",
        "countBeautifulPairs(nums = [12, 34, 23, 45, 12, 34])",
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(nums = [12, 34, 23, 45, 14, 43])"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3, 4, 5], x = 2)",
        "minCost(A = [1, 2, 3, 4, 5], x = 2)",
        "minCost(A = [1, 2, 3, 4, 5], x = 2)",
        "minCost(A = [1, 2, 3, 4, 5], x = 2)",
        "minCost(A = [1, 2, 3, 4, 5], x = 2)",
        "minCost(A = [1, 2, 3, 4, 5], x = 2)",
        "minCost(A = [1, 2, 3, 4], x = 2)",
        "minCost(A = [1, 2, 3, 4], x = 2)",
        "minCost(A = [1, 2, 3, 4], x = 2)",
        "minCost(A = [1, 2, 3, 4], x = 2)"
    ],
    "sample_98": [
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 3)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 4)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4, 4])"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [12, 34, 56, 78, 90])",
        "countBeautifulPairs(nums = [12, 34, 56, 78, 90])",
        "countBeautifulPairs(nums = [12, 34, 22, 11, 13, 10, 15])",
        "countBeautifulPairs(nums = [12, 34, 22, 11, 13])",
        "countBeautifulPairs(nums = [12, 34, 22, 11, 13])",
        "countBeautifulPairs(nums = [12, 34, 22, 25, 24, 23, 21, 19, 17, 16])",
        "countBeautifulPairs(nums = [12, 34, 22, 11, 24])",
        "countBeautifulPairs(nums = [12, 34, 22, 11, 13, 45, 46])",
        "countBeautifulPairs(nums = [12, 34, 22, 11, 22, 12, 33, 22, 11, 22])",
        "countBeautifulPairs(nums = [12, 34, 22, 25, 24, 23, 29, 101, 121, 100])"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"abba\")",
        "minimizedStringLength(s = \"abba\")",
        "minimizedStringLength(s = \"abba\")",
        "minimizedStringLength(s = \"abba\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abababab\")",
        "minimizedStringLength(s = \"abababab\")",
        "minimizedStringLength(s = \"abababab\")",
        "minimizedStringLength(s = \"ababab\")"
    ],
    "sample_41": [
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"aabbbc\")",
        "minimumCost(s = \"aabacb\")",
        "minimumCost(s = \"aabacb\")",
        "minimumCost(s = \"baab\")"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3, 3, 3])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4, 5, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])"
    ],
    "sample_52": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = \"kddsbncd\")"
    ],
    "sample_40": [
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aabbc\")",
        "minimumCost(s = \"aabbc\")",
        "minimumCost(s = \"aabbccee\")"
    ],
    "sample_38": [
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abacaba\")"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_53": [
        "smallestString(s = \"cbacdcbc\")",
        "smallestString(s = \"cbacdcbc\")",
        "smallestString(s = \"cbacdcbc\")",
        "smallestString(s = \"cbacdcbc\")",
        "smallestString(s = \"cbacdcbc\")",
        "smallestString(s = 'zybaabc')",
        "smallestString(s = 'zybaabc')",
        "smallestString(s = \"cbz\")",
        "smallestString(s = \"bbaaac\")",
        "smallestString(s = 'z')"
    ],
    "sample_109": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1,2,3,4,5], k = 2)",
        "checkArray(nums = [1,2,3,4,5], k = 2)",
        "checkArray(nums = [1,2,3,4,5], k = 2)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1, 1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 2)",
        "maximumBeauty(nums = [1, 1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5,7,8], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5,7,8], k = 1)",
        "maximumBeauty(nums = [1, 1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 2)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "distinctDifferenceArray(a = [1, 1, 2, 3, 4, 4, 5])"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a
        "removeTrailingZeros(a
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")"
    ],
    "sample_55": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')"
    ],
    "sample_35": [
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num
        "removeTrailingZeros(num
    ],
    "sample_23": [
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABCDCDAB\")",
        "minLength(s = \"ABCDABCDCDAB\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num
        "removeTrailingZeros(num
        "removeTrailingZeros(num
        "removeTrailingZeros(num
        "removeTrailingZeros(num = \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)"
    ],
    "sample_57": [
        "distanceTraveled(a = 10, b = 10)",
        "distanceTraveled(a = 10, b = 10)",
        "distanceTraveled(a = 10, b = 10)",
        "distanceTraveled(a = 10, b = 10)",
        "distanceTraveled(a = 10, b = 10)",
        "distanceTraveled(a = 10, b = 10)",
        "distanceTraveled(a = 10, b = 10)",
        "distanceTraveled(a = 1, b = 10)",
        "distanceTraveled(a = 1, b = 10)",
        "distanceTraveled(a = 1, b = 10)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [1,1,2,1,2,2,1,2,2,2], t = 2)",
        "longestAlternatingSubarray(nums = [1,1,2,1,2,2,1,2,2,2], t = 2)",
        "longestAlternatingSubarray(nums = [1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2",
        "longestAlternatingSubarray(nums = [2,1,2,1,2,2,2,2,2,2], t = 2)",
        "longestAlternatingSubarray(nums = [1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2",
        "longestAlternatingSubarray(nums = [1,1,2,1,1,2,1,1,2,1], t = 2)",
        "longestAlternatingSubarray(nums = [2,1,2,1,2,2,2,2,2], t = 2)",
        "longestAlternatingSubarray(nums = [1,1,2,3,4,4,4,4,4,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7",
        "longestAlternatingSubarray(nums = [1,1,2,3,4,4,4,4,4,5,6,7,8,9], t = 4)",
        "longestAlternatingSubarray(nums = [1,1,2,3,4,5,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100], t = 50)"
    ],
    "sample_102": [
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 1)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123001')",
        "removeTrailingZeros(num
        "removeTrailingZeros(num = '51230100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    ],
    "sample_101": [
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 1)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 1)"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,0,1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,0,1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,0,1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])"
    ],
    "sample_19": [
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABABCDCD\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 1, 2, 3, 4, 5, 10, 12], k = 2)",
        "maximumBeauty(nums = [1, 1, 2, 3, 4, 5, 7, 8], k = 3)",
        "maximumBeauty(nums = [1, 1, 2, 3, 4, 5, 7, 8], k = 2)"
    ],
    "sample_117": [
        "minimumIndex(nums = [4, 4, 3, 3, 4, 4])",
        "minimumIndex(nums = [4, 4, 3, 3, 4, 4])",
        "minimumIndex(nums = [4, 4, 3, 3, 4, 4])",
        "minimumIndex(nums = [4, 4, 3, 3, 4, 4])",
        "minimumIndex(nums = [4, 4, 3, 3, 4, 4])",
        "minimumIndex(nums = [4, 4, 3, 3, 4, 4])",
        "minimumIndex(nums = [4, 4, 3, 3, 4, 4])",
        "minimumIndex(nums = [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
        "minimumIndex(nums = [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
        "minimumIndex(nums = [1, 1, 2, 2, 3, 1])"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(nums = [2, 2, 2, 1])",
        "countBeautifulPairs(nums = [2, 4, 6, 8])",
        "countBeautifulPairs(nums = [2, 4, 6, 8])",
        "countBeautifulPairs(nums = [12, 35, 10, 1, 20])",
        "countBeautifulPairs(nums = [2, 8, 2, 2, 2, 2, 2, 2, 2, 2])",
        "countBeautifulPairs(nums = [2, 10, 3, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40])"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 11, num2 = 3)",
        "makeTheIntegerZero(num1 = 13, num2 = 2)"
    ],
    "sample_20": [
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDCDCD\")",
        "minLength(s = \"ABCDCDCD\")",
        "minLength(s = \"ABCDCDCD\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 1, 1, 2, 2, 2], k = 1)",
        "maximumBeauty(nums = [1, 1, 1, 2, 2, 2], k = 1)",
        "maximumBeauty(nums = [1, 1, 1, 2, 2, 2], k = 1)",
        "maximumBeauty(nums = [1, 1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 1, 2, 3, 4, 5, 10], k = 2)"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [12, 34, 25, 13, 9, 1])",
        "countBeautifulPairs(nums = [12, 34, 25, 13, 9, 1])",
        "countBeautifulPairs(nums = [12, 34, 25, 13, 9, 1])",
        "countBeautifulPairs(nums = [12, 34, 25, 13, 9, 1])",
        "countBeautifulPairs(nums = [12, 34, 25, 13, 9, 1])",
        "countBeautifulPairs(nums = [12, 34, 25, 13, 9, 1])",
        "countBeautifulPairs(nums = [12, 34, 25, 13, 9, 1])",
        "countBeautifulPairs(nums = [2, 8, 2, 2, 2, 3, 5, 2])",
        "countBeautifulPairs(nums = [2, 8, 2, 2, 2, 3, 5, 2])",
        "countBeautifulPairs(nums = [12, 34, 25, 13, 91])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"abccba\")"
    ],
    "sample_37": [
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abcde\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])"
    ],
    "sample_105": [
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "checkArray(nums = [1, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "checkArray(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "checkArray(nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,",
        "checkArray(nums = [10, 2, 5, 2], k = 3)",
        "checkArray(nums = [10, 2, 5, 2], k = 3)",
        "checkArray(nums = [10, 10, 10, 10, 10, 10], k = 2)",
        "checkArray(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 2)"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [1, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [1, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [1, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [1, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [1, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [1, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)"
    ],
    "sample_39": [
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"aabbc\")",
        "minimumCost(s = \"aabacbebebe\")",
        "minimumCost(s = \"aabbcce\")",
        "minimumCost(s = \"aabbbc\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")"
    ],
    "sample_65": [
        "findValueOfPartition(a = [1, 4, 3, 2, 5])",
        "findValueOfPartition(a = [1, 4, 3, 2, 5])",
        "findValueOfPartition(a = [1, 4, 3, 2, 5])",
        "findValueOfPartition(a = [1, 4, 3, 2, 5])",
        "findValueOfPartition(a = [1, 4, 3, 2, 5])",
        "findValueOfPartition(a = [1, 4, 3, 2, 5])",
        "findValueOfPartition(a = [1, 4, 3, 2, 5, 2])",
        "findValueOfPartition(a = [1, 4, 3, 2, 5, 2])",
        "findValueOfPartition(a = [1, 4, 3, 2, 5, 2])",
        "findValueOfPartition(a = [1, 4, 3, 2, 7])"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 10)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 13",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 13",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 13",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])"
    ],
    "sample_106": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], threshold = 100)"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [12, 35, 17, 10, 20, 10, 12, 17])",
        "countBeautifulPairs(nums = [12, 35, 17, 10, 20, 10, 12, 17])",
        "countBeautifulPairs(nums = [12, 35, 17, 10, 20, 10, 12])",
        "countBeautifulPairs(nums = [12, 35, 17, 10, 18, 13, 16])",
        "countBeautifulPairs(nums = [12, 35, 17, 10, 18, 13, 16])",
        "countBeautifulPairs(nums = [12, 35, 17, 10, 20, 10, 12, 17, 20])",
        "countBeautifulPairs(nums = [12, 35, 17, 10, 18, 13, 10, 14])",
        "countBeautifulPairs(nums = [12, 35, 17, 10, 18, 14, 16, 12, 11, 14])",
        "countBeautifulPairs(nums = [2, 4, 6, 8])",
        "countBeautifulPairs(nums = [12, 35, 2, 6, 7, 4])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2",
        "longestAlternatingSubarray(nums = [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
        "longestAlternatingSubarray(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], t = 3)",
        "longestAlternatingSubarray(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], t = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 5)",
        "longestAlternatingSubarray(nums = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2",
        "longestAlternatingSubarray(nums = [1,1,2,1,1,2,1,1,2,1], t = 2)",
        "longestAlternatingSubarray(nums = [1, 1, 2, 3, 4, 5, 2, 3, 4, 5, 6], t = 5)",
        "longestAlternatingSubarray(nums = [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2], t = 2)",
        "longestAlternatingSubarray(nums = [1, 1, 2, 3, 4, 4, 4, 4, 4, 5, 6, 7, 7], t = 4)"
    ],
    "sample_36": [
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"aabbc\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0,1,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0,1,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0,1,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0,1,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0,1,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0,1,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,0,1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,1,0,1,1,1,0,0,1,1,0,1,1,1,1,0,1,0,1,1,1,0,0,1,1,0,1,1,1,1,0,0,1,1,1,0,1,0,1,1,1,1,0,1,0,1,1,1,1,0,0,1,1,0,1,1,1,1,0,0,1,1,0,1,1,1,1,0,0,1,1,0,1,1,1,1,0,0,1,1,0,1,1,1,1,0,0,1,1,0,1,1,1,1,0,0,1,1,0,1,1,1,1,0,0,1,1,0,1,1,1,1,0,0,1,1,0,1,1,1,1,0,0,1,1,0,1,1,1,1,0,0,1,1,0,1,1,1,1,0,0,1,1,0,1,1,1,1,0,0,1,1,0,1,1,1,1,0,0,1,1,0,1,1,1,1,0,0,1,1,0,1,1,1,1,0,0,1,1,0,1,1,1,1,0,0,1,1,0,1,1,1,1,0,0,1,1,0,1,1,1,1,0,0,1,1,0,1,1,1,1,0,0,1,1,0,1,1,1,1,0,0,1,1,0,1,1,1,1,0,0,1,1,0,1,1,1,1,0,0,1,1,0,1,1,1,1,0,0,1,1,0,1,1,1,1,0,0,1,1,0,1,1,1,1,0,0,1,1"
    ],
    "sample_9": [
        "colorTheArray(n = 5, queries = [[0, 0], [1, 1], [2, 2], [2, 0], [3, 1], [3, 2], [4, 0]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 1], [2, 2], [2, 3], [3, 3], [3, 4], [4, 4]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 1], [2, 0], [2, 1], [3, 1], [3, 2], [4, 0]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 1], [2, 0], [2, 1], [3, 1], [3, 2], [4, 0]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 1], [2, 0], [2, 1], [3, 1], [3, 2], [4, 0]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 1], [2, 2], [2, 3], [3, 0], [3, 1], [4, 0]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 1], [2, 2], [2, 3], [3, 3], [3, 4], [4, 4], [2, 2], [2, 3], [3, 3], [3, 4], [4, 4]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 1], [2, 2], [2, 3], [3, 0], [3, 1], [4, 0]])",
        "colorTheArray(n = 5, queries = [[0, 0], [4, 0], [4, 1], [2, 1], [2, 0], [3, 1], [0, 2], [2, 2], [3, 2], [4, 2]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [3, 2], [1, 2], [2, 1], [3, 1], [4, 2]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 5, 2, 3, 4], nums2 = [6, 5, 2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 5, 2, 3, 4], nums2 = [6, 5, 2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 3, 5, 4], nums2 = [1, 3, 4, 5])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 5, 2, 3, 4], nums2 = [6, 5, 3, 4, 5])",
        "maxNonDecreasingLength(nums1 = [1, 5, 2, 3, 4], nums2 = [6, 3, 5, 4, 2])",
        "maxNonDecreasingLength(nums1 = [1, 5, 2, 3, 4], nums2 = [6, 3, 5, 4, 2])",
        "maxNonDecreasingLength(nums1 = [1, 5, 1, 1], nums2 = [1, 5, 1, 1])",
        "maxNonDecreasingLength(nums1 = [1, 5, 3, 4, 3, 1], nums2 = [2, 3, 4, 5, 6, 7])",
        "maxNonDecreasingLength(nums1 = [1, 5, 3, 4, 3, 2, 1], nums2 = [2, 1, 5, 4, 3, 2, 1])"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 1, 1, 2, 2, 2], k = 0)",
        "maximumBeauty(nums = [1, 1, 1, 2, 2, 2], k = 0)",
        "maximumBeauty(nums = [1, 1, 1, 2, 2, 2], k = 0)",
        "maximumBeauty(nums = [1, 1, 2, 2, 3, 4, 7, 8], k = 3)",
        "maximumBeauty(nums = [1, 1, 2, 2, 3, 4, 7, 8], k = 3)",
        "maximumBeauty(nums = [2, 3, 1, 5, 4], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "maximumBeauty(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1, 4, 3, 2, 5, 2])",
        "findValueOfPartition(nums = [1, 4, 3, 2, 5, 2])",
        "findValueOfPartition(nums = [1, 4, 3, 2, 5, 2])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 4, 3, 2, 5])",
        "findValueOfPartition(nums = [1, 4, 3, 2])",
        "findValueOfPartition(nums = [1, 1, 1, 1, 1])",
        "findValueOfPartition(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "findValueOfPartition(nums = [1, 4, 3, 2, 1, 5, 6, 7, 10, 8, 9])"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1, 4, 3, 2, 5, 2])",
        "findValueOfPartition(nums = [1, 4, 3, 2, 5, 2])",
        "findValueOfPartition(nums = [1, 4, 3, 2, 5, 2])",
        "findValueOfPartition(nums = [1, 4, 3, 2, 5, 2])",
        "findValueOfPartition(nums = [1, 4, 3, 2, 5, 2])",
        "findValueOfPartition(nums = [1,4,3,2,5,2])",
        "findValueOfPartition(nums = [1,4,3,2,5,2])",
        "findValueOfPartition(nums = [1, 4, 3, 2, 1])",
        "findValueOfPartition(nums = [1,4,3,2])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [2, 1, 2, 2, 2, 3, 4, 2])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3, 2, 2, 2, 3, 1])",
        "semiOrderedPermutation(nums = [2, 1, 2, 2, 2, 3, 3])",
        "semiOrderedPermutation(nums = [2, 1, 2, 2, 2, 3, 3])"
    ]
}