{
    "sample_48": [
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation([2, 3, 1, 4])",
        "semiOrderedPermutation([2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [4, 3, 2, 1])",
        "semiOrderedPermutation(nums = [3,1,2,4])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1,2,3,4,5,6])",
        "continuousSubarrays(a = [1,2,3,4,5,6])",
        "continuousSubarrays(a = [1,2,3,4,5,6])",
        "continuousSubarrays(a = [1,2,3,4,5,6])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1,2,3,4,5])",
        "continuousSubarrays(a = [1, 3, 4, 5, 6, 2])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [1,2,3,4,5,6])",
        "continuousSubarrays(nums = [1,2,3,4,5])",
        "continuousSubarrays(nums = [1,2,3,4,5])",
        "continuousSubarrays(nums = [1, 2, 3, 4])",
        "continuousSubarrays(nums = [1, 2, 3, 4])",
        "continuousSubarrays(nums = [1, 2, 3, 4])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5])",
        "continuousSubarrays(nums=[1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(nums = [0, 1, 2, 3, 4, 5])",
        "continuousSubarrays(nums = [1, 2, 2, 2, 1, 1])"
    ],
    "sample_8": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [2, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 1]])",
        "colorTheArray(n = 5, queries = [[2, 1], [1, 2], [3, 2], [2, 1], [3, 1]])",
        "colorTheArray(n = 5, queries = [[1,2], [2,1], [3,3], [4,2]])"
    ],
    "sample_97": [
        "maximumJumps(nums = [1,2,3,4,5], target = 1)",
        "maximumJumps(nums = [1,2,3,4,5], target = 2)",
        "maximumJumps(nums=[1,2,3,4,5], target=1)",
        "maximumJumps(nums=[1, 2, 3, 4, 5], target=1)",
        "maximumJumps(nums=[1,2,3,4,5], target=2)",
        "maximumJumps(nums = [1,2,3,4,5], target = 2)",
        "maximumJumps(nums = [0,0,0], target = 1)",
        "maximumJumps(nums=[1,2,3,4,5], target=1)",
        "maximumJumps(nums = [2,5,3,6,8,7,4,9], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 8, 10, 12, 14, 16, 18, 20], target = 3)"
    ],
    "sample_22": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ACDBB\")",
        "minLength(s = \"ACBD\")",
        "minLength(s = \"ACDAB\")",
        "minLength(s = \"ACBBABCD\")"
    ],
    "sample_7": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 2]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [2, 1]])",
        "colorTheArray(n = 3, queries = [[0,1],[1,2],[2,1]])",
        "colorTheArray(n = 4, queries = [[0, 1], [1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 3, queries = [[0,1], [1,2], [2,1]])",
        "colorTheArray(n=3, queries=[[0, 1], [1, 2], [2, 3]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 0]])"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 1], [3, 2], [4, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 1], [3, 2], [4, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 1], [3, 3], [4, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 1], [3, 1], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 2], [4, 1], [5, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 2], [4, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 1], [2, 1], [3, 1], [4, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 1], [3, 3], [4, 3]])",
        "colorTheArray(n = 5, queries = [[0,1], [1,1], [2,2], [3,1], [4,2]])",
        "colorTheArray(n=5, queries=[[0, 1], [1, 2], [1, 3], [2, 1], [4, 2]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [2,3,1,4,5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [4,2,1,3])",
        "semiOrderedPermutation(nums = [3,1,2])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation([4,2,3,1])",
        "semiOrderedPermutation(nums = [3,2,4,1,5])",
        "semiOrderedPermutation(nums=[2,3,4,5,1])"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6], threshold = 6)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10], threshold = 10)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6, 7, 8], threshold = 6)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6], threshold = 10)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 6, 8, 9], threshold = 10)",
        "longestAlternatingSubarray(nums = [2, 3, 5, 7, 9, 15], threshold = 10)",
        "longestAlternatingSubarray(nums = [2, 3, 2, 4, 2, 4, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 7, 9, 10, 11], threshold = 10)",
        "longestAlternatingSubarray(nums=[2, 3, 5, 7, 9, 11, 13, 15], threshold=13)"
    ],
    "sample_33": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num='512301000')",
        "removeTrailingZeros(num='512301000')",
        "removeTrailingZeros(num = \"512301000000\")"
    ],
    "sample_50": [
        "smallestString(s = \"aaaaa\")",
        "smallestString(s = \"aaaaa\")",
        "smallestString(s = \"aaabaa\")",
        "smallestString(s = \"aabaa\")",
        "smallestString(s = \"baaba\")",
        "smallestString(s = \"baaba\")",
        "smallestString(s = 'aaaabaa')",
        "smallestString(s = 'abz')",
        "smallestString(s = 'babba')",
        "smallestString(s = \"abbaaab\")"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [3, 4, 5, 6, 7])",
        "distinctDifferenceArray(nums = [3, 4, 5, 6, 7])",
        "distinctDifferenceArray(nums = [3, 4, 5, 6, 7])",
        "distinctDifferenceArray(nums = [5, 4, 3, 2, 1])",
        "distinctDifferenceArray(nums = [2, 4, 6, 8, 10])",
        "distinctDifferenceArray(nums = [5, 1, 3, 1, 5])"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 4, additionalTank = 5)",
        "distanceTraveled(mainTank = 8, additionalTank = 3)"
    ],
    "sample_118": [
        "minimumIndex(nums = [1, 2, 2, 3, 2])",
        "minimumIndex(nums = [1, 2, 2, 3, 2])",
        "minimumIndex(nums = [2, 2, 1, 1, 1])",
        "minimumIndex(nums = [2,1,2,5,3,2])",
        "minimumIndex(nums = [1,2,3,2,2])",
        "minimumIndex(nums = [7, 7, 5, 7, 5, 1])",
        "minimumIndex(nums = [2,1,2])",
        "minimumIndex(nums = [1, 2, 2, 3, 1, 1])",
        "minimumIndex(nums = [2, 3, 1, 1, 1])",
        "minimumIndex(nums = [0, 1, 0, 1, 1, 0, 1])"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [12, 51, 23])",
        "countBeautifulPairs(nums = [22, 51, 99])",
        "countBeautifulPairs(nums = [21, 12, 14])",
        "countBeautifulPairs([21, 22, 31])",
        "countBeautifulPairs(nums = [12, 51, 21, 15, 30, 25])",
        "countBeautifulPairs(nums = [12, 21, 14, 41, 13, 31])",
        "countBeautifulPairs(nums = [299, 300, 200])",
        "countBeautifulPairs(nums = [25, 52, 23, 55, 26])",
        "countBeautifulPairs(nums = [12, 51, 23, 45, 67, 98, 36])",
        "countBeautifulPairs(nums = [100, 20, 123, 1234, 12345, 54321])"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num='512301000')",
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = '5123010000000')",
        "removeTrailingZeros(num='51230100')"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"abcabcabc\")",
        "minimizedStringLength(s = \"abcabcabc\")",
        "minimizedStringLength(s = \"abcabcabc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"pineapple\")",
        "minimizedStringLength(s = \"abca\")"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 5, 3], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7], k = 1)",
        "maximumBeauty(nums = [1, 3, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 6], k = 2)",
        "maximumBeauty(nums = [1, 3, 1], k = 0)",
        "maximumBeauty(nums = [2, 4, 1, 3, 5], k = 1)",
        "maximumBeauty(nums = [2, 5, 3, 7], k = 2)"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 7)",
        "makeTheIntegerZero(num1 = 6, num2 = 3)",
        "makeTheIntegerZero(num1 = 3, num2 = 4)",
        "makeTheIntegerZero(num1 = 22, num2 = 5)",
        "makeTheIntegerZero(num1 = 22, num2 = 7)"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 3, 2])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [7, 9, 5, 8, 1, 3])",
        "findValueOfPartition(nums = [3, 6, 1, 2, 5])",
        "findValueOfPartition(nums = [1, 8, 3])",
        "findValueOfPartition(nums = [1,2,3,4])",
        "findValueOfPartition(nums = [1, 6, 3, 7, 2])",
        "findValueOfPartition(nums = [1,3])",
        "findValueOfPartition(nums = [1, 100, 1000])",
        "findValueOfPartition(nums = [7,3,5])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank=1, additionalTank=1)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0])",
        "doesValidArrayExist(derived = [0,1,0,1,0,1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0,0,0])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1])"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'never')",
        "makeSmallestPalindrome(s = \"never\")",
        "makeSmallestPalindrome(s = 'nen')"
    ],
    "sample_110": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 1)",
        "checkArray(nums = [0, 0, 0, 0, 0, 0], k = 3)",
        "checkArray(nums = [2, 2, 2, 1, 0], k = 3)",
        "checkArray(nums = [2, 3, 1, 1, 0, 0], k = 3)",
        "checkArray(nums = [3, 2, 1, 0, 4], k = 2)",
        "checkArray(nums = [1, 0, 0, 0, 1], k = 2)",
        "checkArray(nums = [2, 3, 0, 1, 0], k = 2)",
        "checkArray(nums = [5, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [0, 1, 0, 2, 0, 0], k = 3)"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 0])",
        "doesValidArrayExist(derived = [1,0,1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0,1,0])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 0])",
        "doesValidArrayExist(derived = [1,1,0,1,0,0,1,0])"
    ],
    "sample_54": [
        "smallestString(s = 'kddsbnaa')",
        "smallestString(s = 'kddsbnca')",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = 'jddshncd')",
        "smallestString(s = 'abcdde')",
        "smallestString(s='kddsbnzd')",
        "smallestString(s = 'azzzazzz')",
        "smallestString(s = 'azbzd')",
        "smallestString(s = \"abcdsaqa\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(A = [1, 2, 2, 3, 3, 3])",
        "continuousSubarrays(A = [1,2,3,4,5,6])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3])",
        "continuousSubarrays(A = [1, 2, 2, 1, 3, 1])",
        "continuousSubarrays(A = [1,2,2,3,3,3])",
        "continuousSubarrays([1, 2, 3, 2, 1, 3])",
        "continuousSubarrays(A = [1,2,2,3,3,4,4])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = 'abc')",
        "makeSmallestPalindrome(s = 'abc')",
        "makeSmallestPalindrome(s = \"abc\")",
        "makeSmallestPalindrome('abcd')",
        "makeSmallestPalindrome(s = 'abca')",
        "makeSmallestPalindrome('aba')",
        "makeSmallestPalindrome('abc')",
        "makeSmallestPalindrome(s = \"abc\")",
        "makeSmallestPalindrome(s = \"aaa\")"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [3, 9, 5])",
        "findValueOfPartition(nums = [3, 9, 5])",
        "findValueOfPartition(nums = [3, 9, 5])",
        "findValueOfPartition(nums = [1, 3, 2])",
        "findValueOfPartition(nums = [1, 3])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 5])",
        "findValueOfPartition(nums = [3,9,7])",
        "findValueOfPartition(nums = [1,2,3])",
        "findValueOfPartition(nums = [1,3,6])",
        "findValueOfPartition(nums = [1, 3, 5])"
    ],
    "sample_51": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddscncd')",
        "smallestString(s = 'kddsbna')",
        "smallestString(s = 'jddqncd')",
        "smallestString(s = 'kddscbncd')",
        "smallestString(s = 'jddrbncd')",
        "smallestString(s = 'kddsaaaa')",
        "smallestString(s = 'cdedbncd')",
        "smallestString(s = 'qrstuvwxyz')",
        "smallestString(s = 'jdfnkdjbn')"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 1)",
        "maximumBeauty(nums = [2,4,6,8], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "maximumBeauty(nums = [1, 3, 6, 2, 5], k = 2)",
        "maximumBeauty(nums = [3, 1, 4, 2], k = 1)",
        "maximumBeauty(nums = [1,3,5,7,9,11,13,15,17], k = 2)",
        "maximumBeauty(nums = [1, 3, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 2, 4, 7, 9, 5, 6, 8, 10], k = 1)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "checkArray(nums = [1,2,3,4,5], k = 3)",
        "checkArray(nums = [1,2,3,4,5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [2, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [3, 3, 3, 3, 3, 3], k = 3)",
        "checkArray(nums = [2, 3, 3, 4, 5], k = 3)"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 2, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 5)",
        "distanceTraveled(mainTank = 0, additionalTank = 1)",
        "distanceTraveled(mainTank = 0, additionalTank = 2)"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [1,2,3,4,5])",
        "distinctDifferenceArray(nums = [2, 3, 1, 3, 2])",
        "distinctDifferenceArray([2,3,4,5,6])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3])",
        "continuousSubarrays([1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1, 3])",
        "continuousSubarrays(A = [1, 2, 3, 4, 2, 3])",
        "continuousSubarrays(A=[1,2,3,1,2,3])",
        "continuousSubarrays(A = [1, 2, 2, 3, 4, 5])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1, 2, 1])",
        "continuousSubarrays(A=[1,2,3,2,1,2,3,2,1,2,3])",
        "continuousSubarrays(A = [1,2,3,4,5,2,3,4,5,6,1,2,3,4,5,1,2,3,4,5])"
    ],
    "sample_6": [
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 2, queries = [[0,1],[1,0]])",
        "colorTheArray(n = 3, queries = [[0,1], [1,2], [2,1]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,0],[3,1],[4,0]])",
        "colorTheArray(n = 5, queries = [[2,1], [2,0], [3,1], [2,1], [1,0]])"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 2)",
        "makeTheIntegerZero(a = 10, b = 2)",
        "makeTheIntegerZero(a = 5, b = 2)",
        "makeTheIntegerZero(a = 5, b = 2)",
        "makeTheIntegerZero(a = 7, b = 2)",
        "makeTheIntegerZero(a = 10, b = 4)"
    ],
    "sample_100": [
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [10, 20, 30, 40, 20, 30], target = 30)",
        "maximumJumps(nums = [1, 3, 5, 7, 9], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6], target = 1)",
        "maximumJumps(nums = [10, 20, 30, 40, 20], target = 20)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 1)",
        "maximumJumps(nums = [10,20,30,40,50,60], target = 10)",
        "maximumJumps(nums = [1, 4, 6, 7, 9, 13, 15], target = 2)",
        "maximumJumps(nums = [2,4,5,8,9,11], target = 1)"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6, 7], threshold = 7)",
        "longestAlternatingSubarray(nums = [2,3,4,5,6], threshold = 10)",
        "longestAlternatingSubarray(nums = [2,3,2,3,2,3], threshold = 2)",
        "longestAlternatingSubarray(nums = [2,3,4,5,6,7], threshold = 8)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8], threshold = 8)",
        "longestAlternatingSubarray(nums=[2,3,4,5,6], threshold=10)",
        "longestAlternatingSubarray(nums=[2, 3, 5, 6, 7, 8], threshold=8)",
        "longestAlternatingSubarray(nums=[2,3,4,5,2,3,4,5], threshold=4)",
        "longestAlternatingSubarray(nums = [2,3,5,7,9,11,12,13], threshold = 13)",
        "longestAlternatingSubarray(nums = [2,3,5,8,10,2], threshold = 1)"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1,2,3,4], b = [2,3,4,5])",
        "maxNonDecreasingLength(a = [1, 3, 5, 7], b = [2, 4, 6, 8])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [0, 1, 2, 3])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 3, 5])",
        "maxNonDecreasingLength(a = [1,2,3,4], b = [2,2,3,4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 4, 5])",
        "maxNonDecreasingLength(a=[1,2,3,4], b=[1,3,2,4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 1], b = [4, 5, 6, 4])",
        "maxNonDecreasingLength(a = [5, 2, 3, 1], b = [6, 4, 4, 5])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits([1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,1,0])",
        "numberOfGoodSubarraySplits([1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,0,1])",
        "numberOfGoodSubarraySplits([0,1,0,0,0,1,0])",
        "numberOfGoodSubarraySplits([1, 0, 1, 1])"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10], threshold = 10)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6], threshold = 6)",
        "longestAlternatingSubarray(nums = [2, 3, 5], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 6], threshold = 3)",
        "longestAlternatingSubarray(nums = [2,3,5,7,9], threshold = 1)",
        "longestAlternatingSubarray(nums = [2, 4, 5, 6], threshold = 10)",
        "longestAlternatingSubarray(nums = [2, 3, 5, 6, 7], threshold = 3)",
        "longestAlternatingSubarray(nums = [3, 4, 5, 6, 7], threshold = 10)"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 3, 2])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1,2,3,4])",
        "findValueOfPartition(nums = [1, 2])",
        "findValueOfPartition(nums = [7, 9, 5, 8, 1, 3])",
        "findValueOfPartition(nums = [3,9,7,3])",
        "findValueOfPartition(nums = [1, 10, 100, 1000])",
        "findValueOfPartition(nums = [1, 5, 3, 2])",
        "findValueOfPartition(nums = [1, 6, 3, 4, 2, 5])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s='abcd')",
        "makeSmallestPalindrome(s = \"abca\")",
        "makeSmallestPalindrome(s='ab')"
    ],
    "sample_18": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ACBDAB\")"
    ],
    "sample_99": [
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1,2,3,4,5], target = 1)",
        "maximumJumps(nums = [1,2,3,4,5], target = 1)",
        "maximumJumps(nums = [1,2,3,4,5], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums=[1,2,3,4,5], target=1)",
        "maximumJumps(nums = [10, 20, 30, 40, 20, 10, 10, 20], target = 10)",
        "maximumJumps(nums=[10, 20, 30, 40, 50, 60, 70, 80], target=10)",
        "maximumJumps(nums = [10,20,15,25,10,30], target = 5)",
        "maximumJumps(nums = [10, 20, 30, 50, 60], target = 20)"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [4, 2], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [4, 2], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [4, 2], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 2], [4, 1], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [4, 2], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,2],[3,1],[4,2],[5,1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 2], [4, 1], [5, 1]])",
        "colorTheArray(n = 4, queries = [[1,1], [2,2], [3,3], [1,2], [2,1]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,2],[1,2],[2,1],[3,2]])"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank=1, additionalTank=1)",
        "distanceTraveled(mainTank=2, additionalTank=1)",
        "distanceTraveled(mainTank=2, additionalTank=1)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [12, 34, 56])",
        "countBeautifulPairs([12, 23, 34])",
        "countBeautifulPairs([12, 34, 56])",
        "countBeautifulPairs(nums = [12, 25, 16, 23])",
        "countBeautifulPairs(nums = [12, 21, 22, 33])",
        "countBeautifulPairs(nums = [24,56,78,90])",
        "countBeautifulPairs(nums = [25, 10, 30, 50])",
        "countBeautifulPairs(nums = [12, 14, 23, 25, 34])",
        "countBeautifulPairs(nums = [24, 36, 48, 25])",
        "countBeautifulPairs(nums = [43,21,12,23,24])"
    ],
    "sample_56": [
        "minCost(A = [1, 3, 2, 4, 2], x = 2)",
        "minCost(A = [1, 2, 3, 4, 5], x = 1)",
        "minCost(A = [2, 3, 1, 4], x = 2)",
        "minCost(A = [2,3,1], x = 2)",
        "minCost(A = [3,2,4,1], x = 2)",
        "minCost(A = [4,2,3,1], x = 2)",
        "minCost(A = [5, 2, 10], x = 2)",
        "minCost(A = [5, 2, 10], x = 1)",
        "minCost(A = [5, 2, 6, 4], x = 1)",
        "minCost(A = [3,2,2,1,1], x = 3)"
    ],
    "sample_98": [
        "maximumJumps(nums = [1,2,3,4,5], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [10, 30, 40, 20], target = 20)",
        "maximumJumps(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target = 5)",
        "maximumJumps(nums = [1,3,6,8,10,14], target = 2)",
        "maximumJumps(nums = [10,22,9,33,21,50,41,60], target = 10)",
        "maximumJumps(nums = [2,4,7,8,9], target = 1)",
        "maximumJumps(nums = [1, 5, 10, 2, 15, 3], target = 5)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0])",
        "numberOfGoodSubarraySplits([0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits([1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits([0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,0,0])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1,2,3,4,5])",
        "distinctDifferenceArray(nums = [5, 3, 1, 3, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [5, 1, 3, 5, 3])",
        "distinctDifferenceArray(nums = [1, 3, 5, 7, 9])",
        "distinctDifferenceArray(nums = [3, 1, 5, 2, 4])",
        "distinctDifferenceArray(nums = [5,1,3,3,7])",
        "distinctDifferenceArray(nums = [1,1,2,3,3,5])"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56, 67, 78, 89, 90])",
        "countBeautifulPairs([12, 23, 34, 45, 56])",
        "countBeautifulPairs([12, 34, 56, 78, 90])",
        "countBeautifulPairs(nums = [12, 21, 32, 43, 54, 65, 76, 87, 98])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60, 72])",
        "countBeautifulPairs(nums = [12, 13, 14, 23, 24, 34])",
        "countBeautifulPairs(nums = [12, 21, 13, 32, 24, 43])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60, 15, 27, 39, 51, 63])",
        "countBeautifulPairs(nums = [25, 32, 56, 78, 21, 98])"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abcabcabc\")",
        "minimizedStringLength(s = \"abcabcabc\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"apple\")",
        "minimizedStringLength(s = \"apple\")",
        "minimizedStringLength(s = \"abcabcabcabc\")"
    ],
    "sample_41": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"1001\")",
        "minimumCost(s = \"aabb\")",
        "minimumCost(s = \"aaba\")",
        "minimumCost(s = \"abacaba\")",
        "minimumCost(s = \"aaabb\")"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1,2,3,4,5])",
        "distinctDifferenceArray(nums = [1,2,3,4,5])",
        "distinctDifferenceArray(nums = [1,2,3,4,5])",
        "distinctDifferenceArray(nums = [2,3,3,4,2])",
        "distinctDifferenceArray([3, 2, 3, 4, 2])",
        "distinctDifferenceArray([5,1,3,4,4])",
        "distinctDifferenceArray(nums = [5,2,4,1,3,2,2,1,5,3])"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [1, 2, 3])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 3, 5, 7, 9])",
        "doesValidArrayExist(derived = [1, 1, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 2, 3, 4])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6, 7, 8])",
        "doesValidArrayExist(derived = [1,1,1,1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist([0, 1, 1])"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 0])",
        "doesValidArrayExist([0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 2, 3])",
        "doesValidArrayExist(derived = [0, 1, 2, 3])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0])",
        "doesValidArrayExist([0, 1, 1, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 3, 1])"
    ],
    "sample_52": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbnaa')",
        "smallestString(s = 'kddsbnaa')",
        "smallestString(s = 'kddsbncda')",
        "smallestString(s = 'jddsbncd')",
        "smallestString(s = \"kddsbnaa\")",
        "smallestString(s = 'kddsbncc')"
    ],
    "sample_40": [
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aabb\")",
        "minimumCost(s = \"aabb\")",
        "minimumCost(s = \"010101\")",
        "minimumCost(s = \"010\")",
        "minimumCost(s = \"1001\")",
        "minimumCost(s = \"aa\")",
        "minimumCost(s = \"abac\")",
        "minimumCost(s = \"ababab\")"
    ],
    "sample_38": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abca\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"aabba\")"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [3, 4, 5, 6, 7])",
        "distinctDifferenceArray(nums = [5, 5, 5, 5, 5])",
        "distinctDifferenceArray(nums = [5, 5, 5, 5, 5])",
        "distinctDifferenceArray(nums = [5, 5, 5, 5, 5])",
        "distinctDifferenceArray(nums = [3,2,3,4,2])",
        "distinctDifferenceArray(nums = [3, 4, 5, 6, 5])",
        "distinctDifferenceArray(nums = [3, 4, 5, 3, 2])",
        "distinctDifferenceArray([5, 3, 2, 1, 1])",
        "distinctDifferenceArray(nums = [5, 2, 4, 7, 4])"
    ],
    "sample_53": [
        "smallestString(s = 'baabc')",
        "smallestString(s = 'baacc')",
        "smallestString(s = 'baabz')",
        "smallestString(s = 'baazc')",
        "smallestString(s = 'caabc')",
        "smallestString(s = 'baacb')",
        "smallestString(s = 'bcbaa')",
        "smallestString(s = 'bcdaab')",
        "smallestString(s = 'bbcc')",
        "smallestString(s = 'zbacb')"
    ],
    "sample_109": [
        "checkArray(nums = [1,2,3,4], k = 2)",
        "checkArray(nums = [1, 2, 3], k = 1)",
        "checkArray(nums = [1,2,3,4,5,6], k = 3)",
        "checkArray(nums = [1,3,2], k = 1)",
        "checkArray(nums = [4, 2, 5, 1], k = 2)",
        "checkArray(nums = [3,4,2,3], k = 1)",
        "checkArray(nums = [1,5,2,6,3,7], k = 2)",
        "checkArray(nums = [0, 2], k = 1)",
        "checkArray(nums = [2,3,3,4,5], k = 2)",
        "checkArray(nums = [1, 5, 4, 3, 2, 1], k = 2)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1,5,3,4,2], k = 1)",
        "maximumBeauty(nums = [1,3,5,7], k = 1)",
        "maximumBeauty(nums = [2, 4, 5, 7], k = 1)",
        "maximumBeauty(nums = [1, 5, 4, 10], k = 2)",
        "maximumBeauty(nums = [2, 4, 3, 1], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7,8,9], k = 0)",
        "maximumBeauty(nums = [1,5,4,6,8,10,7,7], k = 1)",
        "maximumBeauty(nums = [2,4,5,8], k = 1)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [3, 4, 4, 5, 6])",
        "distinctDifferenceArray(a=[3, 4, 4, 4, 5])",
        "distinctDifferenceArray(a = [5, 2, 3, 5, 2, 1])",
        "distinctDifferenceArray(a = [5, 2, 6, 4, 3])",
        "distinctDifferenceArray(a = [5, 3, 1, 5, 2, 3, 1])"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '51230100000')",
        "removeTrailingZeros(a = '51230100000')",
        "removeTrailingZeros(a='5123010000')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'never')",
        "makeSmallestPalindrome(s = 'naveen')",
        "makeSmallestPalindrome('neve')",
        "makeSmallestPalindrome('nitin')"
    ],
    "sample_55": [
        "smallestString(s = 'kddsbncf')",
        "smallestString(s = 'kddsbndc')",
        "smallestString(s = 'kddsbncda')",
        "smallestString(s = 'kddscndc')",
        "smallestString(s = 'lddqncd')",
        "smallestString(s = 'jddqbc')",
        "smallestString(s = 'kdehncd')",
        "smallestString(s = 'kdjncdj')",
        "smallestString(s = 'lcdcdbncd')",
        "smallestString(s = 'lmmnsbnd')"
    ],
    "sample_35": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = \"51230100\")"
    ],
    "sample_23": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDEF\")",
        "minLength(s = \"ABCABCD\")",
        "minLength(s = \"ABCDAABB\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = \"51230100000\")",
        "removeTrailingZeros(num = '51230100000000000000000')"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 2)"
    ],
    "sample_57": [
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 2)",
        "distanceTraveled(a = 1, b = 2)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6], t = 6)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6], t = 10)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 9)",
        "longestAlternatingSubarray(nums = [2,3,4,5,6,7], t = 7)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5], t = 10)",
        "longestAlternatingSubarray(nums = [2, 3, 5, 6, 7, 8, 9], t = 10)",
        "longestAlternatingSubarray(nums=[5,6,7,8,9], t=10)",
        "longestAlternatingSubarray(nums = [2,3,5,1,3,1,2], t = 3)",
        "longestAlternatingSubarray(nums = [2, 4, 7, 6, 10, 9, 8], t = 10)",
        "longestAlternatingSubarray(nums = [1,2,3,5,7,6,4,2,1,3,5,7,9,11,13,15,17,19,21], t = 20)"
    ],
    "sample_102": [
        "maximumJumps(nums = [1, 2, 3, 4], target = 1)",
        "maximumJumps(nums = [1,2,3,4,5], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 7, 9], target = 2)",
        "maximumJumps(nums = [1, 2, 3], target = 2)",
        "maximumJumps(nums = [1,2,3,4,5,6,7,8,9,10], target = 2)",
        "maximumJumps(nums = [2, 3, 4, 5, 6, 7], target = 1)",
        "maximumJumps(nums = [2, 3, 4, 6, 7], target = 3)",
        "maximumJumps(nums = [100, 1, 104], target = 5)",
        "maximumJumps(nums = [2,3,6,7], target = 2)",
        "maximumJumps(nums = [3, 5, 2, 7, 4, 6], target = 2)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = '51230100000')"
    ],
    "sample_101": [
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 2)",
        "maximumJumps(nums = [10, 20, 30, 40], target = 15)",
        "maximumJumps(nums = [1,3,6,7,9,12], target = 2)",
        "maximumJumps(nums = [1,2,3,4,5,6,7,8,9,10], target = 1)",
        "maximumJumps(nums = [10,2,3,4,7], target = 5)",
        "maximumJumps(nums = [1, 5, 3, 7, 1], target = 2)",
        "maximumJumps(nums = [10,20,30,40,20,10,10], target = 5)",
        "maximumJumps(nums=[10,3,12,8,4], target=2)",
        "maximumJumps(nums = [3,7,5,6,1,10,2], target = 3)"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1,0,1,0,1,0])",
        "doesValidArrayExist(derived = [1,1,0,1])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1])",
        "doesValidArrayExist([0,1,1,1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 0, 1, 1, 1, 0, 0])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,0,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 0, 1, 1, 1])"
    ],
    "sample_19": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ACDAB\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s='even')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s=\"even\")",
        "makeSmallestPalindrome(s = 'nine')",
        "makeSmallestPalindrome(s = \"niceven\")",
        "makeSmallestPalindrome(s = 'nin')"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation([2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums=[2,3,1,4,5])",
        "semiOrderedPermutation(nums = [2,1,3,4])",
        "semiOrderedPermutation([2,3,4,1,5])"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0])",
        "numberOfGoodSubarraySplits([0,1,0,0,1,1,0,1])",
        "numberOfGoodSubarraySplits([1,0,0,0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,1,1,0,0,0])"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9, 11], k = 2)",
        "maximumBeauty(nums = [1, 3, 1, 4, 5], k = 0)",
        "maximumBeauty(nums = [1, 2, 3, 5, 6], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 10], k = 2)",
        "maximumBeauty(nums = [1, 5, 4, 7, 8, 9], k = 2)",
        "maximumBeauty(nums = [2, 4, 1, 3], k = 1)",
        "maximumBeauty(nums = [2,4,6,8], k = 1)",
        "maximumBeauty(nums=[1,2,4,7,10,11,7,12,6,7,16,18,19], k=3)"
    ],
    "sample_117": [
        "minimumIndex(nums = [1, 2, 2, 2, 3])",
        "minimumIndex(nums = [2,1,2,1,2,2])",
        "minimumIndex([1, 2, 2, 3, 2, 1])",
        "minimumIndex(nums = [2,1,2,1,2,1,2])",
        "minimumIndex(nums = [1,2,2,1,1,1])",
        "minimumIndex(nums = [3, 3, 3, 2, 2, 2])",
        "minimumIndex(nums = [2, 3, 1, 1, 2])",
        "minimumIndex(nums = [2, 2, 2, 3, 3, 4, 4])",
        "minimumIndex(nums = [2,3,2,3,2,3,2,2,3,3])",
        "minimumIndex(nums = [1, 2, 2, 3, 2, 2, 2, 2, 2, 2, 3, 3])"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 12, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 3)",
        "makeTheIntegerZero(num1 = 7, num2 = 1)",
        "makeTheIntegerZero(num1 = 9, num2 = 3)"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [12, 21, 23])",
        "countBeautifulPairs(nums = [10, 20, 30])",
        "countBeautifulPairs(nums = [25, 52, 61])",
        "countBeautifulPairs(nums = [26, 51, 9, 50, 13, 27])",
        "countBeautifulPairs(nums = [12, 21, 22, 34, 43, 44])",
        "countBeautifulPairs(nums=[12,56,78,96,32,45])",
        "countBeautifulPairs(nums = [22, 23, 24, 25, 26, 27, 28, 29])",
        "countBeautifulPairs(nums = [42, 11, 57, 13, 25, 67])",
        "countBeautifulPairs(nums = [12, 34, 14, 56, 78, 90])",
        "countBeautifulPairs([45, 20, 15, 30])"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 13, num2 = 2)",
        "makeTheIntegerZero(num1 = 14, num2 = 2)",
        "makeTheIntegerZero(num1 = 23, num2 = 4)",
        "makeTheIntegerZero(num1=27, num2=7)"
    ],
    "sample_20": [
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDEF\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDABC\")",
        "minLength(s = \"ABCDCDAB\")",
        "minLength(s = \"ABCDBCD\")",
        "minLength(s = \"ABCDDCBA\")",
        "minLength(s = \"ABACCDAB\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "maximumBeauty(nums = [1, 5, 4, 6], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9, 11], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 1)",
        "maximumBeauty(nums = [2,4,5,7,9], k = 2)",
        "maximumBeauty(nums = [1, 5, 3, 1, 2], k = 1)",
        "maximumBeauty(nums = [1, 5, 2, 10, 3], k = 2)",
        "maximumBeauty(nums = [1, 5, 2, 10, 7, 6], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 3, 2, 3, 2, 1, 2, 2, 3, 4, 1, 1, 2, 3, 3, 4, 2], k = 2)"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [21, 22, 23])",
        "countBeautifulPairs(nums = [12, 23, 34])",
        "countBeautifulPairs(nums = [12, 24, 36])",
        "countBeautifulPairs(nums = [21, 42, 24])",
        "countBeautifulPairs([10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [21,31,41,51])",
        "countBeautifulPairs(nums = [25,40,5,30,12])",
        "countBeautifulPairs(nums = [25, 40, 23, 46])",
        "countBeautifulPairs(nums=[12, 23, 124])",
        "countBeautifulPairs(nums = [25, 44, 31, 16])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 13, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 5)",
        "makeTheIntegerZero(num1=10, num2=3)",
        "makeTheIntegerZero(num1 = 14, num2 = 5)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = 'never')",
        "makeSmallestPalindrome(s = 'never')",
        "makeSmallestPalindrome(s = 'never')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"niven\")",
        "makeSmallestPalindrome(s='neven')"
    ],
    "sample_37": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"ba\")",
        "minimumCost(s = \"0100\")",
        "minimumCost(\"abcd\")",
        "minimumCost(s = \"abbcc\")",
        "minimumCost(s = \"001101\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits([0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1,0,1,0])"
    ],
    "sample_105": [
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "checkArray(nums=[1, 2, 3, 4, 5], k=3)",
        "checkArray(nums = [1, 1, 1], k = 2)",
        "checkArray(nums = [5,2,3,1,1], k = 3)",
        "checkArray(nums = [2, 3, 4], k = 2)",
        "checkArray(nums = [5, 3, 4, 2, 1], k = 3)",
        "checkArray(nums = [2, 3, 3, 1, 0], k = 3)",
        "checkArray(nums = [2, 2, 1, 0, 0], k = 2)",
        "checkArray(nums = [5, 2, 3, 1, 2, 1], k = 3)",
        "checkArray(nums = [5, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2,3,1,4,5])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [2,3,4,1,5])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1, 1, 1], k = 2)",
        "checkArray(nums = [4, 2, 3, 1, 1, 1], k = 2)",
        "checkArray(nums = [4, 2, 3, 1, 1, 1], k = 3)",
        "checkArray(nums = [3, 2, 1, 1, 0], k = 2)",
        "checkArray(nums = [3, 2, 2, 1, 1, 0], k = 3)",
        "checkArray(nums = [2, 3, 1, 1, 1], k = 3)",
        "checkArray(nums = [5, 2, 3, 4, 3], k = 2)",
        "checkArray(nums = [0, 2, 1, 3, 0, 0, 0, 0], k = 4)"
    ],
    "sample_39": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"0101\")",
        "minimumCost(s = \"010101\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"aaba\")",
        "minimumCost(s = \"aaabbb\")",
        "minimumCost(s = \"aaabb\")"
    ],
    "sample_65": [
        "findValueOfPartition(a = [3, 1, 2])",
        "findValueOfPartition(a = [1, 2, 3, 4])",
        "findValueOfPartition(a = [1, 2, 3, 4])",
        "findValueOfPartition(a = [1, 3, 8, 10, 15])",
        "findValueOfPartition(a = [0, 1])",
        "findValueOfPartition(a = [1, 3, 5])",
        "findValueOfPartition(a = [1, 3, 5])",
        "findValueOfPartition(a=[3, 9, 1])",
        "findValueOfPartition(a = [1, 10])",
        "findValueOfPartition(a = [3, 9, 5, 2, 8, 7])"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank=2, additionalTank=2)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0,0,0,0])",
        "doesValidArrayExist(derived = [1, 0, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 1])",
        "doesValidArrayExist(derived = [1,1,0,1])",
        "doesValidArrayExist([0,1,1,0,0])"
    ],
    "sample_106": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1,2,3,4,5,6], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "checkArray(nums = [4, 2, 5, 5, 2, 1], k = 2)",
        "checkArray(nums = [5, 3, 1, 2, 4], k = 2)",
        "checkArray(nums = [5, 3, 1, 2, 4], k = 2)",
        "checkArray(nums = [2, 3, 1, 2, 3, 1], k = 2)",
        "checkArray(nums = [4, 3, 2, 4, 1], k = 2)"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5], threshold = 5)",
        "longestAlternatingSubarray(nums = [3,2,5,4], threshold = 5)",
        "longestAlternatingSubarray(nums = [2,3,4], threshold = 3)",
        "longestAlternatingSubarray(nums = [2, 3, 1], threshold = 2)",
        "longestAlternatingSubarray(nums = [2,4,6,8,10], threshold = 12)",
        "longestAlternatingSubarray(nums = [2,3,4,5,6], threshold = 2)",
        "longestAlternatingSubarray(nums = [2,1,3], threshold = 2)",
        "longestAlternatingSubarray(nums = [2,3,5,7,11,13,17,19,23], threshold = 19)",
        "longestAlternatingSubarray(nums = [4,1,1,3,2], threshold = 2)"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [12, 23, 34])",
        "countBeautifulPairs(nums = [12, 23, 34])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [21, 12, 13])",
        "countBeautifulPairs(nums = [12, 21, 123])",
        "countBeautifulPairs([12, 21, 23, 32])",
        "countBeautifulPairs(nums = [12, 21, 31])",
        "countBeautifulPairs(nums = [12, 51, 23, 45])",
        "countBeautifulPairs(nums = [21, 31, 23])",
        "countBeautifulPairs([25, 52, 103])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5], t = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5], t = 10)",
        "longestAlternatingSubarray(nums = [3,2,5,4], t = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6], t = 5)",
        "longestAlternatingSubarray(nums = [2,3,5], t = 7)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9], t = 7)",
        "longestAlternatingSubarray(nums = [2,1,2,1,2,1], t = 2)",
        "longestAlternatingSubarray(nums = [2,3,4,5,6,7,8,9], t = 8)",
        "longestAlternatingSubarray(nums = [2,3,5,1,2,3,4,5,6], t = 5)",
        "longestAlternatingSubarray(nums = [2,1,4,6,7,12,8,9,10,11], t = 10)"
    ],
    "sample_36": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"abacaba\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abac\")",
        "minimumCost(s = \"aaa\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCDEF\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDCDAB\")",
        "minLength(s = \"ACBDAB\")",
        "minLength(s = \"ABCDABC\")",
        "minLength(s = \"ABCABCD\")",
        "minLength(s = \"ABCDEFGHIJK\")",
        "minLength(s = \"ABABCD\")"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,0,1])",
        "numberOfGoodSubarraySplits([0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,1,0,0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 0, 1, 0, 0, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0, 1, 1, 0, 0, 1, 1])"
    ],
    "sample_9": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [2, 1]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n=1, queries=[[0, 1]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 2], nums2 = [2, 3])",
        "maxNonDecreasingLength(nums1 = [1, 3, 5], nums2 = [2, 4, 6])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2], nums2 = [1, 2, 3])",
        "maxNonDecreasingLength(nums1 = [1, 2], nums2 = [2, 2])",
        "maxNonDecreasingLength(nums1 = [1,2,3], nums2 = [2,3,1])",
        "maxNonDecreasingLength(nums1 = [2, 3, 2], nums2 = [1, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 3], nums2 = [2, 3, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 5], nums2 = [4, 5, 6])",
        "maxNonDecreasingLength(nums1 = [1, 2, 5], nums2 = [5, 3, 2])",
        "maxNonDecreasingLength(nums1 = [2,4,7,3], nums2 = [2,5,6,8])"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 2)",
        "maximumBeauty(nums = [1, 3, 2, 4, 5], k = 1)",
        "maximumBeauty(nums=[1,3,5,7,9], k=2)",
        "maximumBeauty(nums = [1, 2, 4, 7, 9], k = 3)",
        "maximumBeauty(nums = [1,3,2,4], k = 1)",
        "maximumBeauty(nums = [2,4,5], k = 2)",
        "maximumBeauty(nums = [3, 2, 4, 5, 6], k = 1)",
        "maximumBeauty(nums = [2,5,5,7,7,7,7,10], k = 1)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1,3])",
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1,2,3,4])",
        "findValueOfPartition(nums = [1, 3, 2])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2])",
        "findValueOfPartition(nums = [1, 2])",
        "findValueOfPartition(nums = [1,3,7])",
        "findValueOfPartition(nums=[1,3,6])"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [3,9,7])",
        "findValueOfPartition(nums = [1,3])",
        "findValueOfPartition(nums = [3,7,1,6])",
        "findValueOfPartition(nums = [1,3,6])",
        "findValueOfPartition(nums = [1,3,8,10])",
        "findValueOfPartition(nums = [1,2,3])",
        "findValueOfPartition(nums = [1,3,2,4,5])",
        "findValueOfPartition(nums=[3, 9, 5])",
        "findValueOfPartition(nums = [1,3,2,6])",
        "findValueOfPartition(nums = [1,3,7,11])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [4, 2, 3, 1])",
        "semiOrderedPermutation(nums = [4,2,3,1])",
        "semiOrderedPermutation(nums = [4,2,3,1])",
        "semiOrderedPermutation(nums = [2,3,4,1,5])",
        "semiOrderedPermutation(nums = [2, 3, 1])"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2,3,4,1,5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [2,3,1,4])",
        "semiOrderedPermutation(nums=[2, 1, 4, 3])",
        "semiOrderedPermutation(nums=[2, 3, 1, 4, 5])"
    ],
    "sample_167": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words=[\"hello\", \"world\"], s=\"hw\")",
        "isAcronym(words = [\"for\", \"all\"], s = \"fa\")",
        "isAcronym(words = [\"beautiful\", \"world\"], s = \"bw\")",
        "isAcronym(words = [\"Banana\", \"Acronym\"], s = \"BAC\")",
        "isAcronym(words = [\"Software\", \"Engineering\"], s = \"SE\")",
        "isAcronym(words = [\"every\", \"great\", \"person\"], s = \"egp\")",
        "isAcronym(words=[\"you\", \"are\", \"cool\"], s=\"yac\")",
        "isAcronym(words = [\"an\", \"ban\"], s = \"ab\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4], m = 2, k = 2)",
        "countInterestingSubarrays(nums=[1,2,3,4,5,6], m=2, k=1)",
        "countInterestingSubarrays(nums = [1, 2, 2, 3, 3, 3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2,2,2,2,2,2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 1, 0, 2, 3], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,3,2,3,1], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 3, 1, 2, 3, 4, 1, 2, 3], m = 3, k = 2)"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1,3],[2,5],[3,7]])",
        "numberOfPoints(nums = [[1,3],[2,3],[3,3]])",
        "numberOfPoints(nums = [[1,3], [2,5], [3,8]])",
        "numberOfPoints(nums = [[1,3], [4,6], [7,10]])",
        "numberOfPoints(nums = [[1,2], [3,4], [4,5]])",
        "numberOfPoints(nums = [[1,3],[2,4],[1,1]])",
        "numberOfPoints([[1,3], [2,5], [1,1]])",
        "numberOfPoints(nums = [[0,3],[3,6],[1,5]])",
        "numberOfPoints(nums=[[1,3], [4,6], [5,8]])",
        "numberOfPoints(nums = [[3,5],[7,8],[1,3],[5,7]])"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = ['easy-problem'], separator = '-')",
        "splitWordsBySeparator(words = ['easy-problem'], separator = '-')",
        "splitWordsBySeparator(words = [\"easy_problem\"], separator = \"_\")",
        "splitWordsBySeparator(words = [\"easy_problem\"], separator = \"_\")",
        "splitWordsBySeparator(words = ['easy.problem'], separator = '.')",
        "splitWordsBySeparator(words = ['easy.problem'], separator = '.')",
        "splitWordsBySeparator(words = [\"easy*problem\"], separator = \"*\")"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 3], [2, 5], [3, 7]])",
        "numberOfPoints([[1, 3], [2, 4], [5, 7]])",
        "numberOfPoints(nums = [[1, 5], [2, 3], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [6, 8]])",
        "numberOfPoints(nums = [[1,4],[2,3],[3,5]])",
        "numberOfPoints([[1,2],[2,3],[4,5]])",
        "numberOfPoints([[0,1],[2,3],[4,5]])",
        "numberOfPoints([[1,3], [3,6], [5,7]])",
        "numberOfPoints(nums = [[2,5],[1,3],[5,6]])",
        "numberOfPoints(nums = [[0,1],[3,3],[2,4]])"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1])",
        "countCompleteSubarrays(nums=[1, 2, 1, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 4, 2, 1])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = ['one', '', 'two', 'three', '', 'four', 'five', 'six'], separator = '')",
        "splitWordsBySeparator(words = [\"one\", \"\", \"two\", \"\", \"three\", \"four\", \"\", \"five\", \"six\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"one\", \"\", \"two\", \"\", \"three\", \"four\", \"\", \"five\", \"six\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"one\", \"\", \"two\", \"\", \"three\", \"\", \"four\", \"\", \"five\", \"\", \"six\"], separator = \"\")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = '-')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = '-')",
        "splitWordsBySeparator(words = [\"one\", \"\", \"two\", \"\", \"three\", \"four\", \"\", \"five\", \"\", \"six\"], separator = \"\")",
        "splitWordsBySeparator(words=[\"one\", \"\", \"two\", \"three\", \"\", \"four\", \"five\", \"six\"], separator=\"\")",
        "splitWordsBySeparator(words=['one', '', 'two', '', 'three', '', 'four', 'five', '', 'six'], separator='')",
        "splitWordsBySeparator(words = ['one', 'two', 'three four', 'five-six'], separator = ' ')"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 2])",
        "maxIncreasingGroups(u = [1, 2])",
        "maxIncreasingGroups(u = [1, 2])",
        "maxIncreasingGroups(u = [1, 2, 3])",
        "maxIncreasingGroups(u = [1, 1])",
        "maxIncreasingGroups(u = [1, 1, 1])",
        "maxIncreasingGroups([1, 2])",
        "maxIncreasingGroups(u = [1, 2, 2])",
        "maxIncreasingGroups(u=[1, 2])",
        "maxIncreasingGroups([1, 2, 2, 3, 3, 3])"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [5,3,2,10,15], x = 1)",
        "minAbsoluteDifference(nums = [1, 2, 3, 4, 5], x = 3)",
        "minAbsoluteDifference(nums = [1, 2, 3, 4, 5], x = 3)",
        "minAbsoluteDifference(nums = [4,2,3,1,5], x = 2)",
        "minAbsoluteDifference(nums = [2, 5, 3, 7, 1], x = 2)",
        "minAbsoluteDifference(nums = [1, 3, 5, 8, 10], x = 2)",
        "minAbsoluteDifference(nums = [4, 3, 2, 4, 3], x = 2)",
        "minAbsoluteDifference(nums = [4,6,5,3,1], x = 2)",
        "minAbsoluteDifference(nums = [5,2,3,4,1,7], x = 3)",
        "minAbsoluteDifference(nums = [5,2,4,7,3,9,1,10,8,6], x = 3)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 10, k = 5)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 10, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6], modulo = 4, k = 2)",
        "countInterestingSubarrays(nums = [5, 2, 3, 4, 1], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [2,4,5,6,7,8], modulo = 10, k = 2)",
        "countInterestingSubarrays(nums = [2, 1, 3, 1, 2, 1], modulo = 4, k = 2)"
    ],
    "sample_152": [
        "canSplitArray(nums = [2, 3, 3, 2, 3], m = 6)",
        "canSplitArray(nums = [2, 3, 1], m = 4)",
        "canSplitArray(nums = [1,2,3,4,5,6], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 11)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 8)",
        "canSplitArray(nums = [5, 10, 3], m = 15)",
        "canSplitArray(nums = [10, 20, 30], m = 45)",
        "canSplitArray(nums=[1,2,3], m=2)",
        "canSplitArray(nums = [2, 3, 4, 5, 1], m = 8)",
        "canSplitArray(nums = [2, 3, 1, 3, 5], m = 6)"
    ],
    "sample_169": [
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"b\", \"a\", \"n\", \"a\", \"n\", \"a\"], s = \"BAN\")",
        "isAcronym(words = [\"be\", \"to\", \"the\", \"world\"], s = \"BTTW\")",
        "isAcronym(words = [\"This\", \"Is\", \"A\", \"Test\"], s = \"TIT\")",
        "isAcronym(words = [\"A\", \"B\", \"C\"], s = \"ABC\")",
        "isAcronym(words = [\"banana\"], s = \"B\")",
        "isAcronym(words = [\"first\", \"second\", \"third\"], s = \"FST\")",
        "isAcronym(words=[\"happy\", \"new\", \"year\"], s=\"hny\")",
        "isAcronym(words = [\"this\", \"is\", \"a\", \"test\"], s = \"tiat\")",
        "isAcronym(words = [\"Do\", \"You\", \"Want\", \"To\", \"Play\"], s = \"DYWTP\")"
    ],
    "sample_121": [
        "minimumIndex(nums = [2, 1, 3, 1, 1, 2, 2])",
        "minimumIndex(nums = [2,1,3,1,1,2])",
        "minimumIndex(nums = [2,3,1,3,1,4,2])",
        "minimumIndex(nums = [2, 1, 3, 1, 4, 2, 2])",
        "minimumIndex([2, 1, 2])",
        "minimumIndex(nums = [1,2,1,2,1,2,1])",
        "minimumIndex(nums = [1, 2, 2, 1, 3, 1])",
        "minimumIndex(nums = [2, 2, 1, 3, 1])",
        "minimumIndex(nums = [2,3,2,4,1])",
        "minimumIndex(nums = [3, 1, 4, 3, 2, 2])"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 5, offers = [[1,2,5],[2,3,10],[3,4,5]])",
        "maximizeTheProfit(n = 5, offers = [[1,3,3],[2,5,5],[4,7,10]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,5],[3,4,5],[1,3,10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 4, 3], [2, 5, 4], [3, 6, 5], [4, 7, 6], [5, 8, 7]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [1, 1, 3], [2, 3, 6]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 2], [3, 4, 5], [1, 5, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,5],[2,3,4],[3,4,7],[2,4,6],[4,5,10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [3, 5, 5], [2, 5, 4], [1, 4, 3], [4, 5, 7]])",
        "maximizeTheProfit(n = 1, offers = [[1,2,5], [1,3,2], [1,4,6]])",
        "maximizeTheProfit(n = 10, offers = [[1, 3, 1], [2, 4, 2], [3, 6, 3], [6, 10, 4], [7, 12, 5], [8, 13, 6]])"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue([1,2,3,4,5])",
        "maximumTripletValue(nums = [3, 1, 5, 2])",
        "maximumTripletValue([5, 4, 3])",
        "maximumTripletValue(nums = [3, 4, 5, 2])",
        "maximumTripletValue(nums = [2, 3, 7, 1])",
        "maximumTripletValue(nums=[-1,2,3])"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"LR_\")",
        "furthestDistanceFromOrigin(moves = \"_LR_\")",
        "furthestDistanceFromOrigin(moves = \"_LR_\")",
        "furthestDistanceFromOrigin(moves = \"LR__\")",
        "furthestDistanceFromOrigin(moves = \"__LR_\")",
        "furthestDistanceFromOrigin(moves = \"LL_RR_\")",
        "furthestDistanceFromOrigin('_LR_')",
        "furthestDistanceFromOrigin(moves = \"L__RR\")",
        "furthestDistanceFromOrigin(moves = \"LR_LR_\")",
        "furthestDistanceFromOrigin(moves = \"__R__L__\")"
    ],
    "sample_149": [
        "finalString(s = 'string')",
        "finalString(s = \"string\")",
        "finalString(s = \"sting\")",
        "finalString(s = 'stingr')",
        "finalString(s = 'tringis')",
        "finalString(s = 'stirng')",
        "finalString(s = 'gntsr')",
        "finalString(s = 'gntris')",
        "finalString(s = \"testng\")",
        "finalString(s = \"siterg\")"
    ],
    "sample_162": [
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum([10, 20, 30])",
        "maxSum(nums = [55, 92, 88])",
        "maxSum(nums=[12, 23, 34])",
        "maxSum(nums = [1, 23, 456, 789])",
        "maxSum([15, 12, 18, 14, 20])",
        "maxSum([8, 12, 15, 7, 9, 5, 10, 18])"
    ],
    "sample_230": [
        "countWays(nums = [3, 2, 1])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [3,2,1])",
        "countWays(nums = [3,2,1])",
        "countWays(nums = [4, 2, 1])",
        "countWays(nums = [2, 2, 2])",
        "countWays(nums = [2, 2, 2, 2])",
        "countWays(nums = [1, 2, 4])",
        "countWays(nums = [3, 3, 3, 3, 3])",
        "countWays([1, 2, 3, 0])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n=1, target=1)",
        "minimumPossibleSum(n = 1, target = 10)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 1, target = 3)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 5, offers = [[1, 2, 1], [2, 3, 2], [3, 4, 1]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 1], [3, 4, 2], [0, 3, 3]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 1], [2, 4, 1], [3, 5, 1]])",
        "maximizeTheProfit(N = 4, offers = [[1,3,2],[2,4,1],[3,4,3]])",
        "maximizeTheProfit(N = 3, offers = [[1,2,2],[2,3,2],[3,4,1]])",
        "maximizeTheProfit(N = 6, offers = [[1, 2, 1], [3, 4, 1], [0, 5, 2]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 2], [0, 1, 1], [2, 3, 1]])",
        "maximizeTheProfit(N = 3, offers = [[1,1,1],[2,3,1],[3,3,1]])",
        "maximizeTheProfit(N = 5, offers = [[1, 3, 3], [1, 2, 1], [4, 5, 2]])",
        "maximizeTheProfit(N = 6, offers = [[1,3,1], [2,4,3], [3,5,5], [4,6,2]])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 5, offers = [[1, 3, 5], [2, 4, 7]])",
        "maximizeTheProfit(n = 10, offers = [[1, 3, 3], [4, 7, 2], [6, 9, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 4, 3], [3, 4, 1]])",
        "maximizeTheProfit(n = 5, offers = [[0, 2, 5], [1, 4, 7], [0, 3, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 6], [3, 4, 3], [1, 3, 1]])",
        "maximizeTheProfit(n = 5, offers = [[0,1,5],[1,2,5],[2,3,1],[0,3,10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 1, 2], [2, 3, 3], [3, 5, 4]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 4], [3, 4, 6], [0, 1, 2], [2, 4, 5], [3, 4, 10]])",
        "maximizeTheProfit(n=4, offers=[[1,2,5],[1,3,2],[2,3,3],[2,4,3],[3,4,1]])",
        "maximizeTheProfit(n = 10, offers = [[1, 5, 4], [2, 5, 5], [3, 7, 6], [5, 8, 7], [7, 10, 8]])"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 60)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40], target = 50)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 12], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [6, 8, 9], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [25, 30, 35, 40], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [30, 40, 20, 35, 50], target = 45)",
        "numberOfEmployeesWhoMetTarget(hours = [45, 23, 67, 34], target = 80)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 2, 3, 7, 8, 5], target = 10)"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,3,2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,3,2,1,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,2,1,3,1,1,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 4, 3, 2, 1, 5])",
        "countCompleteSubarrays(nums=[1, 2, 1, 3, 4, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1,2,1,2,1,2,3,4,1,2,3,4])",
        "countCompleteSubarrays([2,3,1,2,3,2,3,3,1,2])",
        "countCompleteSubarrays(nums = [2,5,1,2,3,4,1,2,3,4,5,4,3,2,5])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3])",
        "countWays([1, 2, 3])",
        "countWays([1, 2, 3])",
        "countWays(nums = [2, 1, 3])",
        "countWays(nums = [2, 0, 1])",
        "countWays(nums = [3, 1, 2])",
        "countWays(nums = [2,0,1,3])",
        "countWays([1, 0, 2, 1])",
        "countWays(nums = [3, 2, 1, 3])",
        "countWays(nums = [3, 2, 1, 4, 0])"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups([3, 2, 1])",
        "maxIncreasingGroups([2, 2, 2])",
        "maxIncreasingGroups(usageLimits = [0, 1, 0])",
        "maxIncreasingGroups(usageLimits = [0, 0, 1])",
        "maxIncreasingGroups(usageLimits = [0, 1, 2, 3, 4])",
        "maxIncreasingGroups([2, 3, 1, 1, 1])",
        "maxIncreasingGroups(usageLimits = [4, 2, 5, 1])",
        "maxIncreasingGroups(usageLimits = [2,3,1,4,5])",
        "maxIncreasingGroups([3, 2, 5, 1, 1, 9, 3, 4])"
    ],
    "sample_173": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n=3, k=4)"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2,3,1,3,2,3,1], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 1, 4, 5], m = 2, k = 1)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4, 5], m=3, k=1)",
        "countInterestingSubarrays(nums = [2, 3, 1, 3, 2, 5], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [2, 1, 3, 1, 2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [4, 1, 2, 3, 5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2,3,1,3,2,4,1,3,2], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,3,2,3,1,2,1,1], m = 3, k = 2)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [2, 1, 3, 1, 2, 1, 3, 1, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 2, 3, 1, 4])"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1], k = 2)",
        "longestEqualSubarray(nums = [1, 3, 2, 2, 3, 1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3,1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 3], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,10], k = 5)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 3, 1], k = 1)",
        "longestEqualSubarray(nums = [1,2,2,1,2,3,2,1,2], k = 1)"
    ],
    "sample_170": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"for\", \"all\"], s = \"fa\")",
        "isAcronym(words = [\"b\", \"a\", \"n\", \"a\", \"n\", \"a\"], s = \"BAN\")",
        "isAcronym(words = [\"my\", \"test\"], s = \"mt\")",
        "isAcronym(words = [\"this\", \"is\", \"sparta\"], s = \"ts\")",
        "isAcronym(words = [\"water\", \"bottle\"], s = \"WB\")",
        "isAcronym(words = [\"beautiful\"], s = \"ba\")",
        "isAcronym(words = [\"Ball\", \"Arm\", \"Apple\"], s = \"BAA\")"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '00')",
        "maximumOddBinaryNumber(s='001')",
        "maximumOddBinaryNumber(s='010')",
        "maximumOddBinaryNumber(s = '1100')",
        "maximumOddBinaryNumber(s = '1001')"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [2, 1, 3])",
        "countWays(nums = [2, 1, 3])",
        "countWays([1,2,3,4,5,6])",
        "countWays(nums = [2,1,3])",
        "countWays(nums = [3, 2, 1, 4, 5])",
        "countWays(nums=[1, 2, 3, 4, 5])",
        "countWays(nums=[1, 3, 2])",
        "countWays(nums=[2, 3, 1, 4, 5])"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [3, 4, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 4], [3, 4, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 5], [2, 4, 8], [3, 5, 4]])",
        "maximizeTheProfit(n = 6, offers = [[1,3,5],[2,4,10]])",
        "maximizeTheProfit(n = 10, offers = [[1, 3, 5], [2, 5, 7], [3, 7, 9], [4, 9, 11]])",
        "maximizeTheProfit(n = 10, offers = [[1, 3, 1], [2, 5, 2], [3, 6, 3], [4, 7, 4], [5, 8, 5], [6, 9, 6], [7, 10, 7]])",
        "maximizeTheProfit(n = 7, offers = [[0, 1, 5], [1, 2, 4], [2, 3, 3], [3, 4, 2], [4, 5, 1], [5, 6, 1]])",
        "maximizeTheProfit(n = 6, offers = [[1,2,5],[2,3,4],[1,4,2]])",
        "maximizeTheProfit(n = 10, offers = [[1, 4, 6], [2, 3, 7], [5, 8, 1], [6, 10, 5]])",
        "maximizeTheProfit(n = 10, offers = [[0, 2, 5], [1, 2, 3], [1, 3, 5], [3, 5, 2]])"
    ],
    "sample_122": [
        "minimumIndex([1, 2, 2, 3, 2])",
        "minimumIndex(nums = [2,2,1,1,1])",
        "minimumIndex(nums = [1,2,2,3,3,3,4,4,4,4])",
        "minimumIndex(nums = [1,2,2,3,3,4])",
        "minimumIndex(nums = [2,1,2,5,3,2])",
        "minimumIndex(nums = [1,2,2,2,1,1])",
        "minimumIndex(nums = [2,1,1,1,2,2,2])",
        "minimumIndex(nums = [3,3,2,2,1,1])",
        "minimumIndex([1,2,3,4,5,6,7,8,9])",
        "minimumIndex([2, 3, 2, 3, 2, 3, 2])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1,3],[2,4],[3,5]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]])",
        "numberOfPoints([[2,3],[4,5],[6,7]])",
        "numberOfPoints(nums = [[2,5],[5,6],[7,8]])",
        "numberOfPoints(nums = [[3,5],[1,4],[2,3]])",
        "numberOfPoints(nums = [[2,5], [4,6], [8,8]])",
        "numberOfPoints([[2,5],[3,7],[6,7]])",
        "numberOfPoints(nums = [[1,5],[3,8],[4,5]])",
        "numberOfPoints(nums = [[3, 6], [8, 9], [2, 7]])",
        "numberOfPoints([[3, 4], [3, 6], [2, 6], [1, 9], [5, 7], [3, 5], [3, 8]])"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"a b\", \"c\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"Hello\", \"World!\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"\", \"a\", \"b\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"hello,world\", \"my,name,is,John\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"word1\", \"word2\"], separator = \"ord\")",
        "splitWordsBySeparator(words = [\"apple,\", \"banana,\", \"cherry,\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"a.b\", \"c,d\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"apple\",\"banana\",\"cherry\",\"durian\"], separator = \"\")",
        "splitWordsBySeparator(words=[\"\", \"one\", \"\", \"two\", \"three\", \"\", \"four\", \"\"], separator=\" \")"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 1, target = 3)"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints([[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 5]])",
        "numberOfPoints([[1, 3], [3, 5], [5, 7]])",
        "numberOfPoints(nums = [[1, 3], [2, 3], [4, 6]])",
        "numberOfPoints([[1, 3], [2, 4], [1, 5]])",
        "numberOfPoints([[0,1], [2,3], [4,5]])",
        "numberOfPoints(nums = [[1,3], [3,5], [4,7]])",
        "numberOfPoints([[1, 3], [4, 5], [1, 5]])",
        "numberOfPoints(nums = [[2,3],[3,5]])"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 3, 1, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 1, 4, 5, 6], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 4, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], m = 4, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [3, 1, 4, 1, 5], m = 5, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 1, 3, 2, 1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2,3,1,4,2,1,2,3,4,1], m = 3, k = 1)"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7], k = 3)",
        "sumIndicesWithKSetBits(nums = [4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 8, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [5, 4, 1, 2, 3, 6, 7], k = 2)"
    ],
    "sample_203": [
        "minimumOperations(\"25\")",
        "minimumOperations(num = \"025\")",
        "minimumOperations(\"01\")",
        "minimumOperations('025')",
        "minimumOperations(\"20\")",
        "minimumOperations(num = \"05\")",
        "minimumOperations(\"00125\")",
        "minimumOperations(num = \"72\")",
        "minimumOperations(num = \"2050\")",
        "minimumOperations(\"012\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1,2,3,4], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 10, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 1, 2, 1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,3,2,4,1], modulo = 7, k = 3)",
        "countInterestingSubarrays(nums = [3, 1, 4, 3], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [2,3,1,2,4,3], modulo = 10, k = 4)",
        "countInterestingSubarrays(nums = [5,2,3,6], modulo = 7, k = 2)",
        "countInterestingSubarrays(nums = [3, 2, 1, 5, 4, 6], modulo = 3, k = 2)"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1,2,3,1,2,3,1,2,3], K = 2)",
        "longestEqualSubarray(A = [1,2,3,1,2,3,1,2,3], K = 2)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 1, 2, 3, 4], K = 3)",
        "longestEqualSubarray(A = [1,2,1,2,1,2], K = 2)",
        "longestEqualSubarray(A = [1, 2, 3, 2, 1, 2, 3, 2, 1], K = 2)",
        "longestEqualSubarray(A = [1,2,3,1,2,2,1,2,3,3], K = 2)",
        "longestEqualSubarray(A = [1,2,3,1,2,3,4,1,2,3,4,1,2,3,4], K = 2)",
        "longestEqualSubarray(A = [1, 2, 3, 1, 2, 1, 2, 3, 1, 2, 3, 1, 2, 3], K = 2)",
        "longestEqualSubarray(A = [1,2,3,1,2,3,1,2,3,3,2,1], K = 1)",
        "longestEqualSubarray(A = [1,2,3,1,2,1,1,3,2,1,2,2], K = 2)"
    ],
    "sample_146": [
        "finalString(s = 'inter')",
        "finalString(s = 'inter')",
        "finalString(s = 'iponter')",
        "finalString(s = 'iponter')",
        "finalString(s = 'pinteri')",
        "finalString(s = \"pinter\")",
        "finalString(s = 'iponteri')",
        "finalString(s = 'interi')",
        "finalString(s = 'tinepr')",
        "finalString(s = \"niipotr\")"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 35)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 15, 25], target = 18)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 20, 15, 18], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 7, 8], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [70, 80, 90, 60, 100], target = 80)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 5, 6, 8, 12, 7], target = 5)"
    ],
    "sample_218": [
        "numberOfPoints([[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints([[1, 3], [2, 4], [5, 7]])",
        "numberOfPoints(nums = [[1, 4], [2, 5], [3, 6]])",
        "numberOfPoints([[1, 3], [2, 4], [2, 5]])",
        "numberOfPoints(nums=[[1, 3], [2, 5], [3, 7]])",
        "numberOfPoints(nums = [[1, 3], [5, 7], [2, 4]])",
        "numberOfPoints([[1, 3], [2, 4], [2, 3]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [2, 4]])",
        "numberOfPoints([[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]])",
        "numberOfPoints([[2, 5], [1, 3], [0, 6]])"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 2, 5])",
        "maxIncreasingGroups(A = [1, 2, 5])",
        "maxIncreasingGroups(A = [1, 2, 5])",
        "maxIncreasingGroups([1, 2, 3])",
        "maxIncreasingGroups([1, 2, 3])",
        "maxIncreasingGroups(A = [1, 2, 3, 4])",
        "maxIncreasingGroups(A = [1, 1, 1])",
        "maxIncreasingGroups(A = [1, 2, 3, 5])",
        "maxIncreasingGroups([1, 1, 1, 1, 1, 1])",
        "maxIncreasingGroups([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 3, offers = [[0,1,1],[1,2,2],[2,3,3]])",
        "maximizeTheProfit(n = 4, offers = [[1,2,3],[3,4,1]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 2], [2, 3, 1], [3, 4, 2]])",
        "maximizeTheProfit(n = 5, offers = [[0,1,1],[1,2,2],[3,4,3]])",
        "maximizeTheProfit(n = 4, offers = [[1,1,2],[2,3,2],[3,4,2]])",
        "maximizeTheProfit(n = 5, offers = [[1,3,2],[2,5,3],[1,2,1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 1, 1], [2, 3, 1]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 1], [2, 1, 2], [3, 3, 1]])",
        "maximizeTheProfit(n=4, offers=[[1, 1, 2], [1, 2, 1], [2, 3, 2]])",
        "maximizeTheProfit(n=4, offers=[[1, 2, 1], [3, 2, 1]])"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"LLR_RRR\")",
        "furthestDistanceFromOrigin(moves = \"LRL_RRR\")",
        "furthestDistanceFromOrigin(moves = \"L__RRR\")",
        "furthestDistanceFromOrigin(moves = \"L__RR_\")",
        "furthestDistanceFromOrigin(moves = \"LRRL__R\")",
        "furthestDistanceFromOrigin(moves = \"LLRR__\")",
        "furthestDistanceFromOrigin(moves = \"LRRR_LRRL\")",
        "furthestDistanceFromOrigin(moves = \"LLLR_R_R\")",
        "furthestDistanceFromOrigin(moves = \"L_R_L__RRR\")",
        "furthestDistanceFromOrigin(moves = \"R__LRL_\")"
    ],
    "sample_175": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 1, k = 4)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,3],[3,5],[5,7]])",
        "numberOfPoints(nums = [[1,4],[2,5],[3,6]])",
        "numberOfPoints(nums = [[1,3],[5,7]])",
        "numberOfPoints([[1,3],[2,4],[5,6]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [4, 6]])",
        "numberOfPoints(nums = [[1,3],[3,5],[6,6]])",
        "numberOfPoints([[1,4],[2,5],[3,6]])",
        "numberOfPoints([[1,3], [2,4], [5,6]])",
        "numberOfPoints(nums = [[1,3],[4,7],[2,4]])",
        "numberOfPoints(nums = [[2,5],[3,5],[4,6]])"
    ],
    "sample_205": [
        "minimumOperations(num = \"025\")",
        "minimumOperations(num = \"025\")",
        "minimumOperations(num = \"025\")",
        "minimumOperations(\"0125\")",
        "minimumOperations(num = \"000\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(\"00\")",
        "minimumOperations(\"120\")",
        "minimumOperations(\"1200\")",
        "minimumOperations(num = \"000000\")"
    ],
    "sample_120": [
        "minimumIndex(nums = [2, 1, 2, 5, 3, 2])",
        "minimumIndex(nums = [2,1,2,5,3,2])",
        "minimumIndex(nums = [1, 2, 2, 3])",
        "minimumIndex(nums = [1, 2, 2, 3, 1])",
        "minimumIndex(nums = [2, 3, 2, 3, 2])",
        "minimumIndex(nums = [2, 3, 2, 1, 3, 2])",
        "minimumIndex(nums = [1, 2, 1, 3, 1, 2, 1])",
        "minimumIndex(nums = [2,1,2,2,2,2,3,4,2])",
        "minimumIndex(nums = [2,3,2,4,2,5,2])",
        "minimumIndex([2, 2, 1, 3, 3, 3, 3])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"LL__RRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR_LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LRRR_LLLL\")",
        "furthestDistanceFromOrigin(moves = \"L_RR_L__\")",
        "furthestDistanceFromOrigin(moves = \"LRR_R_LL\")",
        "furthestDistanceFromOrigin(moves = \"LR_RR_L_\")",
        "furthestDistanceFromOrigin(moves = \"LRR__RLLL\")",
        "furthestDistanceFromOrigin(moves = \"LRRL_L_R\")",
        "furthestDistanceFromOrigin(moves = \"L__R_R_L__R_\")",
        "furthestDistanceFromOrigin(moves = \"LRL_L_LRRL_\")"
    ],
    "sample_161": [
        "maxSum(nums = [55, 9])",
        "maxSum(nums = [55, 9])",
        "maxSum(nums = [55, 9])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [55, 33, 11])",
        "maxSum(nums = [12, 34, 56, 78])",
        "maxSum(nums = [55, 23, 45, 12, 7])",
        "maxSum(nums = [55, 23, 45, 12, 78, 90])",
        "maxSum(nums = [55, 23, 51, 98, 87])",
        "maxSum(nums = [55, 9, 35])"
    ],
    "sample_160": [
        "maxSum(nums = [51,32,43])",
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [54, 546, 548, 60])",
        "maxSum(nums = [55, 9])",
        "maxSum(nums = [1,2,3,4])",
        "maxSum([10,12,19,14])",
        "maxSum([15, 30, 50])",
        "maxSum(nums = [100, 101, 102])",
        "maxSum(nums = [12, 13, 15, 23])",
        "maxSum(nums = [50, 12, 123, 47, 76, 15, 156])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = [\"one-two-three\", \"four-five-six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one-two-three\", \"four-five-six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one-two-three\", \"four-five-six\"], separator = \"-\")",
        "splitWordsBySeparator(words = ['one-two', 'three-four', 'five six'], separator = '-')",
        "splitWordsBySeparator(words = [\"one\", \"two-three-four\", \"five-six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one-two\", \"three-\", \"-four-five-six\"], separator = \"-\")",
        "splitWordsBySeparator(words = ['one,two', 'three,four,five,six'], separator = ',')",
        "splitWordsBySeparator(words = ['one-two', 'three/four', 'five/six'], separator = '/')",
        "splitWordsBySeparator(words=['one two', 'three four', 'five six'], separator=' ')",
        "splitWordsBySeparator(words=[\"one-two\", \"three\", \"four,five-six\"], separator=\"[,-]\")"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 15, 20, 25], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 15, 20], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [80, 90, 100, 110], target = 120)",
        "numberOfEmployeesWhoMetTarget(hours = [80, 60, 75], target = 90)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 8], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 6, 5], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [60, 75, 48, 80, 90], target = 70)"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 60)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [0,1,2,3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours=[10, 15, 20, 25, 30], target=35)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 5, 7, 9], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10,15,20,12,18], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours=[8,12,6,14], target=10)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 1, 9, 3, 2], target = 5)"
    ],
    "sample_171": [
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 10)"
    ],
    "sample_159": [
        "maxSum(nums = [55,9])",
        "maxSum(nums = [55,9])",
        "maxSum(nums = [55,9])",
        "maxSum(nums = [55,9])",
        "maxSum(nums = [55,9])",
        "maxSum(nums = [1,2,3,4])",
        "maxSum(nums = [55,9,876,3,12])",
        "maxSum(nums = [11,22,33,44,55])",
        "maxSum(nums = [10, 21, 32, 43, 54])",
        "maxSum(nums = [55,9,51,10,11])"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 2, 3], m = 4)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 14)",
        "canSplitArray(nums = [1,2,3,4], m = 6)",
        "canSplitArray(nums = [2, 3, 1, 2], m = 5)",
        "canSplitArray(nums = [2, 2, 1], m = 3)",
        "canSplitArray(nums = [2, 5, 1, 3, 4], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 5, 6], m = 6)",
        "canSplitArray(nums = [2, 1, 5, 6], m = 3)",
        "canSplitArray(nums = [3, 1, 7, 3], m = 5)",
        "canSplitArray(nums = [3, 10, 3, 1, 2], m = 5)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"hello\", \"world!\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"bana\", \"nana\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"apple\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"\", \"\", \"\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"applepie\"], separator = \"pie\")",
        "splitWordsBySeparator(words = [\"hello\", \"world\", \"split\", \"me\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple.banana\", \"orange.pineapple\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\", \"date\"], separator = \"a\")",
        "splitWordsBySeparator(words=[\"Hello,World\", \"I,Love,Coding\"], separator=\",\")"
    ],
    "sample_172": [
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 1, k = 2)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n=3, k=2)"
    ],
    "sample_228": [
        "countWays(nums = [0,1,2,3,4])",
        "countWays(nums = [1,2,3,4,5])",
        "countWays(nums = [1,2,3,4,5])",
        "countWays([0,1,2,3])",
        "countWays(nums = [1,2,3,4])",
        "countWays([1,2,3,4,5])",
        "countWays(nums = [2, 1, 0, 2, 1])",
        "countWays([0,1,1,2,3])",
        "countWays(nums = [0,1,2,3,4,5,6,7])",
        "countWays(nums = [1,3,5,7,0,2,4,6])"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '1100')",
        "maximumOddBinaryNumber('110')"
    ],
    "sample_119": [
        "minimumIndex(nums = [1, 2, 2, 3, 2])",
        "minimumIndex(nums = [1, 2, 2, 3, 1, 4, 2])",
        "minimumIndex(nums = [1, 2, 2, 3, 1, 4, 2])",
        "minimumIndex(nums = [2,1,3,1,2,2])",
        "minimumIndex(nums = [2, 2, 1, 1, 1])",
        "minimumIndex(nums = [2, 1, 3, 1, 1, 2])",
        "minimumIndex(nums = [1, 2, 2, 3, 3, 4])",
        "minimumIndex(nums = [1, 2, 2, 3, 2, 1, 1, 3])",
        "minimumIndex(nums = [1, 2, 2, 2, 3, 3, 4, 4, 4, 4])",
        "minimumIndex(nums = [2, 3, 2, 2, 2, 3, 1, 0, 0])"
    ],
    "sample_153": [
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [1,2,3,4,5], m = 3)",
        "canSplitArray(nums = [1,2,3,4], m = 6)",
        "canSplitArray(nums=[1,2,3,4,5], m=3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 3)",
        "canSplitArray(nums = [1,2,3,3], m = 2)",
        "canSplitArray(nums=[1,4,4], m=6)",
        "canSplitArray(nums=[1, 2, 3, 4, 5], m=10)",
        "canSplitArray(nums = [2,3,1,2,3,2], m = 7)"
    ],
    "sample_147": [
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'stingr')",
        "finalString(s = 'strign')",
        "finalString(s = 'sntir')",
        "finalString(s = 'srting')",
        "finalString(s = 'sngir')",
        "finalString(s = \"srting\")",
        "finalString(s = 'sintgr')"
    ],
    "sample_174": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 1, k = 2)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1,2,3,4], m = 6)",
        "canSplitArray(nums = [2,3,4], m = 6)",
        "canSplitArray(nums = [2,3,4,5,6], m = 10)",
        "canSplitArray(nums = [2, 4, 1, 3], m = 5)",
        "canSplitArray(nums = [1,1], m = 2)",
        "canSplitArray(nums = [10,5,5], m = 11)",
        "canSplitArray(nums = [2,1,5], m = 3)",
        "canSplitArray(nums = [1, 2, 5, 9], m = 6)",
        "canSplitArray(nums = [1,3,3,4], m = 6)",
        "canSplitArray(nums = [2, 4, 3, 1, 5], m = 10)"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 4, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 3])",
        "countCompleteSubarrays(nums=[1,2,1,3,4])",
        "countCompleteSubarrays(nums = [2, 1, 2, 1, 3])",
        "countCompleteSubarrays(nums = [1,2,3,4,2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 1, 2, 3])",
        "countCompleteSubarrays(nums = [2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays([1, 2, 3, 2, 1, 3, 4])"
    ],
    "sample_150": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 5, target = 1)"
    ],
    "sample_176": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 6, k = 3)",
        "countInterestingSubarrays(nums = [1,2,1,2,1,2], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 6, k = 3)",
        "countInterestingSubarrays(nums = [4,5,0,0,0,1], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [5,0,1,2,3,4], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [2,2,2,2,2], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 1, 0, 1, 1], modulo = 2, k = 1)"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 2, 7, 1, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8,9], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 3, 2, 1, 0], k = 2)",
        "sumIndicesWithKSetBits(nums = [3,5,7,9,11], k = 3)",
        "sumIndicesWithKSetBits(nums = [4, 3, 2, 6, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [2,4,5,6,8,9], k = 2)"
    ],
    "sample_151": [
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = \"string\")",
        "finalString(s = 'stringi')",
        "finalString(s = 'gntisr')",
        "finalString(s = 'ingstr')",
        "finalString(s = 'sgnirt')",
        "finalString(s = 'sirgnt')",
        "finalString(s = \"tirng\")",
        "finalString(s = \"rtsngi\")"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums=[1, 2, 3, 4, 5], k=2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 1)",
        "sumIndicesWithKSetBits(nums=[1,2,3,4], k=2)",
        "sumIndicesWithKSetBits(nums = [4, 5, 2, 1], k = 2)"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups([1, 2, 3, 4])",
        "maxIncreasingGroups(usageLimits = [1, 3, 5])",
        "maxIncreasingGroups(usageLimits = [2, 5, 7])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(usageLimits = [2,3,4])",
        "maxIncreasingGroups(usageLimits = [3, 1, 2, 5])"
    ],
    "sample_204": [
        "minimumOperations(s = \"0250\")",
        "minimumOperations(s = \"0075\")",
        "minimumOperations(s = \"02550\")",
        "minimumOperations(\"025\")",
        "minimumOperations(s = \"1100\")",
        "minimumOperations(s = \"022550\")",
        "minimumOperations(s = \"025575\")",
        "minimumOperations(s = \"050250\")",
        "minimumOperations(s = \"100125\")",
        "minimumOperations(\"255200\")"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 35)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 15, 20, 25, 30], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 25)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 30, 40, 50], target = 35)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 15, 12, 20, 25], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [15, 20, 18, 30], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 20, 25, 30, 40], target = 20)"
    ],
    "sample_148": [
        "finalString(s = 'inter')",
        "finalString(s = 'inter')",
        "finalString(s = 'itner')",
        "finalString(s = 'itner')",
        "finalString(s = \"inter\")",
        "finalString(s = 'rtenip')",
        "finalString(s = 'nitrop')",
        "finalString(s = 'itnepr')",
        "finalString(s = 'niter')",
        "finalString(s = \"inroter\")"
    ],
    "sample_168": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words=[\"Hello\", \"World\"], s=\"HW\")",
        "isAcronym(words = [\"every\", \"body\"], s = \"eby\")",
        "isAcronym(words = [\"word\", \"another\", \"word\"], s = \"war\")",
        "isAcronym(words = [\"Banana\", \"Watermelon\"], s = \"BWM\")",
        "isAcronym(words=[\"bad\", \"boy\"], s=\"by\")",
        "isAcronym(words = [\"Higher\", \"Learning\"], s = \"HL\")",
        "isAcronym(words = [\"boy\", \"cold\", \"fun\"], s = \"bcf\")",
        "isAcronym(words=[\"We\", \"are\", \"not\", \"ready\"], s=\"WENR\")",
        "isAcronym(words = [\"Hi\", \"I\", \"am\", \"Batman\"]), s = \"HIMB\")"
    ],
    "sample_201": [
        "minOperations(nums = [1,1,1], target = 3)",
        "minOperations(nums = [1,2,4], target = 4)",
        "minOperations(nums = [1,1,1], target = 2)",
        "minOperations(nums = [2,3,5], target = 10)",
        "minOperations(nums=[1,1,1], target=3)",
        "minOperations(nums=[1,2,3,4], target=10)",
        "minOperations(nums=[1,1,1], target=2)",
        "minOperations(nums = [2,3,4,5,6], target = 10)",
        "minOperations(nums = [4, 2, 3], target = 1)",
        "minOperations(nums = [5,1,2,3], target = 25)"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '011')",
        "maximumOddBinaryNumber(s = '011')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '110')",
        "maximumOddBinaryNumber(s = '01')",
        "maximumOddBinaryNumber(s='0110')",
        "maximumOddBinaryNumber(s = '011100')",
        "maximumOddBinaryNumber(s='111000')"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '011')",
        "maximumOddBinaryNumber(s = '100')",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '111')",
        "maximumOddBinaryNumber('001')",
        "maximumOddBinaryNumber(s = '0010')"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 4, target = 8)",
        "minimumPossibleSum(n = 4, target = 8)",
        "minimumPossibleSum(n = 4, target = 7)",
        "minimumPossibleSum(n = 4, target = 6)",
        "minimumPossibleSum(n = 4, target = 5)",
        "minimumPossibleSum(n = 4, target = 6)",
        "minimumPossibleSum(n=3, target=5)"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LAR\")",
        "furthestDistanceFromOrigin(moves = \"LLAR\")",
        "furthestDistanceFromOrigin(moves = \"LRAR\")",
        "furthestDistanceFromOrigin(moves = \"LRR\")",
        "furthestDistanceFromOrigin(moves = \"LRA\")",
        "furthestDistanceFromOrigin(moves = \"LLARL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRA\")",
        "furthestDistanceFromOrigin(moves = \"LRRA\")",
        "furthestDistanceFromOrigin(moves = \"RLARL\")",
        "furthestDistanceFromOrigin(\"LRL\")"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 0)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 0)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n=2, target=3)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 15, 20], target = 25)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 5, 5], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 0, 0, 0, 0], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 0, 0, 0], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours=[3, 2, 1], target=4)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 10, 30], target = 25)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 5, 20, 15], target = 18)",
        "numberOfEmployeesWhoMetTarget(hours=[60, 40, 50], target=70)",
        "numberOfEmployeesWhoMetTarget(hours = [30, 20, 15, 35], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [40, 30, 60], target = 45)"
    ],
    "sample_231": [
        "countWays([0, 1, 2])",
        "countWays([0, 1, 2])",
        "countWays(nums = [0, 2, 1])",
        "countWays(nums = [0, 1, 2])",
        "countWays([0, 2, 1])",
        "countWays([2, 0, 1])",
        "countWays([0, 1, 2, 3])",
        "countWays(nums = [2, 1, 0])",
        "countWays(nums = [0, 1, 2, 3])",
        "countWays([1, 3, 0, 2])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"LLRR__\")",
        "furthestDistanceFromOrigin(moves = \"LR__LR_\")",
        "furthestDistanceFromOrigin(moves = \"LLL_RRR\")",
        "furthestDistanceFromOrigin(moves = \"LRRR__RLL\")",
        "furthestDistanceFromOrigin(moves = \"LLRR_LRR_\")",
        "furthestDistanceFromOrigin(moves = 'LR__')",
        "furthestDistanceFromOrigin(moves = \"LLRR_RRRLL\")",
        "furthestDistanceFromOrigin(moves = \"LRRR_RRRLLL\")",
        "furthestDistanceFromOrigin(moves = 'LR__RLL_')",
        "furthestDistanceFromOrigin(moves = \"LRR_RRRLLLLLRRRR\")"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n=2, target=3)",
        "minimumPossibleSum(n=2, target=3)",
        "minimumPossibleSum(n=2, target=3)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n=2, target=4)",
        "minimumPossibleSum(n = 3, target = 6)"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 1, 2, 3, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 2, 1, 3, 4, 2, 1])",
        "countCompleteSubarrays(nums = [2, 1, 4, 3, 2, 1, 4, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 4, 3, 2, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 2, 2, 1, 3, 1, 2])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,3,2,4,1,2])"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [2, 3, 3, 2, 3], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 10)",
        "canSplitArray(nums = [2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [2, 5, 3], m = 5)",
        "canSplitArray(nums = [2, 3, 1, 2], m = 4)",
        "canSplitArray(nums = [2, 3, 2], m = 6)",
        "canSplitArray(nums = [2, 3, 3, 2, 3, 2], m = 6)",
        "canSplitArray(nums = [3, 2, 5], m = 7)",
        "canSplitArray(nums = [10, 20, 15, 5], m = 20)"
    ],
    "sample_200": [
        "minOperations(nums = [1, 2, 4, 8], target = 5)",
        "minOperations(nums = [1,1,4,2,3], target = 4)",
        "minOperations(nums = [1,2,3,4], target = 10)",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], target = 5)",
        "minOperations(nums = [1, 2, 4, 8, 16], target = 5)",
        "minOperations(nums = [1, 10, 100], target = 9)",
        "minOperations(nums = [1,1,2,1], target = 4)",
        "minOperations(nums = [1,1,1,2,2,3], target = 4)",
        "minOperations(nums = [5, 1, 1, 1, 1, 1, 1], target = 4)",
        "minOperations(nums = [2,1,1,2,1], target = 10)"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 1, 2, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 5, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 4, 6, 8, 10, 12], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 5, 2, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 5, 2, 7, 8, 9, 10], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 10, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 5, 2, 7, 1, 0], k = 3)"
    ],
    "sample_165": [
        "isAcronym(words = [\"For\", \"Your\", \"Eyes\"], s = \"FYE\")",
        "isAcronym(words = [\"for\", \"all\"], s = \"fa\")",
        "isAcronym(words = [\"For\", \"All\", \"Mankind\"], s = \"FAM\")",
        "isAcronym(words = [\"Mother\", \"of\", \"God\"], s = \"MOG\")",
        "isAcronym(words = [\"for\", \"your\", \"attention\"], s = \"fya\")",
        "isAcronym(words = [\"This\", \"is\", \"a\", \"test\"], s = \"TIAT\")",
        "isAcronym(words = [\"banana\", \"pear\"], s = \"bap\")",
        "isAcronym(words = [\"make\", \"any\", \"string\"], s = \"mAS\")",
        "isAcronym(words = [\"She\", \"Said\"], s = \"SS\")",
        "isAcronym(words = [\"everything\", \"everywhere\"], s = \"eew\")"
    ],
    "sample_227": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 5])",
        "countWays(nums = [1, 3, 5])",
        "countWays([1, 2, 3, 5, 6])",
        "countWays(nums = [2, 4, 1, 3])",
        "countWays(nums = [1, 2, 4, 5, 6])",
        "countWays(nums = [2, 3, 4, 1])",
        "countWays([0, 3, 5])",
        "countWays(nums = [1, 3, 2, 5, 7, 6])"
    ],
    "sample_158": [
        "maxSum(nums = [55, 9])",
        "maxSum(nums = [55, 9])",
        "maxSum(nums = [55, 9])",
        "maxSum(nums = [55, 9])",
        "maxSum(nums = [55, 9])",
        "maxSum(nums = [55, 9])",
        "maxSum(nums = [55, 9])",
        "maxSum(nums = [55, 33, 44])",
        "maxSum(nums = [55, 33, 22, 44, 11])",
        "maxSum(nums = [10, 2, 4, 1])"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,3,1], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,3,2,1], k = 1)",
        "longestEqualSubarray(nums = [1,2,2,3,3,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,3,2,1,2,3], k = 3)",
        "longestEqualSubarray(nums = [1,2,2,1,2,1,1,2], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1, 2, 3, 1, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,1,2,1,2,2,1,1,2,2,1,1,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,1,1,1,2,3,4], k = 5)"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 5, offers = [[0, 1, 5], [1, 2, 5], [2, 3, 5], [3, 4, 5]])",
        "maximizeTheProfit(n = 10, offers = [[1, 3, 5], [2, 5, 7], [4, 7, 9]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,5],[1,3,10],[2,4,5]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 5], [1, 2, 7], [2, 3, 2], [3, 4, 3], [4, 5, 4]])",
        "maximizeTheProfit(n = 6, offers = [[2, 5, 6], [1, 3, 2], [4, 5, 8]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 5], [1, 2, 4], [2, 3, 2], [3, 4, 1], [0, 4, 10]])",
        "maximizeTheProfit(n = 5, offers = [[0, 2, 2], [1, 3, 3], [2, 4, 4], [2, 5, 5], [4, 5, 10]])",
        "maximizeTheProfit(n = 6, offers = [[0,3,3],[2,5,4],[1,4,3]])",
        "maximizeTheProfit(n=4, offers=[[1,2,10],[2,3,8],[0,1,5]])",
        "maximizeTheProfit(n = 5, offers = [[0,1,6],[1,3,8],[2,4,8]])"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3])",
        "maxIncreasingGroups([1, 2, 3])",
        "maxIncreasingGroups(x = [1, 2, 3, 4])",
        "maxIncreasingGroups(x = [1, 2, 2, 3, 3, 3])",
        "maxIncreasingGroups(x = [1, 2, 2, 3, 4])",
        "maxIncreasingGroups(x=[1, 1, 1])",
        "maxIncreasingGroups(x = [2, 5, 10])",
        "maxIncreasingGroups(x = [1, 2, 4, 8, 16, 32])",
        "maxIncreasingGroups([1, 3, 5, 8, 10, 15])"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "sumIndicesWithKSetBits(nums=[1,2,3,4,5], k=2)",
        "sumIndicesWithKSetBits(nums = [4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 2, 4, 6], k = 2)",
        "sumIndicesWithKSetBits(nums=[4, 2, 1, 3, 5], k=2)",
        "sumIndicesWithKSetBits(nums = [2, 4, 5, 6, 7, 8, 9], k = 3)",
        "sumIndicesWithKSetBits(nums = [4, 5, 7, 10, 2, 6], k = 3)"
    ],
    "sample_207": [
        "minimumOperations(num = \"100\")",
        "minimumOperations(num = \"001\")",
        "minimumOperations(num = \"001\")",
        "minimumOperations(num = \"120\")",
        "minimumOperations(num = \"2050\")",
        "minimumOperations(num = \"27\")",
        "minimumOperations(\"25\")",
        "minimumOperations(\"0025\")",
        "minimumOperations(num = \"025575\")",
        "minimumOperations(\"007\")"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"LRR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLL\")",
        "furthestDistanceFromOrigin(moves=\"LRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLRR\")",
        "furthestDistanceFromOrigin(moves=\"LRRL\")",
        "furthestDistanceFromOrigin(moves = \"LRRLLL\")"
    ],
    "sample_206": [
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"2550\")",
        "minimumOperations(\"205\")",
        "minimumOperations('0011')",
        "minimumOperations(\"125\")",
        "minimumOperations('001255075')",
        "minimumOperations(num = \"200\")",
        "minimumOperations(num = \"0050\")",
        "minimumOperations(num = \"5050\")",
        "minimumOperations(\"752500\")"
    ],
    "sample_155": [
        "canSplitArray(nums = [7,2,5,10,8], m = 20)",
        "canSplitArray(nums = [1,2,3], m = 4)",
        "canSplitArray(nums = [2, 3, 1], m = 4)",
        "canSplitArray(nums = [2,2,1,1], m = 3)",
        "canSplitArray(nums = [2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [2, 3, 1, 1], m = 4)",
        "canSplitArray(nums = [1,2,3,4,5,6,7,8,9,10], m = 11)",
        "canSplitArray(nums = [2, 3, 1, 5], m = 3)",
        "canSplitArray(nums = [2, 1, 2, 1, 2, 1], m = 3)",
        "canSplitArray(nums = [1,10,100,200], m = 110)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 4, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [2, 1, 3, 2, 3, 1])",
        "countCompleteSubarrays(nums = [2, 3, 1, 3, 2, 3, 2, 3, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 1, 3, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 2, 3, 1, 5, 4, 2, 1, 3, 5, 4, 2])"
    ],
    "sample_202": [
        "minimumOperations(num = \"00257550\")",
        "minimumOperations(\"02575\")",
        "minimumOperations(num = \"2550\")",
        "minimumOperations(\"025750\")",
        "minimumOperations(num = \"125\")",
        "minimumOperations(\"000257550\")",
        "minimumOperations(num = \"2525\")",
        "minimumOperations(num = \"2000\")",
        "minimumOperations(\"1024\")",
        "minimumOperations(\"22225\")"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [\"a.b.c\", \"d.e.f\"], b = \".\")",
        "splitWordsBySeparator(a = [\"apple\", \"banana\", \"cherry\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"apple\", \"banana\"], b = \"a\")",
        "splitWordsBySeparator(a = ['a-b-c', 'd-e-f'], b = '-')",
        "splitWordsBySeparator(a = [\"a|b|c\", \"d|e|f\"], b = \"|\")",
        "splitWordsBySeparator(a = [\"banana\"], b = \"n\")",
        "splitWordsBySeparator(a = [\"apple banana\", \"mango\"], b = \" \")",
        "splitWordsBySeparator(a = [\"banana\", \"apple\"], b = \"an\")",
        "splitWordsBySeparator(a = ['apple-banana-cherry'], b = '-')",
        "splitWordsBySeparator(a=[\"apple-banana\", \"peach-orange\"], b=\"-\")"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 2, 7, 1, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 6, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 2, 7, 1, 3, 6], k = 1)",
        "sumIndicesWithKSetBits(nums = [4, 2, 1, 6, 2], k = 3)",
        "sumIndicesWithKSetBits(nums=[2, 3, 4, 1, 2], k=2)",
        "sumIndicesWithKSetBits(nums = [2, 4, 3, 6, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [4,2,7,1,0,3,8], k = 2)"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = '0101')",
        "maximumOddBinaryNumber(s = '0101')",
        "maximumOddBinaryNumber(s = '0000')",
        "maximumOddBinaryNumber(s = '1010')",
        "maximumOddBinaryNumber(s = '1100')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '1111')",
        "maximumOddBinaryNumber(s='1010')",
        "maximumOddBinaryNumber(s='0101')",
        "maximumOddBinaryNumber('1100')"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,1], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,2,1], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,4], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,1,2,1,2,3], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 2, 1, 2, 2, 1, 2, 2, 1], k = 2)",
        "longestEqualSubarray(nums=[1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2",
        "longestEqualSubarray(nums=[1,2,1,1,2,3], k=3)"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1,2,3,1,2,1,2,3,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 4, 4, 4, 5, 6], k = 1)",
        "longestEqualSubarray(nums = [1, 3, 2, 3, 1, 3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,1,2,1,2], k = 2)",
        "longestEqualSubarray(nums = [1, 3, 2, 2, 3, 3], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,3,3,3,2,1], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 2, 1, 1, 2, 3, 1], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 2, 1, 2, 2, 2, 1, 1, 2, 1, 2, 2, 2], k = 2)",
        "longestEqualSubarray(nums = [2, 4, 3, 2, 4, 2, 3, 4], k = 3)"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '01')",
        "maximumOddBinaryNumber(s='001')",
        "maximumOddBinaryNumber('000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s='0110')",
        "maximumOddBinaryNumber(s = '011')",
        "maximumOddBinaryNumber('000000010101010101')"
    ],
    "sample_166": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"This\", \"is\", \"an\", \"example\"], s = \"Ti\")",
        "isAcronym(words = [\"binary\", \"search\", \"tree\"], s = \"bst\")",
        "isAcronym(words = [\"banana\", \"is\", \"not\", \"an\", \"acronym\"], s = \"b\")",
        "isAcronym(words = [\"must\", \"be\", \"capitalized\"], s = \"MB\")",
        "isAcronym(words = [\"good\", \"job\", \"!\"], s = \"gj!\")",
        "isAcronym(words = [\"Long\", \"Boring\", \"Word\"], s = \"LBW\")",
        "isAcronym(words = [\"please\", \"make\", \"me\", \"a\", \"sandwich\"], s = \"pmmas\")",
        "isAcronym(words = [\"Everyone\", \"Is\", \"Looking\"], s = \"ELIL\")",
        "isAcronym(words = [\"Banana\", \"Peach\", \"Zytoplasma\"], s = \"BPN\")"
    ],
    "sample_163": [
        "maxSum(nums = [55, 9])",
        "maxSum([55, 33])",
        "maxSum(nums = [54,546,548,60])",
        "maxSum(nums = [50, 12, 5, 7, 45])",
        "maxSum(nums = [10, 11, 22])",
        "maxSum(nums = [12, 56, 78, 45])",
        "maxSum(nums = [25, 50, 100])",
        "maxSum([12, 123, 1234, 1235])",
        "maxSum(nums = [50, 55, 70, 75])",
        "maxSum([55, 34, 9, 12, 45])"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [4,3,2,1])",
        "minimumRightShifts(nums = [2,1,3,4])",
        "minimumRightShifts(nums = [3, 1, 2, 4])",
        "minimumRightShifts(nums = [3,4,5,2,1])"
    ],
    "sample_453": [
        "minChanges(s = \"abb\")",
        "minChanges(s = \"ababab\")",
        "minChanges(s = \"ab\")",
        "minChanges(s = \"abbab\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"azxxzy\")",
        "minChanges(s = \"111000\")",
        "minChanges(s = \"abacad\")",
        "minChanges(s = \"110010\")",
        "minChanges(\"abba\")"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5], target = 8)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5], target = 8)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [2, 3, 7, 8, 10], target = 11)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 1)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [3, 2, 1, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [3, 5, 2], target = 10)",
        "lengthOfLongestSubsequence(nums = [5, 2, 3], target = 8)"
    ],
    "sample_367": [
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(\"Python\")",
        "sortVowels(s = 'lYmpH')",
        "sortVowels(\"MyPhl\")",
        "sortVowels(s = \"MyPh\")",
        "sortVowels(s = 'PhMyL')",
        "sortVowels(s = \"mPhYl\")",
        "sortVowels(s = 'lPhYm')",
        "sortVowels(s=\"HympL\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [2, 3, 5], target = 8)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 7)",
        "lengthOfLongestSubsequence(nums = [2, 3, 7, 8, 10], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 2, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1], target = 2)",
        "lengthOfLongestSubsequence(nums = [1, 2, 4, 7], target = 13)",
        "lengthOfLongestSubsequence(nums=[1,2,5], target=11)",
        "lengthOfLongestSubsequence(nums = [2,3,5,6], target = 7)"
    ],
    "sample_381": [
        "countPairs(nums = [1,2,3,4,5], t = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [1,2,3,4,5,6], t = 8)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], t = 7)",
        "countPairs(nums=[1,2,3,4,5], t=7)",
        "countPairs(nums=[1,2,3,4,5], t=5)",
        "countPairs(nums = [1,2,3,4,5,6,7], t = 10)",
        "countPairs(nums = [1,3,4,2], t = 5)",
        "countPairs(nums = [1,3,5,7,9,11], t = 15)",
        "countPairs(nums = [3, 5, 2, 6], t = 8)"
    ],
    "sample_366": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 0, 2])",
        "isGood(nums = [2, 0, 1])",
        "isGood(nums = [1, 4, 3, 2, 5])",
        "isGood(nums = [1, 4, 3, 2])",
        "isGood(nums = [3, 2, 1, 5, 4])",
        "isGood([2, 3, 4, 1])",
        "isGood([0, 3, 2, 1])",
        "isGood(nums = [1, 2, 0, 5, 4, 3])"
    ],
    "sample_369": [
        "sortVowels(s = \"Python\")",
        "sortVowels(s = \"MyPhl\")",
        "sortVowels('YmplH')",
        "sortVowels('Python')",
        "sortVowels(\"Python\")",
        "sortVowels('lYmpH')",
        "sortVowels(s = \"PhMyl\")",
        "sortVowels('PyMh')",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = 'MpHYl')"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3,4,5,1,2])",
        "minimumRightShifts([3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 2, 1])",
        "minimumRightShifts(nums = [2, 3, 1])",
        "minimumRightShifts(nums = [3, 1, 2])",
        "minimumRightShifts(nums = [3,4,5,2,1])",
        "minimumRightShifts(nums = [4,3,2,1])",
        "minimumRightShifts(nums = [3, 2, 4, 1])"
    ],
    "sample_448": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"banana\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"010101\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"1100\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abbcc\")",
        "minChanges(s = \"AAABBA\")"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abcd\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dbca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"ABCD\", s2 = \"EFGH\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"ABCD\", s2 = \"CBAD\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cbda\")",
        "canBeEqual(s1 = \"bcda\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"1A3D\", s2 = \"1C2A\")"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1,2,3,4,5])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [1,1,1,1])",
        "minLengthAfterRemovals(nums=[3, 3, 3, 2, 2, 2])",
        "minLengthAfterRemovals(nums=[1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8])"
    ],
    "sample_361": [
        "isGood(a = [1, 2, 2, 3])",
        "isGood(a = [1, 2, 3, 4, 2])",
        "isGood(a = [1, 2, 2, 3, 3])",
        "isGood(a = [1, 2, 2, 4])",
        "isGood(a = [1, 2, 3, 4, 4])",
        "isGood(a = [1, 2, 3, 1, 3])",
        "isGood(a = [1,2,2,3,3])",
        "isGood([0, 1, 2, 3, 2])",
        "isGood([2, 1, 1, 2, 3])",
        "isGood(a = [2, 3, 2, 3, 2, 3, 2, 3, 1])"
    ],
    "sample_419": [
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4], k = 2)",
        "minOperations(nums = [1,2,3,4,5], k = 2)",
        "minOperations(nums = [1, 2, 3, 5], k = 4)",
        "minOperations(nums = [1,2,3,4,5,6], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 5)",
        "minOperations(nums = [3, 1, 3, 4, 3], k = 3)",
        "minOperations(nums=[1, 2, 3, 4, 5, 6], k=3)",
        "minOperations(nums=[5,6,4,3,2,1], k=3)",
        "minOperations(nums=[2,2,1,2,2,1,2,3,3,1], k=2)"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1,2,3,4,5])",
        "findMaximumLength(nums = [1,2,3,4,5])",
        "findMaximumLength(nums = [1, 2, 3])",
        "findMaximumLength(nums = [1,1])",
        "findMaximumLength(nums = [1,2,3,2,1])",
        "findMaximumLength(nums = [1,1,1,1,1,1,1,1])",
        "findMaximumLength(nums = [1, 5, 2, 4, 3])",
        "findMaximumLength(nums = [1, 2, 1, 2, 1, 2])",
        "findMaximumLength([1, 5, 7, 8, 5, 3, 4, 2, 1])",
        "findMaximumLength(nums=[1,5,1,1,1,1])"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 2, 1])",
        "maxSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "maxSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "maxSubarrays(nums = [5, 4, 3, 2, 1])",
        "maxSubarrays(nums = [1,2,1,2,1])",
        "maxSubarrays(nums = [1,1,1,2,2,2])",
        "maxSubarrays(nums=[2, 1, 2, 1, 2, 1])",
        "maxSubarrays([4, 2, 1])",
        "maxSubarrays(nums = [2, 1, 1, 4, 2, 2, 3])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ade\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abz\")",
        "canMakeSubsequence(str1 = \"abcdefg\", str2 = \"aceg\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"acf\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"axb\")",
        "canMakeSubsequence(str1 = \"banana\", str2 = \"baz\")",
        "canMakeSubsequence(str1 = \"xyzabcd\", str2 = \"axc\")"
    ],
    "sample_402": [
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 1, 2, 3], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4], m = 1, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8], m = 3, k = 4)",
        "maxSum(nums = [2,2,2,1,2,2,1,2,2,2], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2], m = 2, k = 3)",
        "maxSum(nums = [2, 3, 4, 2, 1, 1, 1, 2, 3, 4], m = 3, k = 5)",
        "maxSum(nums=[1,2,3,2,1,2,3,4,5,6,7], m=2, k=2)",
        "maxSum(nums = [4,1,4,1,4,1,4,2,1,4], m = 2, k = 3)"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"ana\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"py\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cat\"], x = \"b\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"p\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"b\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"o\")",
        "findWordsContaining(words = [\"test\", \"t\"], x = \"t\")",
        "findWordsContaining(words=[\"apple\", \"orange\", \"banana\", \"grapes\", \"pineapple\"], x=\"apple\")"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = ['prev', '2', 'prev', '1', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['prev', '1', '2', 'prev', 'prev', 'prev'])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = ['prev', '3', 'prev', '2', 'prev', '1'])",
        "lastVisitedIntegers(words = ['prev', 'prev', '2', 'prev', '1', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['prev', 'prev', '1', 'prev', '2', '3', 'prev'])",
        "lastVisitedIntegers(words = ['prev', 'prev', '1', 'prev', 'prev', '2', 'prev', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['prev', '5', 'prev', 'prev', '2', 'prev', '1'])",
        "lastVisitedIntegers([\"3\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"1\", \"prev\", \"prev\", \"2\"])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1,2,3,4,5,6], k = 3)",
        "minOperations(nums = [1, 1, 1, 1, 2, 2, 2, 2], k = 2)",
        "minOperations(nums = [1, 3, 5, 7, 9], k = 5)",
        "minOperations(nums = [3,2,201,4,5], k = 5)",
        "minOperations(nums = [3,2,4,1], k = 3)",
        "minOperations(nums = [4, 2, 3, 1, 5, 6, 7], k = 3)",
        "minOperations(nums = [4, 3, 2, 1, 1, 1, 1, 1, 1, 1], k = 3)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "minOperations(nums = [1, 2, 3, 4], k = 2)",
        "minOperations(nums = [1, 2, 3, 4], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "minOperations(nums = [1,2,3,4,5,6], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums=[1,2,3,4,5,6,7,8,9,10], k = 3)",
        "minOperations(nums = [2, 3, 5, 1, 6], k = 4)",
        "minOperations(nums = [2, 4, 1, 2, 3, 5], k = 3)"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [3, 2, 1, 2, 1, 7])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumSeconds(nums = [2, 1, 3, 5, 4])",
        "minimumSeconds([1, 2, 3, 2, 1])",
        "minimumSeconds(nums = [2,2,2,2])",
        "minimumSeconds(nums = [1,2,3,4,1,2,3,4])",
        "minimumSeconds(nums = [1,3,2,5,4,6])",
        "minimumSeconds(nums = [1, 2, 1, 1, 2])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 10)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 8)",
        "countPairs(nums=[1, 2, 3, 4, 5, 6], target=10)",
        "countPairs(nums=[1, 2, 3, 4, 5, 6], target=10)",
        "countPairs(nums=[1, 2, 3, 4], target=7)",
        "countPairs(nums = [2, 2, 2, 3, 3], target = 8)"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cat\"], x = \"an\")",
        "findWordsContaining(words=[\"apple\", \"banana\", \"cherry\", \"date\"], x=\"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"ananas\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"apple\"], x = \"a\")",
        "findWordsContaining(words=[\"apple\", \"banana\", \"cherry\", \"banana\"], x=\"ban\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"goodbye\"], x = \"o\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"pineapple\", \"grape\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"hi\", \"my\", \"name\", \"is\", \"Banana\"], x = \"an\")"
    ],
    "sample_372": [
        "sortVowels(s = 'Letced')",
        "sortVowels(s = 'Letced')",
        "sortVowels('HelloWorld')",
        "sortVowels(s = 'LetCoded')",
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = 'LetCode')",
        "sortVowels('Letcede')",
        "sortVowels(\"Let's Code\")",
        "sortVowels(s = 'Letecode')",
        "sortVowels('Example')"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 3, 1])",
        "minLengthAfterRemovals(nums = [1,2,3,2,1,3,4])"
    ],
    "sample_452": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"aabbcc\")",
        "minChanges(s = \"banana\")",
        "minChanges(s = \"0101\")",
        "minChanges(s = \"abccba\")",
        "minChanges(s = \"abcdef\")",
        "minChanges(s = \"abbcc\")",
        "minChanges(s = \"1010101010\")",
        "minChanges(s = \"bcb\")"
    ],
    "sample_385": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 7)",
        "countPairs(nums = [1, 1, 2, 2, 3, 3], target = 4)",
        "countPairs(nums = [1,2,3,4,5,6,7,8,9,10], target = 15)",
        "countPairs(nums = [1, 3, 4, 5], target = 6)"
    ],
    "sample_427": [
        "minOperations([1,2,2,3,3,3])",
        "minOperations(nums = [1, 2, 2, 2, 3, 3])",
        "minOperations([1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 2, 3, 4, 5])",
        "minOperations(nums = [1,1,1,2,2,2])",
        "minOperations([2,2,3,3,2,4,4,4,4,4])",
        "minOperations(nums = [1,2,2,2,2,2])",
        "minOperations(nums = [1, 1, 2, 2, 2])",
        "minOperations(nums = [1,2,2,2,3,4])",
        "minOperations(nums = [1,2,2,2,2,2,2,1])"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4])",
        "minLengthAfterRemovals(nums = [3,2,3,2,2])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3,4])",
        "minLengthAfterRemovals(nums = [1,2,2,2,2,2,3,3,3,3,3,3])"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 1])",
        "minimumCoins(prices = [1, 1])",
        "minimumCoins(prices = [1, 1])",
        "minimumCoins(prices = [1, 1, 1])",
        "minimumCoins(prices = [1,1])",
        "minimumCoins([1, 1, 1])",
        "minimumCoins([1, 2])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"mango\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"mango\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"mango\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words=[\"apple\", \"banana\", \"cherry\"], x=\"an\")",
        "findWordsContaining(words = [\"abc\", \"def\", \"ghi\"], x = \"e\")",
        "findWordsContaining(words = [\"cat\", \"hat\", \"rat\"], x = \"at\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cat\", \"dog\", \"egg\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"basket\", \"ball\"], x = \"b\")"
    ],
    "sample_420": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 5)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9], k = 5)",
        "minOperations(nums = [5, 10, 15, 20], k = 15)",
        "minOperations(nums = [3, 2, 4, 1], k = 5)",
        "minOperations(nums = [2, 1, 3, 1, 2], k = 3)",
        "minOperations(nums = [2, 3, 5, 7, 11, 13], k = 2)",
        "minOperations(nums = [2,4,5,6], k = 2)",
        "minOperations(nums = [2, 5, 1, 2, 5, 2, 5], k = 3)",
        "minOperations(nums = [3, 1, 3, 2, 1, 3, 3, 1, 1, 2], k = 3)"
    ],
    "sample_362": [
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [4, 1, 3, 2])",
        "isGood(nums = [2, 1, 3, 4, 5])",
        "isGood(nums = [4,2,3,1,5])",
        "isGood(nums = [2, 3, 1, 5, 4])",
        "isGood(nums = [2, 3, 1, 5, 4])",
        "isGood(nums=[1,2,0])",
        "isGood([2,3,4,1,5])",
        "isGood(nums = [3, 2, 1, 4, 5, 6])",
        "isGood([3, 1, 5, 2, 4])"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 15)",
        "lengthOfLongestSubsequence(nums = [2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [2, 3, 4, 5], target = 8)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7], target = 8)",
        "lengthOfLongestSubsequence(nums=[2, 3, 5, 7], target=12)"
    ],
    "sample_365": [
        "isGood(nums = [1,2,2,3])",
        "isGood(nums = [1,2,2])",
        "isGood(nums = [1,2,3,4,5,6])",
        "isGood([1, 2, 3, 4, 5, 6])",
        "isGood(nums = [1, 1, 2, 3])",
        "isGood(nums = [2, 1, 3, 4])",
        "isGood(nums = [2, 1, 1, 2])",
        "isGood(nums = [3, 1, 2, 2])",
        "isGood(nums = [2,3,4,1,5])",
        "isGood(nums = [1, 2, 3, 3, 5, 6])"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1,2,3,4,5])",
        "maxSubarrays(nums = [1,2,3,4,5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [0, 1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [3, 2, 1, 4, 5])",
        "maxSubarrays([2, 3, 5, 7, 11])",
        "maxSubarrays(nums = [3, 3, 3, 2, 2])"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [2,3,5], target = 8)",
        "lengthOfLongestSubsequence(nums = [2,3,5], target = 8)",
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 7)",
        "lengthOfLongestSubsequence(nums = [1,2,3,5], target = 8)",
        "lengthOfLongestSubsequence(nums = [1, 2, 4], target = 5)",
        "lengthOfLongestSubsequence(nums=[1,2,3], target=1)",
        "lengthOfLongestSubsequence(nums = [1,1,1,1,1], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 10], target = 12)"
    ],
    "sample_450": [
        "minChanges(s = \"aabbcc\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"aabbb\")",
        "minChanges(s = \"abcba\")",
        "minChanges(s = \"abcda\")",
        "minChanges(\"abab\")",
        "minChanges(s = \"ab\")",
        "minChanges(\"abccba\")",
        "minChanges(s = \"11111\")",
        "minChanges(s = \"bbaaaab\")"
    ],
    "sample_463": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n=10, limit=3)",
        "distributeCandies(n=6, limit=3)",
        "distributeCandies(n = 7, limit = 4)"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1, 2, 1])",
        "sumCounts([1, 2, 1, 3, 2])",
        "sumCounts([1, 2, 2, 1])",
        "sumCounts(nums = [1, 1, 2, 2, 1])",
        "sumCounts([1,2,2,3,3,3])"
    ],
    "sample_449": [
        "minChanges(s = \"banana\")",
        "minChanges(s=\"abab\")",
        "minChanges(\"aabb\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s=\"aabb\")",
        "minChanges(\"abababab\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"ab\")",
        "minChanges(s = \"zzzzzz\")",
        "minChanges(s = \"azby\")"
    ],
    "sample_425": [
        "minOperations(nums = [1, 2, 2, 3, 3, 3])",
        "minOperations([1, 2, 3, 4, 5, 6])",
        "minOperations([1, 2, 3, 4, 5])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1, 1])",
        "minOperations([1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 2, 3, 4])",
        "minOperations([1, 1, 1, 1])",
        "minOperations([1, 1, 1, 2, 2])",
        "minOperations([1, 2, 2, 3, 1, 1])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"baz\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abcdef\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"aaz\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"aaz\", str2 = \"b\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahd\")",
        "canMakeSubsequence(str1 = \"azb\", str2 = \"azz\")",
        "canMakeSubsequence(str1 = \"azertyuiop\", str2 = \"aeqrz\")"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,2,3,4])",
        "minimumSeconds([1,2,3,4,5])",
        "minimumSeconds(nums = [2,2,2])",
        "minimumSeconds(nums = [1,3,5])",
        "minimumSeconds(nums = [2, 1, 3, 1, 2, 1])",
        "minimumSeconds(nums = [1,2,2,2,3,3,3])",
        "minimumSeconds(nums = [3, 4, 2, 3, 2, 1, 2])",
        "minimumSeconds(nums = [1,3,4,7,9,10])",
        "minimumSeconds([0, 2, 4])"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [3, 34, 4, 12, 5, 2], target = 9)",
        "lengthOfLongestSubsequence(nums = [3, 34, 4, 12, 5, 2], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 7)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5], target = 7)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 7)",
        "lengthOfLongestSubsequence(nums=[1,2,3], target=6)",
        "lengthOfLongestSubsequence(nums = [2, 3, 4, 5], target = 10)"
    ],
    "sample_370": [
        "sortVowels('HelloWorld')",
        "sortVowels('HelloWorld')",
        "sortVowels(s = 'Letcede')",
        "sortVowels(s = 'Letcede')",
        "sortVowels(s = 'Letcede')",
        "sortVowels(s = \"HelloWorld\")",
        "sortVowels(s = 'HelloWorld')",
        "sortVowels('HelloThere')",
        "sortVowels(\"Let's Codeede\")",
        "sortVowels(\"helloThere\")"
    ],
    "sample_421": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 4)",
        "minOperations(nums = [2,4,8,16,32], k = 5)",
        "minOperations(nums = [5, 2, 1, 3, 4], k = 4)",
        "minOperations(nums = [5,6,4,3,2,8,7,1], k = 5)",
        "minOperations(nums = [4,2,5,3,1,2], k = 5)",
        "minOperations(nums = [2,4,5,1,6], k = 5)"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "maxSubarrays(nums = [0, 0, 0, 0])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 0])",
        "maxSubarrays([3,2,1,5,6])",
        "maxSubarrays(nums = [1,2,3,0,4,5,0])",
        "maxSubarrays(nums = [4, 1, 4, 1, 4])",
        "maxSubarrays([3, 1, 6, 4, 1, 2])",
        "maxSubarrays([1, 0, 0, 1, 0, 1, 0, 1, 0])",
        "maxSubarrays([2, 4, 16, 8, 32, 16, 4])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[0,0],[0,1],[1,0],[1,1]], k = 1)",
        "countPairs(coordinates = [(1, 2), (3, 4), (5, 6)], k = 2)",
        "countPairs(coordinates = [[0,0],[0,1],[0,2],[1,0],[1,1],[1,2],[2,0],[2,1],[2,2]], k = 1)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0]], k = 1)",
        "countPairs(coordinates = [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]], k = 1)",
        "countPairs(coordinates=[[1,1],[2,2],[3,3],[4,4],[5,5]], k=2)",
        "countPairs(coordinates=[[1,1],[2,2],[3,3],[4,4],[5,5]], k=1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [0, 1]], k = 1)",
        "countPairs(coordinates = [[0,1],[0,1],[0,1]], k = 1)"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [3, 34, 4, 12, 5, 2], target = 9)",
        "lengthOfLongestSubsequence(nums = [3, 34, 4, 12, 5, 2], target = 9)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3], target=4)",
        "lengthOfLongestSubsequence(nums=[2, 3, 5], target=8)",
        "lengthOfLongestSubsequence(nums = [3, 5, 10], target = 9)",
        "lengthOfLongestSubsequence(nums = [2, 3, 7, 8], target = 12)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 5, 6], target = 11)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 15)",
        "lengthOfLongestSubsequence(nums = [2, 1, 5], target = 7)"
    ],
    "sample_445": [
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums=[1,2,3])",
        "sumCounts(nums = [1,2,3,4])",
        "sumCounts(nums = [1,2,2,1,3])",
        "sumCounts(nums = [1,2,2,3,3,3])",
        "sumCounts(nums=[1,2,3,4])",
        "sumCounts([1,2,1,3,1])",
        "sumCounts([1,2,1,2,1,2])",
        "sumCounts(nums=[1,2,2,3,3,3])"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"101101101\")",
        "minimumBeautifulSubstrings(s = \"1011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011011",
        "minimumBeautifulSubstrings(s = \"01011\")",
        "minimumBeautifulSubstrings(s = \"100110011001\")",
        "minimumBeautifulSubstrings(\"0111011110\")",
        "minimumBeautifulSubstrings(s = \"1011100111001\")",
        "minimumBeautifulSubstrings(s = \"010011010101111111000\")",
        "minimumBeautifulSubstrings(s = \"011011111111111111100110010101\")",
        "minimumBeautifulSubstrings(s = \"0110110001100110011101011010100110001000101001011011001011010110100110101010110110100100011000110101000100010101010111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s = \"1011010111111010111011101101011010110011101010010101110111011101011110110101111110101111101001001110101111110111110110010110101011111101101110011011010111011101111101100111011101100101011010111111011110101110111101110101101010110101011011101011001110101111011101110101101110111011101110110101011011101011110111011010111111011110111011110101011110111010110101110101101011010111111011111011110101111110101101011111011011011101101101111101111110111110111111011110111111011011010110110110111011101111110110101"
    ],
    "sample_432": [
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [5, 10, 20, 6, 3, 8])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays([1,2,3,4,5])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [2, 1, 4, 3])",
        "maxSubarrays(nums = [2,3,4,5,6])",
        "maxSubarrays(nums=[1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [2,3,4,5,6,7])",
        "maxSubarrays(nums = [1, 2, 4, 8, 6])"
    ],
    "sample_401": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(nums = [1,2,3], m = 2, k = 3)",
        "maxSum(nums=[1, 2, 3, 4, 5, 6, 7], m=3, k=3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 4)",
        "maxSum(nums = [1, 2, 3, 4], m = 1, k = 4)",
        "maxSum(nums=[1, 2, 3, 4, 5, 6, 7], m=2, k=3)",
        "maxSum(nums = [3, 2, 1, 3, 2, 1], m = 2, k = 3)",
        "maxSum(nums = [3, 4, 2, 1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [3,-1,4,2,5,0,1,6], m = 2, k = 3)",
        "maxSum(nums = [3,1,2,4,2,5,2,6,1,2,3,1,2,4,1,2,3,1,2,4,5,6,7], m = 3, k = 5)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(A = [2, 1, 5, 1, 3, 2], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 5, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 1, k = 2)",
        "maxSum(A=[1, 2, 3], m=2, k=2)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 5, k = 5)",
        "maxSum(A = [0, 1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(A = [2,1,3,2,1,3], m = 3, k = 2)",
        "maxSum(A = [1,2,3,1,4,5,2,3,6], m = 3, k = 3)",
        "maxSum(A = [0, 2, 2, 0, 0, 0], m = 2, k = 3)"
    ],
    "sample_363": [
        "isGood(nums = [1, 2, 2, 3])",
        "isGood(nums = [1, 2, 2, 3, 4, 4])",
        "isGood([1, 2, 3, 3, 2, 1])",
        "isGood([2,1,3,1,2])",
        "isGood([4, 1, 3, 2, 2])",
        "isGood([4, 1, 3, 3, 1, 4])",
        "isGood(nums = [2, 1, 3, 4, 5, 2])",
        "isGood(nums = [2, 1, 3, 5, 4, 2, 1])",
        "isGood(nums = [3,1,2,3,2,1])",
        "isGood(nums=[1,2,3,4,2,3,4])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1, 2, 3])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [0, 3, 7, 2, 5, 8, 4, 6, 0, 1])",
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds([0, 1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [0,1,2,3,4])",
        "minimumSeconds([0, 2, 4, 6])",
        "minimumSeconds(nums = [3, 4, 5, 1, 2])",
        "minimumSeconds(nums=[0, 2, 3])",
        "minimumSeconds(nums = [0, 2, 3, 1, 5])"
    ],
    "sample_376": [
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4])",
        "minimumSeconds(nums = [1, 2, 3])",
        "minimumSeconds(nums = [1,2,3,4,5,6])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumSeconds(nums = [2,4,1,3])",
        "minimumSeconds(nums = [1, 0, 0, 1])",
        "minimumSeconds(nums = [3,3,3])"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1,1,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,3,4])",
        "minLengthAfterRemovals(nums = [1,1,1,2,2,2])",
        "minLengthAfterRemovals(nums = [1,1,1,2,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1,1,2,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 2, 3, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1,1,1,2,2,3,3,3,4,4,4,4])",
        "minLengthAfterRemovals(nums = [2,2,2,3,3,4])",
        "minLengthAfterRemovals(nums=[1, 1, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums=[1,2,2,2,2,2])"
    ],
    "sample_399": [
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 3)",
        "maxSum(nums = [1,1,1,7,8,9], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 5, k = 2)",
        "maxSum(nums=[1,2,1,4,5], m=2, k=3)",
        "maxSum(nums = [0,0,0,0,0,0], m = 2, k = 1)",
        "maxSum(nums = [0,1,0,1], m = 2, k = 2)",
        "maxSum(nums = [0, 0, 0, 0], m = 1, k = 4)",
        "maxSum(nums = [2,3,3,2,3,3], m = 2, k = 3)"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 2)",
        "maxSum(nums = [5, 2, 3, 1, 4], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 4, k = 3)",
        "maxSum(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], m = 3, k = 3)",
        "maxSum(nums = [2, 3, 4, 5], m = 3, k = 2)"
    ],
    "sample_364": [
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1,3,2])",
        "isGood(nums = [1, 3, 2])",
        "isGood(nums = [2,3,1])",
        "isGood(nums = [2, 3, 1, 4])",
        "isGood(nums = [1, 3, 4, 2])",
        "isGood([1,2,3,4,5,6])",
        "isGood([1, 2, 3, 4])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1,2,3,3,2,1])",
        "minLengthAfterRemovals(nums = [2, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9])",
        "minLengthAfterRemovals(nums = [5, 5])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "minLengthAfterRemovals(nums=[2,2,3,3,3])"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"bat\"], x = \"at\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"grape\"], x = \"or\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"pineapple\"], x = \"ap\")",
        "findWordsContaining(words=[\"banana\", \"apple\", \"mango\", \"orange\"], x=\"a\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 3, 1])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 2, 1])",
        "minimumCoins(prices = [2, 3, 2])",
        "minimumCoins(prices = [1,2,3,1])",
        "minimumCoins(prices = [2, 3, 1, 1, 2])",
        "minimumCoins(prices = [1,2,3])",
        "minimumCoins(prices = [1,2,5,10])",
        "minimumCoins(prices = [2, 2, 3, 1])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"101\")",
        "minimumBeautifulSubstrings(s = \"101101101\")",
        "minimumBeautifulSubstrings(\"101\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(\"1010\")",
        "minimumBeautifulSubstrings(s = \"001011\")",
        "minimumBeautifulSubstrings(s = \"101111\")",
        "minimumBeautifulSubstrings(s = \"011010110\")",
        "minimumBeautifulSubstrings(s = \"1011011111\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"xyz\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abc\", s2 = \"dfe\")",
        "canBeEqual(s1 = \"aabb\", s2 = \"bbcc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dbca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"abc\")",
        "canBeEqual(s1 = \"badc\", s2 = \"badd\")"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"adc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"axb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"azb\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"b\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"ace\", str2 = \"abcdefg\")",
        "canMakeSubsequence(str1 = \"apple\", str2 = \"appzle\")"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1,2,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,2,2,2,3,4,5])",
        "minLengthAfterRemovals(nums=[1,1,1,1,2,2,2,2])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6])",
        "minLengthAfterRemovals(nums = [1,1,2,2,2,3,3,4,4,4,5,5,5,6,6,6,7,7,8])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abcd\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"eat\", s2 = \"tea\")",
        "canBeEqual(s1 = \"aba\", s2 = \"bab\")",
        "canBeEqual(s1 = \"abcx\", s2 = \"abcy\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcda\")",
        "canBeEqual(s1 = \"badc\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"bacd\", s2 = \"adcb\")",
        "canBeEqual(s1 = \"bab\", s2 = \"abc\")"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 10)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 8)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 6)",
        "countPairs(nums = [1,2,3,4,5,6], target = 10)",
        "countPairs(nums = [1, 5, 3, 2], target = 6)",
        "countPairs(nums = [2, 5, 6, 1], target = 7)",
        "countPairs(nums = [2, 3, 5, 6, 7, 8], target = 11)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"abc\", s2 = \"ahbgdc\")",
        "canMakeSubsequence(s1 = \"azb\", s2 = \"abc\")",
        "canMakeSubsequence(s1 = \"az\", s2 = \"az\")",
        "canMakeSubsequence(s1 = \"azbc\", s2 = \"abcd\")",
        "canMakeSubsequence(s1 = \"ba\", s2 = \"nana\")",
        "canMakeSubsequence(s1 = \"azc\", s2 = \"bza\")",
        "canMakeSubsequence(s1 = \"aaz\", s2 = \"zaa\")",
        "canMakeSubsequence(s1 = \"azz\", s2 = \"azzz\")",
        "canMakeSubsequence(s1 = \"azcbobobza\", s2 = \"azob\")",
        "canMakeSubsequence(s1 = \"abcd\", s2 = \"az\")"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = ['prev', '2', 'prev', 'prev', '1'])",
        "lastVisitedIntegers(words = ['1', 'prev', '2', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['prev', '2', 'prev', '1', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['prev', '1', 'prev', 'prev', '2', 'prev'])",
        "lastVisitedIntegers(words = ['prev', '1', 'prev', 'prev', '2'])",
        "lastVisitedIntegers(words = ['prev', '1', '2', 'prev', 'prev', '1'])",
        "lastVisitedIntegers([\"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = ['prev', 'next', '1', 'prev', 'prev'])",
        "lastVisitedIntegers([\"push\", \"1\", \"push\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers([\"prev\",\"prev\",\"1\",\"prev\",\"prev\",\"2\",\"prev\",\"3\"])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]], k = 1)",
        "countPairs(coordinates = [[1,2],[2,1],[3,4],[4,3]], k = 2)",
        "countPairs(coordinates = [(1, 2), (2, 3), (3, 4)], k = 2)",
        "countPairs(coordinates = [[1,2],[3,4],[1,2],[3,4],[1,2],[3,4],[1,2],[3,4],[1,2],[3,4]], k = 2)",
        "countPairs(coordinates = [[1,2],[3,4],[5,6]], k = 3)",
        "countPairs(coordinates = [[1, 1], [1, 2], [2, 1], [2, 2]], k = 1)",
        "countPairs(coordinates = [(1, 2), (3, 4), (1, 3)], k = 2)",
        "countPairs(coordinates=[[0, 0], [0, 1], [1, 0], [1, 1], [2, 0], [2, 1]], k = 2)"
    ],
    "sample_451": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"0110\")",
        "minChanges(s = \"baaab\")",
        "minChanges(s = \"abccba\")",
        "minChanges(\"ababab\")",
        "minChanges(s = \"121212\")",
        "minChanges(s = \"12121\")",
        "minChanges(s = \"abbcaa\")",
        "minChanges(s = \"abaabbb\")"
    ],
    "sample_461": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 4, limit = 1)",
        "distributeCandies(n=10, limit=1)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acbd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cab\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcad\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"deabc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dabc\")",
        "canBeEqual(s1 = \"abc\", s2 = \"abc\")"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 6, limit = 3)"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 90)",
        "accountBalanceAfterPurchase(p = 90)",
        "accountBalanceAfterPurchase(p = 90)",
        "accountBalanceAfterPurchase(p = 90)",
        "accountBalanceAfterPurchase(p = 90)",
        "accountBalanceAfterPurchase(p = 90)",
        "accountBalanceAfterPurchase(p = 90)",
        "accountBalanceAfterPurchase(p = 95)",
        "accountBalanceAfterPurchase(90)",
        "accountBalanceAfterPurchase(p = 105)"
    ],
    "sample_444": [
        "sumCounts([1, 2, 3])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts([1,2,3])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts([1,1,2,2,3])",
        "sumCounts([1, 1, 1, 1])",
        "sumCounts([1,2,2,3,4,4,4])",
        "sumCounts(nums=[1,2,1,3,2,2])",
        "sumCounts(nums = [1, 1, 1, 1, 2])"
    ],
    "sample_378": [
        "minimumSeconds(A = [0, 1, 2, 3, 4])",
        "minimumSeconds(A = [1, 3, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(A=[1,2,3,4,5])",
        "minimumSeconds([0,1,2,3,4,5])",
        "minimumSeconds(A = [0, 2, 6])",
        "minimumSeconds(A = [3, 2, 1, 1, 2, 3, 1])",
        "minimumSeconds(A=[0,1,2,3,4,5,6,7])",
        "minimumSeconds(A = [4,2,5,3,1,6])",
        "minimumSeconds(A = [2,1,2,2,1])"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ade\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"ba\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"adc\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"b\")",
        "canMakeSubsequence(str1 = \"bz\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"axcy\")",
        "canMakeSubsequence(str1 = \"abcdefghijklmnopqrstuvwxyz\", str2 = \"amz\")",
        "canMakeSubsequence(str1 = \"zaz\", str2 = \"bba\")"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts([1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 3, 2])",
        "minimumRightShifts(nums = [1,2,3,4])",
        "minimumRightShifts(nums = [5,4,3,2,1])"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1,2,3,4,5], l = 1, r = 10)",
        "countSubMultisets(nums = [1,2,3], l = 1, r = 4)",
        "countSubMultisets(nums = [1, 2, 3], l = 1, r = 10)",
        "countSubMultisets(nums = [2,3,4,6], l = 2, r = 8)",
        "countSubMultisets(nums = [1, 2, 3], l = 1, r = 4)",
        "countSubMultisets(nums = [1,2,3,4], l = 4, r = 10)",
        "countSubMultisets(nums=[1,2,3,4], l=1, r=10)",
        "countSubMultisets(nums = [2,3,5], l = 1, r = 5)",
        "countSubMultisets(nums = [0,1,2,3,4,5], l = 1, r = 2)",
        "countSubMultisets(nums = [3,3,3,3], l = 1, r = 10)"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1,2,3,4])",
        "minimumCoins(prices=[1, 2, 3, 4])",
        "minimumCoins([1, 1, 1, 1])",
        "minimumCoins(prices = [2, 5, 1, 3, 4])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 1, 1, 1])",
        "minimumCoins(prices = [1, 2, 4])",
        "minimumCoins(prices = [2, 3, 4, 1])",
        "minimumCoins(prices = [2, 3, 1, 1, 2])",
        "minimumCoins(prices=[1, 2, 3, 2])",
        "minimumCoins(prices = [2, 5, 1, 1, 2, 2])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers([\"1\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"1\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"3\", \"prev\", \"2\", \"prev\", \"1\", \"4\"])"
    ],
    "sample_428": [
        "minOperations([1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1,2,2,2,2])",
        "minOperations(nums = [1, 2, 2, 2, 3, 3])",
        "minOperations(nums = [1, 2, 2, 2, 2, 2])",
        "minOperations(nums = [1,2,3,4,5,6])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations([1, 2, 2, 2, 2, 2])",
        "minOperations([1, 2, 2, 2, 2, 3, 3, 3, 3])",
        "minOperations(nums = [3, 2, 3, 2, 4, 2, 3, 4])"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"push\", \"push\", \"pop\", \"push\", \"push\"])",
        "lastVisitedIntegers(words = ['push', '1', 'push', '2', 'pop', 'push', '3', 'pop'])",
        "lastVisitedIntegers(words = [\"push\", \"push\", \"pop\", \"push\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"push\", \"pop\", \"push\", \"pop\"])",
        "lastVisitedIntegers(words = ['push', 'push', 'pop', 'push', 'pop'])",
        "lastVisitedIntegers(words = [\"push\", \"push\", \"pop\", \"push\", \"1\"])",
        "lastVisitedIntegers(words = [\"pop\", \"push 1\", \"push 2\", \"pop\", \"push 3\", \"pop\"])",
        "lastVisitedIntegers(words = ['push', '1', 'push', '2', 'pop', 'pop', 'push', '3', 'push', '4'])",
        "lastVisitedIntegers(words = [\"push\",\"3\",\"push\",\"2\",\"push\",\"1\",\"pop\",\"pop\"])",
        "lastVisitedIntegers(words = ['push', 'pop', 'push', '3', 'push', 'pop', 'push', 'push', '2', 'push', 'pop', 'pop'])"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1, 2, 3, 2, 1])",
        "minimumSeconds(nums = [2, 3, 1])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9])",
        "minimumSeconds(nums = [2,1,3,5,1])",
        "minimumSeconds(nums = [2, 1, 5, 3, 4])",
        "minimumSeconds(nums = [1,5,4,3,2,6])",
        "minimumSeconds([1, 3, 5, 2, 4, 6])",
        "minimumSeconds(nums = [3,1,3,2,2,1,3])",
        "minimumSeconds(nums = [1,2,3,3,3,1,2,3,3,3])"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"bat\"], x = \"at\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cat\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cat\", \"dog\", \"elephant\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\", \"programming\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"worldy\"], x = \"world\")",
        "findWordsContaining(words = [\"mango\", \"apple\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"deed\"], x = \"d\")"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 2, 3, 0, 4, 5])",
        "maxSubarrays(nums = [1,2,3,4,5,6])",
        "maxSubarrays(nums = [1,2,3,4,5,6])",
        "maxSubarrays(nums = [5, 10, 20, 6, 3])",
        "maxSubarrays(nums = [0, 1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [2, 1, 3, 2])"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers([\"prev\", \"next\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\", \"1\", \"2\", \"prev\", \"next\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"next\", \"prev\", \"next\", \"1\", \"next\", \"2\"])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 7)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [2, 4, 1, 6], target = 5)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"aa\", s2 = \"bb\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"cbaed\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"cbaed\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bdca\")",
        "canBeEqual(s1 = \"abab\", s2 = \"baba\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"deabc\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"3\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers([\"push\", \"1\", \"push\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"2\", \"prev\", \"prev\"])"
    ],
    "sample_464": [
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n=10, limit=5)",
        "distributeCandies(n=10, limit=5)",
        "distributeCandies(n=10, limit=2)",
        "distributeCandies(n = 20, limit = 5)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [4, 5, 6, 1, 2, 3])",
        "minimumRightShifts(nums = [1, 3, 4, 2, 1])",
        "minimumRightShifts(nums = [2, 2, 2, 1, 2, 2, 2])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"mango\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"apple\"], x = \"app\")",
        "findWordsContaining(words=[\"banana\", \"apple\", \"pear\"], x=\"an\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"banana\", \"car\"], x = \"a\")"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 4, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 2, k = 4)",
        "maxSum(nums = [1, 1, 1, 7, 7, 7, 2, 2, 2, 10, 10, 10], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 1, 2, 3, 4, 1, 2, 3], m = 2, k = 3)",
        "maxSum(nums = [2,3,4,1,3], m = 2, k = 3)",
        "maxSum(nums = [2, 1, 3, 2, 1, 4, 3], m = 4, k = 2)",
        "maxSum(nums = [1, 4, 2, 6, 3, 4, 7, 2, 1, 5], m = 4, k = 3)"
    ],
    "sample_424": [
        "minOperations(nums = [1,2,3,4,5,6,7,8,9])",
        "minOperations(nums = [1,2,3,4,5,6,7,8])",
        "minOperations(nums = [1,2,2,2,3,3,4])",
        "minOperations([1,2,3,4,5])",
        "minOperations(nums = [1, 2, 3, 4, 5])",
        "minOperations([1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1,2,2,1,1])",
        "minOperations(nums=[1,2,3,4,5,6,7,8])",
        "minOperations(nums = [2,2,2,2])",
        "minOperations(nums = [1,1,1,2,2,2,3,3,3,4,4])"
    ],
    "sample_417": [
        "minOperations(nums = [1,2,3,4,5,6,7,8,9], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 5)",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "minOperations(nums = [5,6,4,3,2,1], k = 3)",
        "minOperations(nums = [5, 10, 15, 20, 25], k = 2)",
        "minOperations(nums = [1, 2, 3, 5, 6, 7, 9, 10], k = 4)",
        "minOperations(nums = [5, 2, 1, 6, 4, 7, 3, 6, 4, 3], k = 3)",
        "minOperations(nums=[10,15,20,25,30,35,40], k=3)",
        "minOperations(nums = [6,4,3,2,1,2,7], k = 11)",
        "minOperations(nums = [6,4,2,8,4,9,7,6,4,1,5], k = 5)"
    ],
    "sample_371": [
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"Python\")",
        "sortVowels(s = \"MyPhl\")",
        "sortVowels(s = \"Ymphl\")",
        "sortVowels(s = \"HymPl\")",
        "sortVowels(s = \"mPhY\")",
        "sortVowels(s = \"PhYlm\")",
        "sortVowels(s = 'PhymL')",
        "sortVowels('PhMyl')"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n=3, limit=2)",
        "distributeCandies(n=3, limit=2)",
        "distributeCandies(n = 4, limit = 2)"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts([1, 2, 3])",
        "sumCounts(nums = [1, 2, 1, 3])",
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [1, 2, 1, 2])",
        "sumCounts([1, 2, 3, 2, 1])",
        "sumCounts(nums = [1,2,2,3,4,4,4])"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1,2,3,4,5])",
        "maxSubarrays(nums = [1,2,3,4,5,6])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 0, 5])",
        "maxSubarrays(nums = [2, 2, 2, 2, 2])",
        "maxSubarrays(nums = [2,4,8,6])",
        "maxSubarrays(nums = [1, 0, 2, 4])",
        "maxSubarrays([2, 4, 8, 16, 32])",
        "maxSubarrays(nums = [1, 0, 2, 1, 0, 2, 1, 0])",
        "maxSubarrays(nums = [2,1,3,4])"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 1, 2, 2])",
        "sumCounts([1, 1, 2, 2])",
        "sumCounts(nums = [1,2,1,3])",
        "sumCounts([1,2,1,3])",
        "sumCounts(nums = [1, 2, 1, 2, 3])"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"aa\", s2 = \"bb\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cab\")",
        "canBeEqual(s1 = \"ab\", s2 = \"cd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"acb\")",
        "canBeEqual(s1 = \"abc\", s2 = \"xyz\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cbd\")"
    ],
    "sample_380": [
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1,2,3,4,5,6], target = 10)",
        "countPairs(nums = [1,2,3,4,5], target = 5)",
        "countPairs(nums = [1,2,3,4,5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 10)",
        "countPairs(nums=[1,2,3,4,5,6], target=7)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 8)",
        "countPairs(nums=[1, 2, 3, 4, 5], target=7)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1, 3])",
        "sumCounts(nums = [1, 2, 1, 3])",
        "sumCounts(nums = [1, 1, 2, 2])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums=[1, 2, 3])",
        "sumCounts(nums = [1, 2, 1, 2, 1])"
    ],
    "sample_368": [
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = 'YmplH')",
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = \"Python\")",
        "sortVowels(s = 'mPhY')",
        "sortVowels(s = 'YmlpH')",
        "sortVowels(s = 'mYPhl')",
        "sortVowels(s = \"mYphl\")",
        "sortVowels(s = \"pLymH\")"
    ],
    "sample_462": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 5, limit = 2)"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3, 2])",
        "minimumCoins([1, 2, 3])",
        "minimumCoins(prices = [2, 2, 2, 2])",
        "minimumCoins([1, 2, 3, 1])",
        "minimumCoins(prices = [2, 2, 1, 2])",
        "minimumCoins(prices = [2,1,2,1])"
    ],
    "sample_426": [
        "minOperations(nums = [1,2,3,4,5])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 2, 2, 2, 2])",
        "minOperations([1,2,3,4,5,6])",
        "minOperations([1,2,3,4,5,6])",
        "minOperations(nums = [2, 2, 3, 3, 2, 4, 4, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 2])",
        "minOperations([1,1,1,1])",
        "minOperations([1, 1, 1, 2, 2])",
        "minOperations([3, 3, 3, 3])"
    ],
    "sample_423": [
        "minOperations(nums = [1,2,3,4,5])",
        "minOperations(nums = [1, 2, 3, 4, 5])",
        "minOperations(nums = [1, 2, 3, 4, 5])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1, 2, 2, 2, 2])",
        "minOperations([1, 2, 3, 4, 5])",
        "minOperations([1,2,2,3,3,3])",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minOperations([1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 2, 2, 2, 1, 1])"
    ],
    "sample_476": [
        "minimumCoins(prices = [1,2,5])",
        "minimumCoins(prices = [1,2,5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1,2])",
        "minimumCoins(prices = [1,2,3,4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins([1, 1, 1])",
        "minimumCoins(prices=[1, 2, 5])",
        "minimumCoins(prices=[1, 2, 3])",
        "minimumCoins(prices = [1,2,3,4,5,6,7,8,9])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [2, 3, 1])",
        "minimumRightShifts(nums = [2, 3, 1])",
        "minimumRightShifts(nums = [4, 3, 2, 1])",
        "minimumRightShifts([2, 3, 1])",
        "minimumRightShifts(nums = [2, 3, 4, 5, 1])",
        "minimumRightShifts([4, 3, 2, 1])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 1, 2])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6])",
        "minimumRightShifts(nums = [1,2,3])",
        "minimumRightShifts([3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3,2,1,4,0])"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"banana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"apple\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"aab\", s3 = \"aab\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"adbc\", s3 = \"abcd\")"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"abcd\")",
        "longestSemiRepetitiveSubstring(s = \"abcd\")",
        "longestSemiRepetitiveSubstring(s = \"abcd\")",
        "longestSemiRepetitiveSubstring(s = \"abbbc\")",
        "longestSemiRepetitiveSubstring(s = \"abcde\")",
        "longestSemiRepetitiveSubstring(s = \"abac\")",
        "longestSemiRepetitiveSubstring(s = \"abbcccddddeeeee\")",
        "longestSemiRepetitiveSubstring(s = \"aabcde\")",
        "longestSemiRepetitiveSubstring(s = \"abcabbcc\")",
        "longestSemiRepetitiveSubstring(s = \"nnbbb\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\", \"zyx\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"aa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"def\", \"ghi\", \"jkl\"])",
        "maximumNumberOfStringPairs(words = [\"mq\", \"px\", \"zy\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bca\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"cc\", \"dd\", \"ee\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"xyz\", \"def\"])",
        "maximumNumberOfStringPairs(words = [\"aa\",\"bb\",\"cc\",\"dd\",\"ee\",\"ff\",\"gg\",\"hh\",\"ii\",\"jj\"])",
        "maximumNumberOfStringPairs(words=[\"abc\",\"cba\",\"xyz\"])"
    ],
    "sample_247": [
        "minOperations(s1 = \"abc\", s2 = \"abc\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"abc\", x = 2)",
        "minOperations(s1 = \"abc\", s2 = \"cde\", x = 2)",
        "minOperations(s1 = \"abc\", s2 = \"abd\", x = 2)",
        "minOperations(s1 = \"bac\", s2 = \"cab\", x = 1)",
        "minOperations(s1 = \"aab\", s2 = \"aba\", x = 2)",
        "minOperations(s1 = \"abc\", s2 = \"acf\", x = 2)",
        "minOperations(s1 = \"01110\", s2 = \"11001\", x = 2)",
        "minOperations(s1 = \"abcde\", s2 = \"aczze\", x = 3)",
        "minOperations(s1 = \"pbbczg\", s2 = \"hdbxgc\", x = 2)"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"cd\",\"dc\"])",
        "maximumNumberOfStringPairs([\"ab\", \"ba\", \"cd\"])",
        "maximumNumberOfStringPairs([\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"cd\",\"dc\",\"ab\",\"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ta\", \"at\", \"cat\", \"rat\"])"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1,1,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,1,1,1,1,1])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,2,2,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,1,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [2, 1, 3, 1, 1, 1, 3, 3])",
        "minGroupsForValidAssignment(nums = [2,1,1,1,2,2])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 6, m = 2)",
        "differenceOfSums(n=10, m=3)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 7, m = 2)",
        "differenceOfSums(n = 5, m = 3)"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = '11', k = 2)",
        "shortestBeautifulSubstring(s = \"11011011\", k = 2)",
        "shortestBeautifulSubstring(s = '110110', k = 2)",
        "shortestBeautifulSubstring(s = '1111000', k = 2)",
        "shortestBeautifulSubstring(s = \"111001\", k = 2)",
        "shortestBeautifulSubstring(s = '110111011', k = 2)",
        "shortestBeautifulSubstring(s = '00111011', k = 2)",
        "shortestBeautifulSubstring(s = \"11110\", k = 2)",
        "shortestBeautifulSubstring(s = '11101111011', k = 2)",
        "shortestBeautifulSubstring(s = \"110010111\", k = 2)"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"banana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"xyz\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"hello\", s2 = \"world\", s3 = \"python\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abe\")",
        "findMinimumOperations(s1 = \"xy\", s2 = \"xy\", s3 = \"xy\")"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"abcd\")",
        "longestSemiRepetitiveSubstring(s = \"abcda\")",
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcdabcd\")",
        "longestSemiRepetitiveSubstring(s = \"abcdabcd\")",
        "longestSemiRepetitiveSubstring(s = \"abbab\")",
        "longestSemiRepetitiveSubstring(s = \"abbbc\")",
        "longestSemiRepetitiveSubstring(s = \"abbba\")",
        "longestSemiRepetitiveSubstring(s = \"abbb\")",
        "longestSemiRepetitiveSubstring(s=\"abcabc\")"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [1, 2, 3, 0], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 0], nums2 = [3, 4, 1])",
        "minSum(nums1 = [5, 0], nums2 = [7, 4])",
        "minSum(nums1 = [4, 2, 3], nums2 = [1, 2, 5])",
        "minSum(nums1 = [0, 3, 2], nums2 = [3, 2, 4])",
        "minSum(nums1 = [1, 2, 3, 0], nums2 = [2, 2, 3, 3])",
        "minSum(nums1 = [0, 4, 1], nums2 = [4, 1, 0])"
    ],
    "sample_289": [
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"1100\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"1111111111\")",
        "minimumSteps(s
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue([1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [3, 1, 2])",
        "maximumTripletValue(nums = [-2, -3, 4, -1, -2, 1, 5, -3])",
        "maximumTripletValue(nums = [1, 1, 1, 1])",
        "maximumTripletValue(nums = [1, -1, 0])",
        "maximumTripletValue([3, 1, 6, 2])",
        "maximumTripletValue(nums=[1,5,2,3])"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"abcde\", k = 2)",
        "beautifulSubstrings(s = \"abcd\", k = 2)",
        "beautifulSubstrings(s = \"a\", k = 1)",
        "beautifulSubstrings(s = \"aaa\", k = 1)",
        "beautifulSubstrings(s = \"bac\", k = 2)",
        "beautifulSubstrings(s = \"abcabcabc\", k = 3)",
        "beautifulSubstrings(s = \"amazing\", k = 2)",
        "beautifulSubstrings(s = \"abcdefghijk\", k = 3)",
        "beautifulSubstrings(s = \"codeforces\", k = 4)",
        "beautifulSubstrings(s = \"muhammad\", k = 5)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"101101101\")",
        "minimumBeautifulSubstrings(s = \"101\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"111\")",
        "minimumBeautifulSubstrings(s = \"111\")",
        "minimumBeautifulSubstrings(s = \"11101\")",
        "minimumBeautifulSubstrings(s = \"11010\")",
        "minimumBeautifulSubstrings(s = \"111000111\")",
        "minimumBeautifulSubstrings(s = \"011010011\")",
        "minimumBeautifulSubstrings(s = \"1101011010\")"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[1, 1], [1, 1]])",
        "matrixSum(a = [[1, 2], [3, 0]])",
        "matrixSum(a = [[1], [1]])",
        "matrixSum(a = [[1, 2], [3, 4], [5, 6]])",
        "matrixSum([[1, 2], [0, 1]])",
        "matrixSum([[1], [2]])",
        "matrixSum(a=[[1, 1], [0, 1]])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [4, 1, 2], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 1, 1, 0], nums2 = [1, 1, 1])",
        "minSum(nums1 = [2, 3], nums2 = [1, 4])",
        "minSum(nums1 = [1,0,1], nums2 = [0,1,0])",
        "minSum(nums1 = [1, 3, 3, 3, 4], nums2 = [2, 2, 2, 2, 2])",
        "minSum(nums1 = [3,1,0,0,0,0], nums2 = [2,0,1,1,1,1])"
    ],
    "sample_282": [
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,2,3], nums2 = [1,2,3])",
        "minOperations(nums1 = [2,1,2,4,2,2], nums2 = [5,2,6,2])",
        "minOperations(nums1 = [2, 1, 6], nums2 = [1, 5])",
        "minOperations(nums1 = [2,3,2,4,3], nums2 = [1,2,2,1])",
        "minOperations(nums1 = [1,1,1,1,1], nums2 = [2,2,2,2,2])",
        "minOperations(nums1 = [1,2,5], nums2 = [4,2,3])",
        "minOperations(nums1 = [4, 1, 4, 6], nums2 = [2, 1, 1, 2])",
        "minOperations(nums1 = [4, 2, 6, 5, 4, 6], nums2 = [5, 2, 4, 4, 3, 5])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1,2,3,4,5,6])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7])",
        "alternatingSubarray(nums = [1,2,3,2,1,2,3,2,1,2,3,4])",
        "alternatingSubarray(nums = [1,2,2,3,4,1,2,3,4,5])",
        "alternatingSubarray(nums = [1,2,2,3,4,4,5,5,5,6,7])",
        "alternatingSubarray(nums = [1, 3, 2, 5, 4, 7, 6, 8])",
        "alternatingSubarray(nums = [1,2,3,5,6,7,8,10,11,12,13,14])",
        "alternatingSubarray(nums = [1,3,5,2,4,2,1])",
        "alternatingSubarray([0,1,2,3,4,1,2,3,4,5,6,7,8,9,10])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [10, 15, 20], money = 50)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [10, 20, 30], money = 25)",
        "buyChoco(prices = [3,2,1], money = 4)",
        "buyChoco(prices = [10, 20, 5], money = 5)",
        "buyChoco(prices = [5,5,5,5,5], money = 10)",
        "buyChoco(prices = [10, 1, 1, 1, 1], money = 10)"
    ],
    "sample_302": [
        "countSeniors(details = [\"John Doe 20\", \"Jane Smith 62\", \"Bob Johnson 65\"])",
        "countSeniors(details = [\"830306-2000\", \"991030-2345\", \"920905-1983\"])",
        "countSeniors(details = [\"John Doe,21\", \"Jane Doe,62\", \"Bob Johnson,58\"])",
        "countSeniors(details = [\"786819012312\",\"840127615380\",\"927351234567\"])",
        "countSeniors(details = [\"John Smith 20\", \"Jack Johnson 50\", \"Jane Smith 61\"])",
        "countSeniors(details = [\"John Doe 24 65\", \"Jane Doe 30 67\"])",
        "countSeniors(details = [\"1965-05-14\", \"2005-05-14\", \"1977-05-14\"])",
        "countSeniors(details = [\"686-89-1968\", \"819-13-1234\", \"777-12-1234\"])",
        "countSeniors(details = [\"John Smith 20 20\", \"Jack Smith 50 50\", \"Jane Doe 60 60\", \"Jill Doe 70 70\"])",
        "countSeniors(details = [\"231220016785\", \"220219708742\", \"240720007846\"])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"abcde\", k = 2)",
        "beautifulSubstrings(s = \"abcde\", k = 2)",
        "beautifulSubstrings(s = \"ab\", k = 2)",
        "beautifulSubstrings(s = \"xyz\", k = 1)",
        "beautifulSubstrings(s = \"azcbobobegghakle\", k = 10)",
        "beautifulSubstrings(s = \"aa\", k = 3)",
        "beautifulSubstrings(s = \"baaaba\", k = 5)",
        "beautifulSubstrings(s = \"bceei\", k = 3)"
    ],
    "sample_255": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5,6])",
        "minimumSum(nums = [1,2,3,4,5,6,7])",
        "minimumSum(nums = [1,2,3,4,5,6,7,8,9])",
        "minimumSum(nums = [5,6,7,8,9])",
        "minimumSum(nums = [2,4,1,3,5])",
        "minimumSum(nums = [1,2,4,7,10])",
        "minimumSum(nums = [5, 2, 3, 6, 7])",
        "minimumSum(nums = [3,4,6,7,11])"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1, 3, 2, 5, 2, 2, 1, 6])",
        "minGroupsForValidAssignment(nums = [2,2,1,1,3,3,4,4])",
        "minGroupsForValidAssignment(nums = [2,2,2,2,2,2,2,2,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,3])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 1, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [2,3,3,2,3,2,3,2,3,2])"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1,2,3,3,2,1])",
        "alternatingSubarray(nums = [1,2,3,3,2,1])",
        "alternatingSubarray([1,2,3,4,5])",
        "alternatingSubarray(nums = [1,2,3,5,6,7,8,9])",
        "alternatingSubarray([1,2,2,3,3,3])",
        "alternatingSubarray(nums = [1,2,3,4,5,5,5,6,7])",
        "alternatingSubarray(nums = [2,4,5,6,7,8])",
        "alternatingSubarray(nums = [2,3,5,4,5,6])",
        "alternatingSubarray(nums=[1, 2, 3, 3, 2, 3, 3, 4, 5, 4])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = '11011011', k = 2)",
        "shortestBeautifulSubstring(s = '11111111', k = 2)",
        "shortestBeautifulSubstring(s = \"01101110\", k = 2)",
        "shortestBeautifulSubstring(s = '1011011', k = 2)",
        "shortestBeautifulSubstring(s = '1110110111', k = 2)",
        "shortestBeautifulSubstring(s = '101110111', k = 2)",
        "shortestBeautifulSubstring(s = \"101101101\", k = 2)",
        "shortestBeautifulSubstring(s = '1110110011', k = 2)",
        "shortestBeautifulSubstring(s = \"101111101\", k = 3)",
        "shortestBeautifulSubstring(s='1011110', k=2)"
    ],
    "sample_293": [
        "minimumSteps(s = \"001\")",
        "minimumSteps(s = \"00101\")",
        "minimumSteps(s = \"00101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"0010\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"001011\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"101101\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcda\")",
        "longestSemiRepetitiveSubstring(s = \"abcba\")",
        "longestSemiRepetitiveSubstring(s = \"abba\")",
        "longestSemiRepetitiveSubstring(s = \"abbba\")",
        "longestSemiRepetitiveSubstring(s = \"abcb\")",
        "longestSemiRepetitiveSubstring(s = \"abababa\")",
        "longestSemiRepetitiveSubstring(s=\"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbccd\")"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3,4,4,5,5])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,1,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,3,3,2,2,1,1])",
        "minGroupsForValidAssignment([1,1,2,2,3,3,4,4])",
        "minGroupsForValidAssignment([1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9])"
    ],
    "sample_307": [
        "countSeniors(details = [\"7868\",\"8479\"])",
        "countSeniors(details=[\"7868\",\"8479\"])",
        "countSeniors(details = [\"7868190123\",\"8100145623\",\"8811223344\",\"9911556688\"])",
        "countSeniors([\"1234567890\", \"0987654321\"])",
        "countSeniors(details = [\"7868190123\", \"9001001234\", \"8765098765\"])",
        "countSeniors(details = [\"7868190123\", \"9001015555\", \"9342981234\"])",
        "countSeniors(details = [\"John68\", \"John77\", \"John56\", \"John78\"])",
        "countSeniors(details = [\"7868190123\", \"7318190123\", \"9012345678\", \"8318190123\"])",
        "countSeniors(details = [\"7868190123\",\"8104197899\",\"5307195008\",\"1990198844\",\"7868190123\",\"8104197899\",\"5307195008\",\"1990198844\"])",
        "countSeniors(details=[\"7868190123\",\"8383199912\",\"1012200018\"])"
    ],
    "sample_290": [
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(\"0000\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s=\"00000\")",
        "minimumSteps(s = \"0101010\")",
        "minimumSteps(s = \"101000\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,2,2], moveFrom = [1,2], moveTo = [2,1])",
        "relocateMarbles(nums = [1,1,2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1,1,2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1,1,2,2,2], moveFrom = [1,2], moveTo = [2,1])",
        "relocateMarbles(nums = [1,1,1,2,2], moveFrom = [1,1], moveTo = [2,2])",
        "relocateMarbles(nums = [1,1,2,2,2], moveFrom = [1,1], moveTo = [2,2])",
        "relocateMarbles(nums = [2,2,1], moveFrom = [2,1], moveTo = [1,1])",
        "relocateMarbles(nums = [1, 2, 1], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [2, 2, 2], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums=[1,1,2,3],moveFrom=[1,2],moveTo=[2,2])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [4, 2, 5, 3])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [4,2,5,3])",
        "alternatingSubarray([1, 2, 3, 3])",
        "alternatingSubarray([1, 2, 2, 3, 4])",
        "alternatingSubarray(nums = [4,5,6,7,8,9])",
        "alternatingSubarray(nums = [4,2,3,4,5,6,7])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 5, 6, 7])",
        "alternatingSubarray(nums = [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"aeiou\", k = 10)",
        "beautifulSubstrings(s = \"aeiou\", k = 10)",
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 6)",
        "beautifulSubstrings(s = \"aei\", k = 2)",
        "beautifulSubstrings(s=\"aeiou\", k=20)",
        "beautifulSubstrings(s=\"aeiou\", k=26)",
        "beautifulSubstrings(s = \"bane\", k = 2)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [3, 6, 9, 1])",
        "maximumTripletValue(nums = [5, 5, 5])",
        "maximumTripletValue(nums = [5,2,3,1,4])",
        "maximumTripletValue(nums = [1, 5, 2, 8, 3])",
        "maximumTripletValue(nums = [5, 2, 7, 3, 8, 1])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\", \"dd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\"])",
        "maximumNumberOfStringPairs([\"ab\", \"ba\", \"cc\", \"dc\"])",
        "maximumNumberOfStringPairs([\"ab\", \"ba\", \"cc\", \"dd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"ab\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"bb\", \"aa\", \"aa\", \"bb\", \"aa\", \"aa\"])",
        "maximumNumberOfStringPairs(words=['bb', 'aa', 'cc', 'dd'])",
        "maximumNumberOfStringPairs([\"aa\", \"bb\", \"cc\", \"dd\", \"a\", \"b\", \"c\", \"d\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"cc\",\"dd\",\"aa\",\"xx\",\"xx\",\"aa\",\"aa\",\"dd\"])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 6, m = 2)",
        "differenceOfSums(n=10, m=3)",
        "differenceOfSums(n = 6, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 15, m = 5)"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [1,2,2], money = 3)",
        "buyChoco(prices = [10, 20, 30], money = 50)",
        "buyChoco(prices = [10, 20, 30], money = 100)",
        "buyChoco(prices = [10, 2, 3, 5], money = 10)",
        "buyChoco(prices = [3, 2, 1, 7], money = 5)",
        "buyChoco(prices = [10,20,30,40], money = 20)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"cd\", \"ba\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"cc\", \"dd\"])",
        "maximumNumberOfStringPairs([\"abc\", \"def\", \"ghi\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cab\", \"car\"])",
        "maximumNumberOfStringPairs(words=[\"aa\", \"bb\", \"dd\"])",
        "maximumNumberOfStringPairs(words = [\"apple\", \"banana\", \"racecar\", \"car\", \"anna\", \"apple\"])"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"abcda\")",
        "longestSemiRepetitiveSubstring(s = \"abcda\")",
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcbbbbcccbdddadacb\")",
        "longestSemiRepetitiveSubstring(s = \"abbcc\")",
        "longestSemiRepetitiveSubstring(s = \"abbabb\")",
        "longestSemiRepetitiveSubstring(s = \"babbba\")",
        "longestSemiRepetitiveSubstring(s = \"abbbbac\")",
        "longestSemiRepetitiveSubstring(s = \"abbbbbabbbbb\")"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"abc\",\"bca\",\"cab\"])",
        "minimizeConcatenatedLength(words = [\"apple\", \"pen\"])",
        "minimizeConcatenatedLength(words = [\"apple\", \"monkey\", \"plea\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"ba\",\"cd\"])",
        "minimizeConcatenatedLength(words = ['abc', 'bc', 'ab'])",
        "minimizeConcatenatedLength(words = ['abc', 'bc', 'abc'])",
        "minimizeConcatenatedLength(words = ['apple', 'pen'])",
        "minimizeConcatenatedLength(words = [\"a\",\"b\",\"a\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"xyz\",\"zxy\"])",
        "minimizeConcatenatedLength(words = [\"ba\",\"nana\",\"banana\",\"ban\"])"
    ],
    "sample_323": [
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(123)",
        "isFascinating(753)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"abcd\")",
        "longestSemiRepetitiveSubstring(s = \"abcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcda\")",
        "longestSemiRepetitiveSubstring(s = \"abcdb\")",
        "longestSemiRepetitiveSubstring(s = \"abcab\")",
        "longestSemiRepetitiveSubstring(s = \"abcba\")",
        "longestSemiRepetitiveSubstring(s = \"ababc\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbb\")",
        "longestSemiRepetitiveSubstring(s = \"bbaaaaab\")"
    ],
    "sample_305": [
        "countSeniors(details=[\"78681901234\",\"80081901234\",\"82681901234\"])",
        "countSeniors(details = [\"John Smith 19800823\",\"Jane Doe 19901020\"])",
        "countSeniors(details = [\"John Doe 27\", \"Jane Doe 34\", \"Richard Doe 65\"])",
        "countSeniors(details = [\"686-89-1234\", \"827312-98-4567\", \"102928928-82-5555\"])",
        "countSeniors(details = [\"John Smith 20 15\", \"John Doe 21 16\", \"John Smith 62 16\"])",
        "countSeniors(details = [\"876578543212\", \"123456789012\"])",
        "countSeniors(details = [\"John Smith 20\",\"Jacob Brown 50\",\"Peter Parker 65\"])",
        "countSeniors([\"John Smith 25\", \"Sam Johnson 30\", \"Anna Lee 65\", \"Mike Brown 70\"])",
        "countSeniors(details = [\"930303456781965\", \"831112456789012\", \"731010456789000\"])",
        "countSeniors([\"199911200000\",\"197505100000\",\"198512200000\"])"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [1,2,3,1,2,3,1,2,3])",
        "minGroupsForValidAssignment([1,1,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,4])"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSum(nums = [1,2,3,4,5,6])",
        "minimumSum(nums = [1, 3, 2, 4, 5])",
        "minimumSum(nums = [5, 1, 2, 3, 4])",
        "minimumSum(nums = [4, 1, 2, 3])",
        "minimumSum(nums = [2, 1, 5, 3, 2])"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"def\", \"fed\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"abc\"])",
        "maximumNumberOfStringPairs([\"abc\", \"cba\", \"def\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"cc\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"cc\", \"dd\", \"aabb\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"ba\", \"ab\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"banana\"])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = '111', k = 2)",
        "shortestBeautifulSubstring(s = '1111111', k = 2)",
        "shortestBeautifulSubstring(s = \"111\", k = 2)",
        "shortestBeautifulSubstring(s = '011011', k = 2)",
        "shortestBeautifulSubstring(s = \"01101110\", k = 2)",
        "shortestBeautifulSubstring(s = '11110011', k = 2)",
        "shortestBeautifulSubstring(s = '111011101', k = 2)",
        "shortestBeautifulSubstring(s='01011', k=2)",
        "shortestBeautifulSubstring(s = '011111000', k = 2)",
        "shortestBeautifulSubstring(s = \"1111101101111\", k = 2)"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [8, 1, 5, 3, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [4, 1, 5, 8, 3, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 3)",
        "lexicographicallySmallestArray(nums = [8, 1, 9, 3, 5], limit = 2)",
        "lexicographicallySmallestArray(nums = [5, 1, 3, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [4, 1, 5, 8, 9, 3], limit = 3)",
        "lexicographicallySmallestArray(nums = [8, 1, 9, 5, 3], limit = 3)",
        "lexicographicallySmallestArray(nums = [3, 8, 1, 9, 5], limit = 2)",
        "lexicographicallySmallestArray(nums = [3, 5, 1, 9, 8], limit = 3)",
        "lexicographicallySmallestArray(nums = [2, 4, 1, 6, 5, 9, 7, 8, 3], limit = 2)"
    ],
    "sample_310": [
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[0, 1], [1, 0]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(a = [[1], [0]])",
        "matrixSum(a = [[1], [0]])",
        "matrixSum(a = [[1, 2], [2, 1]])",
        "matrixSum(a = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "matrixSum(a = [[0,1],[0,1]])",
        "matrixSum(a = [[1,2,3],[2,3,4],[3,4,5]])",
        "matrixSum(a = [[0,0], [0,0]])"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiaaioooaauuaeiu\", k = 3)",
        "beautifulSubstrings(s = \"aeiaaiooii\", k = 4)",
        "beautifulSubstrings(s = \"aeioubcdg\", k = 2)",
        "beautifulSubstrings(s=\"aeio\", k=2)",
        "beautifulSubstrings(s=\"aeiaaiooiuuaeiou\", k=3)",
        "beautifulSubstrings(s=\"aeaioi\", k=2)"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"ef\", \"fe\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"ef\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"def\", \"fed\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\", \"ac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"xyz\", \"aba\", \"cba\"])",
        "maximumNumberOfStringPairs([\"ab\", \"cd\", \"ef\", \"ba\", \"dc\", \"fe\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"aaa\", \"aba\", \"cba\"])",
        "maximumNumberOfStringPairs([\"abc\", \"cba\", \"efg\", \"gfe\"])",
        "maximumNumberOfStringPairs(words=[\"abc\", \"xyz\", \"aba\", \"bab\", \"cba\", \"yzx\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"de\", \"def\", \"gfed\", \"cba\"])"
    ],
    "sample_325": [
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [3, 1, 2])",
        "maximumTripletValue(nums = [3, 2, 1, 4])",
        "maximumTripletValue(nums = [2, 4, 3])",
        "maximumTripletValue(nums = [2, 3, -1, 4, 5])",
        "maximumTripletValue(nums = [1, 0, 2, 1])",
        "maximumTripletValue(nums = [2,3,-2,0])"
    ],
    "sample_312": [
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum(nums = [[2,3],[1,4]])",
        "matrixSum([[1,2,3], [4,5,6], [7,8,9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 1]])",
        "matrixSum([[0, 1], [0, 1]])",
        "matrixSum(nums = [[1,2,3], [3,2,1]])",
        "matrixSum(nums = [[1,2], [1,2]])",
        "matrixSum([[1,2],[1,0]])",
        "matrixSum(nums = [[1, 2, 4], [5, 3, 1]])",
        "matrixSum([[1, 2, 0], [3, 1, 4], [2, 5, 1]])"
    ],
    "sample_281": [
        "minOperations(a = [3, 1, 2], b = [1, 2, 3])",
        "minOperations(a = [5, 2, 3], b = [3, 2, 5])",
        "minOperations(a = [3, 1], b = [2, 2])",
        "minOperations(a = [3, 2, 5], b = [1, 2, 4])",
        "minOperations(a = [3,1,2], b = [1,3,3])",
        "minOperations(a=[3,2,4,1], b=[2,4,1,3])",
        "minOperations(a = [3, 3, 1], b = [1, 2, 3])",
        "minOperations(a = [5, 4, 3], b = [4, 3, 5])",
        "minOperations(a = [3, 3, 2], b = [2, 3, 3])",
        "minOperations(a = [1,2,3,4,5], b = [2,4,6,8,10])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [2,1,2,4,2,2], nums2 = [5,2,6,2])",
        "minOperations(nums1 = [1, 1], nums2 = [1, 2])",
        "minOperations(nums1 = [1,1,1,1,1,1,1], nums2 = [1,1,1,1,1,1,2])",
        "minOperations(nums1 = [5, 6], nums2 = [3, 2])",
        "minOperations(nums1 = [1,2,3,4], nums2 = [2,2,1,1])",
        "minOperations(nums1 = [1, 1, 1, 1, 1], nums2 = [6, 6, 6, 6, 6])",
        "minOperations(nums1 = [3, 2, 5], nums2 = [4, 2, 3])",
        "minOperations(nums1 = [2, 5, 3], nums2 = [1, 3, 3])",
        "minOperations(nums1 = [1, 2, 4, 5], nums2 = [6, 3, 2, 1])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [3, 1, 2])",
        "maximumTripletValue(nums = [4, 3, 2, 1])",
        "maximumTripletValue(nums = [3, 6, 5])",
        "maximumTripletValue(nums = [3,6,5,1,4,2])",
        "maximumTripletValue(nums = [2, 4, 1, 5])",
        "maximumTripletValue([5, 3, 1, 2, 4, 6])",
        "maximumTripletValue(nums = [5, 6, 5, 6])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s=\"0110\", k=2)",
        "shortestBeautifulSubstring(s=\"0110\", k=2)",
        "shortestBeautifulSubstring(s = \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s = \"10101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1111\", k = 2)",
        "shortestBeautifulSubstring(s = \"111101111\", k = 3)",
        "shortestBeautifulSubstring(s='111000111', k=3)",
        "shortestBeautifulSubstring(s = \"1010110111\", k = 3)",
        "shortestBeautifulSubstring(s = \"10111101101\", k = 2)",
        "shortestBeautifulSubstring(s = '101100011101010110101001', k = 2)"
    ],
    "sample_256": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 3, 2, 4, 5])",
        "minimumSum(nums = [3,1,2,4,3])",
        "minimumSum(nums = [1,4,3,2,5])",
        "minimumSum(nums = [1,2,3,4,5,6])",
        "minimumSum(nums = [3,2,1,5,6,4])",
        "minimumSum(nums = [3, 5, 2, 4, 1])"
    ],
    "sample_291": [
        "minimumSteps(s = \"11111\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"111\")",
        "minimumSteps(s = \"111\")",
        "minimumSteps(s = \"111111\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"10111011\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minOperations(nums1 = [5, 6, 4], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [2,1,2,4,2,2], nums2 = [5,2,6,2,3,2])",
        "minOperations(nums1 = [2, 1, 2, 4, 2, 2], nums2 = [5, 2, 6, 2, 3, 2])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "minOperations(nums1 = [1,2,3,4], nums2 = [1,2,3,6])"
    ],
    "sample_277": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[1, 1], [0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 1, 1], [0, 1, 1], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 1], [0, 0, 0]])",
        "findChampion(grid = [[1,0,1],[1,0,0],[1,0,1]])",
        "findChampion(grid = [[1,0,0],[1,0,1],[0,0,1]])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 6, m = 2)",
        "differenceOfSums(n = 6, m = 2)",
        "differenceOfSums(n=10, m=3)",
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n = 15, m = 5)"
    ],
    "sample_292": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"1011\")",
        "minimumSteps(s = \"00101\")",
        "minimumSteps(s = \"001011\")",
        "minimumSteps(s = \"001101\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"01111\")"
    ],
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 3, 3, 2])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [0,1,2,3,4,5])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 2, 5])",
        "alternatingSubarray(nums = [2, 3, 3, 2, 1, 0])"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2, 3], moveTo = [2, 3, 1])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,3], moveTo = [2,3])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,3], moveTo = [2,3])",
        "relocateMarbles(nums = [1,2,2], moveFrom = [1,2], moveTo = [2,1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [1, 2])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,3], moveTo = [3,1])",
        "relocateMarbles(nums=[1, 2, 3], moveFrom=[1, 3], moveTo=[3, 1])",
        "relocateMarbles(nums=[1, 2, 3], moveFrom=[1, 3], moveTo=[2, 2])",
        "relocateMarbles(nums = [1, 2, 2, 3], moveFrom = [2, 2], moveTo = [1, 2])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [5, 1, 2])",
        "maximumTripletValue(nums = [5, 1, 2])",
        "maximumTripletValue(nums = [1, 5, 2, 10])",
        "maximumTripletValue(nums = [0, 1, 0])",
        "maximumTripletValue(nums = [2, 4, 5, 6])",
        "maximumTripletValue(nums = [2,1,3,1,2,1])"
    ],
    "sample_273": [
        "findChampion(grid = [[0, 1], [0, 0]])",
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0,1,0],[1,0,0],[0,0,0]])",
        "findChampion(grid=[[1, 1, 1], [0, 0, 0], [1, 1, 1]])",
        "findChampion([[0,1,0],[1,0,1],[0,1,0]])",
        "findChampion(grid = [[0,0,0],[0,0,0],[1,0,0]])",
        "findChampion(grid = [[1,0,1],[1,0,0],[0,0,1]])",
        "findChampion(grid = [[1,1,1],[1,0,1],[1,0,1]])",
        "findChampion(grid = [[0,0,0,1], [1,0,0,0], [0,1,0,0], [0,0,1,0]])"
    ],
    "sample_267": [
        "minSum(nums1 = [0], nums2 = [0])",
        "minSum(nums1 = [0, 1], nums2 = [2, 3])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "minSum(nums1 = [0, 2], nums2 = [1, 3])",
        "minSum(nums1 = [0,1,2], nums2 = [3,4,5])",
        "minSum(nums1 = [2, 1, 0], nums2 = [1, 2, 0])",
        "minSum(nums1 = [1], nums2 = [1, 2])",
        "minSum(nums1 = [1, 2, 0], nums2 = [1, 1, 1])",
        "minSum(nums1 = [0, 2, 2], nums2 = [0, 3, 1])",
        "minSum(nums1 = [0, 0, 2], nums2 = [2, 2, 2])"
    ],
    "sample_294": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"001011\")",
        "minimumSteps(s = \"0011\")",
        "minimumSteps(s = \"001\")",
        "minimumSteps(s = \"1011\")",
        "minimumSteps(\"01\")",
        "minimumSteps(s = \"010101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(\"010\")",
        "minimumSteps(s = \"010110\")"
    ],
    "sample_274": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[0, 1], [0, 0]])",
        "findChampion(grid = [[0,1],[0,0]])",
        "findChampion(grid = [[1, 1, 1], [0, 0, 0], [1, 1, 1]])",
        "findChampion(grid = [[0,0],[1,0]])",
        "findChampion(grid = [[1, 1, 0], [-1, 1, 0], [-1, -1, 1]])",
        "findChampion(grid = [[1,0,0],[1,1,1],[1,1,0]])"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3,4,4,5,5])",
        "minGroupsForValidAssignment(nums = [1,2,3,1,2,3,1,2,3])",
        "minGroupsForValidAssignment(nums = [1,2,3,3,2,1])",
        "minGroupsForValidAssignment(nums = [2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,2,2,1,1,1])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,3,1,1,1])",
        "minGroupsForValidAssignment(nums=[3,3,3,1,1,1,2,2,2,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,2,3,3,4,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment([1,2,3,3,2,1,1,1,2,3,3,2,1])"
    ],
    "sample_270": [
        "minSum(nums1 = [1,2,3], nums2 = [0,0,0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 1, 2])",
        "minSum(nums1 = [1,2,3,4], nums2 = [5,6,7,8])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10])",
        "minSum(nums1 = [1,2,0], nums2 = [3,4,5])",
        "minSum(nums1 = [1,1,1,0,1], nums2 = [1,0,1,1,0])",
        "minSum(nums1 = [0, 1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1, 0])",
        "minSum(nums1=[2, 2, 2], nums2=[0, 0, 0])",
        "minSum(nums1=[1,2,0], nums2=[2,3])",
        "minSum(nums1=[0,1,2], nums2=[3,4,5])"
    ],
    "sample_317": [
        "buyChoco(prices = [3, 2, 3], money = 4)",
        "buyChoco(prices = [3, 2, 4], money = 6)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1,2,3], money = 4)",
        "buyChoco(prices = [3,2,3], money = 3)",
        "buyChoco(prices = [1, 2, 3, 4], money = 10)",
        "buyChoco(prices = [1,2,3], money = 5)",
        "buyChoco(prices = [4, 2, 3], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4], money = 3)",
        "buyChoco(prices = [2,3,5], money = 5)"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"abc\", k = 3)",
        "beautifulSubstrings(s = \"aei\", k = 3)",
        "beautifulSubstrings(s = \"aaaa\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"abc\", k = 1)",
        "beautifulSubstrings(s = \"n\", k = 1)",
        "beautifulSubstrings(s = \"xxyyzz\", k = 3)"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"abcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abca\")",
        "longestSemiRepetitiveSubstring(s = \"abcdb\")",
        "longestSemiRepetitiveSubstring(s = \"abcab\")",
        "longestSemiRepetitiveSubstring(s = \"abbc\")",
        "longestSemiRepetitiveSubstring(s = \"abcdab\")",
        "longestSemiRepetitiveSubstring(s = \"abcdabcd\")",
        "longestSemiRepetitiveSubstring(s = \"abbcc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabb\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbcccdd\")"
    ],
    "sample_341": [
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 3, z = 5)",
        "longestString(x = 1, y = 3, z = 2)",
        "longestString(x = 3, y = 2, z = 2)",
        "longestString(x = 2, y = 5, z = 3)",
        "longestString(x = 3, y = 5, z = 1)",
        "longestString(x = 4, y = 6, z = 3)",
        "longestString(x=4, y=2, z=2)"
    ],
    "sample_271": [
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1=[1,2,3], nums2=[4,5,6])",
        "minSum(nums1 = [0, 1, 2], nums2 = [3, 4, 5])",
        "minSum(nums1 = [2, 3, 4, 5, 0], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1=[0,1,3], nums2=[4,2,1])",
        "minSum(nums1 = [2,3,1], nums2 = [2,4,2])",
        "minSum(nums1 = [4,1,4,0], nums2 = [5,2,3])",
        "minSum(nums1 = [1, 3], nums2 = [5, 4, 2])",
        "minSum(nums1 = [5, 4, 3, 2, 1], nums2 = [3, 1, 3, 0, 0])"
    ],
    "sample_340": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 3, z = 2)",
        "longestString(x = 2, y = 3, z = 2)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(1, 2, 3)",
        "longestString(x = 1, y = 3, z = 4)"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"11\", k = 2)",
        "shortestBeautifulSubstring(s = '11', k = 2)",
        "shortestBeautifulSubstring(s = \"111\", k = 3)",
        "shortestBeautifulSubstring(s = \"1111\", k = 4)",
        "shortestBeautifulSubstring(s = '111111', k = 6)",
        "shortestBeautifulSubstring(s='111111', k=6)",
        "shortestBeautifulSubstring(s = \"1111111111\", k = 10)",
        "shortestBeautifulSubstring(s = '112345678910', k = 10)",
        "shortestBeautifulSubstring(s = \"1111111\", k = 1)",
        "shortestBeautifulSubstring(s = '2211222211', k = 5)"
    ],
    "sample_324": [
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(791)"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 3, 5, 4, 2])",
        "minimumSum(nums = [2, 4, 5, 6, 8])",
        "minimumSum(nums = [3, 2, 5, 4])",
        "minimumSum(nums = [1, 5, 2, 6])",
        "minimumSum(nums = [3, 1, 2, 5, 7, 6])",
        "minimumSum(nums = [3, 7, 1, 2, 9])",
        "minimumSum(nums = [3, 7, 2, 8, 9, 4])",
        "minimumSum(nums = [2, 5, 6, 3, 4])"
    ],
    "sample_268": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 1, 1], nums2 = [2, 2, 2])",
        "minSum(nums1 = [5, 6, 7], nums2 = [1, 2, 3])",
        "minSum(nums1=[1, 2, 3], nums2=[3, 2, 1])",
        "minSum(nums1 = [4, 1, 1], nums2 = [1, 2, 3])",
        "minSum(nums1 = [4, 3, 2], nums2 = [1, 1, 4])",
        "minSum(nums1 = [4, 3, 0], nums2 = [5, 1, 2])",
        "minSum(nums1 = [3, 1, 2, 0, 1], nums2 = [2, 3, 2, 0, 2])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"banana\", s2 = \"banana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"banana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"bbb\", s3 = \"ccc\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"bbb\", s3 = \"ccc\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abc\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abe\")",
        "findMinimumOperations(s1 = \"ban\", s2 = \"ana\", s3 = \"nana\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"apple\", s3 = \"monkey\")",
        "findMinimumOperations(s1 = \"abcabc\", s2 = \"abcabc\", s3 = \"abcabc\")"
    ],
    "sample_321": [
        "maxStrength(nums = [2, -3, 4, -5])",
        "maxStrength(nums = [4, -2, 5, -1, 3, -3])",
        "maxStrength(nums = [-10, -10, 5, 2])",
        "maxStrength(nums = [2, -3, 1, 4, -5, 6, -7, 8, 9])",
        "maxStrength(nums = [5,-1,4,3,2,1])",
        "maxStrength(nums = [4, -5, 2, -6, 3, -1])",
        "maxStrength(nums = [4, 2, 3, -2, -1, 0])",
        "maxStrength(nums = [5, -3, -10, 6, 4, 2])",
        "maxStrength(nums = [2, -3, 4, -5, -1, 2, 3, 4])",
        "maxStrength(nums = [5, -2, -3, 4, -6, 2, -1, 3, -4, 6])"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [3, 2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [4, 2])",
        "relocateMarbles(nums = [1,2,2,3], moveFrom = [2,2], moveTo = [1,1])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,2], moveTo = [3,1])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [2, 3], moveTo = [5, 6])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,2,3], moveTo = [4,5,6])",
        "relocateMarbles(nums = [1, 2, 3, 2], moveFrom = [2, 3], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 1, 2, 2, 3], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1, 3], moveTo = [3, 1])"
    ],
    "sample_357": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 5, 6, 9], moveFrom = [5, 6], moveTo = [9, 8])",
        "relocateMarbles(nums = [8, 5, 9, 5, 6], moveFrom = [5, 9], moveTo = [5, 8])",
        "relocateMarbles(nums = [5, 5, 6, 6, 8, 9, 9], moveFrom = [5, 6, 9], moveTo = [5, 6, 9])",
        "relocateMarbles(nums = [9, 5, 6, 8, 5], moveFrom = [5, 6], moveTo = [6, 5])",
        "relocateMarbles(nums = [5,6,5,8,9], moveFrom = [5, 6], moveTo = [8, 6])",
        "relocateMarbles(nums = [6, 5, 8, 9, 8], moveFrom = [6, 8], moveTo = [6, 5])",
        "relocateMarbles(nums = [8,5,6,9,8,5,6], moveFrom = [5,8], moveTo = [9,6])",
        "relocateMarbles(nums = [8, 8, 5, 5, 9, 9, 6, 6], moveFrom = [8,5], moveTo = [9,6])",
        "relocateMarbles(nums = [1, 1, 2, 3, 5, 6, 6, 8, 9, 10], moveFrom = [1, 6], moveTo = [3, 8])"
    ],
    "sample_318": [
        "buyChoco(prices = [3, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3, 4], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4], money = 10)",
        "buyChoco(prices = [1, 2, 3], money = 6)",
        "buyChoco(prices = [2, 3, 4], money = 6)",
        "buyChoco(prices = [10, 5, 20, 15], money = 50)",
        "buyChoco(prices = [2, 3, 7], money = 13)",
        "buyChoco(prices=[1, 2, 5], money=6)",
        "buyChoco(prices = [20, 50, 20], money = 100)"
    ],
    "sample_308": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1, 2], [3, 1]])",
        "matrixSum(nums=[[3,2,1],[4,5,6]])",
        "matrixSum(nums=[[2, 1], [1, 2]])",
        "matrixSum(nums = [[3, 1, 2], [6, 4, 5]])",
        "matrixSum(nums = [[1,0,2],[0,3,0]])",
        "matrixSum(nums = [[5, 2, 1], [7, 3, 4]])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [3, 2, 3], money = 4)",
        "buyChoco(prices = [3, 2, 3], money = 3)",
        "buyChoco(prices = [3, 2, 3], money = 3)",
        "buyChoco(prices = [1, 1, 1], money = 2)",
        "buyChoco(prices = [1,2,3], money = 3)",
        "buyChoco(prices = [10, 15, 5], money = 25)"
    ],
    "sample_259": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5,6])",
        "minimumSum(nums = [1,2,3,4])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [1,2,3,4,5,6,7,8,9])",
        "minimumSum(nums = [4,3,1,5,6])",
        "minimumSum(nums = [10,2,3,4,5])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1,2,3,4,5,6])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8])",
        "alternatingSubarray(nums = [2, 4, 6, 8, 10])",
        "alternatingSubarray(nums = [1, 3, 2, 4, 5, 6])",
        "alternatingSubarray(nums = [2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 3, 5, 7, 9, 11])",
        "alternatingSubarray(nums = [1,3,5,7,9,2,4,6,8,10])",
        "alternatingSubarray(nums = [1,3,2,4,5])"
    ],
    "sample_311": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1, 2], [2, 1]])",
        "matrixSum(nums = [[1, 2], [2, 1]])",
        "matrixSum(nums = [[1, 2], [2, 1]])",
        "matrixSum([[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "matrixSum([[1, 1, 1], [1, 1, 1]])",
        "matrixSum(nums = [[1,2,3],[0,0,0]])",
        "matrixSum(nums = [[2,3,5], [1,2,3], [4,5,6]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 2, 2], money = 3)",
        "buyChoco(a = [1, 2, 2], money = 3)",
        "buyChoco(a = [1, 2, 3], money = 5)",
        "buyChoco(a = [1, 2, 3], money = 4)",
        "buyChoco(a = [2, 2], money = 3)",
        "buyChoco(a=[1, 2, 2], money=3)",
        "buyChoco(a = [2, 3, 1], money = 5)",
        "buyChoco(a = [2, 3], money = 4)",
        "buyChoco(a = [3, 2, 3], money = 3)",
        "buyChoco(a = [3,2,1], money = 6)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums=[1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,3,3,3,3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,3,3,3,3])"
    ],
    "sample_276": [
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 0, 1], [1, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0,1,0],[0,0,1],[1,0,0]])",
        "findChampion(grid = [[0, 0, 1], [0, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 0, 1], [0, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[0, 0, 1], [0, 1, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 0, 1], [0, 1, 0], [1, 0, 0]])",
        "findChampion(grid=[[0,1,0],[1,0,1],[0,1,0]])"
    ],
    "sample_320": [
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 5, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [2, 3, 5])",
        "maxStrength(nums = [5, 2, 3, 4])",
        "maxStrength(nums = [2, 5, 3])",
        "maxStrength([1, 2, 3, 4])",
        "maxStrength(nums = [4, 2, 5])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"ab\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"bc\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"bc\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"nana\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"cd\",\"ef\"])",
        "minimizeConcatenatedLength(words = [\"ca\",\"bb\",\"acc\"])",
        "minimizeConcatenatedLength(words=[\"abc\", \"bc\"])",
        "minimizeConcatenatedLength(words=[\"ab\", \"ca\", \"d\"])"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abcdef\", s2 = \"abcdef\", s3 = \"abcdef\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcdef\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"geek\", s2 = \"geek\", s3 = \"geek\")",
        "findMinimumOperations(s1 = \"eat\", s2 = \"sea\", s3 = \"tea\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"acbd\", s3 = \"acd\")",
        "findMinimumOperations(s1 = \"koder\", s2 = \"topcoder\", s3 = \"coder\")",
        "findMinimumOperations(s1 = \"hema\", s2 = \"hema\", s3 = \"hema\")"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 7])",
        "alternatingSubarray(nums = [2, 4, 6, 8, 10, 7, 16, 18, 20])",
        "alternatingSubarray(nums = [2, 4, 6, 8, 10, 12, 14])",
        "alternatingSubarray(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 4, 4, 5, 7, 7])",
        "alternatingSubarray(nums = [2, 3, 4, 3, 2, 3])",
        "alternatingSubarray([1,2,3,4,5,6,7,8,9,10])",
        "alternatingSubarray([4,2,3,6,1,2,3,4])"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 0, 1], [0, 1, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 0, 1], [0, 0, 1], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [1, 1, 1], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 1], [0, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[0,0,1],[0,1,0],[1,0,0]])",
        "findChampion(grid = [[1, 1, 0], [0, 0, 1], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 1], [0, 0, 1]])"
    ],
    "sample_304": [
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"John Doe 1960\", \"John Doe 1970\"])",
        "countSeniors(details = [\"John Doe, 48\", \"Jane Smith, 60\", \"Sam Johnson, 65\"])",
        "countSeniors(details = [\"John 21\",\"Alice 32\",\"Bob 40\",\"Tom 60\",\"Jerry 70\"])",
        "countSeniors(details = [\"John Doe\", \"Jane Smith\", \"Jennifer Johnson\",\"John Doe\", \"John Doe\"])",
        "countSeniors([\"John Doe 1970\",\"Abraham Doe 1980\", \"Susan Doe 1960\"])",
        "countSeniors([\"John Doe 23-04-1990\", \"Jane Smith 11-06-1960\", \"Alice Johnson 29-09-1963\"])",
        "countSeniors(details = [\"John,19,Smith\",\"Alice,67,Johnson\",\"Bob,34,Miller\",\"Charlie,60,Jones\",\"David,20,Brown\"])",
        "countSeniors([\"199901010110\", \"200010201230\", \"196711112340\"])",
        "countSeniors(details = [\"686-5-6066\",\"742-4-2842\",\"181-7-8888\"])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioooaauuaeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiouaeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aea\", k = 2)",
        "beautifulSubstrings(s = \"aeioubcd\", k = 2)",
        "beautifulSubstrings(s = \"aabbaa\", k = 3)"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = '0110', k = 2)",
        "shortestBeautifulSubstring(s = \"110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"111101\", k = 2)",
        "shortestBeautifulSubstring(s = '1110010', k = 2)",
        "shortestBeautifulSubstring(s = '1100101010', k = 2)",
        "shortestBeautifulSubstring(s = '1011111011', k = 2)",
        "shortestBeautifulSubstring(s = '111101010011', k = 2)",
        "shortestBeautifulSubstring(s = '1100111100111100', k = 3)",
        "shortestBeautifulSubstring(s='11011110101111101110', k=2)",
        "shortestBeautifulSubstring(s = \"111001111011011110000\", k = 2)"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"ab\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"ba\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"de\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"de\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"cd\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"cd\",\"ef\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"bc\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"bcd\"])",
        "minimizeConcatenatedLength(words = [\"b\", \"n\"])"
    ],
    "sample_327": [
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(791)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1], [2], [3]])",
        "matrixSum(nums = [[1], [1]])",
        "matrixSum(nums = [[1], [1], [1]])",
        "matrixSum(nums = [[1], [2]])",
        "matrixSum([[1,2,3],[1,2,3]])",
        "matrixSum(nums = [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]])",
        "matrixSum(nums = [[1,0,2],[0,1,3]])",
        "matrixSum(nums = [[3, 1, 2], [3, 1, 1], [0, 1, 2]])"
    ],
    "sample_326": [
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)"
    ],
    "sample_275": [
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[1, 1, 0], [0, 1, 1], [1, 0, 1]])",
        "findChampion(grid = [[1, 1, 0], [0, 1, 1], [0, 0, 1]])",
        "findChampion(grid = [[1,0],[0,1]])",
        "findChampion(grid = [[0,1],[0,0]])",
        "findChampion(grid = [[0,1,0],[0,0,1],[1,0,0]])",
        "findChampion(grid = [[1, 0, 1], [1, 1, 1], [0, 1, 0]])",
        "findChampion(grid=[[0,1,0], [1,0,1], [0,1,0]])",
        "findChampion(grid=[[1, 1, 1], [0, 0, 0], [1, 0, 1]])"
    ],
    "sample_260": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [3, 6, 2, 8, 7, 5])",
        "minimumSum(nums = [1, 3, 5, 2, 4, 6])",
        "minimumSum(nums = [1, 2, 4, 5, 6])",
        "minimumSum(nums = [5,3,1,2,4])",
        "minimumSum(nums = [5, 1, 6, 2, 7, 3])",
        "minimumSum(nums = [2, 3, 5, 1, 7, 4])",
        "minimumSum(nums = [5, 3, 1, 2, 4, 8])",
        "minimumSum(nums = [1, 3, 5, 2, 1, 4, 9, 2])"
    ],
    "sample_322": [
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)"
    ],
    "sample_248": [
        "minOperations(s1 = \"110\", s2 = \"110\", x = 2)",
        "minOperations(s1 = \"110\", s2 = \"110\", x = 2)",
        "minOperations(s1 = \"1110\", s2 = \"1011\", x = 3)",
        "minOperations(s1 = \"100\", s2 = \"001\", x = 2)",
        "minOperations(s1 = \"001\", s2 = \"011\", x = 2)",
        "minOperations(s1 = \"10101\", s2 = \"01010\", x = 5)",
        "minOperations(s1 = \"1001\", s2 = \"110\", x = 1)",
        "minOperations(s1 = '001', s2 = '100', x = 2)",
        "minOperations(s1 = \"001111\", s2 = \"001110\", x = 2)",
        "minOperations(s1 = '1011101101', s2 = '1110110110', x = 10)"
    ],
    "sample_342": [
        "longestString(x = 3, y = 3, z = 3)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(3, 3, 2)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 2, z = 3)",
        "longestString(x=2, y=3, z=4)",
        "longestString(3, 4, 1)",
        "longestString(x=3, y=4, z=5)",
        "longestString(x=3, y=4, z=1)"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [6, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 2, 3], moveTo = [5, 6, 8])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [6, 7], moveTo = [7, 6])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [6, 8], moveTo = [10, 11])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 8], moveTo = [6, 9])",
        "relocateMarbles(nums = [6, 8, 9], moveFrom = [6], moveTo = [5])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [5, 6, 7], moveTo = [9, 8, 7])",
        "relocateMarbles(nums = [6, 5, 8, 9], moveFrom = [6, 5], moveTo = [8, 5])",
        "relocateMarbles(nums = [8, 5, 9, 6], moveFrom = [8, 5], moveTo = [9, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 7, 4], moveTo = [7, 2, 4])"
    ],
    "sample_306": [
        "countSeniors(details = [\"John Doe,25\", \"Jane Doe,62\", \"Sam Smith,65\"])",
        "countSeniors(details = [\"John Doe,23\", \"Jane Doe,61\", \"John Smith,62\"])",
        "countSeniors([\"John, Doe, 40\", \"Jane, Doe, 62\", \"John, Doe, 65\"])",
        "countSeniors(details = [\"John Doe 34\", \"Jack Smith 56\", \"Jane Doe 67\"])",
        "countSeniors([\"John Doe 19900101\", \"Jane Doe 19650203\"])",
        "countSeniors([\"John, Smith, 55\", \"Jane, Doe, 70\", \"Alice, Green, 63\"])",
        "countSeniors(details = ['123456-789012-15','987654-321987-61','555555-555555-71'])",
        "countSeniors(details = [\"John 10 10 2005\", \"Jane 10 12 2002\", \"Sam 10 10 1960\"])",
        "countSeniors(details = [\"John Smith 1995-02-28\", \"Jane Doe 1961-11-28\", \"John Doe 1990-08-28\"])",
        "countSeniors(details = [\"John 34\", \"Samantha 23\", \"Michael 56\", \"Lucy 67\", \"Jane 54\"])"
    ],
    "sample_303": [
        "countSeniors(details = [\"78681901234\",\"9001012345\",\"9307031234\"])",
        "countSeniors(details = [\"78681901234\",\"90010085678\",\"98715342367\"])",
        "countSeniors(details = [\"7868190123456\",\"9001001234567\"])",
        "countSeniors(details = [\"78681901234\",\"90010085678\",\"9384756456\"])",
        "countSeniors(details = [\"7868190123456\",\"8419190123456\",\"9001010123456\"])",
        "countSeniors(details = [\"78681901234\",\"9001015869\",\"89012348756\",\"9001016269\"])",
        "countSeniors([\"JohnnyBoy67\", \"JonnyDoe65\", \"JaneDoe65\"])",
        "countSeniors(details = [\"8716\", \"6375\", \"5600\"])",
        "countSeniors(details=[\"John Doe 1970\", \"Jane Smith 1969\", \"Steve Johnson 1960\", \"Samantha Jones 1990\"])",
        "countSeniors(details = [\"18BCE06007\",\"62CB213010\",\"28BA975052\"])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [6, 8], moveTo = [8, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 2, 3], moveTo = [5, 6, 8])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [6, 8], moveTo = [10, 11])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [8, 6], moveTo = [7, 5])",
        "relocateMarbles(nums = [5, 7, 8, 9], moveFrom = [7, 5], moveTo = [6, 5])",
        "relocateMarbles(nums=[5, 6, 8, 9], moveFrom=[6, 8], moveTo=[7, 8])",
        "relocateMarbles(nums=[5, 6, 7, 8, 9], moveFrom=[7, 8], moveTo=[6, 7])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 6, 5], moveTo = [7, 6, 5])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [8, 5], moveTo = [10, 11])",
        "relocateMarbles(nums=[6, 5, 8, 9], moveFrom=[5, 6], moveTo=[5, 6])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"aabaa\", s2 = \"aabaa\", s3 = \"aabaa\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"bba\", s3 = \"baa\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"axy\", s3 = \"aaz\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"baa\", s3 = \"abaa\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"aab\", s3 = \"abc\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"banana\", s2 = \"banana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abcdef\", s2 = \"abcdef\", s3 = \"abcdef\")",
        "findMinimumOperations(s1 = \"geeks\", s2 = \"geek\", s3 = \"geek\")",
        "findMinimumOperations(s1 = \"abcdef\", s2 = \"abcdef\", s3 = \"abcdef\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"acbd\", s3 = \"abdc\")",
        "findMinimumOperations(s1 = \"ananas\", s2 = \"banana\", s3 = \"canana\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"yza\", s3 = \"xza\")"
    ]
}