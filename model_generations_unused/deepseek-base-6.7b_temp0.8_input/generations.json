{
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [4,3,2,1])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1,2,3,4])",
        "minimumRightShifts(nums = [2,1,3,4])",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [1, 1, 1])",
        "minimumRightShifts(nums = [3,4,5,2,1])",
        "minimumRightShifts(nums = [3,4,7,5,1,2,6])",
        "minimumRightShifts(nums = [0,2,3,1])"
    ],
    "sample_453": [
        "minChanges(s = \"0100\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"ab\")",
        "minChanges(s = \"1111\")",
        "minChanges(s = \"aaa\")",
        "minChanges(s = \"aaabbbb\")",
        "minChanges(\"abba\")",
        "minChanges(s = \"1100100\")",
        "minChanges(s = \"22221111\")",
        "minChanges(s = \"111100001110000\")"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 1, 1], target = 5)",
        "lengthOfLongestSubsequence(nums = [5,5,10,10,2,3], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 1, 2, 1], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 1000)",
        "lengthOfLongestSubsequence(nums = [2, 4, 6, 10], target = 16)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 3, 4, 10], target = 13)",
        "lengthOfLongestSubsequence(nums = [23,29,2,3,7], target = 7)",
        "lengthOfLongestSubsequence(nums = [5, 3, 8, 6], target = 13)",
        "lengthOfLongestSubsequence(nums = [3, 2, 7, 8, 10, 1], target = 4)"
    ],
    "sample_367": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels('lYmpH')",
        "sortVowels(s = 'MyPh')",
        "sortVowels(s = \"MyPhoN\")",
        "sortVowels(\"MyPhoN\")",
        "sortVowels(\"MyPheLP\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [2, 3, 5], target = 7)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9], target = 100)",
        "lengthOfLongestSubsequence(nums = [5, 6, 7, 8, 9], target = 15)",
        "lengthOfLongestSubsequence(nums = [3, 1, 4, 2, 5], target = 3)",
        "lengthOfLongestSubsequence(nums=[1,2,3,4,5,6,7,8,9,10], target=40)",
        "lengthOfLongestSubsequence(nums = [10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 5, 10, 16], target = 15)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence(nums = [10, 9, 7, 2, 1], target = 11)",
        "lengthOfLongestSubsequence(nums = [100, 101, 200, 500, 1500, 1600, 1601], target = 10000)"
    ],
    "sample_381": [
        "countPairs(nums = [1,2,3,4,5], t = 5)",
        "countPairs(nums = [1,2,3,4,5], t = 5)",
        "countPairs(nums = [1,2,3,4,5], t = 6)",
        "countPairs(nums = [1,2,3,4,5,6], t = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], t = 9)",
        "countPairs(nums = [1,2,3,4,5,6,7,8,9,10], t = 9)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6, 7], t = 9)",
        "countPairs(nums = [4, 2, 1, 3], t = 5)",
        "countPairs(nums=[1,5,2,7,3], t=10)",
        "countPairs(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], t=10)"
    ],
    "sample_366": [
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [3, 4, 5, 1, 2])",
        "isGood(nums = [2, 1, 3, 4])",
        "isGood(nums = [1, 4, 2, 3])",
        "isGood(nums = [4, 2, 3, 1])",
        "isGood(nums = [1, 3, 2, 4])",
        "isGood([3, 1, 4, 2, 5])",
        "isGood([1, 2, 5, 4, 3])",
        "isGood(nums = [1, 0, 3])",
        "isGood(nums = [4, 2, 3, 5])"
    ],
    "sample_369": [
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = 'YmplH')",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"MyPhoN\")",
        "sortVowels(s = 'HymPl')",
        "sortVowels(s = 'lYmPh')",
        "sortVowels('mYphL')",
        "sortVowels(s=\"MyPhoN\")"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3,4,5,1,2])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [3, 4, 5, 2, 1])",
        "minimumRightShifts(nums = [4, 3, 2, 1])",
        "minimumRightShifts(nums = [3,4,7,5,6,2])",
        "minimumRightShifts(nums = [2,1,3,4])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts([2, 3, 1, 2, 4, 3])",
        "minimumRightShifts(nums = [1, 3, 0])"
    ],
    "sample_448": [
        "minChanges(s = \"0100\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"0011\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"01010101\")",
        "minChanges(\"ab\")",
        "minChanges(s = \"110011\")",
        "minChanges(s = \"aaaaa\")",
        "minChanges(s = \"bbcbbb\")"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bdac\")",
        "canBeEqual(s1 = \"bcda\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"abab\", s2 = \"baab\")",
        "canBeEqual(s1 = \"abcb\", s2 = \"abca\")",
        "canBeEqual(s1 = \"11\", s2 = \"22\")",
        "canBeEqual(s1 = \"bbb\", s2 = \"aaa\")",
        "canBeEqual(s1 = \"xm\", s2 = \"xx\")",
        "canBeEqual(s1 = \"a234\", s2 = \"2431\")"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1,1,1,2,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [2,2,3,3,3,4])",
        "minLengthAfterRemovals(nums = [3,3,3,3,7])",
        "minLengthAfterRemovals(nums = [1,1,2,3,3,3,3,4])",
        "minLengthAfterRemovals(nums = [1,2,3,1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals([1,1,1,1,2,2,3,3,3,3])",
        "minLengthAfterRemovals(nums = [1,1,1,1,3,4,4,4,4])",
        "minLengthAfterRemovals(nums = [1,3,5,2,4,6,1,2,3,4,5,1])"
    ],
    "sample_361": [
        "isGood(a = [1, 2, 3, 2])",
        "isGood(a = [1, 2, 3, 3, 5])",
        "isGood(a = [3, 2, 1, 4])",
        "isGood(a = [1, 4, 2, 3, 2])",
        "isGood(a = [1, 3, 2, 1, 3])",
        "isGood([4, 2, 3, 1, 2])",
        "isGood(a = [4, 2, 3, 1, 2, 1])",
        "isGood(a = [0, 1, 0, 2, 0, 2])",
        "isGood(a = [5,1,3,4,2])",
        "isGood([5, 2, 3, 4, 2, 5])"
    ],
    "sample_419": [
        "minOperations(nums = [2,1,3], k = 3)",
        "minOperations(nums = [4,2,1,1,2,4,1], k = 4)",
        "minOperations(nums=[3,1,3,4,3], k = 6)",
        "minOperations(nums = [4,3,2,1], k = 10)",
        "minOperations(nums = [1,2,3,5,4], k = 5)",
        "minOperations(nums = [2,1,10,5], k = 1)",
        "minOperations(nums = [1,5,6,2,8], k = 4)",
        "minOperations(nums=[2,4,5,7,10], k=15)",
        "minOperations(nums=[5, 1, 6, 2, 4, 3], k=10)",
        "minOperations(nums = [5,3,6,8], k = 4)"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1,1,1,1,1])",
        "findMaximumLength([1,1,1,1,1,1])",
        "findMaximumLength(nums = [1,0,0,1,0,1])",
        "findMaximumLength([1,1,2])",
        "findMaximumLength(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])",
        "findMaximumLength(nums = [1,3,4,5])",
        "findMaximumLength(nums = [3,3,3,2,5])",
        "findMaximumLength([1, 2, 4, 8, 16, 32])",
        "findMaximumLength([1,3,1,3,3])",
        "findMaximumLength([3,1,2,5,1,4])"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1,2,3])",
        "maxSubarrays(nums = [3, 2, 3, 2, 1])",
        "maxSubarrays(nums = [1, 2, 1, 3, 2, 3, 1])",
        "maxSubarrays(nums = [1,1,2,2,2,2])",
        "maxSubarrays(nums = [1,2,3,2,4,3,2,1])",
        "maxSubarrays(nums = [5, 5, 3, 4, 6, 6])",
        "maxSubarrays(nums = [0, 3, 2, 4, 7, 8])",
        "maxSubarrays(nums = [2,1,3,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "maxSubarrays([2, 1, 1, 1])",
        "maxSubarrays(nums = [3, 2, 3, 3, 2, 3, 2, 3, 2, 1, 3, 2])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"ace\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"axc\")",
        "canMakeSubsequence(str1 = \"azc\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"zbk\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"abcdefgh\", str2 = \"acf\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"acde\")",
        "canMakeSubsequence(str1 = \"abdce\", str2 = \"ace\")",
        "canMakeSubsequence(str1 = \"baz\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abcdefghijklmnopqrstuvwxyz\", str2 = \"mnopqrstuvwxyza\")",
        "canMakeSubsequence(str1 = \"asda\", str2 = \"saas\")"
    ],
    "sample_402": [
        "maxSum(nums = [4,1,1,1,2,3,5], m = 3, k = 3)",
        "maxSum(nums = [2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "maxSum(nums = [1, 2, 2, 3, 3], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 4, k = 6)",
        "maxSum(nums = [5,2,2,2,2], m = 1, k = 3)",
        "maxSum(nums=[1, 2, 1, 2, 1], m=1, k=3)",
        "maxSum(nums = [2, 2, 2, 2, 1, 1], m = 1, k = 3)",
        "maxSum(nums = [2, 1, 2, 1, 2, 1, 2, 1], m = 2, k = 1)",
        "maxSum(nums = [1,2,2,3,2,4], m = 3, k = 4)",
        "maxSum(nums = [2,3,3,1,2,2,3,2,3], m = 3, k = 3)"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"mq\", \"px\", \"zy\"], x = \"z\")",
        "findWordsContaining(words = [\"a\", \"b\", \"c\", \"d\"], x = \"e\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"mango\"], x = \"banana\")",
        "findWordsContaining(words = [\"apple\", \"ball\", \"cat\"], x = \"ball\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"on\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"pear\", \"apricot\"], x = \"p\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"goodbye\"], x = \"lo\")",
        "findWordsContaining(words = [\"my\", \"name\", \"is\", \"atul\"], x = \"atul\")",
        "findWordsContaining(words = [\"example\", \"banana\", \"apple\"], x = \"an\")",
        "findWordsContaining(words = [\"bana\", \"nana\", \"cucu\", \"ana\"], x = \"ana\")"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = ['prev', '2', '1', 'prev', 'prev'])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\"])",
        "lastVisitedIntegers([\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = ['prev', 'prev', 'prev', '1', 'prev', '2', 'prev', 'prev'])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers([\"prev\", \"prev\", \"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"2\",\"prev\",\"1\"])",
        "lastVisitedIntegers(words=[\"prev\", \"prev\", \"next\", \"next\", \"prev\", \"next\"])"
    ],
    "sample_422": [
        "minOperations(nums = [1,1,1,1], k = 3)",
        "minOperations(nums = [1, 1, 1, 1, 1], k = 1)",
        "minOperations(nums = [1, 1, 1, 1, 1, 1], k = 5)",
        "minOperations(nums = [2, 4, 6, 8, 10], k = 3)",
        "minOperations(nums = [5, 6, 1], k = 5)",
        "minOperations(nums = [2, 4, 6, 8, 10, 12], k = 1)",
        "minOperations(nums = [4,2,1,3,3,3], k = 1)",
        "minOperations(nums = [3, 1, 12, 3, 12], k = 12)",
        "minOperations(nums = [5, 1, 1, 3, 1, 1, 1, 5], k = 3)",
        "minOperations(nums = [2, 8, 6, 4, 3, 1, 7], k = 6)"
    ],
    "sample_418": [
        "minOperations(nums = [3, 4, 5, 2], k = 5)",
        "minOperations(nums = [3, 4, 5, 2], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "minOperations(nums = [2, 4, 6, 8], k = 8)",
        "minOperations(nums = [1, 3, 2, 4], k = 4)",
        "minOperations(nums = [1, 4, 3, 2, 5, 7], k = 4)",
        "minOperations(nums=[2, 4, 1, 3, 1], k=3)",
        "minOperations(nums = [2, 1, 3, 5, 4, 6], k = 3)",
        "minOperations(nums = [1, 2, 4, 5, 3, 2, 1], k = 1)",
        "minOperations(nums = [3, 1, 5, 2, 6, 4, 1], k = 3)"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [4,2,1,3])",
        "minimumSeconds([4, 2, 1, 3])",
        "minimumSeconds([4,2,5,3])",
        "minimumSeconds(nums = [3, 2, 1, 4])",
        "minimumSeconds(nums = [3, 2, 5, 2])",
        "minimumSeconds(nums=[1,3,5,1])",
        "minimumSeconds(nums = [1,2,5,5,7,8,9])",
        "minimumSeconds(nums = [1,3,6,8,10,10,10,13])",
        "minimumSeconds([1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0,"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 10)",
        "countPairs(nums = [1, 1, 2, 2, 3, 3], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 5)",
        "countPairs(nums = [1, 1, 2, 2, 3, 3, 4, 4], target = 7)",
        "countPairs(nums = [1, 1, 1, 1, 1], target = 2)",
        "countPairs(nums = [2, 3, 3, 4], target = 6)",
        "countPairs(nums = [2, 3, 5, 8, 1, 6], target = 8)"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"ana\")",
        "findWordsContaining(words = [\"foo\", \"bar\", \"baz\"], x = \"ar\")",
        "findWordsContaining(words = [\"apple\", \"pear\", \"pineapple\"], x = \"p\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"apple\"], x = \"a\")",
        "findWordsContaining(words=[\"banana\", \"apple\", \"pineapple\"], x=\"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"pear\", \"strawberry\"], x = \"a\")",
        "findWordsContaining(words = [\"aab\", \"abc\", \"abb\"], x = \"ab\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"banana\", \"strawberry\", \"kiwi\"], x = \"ban\")",
        "findWordsContaining(words = [\"monkey\", \"monstrous\", \"monkey monstrous\"], x = \"mon\")",
        "findWordsContaining(words = [\"mango\", \"apple\", \"banana\", \"orange\", \"strawberry\", \"lemon\"], x = \"ana\")"
    ],
    "sample_372": [
        "sortVowels(s = 'Letcede')",
        "sortVowels(s = 'Letcede')",
        "sortVowels(s = 'Leotcede')",
        "sortVowels(s = 'Letced')",
        "sortVowels(\"Let's code\")",
        "sortVowels(s = 'Let us Code')",
        "sortVowels('HelloThere')",
        "sortVowels(s = 'lEOtced')",
        "sortVowels(s = 'Let us meet')",
        "sortVowels(s = 'LETcedE')"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1,1,1,1])",
        "minLengthAfterRemovals(nums = [3, 1, 3, 2, 3])",
        "minLengthAfterRemovals(nums=[1, 2, 2, 1])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,1,2,3,4,5,6])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums=[1, 2, 3, 4, 5, 6, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums=[5, 4, 4, 2, 2, 8])",
        "minLengthAfterRemovals(nums = [5, 5, 5, 5, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1,1,2,3,3,4,5,6,6,6,7,7,7,7,7])"
    ],
    "sample_452": [
        "minChanges(s = \"0101\")",
        "minChanges(s = \"babab\")",
        "minChanges(s = \"ababa\")",
        "minChanges(s = \"1110\")",
        "minChanges(s = \"101010101\")",
        "minChanges(s = \"111010\")",
        "minChanges(s = \"bbb\")",
        "minChanges(s = \"babbba\")",
        "minChanges(s = \"babbabbaa\")",
        "minChanges(s = \"zs\")"
    ],
    "sample_385": [
        "countPairs(nums = [1,5,3,4,2], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 4)",
        "countPairs(nums = [1,3,2,3,1], target = 6)",
        "countPairs(nums=[1, 3, 2, 3, 5], target=6)",
        "countPairs(nums = [5,1,2,3,4], target = 7)",
        "countPairs(nums = [3, 2, 1, 5, 4], target = 6)",
        "countPairs(nums = [1,3,3,2,2], target = 4)",
        "countPairs(nums = [1,2,3,5,4], target = 10)",
        "countPairs(nums = [2, 3, 5, 7, 10], target = 15)",
        "countPairs(nums = [4, 5, 1, 8, 3, 6], target = 10)"
    ],
    "sample_427": [
        "minOperations(nums = [1,1,1,1])",
        "minOperations(nums = [1,1,1,1,1,1])",
        "minOperations([1,2,2,2,2])",
        "minOperations(nums = [1,1,2,2,3,3,4,4])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minOperations(nums = [1,1,1,2,3,4])",
        "minOperations(nums = [1,2,2,2,3,3,4])",
        "minOperations(nums = [1, 2, 2, 3, 3, 4])",
        "minOperations([1, 2, 3, 4, 6, 6])",
        "minOperations([1, 1, 2, 2, 1, 2, 2])"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1, 2, 2, 1, 1, 3])",
        "minLengthAfterRemovals(nums = [1,1,1,2,2,3])",
        "minLengthAfterRemovals(nums = [1, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 3, 4])",
        "minLengthAfterRemovals(nums = [1,2,3,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 1, 2, 2, 1, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 1, 3, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [2, 1, 1, 3, 2, 1, 1, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1,2,1,1,2,3,4,5,1,1,2,2,2,1,2,3,4,5,3,4,3,2,3,1,2,3,4,5,4,2,3,4,5,6,5,4,3,2,1,2,3,4,5,4,3,2,1,1,1])"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 1, 1])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 1, 1, 1])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 4])",
        "minimumCoins(prices = [2, 3, 1])",
        "minimumCoins([2])",
        "minimumCoins(prices = [1,1,1,2])",
        "minimumCoins([0,2,2,1])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"mq\", \"px\", \"zy\"], x = \"q\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"ana\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"monkey\"], x = \"dog\")",
        "findWordsContaining(words = [\"abc\", \"xyz\", \"bca\"], x = \"bca\")",
        "findWordsContaining(words = [\"red\", \"blue\", \"reddit\"], x = \"red\")",
        "findWordsContaining(words=[\"apple\", \"peach\", \"cherry\"], x=\"ch\")",
        "findWordsContaining(words = [\"apple\", \"ape\", \"grape\"], x = \"pe\")",
        "findWordsContaining(words = [\"my\", \"cat\", \"rat\", \"car\"], x = \"a\")",
        "findWordsContaining(words = [\"Apple\", \"Banana\", \"Carrot\", \"Apple\", \"Dog\"], x = \"A\")",
        "findWordsContaining(words=[\"cab\", \"caf\", \"caw\"], x=\"ca\")"
    ],
    "sample_420": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "minOperations(nums = [1, 1, 1, 1, 1, 1], k = 2)",
        "minOperations(nums=[1,2,3,4,5], k=3)",
        "minOperations(nums = [2,2,2], k = 2)",
        "minOperations(nums = [1, 1, 2, 2, 2, 4], k = 3)",
        "minOperations(nums = [2, 3, 5, 2, 1], k = 4)",
        "minOperations(nums=[3, 1, 2, 2, 2], k=3)",
        "minOperations(nums = [1, 2, 1, 1, 1, 2, 3, 1], k = 2)",
        "minOperations(nums = [10000, 1, 5, 6, 1000, 100000], k = 100000)"
    ],
    "sample_362": [
        "isGood(nums = [2,1,3])",
        "isGood([2,1,3,4])",
        "isGood([1, 2, 4, 3])",
        "isGood(nums = [1,2,3,5])",
        "isGood(nums = [3,1,2,4])",
        "isGood([5,4,3,2,1])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 8])",
        "isGood(nums = [2,3,5,1])",
        "isGood([2, 4, 3, 1, 5, 6])",
        "isGood(nums=[1,2,3,4,5,3,2])"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [2, 3, 5], target = 8)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [10, 1, 2, 7, 6, 1, 5], target = 8)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 5)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3, 4], target=5)",
        "lengthOfLongestSubsequence(nums = [1,3,3,5], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,3,2,5,1,2,4], target = 3)",
        "lengthOfLongestSubsequence(nums=[5, 10, 20, 50, 100, 1000], target=1001)",
        "lengthOfLongestSubsequence(nums = [2, 5, 1, 4, 3, 3, 10, 5], target = 15)"
    ],
    "sample_365": [
        "isGood(nums = [1,2,3,4,4])",
        "isGood([2,1,3])",
        "isGood([1, 2, 3, 4])",
        "isGood(nums = [2,1,4,3])",
        "isGood(nums = [2,2,3])",
        "isGood([6])",
        "isGood(nums = [1,1,1,2,1])",
        "isGood(nums = [2,4,1])",
        "isGood(nums = [1, 2, 4, 3, 6, 5])",
        "isGood(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 9])"
    ],
    "sample_434": [
        "maxSubarrays(nums = [0, 0, 0])",
        "maxSubarrays(nums = [3, 2, 1, 4, 5])",
        "maxSubarrays(nums = [2, 1, 3, 2, 1])",
        "maxSubarrays(nums = [1, 2, 3, 0, 0, 0])",
        "maxSubarrays(nums = [2, 2, 1, 2, 1])",
        "maxSubarrays(nums = [5, 1, 5, 1, 1])",
        "maxSubarrays(nums = [2, 3, 0, 0, 5])",
        "maxSubarrays(nums = [6, 3, 1, 0, 2])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1,",
        "maxSubarrays([2, 4, 2, 3, 3, 4, 7])"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 3)",
        "lengthOfLongestSubsequence(nums=[1,2,3], target=2)",
        "lengthOfLongestSubsequence(nums = [1,3,5,7,9], target = 10)",
        "lengthOfLongestSubsequence(nums = [2, 3, 1, 5], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 500)",
        "lengthOfLongestSubsequence(nums = [1, 4, 5, 6], target = 9)",
        "lengthOfLongestSubsequence(nums = [5,7,10], target = 2)",
        "lengthOfLongestSubsequence(nums=[10,20,20], target=10)",
        "lengthOfLongestSubsequence(nums = [5,10,6,12,4,2], target = 2)"
    ],
    "sample_450": [
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"10101\")",
        "minChanges(s = \"aaaabbbbb\")",
        "minChanges(s=\"aaabbb\")",
        "minChanges(s = \"aabaaa\")",
        "minChanges(\"aaabbbaa\")",
        "minChanges(s = \"AAAABBB\")",
        "minChanges(\"AABBC\")",
        "minChanges(s=\"10010111\")",
        "minChanges(s = \"ABAC\")"
    ],
    "sample_463": [
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n=5, limit=3)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n=10, limit=3)",
        "distributeCandies(n = 8, limit = 4)",
        "distributeCandies(n = 7, limit = 5)",
        "distributeCandies(n=7, limit=2)"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 1, 2, 3])",
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [1, 2, 2, 1, 1])",
        "sumCounts(nums = [1,2,1,3,3])",
        "sumCounts([1, 2, 1, 3, 2, 1])",
        "sumCounts([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "sumCounts(nums = [1, 1, 3, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    ],
    "sample_449": [
        "minChanges(s = \"1001\")",
        "minChanges(s = \"abababab\")",
        "minChanges(s = \"aba\")",
        "minChanges(\"aa\")",
        "minChanges(s = \"101010101010\")",
        "minChanges(s = \"ababababababababab\")",
        "minChanges(s = \"010011\")",
        "minChanges(s = \"abbabbaa\")",
        "minChanges(\"bbc\")",
        "minChanges(s = \"yyb\")"
    ],
    "sample_425": [
        "minOperations(nums = [1, 1, 2, 2, 3, 3])",
        "minOperations(nums = [1, 2, 3, 4, 5])",
        "minOperations(nums = [1, 1, 1, 1, 1])",
        "minOperations(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "minOperations(nums = [1,1,1])",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minOperations([1,1,2,3,5])",
        "minOperations(nums = [2,1,2,2,2])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 1, 2, 3])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"zbz\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"azzz\")",
        "canMakeSubsequence(str1 = \"zzz\", str2 = \"zzzzzz\")",
        "canMakeSubsequence(str1 = \"azba\", str2 = \"abz\")",
        "canMakeSubsequence(str1 = \"zbzaz\", str2 = \"a\")",
        "canMakeSubsequence(str1 = \"zacabz\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"bbbbbbb\", str2 = \"a\")",
        "canMakeSubsequence(str1 = \"zv\", str2 = \"zzzv\")",
        "canMakeSubsequence(str1 = \"zadp\", str2 = \"adp\")",
        "canMakeSubsequence(str1 = \"zkc\", str2 = \"zkce\")"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1,2,3])",
        "minimumSeconds(nums = [1,2,3])",
        "minimumSeconds(nums = [1,1,1])",
        "minimumSeconds([1,2,3,4,5])",
        "minimumSeconds(nums = [1,2,4,5])",
        "minimumSeconds(nums = [1,2,3,1,3])",
        "minimumSeconds(nums = [1, 2, 1, 2, 1, 3, 3])",
        "minimumSeconds([1,2,2,3,3,3])",
        "minimumSeconds([1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds(nums = [5,6,4,2,6,6,5,7])"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [3, 34, 4, 12, 5, 2], target = 9)",
        "lengthOfLongestSubsequence(nums = [2,3,5], target = 8)",
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 4)",
        "lengthOfLongestSubsequence(nums = [5, 10, 15, 20, 25], target = 50)",
        "lengthOfLongestSubsequence(nums = [2, 1, 3, 4, 5], target = 6)",
        "lengthOfLongestSubsequence(nums = [5, 3, 2], target = 9)",
        "lengthOfLongestSubsequence(nums = [4,2,3,5,1], target = 10)",
        "lengthOfLongestSubsequence(nums = [4, 1, 2, 3, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [2,3,5,6,7,8,10], target = 10)",
        "lengthOfLongestSubsequence(nums = [5, 2, 4, 2], target = 10)"
    ],
    "sample_370": [
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = \"Letcede\")",
        "sortVowels(s = 'Leotcede')",
        "sortVowels(\"Leotcede\")",
        "sortVowels(\"lEOcde\")",
        "sortVowels(s = \"LeoTcedE\")",
        "sortVowels(\"Let us sort vowels in this sentence\")"
    ],
    "sample_421": [
        "minOperations(nums = [1, 2, 3], k = 2)",
        "minOperations(nums = [3,1,4,2,5], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 9)",
        "minOperations(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=10)",
        "minOperations(nums = [1,2,4,5,6], k = 6)",
        "minOperations(nums = [1, 2, 1, 2, 3, 3], k = 3)",
        "minOperations(nums = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4",
        "minOperations(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], k = 4)",
        "minOperations(nums = [6, 4, 10, 3, 1, 2, 5], k = 12)",
        "minOperations(nums = [3, 2, 5, 8, 10, 9, 11], k = 5)"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1,2,3,4])",
        "maxSubarrays(nums = [1, 2, 4, 8])",
        "maxSubarrays([1,1,1,1])",
        "maxSubarrays(nums = [1,2,4,2,1])",
        "maxSubarrays(nums = [2, 4, 8, 0, 12])",
        "maxSubarrays(nums = [2, 0, 2, 1, 0, 2, 0])",
        "maxSubarrays(nums = [12, 34, 45, 67, 98])",
        "maxSubarrays(nums = [0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A])",
        "maxSubarrays([1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[0,0],[0,0],[1,1],[1,1],[1,1],[1,1]], k = 2)",
        "countPairs(coordinates = [[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1],[10,1],[11,1],[12,1],[13,1],[14,1],[15,1],[16,1],[17,1],[18,1],[19,1],[20,1]], k = 3)",
        "countPairs(coordinates = [[1,1],[2,2],[2,1],[1,1]], k = 2)",
        "countPairs(coordinates = [[1,2],[3,4],[1,2],[5,6],[7,8],[1,2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 0], [2, 1], [2, 0], [2, 2], [3, 2]], k = 1)",
        "countPairs(coordinates = [[2, 1], [2, 2], [1, 1], [2, 2], [2, 2], [1, 2]], k = 1)",
        "countPairs(coordinates = [[1,2],[2,1],[2,2],[2,4],[3,5],[3,2]], k = 4)",
        "countPairs(coordinates = [[0,0],[1,0],[0,1],[1,1],[2,1],[2,2],[2,1],[0,1],[0,2]], k = 3)",
        "countPairs(coordinates = [[1,3],[3,1],[2,2],[2,3],[3,2],[4,2],[2,4],[3,3]], k = 1)",
        "countPairs(coordinates = [[2,1],[1,2],[4,1],[2,1],[1,2],[4,1],[1,1],[3,3],[3,2],[1,4],[3,4]], k = 2)"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1], target = 3)",
        "lengthOfLongestSubsequence(nums = [3, 4, 5, 8], target = 11)",
        "lengthOfLongestSubsequence(nums = [2, 4, 5, 3, 3, 9, 2, 2, 2], target = 12)",
        "lengthOfLongestSubsequence(nums = [4, 2, 3, 1], target = 7)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=20)",
        "lengthOfLongestSubsequence(nums = [5, 5, 10, 10, 20], target = 30)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8], target = 22)"
    ],
    "sample_445": [
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 3, 1, 4])",
        "sumCounts(nums = [1,2,1,1,1,2])",
        "sumCounts([0,1,1,2])",
        "sumCounts([1, 3, 4, 3, 1])",
        "sumCounts(nums = [2,1,3,3,3,2,2])",
        "sumCounts(nums = [1,2,3,1,1,2,2,1])",
        "sumCounts(nums = [2, 2, 1, 2, 3])",
        "sumCounts(nums = [3,1,1,3,2])"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"0110\")",
        "minimumBeautifulSubstrings(\"0110110\")",
        "minimumBeautifulSubstrings(s = \"0110110\")",
        "minimumBeautifulSubstrings
        "minimumBeautifulSubstrings(\"0110111001\")",
        "minimumBeautifulSubstrings(s=\"0110101\")",
        "minimumBeautifulSubstrings
        "minimumBeautifulSubstrings(s = \"0000000111111110000000000000001111111100000000000000000000000000000000011111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumBeautifulSubstrings
        "minimumBeautifulSubstrings(s = \"1111000001011010001111111010001111001111011100110001010000111101011100111111110111101101110111101011101001010100011101011001101100011010101010101100011001011100110110011101001100011110111010110111110000001101110111011001111001011010101101101010000011111100001111110101000011000100011111010001101101000010111100101101000100100011010101000001100100101101100001101101101000100001010010110010011111010011001110110111000111001100101110111101110010100000011111000011000100001011101010110101110110101110100000001"
    ],
    "sample_432": [
        "maxSubarrays(nums = [5,10,20,6,3,8])",
        "maxSubarrays([1, 2, 3])",
        "maxSubarrays(nums = [2, 1, 2])",
        "maxSubarrays([1,1,1,1,1])",
        "maxSubarrays([0,1,2,3,4])",
        "maxSubarrays(nums = [1, 2, 3, 0, 1])",
        "maxSubarrays(nums = [0,0,0,1,1,1])",
        "maxSubarrays([2, 4, 2])",
        "maxSubarrays(nums = [2,3,1,5,6,0,0,0])",
        "maxSubarrays(nums = [32, 6, 5, 8])"
    ],
    "sample_401": [
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 5, k = 4)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 2, k = 3)",
        "maxSum(nums=[1, 2, 3, 4, 5], m=2, k=3)",
        "maxSum(nums = [1,1,1,7,7,7,7,7], m = 1, k = 3)",
        "maxSum(nums = [5,2,2,2,1], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 1, 2, 3, 4, 3], m = 2, k = 3)",
        "maxSum(nums = [2,1,4,3,5], m = 3, k = 2)",
        "maxSum(nums = [4, 2, 1, 4], m = 2, k = 2)",
        "maxSum(nums=[7,7,10,12,14,16,18,11,20,14], m=3, k=5)",
        "maxSum(nums = [202,522,644,222,153], m = 1, k = 4)"
    ],
    "sample_400": [
        "maxSum(A = [1, 1, 1, 1, 1], m = 3, k = 2)",
        "maxSum(A = [1, 1, 1, 1, 1, 1, 1], m = 3, k = 2)",
        "maxSum(A = [1,2,3,4,5,6,7,8,9], m = 3, k = 4)",
        "maxSum(A = [1, 2, 3, 4, 1], m = 3, k = 3)",
        "maxSum(A = [1, 2, 1, 0], m = 3, k = 3)",
        "maxSum(A=[1, 2, 3, 1, 2], m=2, k=2)",
        "maxSum(A = [1, 2, 1, 2, 3, 1, 2, 1], m = 3, k = 3)",
        "maxSum(A = [2,3,4,5,6,7], m = 3, k = 2)",
        "maxSum(A = [0, 0, 1, 2, 3], m = 1, k = 2)",
        "maxSum(A=[10, 10, 10], m=1, k=2)"
    ],
    "sample_363": [
        "isGood(nums = [1, 3, 2, 2])",
        "isGood(nums = [2, 1, 3, 3])",
        "isGood(nums = [4,2,1,3])",
        "isGood(nums = [1, 2, 3, 4, 4, 5])",
        "isGood(nums = [3,1,4,2,1,2])",
        "isGood([1, 2, 3, 4, 4])",
        "isGood(nums = [1, 2, 3, 2, 3, 2])",
        "isGood(nums = [2,1,2,1,3,1])",
        "isGood(nums = [3, 2, 5, 1, 1, 4])",
        "isGood(nums = [1, 3, 2, 2, 5, 2, 4, 6])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [2, 1, 3, 5, 4])",
        "minimumSeconds(nums = [1,2,3,4])",
        "minimumSeconds(nums = [4,2,1,2])",
        "minimumSeconds(nums = [1, 3, 0, 2, 4])",
        "minimumSeconds([0, 1, 2, 0])",
        "minimumSeconds(nums = [0,6,2,4,7,1,3,5])",
        "minimumSeconds(nums = [1, 5, 0, 3, 5, 6, 2])",
        "minimumSeconds(nums = [10, 2, 10, 10])",
        "minimumSeconds(nums = [3,3,2,3,1,2,1,1,2,3,1])",
        "minimumSeconds(nums = [0, 6, 8, 12, 24, 26, 32, 40, 48, 56, 64])"
    ],
    "sample_376": [
        "minimumSeconds(nums = [0, 2, 3])",
        "minimumSeconds(nums = [0,0,0,0,0,0])",
        "minimumSeconds(nums = [1, 4, 2, 3])",
        "minimumSeconds(nums=[1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])",
        "minimumSeconds(nums = [1,2,3,1,2,3,2,1,2,3])",
        "minimumSeconds(nums = [0, 4, 2, 1, 5])",
        "minimumSeconds(nums = [1, 3, 6, 2, 2, 0, 3])",
        "minimumSeconds(nums = [2,5,2,3,4,6,7,8,9])",
        "minimumSeconds(nums = [1,3,1,1,2,4,1,1,1,2,1,1,1,3,3,4,4,1,1,1,3,1,1,3,4,2,3,1,1,2,1,2,1,1,2,1,2,3,1,1,1,3,4,1,1,3,1,1,1,3,1,3,1,4,1,1,2,1,1,4,4,1,3,2,3,3,1,1,1,1,2,1,1,4,2,1,1,1,1,1,1,1,1,1,1,2,1,3,4,1,1,3,2,2,1,1,2,1,4,1,2,1,3,1,1,1,2,1,3,1,2,1,3,4,3,1,1,1,1,1,1,1,3,1,1,3,1,1,1,1,4,1,1,3,2,1,1,1,1,2,1,1,1,3,1,2,1,1,1,1,3,2,1,2,2,1,1,1,1,4,1,1,4,1,1,1,1,3,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1,1,2,3,5])",
        "minLengthAfterRemovals(nums = [1,1,2,3,5])",
        "minLengthAfterRemovals(nums = [1,1,1,1])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums=[1,2,3,4,5,6])",
        "minLengthAfterRemovals([1,2,3])",
        "minLengthAfterRemovals(nums = [1,2,2,2,2,3,3])",
        "minLengthAfterRemovals(nums=[3, 1, 3, 4, 3])",
        "minLengthAfterRemovals(nums = [1,2,2,1,1,2,2,3])",
        "minLengthAfterRemovals(nums=[1,3,5,1,3,5,3,5])"
    ],
    "sample_399": [
        "maxSum(nums = [1,1,1,7,8,9], m = 3, k = 3)",
        "maxSum(nums = [1,2,1,2,3,3], m = 2, k = 3)",
        "maxSum(nums = [1,0,1,0,1], m = 2, k = 1)",
        "maxSum(nums = [1,2,3], m = 3, k = 1)",
        "maxSum(nums = [1,2,3,1,2,3,1,2,3], m = 3, k = 2)",
        "maxSum(nums = [1, 1, 1, 1, 1], m = 2, k = 1)",
        "maxSum(nums=[1,2,1,4,3], m=3, k=3)",
        "maxSum(nums = [0,1,1,2], m = 2, k = 2)",
        "maxSum(nums=[10,2,4,2,5,5,5], m=3, k=1)",
        "maxSum(nums = [4,5,3,2,1,3,4,5,1,2,3,4,5], m = 3, k = 3)"
    ],
    "sample_397": [
        "maxSum(nums = [1,2,3,4], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4], m = 3, k = 3)",
        "maxSum(nums = [1,2,3], m = 2, k = 2)",
        "maxSum(nums = [2,1,3,3,2], m = 2, k = 3)",
        "maxSum(nums = [2, 2, 2, 1, 2, 2, 1, 2, 2, 2], m = 2, k = 3)",
        "maxSum(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m=3, k=3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 4)",
        "maxSum(nums = [3,1,2,3,3], m = 2, k = 3)",
        "maxSum(nums = [3, 2, 2, 4], m = 2, k = 2)",
        "maxSum(nums = [2,1,1,1,3,1], m = 2, k = 2)"
    ],
    "sample_364": [
        "isGood(nums = [4,2,3,1])",
        "isGood(nums = [3, 4, 5, 1, 2])",
        "isGood(nums = [1,5,4,3,2])",
        "isGood(nums = [4,2,5,3,1])",
        "isGood([1, 2, 3, 4, 5, 6])",
        "isGood(nums = [3, 2, 1, 5, 4, 6])",
        "isGood([1,2,3,5,4,6,7])",
        "isGood(nums=[0, 1, 2, 3, 4, 5, 6, 7])",
        "isGood(nums = [1,2,3,3,2,3,1,2])",
        "isGood(nums=[1,0,2,3,6,5,4])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1,2,3,1,2,3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6])",
        "minLengthAfterRemovals(nums = [1,2,3,4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [7,3,3,7])",
        "minLengthAfterRemovals(nums = [5,2,3,4,5])",
        "minLengthAfterRemovals(nums = [5,3,2,2,1])",
        "minLengthAfterRemovals(nums = [2, 1, 1, 1, 1, 1, 1, 2])",
        "minLengthAfterRemovals([1,2,3,1,2,3,4,5,6,7,8,9])"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"carrot\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"ban\")",
        "findWordsContaining(words = [\"banana\", \"mango\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"pie\", \"banana\"], x = \"p\")",
        "findWordsContaining(words = [\"hell\", \"hello\"], x = \"ll\")",
        "findWordsContaining(words=[\"banana\", \"ban\", \"apple\"], x=\"ban\")",
        "findWordsContaining(words = [\"banana\", \"grape\", \"banana\"], x = \"ba\")",
        "findWordsContaining(words = [\"water\", \"book\"], x = \"w\")",
        "findWordsContaining(words = [\"jason\", \"jane\"], x = \"son\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1,2,5])",
        "minimumCoins(prices = [1, 2, 1, 1])",
        "minimumCoins(prices = [1, 1, 1, 2])",
        "minimumCoins(prices = [1, 2, 3, 2, 1])",
        "minimumCoins(prices = [2, 1, 2, 2])",
        "minimumCoins(prices = [1, 4, 3])",
        "minimumCoins(prices = [1, 2, 1, 3, 1])",
        "minimumCoins(prices = [2,1,2,3,2,2,10])",
        "minimumCoins(prices = [1,2,2,2,5])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"101101101\")",
        "minimumBeautifulSubstrings(s = \"101101101\")",
        "minimumBeautifulSubstrings(s = \"101101101\")",
        "minimumBeautifulSubstrings(s = \"101101\")",
        "minimumBeautifulSubstrings(s = \"101\")",
        "minimumBeautifulSubstrings(s = \"00101100\")",
        "minimumBeautifulSubstrings(s = \"0010\")",
        "minimumBeautifulSubstrings(s = \"101101101101\")",
        "minimumBeautifulSubstrings(\"11001111\")",
        "minimumBeautifulSubstrings(s = \"0111111100000000\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abcd\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bdca\")",
        "canBeEqual(s1 = \"badc\", s2 = \"acdb\")",
        "canBeEqual(s1 = \"wq\", s2 = \"qw\")",
        "canBeEqual(s1 = \"xbaz\", s2 = \"xbac\")",
        "canBeEqual(s1 = \"hefg\", s2 = \"hfeg\")",
        "canBeEqual(s1=\"gd\", s2=\"db\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"cxzba\")"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"adc\")",
        "canMakeSubsequence(str1 = \"abcdef\", str2 = \"ace\")",
        "canMakeSubsequence(str1 = \"abcdefg\", str2 = \"ace\")",
        "canMakeSubsequence(str1 = \"zabc\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"zbbc\")",
        "canMakeSubsequence(str1 = \"abcdef\", str2 = \"acfg\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"axxx\")",
        "canMakeSubsequence(str1 = \"qzs\", str2 = \"zqu\")"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,2,1])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 3, 3, 3, 4])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3,4,4])",
        "minLengthAfterRemovals(nums = [1,2,2,3,1,4,2])",
        "minLengthAfterRemovals(nums = [1,2,3,3,3,3,4])",
        "minLengthAfterRemovals(nums = [1,1,1,1,2,2,2,2,3,3,3,3])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [4,2,1,4,3,3,2])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"aabb\", s2 = \"abab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cbda\")",
        "canBeEqual(s1 = \"aba\", s2 = \"bba\")",
        "canBeEqual(s1 = \"adc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"rkqodlw\", s2 = \"world\")",
        "canBeEqual(s1 = \"xyzc\", s2 = \"xyzd\")",
        "canBeEqual(s1 = \"azzz\", s2 = \"azzz\")",
        "canBeEqual(s1 = \"qwz\", s2 = \"wqz\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"42\", s2 = \"24\")"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 10)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 6)",
        "countPairs(nums = [1,2,3,4,5,6,7,8,9], target = 10)",
        "countPairs(nums = [5, 6, 7, 8], target = 10)",
        "countPairs(nums = [2,3,3,4,6,9], target = 9)",
        "countPairs(nums = [1, 2, 3, 5, 6, 7, 8, 9], target = 10)",
        "countPairs(nums = [5, 6, 2, 3], target = 7)",
        "countPairs(nums = [1, 3, 2, 3, 5, 6], target = 9)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"abc\", s2 = \"ahbgdc\")",
        "canMakeSubsequence(s1 = \"abcdef\", s2 = \"ace\")",
        "canMakeSubsequence(s1 = \"azb\", s2 = \"bz\")",
        "canMakeSubsequence(s1 = \"aaz\", s2 = \"azz\")",
        "canMakeSubsequence(s1 = \"banana\", s2 = \"aba\")",
        "canMakeSubsequence(s1 = \"baz\", s2 = \"zbaz\")",
        "canMakeSubsequence(s1=\"zbz\", s2=\"zzabz\")",
        "canMakeSubsequence(s1 = \"abcdefg\", s2 = \"azbdfg\")",
        "canMakeSubsequence(s1 = \"zabc\", s2 = \"zb\")",
        "canMakeSubsequence(s1 = \"azb\", s2 = \"zbx\")"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"next\", \"next\", \"prev\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"next\",\"prev\",\"prev\"])",
        "lastVisitedIntegers(words = ['1', 'prev', 'prev', 'prev', '2', 'prev', '1'])",
        "lastVisitedIntegers(words = [\"1\", \"3\", \"prev\", \"2\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"3\", \"prev\", \"5\", \"prev\", \"prev\", \"10\"])",
        "lastVisitedIntegers([\"1\", \"prev\", \"1\", \"prev\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"next\",\"next\",\"prev\",\"next\",\"prev\",\"prev\",\"prev\",\"next\",\"prev\",\"prev\",\"prev\",\"next\",\"next\",\"next\",\"prev\",\"next\"])",
        "lastVisitedIntegers(words = [\"100\", \"55\", \"32\", \"prev\", \"prev\"])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[0,0],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[8,0],[9,0]], k = 1)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0]], k = 1)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]], k = 2)",
        "countPairs(coordinates=[[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]], k=2)",
        "countPairs(coordinates = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10]], k = 1)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [2, 1], [1, 1]], k = 1)",
        "countPairs(coordinates = [[0,0], [0,0], [0,0], [1,1], [1,1], [1,1]], k = 1)",
        "countPairs(coordinates = [[1,1], [2,2], [2,1], [3,4]], k = 1)",
        "countPairs(coordinates = [[1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7]], k = 2)",
        "countPairs(coordinates = [[3,4],[3,5],[2,4],[2,5],[1,3],[1,4],[1,5],[0,2],[0,3],[0,4],[0,5]], k = 1)"
    ],
    "sample_451": [
        "minChanges(s = \"0011\")",
        "minChanges(s = \"010101\")",
        "minChanges(s = \"1011\")",
        "minChanges(s = \"1101\")",
        "minChanges(\"aabbcc\")",
        "minChanges(s = \"abaab\")",
        "minChanges(s = \"11101\")",
        "minChanges(s = \"bababababababa\")",
        "minChanges(s = \"00101110\")",
        "minChanges(s = \"100111011\")"
    ],
    "sample_461": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 8, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n=12, limit=2)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"acbd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acdb\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"abced\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"deabc\")",
        "canBeEqual(s1 = \"banana\", s2 = \"ananab\")",
        "canBeEqual(s1 = \"atc\", s2 = \"cat\")",
        "canBeEqual(s1 = \"baas\", s2 = \"sbas\")",
        "canBeEqual(s1 = \"bd\", s2 = \"adb\")"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n=2, limit=2)",
        "distributeCandies(13, 4)"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 95)",
        "accountBalanceAfterPurchase(p = 95)",
        "accountBalanceAfterPurchase(p = 99)",
        "accountBalanceAfterPurchase(p = 105)",
        "accountBalanceAfterPurchase(100)",
        "accountBalanceAfterPurchase(90)",
        "accountBalanceAfterPurchase(p = 195)",
        "accountBalanceAfterPurchase(99)",
        "accountBalanceAfterPurchase(p = 104)",
        "accountBalanceAfterPurchase(p = 51)"
    ],
    "sample_444": [
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1, 2, 1, 2, 3])",
        "sumCounts(nums = [1,2,3,4])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [3,3,3])",
        "sumCounts(nums = [0,0,0,0])",
        "sumCounts(nums = [1,1,2,3,2,1])",
        "sumCounts(nums=[1,2,3,4,1,2])",
        "sumCounts([1, 2, 1, 3, 2, 2, 3])",
        "sumCounts([1, 2, 3, 1, 2, 1, 1, 3])"
    ],
    "sample_378": [
        "minimumSeconds([1,2,3,4])",
        "minimumSeconds([1, 5, 3, 4, 2])",
        "minimumSeconds(A = [4,1,5,3,2])",
        "minimumSeconds([3, 4, 1, 5, 2])",
        "minimumSeconds([1, 0, 0, 0, 2, 0, 0, 0])",
        "minimumSeconds(A = [2,2,3,1,3])",
        "minimumSeconds([2,1,4,5])",
        "minimumSeconds(A=[5,2,4,3,1])",
        "minimumSeconds([1,4,3,5,2])",
        "minimumSeconds(A = [1,2,5,8,20])"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"az\", str2 = \"ba\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"def\")",
        "canMakeSubsequence(str1 = \"zczc\", str2 = \"czc\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"azaa\")",
        "canMakeSubsequence(str1 = \"abcdefghijklmnopqrstuvwxyz\", str2 = \"bcdf\")",
        "canMakeSubsequence(str1 = \"apple\", str2 = \"appppp\")",
        "canMakeSubsequence(str1=\"abcdef\", str2=\"a\")",
        "canMakeSubsequence(str1 = \"xb\", str2 = \"ybz\")",
        "canMakeSubsequence(str1 = \"tto\", str2 = \"to\")",
        "canMakeSubsequence(str1=\"zzzab\", str2=\"zzyaz\")"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [3, 4, 5, 5, 3])",
        "minimumRightShifts(nums = [1,2,3,4,5,6])",
        "minimumRightShifts(nums = [3,4,7,5,6,2])",
        "minimumRightShifts(nums = [3, 4, 7, 5, 1, 2])",
        "minimumRightShifts(nums = [1,2,3,4,5,6,7,8,9])",
        "minimumRightShifts(nums = [3, 2, 4, 1])",
        "minimumRightShifts(nums = [3,4,7,2,5])",
        "minimumRightShifts(nums = [4,2,3])"
    ],
    "sample_441": [
        "countSubMultisets(nums = [3,4,2], l = 6, r = 12)",
        "countSubMultisets(nums = [3,4,5], l = 1, r = 10)",
        "countSubMultisets(nums = [1,2,3], l = 1, r = 5)",
        "countSubMultisets(nums = [3,3,3], l = 1, r = 3)",
        "countSubMultisets(nums = [1,2,3], l = 4, r = 5)",
        "countSubMultisets(nums = [1, 2, 3, 4, 5], l = 0, r = 5)",
        "countSubMultisets(nums=[1,2,3,4,5,6,7,8,9,10], l=0, r=20)",
        "countSubMultisets(nums = [1,3,4,5,7,8], l = 7, r = 8)",
        "countSubMultisets(nums = [0, 1, 2, 0, 3, 4, 5], l = 4, r = 5)",
        "countSubMultisets(nums = [4,7,5,6,8,9,9,6,8], l = 1, r = 4)"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [3, 2, 4, 1])",
        "minimumCoins(prices = [1, 2, 3, 10])",
        "minimumCoins([0, 1, 2, 3])",
        "minimumCoins([1, 3, 2, 1])",
        "minimumCoins([2, 2, 1, 1])",
        "minimumCoins(prices=[2, 3, 5])",
        "minimumCoins(prices = [2, 5, 7, 9, 3])",
        "minimumCoins(prices = [4, 1, 3, 2, 1, 1])",
        "minimumCoins(prices = [1, 5, 7, 2, 1, 1, 2])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 4])",
        "minimumCoins([2, 5, 6])",
        "minimumCoins(prices = [3, 5, 2])",
        "minimumCoins(prices = [3, 4, 5, 6])",
        "minimumCoins([1, 2, 1, 2])",
        "minimumCoins(prices = [1, 4, 6, 1])",
        "minimumCoins(prices = [4, 4, 4, 4])",
        "minimumCoins([1, 2, 3, 4, 5])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers([\"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers([\"prev\", \"prev\", \"prev\", \"1\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers([\"next\", \"next\", \"prev\", \"next\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"2\", \"prev\", \"1\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"3\", \"prev\", \"prev\", \"7\", \"prev\", \"9\", \"prev\", \"prev\", \"4\", \"prev\", \"prev\"])",
        "lastVisitedIntegers([\"next\",\"prev\",\"next\",\"next\",\"next\",\"next\",\"1\",\"next\",\"prev\",\"next\",\"prev\"])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 2, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1,1,1,1,1])",
        "minOperations([1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "minOperations(nums = [1, 1, 1, 1, 1])",
        "minOperations([1,1,2,2,2,2])",
        "minOperations([1, 2, 3, 4, 4, 4, 5])",
        "minOperations(nums = [1,2,2,2,2,2,1,1,3,3,1])",
        "minOperations([0, 1, 2, 1, 0, 1, 2])"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"push\", \"push\", \"pop\", \"push\"])",
        "lastVisitedIntegers(words = [\"push\", \"push\", \"pop\", \"push\", \"push\"])",
        "lastVisitedIntegers(words = [\"push\", \"push\", \"pop\", \"push\", \"push\"])",
        "lastVisitedIntegers(words = [\"push\", \"push\", \"push\", \"pop\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"push\", \"push\", \"pop\", \"pop\", \"pop\"])",
        "lastVisitedIntegers([\"p\", \"push\", \"p\", \"pop\", \"p\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"push\", \"3\", \"push\", \"4\", \"pop\", \"push\", \"5\"])",
        "lastVisitedIntegers(words=[\"p\", \"push\", \"pop\", \"push\"])",
        "lastVisitedIntegers([\"push\", \"1\", \"pop\", \"push\", \"2\", \"push\", \"push\", \"pop\"])",
        "lastVisitedIntegers(words=[\"push\",\"1\", \"push\", \"2\", \"pop\", \"push\", \"3\"])"
    ],
    "sample_379": [
        "minimumSeconds(nums = [3,2,1,2,1,7])",
        "minimumSeconds(nums = [1,2,3])",
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1, 2, 3, 3])",
        "minimumSeconds(nums = [1,5,9])",
        "minimumSeconds(nums = [1,2,3,1,5,1])",
        "minimumSeconds(nums = [0, 1, 2, 5, 0])",
        "minimumSeconds([1, 2, 1, 3, 1, 4])",
        "minimumSeconds(nums = [1,4,4,4,4,4,7,8,9,10,11])",
        "minimumSeconds(nums = [1, 3, 2, 0, 5, 5, 6, 7, 4, 4])"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"a\", \"b\", \"c\"], x = \"b\")",
        "findWordsContaining(words = [\"apple\", \"apple\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"grape\"], x = \"gr\")",
        "findWordsContaining(words = [\"hello\", \"hi\", \"hiya\"], x = \"hi\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"banana apple\", \"carrot\"], x = \"banana\")",
        "findWordsContaining(words = [\"bana\", \"nana\", \"mana\", \"mama\"], x = \"na\")",
        "findWordsContaining(words = [\"peppermint\", \"pepperoni\", \"peppers\"], x = \"pepper\")",
        "findWordsContaining(words = [\"hello\", \"man\", \"happy\"], x = \"he\")"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 2, 3])",
        "maxSubarrays(nums = [0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 0, 0, 1, 0, 0])",
        "maxSubarrays(nums = [0, 1, 1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 3, 5, 7, 9, 11, 13, 15])",
        "maxSubarrays(nums = [1, 3, 0, 3, 4])",
        "maxSubarrays(nums = [1, 3, 2, 3, 1])",
        "maxSubarrays(nums = [5, 0, 5, 1, 3, 4, 2])",
        "maxSubarrays([1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1])",
        "maxSubarrays(nums=[1, 2, 4, 3])"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"prev\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"2\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"next\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"2\", \"1\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers([\"prev\", \"prev\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"3\", \"2\", \"prev\", \"prev\", \"prev\", \"prev\", \"3\"])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 10)",
        "countPairs(nums = [1, 3, 4, 5, 2], target = 6)",
        "countPairs(nums=[3, 5, 10, 1], target=8)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"aa\", s2 = \"bb\")",
        "canBeEqual(s1 = \"aa\", s2 = \"bb\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cab\")",
        "canBeEqual(s1 = \"a\", s2 = \"b\")",
        "canBeEqual(s1 = \"banana\", s2 = \"banana\")",
        "canBeEqual(s1 = \"aaaa\", s2 = \"bccb\")",
        "canBeEqual(s1 = \"abab\", s2 = \"abab\")",
        "canBeEqual(s1 = \"abb\", s2 = \"abb\")",
        "canBeEqual(s1 = \"bba\", s2 = \"abb\")",
        "canBeEqual(s1 = \"zzxxz\", s2 = \"zzxzz\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"1\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers([\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers([\"2\", \"prev\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"1\",\"2\",\"prev\",\"prev\",\"prev\",\"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"3\", \"prev\", \"prev\", \"prev\", \"2\", \"prev\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"push\", \"1\", \"push\", \"prev\", \"pop\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"next\",\"prev\",\"next\",\"prev\",\"prev\",\"next\",\"next\",\"prev\",\"next\",\"next\",\"prev\",\"next\",\"prev\",\"prev\",\"next\",\"prev\",\"next\",\"next\",\"next\",\"next\",\"prev\",\"next\",\"prev\",\"prev\",\"prev\",\"next\",\"prev\",\"prev\",\"prev\",\"next\",\"prev\",\"prev\",\"prev\",\"prev\",\"next\",\"prev\",\"next\",\"next\",\"prev\",\"next\",\"next\",\"next\",\"next\",\"next\",\"prev\",\"next\",\"prev\",\"next\",\"prev\",\"next\",\"prev\",\"prev\",\"next\",\"next\",\"next\",\"prev\",\"prev\",\"next\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"next\",\"prev\",\"prev\",\"prev\",\"prev\",\"next\",\"prev\",\"prev\",\"prev\",\"prev\",\"next\",\"prev\",\"prev\",\"prev\",\"next\",\"next\",\"next\",\"prev\",\"next\",\"next\",\"next\",\"prev\",\"prev\",\"prev\",\"next\",\"next\",\"prev\",\"next\",\"prev\",\"next\",\"prev\",\"prev\",\"prev\",\"next\",\"prev\",\"next\",\"prev\",\"prev\",\"prev\",\"next\",\"prev\",\"next\",\"next\",\"prev\",\"prev\",\"next\",\"next\",\"prev\",\"prev\",\"next\",\"next\",\"prev\",\"prev\",\"prev\",\"next\",\"next\",\"prev\",\"prev\",\"next\",\"prev\",\"next\",\"prev\",\"next\",\"prev\",\"prev\",\"next\",\"next\",\"prev\",\"prev\",\"next\",\"prev\",\"next\",\"prev\",\"prev\",\"prev\",\"next\",\"prev\",\"next\",\"next\",\"next\",\"prev\",\"prev\",\"next\",\"prev\",\"prev\",\"prev\",\"next\",\"prev\",\"next\",\"prev\",\"next\",\"next\",\"prev\",\"next\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"next\",\"prev\",\"next\",\"next\",\"prev\",\"prev\",\"next\",\"next\",\"prev\",\"prev\",\"prev\",\"next\",\"prev\",\"next\",\"prev\",\"prev\",\"next\",\"prev\",\"prev\",\"prev\",\"prev\",\"next\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"next\",\"prev\",\"prev\",\"prev\",\"prev\",\"next\",\"prev\",\"prev\",\"prev\",\"prev\",\"next\",\"prev\",\"prev\",\"prev\",\"next\",\"prev\",\"next\",\"next\",\"next\",\"next\",\"prev\",\"next\",\"prev\",\"prev\",\"prev\",\"next\",\"prev\",\"next\",\"prev\",\"prev\",\"prev\",\"prev\",\"next\",\"prev\",\"prev\",\"prev\",\"prev\",\"next\",\"prev\",\"prev\",\"prev\",\"next\",\"prev\",\"prev\",\"prev\",\"prev\",\"next\",\"prev\",\"next\",\"prev\",\"prev\",\"prev\",\"next\",\"prev\",\"prev\",\"prev\",\"next\",\"prev\",\"next\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"next\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"next\",\"prev\",\"next\",\"prev\",\"prev\",\"next\",\"next\",\"prev\",\"next"
    ],
    "sample_464": [
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n=10, limit=3)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 12, limit = 3)",
        "distributeCandies(n = 11, limit = 4)",
        "distributeCandies(n = 15, limit = 6)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [3,4,5,1,2])",
        "minimumRightShifts(nums = [4, 3, 2, 1])",
        "minimumRightShifts(nums = [3,4,5,1,2])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumRightShifts(nums = [5,4,3,2,1])",
        "minimumRightShifts(nums = [5,4,3,2,1])",
        "minimumRightShifts([3,4,5,1,2])",
        "minimumRightShifts(nums = [4, 3, 7, 8, 1, 2, 5, 6])",
        "minimumRightShifts(nums = [5, 6, 1, 2, 3])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"o\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"ana\")",
        "findWordsContaining(words = [\"banana\", \"grapes\", \"apple\"], x = \"an\")",
        "findWordsContaining(words=[\"mq\", \"px\", \"zy\"], x=\"m\")",
        "findWordsContaining(words = [\"hello\", \"this\"], x = \"h\")",
        "findWordsContaining(words = [\"Hello\", \"world\", \"HelloWorld\"], x = \"Hello\")",
        "findWordsContaining(words=[\"apple\", \"orange\", \"watermelon\"], x=\"apple\")",
        "findWordsContaining(words = [\"as\", \"no\"], x = \"a\")",
        "findWordsContaining(words = [\"lemon\", \"apple\", \"banana\", \"mango\"], x = \"a\")"
    ],
    "sample_398": [
        "maxSum(nums = [1,1,1,7,8,9], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3], m = 2, k = 2)",
        "maxSum(nums = [1, 1, 1, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3], m = 1, k = 1)",
        "maxSum(nums = [1,2,3,4,5], m = 1, k = 3)",
        "maxSum(nums = [3,3,3,2,3,3,3,2,2,2,1,2,2,3,3,3,2,1,3,2], m = 3, k = 2)"
    ],
    "sample_424": [
        "minOperations(nums = [1,1,3,2,5])",
        "minOperations(nums = [1,1,3,2,5])",
        "minOperations(nums = [1,1,2,2,3,3])",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minOperations(nums = [1,1,1,2,2,2])",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10,11])",
        "minOperations(nums = [1,1,1,1,2,2,3])",
        "minOperations(nums = [1,1,2,2,2,1,1,3,3,3])",
        "minOperations([0,2,3])",
        "minOperations(nums = [2,1,1,1,1,2,2,2,3])"
    ],
    "sample_417": [
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "minOperations(nums = [3,1,4,2], k = 6)",
        "minOperations(nums = [2,4,8,16], k = 2)",
        "minOperations(nums = [1, 2, 4, 5, 6, 7, 8, 9], k = 4)",
        "minOperations(nums = [5,3,1,4,2,6,7], k = 4)",
        "minOperations(nums = [1, 2, 4, 7, 10], k = 13)",
        "minOperations(nums = [3, 4, 1, 1, 2, 3, 1], k = 10)",
        "minOperations(nums = [2,3,1,3,2,5,7], k = 6)",
        "minOperations(nums = [7, 9, 10, 3, 4], k = 3)",
        "minOperations(nums = [1, 3, 2, 1, 4, 2, 1, 1, 2, 3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 5)"
    ],
    "sample_371": [
        "sortVowels(s = \"YmplH\")",
        "sortVowels(\"YmplH\")",
        "sortVowels(s = \"Ymphl\")",
        "sortVowels(s = \"Ymphl\")",
        "sortVowels(\"lYmpH\")",
        "sortVowels(\"LympH\")",
        "sortVowels(s = 'PhYlm')",
        "sortVowels(s = 'YmPhl')",
        "sortVowels(s = \"mYphl\")",
        "sortVowels(s = 'HmlPy')"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 2, limit = 1)"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 2, 1, 2, 3])",
        "sumCounts([1, 2, 1])",
        "sumCounts(nums = [1,2,3,2])",
        "sumCounts(nums = [1, 1, 2, 1, 2])",
        "sumCounts([1,2,2])",
        "sumCounts(nums = [2, 1, 3, 1, 4])",
        "sumCounts(nums = [1, 1, 1, 2, 2, 3, 4, 1])"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1,2,3,4,5])",
        "maxSubarrays(nums = [2, 1])",
        "maxSubarrays(nums = [5, 2, 3, 6, 1])",
        "maxSubarrays(nums = [2, 4, 7, 3, 6, 1])",
        "maxSubarrays([1,0,2,1,0,2])",
        "maxSubarrays(nums = [1, 3, 4, 5, 3, 2, 3, 1])",
        "maxSubarrays(nums = [12, 24, 16, 22, 30, 29, 25, 18, 27, 23])",
        "maxSubarrays(nums=[1, 2, 3, 4, 5, 6, 7, 8])"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts([1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [2, 1, 3])",
        "sumCounts(nums = [1,2,1,2])",
        "sumCounts([2, 1, 3, 1, 2, 1, 3])",
        "sumCounts([1, 2, 3, 2, 2])",
        "sumCounts(nums=[2,1,2])",
        "sumCounts(nums = [1, 2, 2, 4, 5, 5, 5, 8, 9, 9, 10, 11])"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"aa\", s2 = \"bb\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ab\")",
        "canBeEqual(s1 = \"ab\", s2 = \"bb\")",
        "canBeEqual(s1 = \"aab\", s2 = \"abb\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cabd\")",
        "canBeEqual(s1 = \"ccb\", s2 = \"aab\")",
        "canBeEqual(s1 = \"aabbb\", s2 = \"aaaab\")",
        "canBeEqual(s1 = \"xyz\", s2 = \"xyz\")"
    ],
    "sample_380": [
        "countPairs(nums = [1,2,3,4,5], target = 5)",
        "countPairs(nums = [1,1,2,2], target = 3)",
        "countPairs(nums = [5,1,3,4,2], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1,2,3,4,5,6], target = 5)",
        "countPairs(nums = [1,2,3,4,5,6,7,8,9,10], target = 10)",
        "countPairs(nums = [1,2,3,4,5,6,7,8], target = 7)",
        "countPairs(nums = [2,3,4,5], target = 5)",
        "countPairs(nums = [3,2,1,4,5], target = 8)",
        "countPairs(nums=[2,1,5,2,7], target=4)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1,2,1,2,3])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1, 3, 2])",
        "sumCounts(nums=[1, 2, 1, 2, 3])",
        "sumCounts(nums = [1, 1, 1, 2, 2])",
        "sumCounts([1,1,1,1])",
        "sumCounts([1, 3, 1, 2, 2])",
        "sumCounts(nums = [2, 2, 1, 1])",
        "sumCounts(nums = [2, 1, 3, 1, 2])"
    ],
    "sample_368": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s=\"lYmpH\")",
        "sortVowels(s = 'Ymphl')",
        "sortVowels(s = 'YmphL')",
        "sortVowels(s = 'YmPhl')",
        "sortVowels(s = \"Hympl\")",
        "sortVowels(s='mYpH')",
        "sortVowels(\"LympH\")",
        "sortVowels(s=\"HYmpL\")",
        "sortVowels('MPhyL')"
    ],
    "sample_462": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 4)",
        "distributeCandies(n = 10, limit = 4)",
        "distributeCandies(n=10, limit=5)",
        "distributeCandies(n = 20, limit = 3)",
        "distributeCandies(n = 7, limit = 5)",
        "distributeCandies(n=11, limit=2)"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1,2,5])",
        "minimumCoins(prices = [2, 3, 2])",
        "minimumCoins(prices = [2, 3, 1, 2])",
        "minimumCoins([3, 1, 1, 2])",
        "minimumCoins(prices = [5, 5, 3])",
        "minimumCoins(prices = [3, 3, 1, 4, 1, 2, 1])",
        "minimumCoins(prices = [1, 10, 4, 40, 30, 20])"
    ],
    "sample_426": [
        "minOperations(nums = [1,1,2,2,3,3])",
        "minOperations(nums = [1,1,2,2,3,3])",
        "minOperations(nums = [1,1,2,2,3,3,4,4,5,5])",
        "minOperations([1,1,2,2,3,3])",
        "minOperations([1,1,2,2,3,3])",
        "minOperations(nums = [1, 1, 1])",
        "minOperations([1,1,2,2,3,3,4,4,5,5])",
        "minOperations(nums = [1,2,3,4,5,6,7])",
        "minOperations(nums = [1,1,1,1,1,1,1,1,1])",
        "minOperations([1, 2, 3, 4, 6])"
    ],
    "sample_423": [
        "minOperations(nums = [1,2,3,4,5,6])",
        "minOperations(nums = [1,2,3,4,5,6])",
        "minOperations(nums = [1,1,2,2,2,2])",
        "minOperations(nums=[1, 2, 2, 2, 2])",
        "minOperations(nums = [1,2,2,2,3,3])",
        "minOperations(nums = [2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1,2,1])",
        "minOperations(nums=[1, 2, 3, 3, 3, 3])",
        "minOperations(nums = [1,2,3,3,4,5,6,6,7,8,9])",
        "minOperations([1,2,3,1,1,1,2])"
    ],
    "sample_476": [
        "minimumCoins(prices = [1,2,5])",
        "minimumCoins(prices = [1,2,5])",
        "minimumCoins(prices = [1,2,3])",
        "minimumCoins(prices = [3,1,2])",
        "minimumCoins([1,5,8,9,10,17,17,20])",
        "minimumCoins(prices = [1,2,4,7])",
        "minimumCoins(prices = [1, 3, 2, 4, 2])",
        "minimumCoins(prices = [2, 3, 2, 4, 2, 1])",
        "minimumCoins(prices = [2,5,2,3,1,3])",
        "minimumCoins(prices = [1, 5, 11, 9, 10, 15, 2, 10, 22])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [2, 3, 1])",
        "minimumRightShifts(nums = [1, 2, 4, 3])",
        "minimumRightShifts(nums = [3,4,5,5,1,2])",
        "minimumRightShifts(nums = [3, 4, 5, 5, 1, 2])",
        "minimumRightShifts(nums = [4, 3, 1, 2])"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [3, 4, 5, 5, 3])",
        "minimumRightShifts(nums = [2, 3, 4, 5, 1])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumRightShifts(nums = [3, 4, 5, 6, 2])",
        "minimumRightShifts(nums = [1,2,4,4,7,9,3,2,3])",
        "minimumRightShifts(nums = [2,3,4,5,6,7,8,1,9])",
        "minimumRightShifts([3, 4, 7, 6, 5])"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"banana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"x\", s2 = \"y\", s3 = \"z\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ac\", s3 = \"bc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abcc\")",
        "findMinimumOperations(s1 = \"aa\", s2 = \"aa\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"efg\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"abcdef\", s3 = \"abcf\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"cdef\", s3 = \"afg\")",
        "findMinimumOperations(s1 = \"bbc\", s2 = \"caa\", s3 = \"aab\")"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbbc\")",
        "longestSemiRepetitiveSubstring(s = \"abbcccddddeeeeedcba\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbaaa\")",
        "longestSemiRepetitiveSubstring(\"aaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"baa\")",
        "longestSemiRepetitiveSubstring(s = \"bbbbbbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabbcc\")",
        "longestSemiRepetitiveSubstring(s = \"acacacac\")",
        "longestSemiRepetitiveSubstring(s = \"bbabbabbba\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"aa\",\"bb\",\"ab\",\"ba\"])",
        "maximumNumberOfStringPairs(words = [\"cd\",\"cd\",\"cd\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"ab\", \"ba\", \"cc\", \"cd\", \"dc\", \"dd\"])",
        "maximumNumberOfStringPairs(words = [\"aa\",\"ab\",\"ba\",\"cd\",\"dc\",\"ca\"])",
        "maximumNumberOfStringPairs(words = [\"nmi\", \"iim\", \"mni\", \"imn\", \"nmi\", \"iim\"])"
    ],
    "sample_247": [
        "minOperations(s1 = \"aba\", s2 = \"bab\", x = 6)",
        "minOperations(s1 = \"b\", s2 = \"a\", x = 1)",
        "minOperations(s1 = \"xbdef\", s2 = \"xecab\", x = 2)",
        "minOperations(s1 = \"aaaa\", s2 = \"bbbb\", x = 1)",
        "minOperations(s1 = \"d\", s2 = \"d\", x = 1)",
        "minOperations(s1 = \"yxz\", s2 = \"xyz\", x = 2)",
        "minOperations(s1 = \"bca\", s2 = \"abb\", x = 1)",
        "minOperations(s1 = \"22\", s2 = \"11\", x = 1)",
        "minOperations(s1 = \"adcbf\", s2 = \"abcdf\", x = 1)",
        "minOperations(s1 = \"wsww\", s2 = \"wssw\", x = 1)"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"ef\", \"fe\", \"gh\", \"hg\", \"ij\", \"ji\", \"kl\", \"lk\", \"mn\", \"nm\", \"op\", \"po\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"cd\",\"dc\",\"aa\"])",
        "maximumNumberOfStringPairs([\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"cd\",\"dc\",\"e\"])",
        "maximumNumberOfStringPairs(words = [\"cd\",\"dc\",\"ab\",\"ba\"])",
        "maximumNumberOfStringPairs([\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"dc\", \"ab\", \"ba\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"ab\", \"dc\", \"ca\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"dd\",\"aa\",\"bb\",\"dd\",\"aa\",\"dd\",\"bb\",\"dd\",\"aa\",\"dd\",\"aa\"])"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,1])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 2, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1,1,2,3,3,2,2])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,2,2,2,3,3,4])",
        "minGroupsForValidAssignment(nums = [1, 3, 4, 2, 1, 2])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 1, 1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 2, 3, 3, 3, 3, 1, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [2, 2, 1, 1, 3, 3, 3, 4, 4, 4, 4, 4])",
        "minGroupsForValidAssignment(nums=[2, 3, 1, 2, 2, 1, 3, 1, 1, 2, 2, 1, 3, 1])",
        "minGroupsForValidAssignment(nums = [1,3,1,2,2,3,4,3,5,3,4,5,2,1,2,5,3,1,3,3])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 6, m = 2)",
        "differenceOfSums(n = 6, m = 2)",
        "differenceOfSums(n = 15, m = 5)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 20, m = 3)"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"1111111\", k = 2)",
        "shortestBeautifulSubstring(s = \"11100111\", k = 2)",
        "shortestBeautifulSubstring(s = \"1111\", k = 1)",
        "shortestBeautifulSubstring(s = \"1010110\", k = 2)",
        "shortestBeautifulSubstring(s = \"11001111\", k = 3)",
        "shortestBeautifulSubstring(s = '111001110', k = 2)",
        "shortestBeautifulSubstring(s = '1110111101101011101011101111101010111111', k = 4)",
        "shortestBeautifulSubstring(s = \"11001011101111010000011110011100111111100011100001101\", k = 3)",
        "shortestBeautifulSubstring(s = '111000011110111010100001100100100000000001100001100011100001101010000010', k = 3)",
        "shortestBeautifulSubstring(s = \"11000\", k = 2)"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"abcdef\", s2 = \"abcdef\", s3 = \"abcdef\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abcd\", s3 = \"abcde\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"cde\", s3 = \"efg\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abcc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"cdeab\", s3 = \"cdeab\")",
        "findMinimumOperations(s1 = \"aabbcc\", s2 = \"abbcc\", s3 = \"abbcc\")",
        "findMinimumOperations(s1 = \"cabaa\", s2 = \"bb\", s3 = \"aabbb\")",
        "findMinimumOperations(s1 = \"111000\", s2 = \"010010\", s3 = \"101000\")",
        "findMinimumOperations(s1 = \"thequickbrownfox\", s2 = \"thelazydog\", s3 = \"thequickbrownfoxlazydog\")"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"bab\")",
        "longestSemiRepetitiveSubstring(s = \"abccbb\")",
        "longestSemiRepetitiveSubstring(s = \"abbcccd\")",
        "longestSemiRepetitiveSubstring(s = \"abcccdea\")",
        "longestSemiRepetitiveSubstring(s = \"xyzabc\")",
        "longestSemiRepetitiveSubstring(s=\"caaabbb\")",
        "longestSemiRepetitiveSubstring(s = \"abbabbaaaabbabbaaaabbabbaaaabbabbaaa\")",
        "longestSemiRepetitiveSubstring(s=\"xabcabcdbb\")",
        "longestSemiRepetitiveSubstring(\"0111111101\")"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [0, 1, 2], nums2 = [3, 4, 5])",
        "minSum(nums1 = [0, 0, 1], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 1], nums2 = [0, 2])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 2, 2, 2, 2])",
        "minSum(nums1 = [5, 2, 0, 0, 1, 0], nums2 = [5, 2, 0, 0, 1, 0])",
        "minSum(nums1 = [3, 1, 1], nums2 = [2, 2, 1, 1, 3])",
        "minSum(nums1 = [1, 3, 2, 0, 0], nums2 = [0, 3, 2, 4, 1])",
        "minSum(nums1 = [2, 5, 0, 4, 0, 0], nums2 = [2, 5, 0, 4, 0, 0])",
        "minSum(nums1 = [2, 1, 1, 1, 2, 3], nums2 = [1, 2, 2, 3, 0, 0])"
    ],
    "sample_289": [
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"00110\")",
        "minimumSteps(s
        "minimumSteps(s = \"1111000\")",
        "minimumSteps(s = \"100111\")",
        "minimumSteps(\"01011011\")",
        "minimumSteps(s = \"0011001100\")",
        "minimumSteps(s = \"1001001000110111010\")"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6])",
        "maximumTripletValue(nums = [-1,-2,-3])",
        "maximumTripletValue(nums = [2, 3, 1, 5, 4])",
        "maximumTripletValue(nums = [3, 5, 6])",
        "maximumTripletValue(nums = [2,1,3,4,5])",
        "maximumTripletValue([-2, -3, -4])",
        "maximumTripletValue([3, 1, 1, 2, 5, 5, 4])",
        "maximumTripletValue(nums = [3, 6, 1, 2, 5])"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"a\", k = 1)",
        "beautifulSubstrings(s = \"aabb\", k = 2)",
        "beautifulSubstrings(s = \"aab\", k = 2)",
        "beautifulSubstrings(s = \"aaaaaa\", k = 1)",
        "beautifulSubstrings(s = \"aabb\", k = 5)",
        "beautifulSubstrings(s = \"abcabc\", k = 2)",
        "beautifulSubstrings(s = \"bcb\", k = 3)",
        "beautifulSubstrings(s = \"iaiai\", k = 2)",
        "beautifulSubstrings(s=\"aabbab\", k=3)",
        "beautifulSubstrings(s = \"aabba\", k = 5)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(\"01101\")",
        "minimumBeautifulSubstrings(\"011011\")",
        "minimumBeautifulSubstrings(s = \"00101101\")",
        "minimumBeautifulSubstrings(s=\"0010\")",
        "minimumBeautifulSubstrings(s = \"000110111\")",
        "minimumBeautifulSubstrings(\"011011101110\")"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum([[1, 2, 3], [4, 5, 6]])",
        "matrixSum(a = [[1, 2], [2, 1]])",
        "matrixSum(a = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])",
        "matrixSum(a = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "matrixSum(a = [[1, 1, 1], [0, 1, 1]])",
        "matrixSum([[1, 1, 1], [0, 0, 0]])",
        "matrixSum([[1,0,1,0,0], [1,0,1,1,1], [1,1,0,1,1]])",
        "matrixSum(a = [[3, 2], [2, 2], [1, 5], [1, 3]])",
        "matrixSum([[1]])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 0, 3], nums2 = [5, 3, 4])",
        "minSum(nums1 = [1, 2, 3, 4, 5, 6], nums2 = [1, 1, 1, 1, 1, 1])",
        "minSum(nums1 = [1, 2, 3, 0], nums2 = [4, 5, 6, 7])",
        "minSum(nums1 = [1, 2, 3], nums2 = [6, 2, 3, 4])",
        "minSum(nums1 = [1,1,1,1], nums2 = [2,2,2,2])",
        "minSum(nums1 = [2, 3, 0], nums2 = [5, 1, 0])",
        "minSum(nums1 = [5, 2, 2], nums2 = [4, 3, 3])",
        "minSum(nums1 = [1,1,4,5,6], nums2 = [1,1,2,3,4])",
        "minSum(nums1 = [3,2,3,0], nums2 = [0,2,2,2])",
        "minSum(nums1 = [10, 10, 3, 6], nums2 = [8, 1, 7, 6])"
    ],
    "sample_282": [
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1, 2, 3, 4, 5, 6], nums2 = [1, 1, 2, 2, 2, 2])",
        "minOperations(nums1 = [1, 2, 3, 4, 5, 6], nums2 = [1, 1, 2, 2, 2, 2])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,1,1,1,1,1,1], nums2 = [1,1,1,1])",
        "minOperations(nums1 = [2,1,1,1,1,1,1], nums2 = [1,1,1,1,1,1,1])",
        "minOperations(nums1 = [2,3,2,4,3], nums2 = [1,2,3,3])",
        "minOperations(nums1 = [2,2,1], nums2 = [4,2,5,1])",
        "minOperations(nums1 = [5,3,1,2,4], nums2 = [1,5,5,2,1])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [4,2,5,3])",
        "alternatingSubarray(nums = [4,2,5,3])",
        "alternatingSubarray(nums = [4, 2, 5, 3])",
        "alternatingSubarray([2,2,3,4,1,5,6,5,4,3,2,1])",
        "alternatingSubarray(nums = [5,4,2,3,1,3,1,3,1,3])",
        "alternatingSubarray([1,2,3,4,4,2,1,5,3,2])",
        "alternatingSubarray(nums = [5,4,2,2,1,1,8,8,8,8,8,8,8,8])",
        "alternatingSubarray(nums = [1,3,5,2,3,6,4,1,2])",
        "alternatingSubarray(nums = [2,4,2,5,4,3,1,2,3,2])",
        "alternatingSubarray([2, 3, 5, 2, 2, 5, 5, 2, 5, 5, 5, 2, 2, 5, 5, 2, 5, 5, 5, 2, 2, 5, 5, 2, 5, 5, 5, 2, 2, 5, 5, 2, 5, 5, 5, 2, 2, 5, 5, 2, 5, 5, 5, 2, 2, 5, 5, 2, 5, 5, 5, 2, 2, 5, 5, 2, 5, 5, 5, 2, 2, 5, 5, 2, 5, 5, 5, 2, 2, 5, 5, 2, 5, 5, 5, 2, 2, 5, 5, 2, 5, 5, 5, 2, 2, 5, 5, 2, 5, 5, 5, 2, 2, 5, 5, 2, 5, 5, 5, 2, 2, 5, 5, 2, 5, 5, 5, 2, 2, 5, 5, 2, 5, 5, 5, 2, 2, 5, 5, 2, 5, 5, 5, 2, 2, 5, 5, 2, 5, 5, 5, 2, 2, 5, 5, 2, 5, 5, 5, 2, 2, 5, 5, 2, 5, 5, 5, 2, 2, 5, 5, 2, 5, 5, 5, 2, 2, 5, 5, 2, 5, 5, 5, 2, 2, 5, 5, 2, 5, 5, 5, 2, 2, 5, 5, 2, 5, 5, 5, 2, 2, 5, 5, 2, 5, 5, 5, 2, 2, 5,"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [3, 2, 3], money = 3)",
        "buyChoco(prices = [3, 2, 3], money = 4)",
        "buyChoco(prices=[3, 2, 3], money=3)",
        "buyChoco(prices = [100, 1, 10], money = 10)",
        "buyChoco(prices = [5, 2, 2], money = 3)",
        "buyChoco(prices = [5, 2, 2, 5], money = 10)",
        "buyChoco(prices = [100, 1, 10, 1000], money = 99)"
    ],
    "sample_302": [
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors([\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors(details=[\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"aeiouu\", k = 2)",
        "beautifulSubstrings(s = \"aeiouu\", k = 2)",
        "beautifulSubstrings(s = \"awesome\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 4)",
        "beautifulSubstrings(s = \"bac\", k = 2)",
        "beautifulSubstrings(s = \"bbb\", k = 3)",
        "beautifulSubstrings(s = \"aaz\", k = 3)",
        "beautifulSubstrings(s = \"aeioau\", k = 2)",
        "beautifulSubstrings(s = \"asdf\", k = 1)",
        "beautifulSubstrings(s=\"aaaba\", k=4)"
    ],
    "sample_255": [
        "minimumSum(nums = [3,6,2,3])",
        "minimumSum(nums = [3,6,2,3])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum([1,2,3,4,5,6,7,8,9])",
        "minimumSum(nums=[3,6,7,2,1])",
        "minimumSum(nums = [3,1,2,4,6])",
        "minimumSum(nums = [9,10,11,2])",
        "minimumSum(nums = [4,3,5,1,6,9])",
        "minimumSum(nums = [2,7,8,1,10,9])",
        "minimumSum(nums = [10,1,5,2,7,8,3])"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums=[3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,1])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 1, 1])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,1,1])",
        "minGroupsForValidAssignment([3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [2,1,3,5,2])",
        "minGroupsForValidAssignment(nums = [1,1,2,3,3,2,2])",
        "minGroupsForValidAssignment(nums = [1,2,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums=[5,1,2,3,1,2,2,1,2,3,3,4,2,4,2,4,2,1,5,2,3,1,5,2,3,4,5,5,2,1,3,3,3,3,2,2,2,3,3,4,2,4,4,2,3,2,3,1,5,2,4,4,5,2,4,4,4,1,3,3,2,2,3,5,5,4,1,2,4,4,4,4,5,1,4,5,3,4,1,1,1,4,2,2,4,3,3,2,5,3,1,4,3,2,5,2,1,3,4,4,5,1,4,1,2,1,3,3,1,2,4,5,5,2,1,5,4,5,5,3,2,5,1,5,5,4,3,1,3,5,1,2,4,1,1,4,2,4,3,3,3,1,2,2,5,3,5,1,4,1,4,1,2,3,1,3,5,1,4,2,5,4,1,2,2,5,5,1,4,5,1,5,3,1,4,5,5,3,5,1,3,5,3,5,3,5,4,3,2,1,5,5,1,3,2,4,2,2,2,2,4,5,2,4,2,3,3,1,4,5,4,5,4,5,2,3,5,5,3,1,4,4,2,3,4,1,2,1,1,1,1,1,3,5,4,4,2,1,5,1,4,3,2,4,3,1,4,3,1,5,1,3,4,5,4,4"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [1,2,1,2,1,2])",
        "alternatingSubarray(nums = [4, 2, 5, 3])",
        "alternatingSubarray(nums=[1,2,3,3,4,5])",
        "alternatingSubarray(nums = [1,3,5,7,9,7,5,3,1])",
        "alternatingSubarray(nums=[1, 2, 3, 3, 2, 2, 2, 1])",
        "alternatingSubarray(nums = [1,2,3,3,3,2,1])",
        "alternatingSubarray([1,2,2,2,3,3,4])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = '1111', k = 2)",
        "shortestBeautifulSubstring(s = \"1111111\", k = 3)",
        "shortestBeautifulSubstring(s = \"11001111\", k = 2)",
        "shortestBeautifulSubstring(s = \"1111111111\", k = 3)",
        "shortestBeautifulSubstring(s = '1111111', k = 4)",
        "shortestBeautifulSubstring(s = \"1101110\", k = 2)",
        "shortestBeautifulSubstring(s = '111100110', k = 2)",
        "shortestBeautifulSubstring(s = \"1111001110\", k = 2)",
        "shortestBeautifulSubstring(s = \"11100100111\", k = 2)",
        "shortestBeautifulSubstring(s = \"11010011010101101001\", k = 3)"
    ],
    "sample_293": [
        "minimumSteps(s = \"001011\")",
        "minimumSteps(s = \"001011\")",
        "minimumSteps(s = \"001011\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"01010\")",
        "minimumSteps(s = \"01001\")",
        "minimumSteps(\"010\")",
        "minimumSteps(s = \"0101010\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(\"0101\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"abbabba\")",
        "longestSemiRepetitiveSubstring(s = \"aabb\")",
        "longestSemiRepetitiveSubstring(s=\"abbab\")",
        "longestSemiRepetitiveSubstring(s = \"abcab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcde\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaab\")",
        "longestSemiRepetitiveSubstring(s = \"123123\")",
        "longestSemiRepetitiveSubstring(\"aaaaaaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaab\")",
        "longestSemiRepetitiveSubstring(s = \"abbaccde\")"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "minGroupsForValidAssignment(nums = [3,8,1,3,2,1,8,9,0])",
        "minGroupsForValidAssignment(nums=[3,3,3,3,3,1,1,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [2,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,1,2,3,4])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,",
        "minGroupsForValidAssignment(nums = [1,2,2,1,0])",
        "minGroupsForValidAssignment([1,1,1,1,1,1,1,2,2,2,2,3])",
        "minGroupsForValidAssignment([1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3])"
    ],
    "sample_307": [
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors([\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])"
    ],
    "sample_290": [
        "minimumSteps(s = \"0010\")",
        "minimumSteps(s = \"10000\")",
        "minimumSteps(s=\"010\")",
        "minimumSteps(s = \"1011\")",
        "minimumSteps(s = \"01001\")",
        "minimumSteps(s = \"01011\")",
        "minimumSteps(\"111000\")",
        "minimumSteps(s = \"01100\")",
        "minimumSteps(s = \"0010111010\")",
        "minimumSteps(s = \"010011100\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,1,2,2], moveFrom = [1,2], moveTo = [2,1])",
        "relocateMarbles(nums = [1,1,2,2], moveFrom = [1,2], moveTo = [3,4])",
        "relocateMarbles(nums = [2,2], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums = [1,2,2,3], moveFrom = [1,2], moveTo = [2,1])",
        "relocateMarbles(nums = [2,1,1,3], moveFrom = [1,2], moveTo = [2,1])",
        "relocateMarbles(nums = [2,2,2], moveFrom = [2,2,2], moveTo = [1,1,1])",
        "relocateMarbles(nums=[2,2,3,3], moveFrom=[2,3], moveTo=[2,3])",
        "relocateMarbles(nums = [1,2,3,4,2], moveFrom = [1,2,4], moveTo = [1,3,4])",
        "relocateMarbles(nums=[1, 2, 3], moveFrom=[1, 1, 2], moveTo=[2, 1, 3])",
        "relocateMarbles(nums = [1,2,3,4,2,2], moveFrom = [3,2,2,2], moveTo = [2,3,2,2])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [4,2,5,3])",
        "alternatingSubarray(nums = [4,2,5,3])",
        "alternatingSubarray(nums = [3,1,3,2,4,3])",
        "alternatingSubarray(nums = [1,2,3,4,5,6])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 2, 1])",
        "alternatingSubarray([2,3,5,4,7])",
        "alternatingSubarray(nums = [3, 1, 3, 1, 3])",
        "alternatingSubarray(nums = [4,2,3,1,2,1])",
        "alternatingSubarray(nums = [2,3,3,1,0,0])",
        "alternatingSubarray(nums = [1, 2, 1, 4, 1, 5, 1, 2, 1, 1, 1, 1, 1])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"aba\", k = 5)",
        "beautifulSubstrings(s = \"aeiouaeiou\", k = 2)",
        "beautifulSubstrings(s = \"aea\", k = 6)",
        "beautifulSubstrings(s = \"awesome\", k = 6)",
        "beautifulSubstrings(s = \"aeiouaeiouaeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeaea\", k = 4)",
        "beautifulSubstrings(s = \"zazxzaxxaa\", k = 3)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1,2,3,4,5,6])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1,2,3,4,5,6,7,8,9,10])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [2,1,2,1,2])",
        "maximumTripletValue(nums = [1, 2, 3, 1])",
        "maximumTripletValue([5,6,2,7,4])",
        "maximumTripletValue(nums=[2,7,3,1])",
        "maximumTripletValue(nums=[-1, -2, 1, 0, 8])",
        "maximumTripletValue(nums = [1,1,2,10,100])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"cc\"])",
        "maximumNumberOfStringPairs(words = [\"lc\", \"cl\", \"gg\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\"])",
        "maximumNumberOfStringPairs([\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"ab\", \"ba\", \"ab\"])",
        "maximumNumberOfStringPairs([\"ab\", \"b\", \"ba\", \"a\"])",
        "maximumNumberOfStringPairs(words=[\"cd\",\"ab\",\"aa\",\"ab\"])",
        "maximumNumberOfStringPairs(words = [\"dc\", \"dcc\", \"d\", \"cc\", \"ca\", \"c\", \"cbb\"])",
        "maximumNumberOfStringPairs(words=[\"mi\", \"in\", \"i\", \"mo\", \"oo\", \"mn\", \"mi\", \"im\", \"mo\"])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 15, m = 5)",
        "differenceOfSums(n = 15, m = 5)",
        "differenceOfSums(n = 12, m = 3)",
        "differenceOfSums(n = 8, m = 3)",
        "differenceOfSums(n = 8, m = 3)",
        "differenceOfSums(n = 8, m = 2)",
        "differenceOfSums(n = 8, m = 4)"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [3, 2, 3], money = 3)",
        "buyChoco(prices = [3, 2, 3], money = 3)",
        "buyChoco(prices = [2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5, 6], money = 10)",
        "buyChoco(prices = [2, 1, 2], money = 2)",
        "buyChoco(prices = [4, 2, 1], money = 2)",
        "buyChoco(prices = [4, 1, 4], money = 10)",
        "buyChoco(prices = [20, 30, 10, 5, 40, 100, 5], money = 100)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"cd\",\"dc\",\"ef\",\"fe\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"cd\",\"dc\",\"ef\",\"fe\"])",
        "maximumNumberOfStringPairs(words = [\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"ef\", \"fe\", \"gh\", \"hg\", \"ij\", \"ji\", \"kl\", \"lk\", \"mn\", \"nm\", \"op\", \"po\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"ef\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"aa\"])",
        "maximumNumberOfStringPairs([\"ab\", \"ba\", \"cd\"])",
        "maximumNumberOfStringPairs([\"ab\",\"ba\",\"cd\",\"dc\",\"aa\"])",
        "maximumNumberOfStringPairs([\"cd\", \"ab\", \"ba\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ba\", \"nan\", \"nana\"])"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"abbccc\")",
        "longestSemiRepetitiveSubstring(s = \"abbbc\")",
        "longestSemiRepetitiveSubstring(s = \"abb\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbc\")",
        "longestSemiRepetitiveSubstring(s = \"aabacba\")",
        "longestSemiRepetitiveSubstring(\"mnop\")",
        "longestSemiRepetitiveSubstring(s = \"abbbcbbac\")"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"ab\",\"bc\",\"cd\"])",
        "minimizeConcatenatedLength([\"ab\",\"bc\",\"cd\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"bc\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"bc\",\"ab\"])",
        "minimizeConcatenatedLength(words=[\"ab\",\"cd\",\"ef\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"xyz\",\"xy\",\"z\"])",
        "minimizeConcatenatedLength(words=[\"ab\",\"bc\"])",
        "minimizeConcatenatedLength([\"ab\", \"bc\", \"cd\"])",
        "minimizeConcatenatedLength(words=[\"abc\",\"bc\",\"ab\",\"ac\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"xyz\",\"bc\",\"yz\"])"
    ],
    "sample_323": [
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(n = 192)",
        "isFascinating(39)",
        "isFascinating(79)",
        "isFascinating(79)",
        "isFascinating(781)",
        "isFascinating(n = 90)",
        "isFascinating(728)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"abababa\")",
        "longestSemiRepetitiveSubstring(s = \"aabcb\")",
        "longestSemiRepetitiveSubstring(s = \"abcbab\")",
        "longestSemiRepetitiveSubstring(s = \"baac\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbccddeeeffgg\")",
        "longestSemiRepetitiveSubstring(\"pqrstuvvxy\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors(details=[\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors(details=[\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors(details=[\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors(details=[\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors([\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 3, 3, 4])",
        "minGroupsForValidAssignment(nums = [3,4,2,3,2,1,2])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,1,1,1])",
        "minGroupsForValidAssignment(nums = [0,1,2,3,4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,3,3,4])",
        "minGroupsForValidAssignment(nums = [2, 1, 1, 2, 1, 1, 2, 1, 1, 2])",
        "minGroupsForValidAssignment(nums = [1, 1, 3, 2, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [1, 3, 5, 5, 5, 5, 5])"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [1,2,3,4])",
        "minimumSum(nums=[1, 2, 3, 4])",
        "minimumSum(nums = [1, 1, 1, 1, 1, 1, 1, 1])",
        "minimumSum(nums = [4, 2, 3, 5])",
        "minimumSum(nums = [3, 2, 5, 4, 7])",
        "minimumSum(nums = [20, 1, 2, 10])",
        "minimumSum(nums = [1, 2, 2, 3, 4, 1, 6])",
        "minimumSum(nums = [1, 3, 5, 7, 9, 0, 2, 4, 6, 8])",
        "minimumSum(nums = [50, 49, 51])"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"a\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"ef\", \"fe\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"ef\", \"fe\", \"gh\", \"hg\", \"ij\", \"ji\", \"kl\", \"lk\", \"mn\", \"nm\", \"op\", \"po\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"cd\",\"dc\",\"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"ef\", \"fe\", \"gh\", \"hg\", \"ij\", \"ji\", \"kl\", \"lk\", \"mn\", \"nm\", \"op\", \"po\", \"qr\", \"rq\", \"st\", \"ts\"])",
        "maximumNumberOfStringPairs([\"cd\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"xy\",\"yx\",\"yx\",\"xy\"])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = '0110', k = 1)",
        "shortestBeautifulSubstring(s = '0110', k = 1)",
        "shortestBeautifulSubstring(s = '11110111', k = 2)",
        "shortestBeautifulSubstring(s = '0010110', k = 3)",
        "shortestBeautifulSubstring(s = '1011011', k = 2)",
        "shortestBeautifulSubstring(s = '1101111', k = 3)",
        "shortestBeautifulSubstring(s = '101011', k = 2)",
        "shortestBeautifulSubstring(s = \"11010011\", k = 2)",
        "shortestBeautifulSubstring(s = \"11111111\", k = 3)",
        "shortestBeautifulSubstring(s = '0110110', k = 2)"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 3)",
        "lexicographicallySmallestArray(nums = [3, 1, 5, 8, 9], limit = 3)",
        "lexicographicallySmallestArray(nums = [2, 1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [2, 1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [3, 5, 1, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 8, 5, 3, 9], limit = 3)",
        "lexicographicallySmallestArray(nums = [1, 2, 5, 9, 3, 8], limit = 3)",
        "lexicographicallySmallestArray(nums = [2, 3, 8, 5, 1, 9], limit = 1)",
        "lexicographicallySmallestArray(nums = [2, 1, 3, 5, 8, 9, 10, 11], limit = 3)",
        "lexicographicallySmallestArray(nums = [2, 3, 1, 5, 8, 9, 2], limit = 1)"
    ],
    "sample_310": [
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[0, 0], [1, 0]])",
        "matrixSum(a = [[1, 1, 1], [0, 1, 1]])",
        "matrixSum(a=[[2], [1]])",
        "matrixSum(a = [[1, 1, 2], [2, 1, 0]])",
        "matrixSum([[0, 0], [1, 1], [2, 2], [3, 3]])",
        "matrixSum(a = [[1,0], [0,0], [1,2]])",
        "matrixSum([[3,1,5],[2,4,3]])",
        "matrixSum(a = [[1, 2, 3], [3, 1, 5], [6, 1, 7]])",
        "matrixSum(a = [[1, 3, 0], [2, 2, 1], [1, 4, 1]])"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"aeiouu\", k = 2)",
        "beautifulSubstrings(s = \"aeiouu\", k = 2)",
        "beautifulSubstrings(s = \"aeiouu\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioooaauuaeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiouuoiea\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"baa\", k = 1)",
        "beautifulSubstrings(s = \"aeaaeaaeaae\", k = 3)",
        "beautifulSubstrings(s = \"aeaouaioouu\", k = 3)",
        "beautifulSubstrings(s = \"aeioubkj\", k = 1)"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"])",
        "maximumNumberOfStringPairs(words = [\"aa\",\"bc\",\"cb\",\"ab\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"dc\", \"bb\", \"aa\", \"cc\", \"da\", \"ad\"])",
        "maximumNumberOfStringPairs(words = [\"bb\", \"aa\", \"aab\", \"baa\", \"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"a\",\"aa\",\"ba\",\"baa\",\"b\",\"bb\",\"bbb\",\"bbbb\",\"bbbbb\"])"
    ],
    "sample_325": [
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(n = 192)",
        "isFascinating(789)",
        "isFascinating(781)",
        "isFascinating(786)",
        "isFascinating(n = 39)"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1,2,3,4])",
        "maximumTripletValue(nums = [1,2,3,4])",
        "maximumTripletValue(nums = [5, 4, 3, 2])",
        "maximumTripletValue([3, 1, 6, 2])",
        "maximumTripletValue([2, 3, 1, 4, 0])",
        "maximumTripletValue(nums = [3, 1, 4, 5, 3])",
        "maximumTripletValue(nums = [10, 4, 3, 5, 2])",
        "maximumTripletValue(nums = [10, 2, 3, 12])",
        "maximumTripletValue(nums = [2, 4, 2, 1, 3, 3])"
    ],
    "sample_312": [
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 1]])",
        "matrixSum(nums = [[1,2,3],[4,5,6]])",
        "matrixSum([[1, 2], [1, 3]])",
        "matrixSum(nums = [[1, 10], [9, 3], [2, 3]])",
        "matrixSum([[1,2,3], [2,2,2], [3,2,1]])",
        "matrixSum([[2,3,1],[0,1,2]])"
    ],
    "sample_281": [
        "minOperations(a = [3, 1, 2], b = [4, 1, 2])",
        "minOperations(a = [5, 1, 3], b = [1, 5, 3])",
        "minOperations(a = [5, 3, 4, 6], b = [8, 2, 6, 5])",
        "minOperations(a = [2, 1, 1], b = [2, 1, 2])",
        "minOperations(a = [1,2,3,4,5,6], b = [1,1,1,1,1,1])",
        "minOperations(a = [3, 1, 2, 4, 5], b = [1, 6, 4, 3, 2])",
        "minOperations(a = [1, 2, 3, 4], b = [1, 2, 1, 1])",
        "minOperations(a = [5, 4, 2], b = [7, 2, 1])",
        "minOperations(a = [2,5,6,9], b = [1,3,4,8])",
        "minOperations(a = [4, 1, 5, 1], b = [1, 6, 3, 4])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1, 2, 3, 4, 5, 6], nums2 = [1, 1, 2, 2, 2, 2])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,1,1,1], nums2 = [1,1,1,1])",
        "minOperations(nums1 = [2,1,2,4,2,2], nums2 = [5,2,6,2,3,2])",
        "minOperations(nums1 = [6,3,3,6], nums2 = [3,3,3,3])",
        "minOperations(nums1 = [4, 3, 2, 5], nums2 = [1, 2, 3, 10])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6, 7])",
        "maximumTripletValue(nums = [3, 1, 2])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maximumTripletValue(nums=[1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [4, 5, 2, 1])",
        "maximumTripletValue(nums = [10, 5, 1, 10])",
        "maximumTripletValue(nums = [4, -3, -1])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s = \"0110\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110\", k = 1)",
        "shortestBeautifulSubstring(s = \"00010110\", k = 2)",
        "shortestBeautifulSubstring(s = \"10101110111\", k = 3)",
        "shortestBeautifulSubstring(s = \"00100101\", k = 3)",
        "shortestBeautifulSubstring(s = \"111100011000\", k = 4)",
        "shortestBeautifulSubstring(s='01111000', k=3)",
        "shortestBeautifulSubstring(s=\"0110\", k=1)",
        "shortestBeautifulSubstring(s
    ],
    "sample_256": [
        "minimumSum(nums = [3,1,2,4])",
        "minimumSum(nums = [5,3,2,4])",
        "minimumSum(nums = [1,4,2,3])",
        "minimumSum(nums = [5,3,4,6,7])",
        "minimumSum(nums = [2,3,4,5,6])",
        "minimumSum(nums = [1, 15, 4, 11])",
        "minimumSum(nums = [5, 3, 2, 4])",
        "minimumSum(nums = [2,3,5,6,1,10])",
        "minimumSum(nums = [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumSum(nums = [9,2,5,4,6,8,3])"
    ],
    "sample_291": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"11011\")",
        "minimumSteps(\"000\")",
        "minimumSteps(s = \"010111\")",
        "minimumSteps(s = \"0111\")",
        "minimumSteps(s = \"0010010\")",
        "minimumSteps(s = \"1110000011\")",
        "minimumSteps(s
    ],
    "sample_279": [
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,1,1,1,1], nums2 = [1,1,1,1,1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1,1,1,2,1], nums2 = [2,1,2,1,2])",
        "minOperations(nums1 = [3, 3, 2, 1], nums2 = [2, 3, 1, 3])",
        "minOperations(nums1 = [2,3,5,2,2,1], nums2 = [6,1,3,2,2,1])",
        "minOperations(nums1 = [1, 2, 5, 4, 3, 2, 3, 4, 2, 2], nums2 = [3, 4, 5, 1, 1, 2, 3, 3, 2, 3])"
    ],
    "sample_277": [
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0,1,0],[1,0,1],[0,1,0]])",
        "findChampion(grid = [[1, 1, 0], [0, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [1, 0, 0]])",
        "findChampion(grid = [[1, 1, 0], [1, 1, 1], [1, 0, 0]])",
        "findChampion(grid = [[1,0,0],[1,1,0],[1,1,1]])",
        "findChampion(grid = [[0, 1, 0],\n                            [0, 0, 1],\n                            [0, 0, 0]])",
        "findChampion(grid = [[1,1,0],[0,0,1],[1,0,1]])",
        "findChampion(grid = [[1,1,0],[1,0,1],[1,1,1]])",
        "findChampion(grid = [[0,0,0], [1,1,1], [1,1,1]])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 15, m = 5)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 15, m = 4)",
        "differenceOfSums(n = 12, m = 3)",
        "differenceOfSums(n = 8, m = 2)",
        "differenceOfSums(15, 3)"
    ],
    "sample_292": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"001011\")",
        "minimumSteps(s = \"10110\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"00110\")",
        "minimumSteps(s = \"10111\")",
        "minimumSteps(s = \"01010\")",
        "minimumSteps(s = \"1110\")",
        "minimumSteps(s = \"001010\")",
        "minimumSteps(\"11101\")"
    ],
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [2,2,3,4])",
        "alternatingSubarray(nums = [2, 3, 4, 5])",
        "alternatingSubarray(nums = [2,3,5,4,6,7])",
        "alternatingSubarray(nums = [2, 2, 3, 4, 3, 3])",
        "alternatingSubarray(nums = [1, 2, 1, 1])",
        "alternatingSubarray(nums = [0,2,2,0])",
        "alternatingSubarray(nums = [2,3,1,2,4,3])",
        "alternatingSubarray(nums = [2, 3, 2, 4, 5, 3, 2, 1, 2, 3])"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,2], moveTo = [2,3])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,2], moveTo = [3,1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [2, 3], moveTo = [3, 3])",
        "relocateMarbles(nums = [2, 3], moveFrom = [2, 3], moveTo = [3, 2])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [3,1], moveTo = [2,1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3, 2], moveTo = [3, 1, 2])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [2, 3], moveTo = [3, 1])",
        "relocateMarbles(nums=[1, 2, 3, 4, 5, 6], moveFrom=[1, 2, 3], moveTo=[2, 3, 1])",
        "relocateMarbles(nums = [1,2,1,3,4,2], moveFrom = [1,2], moveTo = [2,1])",
        "relocateMarbles(nums=[1, 2, 3], moveFrom=[2, 3], moveTo=[2, 1])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1,2,3,4])",
        "maximumTripletValue(nums = [3, 1, 2])",
        "maximumTripletValue(nums = [3, 2, 1])",
        "maximumTripletValue(nums = [0, -1])",
        "maximumTripletValue(nums = [3, 1, 5, 7])",
        "maximumTripletValue(nums = [3, 0, 2, 1])",
        "maximumTripletValue(nums = [2, 1, 6, 1])",
        "maximumTripletValue(nums = [5,1,1,9,2,3])"
    ],
    "sample_273": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [1, 0, 1], [1, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[0,1,1],[1,1,0],[0,1,1]])",
        "findChampion(grid = [[0,1,1],[0,0,1],[1,0,0]])",
        "findChampion(grid = [[1,0,0], [0,0,0], [0,0,1]])",
        "findChampion(grid = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])",
        "findChampion(grid=[[1,1,1,1,1],[1,1,1,1,1],[0,0,0,0,0],[1,1,1,1,1],[1,1,1,1,1]])",
        "findChampion([[0,1,0,0], [1,0,0,0], [0,0,0,0], [1,0,0,0]])",
        "findChampion(grid = [[0,0,1,0,1],[0,1,0,1,0],[0,1,0,0,0],[0,1,0,0,0],[1,0,0,1,0]])"
    ],
    "sample_267": [
        "minSum(nums1 = [0, 1], nums2 = [0, 2])",
        "minSum(nums1 = [2, 1, 2, 1], nums2 = [1, 2, 3])",
        "minSum(nums1 = [5, 3, 2, 4], nums2 = [4, 2, 2, 5])",
        "minSum(nums1 = [1, 0, 0, 0], nums2 = [0, 0, 0, 1])",
        "minSum(nums1 = [1, 2, 1], nums2 = [3, 1, 2])",
        "minSum(nums1=[1, 0], nums2=[2, 1])",
        "minSum(nums1 = [4,3,2,1,0], nums2 = [0,1,2,3,4])",
        "minSum(nums1 = [100, 1, 0, 1], nums2 = [0, 1, 2, 0])",
        "minSum(nums1 = [4,5,1,1,3,2], nums2 = [3,2,4,1,5,1])",
        "minSum(nums1 = [-5, -100, 0, 5, 100], nums2 = [0, 5, -1, -100, -100])"
    ],
    "sample_294": [
        "minimumSteps(s = \"001011\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"1110\")",
        "minimumSteps(s = \"011101\")",
        "minimumSteps(\"1101\")",
        "minimumSteps(s = \"010010\")",
        "minimumSteps(s = \"0111\")",
        "minimumSteps(\"11101\")"
    ],
    "sample_274": [
        "findChampion(grid = [[0, 1], [0, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 0, 0]])",
        "findChampion(grid = [[1,1,0,0,0],[1,1,1,1,0],[1,0,0,0,0],[1,1,0,0,0],[1,1,1,1,1]])",
        "findChampion(grid = [[1, 0, 0], [1, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 1], [-1, 0]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 1], [1, 0, 1]])",
        "findChampion(grid = [[1,0,1], [1,1,1], [0,1,1]])",
        "findChampion(grid = [[1,1,0,0],[0,0,1,0],[1,0,0,1],[0,1,1,0]])",
        "findChampion(grid = [[0,0,1,0],[1,1,1,1],[0,0,0,0],[1,1,0,0]])",
        "findChampion(grid = [[0,1,0,0], [0,0,0,0], [1,1,0,1]])"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [3,3,2,2,1,1])",
        "minGroupsForValidAssignment(nums = [10,6,12,7,3,5])",
        "minGroupsForValidAssignment(nums=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "minGroupsForValidAssignment(nums=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "minGroupsForValidAssignment([2,1,3,3,3,2])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,2,2,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,1,3,3,3])",
        "minGroupsForValidAssignment([1, 1, 1, 1, 1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums=[2,1,1,1,1,1,3,4,1])",
        "minGroupsForValidAssignment(nums = [1,3,3,2,1,3,3,2,1,2,3,2])"
    ],
    "sample_270": [
        "minSum(nums1 = [1, 1, 1], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 1, 0], nums2 = [1, 1, 0])",
        "minSum(nums1 = [0, 0], nums2 = [0, 0, 0])",
        "minSum(nums1 = [0, 0, 0, 0, 0, 0, 0], nums2 = [1, 2, 3, 4, 5, 6, 7])",
        "minSum(nums1 = [5, 6, 7, 8, 9], nums2 = [1, 0, 3, 4, 7])",
        "minSum(nums1 = [1, 1, 0, 1, 1, 0, 1], nums2 = [0, 0, 1, 0, 1, 1, 1])",
        "minSum(nums1 = [4, 0, 0, 0], nums2 = [5, 6, 7])",
        "minSum(nums1=[1, 0, 0, 0, 0, 0], nums2=[1, 0, 1, 0, 0, 0, 0])",
        "minSum(nums1 = [1,3,0,4,2], nums2 = [5,1,1,2])",
        "minSum(nums1 = [1, 4], nums2 = [1, 0])"
    ],
    "sample_317": [
        "buyChoco(prices = [3,2,3], money = 3)",
        "buyChoco(prices = [3, 2, 3], money = 3)",
        "buyChoco(prices = [3, 2, 3], money = 3)",
        "buyChoco(prices = [1,2,2], money = 3)",
        "buyChoco(prices = [1,2,2], money = 3)",
        "buyChoco(prices=[1, 2, 2], money=3)",
        "buyChoco(prices = [1,2,3,4,5], money = 3)",
        "buyChoco(prices = [1,1,1,1], money = 3)",
        "buyChoco(prices = [10,10,10,10], money = 55)",
        "buyChoco(prices=[10, 7, 2], money=3)"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"aeiouu\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeiouu\", k = 5)",
        "beautifulSubstrings(s = \"a\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioooaauuuaeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 20)",
        "beautifulSubstrings(s = \"aaaaa\", k = 5)",
        "beautifulSubstrings(s = \"amazing\", k = 2)",
        "beautifulSubstrings(s = \"aeiouaeiouaeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeaaeioueaeeoieeei\", k = 3)"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abababa\")",
        "longestSemiRepetitiveSubstring(s = \"abca\")",
        "longestSemiRepetitiveSubstring(s = \"aaab\")",
        "longestSemiRepetitiveSubstring(\"pwwkew\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbc\")",
        "longestSemiRepetitiveSubstring(\"abcabca\")",
        "longestSemiRepetitiveSubstring(s = \"aaaba\")",
        "longestSemiRepetitiveSubstring(s = \"bbaaaccd\")",
        "longestSemiRepetitiveSubstring(s = \"qwqwqqwqw\")"
    ],
    "sample_341": [
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 4, y = 3, z = 2)",
        "longestString(x = 5, y = 4, z = 3)",
        "longestString(x = 1, y = 3, z = 5)",
        "longestString(x = 1, y = 5, z = 2)",
        "longestString(x = 2, y = 1, z = 1)",
        "longestString(x = 3, y = 3, z = 4)",
        "longestString(x = 4, y = 3, z = 4)",
        "longestString(x = 6, y = 3, z = 4)",
        "longestString(x = 10, y = 4, z = 5)"
    ],
    "sample_271": [
        "minSum(nums1=[1,1], nums2=[1,1])",
        "minSum(nums1 = [1,1,0,1], nums2 = [0,1,1,1])",
        "minSum(nums1 = [1,2,3,0], nums2 = [5,6,7,0])",
        "minSum(nums1 = [2, 4, 6], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1,2,3,4], nums2 = [0, 0, 0, 0])",
        "minSum(nums1=[0,0,1], nums2=[0,0,0])",
        "minSum(nums1 = [2, 2, 1, 1], nums2 = [1, 1, 2, 2])",
        "minSum(nums1 = [3,2,2], nums2 = [2,2,2,1])",
        "minSum(nums1 = [1,1,4,4], nums2 = [0,1,2,3])",
        "minSum(nums1 = [2, 5, 3, 4], nums2 = [5, 2, 4, 3])"
    ],
    "sample_340": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 1, y = 3, z = 2)",
        "longestString(x = 2, y = 4, z = 3)",
        "longestString(x = 4, y = 2, z = 3)",
        "longestString(x = 4, y = 6, z = 2)"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"1111111\", k = 3)",
        "shortestBeautifulSubstring(s = \"11\", k = 1)",
        "shortestBeautifulSubstring(s = \"10110110\", k = 2)",
        "shortestBeautifulSubstring(s = '112', k = 3)",
        "shortestBeautifulSubstring(s = '111111', k = 4)",
        "shortestBeautifulSubstring(s = '1234567', k = 3)",
        "shortestBeautifulSubstring(s = '111111111', k = 3)",
        "shortestBeautifulSubstring(s = '2211', k = 2)",
        "shortestBeautifulSubstring(s = \"11221\", k = 2)",
        "shortestBeautifulSubstring(s = '000110011', k = 3)"
    ],
    "sample_324": [
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(39)",
        "isFascinating(48)",
        "isFascinating(2205)"
    ],
    "sample_258": [
        "minimumSum(nums = [2, 5, 3, 9, 5, 3])",
        "minimumSum(nums = [1, 2, 3, 10])",
        "minimumSum(nums = [2, 3, 4, 5, 1])",
        "minimumSum(nums = [5, 3, 2, 6])",
        "minimumSum(nums = [2, 5, 9, 3, 7])",
        "minimumSum(nums = [2, 4, 1, 5, 9])",
        "minimumSum(nums = [1, 2, 3, 1, 2, 4])",
        "minimumSum(nums = [9, 8, 3, 4, 2, 1])",
        "minimumSum(nums = [10, 3, 1, 2, 4, 5, 8])",
        "minimumSum(nums = [1, 1, 1, 2, 3, 3, 3, 1])"
    ],
    "sample_268": [
        "minSum(nums1 = [5, 6, 7, 8], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [5, 5, 5], nums2 = [5, 5, 5])",
        "minSum(nums1 = [1, 2, 0, 3], nums2 = [4, 5, 2, 1])",
        "minSum(nums1 = [1, 2, 3, 0, 1, 0], nums2 = [0, 0, 0, 0, 0, 0])",
        "minSum(nums1 = [0,0,0,1,2], nums2 = [3,3,4])",
        "minSum(nums1 = [1, 3, 2, 4, 0, 0, 0], nums2 = [4, 3, 2, 1, 0, 0, 0])",
        "minSum(nums1 = [2, 1, 4, 0], nums2 = [0, 2, 2, 3])",
        "minSum(nums1=[1, 2, 3, 0], nums2=[0, 1, 0, 1, 0])",
        "minSum(nums1 = [2, 4, 1, 0], nums2 = [5, 6, 3, 7])",
        "minSum(nums1 = [1, 3, 0, 3, 0, 0, 2], nums2 = [0, 4, 5, 1, 2, 0, 1])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\")",
        "findMinimumOperations(s1 = \"abab\", s2 = \"abab\", s3 = \"abab\")",
        "findMinimumOperations(s1=\"banana\", s2=\"banana\", s3=\"banana\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"nana\", s3 = \"ana\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"na\", s3 = \"nana\")",
        "findMinimumOperations(s1=\"abab\", s2=\"baba\", s3=\"aaab\")",
        "findMinimumOperations(s1=\"babab\", s2=\"abab\", s3=\"ababb\")"
    ],
    "sample_321": [
        "maxStrength(nums = [3,-1,-5,2,5,6])",
        "maxStrength(nums = [2, 3, -1, 8, 7])",
        "maxStrength(nums = [2,-1,4,3])",
        "maxStrength(nums = [1,-4,-5,2,-3])",
        "maxStrength(nums=[0, 1, 2, 3])",
        "maxStrength(nums = [0, 1, 2, 3, -1, -2, -3, -4, 4])",
        "maxStrength(nums = [2, -5, 1, 4, -5, -6])",
        "maxStrength(nums = [5,-3,-1,-4,3,-8])",
        "maxStrength([-10, -10, 4, 1, 1, 3, 1, -10, -10])",
        "maxStrength(nums = [7, -2, -3, -1, -2, 4, 1, 5, -2, 8])"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,2], moveTo = [3,3])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [2,3], moveTo = [3,2])",
        "relocateMarbles(nums = [1, 1, 2], moveFrom = [1, 1], moveTo = [2, 2])",
        "relocateMarbles(nums = [1,2,3,4], moveFrom = [1,2], moveTo = [2,3])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [3, 2], moveTo = [1, 3])",
        "relocateMarbles(nums=[1,2,3], moveFrom=[3,2], moveTo=[3,1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [1, 1])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [4,2], moveTo = [1,4])",
        "relocateMarbles(nums = [2,3,1,5], moveFrom = [2,1], moveTo = [1,3])",
        "relocateMarbles(nums = [1,2,3,4,5,6], moveFrom = [1,2,5], moveTo = [4,2,5])"
    ],
    "sample_357": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums=[5,6,8,9], moveFrom=[6,8], moveTo=[7,9])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 8, 9], moveFrom = [1, 3, 4, 5], moveTo = [5, 6, 8, 9])",
        "relocateMarbles(nums = [9,5,7,6,8], moveFrom = [9,5], moveTo = [6,8])",
        "relocateMarbles(nums = [7, 8, 5, 9, 6], moveFrom = [9, 7], moveTo = [8, 6])",
        "relocateMarbles(nums = [1,2,3,5,6,7,8,9], moveFrom = [1,3], moveTo = [4,6])",
        "relocateMarbles(nums = [5,6,5,8,6,8,9], moveFrom = [5,6], moveTo = [6,8])",
        "relocateMarbles(nums = [9, 6, 5, 8, 7, 5], moveFrom = [5, 6], moveTo = [5, 8])",
        "relocateMarbles(nums = [5, 2, 1, 6, 8, 9], moveFrom = [5, 1, 9], moveTo = [9, 5, 1])",
        "relocateMarbles(nums = [3, 2, 4, 5, 8, 6, 9], moveFrom = [3, 8, 4, 9], moveTo = [1, 5, 3, 3])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [3,2,3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [2, 5], money = 3)",
        "buyChoco(prices = [1,2,3], money = 6)",
        "buyChoco(prices = [100, 10, 10], money = 100)",
        "buyChoco(prices = [5, 5, 3, 4], money = 10)",
        "buyChoco(prices=[1, 4], money=2)",
        "buyChoco(prices = [4, 2, 1, 1, 2, 2, 1], money = 5)",
        "buyChoco(prices = [10, 10, 20, 20, 10], money = 30)"
    ],
    "sample_308": [
        "matrixSum(nums = [[1, 2, 3], [3, 2, 1]])",
        "matrixSum(nums=[[1, 2], [3, 4], [5, 6]])",
        "matrixSum(nums = [[1, 1, 1], [0, 1, 1]])",
        "matrixSum(nums = [[2, 2, 1], [1, 2, 2], [3, 3, 3]])",
        "matrixSum(nums = [[1,3], [3,4]])",
        "matrixSum(nums = [[4, 1, 0], [0, 0, 1]])",
        "matrixSum(nums = [[3, 1, 4], [2, 2, 1], [1, 1, 3]])",
        "matrixSum(nums = [[1, 2, 3], [5, 7, 1], [10, 2, 2]])",
        "matrixSum(nums = [[1,2,2,3,1],[3,4,3,2,1]])",
        "matrixSum([[1, 2, 3, 11], [1, 4, 9, 10], [3, 4, 5, 9]])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [3, 2, 3], money = 3)",
        "buyChoco(prices = [2, 2, 3], money = 3)",
        "buyChoco(prices = [20, 10], money = 100)",
        "buyChoco(prices = [2, 3, 4], money = 12)",
        "buyChoco(prices = [5, 1], money = 5)",
        "buyChoco(prices = [10, 5, 10, 100, 10, 5], money = 55)",
        "buyChoco(prices = [1, 2, 5, 4], money = 11)",
        "buyChoco(prices = [10, 1, 2, 5, 9], money = 100)"
    ],
    "sample_259": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [3,1,2,4,5])",
        "minimumSum(nums = [2,1,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5,6])",
        "minimumSum(nums = [3,2,1,4])",
        "minimumSum(nums = [1,1,1,1,1,1])",
        "minimumSum(nums = [1,2,1])",
        "minimumSum(nums=[1,2,3,4,5,6,7,8])",
        "minimumSum(nums = [15, 14, 13, 12, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [2,3,4,3,4])",
        "alternatingSubarray(nums = [2, 3, 4, 3, 4])",
        "alternatingSubarray(nums = [2, 3, 4, 3, 2, 2, 2, 4])",
        "alternatingSubarray(nums = [2, 3, 4, 5, 6])",
        "alternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [2,3,3,2,2])",
        "alternatingSubarray(nums = [2, 3, 4, 3, 2, 2, 2, 4, 4, 4, 5])",
        "alternatingSubarray(nums = [2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 3, 4, 1, 2, 3, 3, 3])",
        "alternatingSubarray(nums = [5, 6, 7, 4, 3, 2, 3, 4, 5, 6, 3])"
    ],
    "sample_311": [
        "matrixSum(nums = [[1, 2, 3], [1, 2, 3], [1, 2, 3]])",
        "matrixSum(nums = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])",
        "matrixSum(nums = [[2, 2, 1], [1, 1, 1], [0, 0, 2]])",
        "matrixSum(nums = [[1, 2], [1, 2], [1, 2]])",
        "matrixSum(nums = [[5, 1, 7], [2, 3, 4]])",
        "matrixSum(nums = [[1, 2, 3], [2, 4, 1], [1, 2, 4]])",
        "matrixSum(nums=[[0, 0, 1], [0, 1, 0], [0, 0, 0]])",
        "matrixSum([[1,2,0],[3,0,0]])",
        "matrixSum(nums = [[3, 1, 0, 0, 0], [2, 2, 3, 0, 0], [1, 1, 1, 2, 3], [0, 2, 0, 3, 1]])",
        "matrixSum(nums = [[7, 3, 1, 4, 1], [1, 4, 1, 1, 1], [7, 1, 1, 5, 1], [1, 2, 1, 1, 1], [2, 3, 1, 3, 1]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 2, 2], money = 3)",
        "buyChoco(a = [1, 2, 2], money = 3)",
        "buyChoco(a = [2, 3, 4], money = 10)",
        "buyChoco(a = [10, 10, 10, 10], money = 50)",
        "buyChoco(a = [2, 3, 5], money = 8)",
        "buyChoco(a = [30, 10, 20], money = 100)",
        "buyChoco(a = [5, 3, 100, 10, 7], money = 7)",
        "buyChoco(a = [3, 1, 4], money = 20)",
        "buyChoco(a = [100, 10, 50], money = 500)",
        "buyChoco(a = [100, 2, 10], money = 2)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [2, 1, 3, 2])",
        "minGroupsForValidAssignment([3,3,3,3])",
        "minGroupsForValidAssignment([1,2,5,5,5,5])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,2,2,2,2,3,3,3,4,5,6])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,3,3,3,5,5,5,5,5])",
        "minGroupsForValidAssignment(nums = [1,1,3,2,3,1,1,2,2,1,1,2,3,2,3,1,1])",
        "minGroupsForValidAssignment(nums = [4,3,1,3,3,3,1,1,1,3,3,3,4,3,3,1,4])"
    ],
    "sample_276": [
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 0, 1], [1, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[1, 1, 0], [1, 1, 1], [0, 1, 1]])",
        "findChampion(grid = [[0,1,1], [1,0,1], [0,0,1]])",
        "findChampion(grid = [[1, 0, 0], [1, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[1,1,0],[1,0,1],[0,0,1]])",
        "findChampion(grid=[[0, 0, 1], [1, 0, 1], [0, 1, 1]])",
        "findChampion(grid = [[0,1,1,0,1],[1,0,0,1,0],[1,0,0,0,1],[0,1,0,1,0],[1,0,1,0,0]])",
        "findChampion(grid = [[1,0,1,1,1],[0,1,1,0,1],[1,0,1,0,0],[0,0,0,1,1],[1,1,0,1,1]])"
    ],
    "sample_320": [
        "maxStrength(nums = [2, -3, 1, 0, -5])",
        "maxStrength(nums = [2, -3, 1, 0, -5])",
        "maxStrength(nums = [2,-3,1,0,-5])",
        "maxStrength(nums=[2, -3, 1, 0, -5])",
        "maxStrength(nums = [1, 2, 3])",
        "maxStrength(nums = [1, 4, 5, 2])",
        "maxStrength(nums = [4, 2, 10])",
        "maxStrength(nums = [5, 3, 4, 6, 2])",
        "maxStrength(nums=[2, 2, 4, 5, 6])",
        "maxStrength(nums = [-3, 1, 5, -6])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"ab\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"bc\",\"cd\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"bb\", \"cc\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"b\"])",
        "minimizeConcatenatedLength([\"abc\", \"xyz\"])",
        "minimizeConcatenatedLength(words = [\"p\", \"q\"])",
        "minimizeConcatenatedLength(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"])",
        "minimizeConcatenatedLength(words=[\"c\", \"c\", \"c\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"aba\", \"ab\", \"bb\"])",
        "minimizeConcatenatedLength(words = [\"k\", \"aa\", \"aaa\"])"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"apple\", s3 = \"bananaapple\")",
        "findMinimumOperations(s1 = \"qwerty\", s2 = \"qwerty\", s3 = \"qwerty\")",
        "findMinimumOperations(s1=\"aaa\", s2=\"aaa\", s3=\"aaaa\")",
        "findMinimumOperations(s1 = \"bl\", s2 = \"yby\", s3 = \"by\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"a\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"abb\", s3 = \"ababb\")",
        "findMinimumOperations(s1 = \"xy\", s2 = \"x\", s3 = \"yz\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"abfce\", s3 = \"aabfce\")",
        "findMinimumOperations(s1=\"aaabbbccc\", s2=\"aaaabbbccc\", s3=\"aaaabbbccc\")"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [2,3,4,3,4])",
        "alternatingSubarray(nums = [4, 2, 5, 3])",
        "alternatingSubarray(nums = [2, 3, 4, 3, 4])",
        "alternatingSubarray(nums = [2, 3, 4, 3, 4])",
        "alternatingSubarray(nums = [2, 3, 4, 3, 2, 1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [4,2,3,4,5])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 1, 2])",
        "alternatingSubarray(nums = [2,3,3,3,3])",
        "alternatingSubarray(nums = [5,4,2,3,1,6,3,4])"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 1], [0, 0, 1], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 1], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 1],\n                            [1, 0, 1],\n                            [1, 1, 0]])",
        "findChampion(grid = [[0, 0, 1], [1, 1, 0], [1, 1, 0]])",
        "findChampion(grid = [[0,0,1],[0,0,1],[0,1,0]])",
        "findChampion(grid = [[1, 1, 1], [0, 1, 1], [0, 1, 0]])",
        "findChampion(grid=[[0, 1, 0], [1, 0, 1], [1, 1, 1]])",
        "findChampion(grid=[[1,0,1],[1,1,0],[0,1,1]])",
        "findChampion(grid=[[1,0,0,0], [0,0,1,1], [0,1,0,0], [0,1,0,0]])"
    ],
    "sample_304": [
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors(details=[\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors([\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors(details = ['7868190130M7522', '5303914400F9211', '9273338290F4010'])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"aeiouu\", k = 2)",
        "beautifulSubstrings(s = \"aeiouu\", k = 2)",
        "beautifulSubstrings(s = \"aeiouu\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"abacaba\", k = 2)",
        "beautifulSubstrings(s = \"aabbaa\", k = 3)",
        "beautifulSubstrings(s = \"abcdae\", k = 2)",
        "beautifulSubstrings(s = \"babac\", k = 3)",
        "beautifulSubstrings(s = \"aeeeeiiou\", k = 1)"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = \"110\", k = 1)",
        "shortestBeautifulSubstring(s = \"1111111111\", k = 1)",
        "shortestBeautifulSubstring(s = \"1110011100\", k = 2)",
        "shortestBeautifulSubstring(s=\"111000\", k=2)",
        "shortestBeautifulSubstring(s = \"110110110\", k = 1)",
        "shortestBeautifulSubstring(s = '11100011', k = 2)",
        "shortestBeautifulSubstring(s = \"1111111111101111111111111111\", k = 2)",
        "shortestBeautifulSubstring(s = \"1110001111000\", k = 3)",
        "shortestBeautifulSubstring(s = \"11001111100\", k = 3)"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"bb\", \"ab\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"a\",\"b\",\"c\",\"d\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"ba\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"aa\", \"aa\"])",
        "minimizeConcatenatedLength(words = [\"hello\", \"world\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"xy\",\"ab\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"abc\", \"cd\"])"
    ],
    "sample_327": [
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(n = 192)",
        "isFascinating(791)",
        "isFascinating(79)",
        "isFascinating(123)",
        "isFascinating(23)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1], [1]])",
        "matrixSum(nums = [[1,1], [2,2]])",
        "matrixSum([[1,2,3], [1,2], [1]])",
        "matrixSum([[2, 5], [2, 3]])",
        "matrixSum(nums = [[1,3], [3, 5]])",
        "matrixSum(nums = [[4, 3, 2], [4, 1, 1]])",
        "matrixSum(nums = [[2, 3, 1], [1, 2, 0], [0, 0, 2]])",
        "matrixSum(nums = [[4, 6, 7], [3, 5, 1]])",
        "matrixSum(nums = [[1, 2, 10], [5, 8, 9], [3, 7, 4]])",
        "matrixSum([[1], [2, 3]])"
    ],
    "sample_326": [
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(n = 192)"
    ],
    "sample_275": [
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[1,0,0],[0,1,0],[0,0,1]])",
        "findChampion(grid = [[0,1,1],[1,0,1],[1,1,0]])",
        "findChampion(grid = [[1,0,0], [0,1,0], [0,0,1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 1], [1, 1, 1]])",
        "findChampion(grid = [[0,1,1], [1,0,1], [1,1,0]])",
        "findChampion(grid = [[0, 0, 1], [0, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 1, 1], [0, 1, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [1, 0, 0]])",
        "findChampion(grid=[[0, 1, 1], [0, 0, 1], [1, 1, 1]])"
    ],
    "sample_260": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [5,4,3,2,1])",
        "minimumSum(nums = [2, 5, 3, 1, 4, 9])",
        "minimumSum(nums = [9, 10, 11, 12])",
        "minimumSum(nums = [1, 10, 4, 2, 3, 5])",
        "minimumSum(nums = [3, 1, 5, 6])",
        "minimumSum([1, 1, 1, 2, 3, 4])",
        "minimumSum(nums = [2,1,1,1,1])",
        "minimumSum(nums = [10, 1, 4, 3, 2, 5])",
        "minimumSum(nums = [4, 2, 1, 10, 3, 7, 6])"
    ],
    "sample_322": [
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(498)",
        "isFascinating(20143)"
    ],
    "sample_248": [
        "minOperations(s1 = \"1110\", s2 = \"10101\", x = 4)",
        "minOperations(s1 = \"1110\", s2 = \"0101\", x = 2)",
        "minOperations(s1 = \"101\", s2 = \"110\", x = 2)",
        "minOperations(s1 = \"1110\", s2 = \"0100\", x = 3)",
        "minOperations(s1 = \"110\", s2 = \"011\", x = 1)",
        "minOperations(s1 = \"1001\", s2 = \"0101\", x = 4)",
        "minOperations(s1 = \"101111\", s2 = \"110000\", x = 2)",
        "minOperations(s1 = \"11011\", s2 = \"10110\", x = 11)",
        "minOperations(s1 = \"101010110\", s2 = \"100101000\", x = 1)",
        "minOperations(s1 = \"010000010\", s2 = \"010000011\", x = 10)"
    ],
    "sample_342": [
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 3, y = 3, z = 2)",
        "longestString(x = 2, y = 4, z = 1)",
        "longestString(x = 3, y = 2, z = 2)",
        "longestString(x = 3, y = 5, z = 1)",
        "longestString(x = 2, y = 2, z = 3)",
        "longestString(x = 3, y = 6, z = 2)",
        "longestString(x = 3, y = 6, z = 1)",
        "longestString(x = 5, y = 3, z = 4)"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 6], moveTo = [9, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 2, 3, 4, 5], moveTo = [5, 6, 7, 8, 9])",
        "relocateMarbles(nums = [1, 2, 5, 6, 8, 9], moveFrom = [1, 2], moveTo = [5, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 2, 3], moveTo = [9, 5, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3, 5, 7], moveTo = [7, 8, 5, 9])",
        "relocateMarbles(nums = [1, 5, 8, 6, 9], moveFrom = [5, 6], moveTo = [7, 4])",
        "relocateMarbles(nums = [5, 6, 8, 9, 3], moveFrom = [8, 9], moveTo = [8, 5])",
        "relocateMarbles(nums = [1, 3, 5, 8, 9, 10], moveFrom = [5, 3, 8], moveTo = [6, 5, 9])",
        "relocateMarbles(nums = [5, 4, 6, 2, 8, 9, 5, 4], moveFrom = [5, 4, 2, 5], moveTo = [6, 9, 8, 4])",
        "relocateMarbles(nums = [8, 5, 9, 6, 7], moveFrom = [5, 7, 8], moveTo = [9, 8, 6])"
    ],
    "sample_306": [
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors([\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors([\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors([\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors(details=[\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors(details = [\"9303034444\", \"8303035555\", \"7303036666\"])"
    ],
    "sample_303": [
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors([\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors(details=['7868190130M7522', '5303914400F9211', '9273338290F4010'])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [6, 8, 9, 5], moveFrom = [6, 9], moveTo = [5, 8])",
        "relocateMarbles(nums=[5, 6, 7, 8, 9], moveFrom=[7, 8], moveTo=[7, 9])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 8, 9], moveFrom = [1, 4], moveTo = [5, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 7], moveTo = [5, 9])",
        "relocateMarbles(nums = [5, 1, 6, 2, 8, 9], moveFrom = [1, 2], moveTo = [5, 9])",
        "relocateMarbles(nums = [2, 3, 5, 8, 9, 6], moveFrom = [2, 5], moveTo = [6, 8])",
        "relocateMarbles(nums=[1, 5, 6, 8, 9], moveFrom=[5, 6, 8, 9], moveTo=[6, 5, 8, 9])",
        "relocateMarbles(nums = [7, 9, 5, 8, 6], moveFrom = [9, 7, 5], moveTo = [6, 8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [8, 6, 6, 9], moveTo = [9, 8, 9, 9])",
        "relocateMarbles(nums = [5, 1, 2, 4, 6, 9, 8, 10], moveFrom = [2, 10], moveTo = [9, 1])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"xyz\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"abab\", s2 = \"abab\", s3 = \"abab\")",
        "findMinimumOperations(s1 = \"xxx\", s2 = \"yyy\", s3 = \"zzz\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"a\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"bana\")",
        "findMinimumOperations(s1=\"aaa\", s2=\"bbb\", s3=\"cc\")",
        "findMinimumOperations(s1=\"ac\", s2=\"ab\", s3=\"ab\")",
        "findMinimumOperations(s1=\"abca\", s2=\"dgba\", s3=\"dab\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"banana\", s2 = \"banana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"hello\", s2 = \"world\", s3 = \"hello\")",
        "findMinimumOperations(s1 = \"aa\", s2 = \"aa\", s3 = \"aa\")",
        "findMinimumOperations(s1 = \"aaaa\", s2 = \"aa\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"man\", s2 = \"man\", s3 = \"man\")",
        "findMinimumOperations(s1 = \"apple\", s2 = \"ple\", s3 = \"apple\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"banana\", s3 = \"bna\")",
        "findMinimumOperations(s1 = \"qwerty\", s2 = \"qweqwe\", s3 = \"qwerty\")"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation([2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [4, 3, 2, 1])",
        "semiOrderedPermutation([3, 1, 2])",
        "semiOrderedPermutation(nums = [3, 2, 1])",
        "semiOrderedPermutation(nums = [3,1,2,4])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1,2,3,4,5,6])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1,3,2,2,5,2,3,7])",
        "continuousSubarrays(a = [3, 2, 1, 4, 5])",
        "continuousSubarrays(a = [3, 3, 3, 3])",
        "continuousSubarrays(a = [1, 2, 3, 2, 1, 1])",
        "continuousSubarrays(a = [1,1,1,1])",
        "continuousSubarrays(a = [1, 2, 3, 4, 2, 3, 4, 5])",
        "continuousSubarrays(a = [1, 3, 2, 4, 1, 2, 2, 3, 1])",
        "continuousSubarrays(a = [2, 3, 5, 5, 3, 2])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [1,2,3,4])",
        "continuousSubarrays(nums = [1,2,3,4])",
        "continuousSubarrays(nums = [1, 2, 3, 4])",
        "continuousSubarrays(nums = [1,2,3,4,5])",
        "continuousSubarrays(nums = [1,2,3,4,5,6])",
        "continuousSubarrays(nums = [1, 2, 1, 2, 1, 2])",
        "continuousSubarrays([2,3,4,5])",
        "continuousSubarrays(nums = [5, 5, 5, 6, 5, 6])",
        "continuousSubarrays(nums = [2,2,1,1,3,3,4,5,6])",
        "continuousSubarrays(nums = [5, 2, 4, 7, 6])"
    ],
    "sample_8": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,2],[2,3],[3,4]])",
        "colorTheArray(n = 2, queries = [[0,1],[0,2]])",
        "colorTheArray(n = 4, queries = [[0, 1], [1, 0], [2, 3], [3, 0]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 1], [2, 2], [1, 1]])",
        "colorTheArray(n = 3, queries = [[2,1], [0,2], [1,1], [0,1], [2,0]])",
        "colorTheArray(n = 5, queries = [[3,1], [3,2], [4,2], [1,1]])",
        "colorTheArray(n = 5, queries = [[2,1],[2,2],[1,3],[1,1],[2,1]])"
    ],
    "sample_97": [
        "maximumJumps(nums = [1,2,3,4], target = 1)",
        "maximumJumps(nums = [3,2,1,1,2,3,1], target = 2)",
        "maximumJumps(nums = [1,1,1,1,1,1,1,1,1], target = 0)",
        "maximumJumps(nums = [1,0,2,4,3,0], target = 5)",
        "maximumJumps(nums = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -",
        "maximumJumps(nums = [2,0,1,4,5], target = 3)",
        "maximumJumps(nums = [4,0,0,0,0], target = 5)",
        "maximumJumps(nums = [3,0,1,6,9,8], target = 4)",
        "maximumJumps(nums = [2, 4, 5, 2, 1], target = 1)",
        "maximumJumps(nums = [3,3,6,6,8,8,11,11], target = 1)"
    ],
    "sample_22": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABC\")",
        "minLength(s = \"BCDAB\")",
        "minLength(\"ABCABCD\")",
        "minLength(s = \"ABBAAC\")",
        "minLength(s = \"AABABCD\")",
        "minLength(s = \"ACBDC\")",
        "minLength(s = \"BBABCCBC\")"
    ],
    "sample_7": [
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2]])",
        "colorTheArray(n = 4, queries = [[0,1],[1,2],[2,1],[3,2]])",
        "colorTheArray(n = 4, queries = [[0,1],[1,2],[2,1],[3,2]])",
        "colorTheArray(n = 4, queries = [[0, 1], [1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 2, queries = [[0, 32], [1, 32]])",
        "colorTheArray(n = 5, queries = [[0,1],[2,1],[3,1],[4,1]])",
        "colorTheArray(n=5, queries=[[0, 3], [4, 4], [1, 1], [3, 1], [1, 4]])",
        "colorTheArray(n = 4, queries = [[2, 2], [1, 1], [1, 2], [3, 1], [2, 1]])"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 1], [3, 2], [2, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 1], [3, 2], [2, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 1], [3, 2], [4, 1]])",
        "colorTheArray(n = 5, queries = [[0,1], [1,2], [2,1], [3,2], [3,1]])",
        "colorTheArray(n = 5, queries = [[0, 100], [1, 100], [2, 100], [3, 100], [4, 100]])",
        "colorTheArray(n = 5, queries = [[0, 3], [1, 1], [2, 2], [3, 3], [4, 1]])",
        "colorTheArray(n = 5, queries = [[1,1],[3,2],[2,1],[5,2],[1,1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [2, 1], [2, 2], [1, 1], [0, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 1], [3, 2], [4, 1], [1, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [3, 2], [2, 1], [1, 2], [2, 2]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [2,3,1,4,4])",
        "semiOrderedPermutation(nums=[2,3,4,1,5])",
        "semiOrderedPermutation(nums=[2,3,4,1,5])",
        "semiOrderedPermutation(nums = [4,2,3,1])",
        "semiOrderedPermutation(nums = [3,1,4,2])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [2,3,1,5,4])",
        "semiOrderedPermutation([2,3,1,4,4])",
        "semiOrderedPermutation(nums=[2, 3, 1, 4])"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [2,3,4,5], threshold = 4)",
        "longestAlternatingSubarray(nums = [2,3,4,5], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4], threshold = 4)",
        "longestAlternatingSubarray(nums = [1,2,3,4], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5], threshold = 2)",
        "longestAlternatingSubarray(nums = [2,3,4,5,6,7,8,9], threshold = 4)",
        "longestAlternatingSubarray(nums = [2,3,2,3,4], threshold = 3)"
    ],
    "sample_33": [
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = \"5123000\")",
        "removeTrailingZeros(num = \"51230000001\")",
        "removeTrailingZeros(num = \"512300000\")",
        "removeTrailingZeros(num
        "removeTrailingZeros(num = \"5123000\")"
    ],
    "sample_50": [
        "smallestString(s = \"abaab\")",
        "smallestString(s = \"aaaab\")",
        "smallestString(s = \"aaab\")",
        "smallestString(s = \"aaab\")",
        "smallestString(\"abaab\")",
        "smallestString(s=\"aabaa\")",
        "smallestString(s = \"baaaa\")",
        "smallestString(s = \"bbaab\")",
        "smallestString(\"aaaa\")",
        "smallestString(s=\"a\"*1000)"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [3,2,3,4,2])",
        "distinctDifferenceArray(nums = [5, 2, 1, 3, 4])",
        "distinctDifferenceArray(nums = [2,3,4,5,6])",
        "distinctDifferenceArray(nums = [5, 7, 9, 10, 11])",
        "distinctDifferenceArray(nums = [4,5,4,4,5,5])"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 5)",
        "distanceTraveled(mainTank = 5, additionalTank = 4)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 10)",
        "distanceTraveled(mainTank = 8, additionalTank = 3)"
    ],
    "sample_118": [
        "minimumIndex(nums = [2, 2, 1, 1, 1, 2, 2])",
        "minimumIndex(nums = [2, 2, 1, 1, 1, 2, 2])",
        "minimumIndex(nums = [2,2,1,1,1,2,2])",
        "minimumIndex(nums = [2,2,1,2])",
        "minimumIndex(nums = [2, 1, 2, 2, 2, 2, 2, 2])",
        "minimumIndex(nums = [2, 1, 1, 1, 2, 2, 2])",
        "minimumIndex(nums = [2,1,1,2,1,1,2])",
        "minimumIndex(nums = [1, 2, 1, 1, 3, 3, 2])",
        "minimumIndex(nums = [1,2,2,3,4,4,5])",
        "minimumIndex(nums = [2,1,3,1,1,4,1,4,1,4])"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [2,5,1,4])",
        "countBeautifulPairs(nums = [2,5,1,4])",
        "countBeautifulPairs(nums = [2,5,1,4])",
        "countBeautifulPairs(nums = [2,5,1,4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6])",
        "countBeautifulPairs(nums = [21,22,23])",
        "countBeautifulPairs(nums = [13,25,83,77])",
        "countBeautifulPairs(nums=[12, 21, 32])"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = '5123000')",
        "removeTrailingZeros(num = '5123000')",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = '51230000')",
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = \"51230000001\")",
        "removeTrailingZeros(num = \"51230001000\")"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"abcabcabc\")",
        "minimizedStringLength(s = \"abac\")",
        "minimizedStringLength(s = \"aabbccdd\")",
        "minimizedStringLength(s = \"abcb\")",
        "minimizedStringLength(s = \"pqrstuv\")",
        "minimizedStringLength(s = \"banaan\")",
        "minimizedStringLength(s = \"abbbbbba\")",
        "minimizedStringLength(s = \"mynameisjosephcowher\")"
    ],
    "sample_111": [
        "maximumBeauty(nums = [3,1,5,4,2], k = 2)",
        "maximumBeauty(nums = [1,2,3,4], k = 1)",
        "maximumBeauty(nums = [1,3,1,4,2,3,5,4], k = 2)",
        "maximumBeauty(nums = [2,3,1,5,4], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 5], k = 2)",
        "maximumBeauty(nums = [4, 5, 3, 2, 1], k = 2)",
        "maximumBeauty(nums = [5,4,2,1,3], k = 1)",
        "maximumBeauty(nums = [1, 2, 1, 3, 2, 3, 3, 1, 1, 2], k = 2)",
        "maximumBeauty(nums = [1,5,4,1,4,3,5,3], k = 1)",
        "maximumBeauty(nums = [1,2,2,1,4,4,4,1,4,4,2], k = 1)"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 2, num2 = 3)",
        "makeTheIntegerZero(num1 = 2, num2 = 1)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 1, num2 = 2)",
        "makeTheIntegerZero(num1 = 6, num2 = 4)",
        "makeTheIntegerZero(num1 = 2, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 11)",
        "makeTheIntegerZero(num1 = 17, num2 = 2)",
        "makeTheIntegerZero(num1 = 34, num2 = 8)"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1,3,2,4])",
        "findValueOfPartition(nums = [3, 9, 7, 3])",
        "findValueOfPartition(nums = [3, 9, 7, 3])",
        "findValueOfPartition(nums = [3, 9, 7, 3])",
        "findValueOfPartition(nums = [3, 9, 7, 1])",
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [9, 7, 5, 2])",
        "findValueOfPartition(nums = [1, 6, 3, 2, 5, 4])",
        "findValueOfPartition(nums = [3, 1, 3, 4])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 2, additionalTank = 3)",
        "distanceTraveled(mainTank = 6, additionalTank = 1)",
        "distanceTraveled(mainTank = 6, additionalTank = 0)",
        "distanceTraveled(mainTank = 11, additionalTank = 1)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1,0,1,1,0])",
        "doesValidArrayExist(derived = [0,1,0,1,0])",
        "doesValidArrayExist(derived = [0,0,0])",
        "doesValidArrayExist([1, 1, 0, 0, 0, 1])",
        "doesValidArrayExist(derived = [0,1,0,1,0,0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [0,1,1,1,1,1,1])",
        "doesValidArrayExist(derived = [0,1,1,1,0,1,1,0,0,1,0,0])"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = 'nen')",
        "makeSmallestPalindrome(s = 'nice')",
        "makeSmallestPalindrome(s = 'enevn')",
        "makeSmallestPalindrome(s = 'nenen')",
        "makeSmallestPalindrome(s = 'nrve')"
    ],
    "sample_110": [
        "checkArray(nums = [4, 2, 3, 1, 12], k = 2)",
        "checkArray(nums = [4, 2, 3, 1, 12], k = 2)",
        "checkArray(nums = [4,2,3,1,100,0], k = 2)",
        "checkArray(nums = [3, 2, 1, 5, 4], k = 2)",
        "checkArray(nums = [2, 0, 0, 1, 3], k = 1)",
        "checkArray(nums = [2, 3, 1, 1], k = 1)",
        "checkArray(nums = [5, 4, 0, 4, 2], k = 2)",
        "checkArray(nums = [0, 0, 0, 0, 1, 0, 0, 0, 0, 0], k = 1)",
        "checkArray(nums = [8, 5, 6, 3, 1, 2, 6], k = 3)",
        "checkArray(nums = [3, 2, 1, 0, 4, 6, 7, 10, 12], k = 3)"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [1,1,0,1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [1,0,1,0,1,0,1,0,1,0])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 1, 0, 0])",
        "doesValidArrayExist(derived = [1,1,1,0,1,1,0,1])",
        "doesValidArrayExist(derived = [1,0,1,1,1,0,0,0])",
        "doesValidArrayExist(derived = [1,0,1,1,1,0,0,1,0])",
        "doesValidArrayExist([1, 1, 0, 0, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 0, 1, 0, 1, 0, 1, 1, 1])"
    ],
    "sample_54": [
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s='kddsbncd')",
        "smallestString(s = \"kddsbncf\")",
        "smallestString(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "smallestString(s = \"kdssbbcd\")",
        "smallestString(s = 'daaaaaa')",
        "smallestString(s = 'kdwsncd')",
        "smallestString(s = \"zdccbncb\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3])",
        "continuousSubarrays(A = [1,2,3,4,5,6,7,8,9,10])",
        "continuousSubarrays(A = [1,2,3,3,4,5])",
        "continuousSubarrays(A = [1, 2, 2, 1, 3, 4])",
        "continuousSubarrays(A = [1,2,3,5,4])",
        "continuousSubarrays(A = [1, 2, 3, 2, 2, 2])",
        "continuousSubarrays(A = [1, 3, 3, 2, 2, 2, 1, 1, 1])",
        "continuousSubarrays(A = [1, 3, 3, 3, 1, 3])",
        "continuousSubarrays(A = [2, 3, 1, 5, 4, 1, 1])",
        "continuousSubarrays(A = [2,5,5,2,3,3,2,1,4,4])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"aba\")",
        "makeSmallestPalindrome(s = \"abb\")",
        "makeSmallestPalindrome(s = \"abb\")",
        "makeSmallestPalindrome(s = \"aaab\")",
        "makeSmallestPalindrome(s = \"aaaa\")",
        "makeSmallestPalindrome(s = \"aaa\")",
        "makeSmallestPalindrome(s=\"aabba\")",
        "makeSmallestPalindrome(s=\"bbbaa\")"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [3,9,7,8])",
        "findValueOfPartition(nums = [1, 3, 2])",
        "findValueOfPartition(nums = [1, 3])",
        "findValueOfPartition(nums = [1,3,2,4])",
        "findValueOfPartition(nums = [3, 1, 2])",
        "findValueOfPartition(nums = [3, 9, 7, 1])",
        "findValueOfPartition(nums = [1, 3, 100])",
        "findValueOfPartition(nums = [1,3,5,10])",
        "findValueOfPartition(nums = [1, 10, 15])"
    ],
    "sample_51": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString('kddsbncd')",
        "smallestString('abcd')",
        "smallestString(s = \"bddsbncd\")",
        "smallestString(s = \"cbz\")",
        "smallestString('aaaaaaaaa')",
        "smallestString(s = 'zdksbncd')",
        "smallestString(s = \"zbqza\")"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [2,4,6,8,10], k = 2)",
        "maximumBeauty(nums = [4, 2, 2, 2, 4, 4, 2, 2], k = 0)",
        "maximumBeauty(nums = [1, 2, 3, 5, 6], k = 3)",
        "maximumBeauty(nums = [3,4,5,6,7,8,9,10,11,12,13,14], k = 2)",
        "maximumBeauty(nums = [5,3,6,100,7,8], k = 2)",
        "maximumBeauty(nums = [2, 1, 5, 4, 2, 3, 2], k = 1)",
        "maximumBeauty(nums = [3,2,4,2,1,3,2,5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 6, 7, 8, 9, 12, 13, 15, 16, 17, 19], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 3, 2, 5, 4, 5, 2, 1, 1], k = 1)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 3, 4, 4, 5, 5], k = 4)",
        "checkArray(nums = [1, 2, 3, 3, 4, 5], k = 3)",
        "checkArray(nums = [2,2,3,3,3,4,4,4,5,5], k = 4)",
        "checkArray(nums=[1,1,1,1], k=2)",
        "checkArray(nums = [3,2,1,2,3,4,3,4,5,6], k = 3)",
        "checkArray(nums = [5,1,6], k = 2)",
        "checkArray(nums = [1,1,2,3,4,4,4,4], k = 4)",
        "checkArray(nums = [2,1,1,1,1,1], k = 1)",
        "checkArray(nums = [5,3,5,3,1], k = 3)"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 0, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 3)",
        "distanceTraveled(mainTank = 12, additionalTank = 3)",
        "distanceTraveled(mainTank=10, additionalTank=0)",
        "distanceTraveled(mainTank=3, additionalTank=0)"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums=[3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums=[3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [2, 3, 1, 2, 2])",
        "distinctDifferenceArray(nums = [4,5,2,2,7,10])",
        "distinctDifferenceArray(nums = [4, 5, 6, 5, 7])",
        "distinctDifferenceArray(nums = [2,3,1,0])",
        "distinctDifferenceArray(nums = [42,11,1,93])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(A = [2,2,2,1,2,1,1,2,2,2])",
        "continuousSubarrays(A=[1, 2, 2, 3, 3, 3])",
        "continuousSubarrays(A = [1,2,3,4,5,6,7,7,7])",
        "continuousSubarrays(A = [1,3,2,1,2,4])",
        "continuousSubarrays([0, 0, 0, 1, 1, 1, 0, 0, 0])",
        "continuousSubarrays(A = [1,2,3,2,1,2,3,4,3,2,3])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1, 2, 3, 3, 3, 2, 1, 1])",
        "continuousSubarrays([1,2,3,4,5,3,1,2,3,4,5,4,3,4,4,5,1])",
        "continuousSubarrays([2,3,2,4,2,4,2,5,6,7,7,2,3])"
    ],
    "sample_6": [
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 3, queries = [[0,1],[1,2]])",
        "colorTheArray(n = 1, queries = [[0,10]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,2],[2,3],[3,4]])",
        "colorTheArray(n = 3, queries = [[1,0],[2,1],[0,1]])",
        "colorTheArray(n = 4, queries = [[1,1],[2,2],[3,3],[2,1]])",
        "colorTheArray(n = 3, queries = [[0,2],[1,1],[0,1]])",
        "colorTheArray(n = 5, queries = [[3,1],[2,1],[4,1],[3,1],[2,1],[1,0]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,1],[1,1],[3,1],[4,1],[3,2],[2,2],[2,1]])"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 2)",
        "makeTheIntegerZero(a = 5, b = 2)",
        "makeTheIntegerZero(a = 5, b = 2)",
        "makeTheIntegerZero(a = 11, b = 2)",
        "makeTheIntegerZero(a = 4, b = 1)",
        "makeTheIntegerZero(a=10, b=2)",
        "makeTheIntegerZero(a = 11, b = 3)",
        "makeTheIntegerZero(a=9, b=4)",
        "makeTheIntegerZero(a = 23, b = 13)"
    ],
    "sample_100": [
        "maximumJumps(nums = [1, 3, 6, 7, 8, 10], target = 3)",
        "maximumJumps(nums = [1,2,3,4,5], target = 1)",
        "maximumJumps(nums = [1,2,3,4,5], target = 1)",
        "maximumJumps(nums = [1,2,3,4,5,6,7,8,9], target = 1)",
        "maximumJumps(nums = [1, 3, 5, 10, 15, 17], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 10], target = 2)",
        "maximumJumps(nums = [2,3,4,5,6], target = 4)",
        "maximumJumps(nums = [1, 5, 2, 4, 2, 2, 3, 1, 1, 1], target = 3)",
        "maximumJumps(nums = [1, 1, 1, 0, 1, 1, 2, 1], target = 3)",
        "maximumJumps(nums = [1, 1, 2, 1, 4, 3, 5, 4], target = 2)"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [2,3,4,5], threshold = 4)",
        "longestAlternatingSubarray(nums = [2,3,4,5], threshold = 4)",
        "longestAlternatingSubarray(nums = [2,3,4,5], threshold = 5)",
        "longestAlternatingSubarray(nums=[2,3,4,5], threshold=4)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6], threshold = 5)",
        "longestAlternatingSubarray(nums = [2,3,4,5,6,7,8], threshold = 4)",
        "longestAlternatingSubarray(nums = [2,3,4,7,10], threshold = 5)",
        "longestAlternatingSubarray(nums = [2,4,6,8,10,12,14], threshold = 1)",
        "longestAlternatingSubarray(nums = [4,1,1,2,3,4], threshold = 4)"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 4, 3])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [0, 5, 2, 1])",
        "maxNonDecreasingLength(a = [1,2,3,4], b = [4,3,2,1])",
        "maxNonDecreasingLength(a = [1, 4, 5, 7], b = [2, 3, 4, 8])",
        "maxNonDecreasingLength(a = [2, 3, 4, 5], b = [2, 1, 2, 3])",
        "maxNonDecreasingLength(a = [4, 6, 1, 7], b = [3, 4, 2, 9])",
        "maxNonDecreasingLength(a = [1, 2, 3, 10, 5, 6, 7], b = [4, 3, 2, 10, 7, 6, 5])",
        "maxNonDecreasingLength(a = [2, 1, 5, 7, 6, 5], b = [1, 1, 6, 7, 6, 7])",
        "maxNonDecreasingLength(a = [1, 100, 99, 1000], b = [50, 100, 101, 100])",
        "maxNonDecreasingLength(a=[1,3,2,4,3,5,3], b=[5,3,5,6,4,2,4])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits([0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums=[1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,0,0,1,0,0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1, 0, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0,"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [3,2,5,4], threshold = 5)",
        "longestAlternatingSubarray(nums = [2,3,4,5], threshold = 4)",
        "longestAlternatingSubarray(nums = [1,2,3,4], threshold = 4)",
        "longestAlternatingSubarray(nums = [1,2,3], threshold = 1)",
        "longestAlternatingSubarray(nums = [4,2,5,3], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 2, 3, 4], threshold = 1)",
        "longestAlternatingSubarray(nums = [8,5,4,3,2,1], threshold = 2)",
        "longestAlternatingSubarray(nums = [2,3,5,2,9,10,11], threshold = 10)",
        "longestAlternatingSubarray(nums = [3, 2, 5, 4], threshold = 5)",
        "longestAlternatingSubarray(nums=[0, 3, 1, 3, 5, 2, 1, 5, 2, 4, 1, 0, 2, 0], threshold=2)"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 5])",
        "findValueOfPartition(nums = [9, 7, 5, 2, 10, 8])",
        "findValueOfPartition(nums = [9,3,5])",
        "findValueOfPartition(nums = [9, 7, 5, 2, 10])",
        "findValueOfPartition(nums = [1, 3, 1])",
        "findValueOfPartition(nums = [4,3,2,6])",
        "findValueOfPartition(nums = [4,1,2,7,5,10,3])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = 'abca')",
        "makeSmallestPalindrome(s = 'abca')",
        "makeSmallestPalindrome(s = 'abba')",
        "makeSmallestPalindrome(s = 'aabb')",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = 'abcb')",
        "makeSmallestPalindrome(s='aba')",
        "makeSmallestPalindrome(s = 'aa')"
    ],
    "sample_18": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCABC\")",
        "minLength(s = \"CDAB\")",
        "minLength(s = \"AABB\")",
        "minLength(s = \"BACD\")",
        "minLength(\"ABABABCD\")",
        "minLength(s = \"ABABABABAB\")"
    ],
    "sample_99": [
        "maximumJumps(nums = [1,3,6,10,15,16], target = 9)",
        "maximumJumps(nums = [1,5,3,6,7,8,4,3,9,8,1], target = 6)",
        "maximumJumps(nums = [1,1,1,2,1], target = 1)",
        "maximumJumps(nums = [1,5,2,4,2,1], target = 3)",
        "maximumJumps(nums = [3,4,5], target = 2)",
        "maximumJumps(nums = [1,5,3,7,4,10], target = 1)",
        "maximumJumps(nums = [1, 1000, 1, 1000, 1, 1000, 1], target = 2)",
        "maximumJumps(nums = [2,4,5,7,9,3,2,1], target = 2)",
        "maximumJumps(nums=[2,5,7,9,10,13], target=3)",
        "maximumJumps(nums = [1, 5, 2, 4, 2, 1, 1, 5, 1, 3, 3, 3, 5], target = 1)"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [4, 1], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 2], [4, 1], [5, 1]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 1], [3, 1], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1,1], [2, 1], [3, 2], [4, 2], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [3, 2], [2, 2], [4, 2], [5, 1]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [3, 2], [2, 1], [1, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [3, 2], [4, 3], [1, 2], [4, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [2, 1], [1, 1], [5, 1]])",
        "colorTheArray(5, [[1, 1], [2, 1], [3, 3], [4, 3], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1,1], [2,1], [1,1], [5,2], [4,1]])"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 2)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 4)",
        "distanceTraveled(mainTank = 0, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 4)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2,5,1,4])",
        "countBeautifulPairs(nums = [25,49,9,6,10,37,28,7,64,100])",
        "countBeautifulPairs(nums=[2,5,1,4])",
        "countBeautifulPairs(nums = [21,22,23,24,25,26,27])",
        "countBeautifulPairs(nums=[21, 22, 23, 24, 25, 26, 27])",
        "countBeautifulPairs(nums = [100, 10, 1])",
        "countBeautifulPairs(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120])",
        "countBeautifulPairs(nums=[2, 1, 3, 10, 33, 102])",
        "countBeautifulPairs(nums = [22,55,11,20,33,44,51,75,62,57])"
    ],
    "sample_56": [
        "minCost(A = [2,5,6], x = 2)",
        "minCost(A = [1,3,2], x = 2)",
        "minCost(A = [1, 2, 3, 2, 1], x = 3)",
        "minCost(A = [1, 2, 3, 1, 2], x = 1)",
        "minCost(A = [3,1,2,5], x = 3)",
        "minCost(A = [1, 1, 1, 2, 2, 2], x = 2)",
        "minCost(A = [2,5,1,3,2], x = 2)",
        "minCost(A = [5, 1, 2, 6, 3], x = 1)",
        "minCost(A = [3, 1, 4, 2, 7], x = 1)",
        "minCost(A = [1, 3, 2, 6, 2, 2, 6, 6, 5, 4, 8, 6], x = 3)"
    ],
    "sample_98": [
        "maximumJumps(nums = [1,1,1,1,1], target = 1)",
        "maximumJumps(nums = [1,3,6,7,8,10], target = 2)",
        "maximumJumps(nums = [4,3,2,1], target = 1)",
        "maximumJumps(nums=[1,2,3,4], target=2)",
        "maximumJumps(nums=[0,1,2,3,4,5], target=3)",
        "maximumJumps(nums = [10, 11, 12, 10, 11, 12], target = 1)",
        "maximumJumps(nums = [2, 3, 6, 4, 8, 9], target = 2)",
        "maximumJumps(nums = [1,5,6,7,2,8,3,2,4,6], target = 3)",
        "maximumJumps(nums = [2, 6, 4, 8, 12, 16, 14, 2, 1, 3], target = 2)",
        "maximumJumps(nums=[5, 10, 15, 3], target=5)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits([0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,0,1])",
        "numberOfGoodSubarraySplits([1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums=[0,1,0,0,1,0,0,1,0,1])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [1,2,3,4,5])",
        "distinctDifferenceArray(nums=[1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [5, 1, 3, 4, 2])",
        "distinctDifferenceArray(nums = [4,5,6,5,6,6])",
        "distinctDifferenceArray(nums = [4,5,2,4,3,4,1,2])",
        "distinctDifferenceArray([3, -1, -3, -3, 2, -3])"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [25, 49, 9, 16, 25, 36, 27, 28])",
        "countBeautifulPairs(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countBeautifulPairs([11, 22, 33, 44, 55, 66, 77, 88, 99, 12, 23, 34, 45, 56, 67, 78, 89, 91])",
        "countBeautifulPairs(nums = [4, 12, 16, 24, 28, 32])",
        "countBeautifulPairs(nums = [25, 20, 33, 55, 50, 15, 30, 5])",
        "countBeautifulPairs(nums=[11,21,32,41,54])",
        "countBeautifulPairs([11, 21, 31, 41, 51, 61, 71, 81, 91, 101, 111, 110, 111])",
        "countBeautifulPairs(nums = [11, 20, 12, 14, 18, 16, 10, 2, 17, 13])",
        "countBeautifulPairs([25, 35, 45, 26, 111, 290, 999, 1000])",
        "countBeautifulPairs([25, 49, 9, 16, 25, 36, 25, 6, 36, 6, 36, 6, 16, 49, 9, 49, 9, 25, 6, 6, 36, 36, 9, 6, 16, 49, 36, 6, 49, 36, 25, 25, 25, 25, 36, 9, 49, 25, 49, 16, 49, 25, 49, 16, 16, 25, 49, 16, 25, 25, 16, 16, 16, 6, 25, 6, 6, 6, 36, 36, 49, 49, 25, 25, 25, 25, 49, 36, 9, 6, 36, 36, 25, 6, 25, 25, 49, 6, 16, 49, 36, 36, 6, 25, 49, 36, 49, 6, 36, 49, 6, 49, 25, 16, 25, 6, 16, 16, 49, 6, 25, 25, 36, 16, 6, 16, 25, 25, 6, 25, 25, 25, 25, 16, 36, 49, 36, 25, 36, 49, 49, 36, 49, 16, 25, 49, 16, 6, 16, 49, 49, 36, 6, 6, 49, 49, 16, 49, 49, 49, 25, 36, 49, 16, 25, 25, 36, 6, 49, 25, 6, 25, 36,"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(\"banana\")",
        "minimizedStringLength(s=\"banana\")",
        "minimizedStringLength(s = \"abcabcbb\")",
        "minimizedStringLength(s = \"mississippi\")",
        "minimizedStringLength(s=\"bana\")",
        "minimizedStringLength(s = \"vany\")"
    ],
    "sample_41": [
        "minimumCost(s = \"0100\")",
        "minimumCost(s = \"0011\")",
        "minimumCost(s = \"010\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"101\")",
        "minimumCost(s = \"1011\")",
        "minimumCost(s = \"aabaab\")",
        "minimumCost(s = \"aaaaa\")",
        "minimumCost(s = \"mqpxzy\")",
        "minimumCost(s = \"mq\")"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1,2,3,4,5])",
        "distinctDifferenceArray(nums = [1,2,3,4,5])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [3,2,3,4,2])"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [1, 3, 5])",
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [3, 1, 4, 2, 5])",
        "doesValidArrayExist(derived = [0, 0, 1])",
        "doesValidArrayExist(derived = [1, 3, 4, 2])",
        "doesValidArrayExist(derived = [0,1,2,3,4,5,6])",
        "doesValidArrayExist(derived = [2,3,1])",
        "doesValidArrayExist(derived = [1, 1, 1, 0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1,1,1,0,0,0,0])",
        "doesValidArrayExist(derived = [2, 0, 0, 1, 1, 0, 2, 0])"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0])",
        "doesValidArrayExist([0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6])",
        "doesValidArrayExist(derived = [2, 0, 1])",
        "doesValidArrayExist([0, 1, 0])",
        "doesValidArrayExist(derived = [1, 2, 4, 7])",
        "doesValidArrayExist(derived = [1, 2, 4, 7])",
        "doesValidArrayExist([5,2,1,5])"
    ],
    "sample_52": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = 'kddsbncda')",
        "smallestString(s = 'kdbncd')",
        "smallestString(s = \"kddsbncc\")",
        "smallestString(s = 'kdcdsbncd')",
        "smallestString(s = \"kddsbnd\")",
        "smallestString(s = \"kdzzsbncd\")",
        "smallestString(s = \"johndoe\")",
        "smallestString(\"cdefgabaa\")"
    ],
    "sample_40": [
        "minimumCost(s = \"0010\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"0011\")",
        "minimumCost(s = \"aabb\")",
        "minimumCost(s = \"aaba\")",
        "minimumCost(s = \"abacaba\")",
        "minimumCost(s = \"00011\")",
        "minimumCost(s = \"aaaabb\")",
        "minimumCost(s = \"aabbabb\")",
        "minimumCost(s = \"aaaabbaaa\")"
    ],
    "sample_38": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"0011\")",
        "minimumCost(s = \"0010\")",
        "minimumCost(s = \"010\")",
        "minimumCost(s = \"bab\")",
        "minimumCost(s = \"bbbbb\")",
        "minimumCost(s = \"100000\")",
        "minimumCost(s = \"abbbabaaa\")",
        "minimumCost(s = \"0100110111\")",
        "minimumCost(s = \"101101011111\")"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1,2,3,4,5])",
        "distinctDifferenceArray(nums = [3,2,3,4,2])",
        "distinctDifferenceArray(nums = [3, 4, 5, 6])",
        "distinctDifferenceArray([2, 3, 3, 4, 4])",
        "distinctDifferenceArray(nums = [2,3,3,4,2])",
        "distinctDifferenceArray(nums = [4, 1, 2, 2, 3])"
    ],
    "sample_53": [
        "smallestString(s = 'baabc')",
        "smallestString(s = 'baabc')",
        "smallestString(s = 'baabc')",
        "smallestString(s = 'baabb')",
        "smallestString(s = 'baaa')",
        "smallestString(s = 'zaabc')",
        "smallestString(s='baaaa')",
        "smallestString(s = 'z')",
        "smallestString(s = 'aaa')",
        "smallestString(s = 'baaabcaa')"
    ],
    "sample_109": [
        "checkArray(nums = [5,4,8,2], k = 2)",
        "checkArray(nums = [2,2,3,2,3,2], k = 2)",
        "checkArray(nums = [1, 2, 3, 4], k = 1)",
        "checkArray(nums = [1,2,4,3], k = 3)",
        "checkArray(nums=[2,3,1,4], k=2)",
        "checkArray(nums = [8, 1, 7, 5], k = 3)",
        "checkArray(nums = [1, 1, 1, 1, 1, 2], k = 4)",
        "checkArray(nums = [1, 5, 11, 1], k = 3)",
        "checkArray(nums = [2,3,2,5,7,6,4], k = 4)",
        "checkArray(nums = [8,5,4,2,2,7,4,7,9,3], k = 4)"
    ],
    "sample_114": [
        "maximumBeauty(nums=[3,1,5,4,2], k=2)",
        "maximumBeauty(nums = [3, 1, 5, 4, 2], k = 2)",
        "maximumBeauty(nums = [1,5,4,2,3,10,7], k = 1)",
        "maximumBeauty(nums = [1,4,8,13], k = 5)",
        "maximumBeauty(nums = [3,4,5,1,2], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 0)",
        "maximumBeauty(nums = [5,4,2,4], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9, 11, 13], k = 3)",
        "maximumBeauty(nums = [3, 1, 4, 2, 5, 2], k = 2)",
        "maximumBeauty(nums = [2,3,1,10,5,6], k = 1)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1,2,3,4,5])",
        "distinctDifferenceArray(a=[3, 2, 3, 4, 2])",
        "distinctDifferenceArray(a = [5, 2, 1, 4, 3])",
        "distinctDifferenceArray(a = [3, 4, 5, 6, 5])",
        "distinctDifferenceArray([3, 4, 5, 6])",
        "distinctDifferenceArray(a = [-1,1,3,3,5])",
        "distinctDifferenceArray(a = [1,2,3,3,4,5])",
        "distinctDifferenceArray(a = [-1,0,2,3,4])",
        "distinctDifferenceArray(a = [5, 2, 2, 7, 1, 3])"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '51230100000')",
        "removeTrailingZeros(a = '5123000')",
        "removeTrailingZeros(a = \"51230100\")",
        "removeTrailingZeros(a = \"51230100\")",
        "removeTrailingZeros(a
        "removeTrailingZeros(a = \"5123000\")",
        "removeTrailingZeros(a='512300000000000001')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'nen')",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = 'enev')",
        "makeSmallestPalindrome(s = \"ninty\")"
    ],
    "sample_55": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = 'kdbncd')",
        "smallestString(s = \"kddsbncb\")",
        "smallestString(s = \"zbc\")",
        "smallestString(s = 'kdcebncd')",
        "smallestString(s = \"kkkkkkkd\")",
        "smallestString(s = 'kj')",
        "smallestString(s = \"zbc\")",
        "smallestString(\"kddshmncd\")"
    ],
    "sample_35": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = \"5123000\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = \"51230000\")",
        "removeTrailingZeros(num
        "removeTrailingZeros(num = \"51230100000000\")",
        "removeTrailingZeros(num = '5123000000')"
    ],
    "sample_23": [
        "minLength(s = \"ACBDACBD\")",
        "minLength(s = \"ABCBCD\")",
        "minLength(s = \"ACDABAB\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"AABCCD\")",
        "minLength(\"ABABABCD\")",
        "minLength(s = \"ABAACD\")",
        "minLength(\"ABABAB\")",
        "minLength(s = \"AABAABBCDCD\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"5123000\")",
        "removeTrailingZeros(num = '512300001')",
        "removeTrailingZeros(num = '51230000')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num=\"512301000\")",
        "removeTrailingZeros(num = '5123000000000000000001')"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 11, num2 = 3)",
        "makeTheIntegerZero(num1 = 9, num2 = 4)",
        "makeTheIntegerZero(num1 = 20, num2 = 4)",
        "makeTheIntegerZero(num1 = 23, num2 = 4)",
        "makeTheIntegerZero(num1 = 14, num2 = 4)",
        "makeTheIntegerZero(num1 = 25, num2 = 4)",
        "makeTheIntegerZero(num1 = 50, num2 = 7)",
        "makeTheIntegerZero(num1=20, num2=7)",
        "makeTheIntegerZero(num1 = 12, num2 = 1)"
    ],
    "sample_57": [
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 2, b = 2)",
        "distanceTraveled(a = 2, b = 0)",
        "distanceTraveled(a = 4, b = 1)",
        "distanceTraveled(a = 5, b = 2)",
        "distanceTraveled(a = 5, b = 5)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5], t = 5)",
        "longestAlternatingSubarray(nums = [4,2,5,3], t = 5)",
        "longestAlternatingSubarray(nums = [2,4,6,8,10], t = 10)",
        "longestAlternatingSubarray(nums = [2,2,3,4], t = 1)",
        "longestAlternatingSubarray(nums = [5,2,3,1,4], t = 5)",
        "longestAlternatingSubarray(nums = [2,2,2,2,2,2], t = 2)",
        "longestAlternatingSubarray(nums = [1,2,1,3,5], t = 3)",
        "longestAlternatingSubarray(nums = [5,2,3,1,4,6], t = 5)",
        "longestAlternatingSubarray(nums = [5,4,2,2,2,10,6,8,7], t = 5)",
        "longestAlternatingSubarray(nums = [2,3,5,7,11,2,2,1,7,13], t = 7)"
    ],
    "sample_102": [
        "maximumJumps(nums = [1, 3, 6, 7, 8, 12], target = 2)",
        "maximumJumps(nums = [3,6,7,11], target = 5)",
        "maximumJumps(nums = [0,1,2], target = 1)",
        "maximumJumps(nums = [1,5,6], target = 2)",
        "maximumJumps(nums = [1,2,3,4,5,6,7,8], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 4, 1, 5, 4], target = 2)",
        "maximumJumps(nums = [3, 9, 6, 4, 1], target = 2)",
        "maximumJumps(nums = [1,1,3,2,4,5], target = 2)",
        "maximumJumps(nums = [1, 1000, 10000, 10000000000], target = 10)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123000')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '512300000')",
        "removeTrailingZeros(num = '5123000')",
        "removeTrailingZeros(num = \"5123000\")",
        "removeTrailingZeros(num = '51230000001')",
        "removeTrailingZeros(num = '51230100000000000')"
    ],
    "sample_101": [
        "maximumJumps(nums = [1,3,6,10,15], target = 3)",
        "maximumJumps(nums = [1,3,6,10,15,16], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7], target = 2)",
        "maximumJumps(nums = [1,3,6,3,2,3,6,8,9,5], target = 2)",
        "maximumJumps(nums = [1,2,3,4,5,6], target = 1)",
        "maximumJumps(nums = [0, 1, 2], target = 2)",
        "maximumJumps(nums = [1, 10000000], target = 1)",
        "maximumJumps(nums = [3, 4, 5, 1, 2], target = 1)",
        "maximumJumps(nums = [10,2,3,4,5,1,6,7,11,12], target = 5)",
        "maximumJumps(nums = [4, 2, 3, 5, 1], target = 1)"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [0,1,1,0])",
        "doesValidArrayExist(derived = [1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1,1,1,1,1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0,0,0,0,0])",
        "doesValidArrayExist(derived = [1,1,0,0,0,1,0])",
        "doesValidArrayExist(derived = [1,0,1,1,1,1,0])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 1, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1,1,0,1,0,1,0,0,1,1,0,1,0,0,1,1])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits([1,1,2,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,0,1,0])",
        "numberOfGoodSubarraySplits([1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,0,1])"
    ],
    "sample_19": [
        "minLength(s = \"ABAB\")",
        "minLength(s = \"ABAB\")",
        "minLength(s = \"ABC\")",
        "minLength(s = \"ABABAB\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"BACD\")",
        "minLength(s = \"ABCABCD\")",
        "minLength(s = \"ABABC\")",
        "minLength(s = \"ABCCD\")",
        "minLength(s = \"ABABABABABABABAB\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"naveen\")",
        "makeSmallestPalindrome(s = \"nene\")",
        "makeSmallestPalindrome(s = \"never\")",
        "makeSmallestPalindrome(s = \"niceven\")",
        "makeSmallestPalindrome(s = 'nenev')"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2,3,4,1,5])",
        "semiOrderedPermutation(nums = [4,2,1,3])",
        "semiOrderedPermutation(nums = [2,3,1,4])",
        "semiOrderedPermutation(nums = [1, 5, 4, 3, 2])"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1,1,2,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,2,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,2,1,1])",
        "numberOfGoodSubarraySplits([0,1,0,0,1])",
        "numberOfGoodSubarraySplits([0,1,0,0,1])",
        "numberOfGoodSubarraySplits([0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits([0,1,0,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums=[1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits([0,1,0,0,1])"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 3, 1, 4, 1, 3, 2, 2, 2, 2, 2, 2], k = 1)",
        "maximumBeauty(nums = [2,4,6,8,10,12,14,16], k = 2)",
        "maximumBeauty(nums = [5, 4, 3, 2, 1], k = 1)",
        "maximumBeauty(nums = [1, 3, 4, 5, 8, 9], k = 2)",
        "maximumBeauty(nums = [3,5,6,10,11], k = 1)",
        "maximumBeauty(nums = [1,3,1,4,1,2,2,4,3,1], k = 2)",
        "maximumBeauty(nums = [1,2,4,5,10,11,15], k = 1)",
        "maximumBeauty(nums = [1,3,2,5,7,9,6,8,10], k = 3)",
        "maximumBeauty(nums = [2,4,5,7,11,10,9,8], k = 1)",
        "maximumBeauty(nums = [1, 1, 3, 3, 2, 4, 4, 3, 2, 5, 5, 2, 1, 2, 3], k = 2)"
    ],
    "sample_117": [
        "minimumIndex(nums = [2,1,1,2])",
        "minimumIndex(nums = [2, 1, 3, 1, 1, 1, 7, 1, 2, 1])",
        "minimumIndex(nums = [2,1,3,1,1,1,7,1,2,1])",
        "minimumIndex(nums = [2,1,3,1,2,2])",
        "minimumIndex(nums = [2,1,1,1,2,1,1])",
        "minimumIndex(nums = [2,1,1,2,1,1,1,1,1])",
        "minimumIndex(nums = [3,3,4,2,2,2])",
        "minimumIndex(nums = [1,2,2,2,2,2,2,1,1,1])",
        "minimumIndex(nums = [3, 2, 3, 3, 2, 4, 2])",
        "minimumIndex(nums = [2,1,1,2,1,1,2,2,1,1,2,2,2,2,2,2])"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 5, num2 = 1)",
        "makeTheIntegerZero(num1 = 5, num2 = 1)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 8, num2 = 2)",
        "makeTheIntegerZero(num1 = 8, num2 = 2)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 2)",
        "makeTheIntegerZero(num1 = 24, num2 = 12)"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [2,5,1,4])",
        "countBeautifulPairs(nums = [1,2,3,4,5,6,7,8,9])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "countBeautifulPairs(nums=[2,5,1,4,3])",
        "countBeautifulPairs(nums = [21, 12, 15])",
        "countBeautifulPairs(nums = [21, 29, 49, 26, 22, 41, 30, 25])",
        "countBeautifulPairs(nums = [21,2,11,17,16])",
        "countBeautifulPairs(nums=[21, 11, 12, 21])",
        "countBeautifulPairs(nums = [21, 12, 22, 15, 4, 20])",
        "countBeautifulPairs(nums = [12, 16, 123, 14, 51, 23])"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 1)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 4, num2 = 2)",
        "makeTheIntegerZero(num1 = 3, num2 = 1)",
        "makeTheIntegerZero(num1 = 16, num2 = 2)",
        "makeTheIntegerZero(num1 = 20, num2 = 4)",
        "makeTheIntegerZero(num1 = 22, num2 = 2)",
        "makeTheIntegerZero(num1 = 33, num2 = 7)"
    ],
    "sample_20": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCD\")",
        "minLength(\"ABCABC\")",
        "minLength(s = \"ABBA\")",
        "minLength(\"ABABA\")",
        "minLength(s = \"AAABCC\")",
        "minLength(s = \"ABCBABCBCD\")",
        "minLength(\"CBABA\")",
        "minLength(\"CBADBAB\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1, 3, 1, 4, 2, 2, 8], k = 5)",
        "maximumBeauty(nums = [1, 3, 2, 5, 4], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 2, 4, 6], k = 2)",
        "maximumBeauty(nums = [2, 4, 6, 8], k = 2)",
        "maximumBeauty(nums = [1,5,4,2,3,10,5,1], k = 3)",
        "maximumBeauty(nums = [1,3,1,4,4,2,2,3,1], k = 1)",
        "maximumBeauty(nums = [1, 4, 1, 2, 3, 5, 10], k = 1)",
        "maximumBeauty(nums = [1, 3, 2, 3, 2, 4, 5, 6, 3, 7, 2], k = 2)"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [2,5,1,4])",
        "countBeautifulPairs(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countBeautifulPairs(nums = [21, 22, 23, 24, 25, 26])",
        "countBeautifulPairs(nums = [11,22,33,44,55])",
        "countBeautifulPairs(nums = [21,12,19,23])",
        "countBeautifulPairs(nums = [25,42,11,36,105])",
        "countBeautifulPairs(nums = [12,4,6,13,10,20])",
        "countBeautifulPairs(nums = [21, 23, 18, 17, 29, 30])",
        "countBeautifulPairs(nums = [20, 1, 21, 10, 11, 13])",
        "countBeautifulPairs(nums = [11,21,22,23,31,32,41,51,52,61,62,63,64,71,72,73,74,81,82,83,84,85,91,92,93,94,95,96,97,98,101,102,103,104,105,106,107,108,109,110])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 13, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 4)",
        "makeTheIntegerZero(num1 = 6, num2 = 3)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = 'neveroddoreven')",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'nevn')",
        "makeSmallestPalindrome(s = \"never odd or even\")",
        "makeSmallestPalindrome(s = \"nenne\")",
        "makeSmallestPalindrome(s='nenev')",
        "makeSmallestPalindrome(s = \"nenee\")",
        "makeSmallestPalindrome(s = \"nevoo\")"
    ],
    "sample_37": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"00110\")",
        "minimumCost(s = \"101\")",
        "minimumCost(\"aaa\")",
        "minimumCost(\"abcd\")",
        "minimumCost(\"0011\")",
        "minimumCost(\"cddpd\")",
        "minimumCost(s = \"aaabbbaaabbbbbaaabbbaaaabbbabbb\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,1,0,0,0,0,0,0,1,0])",
        "numberOfGoodSubarraySplits([0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1])"
    ],
    "sample_105": [
        "checkArray(nums = [4,2,3,1,1,1], k = 3)",
        "checkArray(nums = [1, 1, 1, 1, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [0,0,0,0,0], k = 2)",
        "checkArray(nums = [2, 5, 1, 4, 3, 6], k = 3)",
        "checkArray(nums = [1, 2, 10, 5, 2, 7], k = 3)",
        "checkArray(nums = [10, 5, 5, 15], k = 2)",
        "checkArray(nums = [1, 3, 5, 7, 4, 2], k = 4)",
        "checkArray(nums = [1, 0, 0, 3, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",
        "checkArray(nums = [10,15,12,21,10,15,12], k = 3)",
        "checkArray(nums = [6,12,20,11,22,16,24,12,21,24,26,26,20,24,21,21,12,15,18,13,10,26,14,14,23,21,15,22,13,16,17,26,12,15,23,23,10,25,16,16,21,26,22,25,21,11,14,26,17,12,18,15,14,21,24,22,19,20,26,18,18,15,25,11,26,19,13,23,19,19,10,26,17,13,25,19,17,10,23,25,25,17,12,14,14,17,21,16,17,13,19,25,13,22,13,26,22,18,12,19,24,23,14,20,25,10,19,16,15,16,24,24,15,20,24,17,23,17,12,26,15,11,20,17,10,24,10,17,25,21,23,11,18,19,12,11,26,26,15,17,11,16,17,22,21,24,22,24,13,18,15,12,25,25,17,20,15,14,11,26,23,25,15,16,21,11,12,23,23,24,14,15,13,2"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2,3,4,1,5])",
        "semiOrderedPermutation([2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums=[2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [1, 5, 4, 3, 2])",
        "semiOrderedPermutation([2,3,4,1,5])"
    ],
    "sample_108": [
        "checkArray(nums = [2, 2, 3, 1, 1, 0], k = 3)",
        "checkArray(nums = [2,2,3,1,1,0], k = 3)",
        "checkArray(nums=[8, 2, 4, 4], k=2)",
        "checkArray(nums = [2, 1, 3, 1, 2], k = 3)",
        "checkArray(nums=[4,2,3,1,1,0,0], k=4)",
        "checkArray(nums = [4, 2, 1, 5], k = 2)",
        "checkArray(nums = [4, 1, 3, 2, 2, 1], k = 3)",
        "checkArray(nums = [1, 2, 1, 4, 2, 4], k = 2)",
        "checkArray(nums = [1, 3, 5, 2, 6, 1, 1, 1, 1], k = 3)",
        "checkArray(nums = [8, 5, 4, 3, 2, 2, 1, 5, 2, 1, 2, 2, 1, 5, 2, 4, 1, 1, 2, 3, 1, 4, 5, 1, 1, 2, 2, 5, 4, 1, 1, 5, 1, 2, 4, 1, 4, 1, 3, 1, 4, 5, 1, 1, 4, 5, 1, 5, 4, 3, 2, 1, 3, 2, 3, 1, 1, 4, 4, 5, 1, 2, 5, 5, 1, 2, 1, 3, 4, 4, 5, 2, 5, 5, 1, 1, 4, 5, 1, 1, 4, 1, 2, 3, 4, 3, 5, 3, 1, 1, 5, 1, 5, 5, 2, 3, 1, 5, 3, 5, 1, 3, 2, 5, 2, 4, 5, 2, 1, 2, 4, 1, 3, 2, 3, 4, 3, 1, 1, 1, 4, 2, 4, 5, 5, 3, 5, 2, 1, 1, 4, 1, 3, 5, 4, 4, 3, 4, 1, 3, 5, 1, 5, 3, 4, 4, 1, 1, 2, 1, 1, 4, 1, 3, 1, 5, 5, 1, 1, 1, 5, 5, 3, 1, 1, 4, 1, 5, 2, 1, 3, 5, 2, 3, 2, 1, 5, 5, 1, 5, 3, 4, 4, 5,"
    ],
    "sample_39": [
        "minimumCost(s = \"10101\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aa\")",
        "minimumCost(s = \"aabaab\")",
        "minimumCost(s = \"aa\")",
        "minimumCost(s = \"aaaaa\")",
        "minimumCost(s = \"110\")",
        "minimumCost(s = \"ababaa\")",
        "minimumCost(s = \"aaabbbbaaabbabbababababa\")"
    ],
    "sample_65": [
        "findValueOfPartition(a = [3, 9, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4])",
        "findValueOfPartition(a = [3,9,7,8])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [3, 1, 2])",
        "findValueOfPartition(a = [3, 9, 7, 8])",
        "findValueOfPartition([3, 9, 5])",
        "findValueOfPartition([3, 9, 5])",
        "findValueOfPartition(a = [3, 9, 7, 8])",
        "findValueOfPartition(a = [2, 4, 8, 16])"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 2, additionalTank = 3)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1,1,0,1,0,1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,1,1,0,0,1,1,0,1])",
        "doesValidArrayExist(derived = [1,1,0,1,0,0,1,0,0,1,1,1,1,0,1,0,0,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,1,0,0,1,1,0,0,0,1,1,0,0,1,0,0,1,0,0,0,0,1,1,0,0,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,0,0,1,0,1,1,0,1,1,0,1,0,0,1,0,0,0,1,1,0,1,1,1,1,1,1,1,0,0,1,1,0,0,1,0,0,0,1,0,0,0,1,0,0,1,1,1,0,1,1,0,1,1,1,0,0,0,1,1,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,1,0,0,1,0,0,1,1,0,0,1,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,1,1,1,0,0,1,0,1,0,0,0,0,1,0,1,1,0,1,1,1,1,0,1,0,1,1,0,1,1,0,1,1,0,1,0,1,1,1,1,0,0,0,0,1,1,0,0,1,1,0,1,0,1,1,1,1,1,1,0,1,0,1,1,1"
    ],
    "sample_106": [
        "checkArray(nums = [4, 2, 3, 1, 7, 2], k = 3)",
        "checkArray(nums = [4, 2, 3, 1, 7, 2], k = 3)",
        "checkArray(nums = [2, 2, 3, 1, 1, 0], k = 3)",
        "checkArray(nums = [2, 2, 3, 1, 1, 0], k = 3)",
        "checkArray(nums = [4, 2, 3, 1, 7, 2], k = 2)",
        "checkArray(nums = [1, 2, 1, 2], k = 2)",
        "checkArray(nums = [1, 5, 3, 2], k = 2)",
        "checkArray(nums = [3, 4, 6, 5], k = 2)",
        "checkArray(nums = [0, 8, 3], k = 4)",
        "checkArray(nums = [8, 5, 4, 2, 1, 9, 4, 2], k = 3)"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [2,3,4,5], threshold = 4)",
        "longestAlternatingSubarray(nums = [2,3,4,5], threshold = 4)",
        "longestAlternatingSubarray(nums = [3,2,5,4], threshold = 5)",
        "longestAlternatingSubarray(nums = [3,2,5,4], threshold = 5)",
        "longestAlternatingSubarray(nums = [2,3,4,5], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,2], threshold = 2)",
        "longestAlternatingSubarray(nums=[1,2,3], threshold=2)",
        "longestAlternatingSubarray(nums = [1, 10, 100, 1000], threshold = 10000)",
        "longestAlternatingSubarray(nums = [1, 4, 1, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [3,2,5,4], threshold = 5)"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [2,5,1,4])",
        "countBeautifulPairs(nums = [25, 20, 32, 46, 65])",
        "countBeautifulPairs(nums = [21, 12, 19, 22, 11])",
        "countBeautifulPairs(nums = [12, 14, 34])",
        "countBeautifulPairs(nums = [32,53,311])",
        "countBeautifulPairs(nums = [12, 23, 14, 45, 16])",
        "countBeautifulPairs([10, 5, 12, 16, 19])",
        "countBeautifulPairs(nums = [44, 25, 34, 54])",
        "countBeautifulPairs(nums = [12, 21, 123, 321, 221, 211])",
        "countBeautifulPairs([25, 12, 33, 10, 35, 10, 24, 37, 39, 17])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [5,6,7,8,9], t = 9)",
        "longestAlternatingSubarray(nums = [1,2,3], t = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4], t = 4)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6], t = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], t = 10)",
        "longestAlternatingSubarray(nums = [2,3,4,7,11], t = 5)",
        "longestAlternatingSubarray(nums = [5,2,6,3,4,1], t = 3)",
        "longestAlternatingSubarray(nums = [4,4,4,4,5], t = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 5, 4, 5, 6], t = 5)",
        "longestAlternatingSubarray(nums = [2,3,5,4,7,4,3,2], t = 2)"
    ],
    "sample_36": [
        "minimumCost(s = \"0010\")",
        "minimumCost(s = \"0010\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"10010\")",
        "minimumCost(s = \"abac\")",
        "minimumCost(s = \"baaba\")",
        "minimumCost(s = \"1110\")",
        "minimumCost(s = \"00110110\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ACBDACBD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABABABAB\")",
        "minLength(\"ABCABCD\")",
        "minLength(s = \"ACDBBCD\")",
        "minLength(s = \"AABBBCD\")",
        "minLength(s = \"AABBCCCD\")",
        "minLength(s = \"ACDCDABABCDCD\")"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,0,1])",
        "numberOfGoodSubarraySplits([0,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums=[1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits([1, 0, 0, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 0, 1])"
    ],
    "sample_9": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 2]])",
        "colorTheArray(n = 1, queries = [[0,100000]])",
        "colorTheArray(n = 4, queries = [[0,1],[1,2],[2,1],[3,2],[1,1]])",
        "colorTheArray(n = 4, queries = [[1, 2], [0, 1]])",
        "colorTheArray(n = 3, queries = [[1,2], [2,1], [1,2]])",
        "colorTheArray(n = 4, queries = [[1, 2], [2, 1], [3, 2], [2, 1], [1, 1]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,2],[3,1],[3,2],[4,1],[4,2]])",
        "colorTheArray(n = 4, queries = [[1, 2], [2, 1], [3, 2], [2, 3], [1, 1]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,2],[2,1],[3,2],[1,1],[2,1],[2,2]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [2, 3, 1])",
        "maxNonDecreasingLength(nums1 = [2, 5, 1, 2, 5], nums2 = [10, 5, 2, 1, 5])",
        "maxNonDecreasingLength(nums1 = [2, 3, 4], nums2 = [2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [2, 1, 1])",
        "maxNonDecreasingLength(nums1 = [1, 4, 2], nums2 = [1, 2, 5])",
        "maxNonDecreasingLength(nums1 = [2, 3, 2, 1], nums2 = [1, 3, 1, 2])",
        "maxNonDecreasingLength(nums1 = [1, 5, 9], nums2 = [1, 2, 1])",
        "maxNonDecreasingLength(nums1=[2, 3, 5, 1, 6], nums2=[1, 5, 3, 4, 7])",
        "maxNonDecreasingLength(nums1=[2, 5, 4, 8, 9], nums2=[3, 4, 10, 11, 9])"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "maximumBeauty(nums = [3,5,2,4,1], k = 1)",
        "maximumBeauty(nums = [3,5,2,5,5,5], k = 3)",
        "maximumBeauty(nums = [2,4,6,1], k = 2)",
        "maximumBeauty(nums = [2,2,2,1,2,1,1,1,2,1], k = 1)",
        "maximumBeauty(nums = [1, 3, 3, 2], k = 2)",
        "maximumBeauty(nums = [2,4,3,5,2,1], k = 1)",
        "maximumBeauty(nums=[2, 2, 1, 3, 2], k=2)",
        "maximumBeauty(nums=[2, 2, 1, 1, 3, 1, 2], k=1)",
        "maximumBeauty(nums = [2, 3, 1, 4, 5, 7, 11, 10, 15, 2], k = 3)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [9,3,5])",
        "findValueOfPartition(nums = [9,7,5,3])",
        "findValueOfPartition(nums = [3,9,7,3])",
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 5])",
        "findValueOfPartition(nums = [1,3,8,10,15])",
        "findValueOfPartition(nums=[1,3,2,6])",
        "findValueOfPartition(nums = [1, 4])",
        "findValueOfPartition(nums = [1,1,1,2,3])",
        "findValueOfPartition([1, 3, 2, 4])"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1,3,2,4])",
        "findValueOfPartition(nums = [9,7,5,3,1])",
        "findValueOfPartition(nums = [9,7,5,2,10])",
        "findValueOfPartition(nums = [1,3,2])",
        "findValueOfPartition([1,3,8,10,15])",
        "findValueOfPartition(nums = [1,3,7,10,15])",
        "findValueOfPartition(nums = [1, 3, 7, 11])",
        "findValueOfPartition(nums = [3,7,8,9,10,10,11])",
        "findValueOfPartition(nums = [2,4,1,3,6,5])",
        "findValueOfPartition(nums = [9, 10, 4, 2, 1])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2,3,4,1,5])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums=[2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [4,3,2,1])",
        "semiOrderedPermutation(nums = [4,3,2,1])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 4])",
        "semiOrderedPermutation(nums = [4,2,5,3,1])",
        "semiOrderedPermutation(nums = [3, 1, 4, 2])"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation([2, 3, 4, 1, 5])",
        "semiOrderedPermutation([2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [4, 1, 2, 3])",
        "semiOrderedPermutation(nums = [4,1,2,3])",
        "semiOrderedPermutation(nums = [4,1,3,2])"
    ],
    "sample_167": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"mq\", \"px\", \"zy\"], s = \"mpx\")",
        "isAcronym(words=[\"you\", \"are\", \"cool\"], s=\"yac\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"bAO\")",
        "isAcronym(words = [\"technically\"], s = \"t\")",
        "isAcronym(words = [\"animal\", \"kingdom\"], s = \"a\")",
        "isAcronym(words = [\"Vlad\", \"is\", \"awesome\"], s = \"VI\")",
        "isAcronym(words = [\"person\", \"plant\", \"place\"], s = \"p\")",
        "isAcronym(words=[\"fun\", \"real\", \"pain\"], s = \"frp\")",
        "isAcronym(words = [\"ai\", \"algorithm\", \"analogical\"], s = \"ai\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1,2,3,4], m = 4, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 4, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [2,3,1,2,4], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [3, 1, 4, 3, 2, 2, 4], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,2,4], m = 2, k = 1)",
        "countInterestingSubarrays(nums=[1,2,3,4,5], m=2, k=3)",
        "countInterestingSubarrays(nums = [0,1,2,3,4], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [4,2,2,2,4,4,2,2], m = 3, k = 2)",
        "countInterestingSubarrays(nums=[4,5,10,2], m=3, k=1)"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1,3], [2,3], [3,3]])",
        "numberOfPoints(nums = [[1,3],[2,8],[1,9]])",
        "numberOfPoints(nums = [[1,3],[10,15],[10,12]])",
        "numberOfPoints(nums = [[1,3], [1,3], [1,3]])",
        "numberOfPoints(nums = [[0,2],[0,3],[0,4],[1,3],[1,4],[2,3],[2,4]])",
        "numberOfPoints(nums=[[0,1],[3,5],[1,6]])",
        "numberOfPoints(nums = [[1,5],[2,10],[4,7],[6,20]])",
        "numberOfPoints(nums = [[1,2],[1,5],[4,6],[5,10],[9,11]])",
        "numberOfPoints(nums=[[1,3],[2,4],[3,5],[4,5],[5,6],[7,7],[0,100]])",
        "numberOfPoints([[7, 10], [4, 13], [2, 20], [1, 100], [100, 100], [1, 20], [1, 20], [10, 20]])"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy.problem\"], separator = \".\")",
        "splitWordsBySeparator(words = ['easy', 'problem'], separator = '-')",
        "splitWordsBySeparator(words=[\"easy problem\"], separator=\" \")",
        "splitWordsBySeparator(words = ['easyproblem'], separator = 'problem')",
        "splitWordsBySeparator(words = [\"one.two.three\", \"four.five\", \"six\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\"], separator = \"-\")",
        "splitWordsBySeparator(words = ['today','is','friday','today'], separator = '-')",
        "splitWordsBySeparator(words = [\"one_two_three\"], separator = \"_\")",
        "splitWordsBySeparator(words = ['easy', 'problem'], separator = \"\")",
        "splitWordsBySeparator(words = [\"easy.problem\",\"practice.make.perfect\"], separator = \".\")"
    ],
    "sample_216": [
        "numberOfPoints([[1, 3], [10, 20], [2, 5], [4, 8]])",
        "numberOfPoints(nums = [[1, 4], [4, 5], [7, 9]])",
        "numberOfPoints(nums = [[1, 3], [10, 20], [2, 5]])",
        "numberOfPoints(nums = [[1,2], [2,3], [7,9]])",
        "numberOfPoints([[1,1],[3,3],[5,5]])",
        "numberOfPoints(nums = [[1,3],[1,4],[3,4]])",
        "numberOfPoints([[1, 3], [1, 3], [2, 3]])",
        "numberOfPoints(nums = [[1, 4], [2, 5], [4, 6], [1, 7]])",
        "numberOfPoints(nums=[[1, 4], [2, 3], [3, 6], [10, 12]])",
        "numberOfPoints(nums = [[1, 2], [4, 5], [4, 7], [5, 5], [4, 7]])"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1,2,3,4])",
        "countCompleteSubarrays(nums = [3, 4, 4, 1, 2, 1, 2])",
        "countCompleteSubarrays(nums = [1,2,1,3])",
        "countCompleteSubarrays(nums = [3,3,4,4,5])",
        "countCompleteSubarrays(nums = [3, 1, 2, 1, 2, 1, 3])",
        "countCompleteSubarrays(nums=[1, 1, 2, 1, 1])",
        "countCompleteSubarrays(nums=[1, 2, 3, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [2, 5, 4, 4, 2])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one.two.three\", \"four.five\", \"six\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one.two.three\", \"four.five\", \"six\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\",\"four\", \"five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one.two.three\",\"four.five\",\"six\"], separator = \".\")",
        "splitWordsBySeparator(words = ['one', '', 'two', 'three', '', 'four', 'five', 'six'], separator = \"\")",
        "splitWordsBySeparator(words = [\"one.two.three,four.five\", \"six\"], separator = \".\")"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 1, 1])",
        "maxIncreasingGroups(u = [1, 1, 1])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [2, 3, 4])",
        "maxIncreasingGroups(u = [1, 4, 3, 2])",
        "maxIncreasingGroups(u = [5, 3, 1])",
        "maxIncreasingGroups(u = [1, 2, 1, 2, 1])",
        "maxIncreasingGroups(u = [3, 2, 1, 1])",
        "maxIncreasingGroups([1, 2, 1, 2])",
        "maxIncreasingGroups(u = [4, 2, 3, 1, 5, 7, 6])"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [5,3,2,10,15], x = 1)",
        "minAbsoluteDifference(nums = [4,3,2,4], x = 2)",
        "minAbsoluteDifference(nums = [4,3,2,4], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4], x = 3)",
        "minAbsoluteDifference(nums = [4,3,2,4], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5,6], x = 5)",
        "minAbsoluteDifference(nums=[1,2,3,4],x=2)",
        "minAbsoluteDifference(nums = [3, 2, 1, 4, 5], x = 3)",
        "minAbsoluteDifference(nums = [7,4,5,2,10,8], x = 3)",
        "minAbsoluteDifference(nums=[10,12,15,17,18],x=2)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [3,1,2,2,2,1,3], modulo = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [3,1,2,4,3], modulo = 4, k = 3)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 10, k = 4)",
        "countInterestingSubarrays(nums = [3, 1, 4, 3, 2, 2], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums=[1,2,3,4], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [0,3,2], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [2,4,2,2,2], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [3, 4, 5, 6, 7, 8, 9, 10], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [2, 1, 2, 2, 2, 1, 1], modulo = 3, k = 2)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 1, 1], m = 2)",
        "canSplitArray(nums = [1, 1, 1, 1], m = 2)",
        "canSplitArray(nums = [2, 4, 3], m = 5)",
        "canSplitArray(nums = [2, 2, 2, 2], m = 3)",
        "canSplitArray(nums = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,",
        "canSplitArray(nums = [2,3,1], m = 5)",
        "canSplitArray(nums = [2,1,3,5,6], m = 4)",
        "canSplitArray(nums = [2, 3, 1, 1], m = 1)",
        "canSplitArray(nums = [1, 1, 1, 2, 3, 4], m = 4)",
        "canSplitArray(nums = [5, 7, 8, 11, 15], m = 17)"
    ],
    "sample_169": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"banana\", \"apple\"], s = \"ba\")",
        "isAcronym(words = [\"apple\", \"pear\"], s = \"ap\")",
        "isAcronym(words = [\"Hello\", \"world\"], s = \"Hw\")",
        "isAcronym(words = [\"speech\", \"to\", \"text\"], s = \"stt\")",
        "isAcronym(words = [\"john\", \"gordon\"], s = \"jg\")",
        "isAcronym(words = [\"apple\", \"pie\", \"cat\"], s = \"APC\")",
        "isAcronym(words = [\"banana\", \"apple\", \"eggplant\"], s = \"baea\")",
        "isAcronym(words = [\"add\", \"dinner\"], s = \"add\")",
        "isAcronym(words = [\"A\", \"Bit\", \"The\", \"Of\"], s = \"ABTO\")"
    ],
    "sample_121": [
        "minimumIndex(nums = [2,1,3,1,1,1,7,1,2,1])",
        "minimumIndex(nums = [2,1,3,1,1,1,7,1,2,1])",
        "minimumIndex(nums = [2,1,3,1,1,1,7,1,2,1])",
        "minimumIndex(nums = [2,1,3,5,2,2,2,2])",
        "minimumIndex(nums = [2,1,3,1,1,1])",
        "minimumIndex(nums = [2,1,3,1,1,1,7,1,2,1])",
        "minimumIndex([1, 2, 2, 2, 2, 2, 2])",
        "minimumIndex(nums = [1,2,2,1,1,3])",
        "minimumIndex(nums = [1,1,1,1,1,2,1,1,1])",
        "minimumIndex(nums = [1,2,2,3,2,2,2,5,1,2,2,3,2,2,2])"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 5, offers = [[1,3,3],[2,5,4],[3,7,5]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,5],[3,4,2]])",
        "maximizeTheProfit(n = 10, offers = [[1,3,3],[4,10,3],[1,6,5]])",
        "maximizeTheProfit(n = 3, offers = [[0, 1, 4], [1, 2, 5], [2, 3, 6], [3, 3, 10]])",
        "maximizeTheProfit(n = 4, offers = [[0,1,3],[0,2,4],[1,3,4]])",
        "maximizeTheProfit(n = 4, offers = [[0, 1, 4], [1, 2, 1], [1, 3, 3], [2, 3, 5]])",
        "maximizeTheProfit(n = 10, offers = [[5, 10, 2], [7, 9, 4], [1, 3, 5]])",
        "maximizeTheProfit(n = 10, offers = [[1, 1, 10], [2, 3, 2], [2, 5, 1]])",
        "maximizeTheProfit(n = 5, offers = [[0, 2, 4], [1, 3, 5], [3, 4, 8], [2, 4, 2]])",
        "maximizeTheProfit(n = 10, offers = [[1, 3, 5], [4, 7, 5], [2, 4, 2], [5, 9, 3], [3, 7, 1]])"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [0])",
        "maximumTripletValue(nums = [1, 2, 1])",
        "maximumTripletValue(nums = [1, 2, 3, 5, 6])",
        "maximumTripletValue(nums = [0, -1, 2, -3])",
        "maximumTripletValue(nums=[1, 4, 2, 3])",
        "maximumTripletValue(nums = [2, 1, 3, 5, 1])",
        "maximumTripletValue([1, 2, 3, 4, 5])"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"_LR\")",
        "furthestDistanceFromOrigin(moves = \"__LR_\")",
        "furthestDistanceFromOrigin(moves = \"L__L\")",
        "furthestDistanceFromOrigin(moves = \"L_\")",
        "furthestDistanceFromOrigin(moves = \"LR_LR\")",
        "furthestDistanceFromOrigin(moves = \"__L___\")",
        "furthestDistanceFromOrigin(moves = \"L_R____\")",
        "furthestDistanceFromOrigin(moves = \"LL__RR_\")",
        "furthestDistanceFromOrigin(\"___LR\")",
        "furthestDistanceFromOrigin(moves = \"_____L_____\")"
    ],
    "sample_149": [
        "finalString(s = 'string')",
        "finalString(s = 'rtsng')",
        "finalString(s = 'sing')",
        "finalString(s = \"rtsng\")",
        "finalString(s='rsting')",
        "finalString(s = 'igrtns')",
        "finalString(s = \"tgfedcba\")",
        "finalString(s = 'girong')",
        "finalString(s = 'iigort')",
        "finalString(\"spqrtsnig\")"
    ],
    "sample_162": [
        "maxSum(nums = [51,32,43])",
        "maxSum(nums = [51,32,43])",
        "maxSum(nums = [51,32,43])",
        "maxSum(nums = [51, 32, 43])",
        "maxSum([42, 33, 60])",
        "maxSum([42, 33, 60])",
        "maxSum([51, 32, 43])",
        "maxSum(nums=[51,32,43])",
        "maxSum([1, 200, 1000, 2000, 3000])",
        "maxSum(nums = [12, 52, 201, 78, 23, 13, 99, 11, 9, 3, 18, 14])"
    ],
    "sample_230": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [4, 3, 2, 1])",
        "countWays(nums = [1, 2, 4])",
        "countWays(nums = [1, 1, 1, 1, 1])",
        "countWays(nums=[1, 2, 3, 4, 5, 6])",
        "countWays(nums = [1, 1, 1, 1, 1, 1])",
        "countWays([5, 5, 5, 5])",
        "countWays(nums = [2, 2, 4, 5])",
        "countWays(nums=[2,2,1,2,1])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n=2, target=1)",
        "minimumPossibleSum(n=2, target=2)",
        "minimumPossibleSum(n=5, target=10)",
        "minimumPossibleSum(n = 3, target = 20)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 4, offers = [[1, 3, 3], [3, 4, 1]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 1], [2, 5, 1], [3, 4, 1], [4, 5, 1]])",
        "maximizeTheProfit(N = 5, offers = [[1, 3, 2], [3, 4, 1], [3, 5, 1]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 1], [0, 1, 1], [3, 4, 1]])",
        "maximizeTheProfit(N = 5, offers = [[0,1,1],[1,2,3],[2,3,4]])",
        "maximizeTheProfit(N = 5, offers = [[0, 1, 10], [1, 2, 20], [2, 3, 20], [3, 4, 10]])",
        "maximizeTheProfit(N = 5, offers = [[3, 2, 1], [1, 4, 2], [4, 5, 3]])",
        "maximizeTheProfit(N = 5, offers = [[1,3,1], [1,4,1], [3,4,2]])",
        "maximizeTheProfit(N = 6, offers = [[0, 2, 1], [1, 3, 1], [4, 5, 1], [2, 4, 2]])",
        "maximizeTheProfit(N = 4, offers = [[2, 3, 1], [1, 3, 1], [2, 3, 1], [1, 1, 1]])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 5, offers = [[1,3,3],[2,5,1],[1,5,1],[4,4,1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4]])",
        "maximizeTheProfit(n = 5, offers = [[1,3,3], [2,5,1], [1,5,10]])",
        "maximizeTheProfit(n = 10, offers = [[1, 5, 3], [1, 3, 5]])",
        "maximizeTheProfit(n = 7, offers = [[1,3,3],[1,4,1],[4,6,5]])",
        "maximizeTheProfit(n = 10, offers = [[1, 2, 10], [2, 4, 5], [1, 9, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [1, 2, 1], [1, 3, 2], [2, 3, 4]])",
        "maximizeTheProfit(n = 10, offers = [[1,2,5], [2,3,3], [3,4,2], [6,10,10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 4], [2, 5, 6], [1, 3, 5], [4, 5, 1], [1, 4, 3]])",
        "maximizeTheProfit(n = 10, offers = [[1, 5, 5], [2, 3, 3], [4, 8, 4], [7, 8, 5], [9, 9, 4]])"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4, 5], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 0, 0, 0, 0, 0], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 2, 3], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 5, 12, 6], target = 15)"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1,1,1,1,1])",
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1,2,1,2,1,3])",
        "countCompleteSubarrays(nums=[1,2,3,4,1,2,3,4])",
        "countCompleteSubarrays(nums = [1,2,1,3,2,1,1,2,3])",
        "countCompleteSubarrays([2,1,3,2,1,1,2,1,3,2])",
        "countCompleteSubarrays(nums = [3,4,2,1,1,1,3,4,5])",
        "countCompleteSubarrays(nums = [2,1,4,2,3,4,1,3,2,4,1])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [3, 1, 2])",
        "countWays(nums=[1, 2, 3])",
        "countWays(nums = [1, 0, 1])",
        "countWays(nums = [3, 1, 4])",
        "countWays([1,2,3,4,5,6,7,8])",
        "countWays(nums=[2, 0, 4, 1, 3])",
        "countWays([2,3,1,3,0])",
        "countWays([3, 0, 4])",
        "countWays(nums = [1,1,1,0,0,0,2,2,2])"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [1, 2, 1])",
        "maxIncreasingGroups(usageLimits = [2, 1, 2])",
        "maxIncreasingGroups(usageLimits = [1, 1, 2, 2, 3])",
        "maxIncreasingGroups(usageLimits = [3, 2, 2, 1, 0])",
        "maxIncreasingGroups(usageLimits = [6, 5, 3, 2])",
        "maxIncreasingGroups(usageLimits = [2, 1, 4, 5, 3])",
        "maxIncreasingGroups(usageLimits = [3,1,3,2,2])",
        "maxIncreasingGroups(usageLimits=[2, 4, 6, 10])",
        "maxIncreasingGroups(usageLimits = [2, 0, 3, 0, 2, 0, 2, 0])",
        "maxIncreasingGroups([4, 3, 4, 2])"
    ],
    "sample_173": [
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 1, k = 2)",
        "minimumSum(n = 2, k = 1)"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1,2,3,4], m = 4, k = 1)",
        "countInterestingSubarrays(nums = [3,1,4,3,2,2,4], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,3,2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [3, 1, 2, 2, 2, 1, 3], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,3,2,3,1], m = 4, k = 3)",
        "countInterestingSubarrays(nums = [2,3,1,2,1,2,3,1,2,3], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [0, 2, 2, 1, 3], m = 2, k = 3)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1,2,3,4,5,6])",
        "countCompleteSubarrays(nums = [2,3,1,2,3,2,3,3])",
        "countCompleteSubarrays(nums = [3,4,4,5])",
        "countCompleteSubarrays(nums = [2, 1, 3, 1, 2, 1, 3])",
        "countCompleteSubarrays(nums = [0,0,0,0,0])",
        "countCompleteSubarrays(nums = [2,2,2,1,1,1])",
        "countCompleteSubarrays([1, 2, 3, 1, 2, 1, 3, 2])",
        "countCompleteSubarrays(nums = [5, 5, 5, 5, 5, 5, 5, 5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1])"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1,3,2,2,5,2,3,7], k = 5)",
        "longestEqualSubarray(nums = [1,3,2,2,1,1,3,3,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,3,1], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 1, 2], k = 1)",
        "longestEqualSubarray(nums = [1,2,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [2, 1, 2, 1, 2, 1, 2, 1], k = 1)",
        "longestEqualSubarray(nums = [3,4,1,2,3,4,1,2,3], k = 2)",
        "longestEqualSubarray(nums=[5, 5, 5, 5, 5, 5], k=0)",
        "longestEqualSubarray(nums=[1,2,3,4,5,1,2,3,4,1], k=2)",
        "longestEqualSubarray(nums = [1,2,2,1,1,2,1,1,2,2,1,2,1,1,1,2,1,1,1,1,2,2,2,1,2,1,1,1,1,1,2,1,2,2,1,2,1,1,1,2,1,1,2,2,2,2,1,2,1,2,2,1,1,1,1,2,1,2,2,1,2,1,1,2,2,2,1,1,2,1,2,2,1,1,1,1,1,1,1,2,1,2,1,1,2,1,2,2,1,2,2,1,1,2,1,1,2,1,2,1,1,1,2,1,2,1,2,1,1,1,1,2,1,2,1,1,2,2,2,1,2,2,1,1,1,1,2,1,2,2,2,2,1,1,2,1,2,1,2,1,1,1,2,1,2,2,1,1,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,2,2,1,1,2,2,2,1,2,2,2,1,1,1,1,2,2,2,2,1,2,1,1,1,1,1,2,1,1,1,1,2,2,2,1,2,2,1,1,1,2,2,2,1,1,1,2,2,2,1,1,2,1,1,1,2,1,1,2,2,1,2,2,1,2,2,1,2,2,2,1,1,1,1,2,1,2,1,2,2,2,1,1,1,2,2,1,2,2,2,1,1,1,2,1,1,1,1"
    ],
    "sample_170": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"mq\", \"px\", \"zy\"], s = \"mpxz\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"bap\")",
        "isAcronym(words = [\"one\", \"two\", \"three\"], s = \"onetwothree\")",
        "isAcronym(words = [\"i\", \"am\", \"hungry\"], s = \"iamhungry\")",
        "isAcronym(words = [\"i\", \"am\", \"a\", \"wizard\"], s = \"iamaw\")",
        "isAcronym(words = [\"my\", \"super\", \"fun\"], s = \"mssf\")",
        "isAcronym(words = [\"foobar\", \"spam\"], s = \"fab\")",
        "isAcronym(words = [\"accounting\", \"systems\", \"engineering\"], s = \"cse\")",
        "isAcronym(words = [\"youth\", \"flourishing\", \"festival\"], s = \"yff\")"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = '01')",
        "maximumOddBinaryNumber(s = '01')",
        "maximumOddBinaryNumber(s = '11')",
        "maximumOddBinaryNumber(s='0101')",
        "maximumOddBinaryNumber(s = '00101')",
        "maximumOddBinaryNumber(s = '11001')",
        "maximumOddBinaryNumber(s = '10000')",
        "maximumOddBinaryNumber(s='00001')",
        "maximumOddBinaryNumber(s = \"100101\")",
        "maximumOddBinaryNumber(s = '01001000000')"
    ],
    "sample_226": [
        "countWays(nums = [2, 1, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 3, 2])",
        "countWays(nums=[1, 2, 3, 4, 5, 6, 7])",
        "countWays(nums = [3, 4, 5, 6, 7])",
        "countWays(nums = [2, 3, 5, 4, 1])",
        "countWays(nums = [1, 2, 5, 8])",
        "countWays([1, 10, 100])",
        "countWays(nums = [1,1,1,1])"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 10, offers = [[1, 3, 3], [2, 5, 1], [5, 7, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [1, 4, 5]])",
        "maximizeTheProfit(n = 10, offers = [[2, 5, 6], [4, 6, 5], [5, 7, 4]])",
        "maximizeTheProfit(n = 10, offers = [[1,3,3],[2,5,10],[5,9,5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 3], [2, 5, 3], [1, 5, 10], [3, 5, 5]])",
        "maximizeTheProfit(n = 10, offers = [[1, 6, 2], [2, 7, 3], [3, 8, 4], [4, 9, 5], [5, 10, 6]])",
        "maximizeTheProfit(n = 10, offers = [[2,5,3], [4,7,6], [1,8,2]])",
        "maximizeTheProfit(n = 6, offers = [[0, 2, 10], [2, 4, 2], [3, 5, 1], [4, 6, 10]])",
        "maximizeTheProfit(n = 10, offers = [[3, 5, 10], [6, 10, 1], [2, 6, 2], [10, 10, 7], [5, 9, 1]])",
        "maximizeTheProfit(n = 10, offers = [[1, 5, 2], [5, 9, 5], [1, 3, 2], [4, 6, 6], [5, 8, 1], [7, 10, 10], [6, 7, 9], [4, 7, 8], [6, 8, 7], [6, 10, 10], [1, 4, 3]])"
    ],
    "sample_122": [
        "minimumIndex(nums = [2,1,1,2,1,3,3,3,1])",
        "minimumIndex(nums = [2,1,1,2,1,3,3,3,1])",
        "minimumIndex(nums = [2,1,1,1,2,3,1])",
        "minimumIndex(nums = [2,1,1,2,1,3,3,3,1,1,3])",
        "minimumIndex(nums = [2,3,1,1,1])",
        "minimumIndex([3,2,3,2,2,2])",
        "minimumIndex([2, 1, 1, 1, 2, 3, 1])",
        "minimumIndex(nums = [1,2,2,2,2,1,1,1])",
        "minimumIndex(nums = [3, 2, 3, 4, 2, 2, 2])",
        "minimumIndex(nums = [2, 1, 3, 1, 1, 1, 1, 3])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[2,4],[3,6],[5,5]])",
        "numberOfPoints(nums = [[1,2],[2,3],[6,8]])",
        "numberOfPoints(nums = [[1, 3], [3, 7], [4, 6]])",
        "numberOfPoints(nums=[[1, 3], [3, 9], [4, 10]])",
        "numberOfPoints(nums = [[1, 5], [10, 15], [5, 10]])",
        "numberOfPoints(nums = [[1, 4], [2, 3], [2, 5]])",
        "numberOfPoints([[1, 3], [5, 6]])",
        "numberOfPoints(nums = [[5,9],[1,3],[4,5]])",
        "numberOfPoints(nums = [[3,5],[8,9],[4,6],[5,7]])",
        "numberOfPoints(nums = [[1, 5], [10, 12], [1, 6], [6, 10], [1, 3], [4, 10], [2, 10]])"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one\",\"two\",\"three\",\"four\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"one\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"one\",\"two\",\"three\",\"four\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one\", \"two\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\"], separator = \"-\")"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 1, target = 0)",
        "minimumPossibleSum(n = 1, target = 5)",
        "minimumPossibleSum(n = 4, target = 6)",
        "minimumPossibleSum(n = 4, target = 9)",
        "minimumPossibleSum(n=2, target=3)"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 3], [3, 9]])",
        "numberOfPoints(nums = [[1, 3], [3, 9]])",
        "numberOfPoints([[2, 4], [3, 6], [5, 5]])",
        "numberOfPoints(nums = [[1, 3], [3, 7]])",
        "numberOfPoints([[1, 4], [2, 3], [3, 5]])",
        "numberOfPoints(nums = [[1, 5], [3, 3], [5, 7], [7, 7]])",
        "numberOfPoints(nums = [[0,1],[2,3],[4,5],[2,3],[6,7]])",
        "numberOfPoints([[1,2],[1,1],[2,1]])",
        "numberOfPoints([[1, 3], [2, 5], [6, 9], [8, 10], [11, 14]])",
        "numberOfPoints(nums = [[1, 4], [1, 5], [2, 3], [2, 4], [3, 4], [3, 5], [4, 6], [5, 7], [6, 8], [7, 8]])"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1,2,3,4], m = 2, k = 1)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4, 5], m=3, k=1)",
        "countInterestingSubarrays(nums = [2,3,1,2,4,3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 1, 2, 4, 3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,3,2], m = 4, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 6, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 1, 2, 1, 1, 1, 2], m = 3, k = 2)",
        "countInterestingSubarrays(nums=[2, 3, 1, 2, 3, 1], m=4, k=2)",
        "countInterestingSubarrays(nums = [2,3,1,3,2,4,2], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [2,1,3,2,1,2,3,2], m = 2, k = 3)"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "sumIndicesWithKSetBits(nums = [4, 5, 2, 7, 1], k = 3)",
        "sumIndicesWithKSetBits(nums = [4, 2, 2, 6, 2, 7], k = 3)",
        "sumIndicesWithKSetBits(nums=[1,2,3,4,5], k=1)",
        "sumIndicesWithKSetBits(nums = [3,5,6,7,8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [6, 8, 3, 2], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 5, 2, 7, 2, 9, 2, 5, 6], k = 3)"
    ],
    "sample_203": [
        "minimumOperations(\"25\")",
        "minimumOperations(num = \"22525\")",
        "minimumOperations(num = \"200\")",
        "minimumOperations(num = \"200\")",
        "minimumOperations(\"02\")",
        "minimumOperations(num = \"1\")",
        "minimumOperations(\"250250\")",
        "minimumOperations(\"2021\")",
        "minimumOperations(num = \"1001\")",
        "minimumOperations(\"2525025252502525\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [4,5,0,-2,-3,1], modulo = 5, k = 5)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3], modulo = 2, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6], modulo = 3, k = 3)",
        "countInterestingSubarrays(nums = [3, 1, 2, 4], modulo = 3, k = 3)",
        "countInterestingSubarrays(nums = [2, 3, 3, 1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums=[0, 1, 2], modulo=3, k=2)",
        "countInterestingSubarrays(nums = [1,1,2,1,3], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 1, 1, 1], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [5, 1, 1, 2, 3], modulo = 2, k = 2)"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [5,6,7,8,9], K = 2)",
        "longestEqualSubarray(A = [1,2,3,4,5,6,7,8,9,10], K = 2)",
        "longestEqualSubarray(A = [1, 3, 5, 3, 1], K = 2)",
        "longestEqualSubarray(A = [1,2,3,1,2,4,1,2,3,4,1,2,4], K = 2)",
        "longestEqualSubarray(A = [1,2,2,3,1,1,1,2,2,1], K = 2)",
        "longestEqualSubarray(A = [7,4,5,1,2,3,8,4], K = 0)",
        "longestEqualSubarray(A = [4, 3, 4, 2, 2, 4], K = 1)",
        "longestEqualSubarray(A=[3, 2, 3, 2, 2, 2, 3, 3], K=1)",
        "longestEqualSubarray(A = [2,3,1,1,1,1,2,2,2,2,3,3,3], K = 0)",
        "longestEqualSubarray(A = [1,2,3,1,2,3,2,1,2,2,2,2,2,2,3,4], K = 3)"
    ],
    "sample_146": [
        "finalString(s = 'pinter')",
        "finalString(s = 'iponter')",
        "finalString(s = 'inter')",
        "finalString(s = 'ponteri')",
        "finalString(s = 'ipnter')",
        "finalString(s=\"inter\")",
        "finalString(s='poiinter')",
        "finalString(s = 'intre')",
        "finalString(s= 'inter')",
        "finalString(s=\"interview\")"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 5, 20, 10, 5], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 5, 10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 15, 20], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 2, 2, 5, 3], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 15, 20, 25], target = 12)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 1, 5, 1], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 7, 6, 1], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 10, 11, 10, 9, 12, 10], target = 11)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 3], [3, 9], [4, 6]])",
        "numberOfPoints(nums = [[2, 4], [3, 6], [5, 5]])",
        "numberOfPoints(nums = [[1,3],[3,9],[4,10]])",
        "numberOfPoints(nums=[[1, 3], [3, 9]])",
        "numberOfPoints(nums = [[1, 3], [2, 6], [8, 10]])",
        "numberOfPoints(nums = [[0, 1], [2, 3], [4, 5], [6, 7]])",
        "numberOfPoints(nums = [[1, 2], [3, 5], [1, 5]])",
        "numberOfPoints([[1, 2], [4, 5], [3, 4]])",
        "numberOfPoints(nums = [[3,3],[2,3],[1,2]])",
        "numberOfPoints([[1, 2], [2, 5], [2, 4], [3, 3]])"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 2, 3])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 1, 1])",
        "maxIncreasingGroups([1, 1, 1])",
        "maxIncreasingGroups(A = [1, 2, 2, 3, 4])",
        "maxIncreasingGroups([2,3,5])",
        "maxIncreasingGroups(A = [2, 1, 1, 2, 1])",
        "maxIncreasingGroups([2, 4, 6, 8])",
        "maxIncreasingGroups([1, 2, 2, 3, 3, 4, 5, 5, 6])",
        "maxIncreasingGroups([1, 3, 2, 2, 3, 1, 1])"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 3, offers = [[1,2,2],[3,4,4]])",
        "maximizeTheProfit(n=3, offers=[[1,1,1],[2,2,2]])",
        "maximizeTheProfit(n=5, offers=[[1, 2, 1], [2, 3, 2], [3, 5, 1]])",
        "maximizeTheProfit(n = 3, offers = [[2,1,2],[1,2,1],[3,2,3]])",
        "maximizeTheProfit(n = 2, offers = [[1,1,0],[1,2,1],[1,2,2]])",
        "maximizeTheProfit(n = 6, offers = [[1,4,2],[3,5,3],[2,6,2]])",
        "maximizeTheProfit(n = 6, offers = [[1, 3, 2], [2, 5, 1], [3, 6, 1]])",
        "maximizeTheProfit(n = 5, offers = [[2,3,2],[3,4,2],[1,1,5]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 4], [3, 5, 3]])",
        "maximizeTheProfit(n=6, offers=[[2,3,2],[3,4,2],[1,3,1000000],[2,4,1]])"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"LL_RRR\")",
        "furthestDistanceFromOrigin(moves = \"LRL_R_R\")",
        "furthestDistanceFromOrigin(moves = \"LRL____\")",
        "furthestDistanceFromOrigin(moves = \"L_LLRR_\")",
        "furthestDistanceFromOrigin(moves = \"R_LLLL__\")",
        "furthestDistanceFromOrigin(\"RRLRL_\")",
        "furthestDistanceFromOrigin(moves = \"R__L_R_______\")",
        "furthestDistanceFromOrigin(\"LLLL_RRRR_UUUU_DDDD\")",
        "furthestDistanceFromOrigin(moves = 'LLRRRLLLRR')",
        "furthestDistanceFromOrigin(\"RRRLL_RRRRR_\")"
    ],
    "sample_175": [
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 1, k = 2)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,3],[3,9],[4,10]])",
        "numberOfPoints(nums = [[1,3],[1,3],[0,3]])",
        "numberOfPoints(nums = [[1,3],[2,5],[5,6]])",
        "numberOfPoints(nums = [[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3]])",
        "numberOfPoints(nums=[[1,4],[3,6],[8,10]])",
        "numberOfPoints(nums = [[0,2], [2,3], [1,5]])",
        "numberOfPoints(nums=[[1,4],[3,5],[4,6],[2,8],[10,13]])",
        "numberOfPoints([[3, 6], [7, 7], [3, 4], [10, 11]])",
        "numberOfPoints([[0,10],[1,1],[1,4],[4,5]])",
        "numberOfPoints([[1, 3], [5, 5], [1, 2], [2, 3], [5, 5], [2, 5], [1, 3], [1, 4], [5, 5], [5, 6]])"
    ],
    "sample_205": [
        "minimumOperations(num = \"025\")",
        "minimumOperations(\"5050\")",
        "minimumOperations(\"0250\")",
        "minimumOperations(\"0125\")",
        "minimumOperations(num = \"00123\")",
        "minimumOperations(\"5\")",
        "minimumOperations(num = \"9000\")",
        "minimumOperations(num = \"1234567\")",
        "minimumOperations(num = \"1221\")",
        "minimumOperations(\"010101\")"
    ],
    "sample_120": [
        "minimumIndex(nums = [2,1,3,1,1,3,3])",
        "minimumIndex(nums = [2, 3, 1, 2, 2])",
        "minimumIndex(nums = [1,2,2,2,1])",
        "minimumIndex(nums = [2,1,3,1,1,3,3,3])",
        "minimumIndex(nums = [2, 1, 2, 2, 2, 1, 2, 2, 1, 2])",
        "minimumIndex([2, 3, 1, 4, 4, 4])",
        "minimumIndex([1,2,2,1,1,3])",
        "minimumIndex(nums = [0,1,1,1,2,0])",
        "minimumIndex(nums = [1,1,1,1,2,1,2,1,1,2])",
        "minimumIndex(nums = [0,1,0,2,1,2,1,0,1])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"LR_RL\")",
        "furthestDistanceFromOrigin(moves = \"L__L___R\")",
        "furthestDistanceFromOrigin(moves = \"L__RRR__\")",
        "furthestDistanceFromOrigin(moves = \"LR_LRL__R\")",
        "furthestDistanceFromOrigin(moves = \"R__LRL_\")",
        "furthestDistanceFromOrigin(moves = \"LLRR_RLL\")",
        "furthestDistanceFromOrigin(moves = 'LLLLRRR')",
        "furthestDistanceFromOrigin(moves = \"RLLLRR\")",
        "furthestDistanceFromOrigin(moves = '__L_R_L_R')",
        "furthestDistanceFromOrigin(moves = \"L_LLLLLRLRL_LLLLRL\")"
    ],
    "sample_161": [
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [18, 43, 36, 13, 7])",
        "maxSum(nums = [42, 33, 60])",
        "maxSum(nums = [10, 12])",
        "maxSum(nums = [1,2,3,4])",
        "maxSum(nums = [5, 9, 2, 3])",
        "maxSum(nums = [12, 45, 987])",
        "maxSum(nums = [52, 12, 125, 1115, 1125])",
        "maxSum(nums = [21, 12, 34, 1, 5, 4, 3])"
    ],
    "sample_160": [
        "maxSum(nums = [51,32,43])",
        "maxSum(nums = [51,32,43])",
        "maxSum(nums = [51,32,43])",
        "maxSum(nums = [51,32,43])",
        "maxSum([51, 32, 43])",
        "maxSum(nums=[51,32,43])",
        "maxSum(nums=[51, 32, 43])",
        "maxSum(nums = [10, 1234, 456, 12, 56789])",
        "maxSum(nums = [5, 50, 55, 56, 57, 60])",
        "maxSum(nums = [111, 211, 311, 121, 221, 321, 110, 210, 310, 100, 200, 300])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"-\")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = '-')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = '-')",
        "splitWordsBySeparator(words = [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one.two.three\",\"four.five\",\"six\"], separator = \".\")",
        "splitWordsBySeparator(words=['one', 'two', 'three', 'four', 'five', 'six'], separator='-')",
        "splitWordsBySeparator(words = [\"one.two.three\", \"four.five\", \"six\"], separator = \".\")",
        "splitWordsBySeparator(words = ['one.two.three', 'four.five', 'six'], separator = '.')",
        "splitWordsBySeparator(words=[\"one\", \"two\", \"three\", \"four\",\"five\", \"six\"], separator=\"-\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\",\"five\",\"six\"], separator = \"-\")"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours=[1, 2, 3], target=4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 3, 2], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [100, 100, 100, 100, 100], target = 110)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 9, 9, 9, 9, 9, 9, 9, 9], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 13, 18], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 11, 14], target = 13)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 4, 8, 15, 10, 7, 1], target = 12)"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 2, 9], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 5, 10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [3,2,5], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 2, 1, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [15, 10, 10, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 6, 10, 12], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2,1,2,2,1,1,2], target = 2)"
    ],
    "sample_171": [
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 1, k = 2)",
        "minimumSum(n = 4, k = 5)",
        "minimumSum(n=3, k=1)"
    ],
    "sample_159": [
        "maxSum(nums = [51,32,43])",
        "maxSum(nums = [51,32,43])",
        "maxSum(nums = [51,32,43])",
        "maxSum(nums = [51,71,17,42])",
        "maxSum(nums=[51,32,43])",
        "maxSum(nums = [50,2,1,9])",
        "maxSum(nums = [1,2,3,9,7,10])",
        "maxSum(nums = [15,24,45])",
        "maxSum(nums=[10,50,90,22,71])",
        "maxSum([5, 2, 25, 3, 2, 1, 4, 21])"
    ],
    "sample_157": [
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 14)",
        "canSplitArray(nums = [1, 2, 3], m = 4)",
        "canSplitArray(nums = [1, 2, 3], m = 1)",
        "canSplitArray(nums = [3, 2, 1], m = 2)",
        "canSplitArray(nums = [2, 1], m = 1)",
        "canSplitArray(nums = [4,3,2,1], m = 5)",
        "canSplitArray(nums = [2, 3, 1, 0, 4], m = 3)",
        "canSplitArray(nums = [5,2,4,3,1,6], m = 10)",
        "canSplitArray(nums = [3, 5, 4, 5], m = 5)",
        "canSplitArray(nums = [5, 2, 4, 6, 8], m = 7)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one\",\"two\",\"three\",\"four\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"a\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\"], separator = \"four\")",
        "splitWordsBySeparator(words = [\"one\",\"two\",\"three\",\"four\"], separator = \"|\")",
        "splitWordsBySeparator(words=[\"one\", \"two\", \"three\", \"four\"], separator=\".\")",
        "splitWordsBySeparator(words = [\"alice\",\"bob\",\"charlie\"], separator = \"\")",
        "splitWordsBySeparator(words=[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"], separator=\"-\")",
        "splitWordsBySeparator(words = [\"t\",\"\",\"\",\"\",\"false\",\"\",\"\",\"\",\"true\",\"\"], separator = \",\")"
    ],
    "sample_172": [
        "minimumSum(n = 1, k = 1)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 1, k = 2)",
        "minimumSum(n = 1, k = 2)",
        "minimumSum(n = 1, k = 3)",
        "minimumSum(n=3, k=2)",
        "minimumSum(n=3, k=3)",
        "minimumSum(n=1, k=2)"
    ],
    "sample_228": [
        "countWays(nums = [3,1,2,4])",
        "countWays(nums=[1, 2, 3, 4, 5])",
        "countWays([4,2,1,3])",
        "countWays(nums = [2, 1, 3, 0, 4])",
        "countWays(nums = [3,1,2,2])",
        "countWays([0, 2, 3, 4, 6])",
        "countWays(nums = [3,0,2,1,4])",
        "countWays(nums = [1,2,1,1])",
        "countWays(nums = [2,5,1,0,3])",
        "countWays(nums = [3,5,6,7])"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = '11')",
        "maximumOddBinaryNumber(s = '100')",
        "maximumOddBinaryNumber(s='010')",
        "maximumOddBinaryNumber(s = \"1000\")",
        "maximumOddBinaryNumber(s = '1111000')",
        "maximumOddBinaryNumber('00011')",
        "maximumOddBinaryNumber(s=\"0010\")",
        "maximumOddBinaryNumber(s=\"1000\")",
        "maximumOddBinaryNumber('010')",
        "maximumOddBinaryNumber(s = \"100110001\")"
    ],
    "sample_119": [
        "minimumIndex(nums = [2,1,1,2,1,3,3,3,1])",
        "minimumIndex(nums = [2, 1, 3, 1, 1, 1, 7, 1, 2, 1])",
        "minimumIndex(nums = [1, 2, 2, 3, 2, 1, 3])",
        "minimumIndex(nums = [2,2,2,2,2,2])",
        "minimumIndex([2, 2, 1, 2])",
        "minimumIndex(nums = [2, 1, 2, 2, 2, 2, 2, 1, 2, 2])",
        "minimumIndex([1,2,2,3,2,1,3])",
        "minimumIndex(nums = [3, 2, 1, 4, 5, 6])",
        "minimumIndex(nums = [2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2])",
        "minimumIndex(nums = [1,2,2,2,2,2,2,3,4,5,6,7,7,8,9,10,10,10,11,12,12,12,13,13,14,14,14,15,16,16,17,17,18,18,18,19,19,20,20,20,21,21,22,22,22,22,22,22,23,23,24,25,26,26,26,27,27,28,29,29,29,29,30,30,31,31,31,32,33,34,34,34,34,35,36,37,37,38,38,38,38,39,39,39,40,41,41,41,41,42,42,42,43,43,44,45,45,45,45,46,46,46,46,47,47,47,47,47,47,47,48,49,49,49,50,50,50,50,50,51,52,53,53,54,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,55,56,56,56,56,57,57,57,57,58,58,58,59,59,60,60,60,60,60,60,60,60,60,60,60,61,61,62,63,63,63,63,64,64,64,64,64,64,6"
    ],
    "sample_153": [
        "canSplitArray(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "canSplitArray(nums = [1,2,2,2,2,2], m = 4)",
        "canSplitArray(nums = [1,2,3,4], m = 2)",
        "canSplitArray(nums = [1,2,1,2,1,2,1], m = 2)",
        "canSplitArray(nums = [2,3,1,5], m = 4)",
        "canSplitArray(nums=[2,2,1,4,5,6,7,8,9,10], m=3)",
        "canSplitArray(nums = [5,1,1,1,1,1], m = 3)",
        "canSplitArray(nums = [1,4,2,2,3], m = 3)",
        "canSplitArray(nums=[1,3,5,7], m=10)",
        "canSplitArray(nums = [1, 5, 3, 4], m = 3)"
    ],
    "sample_147": [
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = 'sting')",
        "finalString(s = 'rtisng')",
        "finalString(s = 'stnir')",
        "finalString(s = \"stinger\")",
        "finalString(s = 'crngsi')"
    ],
    "sample_174": [
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 4, k = 6)"
    ],
    "sample_154": [
        "canSplitArray(nums = [2,2,1], m = 4)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 2)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 19)",
        "canSplitArray(nums = [1,1,2,2], m = 4)",
        "canSplitArray(nums = [5,2,4,1,5,6], m = 7)",
        "canSplitArray(nums = [2,4,5,1,3,2], m = 3)",
        "canSplitArray(nums = [10,3,6,4], m = 14)",
        "canSplitArray(nums = [7,2,5], m = 10)",
        "canSplitArray(nums = [15,10,14,19,16], m = 19)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 5)"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2])",
        "countCompleteSubarrays([1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1,2,3,4,1,1,2,3,4])",
        "countCompleteSubarrays([3, 3, 3, 2, 2])",
        "countCompleteSubarrays(nums = [1, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1])"
    ],
    "sample_150": [
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = 'ritsng')",
        "finalString(s = \"rtisng\")"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 5, target = 1)",
        "minimumPossibleSum(n = 2, target = 5)"
    ],
    "sample_176": [
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 4, k = 4)",
        "minimumSum(n = 10, k = 3)",
        "minimumSum(n = 1, k = 100)",
        "minimumSum(n=4, k=5)"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [1,2,3,4], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 2, k = 3)",
        "countInterestingSubarrays(nums = [2, 3, 1, 2, 4, 3], modulo = 5, k = 4)",
        "countInterestingSubarrays(nums = [2, 3, 1, 2, 3], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [0,1,2], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [2,3,1,2,3,0,1], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [2,3,1,2,3,3,1,2,2,3], modulo = 3, k = 3)",
        "countInterestingSubarrays(nums=[0,1,2,2,0,2], modulo=3, k=2)",
        "countInterestingSubarrays(nums=[0, 1, 2, 3, 0, 4, 3], modulo=4, k=2)"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 4, 6, 7, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 6, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 5, 7, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 5, 8, 7, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [3,5,2,9,2,5,7], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 1, 2, 1, 4, 2, 3], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 3, 2, 5, 7, 9, 6, 4], k = 4)",
        "sumIndicesWithKSetBits(nums = [2, 4, 5, 2, 4, 5, 7, 8, 4], k = 2)"
    ],
    "sample_151": [
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = \"string\")",
        "finalString(s = 'tinsgr')",
        "finalString(s = 'trisng')",
        "finalString(s = 'rstni')",
        "finalString(s = 'rings')",
        "finalString(s = 'rtisgni')",
        "finalString(s = 'rtiing')",
        "finalString(s = \"grtsnig\")"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [4, 5, 2, 1], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,2,3], k = 1)",
        "sumIndicesWithKSetBits(nums = [4, 5, 2, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7], k = 4)",
        "sumIndicesWithKSetBits(nums = [4, 5, 1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 1, 1, 1, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [3,5,6,7,8,9,10], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 1, 1, 0, 1, 1, 0, 0, 0], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 5, 2, 4, 1, 3, 3, 4], k = 3)"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [2, 3, 5])",
        "maxIncreasingGroups(usageLimits = [2, 4, 6])",
        "maxIncreasingGroups(usageLimits = [2, 3, 4, 6])",
        "maxIncreasingGroups(usageLimits = [3, 2, 2])",
        "maxIncreasingGroups(usageLimits = [2, 3, 3, 5])",
        "maxIncreasingGroups(usageLimits = [2, 5, 2, 1])",
        "maxIncreasingGroups(usageLimits = [5, 8, 11])",
        "maxIncreasingGroups(usageLimits = [5, 1, 2, 4, 5])",
        "maxIncreasingGroups([1, 2, 3])"
    ],
    "sample_204": [
        "minimumOperations(s = \"0250\")",
        "minimumOperations(s = \"00110\")",
        "minimumOperations(s = \"02550\")",
        "minimumOperations(s = \"2025\")",
        "minimumOperations(s = \"0125\")",
        "minimumOperations(s = \"0052\")",
        "minimumOperations(s = \"120\")",
        "minimumOperations(s = \"0204\")",
        "minimumOperations(s = \"02205\")",
        "minimumOperations(s = \"012557\")"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 5, 20, 10, 5], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 5, 20, 10, 5], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50, 60], target = 45)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 6, 7], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4, 5, 8, 9], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 10, 10, 9, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours=[10, 9, 8, 10, 11], target=10)",
        "numberOfEmployeesWhoMetTarget(hours = [30, 40, 50, 100, 110, 120], target = 100)"
    ],
    "sample_148": [
        "finalString(s = 'pinter')",
        "finalString(s = 'interviewbit')",
        "finalString(s = 'peter')",
        "finalString(s = 'rtenip')",
        "finalString(s = 'pontet')",
        "finalString(s=\"interviewbit\")",
        "finalString(s = 'pniote')",
        "finalString(s = 'ipnioter')",
        "finalString(s = 'pontem')",
        "finalString(s = \"ipnoter\")"
    ],
    "sample_168": [
        "isAcronym(words = [\"banana\"], s = \"b\")",
        "isAcronym(words = [\"mq\", \"px\", \"zy\"], s = \"mq\")",
        "isAcronym(words = [\"world\", \"wide\"], s = \"ww\")",
        "isAcronym(words = [\"ab\", \"bc\", \"cd\"], s = \"abcd\")",
        "isAcronym(words = [\"test\", \"another\"], s = \"ta\")",
        "isAcronym(words = [\"r\", \"a\", \"n\", \"d\", \"o\", \"m\"], s = \"RANDOM\")",
        "isAcronym(words = [\"this\", \"is\", \"acronym\"], s = \"thai\")",
        "isAcronym(words = [\"bob\", \"is\", \"not\", \"happy\"], s = \"bihn\")",
        "isAcronym(words = [\"Talk\", \"About\", \"Life\"], s = \"TAAL\")",
        "isAcronym(words = [\"map\", \"peace\", \"food\"], s = \"paf\")"
    ],
    "sample_201": [
        "minOperations(nums = [1,1,1,1,1], target = 3)",
        "minOperations(nums = [1,1,1,1,1,1,1], target = 6)",
        "minOperations(nums=[8,9,10,11], target=12)",
        "minOperations(nums=[4, 2, 1], target=4)",
        "minOperations(nums = [1, 3], target = 10)",
        "minOperations(nums = [2, 3, 2, 3, 2], target = 6)",
        "minOperations(nums = [1,3,5,6], target = 2)",
        "minOperations(nums = [2, 3, 2, 4, 1], target = 4)",
        "minOperations(nums = [1, 1, 1, 4, 4], target = 3)",
        "minOperations(nums = [4,10,5,6,8,13], target = 16)"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '11')",
        "maximumOddBinaryNumber(s = '0110')",
        "maximumOddBinaryNumber(s = '0110')",
        "maximumOddBinaryNumber(s = '110')",
        "maximumOddBinaryNumber(s = '1010')",
        "maximumOddBinaryNumber(s = \"1110\")",
        "maximumOddBinaryNumber('011')"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s='111')",
        "maximumOddBinaryNumber(s = '1000')",
        "maximumOddBinaryNumber(s = '00000')",
        "maximumOddBinaryNumber(s='0001')",
        "maximumOddBinaryNumber('1111')",
        "maximumOddBinaryNumber(s = '010110')",
        "maximumOddBinaryNumber('1010')",
        "maximumOddBinaryNumber(s = '01001110010101101100')"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 4, target = 8)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 4, target = 7)",
        "minimumPossibleSum(n = 4, target = 11)",
        "minimumPossibleSum(n = 5, target = 12)"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LAR\")",
        "furthestDistanceFromOrigin(moves = \"LRARL\")",
        "furthestDistanceFromOrigin(moves = \"RLL\")",
        "furthestDistanceFromOrigin(moves = \"LLLRR\")",
        "furthestDistanceFromOrigin(\"LRRR\")",
        "furthestDistanceFromOrigin(\"RLLLRR\")",
        "furthestDistanceFromOrigin(moves = \"RALLL\")",
        "furthestDistanceFromOrigin(moves = \"LLLRRRLLL\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLRLRLRRR\")",
        "furthestDistanceFromOrigin(\"LRARLLLLRLRR\")"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 1, target = 5)",
        "minimumPossibleSum(n = 1, target = 5)",
        "minimumPossibleSum(n = 1, target = 5)",
        "minimumPossibleSum(n = 1, target = 100)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 5, 5], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 2, 10, 4], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 1, 2], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 4, 2], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4, 5, 6], target = 2)"
    ],
    "sample_231": [
        "countWays(nums = [1, 0, 2, 3])",
        "countWays(nums = [1,2,0])",
        "countWays(nums = [1, 0, 3])",
        "countWays(nums = [0,2,1])",
        "countWays(nums = [1, 0, 3, 2])",
        "countWays(nums = [3,2,1,0,4])",
        "countWays(nums = [3, 0, 1])",
        "countWays(nums = [1, 0, 2, 5, 3])",
        "countWays([1, 3, 0, 2, 4])",
        "countWays([1, 0, 2])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"LLR_RRR\")",
        "furthestDistanceFromOrigin(moves = \"__L__R_\")",
        "furthestDistanceFromOrigin(moves = \"LR__LL_\")",
        "furthestDistanceFromOrigin(moves = \"L__RRR__LLL\")",
        "furthestDistanceFromOrigin(moves = \"L______R____\")",
        "furthestDistanceFromOrigin(moves = \"LLRRR_____\")",
        "furthestDistanceFromOrigin(moves = \"LR__LR_R\")",
        "furthestDistanceFromOrigin(\"RL_R_L__R\")",
        "furthestDistanceFromOrigin(moves = \"LR_LR_RL_L_L_L\")",
        "furthestDistanceFromOrigin(moves = \"__LRRR_RLL_LL__RRRR_LL_LRLRL_R_RLLRL_LRLRLLLRR__RRLL_LRR_LRLR_LRRRL_LL_RLRRLLLLRLRRLRRLR_RLRLRLLR_LLLL_RRL_RRRLRRRRRLRLR_RRRRRLRL_RLRRRRRLLRRLLRLRR_LLLRR_LLRL_RRLRL_RRRL__RLR_LLLLRRLRLR_LRLRR_LRLRRL_LRLRRLLLLRRLLRRRRL_L_RL_LLLLLLL_LRLRRR_LRRRLRR_RLRLL_RLL_RLRLRRLRL_RLLRLRL__LLRRR_RLR_LLRLLR_LLLLLRL_LLRR_RLLLRLLRLLL_LLRLLRRLRLLLL_RLRL_LRL_RLLRL_L_RRLRLLRLLRRLLRR_RLLRLR_LLLLRL_LLRRRLLRLRLLLL_L_LRL_LLR_LLLLR_L_LLL_LRLRLRLRRR_RL_RLRLRRLLLLRL_LLRLLRLLLRRRLRLRRRRL_RLLRRRRLL_LLRLLRRLLRR_RLLRRLRRLRRL_LLRLLLLRL_LLRRRLLRRRRLRR_RLR_LLR_RLRLL_LLLLLRLL_LRLRRRLLL_LRL_LLLRRRRLLLLR_LLR_LLLLLLRR_RLRRLLLL_RLRRR_LRRRL_LLLLLLLLRLL_LLLRLLRLR_R_LLR_LRL_LRLRLLR_L_LLRRLLR_LLRRR_RLRRR_RLLRLLR_LRLRRR_RLLRLLL_RLRLLRR_LLRRLRRRRRRRRRRRRRLLR_LLLRR_L_LRLRRLRLRLRR_LLLRLLRRRRRRLLRLL_LLRLLLLRRLLRLRRRR_LL_LL_RLLLLLLL_LLLLLLRLRRLL_RRRLRLLLLLRR_LLR_LRLRRLLL_LRL_LRRLLRLLR_RRRRRLLRRLLRLRLLLLRRLLL_RLLL_LRLRR_LLRLLLLLRRLL_LLLLRRRRRLLRR_LRLRLLRRLRL_RRRLRLLLLLLLLLL_LLLRRRLLRLLR_LLLLRRLLLLLRRRLL_RLRR_LL_LRRRRRRR_"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 4, target = 4)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 4, target = 6)",
        "minimumPossibleSum(n = 5, target = 5)",
        "minimumPossibleSum(n=2, target=2)",
        "minimumPossibleSum(n = 5, target = 6)"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,1,2,3,3])",
        "countCompleteSubarrays(nums=[0,0,0,0,0])",
        "countCompleteSubarrays(nums = [1,2,2,2,2,1,1])",
        "countCompleteSubarrays(nums = [2, 1, 1, 1, 1, 2, 1, 2, 1, 1])",
        "countCompleteSubarrays([0, 1, 2, 0, 1, 2, 1, 2, 0, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 1, 1, 1, 3, 1, 3, 4])",
        "countCompleteSubarrays(nums = [3,3,2,2,1,2,1,1,3,1,1])"
    ],
    "sample_156": [
        "canSplitArray(nums = [7, 2, 5], m = 10)",
        "canSplitArray(nums = [2, 2, 1], m = 4)",
        "canSplitArray(nums = [1, 4, 2, 5, 3], m = 5)",
        "canSplitArray(nums = [2,3,2,1], m = 4)",
        "canSplitArray(nums = [3, 5, 2, 4], m = 6)",
        "canSplitArray(nums = [1, 3, 2, 5], m = 3)",
        "canSplitArray(nums = [2, 5, 4, 3], m = 8)",
        "canSplitArray(nums = [1, 10, 1], m = 1)",
        "canSplitArray(nums = [2,3,4,3,5], m = 5)",
        "canSplitArray(nums = [5, 7, 1, 2, 8], m = 6)"
    ],
    "sample_200": [
        "minOperations(nums = [8,9,2,2], target = 4)",
        "minOperations(nums = [1, 1, 1, 1], target = 4)",
        "minOperations(nums = [1, 1, 1, 1], target = 1)",
        "minOperations(nums = [1,2,5], target = 5)",
        "minOperations(nums = [8,9,2,2], target = 5)",
        "minOperations(nums = [8,9,8,2,4], target = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 12)",
        "minOperations(nums = [1,1,1,4,4,4,4,9,9,9], target = 5)",
        "minOperations(nums = [3, 6, 1, 9], target = 5)",
        "minOperations(nums = [10,100,10,10,10,10], target = 7)"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [4, 5, 2, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "sumIndicesWithKSetBits(nums = [4, 5, 2, 1, 3], k = 3)",
        "sumIndicesWithKSetBits(nums = [4, 5, 2, 7, 8, 10], k = 3)",
        "sumIndicesWithKSetBits(nums=[4, 5, 2, 7, 8], k=3)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 9, 12], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 3, 2, 1], k = 3)",
        "sumIndicesWithKSetBits(nums = [4, 2, 7, 3], k = 3)",
        "sumIndicesWithKSetBits(nums = [10, 10, 11, 9, 8, 9, 10, 9, 9, 10], k = 3)"
    ],
    "sample_165": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"banana\"], s = \"b\")",
        "isAcronym(words = [\"world\", \"wide\", \"web\"], s = \"WWW\")",
        "isAcronym(words = [\"java\", \"script\"], s = \"jss\")",
        "isAcronym(words = [\"early\", \"warning\", \"system\"], s = \"ews\")",
        "isAcronym(words = [\"today\", \"is\", \"so\", \"good\"], s = \"tigs\")",
        "isAcronym(words = [\"messi\", \"is\", \"a\", \"good\", \"player\"], s = \"migs\")",
        "isAcronym(words = [\"blah\", \"bloat\"], s = \"bbl\")",
        "isAcronym(words = [\"nice\", \"baby\", \"bear\"], s = \"nbb\")",
        "isAcronym(words = [\"what\", \"happened\", \"to\", \"the\", \"pig\", \"this\", \"morning\"], s = \"WHAT\")"
    ],
    "sample_227": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 3, 5, 7])",
        "countWays(nums = [4, 2, 6])",
        "countWays(nums = [1, 2, 4, 5, 3, 7, 8])",
        "countWays(nums = [0, 1, 1, 2, 4])",
        "countWays(nums = [1, 2, 0, 6, 4, 5])",
        "countWays(nums = [3, 5, 1, 4, 9])",
        "countWays(nums = [2,4,0,6,5])",
        "countWays(nums = [1, 4, 7, 10, 14])"
    ],
    "sample_158": [
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [54,23,11,99])",
        "maxSum(nums = [55, 90, 15])",
        "maxSum(nums = [5,10,50,100])",
        "maxSum(nums = [51, 9, 30, 31, 90, 3, 1, 40])",
        "maxSum([56, 92, 64])"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1,2,2,3,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,1,2], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [3,3,3,3], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,1,1,1,2,3,4], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,1,2,1,1,1,2,2,1], k = 2)",
        "longestEqualSubarray(nums = [2, 2, 1, 1, 2, 1, 1], k = 2)",
        "longestEqualSubarray(nums = [2, 3, 1, 2, 2, 1, 4, 3], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,3,1,2,3,2,2,2], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,2,3,4,5,3,3,1,2,1,2,3,2,1,2,2,2,2], k = 3)"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 5, offers = [[1,2,2],[3,4,1]])",
        "maximizeTheProfit(n = 5, offers = [[0, 0, 10], [1, 2, 5]])",
        "maximizeTheProfit(n = 5, offers = [[0, 2, 20], [1, 4, 30], [3, 5, 40]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 3], [0, 3, 3], [1, 4, 10], [2, 3, 5]])",
        "maximizeTheProfit(n = 11, offers = [[1, 10, 10], [2, 9, 9], [3, 8, 8], [4, 7, 7], [5, 6, 6]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 5], [1, 2, 4], [1, 1, 1], [3, 4, 10]])",
        "maximizeTheProfit(n = 7, offers = [[0, 2, 5], [2, 4, 4], [3, 6, 4]])",
        "maximizeTheProfit(n = 6, offers = [[1, 3, 3], [2, 5, 4], [2, 5, 5], [2, 5, 6], [5, 6, 7], [6, 7, 8], [6, 7, 9]])",
        "maximizeTheProfit(n = 5, offers = [[2,4,6],[0,4,3],[2,2,1],[1,4,5]])",
        "maximizeTheProfit(n = 10, offers = [[5, 7, 8], [4, 5, 4], [4, 6, 1], [6, 9, 5], [3, 5, 3], [4, 6, 4], [3, 8, 3], [5, 9, 4], [3, 6, 1], [4, 5, 3]])"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3])",
        "maxIncreasingGroups(x = [1, 3, 6, 10, 15])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups([10, 15, 20])",
        "maxIncreasingGroups([5, 1, 2, 4, 3])",
        "maxIncreasingGroups([3, 2, 1, 5, 4])",
        "maxIncreasingGroups(x = [1, 4, 5, 8])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([3, 2, 1, 2, 3])",
        "maxIncreasingGroups([1,2,3,5,6,7,8,9,10,11])"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1,2,3,4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 5, 2, 1, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,3,5,7,9], k = 3)",
        "sumIndicesWithKSetBits(nums = [3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 1, 1, 1, 2, 3, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [4,5,2,7,10], k = 3)",
        "sumIndicesWithKSetBits(nums = [3, 5, 1, 2], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 5, 7, 10], k = 1)",
        "sumIndicesWithKSetBits(nums = [4, 1, 2, 3, 7], k = 3)"
    ],
    "sample_207": [
        "minimumOperations(num = \"000\")",
        "minimumOperations(num = \"12345\")",
        "minimumOperations(num = \"00125\")",
        "minimumOperations(num = \"00025\")",
        "minimumOperations(num = \"02025\")",
        "minimumOperations(num = \"01110\")",
        "minimumOperations(num = \"77\")",
        "minimumOperations(num = \"0125500\")",
        "minimumOperations(num = \"2470\")",
        "minimumOperations(num = \"314159265\")"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"LRL\")",
        "furthestDistanceFromOrigin(moves = \"LRLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LRRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LRRRRR\")",
        "furthestDistanceFromOrigin(moves = \"RLLLRR\")",
        "furthestDistanceFromOrigin(moves = \"LRRRRL\")",
        "furthestDistanceFromOrigin(moves = \"LRLLL\")",
        "furthestDistanceFromOrigin(moves = \"RLLLRRRR\")"
    ],
    "sample_206": [
        "minimumOperations(num = \"025\")",
        "minimumOperations(num = \"025\")",
        "minimumOperations(num = \"025\")",
        "minimumOperations(num = \"025\")",
        "minimumOperations(\"025\")",
        "minimumOperations(num = \"02550\")",
        "minimumOperations(\"0016\")",
        "minimumOperations(num = \"0150\")",
        "minimumOperations(\"1175\")",
        "minimumOperations(num=\"12550\")"
    ],
    "sample_155": [
        "canSplitArray(nums = [2,2,1], m = 4)",
        "canSplitArray(nums = [1,2,3,4,5], m = 7)",
        "canSplitArray(nums = [1,1,1], m = 3)",
        "canSplitArray(nums = [1,2,3,4,5,6], m = 3)",
        "canSplitArray(nums = [5,1,4,2], m = 6)",
        "canSplitArray(nums = [1,3,2,4], m = 2)",
        "canSplitArray(nums = [3, 2, 2, 3], m = 6)",
        "canSplitArray(nums = [3, 2, 2, 4, 3], m = 3)",
        "canSplitArray(nums = [1, 3, 4, 6, 2], m = 5)",
        "canSplitArray(nums = [1,10,2,5], m = 10)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countCompleteSubarrays(nums = [3,5,1,2,3])",
        "countCompleteSubarrays(nums = [1,1,1,1,1])",
        "countCompleteSubarrays([1,3,1,2,2])",
        "countCompleteSubarrays(nums = [2, 3, 1, 2, 2, 3, 3, 3, 2, 2])",
        "countCompleteSubarrays(nums = [3, 5, 1, 2, 3, 4, 1, 2, 1, 3])",
        "countCompleteSubarrays(nums = [2, 1, 4, 2, 1, 2, 2, 3, 1, 1, 1])",
        "countCompleteSubarrays(nums = [3,4,2,3,4,3,2,2,4,2,2,4,3,3,4,3])"
    ],
    "sample_202": [
        "minimumOperations(num = \"02575\")",
        "minimumOperations(num = \"250250\")",
        "minimumOperations(num = \"75757525\")",
        "minimumOperations(num = \"252575\")",
        "minimumOperations(num = \"25252525\")",
        "minimumOperations(\"0225\")",
        "minimumOperations(num = \"50550\")",
        "minimumOperations(\"2557\")",
        "minimumOperations(\"155\")",
        "minimumOperations(\"25221575\")"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [\"one\", \"two\", \"three\", \"four\"], b = \"\")",
        "splitWordsBySeparator(a = [\"\"], b = \" \")",
        "splitWordsBySeparator(a=[\"a\", \"b\"], b=\"\")",
        "splitWordsBySeparator(a = [\"one\", \"two\", \"three\", \"four\"], b = \",\")",
        "splitWordsBySeparator(a=[\"\", \"hello\", \"world\"], b=\" \")",
        "splitWordsBySeparator(a = [\"\", \"b\"], b = \":\")",
        "splitWordsBySeparator(a=[\"a\",\"b\", \"c\"], b = \".\")",
        "splitWordsBySeparator(a = [\"somestring\"], b = \"somechar\")",
        "splitWordsBySeparator(a = [\"ba\", \"nana\", \"anana\", \"nana\"], b = \"na\")",
        "splitWordsBySeparator(a = [\"hello\", \"fller\"], b = \"l\")"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 5, 2, 1], k = 3)",
        "sumIndicesWithKSetBits(nums=[1,2,3,4,5,6,7,8], k=3)",
        "sumIndicesWithKSetBits(nums = [4, 5, 2, 1, 3], k = 1)",
        "sumIndicesWithKSetBits(nums=[4, 2, 7, 1, 3, 6], k=2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 2, 1, 1, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 0, 0, 0, 0], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,3,3,3,5,6,7], k = 3)",
        "sumIndicesWithKSetBits(nums = [3, 7, 12, 5], k = 2)"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = '111')",
        "maximumOddBinaryNumber(s = '0101')",
        "maximumOddBinaryNumber(s = '1000')",
        "maximumOddBinaryNumber(s = '01101')",
        "maximumOddBinaryNumber(s='101')",
        "maximumOddBinaryNumber(s = '11100')",
        "maximumOddBinaryNumber(s = '10111')",
        "maximumOddBinaryNumber(s = \"1010\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = '10100')"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,3,2,2,3,1], k = 3)",
        "longestEqualSubarray(nums = [3,3,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,3,1,3,2,1,3], k = 3)",
        "longestEqualSubarray(nums=[1,2,2,2,1,1,1], k=3)",
        "longestEqualSubarray(nums = [1,2,3,4,4,5,6,6], k = 3)",
        "longestEqualSubarray(nums = [4,3,1,2,1,3,3], k = 2)",
        "longestEqualSubarray(nums = [5,1,5,5,2,5], k = 1)",
        "longestEqualSubarray(nums=[1, 2, 1, 2, 3, 3, 2, 3], k=2)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,1,2,1,1,2], k = 3)",
        "longestEqualSubarray(nums = [1,3,4,1,1,1,4,4,1,1], k = 1)"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1, 3, 2, 2, 3, 1], k = 3)",
        "longestEqualSubarray(nums = [1,3,2,3,1,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,2], k = 1)",
        "longestEqualSubarray(nums = [3,1,2,2,2,1,3], k = 2)",
        "longestEqualSubarray(nums = [1,3,1,3,1,3], k = 2)",
        "longestEqualSubarray(nums = [3, 3, 3, 3, 3], k = 0)",
        "longestEqualSubarray(nums = [4, 1, 4, 1, 4], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,1,2,3,4,6,6,6], k = 1)",
        "longestEqualSubarray(nums=[1,3,1,3,3,3,4], k=1)",
        "longestEqualSubarray(nums = [1,3,1,3,3,4,1,3,4], k = 3)"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '0001')",
        "maximumOddBinaryNumber(s='001')",
        "maximumOddBinaryNumber(s = '0100')",
        "maximumOddBinaryNumber(s = '10')",
        "maximumOddBinaryNumber(s='100')",
        "maximumOddBinaryNumber(s = '0010110')",
        "maximumOddBinaryNumber(s = '01001')",
        "maximumOddBinaryNumber(s = '101010')",
        "maximumOddBinaryNumber(s='1011100101')"
    ],
    "sample_166": [
        "isAcronym(words = [\"potato\"], s = \"p\")",
        "isAcronym(words = [\"to\", \"be\", \"or\", \"not\", \"to\", \"be\"], s = \"TBE\")",
        "isAcronym(words = [\"happy\", \"halloween\"], s = \"hah\")",
        "isAcronym(words = [\"banana\"], s = \"b\")",
        "isAcronym(words = [\"marvel\", \"avengers\"], s = \"maa\")",
        "isAcronym(words = [\"nice\", \"try\", \"at\", \"coding\"], s = \"ntac\")",
        "isAcronym(words = [\"banana\", \"apple\", \"acroynm\"], s = \"bap\")",
        "isAcronym(words=[\"unforgettable\", \"astronomy\"], s=\"uam\")",
        "isAcronym(words = [\"Beautiful\", \"Excellence\"], s = \"B\")",
        "isAcronym(words = [\"admission\", \"manager\", \"managerial\", \"admission\", \"managerial\"], s = \"admmgr\")"
    ],
    "sample_163": [
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums=[51, 32, 43])",
        "maxSum(nums = [51,17,71,42])",
        "maxSum(nums = [999, 888, 777])",
        "maxSum(nums = [5, 56, 567, 5678, 56789])",
        "maxSum([55, 432, 542, 143, 30, 1203])",
        "maxSum([25,20,15,10,5])",
        "maxSum(nums=[51, 14, 72])",
        "maxSum(nums = [55, 175, 111])",
        "maxSum(nums = [2,5,4,7,3,1,3,4,5])"
    ]
}