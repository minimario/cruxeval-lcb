{
    "sample_407": [
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6])",
        "minimumRightShifts(nums = [1,2,3])",
        "minimumRightShifts(nums = [2, 1, 3])",
        "minimumRightShifts(nums = [1,2,3,4,5,6])",
        "minimumRightShifts(nums = [0, 1, 2, 3, 4])",
        "minimumRightShifts(nums = [0, 1, 2, 3, 4])",
        "minimumRightShifts(nums = [1,2,3,4,5,6,7,8,9])",
        "minimumRightShifts(nums = [2, 1, 3, 4, 5, 6])",
        "minimumRightShifts(nums = [2, 1, 3, 5, 4, 6, 7])"
    ],
    "sample_453": [
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"010\")",
        "minChanges(s = \"zzz\")",
        "minChanges(s = \"aabcc\")",
        "minChanges(s = \"0110\")",
        "minChanges(s = \"a\")",
        "minChanges(s = \"xyyyx\")",
        "minChanges(s = \"121\")",
        "minChanges(s = \"abcabd\")"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [10, 1, 2, 7, 6, 1, 5], target = 8)",
        "lengthOfLongestSubsequence(nums = [10, 1, 2, 7, 8], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 10)",
        "lengthOfLongestSubsequence(nums = [20, 1, 15, 2, 3, 10, 5, 8], target = 25)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 5], target = 4)",
        "lengthOfLongestSubsequence(nums = [2, 6, 3, 4, 5, 10], target = 17)",
        "lengthOfLongestSubsequence(nums = [1, 2, 4, 8, 16, 32, 64, 128], target = 82)",
        "lengthOfLongestSubsequence(nums = [2,4,6,9,8], target = 5)",
        "lengthOfLongestSubsequence(nums = [20, 2, 3, 10, 5], target = 52)",
        "lengthOfLongestSubsequence(nums = [2, 3, 1, 3, 5, 6, 9, 7, 8, 2, 3, 5, 6, 9, 7, 8, 3, 4, 5, 7, 8, 10, 11, 12], target = 13)"
    ],
    "sample_367": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = \"ymph\")",
        "sortVowels(s = 'ylmpH')",
        "sortVowels(s = 'Hmply')",
        "sortVowels(s = \"ylMph\")",
        "sortVowels(s = \"HmplY\")",
        "sortVowels(s = \"HeYpH\")",
        "sortVowels(s = 'Hymnal')",
        "sortVowels(s = 'yhPhpl')"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7, 9, 11], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 5, 6, 7], target = 9)",
        "lengthOfLongestSubsequence(nums = [5, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 5, 6, 9, 10, 11, 15], target = 17)",
        "lengthOfLongestSubsequence(nums = [1, 2, 5, 11, 13, 20], target = 25)",
        "lengthOfLongestSubsequence(nums = [1, 5, 7, 1, 9, 2, 1, 10, 5], target = 10)"
    ],
    "sample_381": [
        "countPairs(nums = [1,2,3,4], t = 5)",
        "countPairs(nums = [1,2,3], t = 5)",
        "countPairs(nums = [1, 2, 3, 4], t = 5)",
        "countPairs(nums = [1, 2, 3, 4], t = 10)",
        "countPairs(nums = [1, 2, 3, 4], t = 3)",
        "countPairs(nums = [5,1,3,4,2], t = 7)",
        "countPairs(nums = [1, 1, 3], t = 4)",
        "countPairs(nums = [2, 7, 4], t = 12)",
        "countPairs(nums = [3,1,2,5,2,3], t = 7)",
        "countPairs(nums = [3,5,7,9,11,13], t = 20)"
    ],
    "sample_366": [
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [1, 3, 4])",
        "isGood(nums = [2, 0, 1, 3])",
        "isGood(nums = [2, 3, 5])",
        "isGood(nums = [1, 2, 5, 6])",
        "isGood(nums = [0,1,2])",
        "isGood(nums = [1, 2, 5, 6, 7])",
        "isGood(nums = [0, 1, 4, 5, 8])",
        "isGood(nums = [2,3,4,5,8,9])",
        "isGood(nums = [1, 2, 3, 5, 4, 5, 6, 7, 9, 9, 10])"
    ],
    "sample_369": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"hYmpL\")",
        "sortVowels(s = 'Hymph')",
        "sortVowels(s = 'Phlym')",
        "sortVowels(s = 'ylmPh')",
        "sortVowels(s = 'zYmpH')",
        "sortVowels(s = \"Ymplh\")",
        "sortVowels(s = \"YlmPh\")"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1,2,3,4,5,6,7])",
        "minimumRightShifts(nums = [3, 2, 4, 1, 5])",
        "minimumRightShifts(nums = [1, 2, 0, 3])",
        "minimumRightShifts(nums = [3, 5, 1, 4, 2])",
        "minimumRightShifts(nums = [5, 5, 7])",
        "minimumRightShifts(nums = [1, 7, 2, 8, 3])"
    ],
    "sample_448": [
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"xyxz\")",
        "minChanges(s = \"zzz\")",
        "minChanges(s = \"1000\")",
        "minChanges(s = \"11001\")",
        "minChanges(s = \"axax\")",
        "minChanges(s = \"dd\")",
        "minChanges(s = \"zzzzzzzzzzz\")",
        "minChanges(s = \"cdabba\")"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dbca\")",
        "canBeEqual(s1 = \"12\", s2 = \"34\")",
        "canBeEqual(s1 = \"100\", s2 = \"110\")",
        "canBeEqual(s1 = \"aaac\", s2 = \"ccbb\")",
        "canBeEqual(s1 = \"1908\", s2 = \"0819\")",
        "canBeEqual(s1 = \"2834\", s2 = \"2843\")",
        "canBeEqual(s1 = \"pep\", s2 = \"pep\")",
        "canBeEqual(s1 = \"3141592\", s2 = \"314159265\")",
        "canBeEqual(s1 = \"ga\", s2 = \"bz\")",
        "canBeEqual(s1 = \"fww\", s2 = \"ffw\")"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1,1,1])",
        "minLengthAfterRemovals(nums = [1,1,1])",
        "minLengthAfterRemovals(nums = [1,1,1,1])",
        "minLengthAfterRemovals(nums = [1,2,2])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3,4,4])",
        "minLengthAfterRemovals(nums = [0, 0, 1, 1, 1, 2, 2, 3, 3, 4])",
        "minLengthAfterRemovals(nums = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,4,4,5])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 1])"
    ],
    "sample_361": [
        "isGood(a = [0, 1, 2, 3])",
        "isGood(a = [1, 2, 2, 3])",
        "isGood(a = [0, 1, 2, 3, 4])",
        "isGood(a = [1, 2, 3, 2, 1])",
        "isGood(a = [0, 1, 1, 2, 3])",
        "isGood(a = [0, 1, 0])",
        "isGood(a = [1, 2, 1, 3, 3])",
        "isGood(a = [1, 2, 3, 4, 2, 5])",
        "isGood(a = [1, 0, 2, 1, 2])",
        "isGood(a = [0, 2, 3, 4])"
    ],
    "sample_419": [
        "minOperations(nums = [3,2,1,2,4,3], k = 2)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "minOperations(nums = [3,2,1,2,4,3], k = 3)",
        "minOperations(nums = [1,3,4,5,6], k = 3)",
        "minOperations(nums = [1,1,1,2,2,2,3], k = 2)",
        "minOperations(nums = [1,2,3,2,1,2,3], k = 3)",
        "minOperations(nums = [1,2,3,2,1,2,3,4,2], k = 3)",
        "minOperations(nums = [1, 1, 1, 2, 2, 3, 4, 5, 6], k = 3)",
        "minOperations(nums = [1, 3, 3, 5, 5, 7, 9], k = 4)",
        "minOperations(nums = [1,1,3,3,4,5,6,7,8,10,11,12], k = 3)"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1])",
        "findMaximumLength(nums = [1,2,3])",
        "findMaximumLength(nums = [-2,1,-3,4,-1,2,1,-5,4])",
        "findMaximumLength(nums = [2,3,-2,4])",
        "findMaximumLength(nums = [1,1,2])",
        "findMaximumLength(nums = [1,1,2,3,4,1,1])",
        "findMaximumLength(nums = [-1, 1, -1])",
        "findMaximumLength(nums = [1, 1, 2, 1, 4])",
        "findMaximumLength(nums = [1,1,1,2,1,1,3,1,1,1])",
        "findMaximumLength(nums = [5, 2, 6, 2, 3, 5, 4, 1, 5, 2])"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [2, 2, 2])",
        "maxSubarrays(nums = [0, 1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [4, 1, 2, 6])",
        "maxSubarrays(nums = [2, 2, 3, 4, 3, 2])",
        "maxSubarrays(nums = [2,1,4,5])",
        "maxSubarrays(nums = [0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [3, 1, 4, 4, 2, 5, 6, 1])",
        "maxSubarrays(nums = [11,10,10,1,0,0,0,11,10,10,1,0,0,0,11,10,10,1,0,0,0])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"azb\", str2 = \"bza\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"zayb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"dza\")",
        "canMakeSubsequence(str1 = \"xyz\", str2 = \"xza\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"axz\")",
        "canMakeSubsequence(str1 = \"abcdef\", str2 = \"abzdef\")",
        "canMakeSubsequence(str1 = \"b\", str2 = \"bz\")",
        "canMakeSubsequence(str1 = \"abcdef\", str2 = \"fedcba\")",
        "canMakeSubsequence(str1 = \"bgc\", str2 = \"axbyczd\")"
    ],
    "sample_402": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 2)",
        "maxSum(nums = [2,-1,2], m = 2, k = 3)",
        "maxSum(nums = [1, -1, 5], m = 2, k = 3)",
        "maxSum(nums = [2, 1, 3, 2], m = 2, k = 2)",
        "maxSum(nums = [1, 3, 5, 2], m = 1, k = 2)",
        "maxSum(nums = [3, 4, 1, 5, 7, 2], m = 2, k = 3)",
        "maxSum(nums = [-1,-2,-3,-4,4,2,1,-5], m = 2, k = 3)",
        "maxSum(nums = [1, -1, 0, 3, 4, -4, 6], m = 4, k = 3)",
        "maxSum(nums = [-5,-1,3,4,-3,3,-2,2,-4,6,-1,-4,2,-5], m = 2, k = 5)"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"a\", \"b\", \"c\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"mango\", \"watermelon\"], x = \"a\")",
        "findWordsContaining(words = [\"potato\", \"pot\", \"tomato\"], x = \"ot\")",
        "findWordsContaining(words = [\"abc\", \"def\", \"ghij\", \"klm\"], x = \"a\")",
        "findWordsContaining(words = [\"potato\", \"banana\", \"tomato\"], x = \"to\")",
        "findWordsContaining(words = [\"axe\", \"pineapple\", \"apple\", \"pen\"], x = \"ap\")",
        "findWordsContaining(words = [\"q\", \"p\", \"xy\", \"q\", \"xyz\"], x = \"q\")",
        "findWordsContaining(words = [\"car\", \"cab\", \"car\", \"rub\"], x = \"a\")",
        "findWordsContaining(words = [\"code\", \"student\", \"hacker\", \"guide\"], x = \"t\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"piano\", \"spells\"], x = \"or\")"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\", \"2\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\", \"2\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = ['1', '2', 'prev', '1', '2', 'prev', '1'])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\", \"2\"])",
        "lastVisitedIntegers(words = ['1', '2', 'next', 'prev'])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [3, 2, 1, 2, 4, 3], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "minOperations(nums = [3, 2, 2, 4, 2], k = 2)",
        "minOperations(nums = [3,2,1,2,4,3], k = 2)",
        "minOperations(nums = [1, 1, 1, 1], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 1, 1, 3], k = 3)",
        "minOperations(nums = [1, 2, 3, 2, 4, 2], k = 4)",
        "minOperations(nums = [2,5,2,1,2], k = 3)",
        "minOperations(nums = [0, 0, 0, 1, 1], k = 1)"
    ],
    "sample_418": [
        "minOperations(nums = [3, 2, 1, 2, 4, 3], k = 7)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 1, 2, 2, 3, 1], k = 3)",
        "minOperations(nums = [1, 3, 2, 2, 5, 4], k = 3)",
        "minOperations(nums = [2, 2, 2, 2, 2], k = 2)",
        "minOperations(nums = [1,2,3,4,5,6,7,8], k = 3)",
        "minOperations(nums = [1,2,3,3,4,5], k = 3)",
        "minOperations(nums = [0, 1, 2, 3, 4, 5, 6, 7], k = 3)",
        "minOperations(nums = [9, 3, 9, 3, 9, 7, 9], k = 3)",
        "minOperations(nums = [9, 3, 6, 10, 2, 4, 12], k = 3)"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [2, 1, 3, 4, 3])",
        "minimumSeconds(nums = [1,3,2])",
        "minimumSeconds(nums = [3, 2, 1, 4])",
        "minimumSeconds(nums = [4, 2, 5, 3])",
        "minimumSeconds(nums = [1, 3, 2, 1])",
        "minimumSeconds(nums = [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minimumSeconds(nums = [1,1,2,3,1,1])",
        "minimumSeconds(nums = [3, 1, 2, 4, 2, 3, 4, 2, 3, 4])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3], target = 5)",
        "countPairs(nums = [1, 2, 3], target = 4)",
        "countPairs(nums = [1, 2, 3, 4], target = 7)",
        "countPairs(nums = [1, 2, 4, 4], target = 8)",
        "countPairs(nums = [1, 2, 3], target = 11)",
        "countPairs(nums = [1, 1, 2], target = 3)",
        "countPairs(nums = [1, 1, 2, 2, 3, 3, 4, 4], target = 8)",
        "countPairs(nums = [1, 1, 2, 2, 3, 4], target = 5)",
        "countPairs(nums = [3, 2, 1], target = 7)",
        "countPairs(nums = [1, 3, 6, 7], target = 8)"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"o\")",
        "findWordsContaining(words = [\"here\", \"there\", \"everywhere\"], x = \"e\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"bananana\"], x = \"a\")",
        "findWordsContaining(words = [\"blue\", \"purple\", \"red\"], x = \"l\")",
        "findWordsContaining(words = [\"hello\", \"hi\", \"goodbye\"], x = \"l\")",
        "findWordsContaining(words = [\"hello\", \"hero\", \"hello world\"], x = \"l\")",
        "findWordsContaining(words = [\"banana\", \"pineapple\", \"watermelon\", \"peach\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"j\", \"h\", \"z\"], x = \"z\")",
        "findWordsContaining(words = [\"a\", \"there\", \"a\", \"hola\"], x = \"a\")"
    ],
    "sample_372": [
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = 'code')",
        "sortVowels(s = \"leetcode\")",
        "sortVowels(s = \"dEOtcede\")",
        "sortVowels(s = \"Eleotcede\")",
        "sortVowels(s = \"hello world\")",
        "sortVowels(s = \"codeE\")",
        "sortVowels(s = \"thequickbrownfoxjumpsoverthelazydog\")",
        "sortVowels(s = \"deleted\")",
        "sortVowels(s = \"toLeed\")"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1])",
        "minLengthAfterRemovals(nums = [3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [0, 0])",
        "minLengthAfterRemovals(nums = [2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 1, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [3, 3, 4, 2])"
    ],
    "sample_452": [
        "minChanges(s = \"aabbcc\")",
        "minChanges(s = \"00110\")",
        "minChanges(s = \"ab\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"zz\")",
        "minChanges(s = \"0000\")",
        "minChanges(s = \"adb\")",
        "minChanges(s = \"1010101010101010101010101010101010\")",
        "minChanges(s = \"aaaaaaabc\")",
        "minChanges(s = \"516\")"
    ],
    "sample_385": [
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1, 2, 3], target = 6)",
        "countPairs(nums = [1,2,3,4], target = 6)",
        "countPairs(nums = [1, 2, 3], target = 7)",
        "countPairs(nums = [1, 1, 3], target = 2)",
        "countPairs(nums = [1, 1, 2, 3, 4], target = 6)",
        "countPairs(nums = [2, 3, 1, 1, 4], target = 7)",
        "countPairs(nums = [2,3,4,5,6], target = 12)",
        "countPairs(nums = [1,1,3,4,5], target = 6)"
    ],
    "sample_427": [
        "minOperations(nums = [1, 2, 2, 1])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [3, 2, 2, 4, 3])",
        "minOperations(nums = [3,2,2,4])",
        "minOperations(nums = [5, 1, 3, 4, 7])",
        "minOperations(nums = [0, 0, 1, 1, 1, 2, 2, 3, 3])",
        "minOperations(nums = [3, 1, 2, 3])",
        "minOperations(nums = [2, 2, 2, 2, 1, 2])",
        "minOperations(nums = [0, 0, 1, 0, 0, 1, 1])",
        "minOperations(nums = [2,1,3,4,2,1])"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [])",
        "minLengthAfterRemovals(nums = [])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3])",
        "minLengthAfterRemovals(nums = [2, 2, 2])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "minLengthAfterRemovals(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minLengthAfterRemovals(nums = [1,2,3,1])",
        "minLengthAfterRemovals(nums = [1, 1, 3, 3, 5, 5, 7, 7])"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins(prices = [1, 1, 1, 1])",
        "minimumCoins(prices = [2, 3, 1])",
        "minimumCoins(prices = [1, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumCoins(prices = [1, 2, 3, 20])",
        "minimumCoins(prices = [3, 3, 5, 1])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"hello world\"], x = \"hello\")",
        "findWordsContaining(words = [\"apple\", \"peach\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"a\", \"b\", \"c\", \"d\"], x = \"b\")",
        "findWordsContaining(words = [\"bar\", \"baz\", \"foobar\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"zebra\", \"orange\"], x = \"e\")",
        "findWordsContaining(words = [\"army\", \"navy\", \"marine\"], x = \"r\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"helloworld\", \"worldhello\"], x = \"l\")",
        "findWordsContaining(words = [\"tiger\", \"hippo\", \"monkey\"], x = \"p\")",
        "findWordsContaining(words = [\"great\", \"programmer\", \"is\", \"fun\"], x = \"a\")"
    ],
    "sample_420": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "minOperations(nums = [1, 2, 2, 4], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 4)",
        "minOperations(nums = [1, 2, 3], k = 1)",
        "minOperations(nums = [1, 3, 4, 2], k = 4)",
        "minOperations(nums = [1, 2, 3, 10, 11, 12], k = 3)",
        "minOperations(nums = [1, 2, 3, 10, 4, 5], k = 6)",
        "minOperations(nums = [1, 2, 3, 3, 4, 3, 6, 7], k = 2)"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1,2,0])",
        "isGood(nums = [1,2,4,3])",
        "isGood(nums = [1, 3, 2, 4])",
        "isGood(nums = [0, 2, 3, 4])",
        "isGood(nums = [1, 2, 5, 6])",
        "isGood(nums = [1,2,3,4,5,6,7,8,9,10,11,12])"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1], target = 1)",
        "lengthOfLongestSubsequence(nums = [1], target = 2)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 100)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 5], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 2, 1], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 1, 4], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 20)",
        "lengthOfLongestSubsequence(nums = [2, 5, 3, 7, 4], target = 11)",
        "lengthOfLongestSubsequence(nums = [1, 2, 4, 5, 8, 16], target = 11)",
        "lengthOfLongestSubsequence(nums = [1,2,2,4,4,4,7,8,8,8,8,8,8,8], target = 14)"
    ],
    "sample_365": [
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [2, 1, 3])",
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1, 2, 2, 3])",
        "isGood(nums = [1, 2, 2, 3])",
        "isGood(nums = [1, 2, 4, 3])",
        "isGood(nums = [2, 1, 3, 4, 5])",
        "isGood(nums = [4, 1, 3])",
        "isGood(nums = [1, 2, 2, 4, 5])",
        "isGood(nums = [0,1,2,3,4,6,7,8])"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 1, 0])",
        "maxSubarrays(nums = [7, 2, 5, 10, 8])",
        "maxSubarrays(nums = [0, 1, 0, 0, 0, 1, 1])",
        "maxSubarrays(nums = [0, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1,2,3,4,5,6,7,8])",
        "maxSubarrays(nums = [3, 2, 2, 4, 3])",
        "maxSubarrays(nums = [1, 2, 3, 2, 1, 3])",
        "maxSubarrays(nums = [2, 2, 1, 2])",
        "maxSubarrays(nums = [3, 5, 0, 3, 4, 2, 1])",
        "maxSubarrays(nums = [3, 4, 0, 0, 0, 0, 3, 2])"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [10,1,2,7,6,1,5], target = 8)",
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 15)",
        "lengthOfLongestSubsequence(nums = [0, 1], target = 2)",
        "lengthOfLongestSubsequence(nums = [1,2,3,3,4], target = 10)",
        "lengthOfLongestSubsequence(nums = [5,1,4,2], target = 11)",
        "lengthOfLongestSubsequence(nums = [2,4,6,8,10], target = 20)",
        "lengthOfLongestSubsequence(nums=[1,2,3,3], target=3)"
    ],
    "sample_450": [
        "minChanges(s = \"11000\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"abcdefgh\")",
        "minChanges(s = \"aabbccc\")",
        "minChanges(s = \"abcdcba\")",
        "minChanges(s = \"101100\")",
        "minChanges(s = \"1000111001\")",
        "minChanges(s=\"010011100\")",
        "minChanges(s=\"111100111100\")",
        "minChanges(s=\"pzgxr\")"
    ],
    "sample_463": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 8, limit = 3)",
        "distributeCandies(n = 20, limit = 10)"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 2, 2, 3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1, 2, 2, 4])",
        "sumCounts(nums = [1, 1, 1, 1, 2, 2, 3])",
        "sumCounts(nums = [1, 3, 4, 1, 5])",
        "sumCounts(nums = [1, 2, 1, 1, 3])",
        "sumCounts(nums = [0,1,2,3,4,5])",
        "sumCounts(nums = [3, 5, 6, 2, 3])",
        "sumCounts(nums = [1,1,2,2,3,3,4,5,6,7])"
    ],
    "sample_449": [
        "minChanges(s = \"abba\")",
        "minChanges(s = \"aa\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aaa\")",
        "minChanges(s = \"ab\")",
        "minChanges(s = \"xxxyyyzzz\")",
        "minChanges(s = \"1001\")",
        "minChanges(s = \"abcdefgh\")",
        "minChanges(s = \"aaaaaaaa\")",
        "minChanges(s = \"bbbaaa\")"
    ],
    "sample_425": [
        "minOperations(nums = [1, 2, 2, 1, 1, 3])",
        "minOperations(nums = [1, 2, 2, 3, 1, 4, 2])",
        "minOperations(nums = [1, 1, 1])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [3, 3, 3, 2, 2, 2])",
        "minOperations(nums = [3,3,3,3,3])",
        "minOperations(nums = [2, 2, 3, 3, 3])",
        "minOperations(nums = [3,3,3,3,3,3,3,3])",
        "minOperations(nums = [1, 2, 3, 2, 1, 3, 2, 1, 3, 1, 2])",
        "minOperations(nums = [1, 2, 3, 4, 5, 2, 2, 2, 3, 2, 1, 1])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"zyx\", str2 = \"zy\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"aq\")",
        "canMakeSubsequence(str1 = \"azzz\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"yzab\", str2 = \"zab\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"aeb\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"za\", str2 = \"abbcz\")",
        "canMakeSubsequence(str1 = \"bxz\", str2 = \"axz\")",
        "canMakeSubsequence(str1 = \"zzazz\", str2 = \"zbazza\")"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1,2,3,4])",
        "minimumSeconds(nums = [1, 1, 1, 1, 1])",
        "minimumSeconds(nums = [1,1,1,1])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumSeconds(nums = [0, 1, 1, 0, 1, 1, 0, 1])",
        "minimumSeconds(nums = [2,3,1,3,2,1])",
        "minimumSeconds(nums = [3, 2, 4, 6, 8, 1, 9, 5, 7, 10])",
        "minimumSeconds(nums = [7, 4, 3, 1, 2, 5, 6, 8])",
        "minimumSeconds(nums = [1, 2, 3, 4, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5])"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [10,1,2,7,6,1,5], target = 8)",
        "lengthOfLongestSubsequence(nums = [10, 1, 2, 7, 6, 1, 5], target = 8)",
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 3)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence(nums = [2, 1, 4], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 20)",
        "lengthOfLongestSubsequence(nums = [1,4,1,2,3], target = 3)",
        "lengthOfLongestSubsequence(nums = [3, 5, 4], target = 6)",
        "lengthOfLongestSubsequence(nums=[10,9,2,5,3,7,101,18], target=101)",
        "lengthOfLongestSubsequence(nums = [1,2,1,3,1,3,2,2], target = 3)"
    ],
    "sample_370": [
        "sortVowels(s = \"lEOtcede\")",
        "sortVowels(s = 'leotcede')",
        "sortVowels(s = 'leotcede')",
        "sortVowels(s = \"code\")",
        "sortVowels(s = \"hello world\")",
        "sortVowels(s = \"Eotcede\")",
        "sortVowels(s = 'deceotle')",
        "sortVowels(s = \"coEd\")",
        "sortVowels(s = \"I love you!\")",
        "sortVowels(s = 'dceotL')"
    ],
    "sample_421": [
        "minOperations(nums = [1, 2, 3, 4], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "minOperations(nums = [3, 1, 2, 4, 3], k = 2)",
        "minOperations(nums = [1, 3, 2, 4], k = 3)",
        "minOperations(nums = [1,2,3,3,4,5,6,7,8,8,9,9,10], k = 3)",
        "minOperations(nums = [1, 2, 3, 3, 4, 1, 5, 1], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], k = 1)",
        "minOperations(nums = [1, 5, 1, 5, 1, 5, 1, 5], k = 2)"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [4, 2, 5, 3])",
        "maxSubarrays(nums = [0, 1, 1, 0])",
        "maxSubarrays(nums = [2,1,2,4,3])",
        "maxSubarrays(nums = [5, 6, 7, 8, 9, 10, 11])",
        "maxSubarrays(nums = [3, 3, 1, 3, 1])",
        "maxSubarrays(nums = [2, 3, 4, 2, 5, 6])",
        "maxSubarrays(nums = [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [5, 8, 1, 3, 6, 2, 4, 7])",
        "maxSubarrays(nums = [10, 1, 2, 5, 5, 6, 5, 1])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3]], k = 1)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]], k = 3)",
        "countPairs(coordinates = [[1, 1], [1, 2], [2, 1], [2, 2], [3, 3], [4, 4]], k = 2)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3], [4, 4], [1, 1], [2, 2], [3, 3], [4, 4]], k = 3)",
        "countPairs(coordinates = [[1, 0], [0, 1], [0, 0], [1, 1], [2, 2], [0, 2], [2, 0]], k = 3)",
        "countPairs(coordinates = [[0, 0], [1, 2], [3, 2], [1, 1], [2, 3]], k = 3)",
        "countPairs(coordinates = [[1, 1], [2, 0], [2, 1], [1, 2], [0, 2], [2, 2], [0, 1], [1, 0], [0, 0], [1, 1]], k = 1)",
        "countPairs(coordinates = [[1, 1], [2, 2], [1, 2], [1, 3], [2, 3], [1, 4], [2, 4], [3, 4], [4, 4], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5]], k = 1)",
        "countPairs(coordinates = [[-1, 1], [1, -1], [2, 1], [0, 0], [-1, -1]], k = 2)"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 0)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 0)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 0)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 0)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 100)",
        "lengthOfLongestSubsequence(nums = [3, 4, 7, 2, -3, 1, 4], target = 7)",
        "lengthOfLongestSubsequence(nums = [2, 1, 3, 5, 4], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 4, 3, 7, 2, 5, 8], target = 11)"
    ],
    "sample_445": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1,2,1])",
        "sumCounts(nums = [1, 1, 2, 2, 3])",
        "sumCounts(nums = [3,1,4,1,5])",
        "sumCounts(nums = [0,0,1])",
        "sumCounts(nums = [1, 1, 2, 1, 3])",
        "sumCounts(nums = [1,2,1,3,1,2])",
        "sumCounts(nums = [1,1,2,3,4,4,5,6,7,8,9,9])",
        "sumCounts(nums = [3,4,5,3,4,5,6,4,3,4,3])"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s = \"a\")",
        "minimumBeautifulSubstrings(s = \"5555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555",
        "minimumBeautifulSubstrings(s = \"110010101001\")",
        "minimumBeautifulSubstrings(s = \"5555555555555555\")",
        "minimumBeautifulSubstrings(s = \"aabaaba\")",
        "minimumBeautifulSubstrings(s = \"2345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010110210310410510610710810911011111211311411511611711811912012112212312412512612712812913013113213313413513613713813914014114214314414514614714814915015115215315415515615715815916016116216316416516616716816917017117217317417517617717817918018118218318418518618718818919019119219319419519619719819920020120220320420520",
        "minimumBeautifulSubstrings(s = \"cgc\")",
        "minimumBeautifulSubstrings(s = \"11010010010100111\")",
        "minimumBeautifulSubstrings(s = \"87262748659\")"
    ],
    "sample_432": [
        "maxSubarrays(nums = [0, 1, 0, 1, 0])",
        "maxSubarrays(nums = [0,1,1,0])",
        "maxSubarrays(nums = [2, 2, 2, 2])",
        "maxSubarrays(nums = [-1, -1, -1, -1, -1])",
        "maxSubarrays(nums = [3,1,2,4,3])",
        "maxSubarrays(nums = [3, 3, 4, 4, 4])",
        "maxSubarrays(nums = [1,0,1,1,0,1,0,1])",
        "maxSubarrays(nums = [4, 3, 8, 2])",
        "maxSubarrays(nums = [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1])",
        "maxSubarrays(nums = [10, -1, 1, -100, -1, 1])"
    ],
    "sample_401": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 2, k = 3)",
        "maxSum(nums = [1, -2, 3, 10, -10, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 1, k = 4)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 4)",
        "maxSum(nums = [1, 2, 3, 2, 3, 4, 5, 6], m = 2, k = 3)",
        "maxSum(nums = [2, 1, 4, 5, 3, 1, 1, 3], m = 3, k = 4)",
        "maxSum(nums = [3, 2, 3, 4, 2, 2, 4, 5, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 2, 4, 3, 6], m = 2, k = 4)",
        "maxSum(nums = [1, 2, 3, 1, 4, 5, 7, 3, 4, 5], m = 2, k = 3)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3, 4], m = 2, k = 2)",
        "maxSum(A = [1, 1, 1, 1], m = 2, k = 2)",
        "maxSum(A = [1, 1, 1], m = 2, k = 2)",
        "maxSum(A = [2, 1, 5, 1, 3, 2], m = 2, k = 3)",
        "maxSum(A = [2, 1, 5, 1, 3, 2], m = 2, k = 3)",
        "maxSum(A = [1, 1, 1], m = 2, k = 1)",
        "maxSum(A = [1,2,3,4,5], m = 1, k = 3)",
        "maxSum(A = [1, 0, 1, 0, 1], m = 2, k = 2)",
        "maxSum(A = [1, 2, 3, 1, 1, 3], m = 1, k = 2)",
        "maxSum(A = [2, 1, 2, 2, 5], m = 2, k = 2)"
    ],
    "sample_363": [
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 2])",
        "isGood(nums = [1,2,3,4])",
        "isGood(nums = [1,2,3])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [1, 3, 4, 2])",
        "isGood(nums = [1, 3, 2, 4])",
        "isGood(nums = [2, 3, 4, 4, 5])",
        "isGood(nums = [2, 2, 1, 1, 1, 3, 3])",
        "isGood(nums = [2, 2, 3, 1, 4, 5])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 1, 1, 1, 1])",
        "minimumSeconds(nums = [1, 3, 2])",
        "minimumSeconds(nums = [1, 3, 2])",
        "minimumSeconds(nums = [1, 1])",
        "minimumSeconds(nums = [0, 1, 0, 1, 0, 1, 99])",
        "minimumSeconds(nums = [1, 3, 2, 4, 5, 6, 7, 8])",
        "minimumSeconds(nums = [1, 3, 2, 4, 5, 8])",
        "minimumSeconds(nums = [5, 1, 2, 2, 4, 0])",
        "minimumSeconds(nums = [1, 3, 2, 2, 3, 1, 4, 2])"
    ],
    "sample_376": [
        "minimumSeconds(nums = [1, 1, 1])",
        "minimumSeconds(nums = [1,1,1,1,1])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumSeconds(nums = [1, 3, 2, 4, 5, 6, 7])",
        "minimumSeconds(nums = [1, 2, 1, 2, 1, 2])",
        "minimumSeconds(nums = [4,5,1,2,3])",
        "minimumSeconds(nums = [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12])",
        "minimumSeconds(nums = [2, 1, 3, 2, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1,1])",
        "minLengthAfterRemovals(nums = [1,1])",
        "minLengthAfterRemovals(nums = [0,0,1,1,1,2,2,3,3,4])",
        "minLengthAfterRemovals(nums = [0,1,2,2,3,0,4,2])",
        "minLengthAfterRemovals(nums = [5,5,4,4,3,3,2,2,1,1])",
        "minLengthAfterRemovals(nums = [0,0,0,1,1,1,1,2,2,3,3,4])",
        "minLengthAfterRemovals(nums = [4,5,6,7,8,9,10])",
        "minLengthAfterRemovals(nums = [5,5,4,4,3,3,2,2,1,1,6])",
        "minLengthAfterRemovals(nums = [5, 1, 2, 2, 3, 1, 3])",
        "minLengthAfterRemovals(nums = [5, 4, 5, 4, 2, 3, 4, 5])"
    ],
    "sample_399": [
        "maxSum(nums = [1, 2, 1, 2, 6, 7, 5, 1], m = 2, k = 3)",
        "maxSum(nums = [0], m = 1, k = 1)",
        "maxSum(nums = [-1, -2, -3], m = 2, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 1, k = 1)",
        "maxSum(nums = [1, -1, 2, -1, 2], m = 2, k = 3)",
        "maxSum(nums = [1,1,1,1], m = 2, k = 2)",
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8], m = 4, k = 3)",
        "maxSum(nums = [1,-2,-2,3,2], m = 3, k = 2)",
        "maxSum(nums = [5,6,3,1], m = 2, k = 4)"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2, 1, 2, 6, 7, 5, 1], m = 1, k = 3)",
        "maxSum(nums = [1,2,1,2,6,7,5,1], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 1, 2, 6, 7, 5, 1], m = 2, k = 4)",
        "maxSum(nums = [1,2,1,2,6,7,5,1], m = 1, k = 2)",
        "maxSum(nums = [2, 1, 5, 7, 2, 0, 5], m = 2, k = 3)",
        "maxSum(nums = [1, -1, 2, 1, -1], m = 2, k = 3)",
        "maxSum(nums = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4], m = 1, k = 3)",
        "maxSum(nums = [2,1,1], m = 2, k = 3)",
        "maxSum(nums = [-1, -2, 3, -2, 1], m = 2, k = 2)",
        "maxSum(nums = [5, -1, 5, -3, 5, 3, -5], m = 2, k = 3)"
    ],
    "sample_364": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1,2,3])",
        "isGood(nums = [1,2,3])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [1,2,3,4,5,6,7,8,9,10])",
        "isGood(nums = [2,1])",
        "isGood(nums = [2, 3, 1, 4, 5])",
        "isGood(nums = [2, 3, 4, 5, 6, 7])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [0, 0, 0, 0])",
        "minLengthAfterRemovals(nums = [0, 0, 0, 0])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1,1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 3, 2, 1, 1])"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"l\")",
        "findWordsContaining(words = [\"foo\", \"bar\", \"baz\"], x = \"a\")",
        "findWordsContaining(words = [\"python\", \"java\", \"c\"], x = \"a\")",
        "findWordsContaining(words = [\"xyz\", \"abc\", \"xy\"], x = \"y\")",
        "findWordsContaining(words = [\"banana\", \"banana\", \"kiwi\"], x = \"na\")",
        "findWordsContaining(words = [\"foo\", \"banana\", \"bar\"], x = \"ana\")",
        "findWordsContaining(words = [\"dog\", \"food\"], x = \"do\")",
        "findWordsContaining(words = [\"foo\", \"bar\", \"baz\", \"foobar\", \"qux\", \"foobaz\"], x = \"ba\")",
        "findWordsContaining(words = [\"hello\", \"bello\", \"xello\", \"yello\"], x = \"ll\")",
        "findWordsContaining(words = [\"word\", \"bomb\", \"light\"], x = \"b\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 5, 8, 9, 10, 17, 17, 20, 24, 30])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6])",
        "minimumCoins(prices = [1, 1, 1, 2])",
        "minimumCoins(prices = [1, 3, 1, 2, 1])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"a\")",
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"1010\")",
        "minimumBeautifulSubstrings(s = \"011010\")",
        "minimumBeautifulSubstrings(s = \"1011101\")",
        "minimumBeautifulSubstrings(s = \"3211\")",
        "minimumBeautifulSubstrings(s = \"110001011\")",
        "minimumBeautifulSubstrings(s = \"10001010110100\")",
        "minimumBeautifulSubstrings(s = \"3202\")",
        "minimumBeautifulSubstrings(s = \"9382367389236\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"acdb\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"dbca\", s2 = \"acbd\")",
        "canBeEqual(s1 = \"xxxy\", s2 = \"xxxy\")",
        "canBeEqual(s1 = \"rat\", s2 = \"car\")",
        "canBeEqual(s1 = \"cde\", s2 = \"acf\")",
        "canBeEqual(s1 = \"acab\", s2 = \"bcad\")",
        "canBeEqual(s1 = \"x-x\", s2 = \"x-x\")",
        "canBeEqual(s1 = \"hklm\", s2 = \"hlkm\")",
        "canBeEqual(s1 = \"wqvx\", s2 = \"xwvq\")"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abd\")",
        "canMakeSubsequence(str1 = \"zab\", str2 = \"za\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"zbc\")",
        "canMakeSubsequence(str1 = \"adz\", str2 = \"dzxb\")",
        "canMakeSubsequence(str1 = \"cac\", str2 = \"dac\")",
        "canMakeSubsequence(str1 = \"haz\", str2 = \"hza\")",
        "canMakeSubsequence(str1 = \"gqvk\", str2 = \"gbqf\")"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1,2,3,2,1])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 3, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 3, 3, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [0, 1, 2, 0, 3, 4, 0, 0, 0])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abcd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"BANANA\", s2 = \"BANANA\")",
        "canBeEqual(s1 = \"bacd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"aaa\", s2 = \"bab\")",
        "canBeEqual(s1 = \"aab\", s2 = \"abc\")",
        "canBeEqual(s1 = \"bbba\", s2 = \"baaa\")",
        "canBeEqual(s1 = \"cafe\", s2 = \"ceaf\")",
        "canBeEqual(s1 = \"bccb\", s2 = \"ccbb\")",
        "canBeEqual(s1 = \"meet\", s2 = \"moo\")",
        "canBeEqual(s1 = \"pyaeh\", s2 = \"apehy\")"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3], target = 5)",
        "countPairs(nums = [1, 2, 3], target = 6)",
        "countPairs(nums = [1, 2, 3], target = 7)",
        "countPairs(nums = [1, 1, 1], target = 3)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 11)",
        "countPairs(nums = [2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 6)",
        "countPairs(nums = [2, 3, 1, 4], target = 5)",
        "countPairs(nums = [3, 2, 5, 4, 6, 1], target = 7)",
        "countPairs(nums = [1, 5, 4, 3, 6, 2], target = 7)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"abc\", s2 = \"ahbgdc\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"ahbgdc\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"ahbgdc\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"acb\")",
        "canMakeSubsequence(s1 = \"abacab\", s2 = \"bac\")",
        "canMakeSubsequence(s1 = \"zwl\", s2 = \"wlz\")",
        "canMakeSubsequence(s1 = \"acef\", s2 = \"acxez\")",
        "canMakeSubsequence(s1 = \"mxpxl\", s2 = \"lp\")",
        "canMakeSubsequence(s1 = \"azccbe\", s2 = \"azabcbe\")",
        "canMakeSubsequence(s1=\"ar\", s2=\"re\")"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = ['1', '2', 'prev', 'prev', '3', 'prev'])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"next\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"next\", \"2\", \"prev\", \"next\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = ['1', '2', 'prev', '1', '2', '3', 'prev', 'prev'])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"4\", \"prev\", \"prev\", \"5\"])",
        "lastVisitedIntegers(words = [\"2\", \"3\", \"4\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"next\", \"next\"])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3]], k = 1)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3]], k = 2)",
        "countPairs(coordinates = [[1, 1], [3, 2], [5, 3], [4, 1], [2, 3], [1, 4]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 0], [2, 0]], k = 1)",
        "countPairs(coordinates = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[1, 1], [3, 3], [5, 5], [7, 7], [9, 9], [11, 11], [13, 13], [15, 15], [17, 17], [19, 19]], k = 2)",
        "countPairs(coordinates = [[1, 1], [3, 4], [2, 3], [4, 2]], k = 2)",
        "countPairs(coordinates = [(3, 0), (1, 2), (4, 1), (1, 3)], k = 1)",
        "countPairs(coordinates = [[1, 1], [1, 3], [2, 5], [2, 7], [4, 1], [4, 3], [6, 5], [6, 7], [8, 1], [8, 3]], k = 2)",
        "countPairs(coordinates = [[-2, 4], [-1, 2], [1, 3], [4, 5]], k = 2)"
    ],
    "sample_451": [
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"00110011\")",
        "minChanges(s = \"xxxyyyzzz\")",
        "minChanges(s = \"1011\")",
        "minChanges(s = \"111\")",
        "minChanges(s = \"xyxxyx\")",
        "minChanges(s = \"bbbbb\")",
        "minChanges(s = \"qweqqwe\")",
        "minChanges(s = \"xxzzzzyy\")"
    ],
    "sample_461": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 2, limit = 1)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 100, limit = 10)",
        "distributeCandies(n = 1, limit = 1)",
        "distributeCandies(n = 100, limit = 50)",
        "distributeCandies(n = 23, limit = 10)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dabc\")",
        "canBeEqual(s1 = \"aabb\", s2 = \"bbaa\")",
        "canBeEqual(s1 = \"asd\", s2 = \"qwe\")",
        "canBeEqual(s1 = \"bcb\", s2 = \"babc\")",
        "canBeEqual(s1 = \"aqrst\", s2 = \"aqrst\")",
        "canBeEqual(s1 = \"2134\", s2 = \"2314\")",
        "canBeEqual(s1 = \"actg\", s2 = \"agct\")",
        "canBeEqual(s1 = \"azyr\", s2 = \"razy\")",
        "canBeEqual(s1 = \"mpe\", s2 = \"peem\")",
        "canBeEqual(s1 = \"mini\", s2 = \"mnim\")"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 5, limit = 1)",
        "distributeCandies(n = 5, limit = 1)",
        "distributeCandies(n = 13, limit = 5)"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 45)",
        "accountBalanceAfterPurchase(p = 55)",
        "accountBalanceAfterPurchase(p = 10)",
        "accountBalanceAfterPurchase(p = 30)",
        "accountBalanceAfterPurchase(p = 19)",
        "accountBalanceAfterPurchase(p = 110)",
        "accountBalanceAfterPurchase(p = 16)",
        "accountBalanceAfterPurchase(p = 48)",
        "accountBalanceAfterPurchase(p = 67)",
        "accountBalanceAfterPurchase(p = 61)"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 1, 2, 3])",
        "sumCounts(nums = [1, 2, 1, 3])",
        "sumCounts(nums = [1, 2, 2, 3, 4, 4])",
        "sumCounts(nums = [0, 1, 2, 3, 4])",
        "sumCounts(nums = [0, 1, 0])",
        "sumCounts(nums = [1,1,2,2,3,3,4,4,5,5])",
        "sumCounts(nums = [2,3,3,2,1,4,4,4,4])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1,2,3,4,5,6,7,8])",
        "minimumSeconds(A = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(A = [0,1,2,3,4,5,6,7,8,9])",
        "minimumSeconds(A = [0, 1, 0, 1, 0, 1])",
        "minimumSeconds(A = [0, 0])",
        "minimumSeconds(A = [0, 1, 0, 0, 0])",
        "minimumSeconds(A = [2, 3, 1, 4, 5])",
        "minimumSeconds(A = [0, 1, 2, 3, 4, 0, 1, 2, 3, 4])",
        "minimumSeconds(A = [1, 5, 2, 6, 3, 7, 4])",
        "minimumSeconds(A = [9, 0, 1, 1, 4, 1, 3, 2, 2, 0])"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"axc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"azez\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"123\")"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumRightShifts(nums = [4, 3, 2, 1])",
        "minimumRightShifts(nums = [4, 3, 2, 1])",
        "minimumRightShifts(nums = [0, 1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [7, 1, 3, 2, 4, 5, 6])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "minimumRightShifts(nums = [3, 2, 1, 4, 5])",
        "minimumRightShifts(nums = [2, 3, 4, 1, 6, 5])"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1,2,2], l = 2, r = 3)",
        "countSubMultisets(nums = [1, 2, 3], l = 1, r = 2)",
        "countSubMultisets(nums = [3,1,2,4], l = 7, r = 15)",
        "countSubMultisets(nums = [1,2,2], l = 0, r = 1)",
        "countSubMultisets(nums = [1, 2, 3], l = 0, r = 3)",
        "countSubMultisets(nums = [0], l = 0, r = 0)",
        "countSubMultisets(nums = [3,2,1], l = 1, r = 3)",
        "countSubMultisets(nums = [3,1,3,3], l = 3, r = 4)",
        "countSubMultisets(nums = [1,1,2,3,4,5], l = 3, r = 4)",
        "countSubMultisets(nums = [4,5,1], l = 0, r = 3)"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [2, 5, 3, 7])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 1, 2, 1, 2, 1, 2])",
        "minimumCoins(prices = [5, 3, 1, 6, 2, 7, 4])",
        "minimumCoins(prices = [1, 4, 5, 9, 20, 21, 22, 23, 24, 25])",
        "minimumCoins(prices = [4, 2, 1, 1, 2, 3, 3, 1, 1])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 5, 8, 9, 10, 17, 17, 20, 24, 30])",
        "minimumCoins(prices = [1, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 5, 7, 10])",
        "minimumCoins(prices = [1, 2, 3, 2, 2])",
        "minimumCoins(prices = [1, 2, 4, 5, 10, 11])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"1\", \"2\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"next\", \"2\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"next\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"4\", \"prev\", \"5\", \"prev\"])",
        "lastVisitedIntegers(words = [\"next\", \"1\", \"prev\", \"next\", \"2\", \"prev\", \"next\", \"1\"])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [3, 2, 2, 4, 3])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 2, 2, 3, 4, 5])",
        "minOperations(nums = [1, 2, 2, 1, 2, 1])",
        "minOperations(nums = [0, 2, 0, 2, 0, 2, 0])",
        "minOperations(nums = [5, 5, 4, 4, 2, 2, 6, 6, 1, 1, 1])",
        "minOperations(nums = [1, 2, 2, 1, 3, 4, 2, 2, 1, 3, 4])",
        "minOperations(nums = [1,2,3,2,1,3,3,4,3,2,1,2,2,1,3,3,4,2,3,3,1,2,1,1,1,3,3,3,3,2,2,2,2,3,2,1])"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"pop\", \"push\", \"push\"])",
        "lastVisitedIntegers(words = [\"p2\", \"p1\", \"p-1\"])",
        "lastVisitedIntegers(words = [\"push\", \"2\", \"push\", \"1\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"add\", \"pop\", \"pop\", \"push\", \"push\"])",
        "lastVisitedIntegers(words = ['push', '1', 'push', '2', 'push', '3', 'pop', 'push', '4'])",
        "lastVisitedIntegers(words = [\"pop\", \"1\", \"2\", \"pop\", \"1\", \"pop\", \"3\", \"pop\"])",
        "lastVisitedIntegers(words = [\"po\", \"iz\", \"x\", \"pb\", \"he\"])",
        "lastVisitedIntegers(words = ['1', 'p', 'p', '1', 'p'])",
        "lastVisitedIntegers(words = [\"add 1\", \"delete 2\", \"add 3\"])",
        "lastVisitedIntegers(words = [\"a1\", \"v2\", \"p3\", \"a4\", \"v5\", \"p6\"])"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1, 3, 2])",
        "minimumSeconds(nums = [1,2,3,4,5,6])",
        "minimumSeconds(nums = [2, 2, 3, 3])",
        "minimumSeconds(nums = [4,1,2,3])",
        "minimumSeconds(nums = [1, 2, 2])",
        "minimumSeconds(nums = [3, 1, 2, 4])",
        "minimumSeconds(nums = [1,10,10,100,100,1000])",
        "minimumSeconds(nums = [2, 3, 1])",
        "minimumSeconds(nums = [1, 4, 3, 1, 3])",
        "minimumSeconds(nums = [2,3,1,4,6,10,2,6,2,3])"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"abc\", \"bcd\", \"xyz\"], x = \"b\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"a\", \"b\"], x = \"l\")",
        "findWordsContaining(words = [\"apples\", \"bananas\", \"potatoes\"], x = \"a\")",
        "findWordsContaining(words = [\"abc\", \"xyz\", \"abcxyz\"], x = \"ab\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"haiku\"], x = \"l\")",
        "findWordsContaining(words = [\"how\", \"bye\", \"apple\"], x = \"o\")",
        "findWordsContaining(words = [\"cheese\", \"wine\", \"chicken\"], x = \"e\")",
        "findWordsContaining(words = [\"are\", \"bee\", \"vee\"], x = \"e\")",
        "findWordsContaining(words = [\"hello\", \"pyfunceble\", \"test\"], x = \"e\")",
        "findWordsContaining(words = [\"bicycle\", \"banana\", \"diet\"], x = \"e\")"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [0, 1, 1, 0, 1, 1])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 1, 0])",
        "maxSubarrays(nums = [1, 0, 1, 1, 1, 0, 1])",
        "maxSubarrays(nums = [0, 0, 0, 1, 1, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [5, 4, 3, 2, 1, 6])",
        "maxSubarrays(nums = [2, 4, 1, 0, 2, 3, 4])",
        "maxSubarrays(nums = [3, 5, 1, 2, 3, 4, 1, 0])"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"0\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\", \"2\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"next\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"next\", \"3\", \"prev\", \"4\", \"next\"])",
        "lastVisitedIntegers(words = [\"3\",\"4\",\"prev\",\"1\",\"prev\",\"prev\"])",
        "lastVisitedIntegers(words = [\"234\", \"234555\", \"prev\", \"prev\", \"prev\"])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3], target = 5)",
        "countPairs(nums = [1, 2, 3], target = 5)",
        "countPairs(nums = [1, 2, 3], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [2, 3, 4], target = 7)",
        "countPairs(nums = [0, 1, 2, 3], target = 4)",
        "countPairs(nums = [1, 3, 5, 7, 9], target = 11)",
        "countPairs(nums = [1, 1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 5], target = 3)",
        "countPairs(nums = [2, 3, 2, 3], target = 7)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abcd\", s2 = \"bcad\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcdf\")",
        "canBeEqual(s1 = \"ac\", s2 = \"bd\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"caebd\")",
        "canBeEqual(s1 = \"ca\", s2 = \"ac\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bdac\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acbx\")",
        "canBeEqual(s1 = \"banana\", s2 = \"aznba\")",
        "canBeEqual(s1 = \"azcc\", s2 = \"bzza\")",
        "canBeEqual(s1 = \"woiufoqweuof\", s2 = \"wqewuoifuqwe\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"next\", \"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"100\", \"200\", \"prev\", \"300\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"10\", \"20\", \"30\", \"prev\", \"prev\", \"100\", \"120\", \"prev\"])"
    ],
    "sample_464": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 2, limit = 1)",
        "distributeCandies(n = 2, limit = 1)",
        "distributeCandies(n = 2, limit = 1)",
        "distributeCandies(n = 2, limit = 2)",
        "distributeCandies(n = 20, limit = 4)",
        "distributeCandies(n=10, limit=4)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6])",
        "minimumRightShifts(nums = [2, 4, 1, 3])",
        "minimumRightShifts(nums = [2, 5, 1, 3, 4])",
        "minimumRightShifts(nums = [3, 8, 9, 7, 6])",
        "minimumRightShifts(nums = [1,2,3])",
        "minimumRightShifts(nums = [2, 4, 3, 6, 7])",
        "minimumRightShifts(nums = [2,1,3,4])",
        "minimumRightShifts(nums = [2, 1, 3, 1, 3, 2])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"abc\", \"de\"], x = \"b\")",
        "findWordsContaining(words = [\"abc\", \"abcd\", \"xyz\"], x = \"a\")",
        "findWordsContaining(words = [\"Hello\", \"World\", \"Foo\", \"Bar\"], x = \"o\")",
        "findWordsContaining(words = [\"abc\",\"bcd\",\"cde\"], x = \"b\")",
        "findWordsContaining(words = [\"banana\", \"xylophone\", \"zebra\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"bat\", \"rat\", \"mat\"], x = \"t\")",
        "findWordsContaining(words = [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"], x = \"e\")",
        "findWordsContaining(words = [\"basketball\", \"baseball\", \"football\"], x = \"ball\")",
        "findWordsContaining(words = [\"abandon\", \"abrasive\", \"abrupt\"], x = \"a\")"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 1, 1, 1, 1], m = 2, k = 2)",
        "maxSum(nums = [1, -1, 5, -2, 3], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 2, k = 5)",
        "maxSum(nums = [2,3,1,5], m = 3, k = 3)",
        "maxSum(nums = [5,1,6], m = 3, k = 2)",
        "maxSum(nums = [10, 10, 20, 10], m = 2, k = 2)",
        "maxSum(nums = [3, 8, 0, 4, 0, 0, 3, 3, 8, 3], m = 5, k = 3)",
        "maxSum(nums = [2,-2,4,3,0,2,6,5,-1,1,3,2,-5,3,-5,-2,1,-2,-2,1,-2,4,-5,0,5,-1,-3,-4,-2,-5,1,-1,-3,-4,0,0,-4,-5,-2,-4,3,-5,-1,-2,3,-3,-1,-5,-3,-3,-1,0,-2,-4,1,-5,3,-3,-5,1,4,-4,3,-1,1,2,4,-4,-5,0,-5,-1,4,3,-3,-5,2,-1,-4,-5,-2,-4,-3,4,1,3,-2,-3,2,0,-4,-3,-2,-1,-4,3,-4,-2,-1,-4,0,-1,1,-3,-2,-5,-1,4,-3,1,-1,-4,-2,-2,-2,0,-4,4,-1,-5,-5,1,-2,-4,-1,-3,-2,1,-2,2,-4,2,-1,-1,-4,-5,-1,-4,0,-4,-2,-5,-3,2,-4,-3,-5,-3,-1,2,-3,-2,-5,-2,-1,-2,-4,1,-1,-5,-5,4,-2,1,-2,-4,2,3,-3,3,2,-4,2,-3,-4,-1,1,-1,-3,-3,-4,-4,-1,-3,2,2,-1,-2,1,4,1,-3,-4,1,-4,-1,-3,-5,-1,-2,-4,-5,1,-4,-2,0,-4,-1,-5,-1,-1,3,-2,-2,-4,-4,2,-4,2,-1,1,-5,-5,-3,-5,-1,1,-3,-3,-3,-3,-3,-3,-1,4,-5,0,-1,-4,-3,-2,-5,-2,-4,-2,-4,-2,-4"
    ],
    "sample_424": [
        "minOperations(nums = [3,2,2,4,3])",
        "minOperations(nums = [1,1,1])",
        "minOperations(nums = [1,1,1,2,2,2,3,3,3])",
        "minOperations(nums = [1,1,1,1,1])",
        "minOperations(nums = [1,2,2,6,6,6,3])",
        "minOperations(nums = [2,2,2,4,4])",
        "minOperations(nums = [1, 2, 2, 1])",
        "minOperations(nums = [1, 1, 1, 2, 2])",
        "minOperations(nums = [0,0,0,1,1])",
        "minOperations(nums = [1,1,2,2,3,3,2])"
    ],
    "sample_417": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1, 3, 4, 8], k = 3)",
        "minOperations(nums = [0, 0, 0, 0, 0], k = 1)",
        "minOperations(nums = [2,4,5,8,10], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], k = 7)",
        "minOperations(nums = [1, 5, 2, 3, 4], k = 3)",
        "minOperations(nums = [0,0,0,1], k = 0)",
        "minOperations(nums = [2,5,3,1,2,4,8], k = 2)",
        "minOperations(nums = [3,2,3,3,2,2,3,3,2,2], k = 3)"
    ],
    "sample_371": [
        "sortVowels(s = \"ymph\")",
        "sortVowels(s = 'HympL')",
        "sortVowels(s = \"HmplY\")",
        "sortVowels(s = 'mypH')",
        "sortVowels(s = \"YmpHl\")",
        "sortVowels(s = \"MyPlH\")",
        "sortVowels(s = \"PLeaSe\")",
        "sortVowels(s = \"hElpMe\")",
        "sortVowels(s = \"Hey! My name is YMPH\")",
        "sortVowels(s = \"MfjmpH\")"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 2, limit = 1)",
        "distributeCandies(n = 2, limit = 1)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 1, limit = 1)",
        "distributeCandies(n = 1, limit = 1)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 12, limit = 3)",
        "distributeCandies(n = 20, limit = 4)"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "sumCounts(nums = [3, 2, 1])",
        "sumCounts(nums = [2, 2, 3, 4, 4, 5])",
        "sumCounts(nums = [1, 1, 2, 3, 5, 8, 13, 21, 34])"
    ],
    "sample_429": [
        "maxSubarrays(nums = [0, 1, 1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [0, 0, 0, 0])",
        "maxSubarrays(nums = [-1, -2, -3])",
        "maxSubarrays(nums = [1, 1, 0, 0])",
        "maxSubarrays(nums = [3, 5, -1])",
        "maxSubarrays(nums = [1, 0, 0, 0, 0, 0, 1])",
        "maxSubarrays(nums = [0, 1, 0, 0, 1, 1, 0, 0, 1])",
        "maxSubarrays(nums = [1, 2, 3, 1, 2, 3, 4, 1])",
        "maxSubarrays(nums = [5, 6, 4, 2])",
        "maxSubarrays(nums = [2, 5, 1, 3, 4, 2, 1, 6])"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [0, 1, 2])",
        "sumCounts(nums = [0, 0, 0])",
        "sumCounts(nums = [1,1,1])",
        "sumCounts(nums = [1,1,1,1])",
        "sumCounts(nums = [0, 1, 1])",
        "sumCounts(nums = [1,1,1,2,2,2,3,3,3])",
        "sumCounts(nums = [1, 2, 1, 2, 3, 1])",
        "sumCounts(nums = [3, 1, 4])"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"xx\", s2 = \"yy\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcab\")",
        "canBeEqual(s1 = \"xxxyyy\", s2 = \"xyyxx\")",
        "canBeEqual(s1 = \"xyzzx\", s2 = \"xxzzxy\")",
        "canBeEqual(s1 = \"arrb\", s2 = \"abra\")",
        "canBeEqual(s1 = \"aabbcc\", s2 = \"ccbba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abc1\")",
        "canBeEqual(s1 = \"red\", s2 = \"red\")",
        "canBeEqual(s1 = \"abacb\", s2 = \"cbabac\")",
        "canBeEqual(s1 = \"siqg\", s2 = \"sivq\")"
    ],
    "sample_380": [
        "countPairs(nums = [1,2,3], target = 5)",
        "countPairs(nums = [1,2,3], target = 5)",
        "countPairs(nums = [1,2,3], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 7)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 4, 2, 3], target = 5)",
        "countPairs(nums = [3,1,1,2], target = 4)",
        "countPairs(nums = [2, 0, 0], target = 3)",
        "countPairs(nums = [3, 1, 5, 7, 5, 9], target = 12)",
        "countPairs(nums = [1,3,5,7,9,11,13,15], target = 30)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [2, 3, 3])",
        "sumCounts(nums = [1,1,2,2,3,3])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [1, 2, 3, 2])",
        "sumCounts(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "sumCounts(nums = [1, 1, 2, 3, 2])",
        "sumCounts(nums = [1, 1, 2, 3, 3, 3, 2, 2, 1])"
    ],
    "sample_368": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"ymph\")",
        "sortVowels(s = \"LYmpH\")",
        "sortVowels(s = \"HYmpL\")",
        "sortVowels(s = \"PlYmpH\")",
        "sortVowels(s = \"lmpY\")",
        "sortVowels(s = 'Hymply')",
        "sortVowels(s = \"GlYmpH\")",
        "sortVowels(s = \"PymPH\")",
        "sortVowels(s = \"FlyEye\")"
    ],
    "sample_462": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 10, limit = 4)",
        "distributeCandies(n = 20, limit = 5)",
        "distributeCandies(n = 12, limit = 5)",
        "distributeCandies(n = 20, limit = 4)"
    ],
    "sample_474": [
        "minimumCoins(prices = [2, 5, 3, 7])",
        "minimumCoins(prices = [2, 5, 3, 7])",
        "minimumCoins(prices = [2, 5, 3, 7])",
        "minimumCoins(prices = [2, 5, 3, 7])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins(prices = [1, 3, 4, 5])",
        "minimumCoins(prices = [5, 10, 20, 25])",
        "minimumCoins(prices = [1, 5, 2, 1, 2, 3])",
        "minimumCoins(prices = [5, 10, 15, 10, 10, 15, 5])"
    ],
    "sample_426": [
        "minOperations(nums = [1, 2, 3, 4, 5])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1, 2, 1])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 2, 6, 6, 3])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1])",
        "minOperations(nums = [2,3,2])",
        "minOperations(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])",
        "minOperations(nums = [3,2,3,4,3,3])"
    ],
    "sample_423": [
        "minOperations(nums = [1, 1, 1])",
        "minOperations(nums = [1, 2, 3, 2, 1])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minOperations(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "minOperations(nums = [1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [2,2,2,3])",
        "minOperations(nums = [1, 2, 2, 2, 3, 4, 4])",
        "minOperations(nums = [3,3,4,4,5,5])",
        "minOperations(nums = [3,3,3,2,2,1,2,1,1,1,1,2,1])"
    ],
    "sample_476": [
        "minimumCoins(prices = [1,2,3,4,5])",
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [2,3,4,5])",
        "minimumCoins(prices = [3,2,1])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50])",
        "minimumCoins(prices = [1, 1, 3, 2, 1, 1])",
        "minimumCoins(prices = [2,5,1,1,3])",
        "minimumCoins(prices = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])",
        "minimumCoins(prices = [1, 2, 10, 3, 10])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumRightShifts(nums = [1, 10, 4, 7, 1])",
        "minimumRightShifts(nums = [0, 1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [3, 1, 2])",
        "minimumRightShifts(nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10])",
        "minimumRightShifts(nums = [3, 4, 5, 6, 7])"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [2, 1, 3])",
        "minimumRightShifts(nums = [3, 1, 2])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumRightShifts(nums = [1,2,3])",
        "minimumRightShifts(nums = [1, 0])",
        "minimumRightShifts(nums = [1, 1, 2, 2, 3, 3])",
        "minimumRightShifts(nums = [1, 10, 4, 2])",
        "minimumRightShifts(nums = [1, 0, 3, 2])",
        "minimumRightShifts(nums = [1, 0, 0, 1])"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"c\", s2 = \"c\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"abxyz\", s3 = \"abcxyz\")",
        "findMinimumOperations(s1 = \"hoge\", s2 = \"hoge\", s3 = \"hoge\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"xy\", s3 = \"yz\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"abcdx\", s3 = \"abcdy\")",
        "findMinimumOperations(s1 = \"s\", s2 = \"a\", s3 = \"b\")",
        "findMinimumOperations(s1 = \"aaaaaaa\", s2 = \"aaaaaaa\", s3 = \"bbbbbbb\")",
        "findMinimumOperations(s1 = \"abcdef\", s2 = \"abcddf\", s3 = \"abcef\")",
        "findMinimumOperations(s1 = \"frozen\", s2 = \"banana\", s3 = \"hot\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"bnbnbnbn\", s3 = \"banbanan\")"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"bba\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abacab\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbb\")",
        "longestSemiRepetitiveSubstring(s = \"bbabab\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abbabab\")",
        "longestSemiRepetitiveSubstring(s = \"babbabab\")",
        "longestSemiRepetitiveSubstring(s = \"aaabcabc\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"ab\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"foo\", \"bar\", \"baz\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sss\", \"ssss\"])",
        "maximumNumberOfStringPairs(words = ['ab', 'ba', 'ab'])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"ab\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"xya\", \"xay\"])",
        "maximumNumberOfStringPairs(words = [\"zq\"])",
        "maximumNumberOfStringPairs(words = [\"abcdef\",\"bdefhij\",\"ab\",\"abc\"])",
        "maximumNumberOfStringPairs(words = [\"my\", \"name\", \"is\", \"luis\", \"matias\", \"matias\", \"lu\"])"
    ],
    "sample_247": [
        "minOperations(s1 = \"00110\", s2 = \"00111\", x = 1)",
        "minOperations(s1 = \"abcd\", s2 = \"abcde\", x = 2)",
        "minOperations(s1 = \"abcde\", s2 = \"ace\", x = 1)",
        "minOperations(s1 = \"xxx\", s2 = \"xxy\", x = 2)",
        "minOperations(s1 = \"zaeb\", s2 = \"zeba\", x = 1)",
        "minOperations(s1 = \"abababababababababab\", s2 = \"babababababababababab\", x = 2)",
        "minOperations(s1 = \"dcabba\", s2 = \"cbabda\", x = 2)",
        "minOperations(s1 = \"1111111111\", s2 = \"111111111111111\", x = 1)",
        "minOperations(s1 = \"mali\", s2 = \"male\", x = 1)",
        "minOperations(s1 = \"sandglass\", s2 = \"sandcastle\", x = 1)"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bca\", \"bc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"xyz\", \"xy\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"de\"])",
        "maximumNumberOfStringPairs(words = [\"za\",\"bb\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"ab\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"xyz\", \"acb\", \"xyz\"])",
        "maximumNumberOfStringPairs(words = [\"aabb\", \"bbaa\", \"bbaa\"])",
        "maximumNumberOfStringPairs(words = [\"az\", \"ar\", \"za\", \"az\"])",
        "maximumNumberOfStringPairs(words = [\"flgog\", \"golf\"])"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [3, 2, 4, 3])",
        "minGroupsForValidAssignment(nums = [2, 2, 1, 1, 2, 2, 1, 2, 2, 2, 1])",
        "minGroupsForValidAssignment(nums = [3,4,3,2,6,3,3])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 10, m = 4)",
        "differenceOfSums(n = 10, m = 4)",
        "differenceOfSums(n = 4, m = 3)",
        "differenceOfSums(n = 10, m = 7)",
        "differenceOfSums(n = 5, m = 4)",
        "differenceOfSums(n = 5, m = 4)",
        "differenceOfSums(n = 20, m = 5)"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"011101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101\", k = 2)",
        "shortestBeautifulSubstring(s = \"11111\", k = 3)",
        "shortestBeautifulSubstring(s = '110110', k = 2)",
        "shortestBeautifulSubstring(s = \"001110\", k = 2)",
        "shortestBeautifulSubstring(s = \"10101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1110111\", k = 3)",
        "shortestBeautifulSubstring(s = \"11111111\", k = 3)",
        "shortestBeautifulSubstring(s = \"11100101\", k = 2)",
        "shortestBeautifulSubstring(s = \"0000000001011100\", k = 2)"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"aa\", s2 = \"aa\", s3 = \"aa\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"acb\", s3 = \"bca\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"abc\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"bce\")",
        "findMinimumOperations(s1 = \"xyx\", s2 = \"yyx\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"abcdef\", s2 = \"bcdefgh\", s3 = \"cdefghij\")",
        "findMinimumOperations(s1 = \"geeksforgeeks\", s2 = \"geeks\", s3 = \"quiz\")",
        "findMinimumOperations(s1 = \"d\", s2 = \"e\", s3 = \"f\")",
        "findMinimumOperations(s1 = \"ac\", s2 = \"ab\", s3 = \"abc\")"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcdcba\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbaba\")",
        "longestSemiRepetitiveSubstring(s = \"aabbc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabca\")",
        "longestSemiRepetitiveSubstring(s = \"aaaccccbbb\")",
        "longestSemiRepetitiveSubstring(s = \"ababbbabbbb\")",
        "longestSemiRepetitiveSubstring(s = \"aabccabcaabbbc\")"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2], nums2 = [3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [1, 2, 0], nums2 = [3, 0, 4])",
        "minSum(nums1 = [1, 2, 0], nums2 = [1, 0, 3])",
        "minSum(nums1 = [1, 3, 0], nums2 = [0, 2, 4])",
        "minSum(nums1 = [1, 0, 0, 0], nums2 = [0, 1, 1, 1])",
        "minSum(nums1 = [1, 3, 4, 0], nums2 = [1, 2, 3, 4, 0])",
        "minSum(nums1 = [1, 2, 3, 4, 0], nums2 = [3, 4, 0, 2, 1])",
        "minSum(nums1 = [5, 1, 2, 4], nums2 = [2, 3, 1, 4])"
    ],
    "sample_289": [
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"111111\")",
        "minimumSteps(s = \"0010\")",
        "minimumSteps(s = \"10111\")",
        "minimumSteps(s = \"10111\")",
        "minimumSteps(s = \"10100\")",
        "minimumSteps(s = \"1011\")"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [])",
        "maximumTripletValue(nums = [-1, 2, -1, 2])",
        "maximumTripletValue(nums = [-1, 0, 2])",
        "maximumTripletValue(nums = [-1, 2, 3])",
        "maximumTripletValue(nums = [3, -1, 0, 2])",
        "maximumTripletValue(nums = [3, 1, 4, 5])",
        "maximumTripletValue(nums = [-100, -1, -2])",
        "maximumTripletValue(nums = [-3, 0, 4, 1, 2])",
        "maximumTripletValue(nums = [-2, -2, 1, 0, 0, 1, 0])"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"a\", k = 1)",
        "beautifulSubstrings(s = \"",
        "beautifulSubstrings(s = \"aaiueo\", k = 2)",
        "beautifulSubstrings(s = \"aiu\", k = 2)",
        "beautifulSubstrings(s = \"baba\", k = 3)",
        "beautifulSubstrings(s = \"aki\", k = 1)",
        "beautifulSubstrings(s = \"aaaaiiiuuuueeeoooo\", k = 2)",
        "beautifulSubstrings(s = \"aaiuaouaiu\", k = 2)",
        "beautifulSubstrings(s=\"wvtgxh\", k=1)",
        "beautifulSubstrings(s = \"iiuuiuieaaiuuieeeeia\", k = 2)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"beautiful\")",
        "minimumBeautifulSubstrings(s = \"a\")",
        "minimumBeautifulSubstrings(s = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "minimumBeautifulSubstrings(s = \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s = \"123123\")",
        "minimumBeautifulSubstrings(s = \"aabbbbeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",
        "minimumBeautifulSubstrings(s = \"cccaaaabbb\")",
        "minimumBeautifulSubstrings(s = \"lcaa\")",
        "minimumBeautifulSubstrings(s = \"fgljrxzu\")",
        "minimumBeautifulSubstrings(s = \"u0p838jnnb\")"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1], [1]])",
        "matrixSum(a = [[1, 1], [1, 1], [1, 1]])",
        "matrixSum(a = [[1, 3], [2, 4]])",
        "matrixSum(a = [[0]])",
        "matrixSum(a = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])",
        "matrixSum(a = [[1, 2], [1, 1]])",
        "matrixSum(a = [[0,0,0,0],[0,0,0,0],[0,0,0,0]])",
        "matrixSum(a = [[1, 2, 3, 4], [0, 1, 2, 3], [1, 2, 3, 4]])",
        "matrixSum(a = [[1, 2, 3], [2, 3, 4], [2, 3, 1], [1, 1, 1]])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2], nums2 = [3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5])",
        "minSum(nums1 = [1, 1, 0, 1], nums2 = [0, 1, 1, 1])",
        "minSum(nums1 = [1,2,3], nums2 = [2,3,4])",
        "minSum(nums1 = [2, 3], nums2 = [0, 4])",
        "minSum(nums1 = [0, 0], nums2 = [1, 1])",
        "minSum(nums1 = [1,2,4], nums2 = [2,3,5])",
        "minSum(nums1 = [2, 3, 5, 7], nums2 = [1, 4, 5, 8])",
        "minSum(nums1 = [0, 0, 0], nums2 = [2, 0, 0, 0])",
        "minSum(nums1 = [2, 2, 3, 2, 1], nums2 = [4, 4, 4, 3])"
    ],
    "sample_282": [
        "minOperations(nums1 = [1, 3, 5, 7], nums2 = [3, 4, 5, 6])",
        "minOperations(nums1 = [2, 4, 6, 8], nums2 = [3, 5, 7, 9])",
        "minOperations(nums1 = [2, 4, 5, 8], nums2 = [3, 6, 7])",
        "minOperations(nums1 = [1,2,4,3], nums2 = [1,2,3,4])",
        "minOperations(nums1 = [2, 4, 5, 8], nums2 = [2, 4, 8, 10])",
        "minOperations(nums1 = [1, 2, 4], nums2 = [1, 2, 3, 5])",
        "minOperations(nums1 = [1, 2, 1, 2], nums2 = [3, 3, 3, 3])",
        "minOperations(nums1 = [4, 1, 2, 3], nums2 = [3, 2, 4, 1])",
        "minOperations(nums1 = [0, 5, 10, 20], nums2 = [0, 3, 10, 20])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1, 7, 4, 9, 2, 5])",
        "alternatingSubarray(nums = [1, 7, 4, 9, 2, 5])",
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [1,2,2,3,3,4,4,5,5])",
        "alternatingSubarray(nums = [1,2,3,4,1,2,3,4])",
        "alternatingSubarray(nums = [1,2,2,3,3,3,4,4])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 4, 4])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 3, 3])",
        "alternatingSubarray(nums = [0,1,1,2,0])",
        "alternatingSubarray(nums = [1, 1, 2, 3, 4, 3, 5, 4, 2, 1])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3, 4], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 4)",
        "buyChoco(prices = [1, 2, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 4], money = 6)",
        "buyChoco(prices = [1, 5, 6], money = 4)",
        "buyChoco(prices = [3, 4, 2, 1], money = 7)",
        "buyChoco(prices = [100, 50, 10, 5, 1], money = 105)",
        "buyChoco(prices = [1, 3, 2, 5, 3], money = 6)",
        "buyChoco(prices = [2, 1, 4, 7, 9], money = 5)"
    ],
    "sample_302": [
        "countSeniors(details = [\"123456789012345\", \"012345678901234\"])",
        "countSeniors(details = [\"2019-01-01T11:00:00.000Z\", \"2019-01-01T12:00:00.000Z\", \"2019-01-01T13:00:00.000Z\", \"2019-01-01T14:00:00.000Z\"])",
        "countSeniors(details = [\"Norma Becker\", \"Jackie Sanders\", \"Cheryl Sanders\"])",
        "countSeniors(details = [\"Pamela Beesly, 25, Senior Developer, 2015\", \"Juan Carlos, 54, Senior Software Engineer, 2016\", \"Laurence Dodgson, 12, Junior Developer, 2016\"])",
        "countSeniors(details = [\"8930127609990000\", \"2011120100000000\", \"6012248489990000\", \"1929120100000000\"])",
        "countSeniors(details = [\"john;sports;100;15;2020-03-18\",\n                               \"jane;jazz;120;20;2020-01-30\",\n                               \"sue;kayaking;140;25;2020-05-19\",\n                               \"tom;water_polo;110;14;2020-04-05\",\n                               \"bill;swimming;90;10;2020-03-10\",\n                               \"bill;swimming;90;10;2020-03-10\"])",
        "countSeniors(details = [\"Mr. S. R. Prasad, 45, 14-06-1985\", \"Dr. L. V. Bhardwaj, 65, 18-08-1944\", \"Mr. V. V. Mishra, 18, 17-05-1993\", \"Mr. S. K. Gupta, 30, 02-07-1980\", \"Dr. K. K. Singh, 62, 09-03-1958\"])",
        "countSeniors(details = [\"4767234749 2011-06-27 2017-06-27 640404040\",\n                                \"2133324444 2009-01-14 2017-01-14 123456789\",\n                                \"123456789 1948-01-01 1948-01-01 666666666\"])",
        "countSeniors(details = [\"Brian T. McCallister, 60, 87.7, 10.8, 74.9, 55.2\", \"Carl H. Morton, 69, 100.5, 3.7, 93.8, 63.1\", \"Victor R. Marion, 58, 94.2, 6.3, 79.2, 53.7\", \"Bernard A. Frank, 63, 77.4, 3.8, 93.9, 60.1\", \"David D. Glick, 57, 79.1, 12.1, 75.3, 58.5\"])",
        "countSeniors(details = [\"4657 33 Goh 687201231 61\", \"5029 35 Lim 627304500 77\", \"5377 57 Gan 731400441 71\", \"3668 13 Lee 978210100 63\", \"4549 28 Low 654500050 59\", \"3055 34 Goh 698201231 70\", \"1721 17 Chan 747304500 63\", \"2036 15 Tan 654500050 30\", \"2390 17 Tan 677304500 58\", \"5005 18 Lee 747304500 75\", \"2633 16 Tan 654500050 48\"])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"a\", k = 3)",
        "beautifulSubstrings(s = \"ab\", k = 1)",
        "beautifulSubstrings(s = \"bebe\", k = 3)",
        "beautifulSubstrings(s = \"abcbc\", k = 2)",
        "beautifulSubstrings(s = \"aecd\", k = 2)",
        "beautifulSubstrings(s = \"udhay\", k = 3)",
        "beautifulSubstrings(s = \"abebbcbdefg\", k = 2)",
        "beautifulSubstrings(s = \"abdkfgbdf\", k = 2)"
    ],
    "sample_255": [
        "minimumSum(nums = [1,2,3,4,5,6,7,8,9])",
        "minimumSum(nums = [1,2,3,4,5,6,7,8,9])",
        "minimumSum(nums = [4,3,2,6])",
        "minimumSum(nums = [2,3,5])",
        "minimumSum(nums = [2,4,5,7,8])",
        "minimumSum(nums = [1,3,4,6,7,10])",
        "minimumSum(nums = [1,2,3,7,4,6,5])",
        "minimumSum(nums = [3, 1, 4, 6])",
        "minimumSum(nums = [9,3,4,8,1])",
        "minimumSum(nums = [1, 8, 1, 1, 1, 8])"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums = [3,3,2,2,1,1])",
        "minGroupsForValidAssignment(nums = [2,2,1])",
        "minGroupsForValidAssignment(nums = [0,0,1,1])",
        "minGroupsForValidAssignment(nums = [10,20,30])",
        "minGroupsForValidAssignment(nums = [5,5,5,5,6,6,6])",
        "minGroupsForValidAssignment(nums = [4,2,3,4,6,1,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,2,1,2])",
        "minGroupsForValidAssignment(nums = [1,2,2,1,3,1,2,2,3])"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8])",
        "alternatingSubarray(nums=[1,2,3,4])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [0,1,1,0,1])",
        "alternatingSubarray(nums = [1,2,3,3,4,5,6])",
        "alternatingSubarray(nums = [3,4,5,6])",
        "alternatingSubarray(nums = [1,2,3,4,6,8])",
        "alternatingSubarray(nums = [1,3,5,7,9,11,12])",
        "alternatingSubarray(nums = [1,3,4,5,3,1,4,5,7,4,3,2,5,2,4,6,2,4,5,10])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = \"11110\", k = 2)",
        "shortestBeautifulSubstring(s = \"1100011\", k = 2)",
        "shortestBeautifulSubstring(s = \"11110000\", k = 2)",
        "shortestBeautifulSubstring(s = \"011110111\", k = 4)",
        "shortestBeautifulSubstring(s = \"11110000111111\", k = 2)",
        "shortestBeautifulSubstring(s = \"10101111101\", k = 2)",
        "shortestBeautifulSubstring(s = '11101111', k = 2)",
        "shortestBeautifulSubstring(s = \"010101111\", k = 2)",
        "shortestBeautifulSubstring(s = \"1111101\", k = 2)",
        "shortestBeautifulSubstring(s = '110110110110110110110110110110110', k = 3)"
    ],
    "sample_293": [
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"100\")",
        "minimumSteps(s = \"1100\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"0010100\")",
        "minimumSteps(s = \"11001101\")",
        "minimumSteps(s = \"010100010101\")",
        "minimumSteps(s = \"10100000100110101\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbb\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaab\")",
        "longestSemiRepetitiveSubstring(s = \"aaab\")",
        "longestSemiRepetitiveSubstring(s = \"abcdedc\")",
        "longestSemiRepetitiveSubstring(s = \"abbabbaa\")",
        "longestSemiRepetitiveSubstring(s = \"bacba\")",
        "longestSemiRepetitiveSubstring(s = \"dabcdcd\")",
        "longestSemiRepetitiveSubstring(s = \"cddcdaa\")",
        "longestSemiRepetitiveSubstring(s = \"qqqweqweqqq\")"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums = [1,2,2,6,6,6,6,7,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [3, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [0,2,1])",
        "minGroupsForValidAssignment(nums = [2,2,2,1,1,3])",
        "minGroupsForValidAssignment(nums = [1,2,2,1,2,2,3,2,2,1])",
        "minGroupsForValidAssignment(nums = [1,2,2,3,3,3,4,4,5,5,5,6,6,6,6,6,6,7])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,3,3,3,3,3,3,4,4,5,5,6,6,6,7,8,9,9])"
    ],
    "sample_307": [
        "countSeniors(details = [\"",
        "countSeniors(details = [\"12345678901\", \"23456789012\", \"34567890123\"])",
        "countSeniors(details = [\"Rahul Arora\", \"Rajat Gupta\", \"Rohan Garg\"])",
        "countSeniors(details = [\"5547N\", \"5730N\"])",
        "countSeniors(details = [\"72, XYZ\", \"84, PQR\", \"69, ABC\", \"30, MNO\"])",
        "countSeniors(details = [\"NYC-30-35\", \"NYC-40-21\", \"NYC-60-43\", \"NYC-65-37\"])",
        "countSeniors(details = [\"John Smith, 34, 42\", \"Bill Smith, 18, 50\", \"Kate Smith, 42, 44\"])",
        "countSeniors(details = [\"09-23-1964\", \"11-19-1965\", \"11-23-1959\", \"01-23-1978\"])",
        "countSeniors(details = [\"019011965\", \"020021966\", \"020021981\", \"019021989\"])",
        "countSeniors(details = [\"12345678RJ\",\"32464783RH\",\"54345675RH\",\"12345678AS\",\"12345678BS\"])"
    ],
    "sample_290": [
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"00\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"00000000\")",
        "minimumSteps(s = \"1100\")",
        "minimumSteps(s = \"0100001011100\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,2,3], moveFrom = [0], moveTo = [2])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,2], moveTo = [2,1])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [2], moveTo = [2])",
        "relocateMarbles(nums = [1,2,3,5,7], moveFrom = [3], moveTo = [4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6], moveFrom = [0], moveTo = [0])",
        "relocateMarbles(nums = [4, 2, 3, 1, 5], moveFrom = [2], moveTo = [4])",
        "relocateMarbles(nums = [1,2,2,3,3,3], moveFrom = [2,3], moveTo = [0,3])",
        "relocateMarbles(nums = [2, 2, 2, 1, 1, 1], moveFrom = [1, 3, 2], moveTo = [1, 2, 3])",
        "relocateMarbles(nums = [2,1,2,1,2,1,2,1], moveFrom = [1,2,2,1,1,1,2,2], moveTo = [2,2,1,2,2,1,2,1])",
        "relocateMarbles(nums=[1,2,3,4,5,6,7,8,9,10],moveFrom=[5,1,10,3,1],moveTo=[2,5,1,7,9])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [0, 1, 1, 0])",
        "alternatingSubarray(nums = [0,1,1,0])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 2, 2, 1])",
        "alternatingSubarray(nums = [1,0,1])",
        "alternatingSubarray(nums = [1, 0, 1, 1, 0])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2, 1, 2])",
        "alternatingSubarray(nums = [0, 1, 0, 1, 0])",
        "alternatingSubarray(nums = [1,2,2,2,1,2])",
        "alternatingSubarray(nums = [1, 7, 5, 1, 9, 2, 1, 9, 9])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"banana\", k = 3)",
        "beautifulSubstrings(s = \"hello\", k = 2)",
        "beautifulSubstrings(s = \"aabbeee\", k = 2)",
        "beautifulSubstrings(s = \"abaa\", k = 2)",
        "beautifulSubstrings(s = \"bebeabab\", k = 10)",
        "beautifulSubstrings(s = \"aabbeaabb\", k = 5)",
        "beautifulSubstrings(s = \"asqweqweqwe\", k = 4)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6])",
        "maximumTripletValue(nums = [1, 1, 1, 1, 1])",
        "maximumTripletValue(nums = [5, 1, 3])",
        "maximumTripletValue(nums = [0, 1, 1, 1])",
        "maximumTripletValue(nums = [2,3,1,2])",
        "maximumTripletValue(nums = [3, 2, -1])",
        "maximumTripletValue(nums = [3,4,6])",
        "maximumTripletValue(nums = [2, 3, 1, 2, 2, 1])",
        "maximumTripletValue(nums = [-5, 5, -5, -4, 4, -4])",
        "maximumTripletValue(nums = [1, 4, 2, 7, 1, 11, 7, 8])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcab\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bcd\", \"cde\", \"def\", \"efg\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bca\", \"cba\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"x\", \"y\", \"xy\", \"yx\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"bca\",\"bac\",\"abc\"])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 3, m = 2)",
        "differenceOfSums(n = 100, m = 4)"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3, 4], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 2)",
        "buyChoco(prices = [1, 2, 3, 4, 5, 6], money = 5)",
        "buyChoco(prices = [2, 10], money = 20)",
        "buyChoco(prices = [5, 1, 3, 4], money = 10)",
        "buyChoco(prices = [1, 1, 2, 3, 4], money = 4)",
        "buyChoco(prices = [120, 130], money = 150)",
        "buyChoco(prices = [1, 3, 5, 12], money = 20)",
        "buyChoco(prices = [40, 15, 4, 50], money = 60)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"bat\", \"tab\", \"cat\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"def\",\"fed\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"cd\", \"bc\", \"ac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aac\"])"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abccccdd\")",
        "longestSemiRepetitiveSubstring(s = \"aabac\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbaa\")",
        "longestSemiRepetitiveSubstring(s = \"bab\")",
        "longestSemiRepetitiveSubstring(s = \"abcaac\")",
        "longestSemiRepetitiveSubstring(s = \"aabccddd\")",
        "longestSemiRepetitiveSubstring(s = \"abcaaaba\")"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"pq\", \"xy\"])",
        "minimizeConcatenatedLength(words = [\"to\", \"be\", \"or\", \"not\", \"to\", \"be\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\"])",
        "minimizeConcatenatedLength(words = [\"minimize\", \"concatenated\", \"length\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"bc\", \"cd\", \"ef\", \"gh\"])",
        "minimizeConcatenatedLength(words = [\"zoo\", \"bar\", \"foo\"])",
        "minimizeConcatenatedLength(words = [\"ty\",\"tu\",\"tb\"])",
        "minimizeConcatenatedLength(words = [\"acba\", \"xyyx\", \"aaa\", \"bbb\"])",
        "minimizeConcatenatedLength(words = [\"hey\", \"ell\", \"my\", \"name\", \"is\", \"josh\"])",
        "minimizeConcatenatedLength(words = [\"c\", \"def\", \"egh\", \"jkl\", \"m\"])"
    ],
    "sample_323": [
        "isFascinating(n = 2)",
        "isFascinating(n = 10)",
        "isFascinating(n = 10)",
        "isFascinating(n = 123)",
        "isFascinating(n = 27)",
        "isFascinating(n = 17)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 111)",
        "isFascinating(n = 42)",
        "isFascinating(n = 1123456789)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"babab\")",
        "longestSemiRepetitiveSubstring(s = \"aaa\")",
        "longestSemiRepetitiveSubstring(s = \"abababa\")",
        "longestSemiRepetitiveSubstring(s = \"abaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbbaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabcacab\")",
        "longestSemiRepetitiveSubstring(s = \"xababcdabab\")",
        "longestSemiRepetitiveSubstring(s = \"cabcbacb\")"
    ],
    "sample_305": [
        "countSeniors(details=[\"123456789012\", \"012345678901\", \"234567890123\", \"345678901234\", \"456789012345\"])",
        "countSeniors(details = [\"Sarah Smith\", \"John Smith\", \"James Smith\"])",
        "countSeniors(details = [\"1234567890128888\", \"1234567890120000\", \"1234567890120001\"])",
        "countSeniors(details = [\"1121290111\", \"2222222222\", \"3333333333\"])",
        "countSeniors(details = [\"s=100, h=50, a=20, 1990\"])",
        "countSeniors(details = [\"MR, 22 05 1995\", \"MR, 22 05 1999\", \"MR, 22 05 1997\", \"MR, 22 05 1996\"])",
        "countSeniors(details = [\"10004639091732771926\", \"10004639091732771925\", \"10004639091732771924\"])",
        "countSeniors(details = [\"0000111450Luis Pepito Ruiz Diaz  72  01/01/1950\"])",
        "countSeniors(details = [\"20030812005920\",\"20010612006920\",\"19930112006920\",\"20010112006920\",\"20040512006920\",\"19931212005920\",\"19931212006920\",\"19931212007920\",\"20010812006920\"])",
        "countSeniors(details = [\"Sarah Williams,35,100.3\", \"Peter Black,32,90.5\", \"Ruth Garcia,28,100.2\", \"Daniel Garza,87,60.9\", \"Edward Harris,85,99.5\", \"Jennifer Reid,47,80.8\", \"Susan Smith,78,100.5\", \"Andrea Lee,67,90.2\"])"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 2, 1, 2])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 3])",
        "minGroupsForValidAssignment(nums = [3, 2, 1, 5, 2, 1])",
        "minGroupsForValidAssignment(nums = [4,5,1,2,3])",
        "minGroupsForValidAssignment(nums = [10,10,2,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8])",
        "minGroupsForValidAssignment(nums = [1, 3, 5, 2, 2, 2, 2, 1, 1, 1])"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [3, 1, 2, 4])",
        "minimumSum(nums = [1, 3, 2, 4])",
        "minimumSum(nums = [3, 2, 1, 4])",
        "minimumSum(nums = [8, 2, 3, 4, 5])",
        "minimumSum(nums = [4, 1, 5, 7])",
        "minimumSum(nums = [3, 4, 5, 2])",
        "minimumSum(nums = [-3, 1, -2, -4, -1, 2, 1, -5, 4])"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"bat\", \"tab\", \"cat\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bca\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cde\", \"fgh\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"car\", \"ada\", \"xyz\"])",
        "maximumNumberOfStringPairs(words = [\"b\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"book\", \"don\", \"rea\", \"moc\", \"tac\", \"cat\"])",
        "maximumNumberOfStringPairs(words = [\"d\", \"ab\", \"xyz\", \"ab\"])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = \"0110101\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"01100\", k = 2)",
        "shortestBeautifulSubstring(s = \"0011101\", k = 2)",
        "shortestBeautifulSubstring(s = '10111', k = 2)",
        "shortestBeautifulSubstring(s = \"1110001\", k = 2)",
        "shortestBeautifulSubstring(s = \"0011101\", k = 2)",
        "shortestBeautifulSubstring(s = \"111000111\", k = 2)",
        "shortestBeautifulSubstring(s = \"1010101010101010101010\", k = 6)",
        "shortestBeautifulSubstring(s = \"11100110100111\", k = 4)"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 1)",
        "lexicographicallySmallestArray(nums = [5, 4, 3, 2, 1], limit = 3)",
        "lexicographicallySmallestArray(nums = [1, 5, 8, 4, 3, 6, 0, 9, 7, 2], limit = 4)",
        "lexicographicallySmallestArray(nums = [9, 2, 1, 3, 5], limit = 2)",
        "lexicographicallySmallestArray(nums = [8, 2, 3, 5, 1], limit = 3)",
        "lexicographicallySmallestArray(nums = [2, 6, 5, 1, 9], limit = 3)",
        "lexicographicallySmallestArray(nums = [2, 5, 2, 8, 7], limit = 4)",
        "lexicographicallySmallestArray(nums = [3, 4, 2, 3, 5, 1], limit = 3)",
        "lexicographicallySmallestArray(nums = [3, 6, 5, 4, 1, 2], limit = 5)",
        "lexicographicallySmallestArray(nums = [12, 5, 3, 8, 9, 13], limit = 10)"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1], [2]])",
        "matrixSum(a = [[1, 0], [1, 0]])",
        "matrixSum(a = [[0, 0], [0, 0], [0, 0]])",
        "matrixSum(a = [[0, 0], [1, 1], [1, 0]])",
        "matrixSum(a = [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]])",
        "matrixSum(a = [[1, 2, 3], [3, 4, 5], [4, 5, 6]])",
        "matrixSum(a = [[0, 2], [1, 3], [1, 5]])",
        "matrixSum(a = [[1,1,1,0,0], [1,0,0,1,1], [1,1,1,1,1]])",
        "matrixSum(a = [[1, 3, 3], [1, 0, 2], [1, 1, 2]])"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"beabeefeab\", k = 3)",
        "beautifulSubstrings(s = \"aaeiou\", k = 2)",
        "beautifulSubstrings(s = \"abcdef\", k = 2)",
        "beautifulSubstrings(s = \"aeiouaeiou\", k = 3)",
        "beautifulSubstrings(s = \"beautifulsubstrings\", k = 5)",
        "beautifulSubstrings(s = \"sub\", k = 3)",
        "beautifulSubstrings(s = \"eeaee\", k = 3)",
        "beautifulSubstrings(s = \"babac\", k = 1)",
        "beautifulSubstrings(s = \"aeeioaaeeiioeeoo\", k = 2)",
        "beautifulSubstrings(s = \"hfgelfdjeifj\", k = 3)"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"bat\", \"tab\", \"cat\"])",
        "maximumNumberOfStringPairs(words = [\"bat\", \"tab\", \"cat\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"abcd\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"xyz\", \"xy\", \"xy\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"xyz\", \"zyx\", \"abc\", \"xba\", \"abz\"])",
        "maximumNumberOfStringPairs(words = [\"ad\", \"ae\", \"ad\"])",
        "maximumNumberOfStringPairs(words = [\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl\",\"jkl",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aab\", \"cbb\", \"ccb\"])"
    ],
    "sample_325": [
        "isFascinating(n = 3)",
        "isFascinating(n = 3)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 5)",
        "isFascinating(n = 12)",
        "isFascinating(n = 8)",
        "isFascinating(n = 6)",
        "isFascinating(n = 111)"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [1, 1, 1, 1, 1, 1, 1])",
        "maximumTripletValue(nums = [5, 2, 3])",
        "maximumTripletValue(nums = [1, 10, 100, 1000, 10000])",
        "maximumTripletValue(nums = [-7, 1, 5, 2, -4, 3])",
        "maximumTripletValue(nums = [3, 6, 4, 1])",
        "maximumTripletValue(nums = [-50, -40, -30, -20, -10, 10, 20, 30, 40, 50])",
        "maximumTripletValue(nums = [4, 2, 3, 7, 9])",
        "maximumTripletValue(nums = [-10, -20, -30, -40, -50, -60, -70, -80, -90, 100])"
    ],
    "sample_312": [
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1,2], [3,4]])",
        "matrixSum(nums = [[1, 2], [2, 1]])",
        "matrixSum(nums = [[1, 2, 3],[4, 5, 6]])",
        "matrixSum(nums = [[0,0],[0,0],[0,0]])",
        "matrixSum(nums = [[1,0,1],[0,1,0]])",
        "matrixSum(nums = [[1,1,1],[1,2,3],[1,2,4]])",
        "matrixSum(nums = [[5,1], [1,3], [3,2]])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "minOperations(a = [1, 2, 5], b = [2, 3, 4])",
        "minOperations(a = [1, 1], b = [1, 2])",
        "minOperations(a = [0, 1, 2], b = [1, 0, 2])",
        "minOperations(a = [3,2,1], b = [2,3,1])",
        "minOperations(a = [1, 1, 1, 2], b = [1, 1, 1, 1])",
        "minOperations(a = [1, 2, 3, 4, 5, 6, 7], b = [4, 3, 2, 1, 7, 6, 5])",
        "minOperations(a = [0, 2], b = [1, 0])",
        "minOperations(a = [2, 3, 1, 5], b = [4, 7, 6, 8])",
        "minOperations(a = [9, 9, 1, 2, 5], b = [9, 8, 7, 6, 7])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 3, 5, 7], nums2 = [2, 4, 6, 8])",
        "minOperations(nums1 = [1, 3, 5, 4, 2], nums2 = [1, 2, 3, 7, 6, 8])",
        "minOperations(nums1 = [4, 1, 2], nums2 = [1, 3, 4, 2])",
        "minOperations(nums1 = [1, 5, 7], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 1, 2], nums2 = [2, 1, 1])",
        "minOperations(nums1 = [3, 4, 5, 6], nums2 = [1, 2, 3, 4])",
        "minOperations(nums1 = [1,2,3,4], nums2 = [2,3,5,6])",
        "minOperations(nums1 = [1, 2, 2, 3], nums2 = [1, 3, 4, 5])",
        "minOperations(nums1 = [0, 0, 1, 2], nums2 = [1, 2, 0, 0])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [-1, -2, -3])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [5, 1, 1, 0])",
        "maximumTripletValue(nums = [-1, -1, -1])",
        "maximumTripletValue(nums = [1,2,3,4])",
        "maximumTripletValue(nums = [-1, 2, 3, 4])",
        "maximumTripletValue(nums = [2, 1, 1, 0])",
        "maximumTripletValue(nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4])",
        "maximumTripletValue(nums = [3, 1, 5, 0])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"0110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"01101\", k = 2)",
        "shortestBeautifulSubstring(s = \"0000000001011100\", k = 4)",
        "shortestBeautifulSubstring(s = \"0110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"110110110\", k = 2)",
        "shortestBeautifulSubstring(s = \"10010101\", k = 4)",
        "shortestBeautifulSubstring(s = \"011001\", k = 2)",
        "shortestBeautifulSubstring(s = \"000111000\", k = 3)",
        "shortestBeautifulSubstring(s = \"11110\", k = 2)",
        "shortestBeautifulSubstring(s = '10010110111011111101010100', k = 5)"
    ],
    "sample_256": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [3, 1, 2, 4])",
        "minimumSum(nums = [1, 3, 2, 4])",
        "minimumSum(nums = [3, 1, 4, 2])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSum(nums = [1, 3, 4, 1, 5])",
        "minimumSum(nums = [5, 1, 3, 4, 7])",
        "minimumSum(nums = [2, 3, 4, 5, 1, 7, 8, 9])",
        "minimumSum(nums = [1, 4, 5, 6])",
        "minimumSum(nums = [2, 3, 7, 8, 10, 12])"
    ],
    "sample_291": [
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"0110\")",
        "minimumSteps(s = \"00\")",
        "minimumSteps(s = \"101010\")",
        "minimumSteps(s = \"0010\")",
        "minimumSteps(s = \"1000\")",
        "minimumSteps(s = \"10110\")",
        "minimumSteps(s = \"100100\")",
        "minimumSteps(s = \"00000010101\")",
        "minimumSteps(s = \"11101010101011\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1, 3, 5], nums2 = [2, 4, 6])",
        "minOperations(nums1 = [1, 3, 5], nums2 = [2, 4, 6])",
        "minOperations(nums1 = [1, 3, 5, 4, 2], nums2 = [1, 2, 3, 7, 6, 4])",
        "minOperations(nums1 = [1, 3, 5, 4, 2], nums2 = [1, 2, 3, 7, 6, 4])",
        "minOperations(nums1 = [1,3,5,4], nums2 = [1,2,3,7])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,3,5,2,4])",
        "minOperations(nums1 = [1,0,2,0], nums2 = [1,2,0,0])",
        "minOperations(nums1 = [0, 1, 4, 7, 9], nums2 = [1, 3, 5, 7, 8])",
        "minOperations(nums1 = [5, 6, 1, 3, 4], nums2 = [1, 2, 3, 4, 5])",
        "minOperations(nums1 = [1,2,2,4,7,3,2,6], nums2 = [1,2,3,4,5,6,7,8])"
    ],
    "sample_277": [
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[0, 1], [1, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[0, 0, 0], [1, 0, 1], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 1],\n                            [0, 1, 0],\n                            [1, 0, 0]])",
        "findChampion(grid = [[0,0,0], [0,0,0], [0,0,1]])",
        "findChampion(grid = [[1, 1, 0, 0], [1, 1, 1, 0], [0, 0, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[0, 0, 1, 0], [0, 0, 0, 0], [1, 0, 0, 1], [0, 0, 0, 0]])",
        "findChampion(grid = [[0, 1, 1, 0], [1, 1, 0, 1], [0, 0, 1, 0], [0, 1, 1, 1]])",
        "findChampion(grid = [[1,0,0,1,0],[0,0,0,0,1],[1,0,1,0,1],[0,0,0,0,1],[0,1,0,0,1]])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 6, m = 4)",
        "differenceOfSums(n = 3, m = 3)",
        "differenceOfSums(n = 3, m = 4)"
    ],
    "sample_292": [
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"10110\")",
        "minimumSteps(s = \"101010\")",
        "minimumSteps(s = \"100110\")",
        "minimumSteps(s = \"1011101\")",
        "minimumSteps(s = \"0011\")",
        "minimumSteps(s = \"0110101\")",
        "minimumSteps(s = \"11100010\")"
    ],
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 7, 4, 9, 2, 5])",
        "alternatingSubarray(nums = [1, 7, 4, 9, 2, 5])",
        "alternatingSubarray(nums = [1, 7, 4, 9, 2, 5])",
        "alternatingSubarray(nums = [1, 2, 2, 3])",
        "alternatingSubarray(nums = [0, 1, 1, 0])",
        "alternatingSubarray(nums = [1, 2, 3, 2, 1])",
        "alternatingSubarray(nums = [2, 2, 2, 2, 2])",
        "alternatingSubarray(nums = [3, 1, 4, 2, 5, 6, 1, 1])"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [2], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [2], moveTo = [2])",
        "relocateMarbles(nums = [1,2], moveFrom = [1,2], moveTo = [2,1])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6], moveFrom = [2], moveTo = [2])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [2, 4], moveTo = [2, 4])",
        "relocateMarbles(nums = [0, 1, 2, 3, 4, 5, 6, 7], moveFrom = [1, 2, 3], moveTo = [7, 4, 5])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 1, 1, 1, 1])",
        "maximumTripletValue(nums = [-2, 0, 2])",
        "maximumTripletValue(nums = [0, 2, 2])",
        "maximumTripletValue(nums = [1, 4, 7, 4])",
        "maximumTripletValue(nums = [-2, -4, -1, -3])",
        "maximumTripletValue(nums = [5, 1, 3, 5, 2])",
        "maximumTripletValue(nums = [1, 4, 0, 5, 4, 2, 3])"
    ],
    "sample_273": [
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [0, 0, 0]])",
        "findChampion(grid = [[0,0,0],[1,1,1]])",
        "findChampion(grid = [[0, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0], [0, 1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0, 1], [1, 0, 1, 0], [0, 1, 0, 1], [1, 0, 1, 0]])",
        "findChampion(grid = [[0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [1, 1, 0, 1, 0], [0, 0, 0, 1, 1]])",
        "findChampion(grid = [[0, 0, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1]])"
    ],
    "sample_267": [
        "minSum(nums1 = [0, 0, 0], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1], nums2 = [0])",
        "minSum(nums1 = [1, 1], nums2 = [1, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [-1, -2, -3])",
        "minSum(nums1 = [1, 1, 1], nums2 = [1, 1])",
        "minSum(nums1 = [1, 1, 1], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [5, 6, 7, 8])",
        "minSum(nums1 = [1, 4, 2], nums2 = [1, 4, 2])",
        "minSum(nums1 = [1, 2], nums2 = [-1, 0, 3, 4])",
        "minSum(nums1 = [-1, -1], nums2 = [-2, 0])"
    ],
    "sample_294": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"010101\")",
        "minimumSteps(s = \"010101\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"1010101010101\")"
    ],
    "sample_274": [
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[0, 0, 1], [0, 1, 0], [1, 0, 0]])",
        "findChampion(grid = [[1, 0, 1], [1, 1, 0], [0, 1, 1]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[-1, 1, 1], [-1, 1, 1], [-1, 1, 1]])",
        "findChampion(grid = [[0,0,1],[1,0,0],[0,1,0]])",
        "findChampion(grid = [[1,1,1,1,1], [1,1,1,1,1], [1,1,1,1,1], [1,1,1,1,1], [1,1,1,1,1]])",
        "findChampion(grid = [[1, 0, 1, 1, 0, 0, 1],\n                            [1, 1, 0, 1, 0, 0, 1],\n                            [1, 0, 1, 1, 0, 0, 1],\n                            [1, 0, 1, 1, 0, 0, 1],\n                            [1, 1, 0, 1, 0, 0, 1],\n                            [1, 0, 1, 1, 0, 0, 1],\n                            [1, 0, 1, 1, 0, 0, 1]])"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8])",
        "minGroupsForValidAssignment(nums = [5,4,3,2,1])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3,4,5,5])",
        "minGroupsForValidAssignment(nums = [1, 0, 1, 0, 1, 2, 2, 2, 1, 2])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minGroupsForValidAssignment(nums = [5,0,5,3])",
        "minGroupsForValidAssignment(nums = [1,2,2,4,3,3,5,5,5,2,1])",
        "minGroupsForValidAssignment(nums = [1,2,1,3,1,4,2,5,3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 11, 20, 12, 42, 3, 2, 1])"
    ],
    "sample_270": [
        "minSum(nums1 = [0, 1], nums2 = [1, 0])",
        "minSum(nums1 = [1, 2, 0], nums2 = [3, 4])",
        "minSum(nums1 = [1, 0], nums2 = [2, 0])",
        "minSum(nums1 = [0, 2, 5], nums2 = [1, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 4, 5])",
        "minSum(nums1 = [0,0], nums2 = [0,0])",
        "minSum(nums1 = [0, 1, 2], nums2 = [0, 0])",
        "minSum(nums1 = [0, 3], nums2 = [2, 2])",
        "minSum(nums1 = [0,0,0], nums2 = [1,1])",
        "minSum(nums1 = [1, 1, 2, 4], nums2 = [1, 1, 1, 1])"
    ],
    "sample_317": [
        "buyChoco(prices = [1,2,3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 2)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 5)",
        "buyChoco(prices = [2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3, 4, 5, 6], money = 5)",
        "buyChoco(prices = [1, 2, 10], money = 4)",
        "buyChoco(prices = [2,5,3], money = 5)",
        "buyChoco(prices = [1, 10, 5], money = 4)",
        "buyChoco(prices = [2,3,4,5,6], money = 6)",
        "buyChoco(prices = [20, 10, 30, 40, 50, 60, 70], money = 40)"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"a\", k = 1)",
        "beautifulSubstrings(s = \"",
        "beautifulSubstrings(s = \"aaaa\", k = 4)",
        "beautifulSubstrings(s = \"aeiouaou\", k = 3)",
        "beautifulSubstrings(s = \"aba\", k = 10)",
        "beautifulSubstrings(s = \"0\", k = 1)",
        "beautifulSubstrings(s = \"nce\", k = 3)"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaaaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"babababab\")",
        "longestSemiRepetitiveSubstring(s = \"aababab\")",
        "longestSemiRepetitiveSubstring(s = \"aabbccc\")",
        "longestSemiRepetitiveSubstring(s = \"ababbbbc\")",
        "longestSemiRepetitiveSubstring(s = \"aababbbb\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbaaccc\")",
        "longestSemiRepetitiveSubstring(s = \"babbbbbbabbbbbbbb\")"
    ],
    "sample_341": [
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 4, y = 3, z = 2)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 1, y = 3, z = 2)",
        "longestString(x = 2, y = 4, z = 3)",
        "longestString(x = 5, y = 2, z = 3)",
        "longestString(x = 1, y = 3, z = 5)",
        "longestString(x = 2, y = 2, z = 3)",
        "longestString(x = 3, y = 4, z = 4)",
        "longestString(x = 3, y = 6, z = 9)"
    ],
    "sample_271": [
        "minSum(nums1 = [1,2,3,4], nums2 = [1,2,3,4])",
        "minSum(nums1 = [1,1,1,1], nums2 = [1,1,1,1])",
        "minSum(nums1 = [1,2,3], nums2 = [0,1])",
        "minSum(nums1 = [1, 1, 0, 1], nums2 = [0, 0, 0, 1])",
        "minSum(nums1 = [1,3,4], nums2 = [5,6,7])",
        "minSum(nums1=[3,1,5,4,2], nums2=[3,6,7,1,8,3])",
        "minSum(nums1 = [1, 3, 0, 4, 2], nums2 = [0, 1, 2, 3, 4])",
        "minSum(nums1 = [1,2,0,4,5,0,7], nums2 = [9,8,3,0,6,7,8])",
        "minSum(nums1=[1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1], nums2=[1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1])",
        "minSum(nums1 = [1,2,3,0,10,0,20,0,0,1,0,0], nums2 = [1,2,3,0,10,0,20,0,0,1,0,0])"
    ],
    "sample_340": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 3, y = 5, z = 2)",
        "longestString(x = 6, y = 4, z = 2)",
        "longestString(x = 3, y = 3, z = 4)",
        "longestString(x = 5, y = 5, z = 2)",
        "longestString(x = 2, y = 5, z = 1)",
        "longestString(x = 6, y = 2, z = 2)"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"110110110\", k = 5)",
        "shortestBeautifulSubstring(s = '10101', k = 5)",
        "shortestBeautifulSubstring(s = '1111', k = 4)",
        "shortestBeautifulSubstring(s = \"110100011\", k = 2)",
        "shortestBeautifulSubstring(s = \"11010\", k = 1)",
        "shortestBeautifulSubstring(s = \"0011001\", k = 2)",
        "shortestBeautifulSubstring(s = \"0000000001\", k = 0)",
        "shortestBeautifulSubstring(s = \"1100101\", k = 3)",
        "shortestBeautifulSubstring(s = \"1011010101\", k = 11)",
        "shortestBeautifulSubstring(s = \"01001010100110000101110111011101111\", k = 5)"
    ],
    "sample_324": [
        "isFascinating(n = 1)",
        "isFascinating(n = 10)",
        "isFascinating(n = 21)",
        "isFascinating(n = 12)",
        "isFascinating(n = 12)",
        "isFascinating(n = 12)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 15)",
        "isFascinating(n = 14)",
        "isFascinating(n = 14)"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [5, 1, 3, 4, 2])",
        "minimumSum(nums = [5, 6, 2, 7, 4])",
        "minimumSum(nums = [1, 2, 4, 5, 7])",
        "minimumSum(nums = [2, 1, 3, 4, 6])",
        "minimumSum(nums = [2, 3, 4, 6])",
        "minimumSum(nums = [-40, -10, -10, -20, 0, 10])",
        "minimumSum(nums = [5, 10, 15, 3, 7, 9, 18])"
    ],
    "sample_268": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1,1,1,1], nums2 = [0,0,0,0])",
        "minSum(nums1 = [0, 0, 1], nums2 = [1, 2, 3])",
        "minSum(nums1 = [0, 1, 0, 1, 0], nums2 = [1, 0, 1, 0, 1])",
        "minSum(nums1 = [1, 2, 0], nums2 = [2, 2, 0])",
        "minSum(nums1 = [0, 1, 2, 3], nums2 = [3, 2, 1, 0])",
        "minSum(nums1 = [1,1], nums2 = [1,1,1])",
        "minSum(nums1 = [1,2,0,0], nums2 = [3,4])",
        "minSum(nums1 = [3, 2, 0, 0, 0], nums2 = [0, 0, 0, 3, 1])",
        "minSum(nums1 = [1, 2, 0, 0, 0, 4], nums2 = [3, 1, 0, 0, 0, 4])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"a\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"na\", s3 = \"na\")",
        "findMinimumOperations(s1=\"abc\", s2=\"def\", s3=\"ghi\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"c\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"ananas\", s3 = \"nana\")",
        "findMinimumOperations(s1 = \"abcdef\", s2 = \"uvwxyz\", s3 = \"rstuvwxyz\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"xxyyzz\", s3 = \"xyyyzzz\")",
        "findMinimumOperations(s1 = \"glowing\", s2 = \"golding\", s3 = \"golding\")"
    ],
    "sample_321": [
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [-4, 3, -9, 0, 4, 1])",
        "maxStrength(nums = [2, 3, -1, 4])",
        "maxStrength(nums = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1])",
        "maxStrength(nums = [-1, -1, 0, -1, 3, -1])",
        "maxStrength(nums = [-1, -2, 0, -3, 1, 2, 3, -4])",
        "maxStrength(nums = [-10,-2,-3,1,3,5])",
        "maxStrength(nums = [2, 2, 1, -2, -3, 2, 1])",
        "maxStrength(nums = [-2, -5, 11, 11, -2, -5])"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 3], moveTo = [3, 1])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 2, 3], moveTo = [2, 3, 1])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6], moveFrom = [1, 2], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [0,1,2,3], moveFrom = [1,2], moveTo = [3,0])",
        "relocateMarbles(nums = [1,2,2,3,4], moveFrom = [1], moveTo = [3])",
        "relocateMarbles(nums = [2, 4, 3, 6], moveFrom = [3, 6], moveTo = [2, 3])"
    ],
    "sample_357": [
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [8])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 8], moveTo = [6, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [8], moveTo = [5])",
        "relocateMarbles(nums = [8, 5, 6, 9], moveFrom = [8, 6], moveTo = [5, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9, 10, 11], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5,6,7,8,9], moveFrom = [8], moveTo = [9])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9, 10], moveFrom = [7, 8], moveTo = [6, 8])",
        "relocateMarbles(nums = [5, 4, 6, 8, 9], moveFrom = [8, 9], moveTo = [6, 7])",
        "relocateMarbles(nums = [5, 5, 7, 8, 9], moveFrom = [8, 5], moveTo = [8, 7])",
        "relocateMarbles(nums = [2, 5, 6, 8, 9], moveFrom = [8], moveTo = [6])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 3, 2, 5, 4], money = 7)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 5)",
        "buyChoco(prices = [2, 4, 6, 8, 10], money = 10)",
        "buyChoco(prices = [1, 2, 4], money = 6)",
        "buyChoco(prices = [10, 2, 5, 1], money = 20)",
        "buyChoco(prices = [1, 1, 1, 1, 1, 1], money = 5)",
        "buyChoco(prices = [20, 10], money = 50)",
        "buyChoco(prices = [1, 7, 4, 9], money = 15)",
        "buyChoco(prices = [1,2,5,10,15], money = 20)"
    ],
    "sample_308": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[5]])",
        "matrixSum(nums = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15], [16,17,18,19,20]])",
        "matrixSum(nums = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])",
        "matrixSum(nums = [[1, 1], [1, 2], [1, 1]])",
        "matrixSum(nums = [[1, 4, 8], [2, 5, 10], [3, 6, 12]])",
        "matrixSum(nums = [[2, 4, 6], [1, 1, 1], [3, 3, 3]])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2], money = 5)",
        "buyChoco(prices = [1, 2], money = 4)",
        "buyChoco(prices = [3, 2, 1], money = 5)",
        "buyChoco(prices = [1, 3], money = 3)",
        "buyChoco(prices = [3, 2], money = 4)",
        "buyChoco(prices = [10, 20], money = 50)",
        "buyChoco(prices = [10, 2, 5], money = 10)",
        "buyChoco(prices = [1, 2, 5], money = 3)",
        "buyChoco(prices = [2, 4, 6], money = 6)",
        "buyChoco(prices = [5, 6, 8], money = 20)"
    ],
    "sample_259": [
        "minimumSum(nums = [3, 1, 2, 4])",
        "minimumSum(nums = [1,1,1])",
        "minimumSum(nums = [1, 2, 3, 4, 3, 2, 1])",
        "minimumSum(nums = [1,2,3,2,1])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSum(nums = [3, 2, 1, 4])",
        "minimumSum(nums = [3,2,1,2])",
        "minimumSum(nums = [5, 1, 3, 4, 2])",
        "minimumSum(nums = [-3, -2, -1, 0, 1, 2, 3])",
        "minimumSum(nums = [4,1,2,3,5])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 7, 4, 9, 2, 5])",
        "alternatingSubarray(nums = [1, 7, 4, 9, 2, 5])",
        "alternatingSubarray(nums = [-1, 2, -3, 4, -5])",
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [8, 2, 4, 7])",
        "alternatingSubarray(nums = [-1, 2, -3, 4, -5, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 10, 20, 30, 40])",
        "alternatingSubarray(nums = [3, 2, 4, 6, 2, 3])",
        "alternatingSubarray(nums = [2, 3, 2, 2, 4, 3, 2, 3])",
        "alternatingSubarray(nums = [-7, -1, 3, -2, -2, -1, 2, 0, -7])"
    ],
    "sample_311": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[0]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1,2,3],[1,2,3],[1,2,3]])",
        "matrixSum(nums = [[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3], [4, 4, 4, 4]])",
        "matrixSum(nums = [[1,2,3],[4,5,6]])",
        "matrixSum(nums = [[0, 0, 0, 0], [1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3]])",
        "matrixSum(nums = [[1,0,0,0],[0,2,0,0],[0,0,3,0],[0,0,0,4]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 10], money = 10)",
        "buyChoco(a = [10, 5], money = 20)",
        "buyChoco(a = [4, 6], money = 10)",
        "buyChoco(a = [200, 100], money = 300)",
        "buyChoco(a = [100, 100], money = 150)",
        "buyChoco(a = [50, 50, 100], money = 50)",
        "buyChoco(a = [2, 10], money = 30)",
        "buyChoco(a = [2, 100], money = 1)",
        "buyChoco(a = [4, 1, 3], money = 3)",
        "buyChoco(a = [20, 10, 3], money = 60)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [1, 2, 3])",
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [2, 3, 1, 4])",
        "minGroupsForValidAssignment(nums = [1,2,3,3,3,4,5,6])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3,3,4,4,5,5,6])",
        "minGroupsForValidAssignment(nums = [5, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2",
        "minGroupsForValidAssignment(nums = [6, 10, 15, 6, 10, 15])"
    ],
    "sample_276": [
        "findChampion(grid = [[1, 0, 0], [0, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1]])",
        "findChampion(grid = [[0, 0, 0, 1], [1, 0, 0, 0], [0, 1, 1, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0, 0], [0, 0, 1, 0], [1, 0, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[1, 0, 1],\n                            [0, 1, 0],\n                            [1, 0, 1]])",
        "findChampion(grid = [[0, 1, 1, 0], [0, 1, 1, 1], [1, 1, 1, 1], [0, 0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 1], [1, 1, 0]])",
        "findChampion(grid = [[1, 0, 0, 0, 0],\n                             [0, 0, 0, 0, 1],\n                             [0, 0, 1, 0, 0],\n                             [0, 0, 0, 0, 0],\n                             [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0, 1], [0, 0, 0, 0], [0, 1, 1, 1], [1, 0, 0, 0]])"
    ],
    "sample_320": [
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 3, 5, 7, 9])",
        "maxStrength(nums = [1, 3, 5, 7, 9])",
        "maxStrength(nums = [1, 3, 5, 7, 9])",
        "maxStrength(nums = [3, 5, 6, 7, 8])",
        "maxStrength(nums = [2, 3, 5, 7])",
        "maxStrength(nums = [1, 2, 3, 4, 5, 6])",
        "maxStrength(nums = [2, 3, 5, 1, 6, 4])",
        "maxStrength(nums = [3, 5, 7, 2])",
        "maxStrength(nums = [3, 7, 4, 6, 5])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"zyx\", \"wvu\", \"tsr\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"cute\", \"dog\"])",
        "minimizeConcatenatedLength(words = [\"flower\", \"flow\", \"flight\"])",
        "minimizeConcatenatedLength(words = [\"hello\", \"world\", \"leet\", \"code\"])",
        "minimizeConcatenatedLength(words = [\"abcdef\", \"f\", \"g\"])",
        "minimizeConcatenatedLength(words = [\"h\", \"el\", \"lo\", \"l\"])",
        "minimizeConcatenatedLength(words = [\"hello\", \"world\", \"python\", \"makes\"])",
        "minimizeConcatenatedLength(words = [\"apple\", \"orange\", \"ball\", \"can\"])",
        "minimizeConcatenatedLength(words = [\"horse\", \"horses\", \"horse\", \"hello\"])",
        "minimizeConcatenatedLength(words = [\"puppy\", \"cat\", \"python\", \"pound\", \"hacker\"])"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"bab\", s2 = \"ba\", s3 = \"bab\")",
        "findMinimumOperations(s1 = \"111\", s2 = \"222\", s3 = \"333\")",
        "findMinimumOperations(s1 = \"000\", s2 = \"111\", s3 = \"111\")",
        "findMinimumOperations(s1 = \"abbbb\", s2 = \"abbbb\", s3 = \"abbbb\")",
        "findMinimumOperations(s1 = \"aaaaaaaaaaaaaaaaaa\", s2 = \"aaaaaaaaaaaaaaaaaa\", s3 = \"aaaaaaaaaaaaaaaaaa\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"aab\", s3 = \"aba\")",
        "findMinimumOperations(s1 = \"1011101\", s2 = \"1011001\", s3 = \"10110001\")",
        "findMinimumOperations(s1 = \"eat\", s2 = \"hate\", s3 = \"hate\")",
        "findMinimumOperations(s1 = \"zhaoyun\", s2 = \"zhaoyun\", s3 = \"zhaoyun\")",
        "findMinimumOperations(s1 = \"mruaa\", s2 = \"honga\", s3 = \"mruaa\")"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 7, 4, 9, 2, 5])",
        "alternatingSubarray(nums = [1, 7, 4, 9, 2, 5])",
        "alternatingSubarray(nums = [1, 7, 4, 9, 2, 5])",
        "alternatingSubarray(nums = [1, 7, 4, 9, 2, 5])",
        "alternatingSubarray(nums = [1, 7, 4, 9, 2, 5])",
        "alternatingSubarray(nums = [0, 1, 2, 3, 4])",
        "alternatingSubarray(nums = [-1, 2, -3, 4, -5, 6])",
        "alternatingSubarray(nums = [3, 5, 1, 2, 4])",
        "alternatingSubarray(nums = [-2, -4, -6, -2, -4, -10])",
        "alternatingSubarray(nums = [-17, -7, 3, 5, 2, -4, -15, 3, -11, 2, -13, -17])"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 1], [1, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0], [0, 1, 0, 0]])",
        "findChampion(grid = [[1, 2, 3], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 1, 0], [0, 1, 1, 0], [1, 0, 0, 1], [0, 0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0, 0],\n                            [0, 0, 1, 1],\n                            [1, 0, 0, 0],\n                            [0, 1, 0, 0]])",
        "findChampion(grid = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 0, 0, 0,",
        "findChampion(grid = [[1, 1, 0, 0],\n                             [0, 0, 0, 1],\n                             [1, 0, 0, 1],\n                             [0, 1, 1, 1]])"
    ],
    "sample_304": [
        "countSeniors(details = [\"name1, age1, gender1, id1\", \"name2, 70, gender2, id2\", \"name3, 60, gender3, id3\"])",
        "countSeniors(details = [\"John Doe, 30, AB+\", \"Jane Doe, 67, AB-\"])",
        "countSeniors(details = [\"12345678910112019\", \"912345678910112020\", \"012345678910112019\", \"12345678910112018\"])",
        "countSeniors(details = [\"Nelson, Mandela, 1918-08-18\", \"Yasser, Arafat, 1929-03-02\", \"Mandela, Nelson, 1918-08-18\"])",
        "countSeniors(details = [\"Mary Smith,78\",\"Ed Jones,53\",\"Lucy Smith,91\"])",
        "countSeniors(details = [\"Tom 20 20\", \"Jerry 15 10\", \"Alice 23 10\"])",
        "countSeniors(details = [\"16449010334\", \"16249010455\", \"19249011211\"])",
        "countSeniors(details = [\"A, John, Smith, 100, 23, 12, 1953\", \"A, B, Smith, 45, 76, 34, 1953\"])",
        "countSeniors(details = [\"[JOHN, SMITH, M, 1990-02-24, 67067, 10000.00]\", \"[SALLY, SMITH, F, 2005-01-12, 66777, 20000.00]\", \"[PATRICIA, WILLIAMS, F, 1980-03-02, 42114, 10000.00]\", \"[LINDA, WILLIAMS, F, 1985-11-23, 37272, 20000.00]\", \"[BARBARA, JONES, F, 1970-05-23, 43333, 10000.00]\"])",
        "countSeniors(details = [\"64765468\", \"30314463\", \"64046895\", \"45113344\", \"32620327\", \"68055565\"])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"ababab\", k = 3)",
        "beautifulSubstrings(s = \"abracadabra\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"abcdefg\", k = 3)",
        "beautifulSubstrings(s = \"subsequences\", k = 5)",
        "beautifulSubstrings(s = \"cbaebabacd\", k = 10)",
        "beautifulSubstrings(s = \"abeee\", k = 3)",
        "beautifulSubstrings(s = \"bbaaacbd\", k = 3)",
        "beautifulSubstrings(s = \"aaeiiouuuoo\", k = 3)",
        "beautifulSubstrings(s = \"fcvdg\", k = 2)"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"110110110\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110001\", k = 2)",
        "shortestBeautifulSubstring(s = \"01100\", k = 2)",
        "shortestBeautifulSubstring(s = '11', k = 2)",
        "shortestBeautifulSubstring(s = \"1111111111\", k = 1)",
        "shortestBeautifulSubstring(s = \"100101\", k = 2)",
        "shortestBeautifulSubstring(s = \"101111\", k = 2)",
        "shortestBeautifulSubstring(s = \"00111\", k = 1)",
        "shortestBeautifulSubstring(s = \"1101011101\", k = 2)",
        "shortestBeautifulSubstring(s = \"0011011011\", k = 2)"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"leet\", \"code\"])",
        "minimizeConcatenatedLength(words = [\"banana\"])",
        "minimizeConcatenatedLength(words = [\"dog\",\"cat\",\"god\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"a\", \"a\"])",
        "minimizeConcatenatedLength(words = [\"ap\", \"p\"])",
        "minimizeConcatenatedLength(words = [\"quiz\", \"game\"])",
        "minimizeConcatenatedLength(words = [\"cat\",\"dog\",\"race\"])",
        "minimizeConcatenatedLength(words = [\"cats\", \"catsdogcats\", \"dog\", \"dogcatsdog\", \"dog\"])",
        "minimizeConcatenatedLength(words = [\"bac\", \"bbb\", \"eat\", \"and\", \"pizza\"])"
    ],
    "sample_327": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 12)",
        "isFascinating(n = 12)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 36)",
        "isFascinating(n = 246)",
        "isFascinating(n = 235)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1], [2], [3]])",
        "matrixSum(nums = [[1, 2, 3], [1, 2, 3], [1, 2, 3]])",
        "matrixSum(nums = [[1,1,1],[1,1,1],[1,1,1]])",
        "matrixSum(nums = [[1, 2, 3], [2, 3], [3, 4]])",
        "matrixSum(nums = [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]])",
        "matrixSum(nums = [[0,0], [0,1], [1,0], [1,1]])",
        "matrixSum(nums = [[0, 1, 3], [2, 4], [5, 6]])",
        "matrixSum(nums = [[3, 1, 4], [1, 2, 3], [5, 9, 2], [2, 6, 5]])",
        "matrixSum(nums = [[4,4,5,6,6,7,7], [2,4,6,8,9,10,11]])"
    ],
    "sample_326": [
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 19)",
        "isFascinating(n = 19)",
        "isFascinating(n = 19)",
        "isFascinating(n = 5)",
        "isFascinating(n = 8)",
        "isFascinating(n = 198)"
    ],
    "sample_275": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 1, 0], [0, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 0], [1, 1]])",
        "findChampion(grid = [[1, 1, 0, 0], [0, 1, 0, 0], [1, 1, 1, 1], [0, 0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0,1], [1,0]])",
        "findChampion(grid = [[0, 1, 1], [0, 0, 1], [0, 1, 1]])",
        "findChampion(grid = [[0,1,0], [0,0,0], [1,0,0]])",
        "findChampion(grid = [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 0, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0, 0],\n                             [0, 0, 0, 1],\n                             [0, 0, 1, 0],\n                             [0, 0, 0, 0],\n                             [0, 0, 0, 0],\n                             [1, 0, 0, 0]])"
    ],
    "sample_260": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 3, 5, 2, 4, 6])",
        "minimumSum(nums = [1, 7, 4, 3, 2, 9])",
        "minimumSum(nums = [3, 5, 4, 2, 6, 7])",
        "minimumSum(nums = [3, 6, 7, 1, 2, 9])",
        "minimumSum(nums = [1, 10, 4, 3, 2])",
        "minimumSum(nums = [3, 5, 7, 8, 6, 2])",
        "minimumSum(nums = [3, 7, 4, 6, 5, 8, 2, 1, 9])",
        "minimumSum(nums = [1, 2, 3, 4, 1, 2, 3, 4, 1])",
        "minimumSum(nums = [3, 2, 5, 7, 6, 4, 8, 1])"
    ],
    "sample_322": [
        "isFascinating(n = 3)",
        "isFascinating(n = 10)",
        "isFascinating(n = 10)",
        "isFascinating(n = 6)",
        "isFascinating(n = 123)",
        "isFascinating(n = 21)",
        "isFascinating(n = 15)",
        "isFascinating(n = 19)",
        "isFascinating(n = 108)",
        "isFascinating(123456789)"
    ],
    "sample_248": [
        "minOperations(s1 = \"01\", s2 = \"10\", x = 1)",
        "minOperations(s1 = \"00110\", s2 = \"00111\", x = 2)",
        "minOperations(s1 = \"00110\", s2 = \"00111\", x = 1)",
        "minOperations(s1 = \"10110\", s2 = \"00111\", x = 2)",
        "minOperations(s1 = \"1001\", s2 = \"1001\", x = 2)",
        "minOperations(s1 = \"10011\", s2 = \"10101\", x = 2)",
        "minOperations(s1 = \"1111\", s2 = \"0111\", x = 1)",
        "minOperations(s1 = \"1111111111111\", s2 = \"0000000000000\", x = 4)",
        "minOperations(s1 = \"10010010\", s2 = \"00111001\", x = 1)",
        "minOperations(s1 = \"1010101111011100\", s2 = \"1011110011100101\", x = 3)"
    ],
    "sample_342": [
        "longestString(x = 2, y = 3, z = 2)",
        "longestString(x = 6, y = 4, z = 2)",
        "longestString(x = 4, y = 6, z = 2)",
        "longestString(x = 3, y = 2, z = 2)",
        "longestString(x = 3, y = 4, z = 3)",
        "longestString(x = 6, y = 4, z = 3)",
        "longestString(x = 5, y = 3, z = 2)",
        "longestString(x = 1, y = 4, z = 5)",
        "longestString(x = 4, y = 5, z = 10)",
        "longestString(x = 3, y = 5, z = 10)"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [6, 8], moveTo = [7, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 8], moveTo = [6, 7])",
        "relocateMarbles(nums = [5, 8, 9], moveFrom = [8], moveTo = [6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [5], moveTo = [9])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [2, 4], moveTo = [4, 2])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [4], moveTo = [8])",
        "relocateMarbles(nums = [1, 5, 8, 9], moveFrom = [2, 3], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 5, 6, 8, 9], moveFrom = [6, 5, 8], moveTo = [6, 5, 9])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8], moveFrom = [2, 6], moveTo = [1, 7])",
        "relocateMarbles(nums = [4, 2, 9, 8, 5], moveFrom = [0, 4], moveTo = [1, 2])"
    ],
    "sample_306": [
        "countSeniors(details = [\"0000010010101990\", \"0000020010101190\", \"0000030010101200\"])",
        "countSeniors(details = [\"12345678901267\",\"12345678901278\",\"12345678901276\"])",
        "countSeniors(details = [\"Aayushi Sen Sharma: 25: 70: \", \"Aayushi Sen Sharma: 25: 70: \", \"Aayushi Sen Sharma: 80: 70: \"])",
        "countSeniors(details = [\"Colin,24,M\", \"Lisa,23,F\", \"Linda,61,F\", \"Bill,29,M\"])",
        "countSeniors(details = [\"23012011\", \"04052018\", \"12012018\", \"02062010\"])",
        "countSeniors(details = [\"A:20:30000:4000\", \"B:21:20000:5000\", \"C:70:10000:2000\", \"D:73:10000:1000\"])",
        "countSeniors(details = [\"Dr. John C. Smith, Male, 75, 1900-01-01\", \"Dr. Jane Doe, Female, 69, 1955-03-15\"])",
        "countSeniors(details = [\"Matthew Robson is 18 years old.\", \"Elsie Bennett is 62 years old.\", \"Grace Miller is 26 years old.\", \"Dylan Miller is 37 years old.\"])",
        "countSeniors(details = [\"Harmony, Frank, 42\", \"Chris, Hutchins, 33\", \"Tessa, Peyton, 68\", \"Sonny, Cohen, 65\", \"Dianne, Lara, 51\", \"Susan, Bates, 29\", \"Alyssa, McKenzie, 21\"])",
        "countSeniors(details = [\"11000000100Jenny Green1961\", \"11000000200Marvin Jones1948\", \"11000000300Warren Bell1962\", \"11000000400Brett Wade1983\", \"11000000500Shaun Stone1976\", \"11000000600Shaun Fraser1993\", \"11000000700John Clarke1986\", \"11000000800Simon West1996\", \"11000000900Brett Wade1983\", \"11000001000Shaun Stone1976\", \"11000001100Shaun Fraser1993\", \"11000001200John Clarke1986\", \"11000001300Simon West1996\"])"
    ],
    "sample_303": [
        "countSeniors(details = [\"age 32 yr\", \"age 61 yr\", \"age 57 yr\"])",
        "countSeniors(details = [\"Bob, 45, Red\", \"Pete, 72, Green\"])",
        "countSeniors(details = [\"John 30\", \"Rita 28\", \"Bill 20\", \"Sue 40\", \"Mary 35\"])",
        "countSeniors(details = [\"Alice, 37\", \"Bob, 38\", \"Charlie, 42\", \"Donald, 60\", \"Edith, 61\", \"Frank, 30\"])",
        "countSeniors(details = [\"1980-12-12-1990-12-12-2011-12-12\", \"2000-12-12-1999-12-12-2010-12-12\"])",
        "countSeniors(details = [\"0001|Bill Smith|1965\", \"0002|Jack Jones|1920\", \"0003|Bob Taylor|1925\"])",
        "countSeniors(details = [\"Jan 41\", \"Apr 18\", \"March 68\", \"September 18\", \"November 99\"])",
        "countSeniors(details = [\"Elijah Fisher, 26\", \"Brayden Fisher, 26\", \"Carl Fisher, 68\", \"Wyatt Fisher, 72\"])",
        "countSeniors(details = [\"John Smith;20\", \"Joe Blogs;20\", \"Jill Jillerson;70\", \"Terry Anderson;76\"])",
        "countSeniors(details=[\"Sarah,25\", \"Ali,15\", \"David,65\", \"Hazel,29\", \"Pedro,61\"])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [5, 7], moveTo = [8, 6])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [6], moveTo = [8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6], moveFrom = [1, 2], moveTo = [8, 9])",
        "relocateMarbles(\n    nums = [5, 6, 8, 9],\n    moveFrom = [8],\n    moveTo = [6]\n)",
        "relocateMarbles(nums = [4, 8, 5, 9], moveFrom = [5, 6], moveTo = [5, 6])",
        "relocateMarbles(nums = [4, 5, 6, 7], moveFrom = [6], moveTo = [5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8], moveFrom = [7, 9], moveTo = [8, 9])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 7, 3], moveTo = [5, 4, 6])",
        "relocateMarbles(nums = [5, 7, 8, 10, 11], moveFrom = [5, 8, 10], moveTo = [8, 8, 10])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"a\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"abca\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"asdf\", s2 = \"asdf\", s3 = \"asdf\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghk\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abc\", s3 = \"abd\")",
        "findMinimumOperations(s1=\"abac\", s2=\"abc\", s3=\"abac\")",
        "findMinimumOperations(s1 = \"sad\", s2 = \"mom\", s3 = \"glo\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcd\", s3 = \"cd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"baba\", s2 = \"baba\", s3 = \"baba\")",
        "findMinimumOperations(s1 = \"1234567\", s2 = \"1234\", s3 = \"12345\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcc\", s3 = \"abcc\")",
        "findMinimumOperations(s1 = \"abba\", s2 = \"abb\", s3 = \"ba\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"cd\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"xyz\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"AACCC\", s2 = \"AAACC\", s3 = \"AACCC\")"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4])",
        "semiOrderedPermutation(nums = [4, 1, 3, 2])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])",
        "semiOrderedPermutation(nums = [1, 5, 2, 4, 3])",
        "semiOrderedPermutation(nums = [2, 5, 3, 1, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5, 6])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "continuousSubarrays(a = [1,2,1,2,1,2,1,2,1,2,1,2])",
        "continuousSubarrays(a = [1, 1, 2, 1, 1, 1])",
        "continuousSubarrays(a = [1, 2, 3, 2, 3, 1])",
        "continuousSubarrays(a = [0, 1, 1, 1, 0, 0, 1, 1])",
        "continuousSubarrays(a = [2, 2, 2, 4, 2, 2, 2])",
        "continuousSubarrays(a = [1,1,2,3,4,4,4,4,5,5,6,7,8,9,9,9,9,9])",
        "continuousSubarrays(a = [-1, 2, 0, -1, 2, 2, 2, -1, 3, 4, 3])",
        "continuousSubarrays(a = [1, 2, 1, 3, 4, 3, 2, 3, 5, 4, 2, 4, 1, 2, 3, 5, 1])",
        "continuousSubarrays(a = [1, 1, 2, 1, 3, 1, 3, 4, 2, 1, 4, 2, 5, 2, 3, 5, 6, 3, 4, 2, 5, 3, 2, 1, 1, 1])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [1, 2, 3, 4])",
        "continuousSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "continuousSubarrays(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays(nums = [1, 2, 3, 1, 4])",
        "continuousSubarrays(nums = [1,2,3,3,4,5])",
        "continuousSubarrays(nums = [1, 2, 3, 3, 4, 6])",
        "continuousSubarrays(nums = [1,2,1,2,1,2,1,2])",
        "continuousSubarrays(nums = [1, 2, 4, 1, 1, 2, 3])",
        "continuousSubarrays(nums = [2, 1, 2, 4, 3, 3, 3, 4, 3])",
        "continuousSubarrays(nums = [5, 5, 4, 3, 2, 1, 3, 4, 5, 5, 3, 2])"
    ],
    "sample_8": [
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 0]])",
        "colorTheArray(n = 1, queries = [\n    [0, 0]\n])",
        "colorTheArray(n = 1, queries = [[0, 1], [1, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 2], [0, 1], [1, 2], [2, 1], [0, 2], [1, 0], [2, 0]])",
        "colorTheArray(n = 5, queries = [[1, 3], [1, 2], [3, 4], [2, 3], [2, 4], [3, 5], [4, 5], [2, 1], [1, 5]])"
    ],
    "sample_97": [
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [100, -23, -23, 404, 100, 23, 23, 23, 3, 404], target = 100)",
        "maximumJumps(nums = [10,13,12,14,15], target = 2)",
        "maximumJumps(nums = [7,6,9,6,9,6,6,9], target = 1)",
        "maximumJumps(nums = [-1, -1, 1], target = 1)",
        "maximumJumps(nums = [11, -2, 0, 20], target = 10)",
        "maximumJumps(nums = [1,3,1,2,1,2], target = 2)",
        "maximumJumps(nums = [10,3,5,4,2,-10], target = 5)",
        "maximumJumps(nums = [6,1,9,5,4,2,7,0,8,2,1,6], target = 2)",
        "maximumJumps(nums = [10, 11, 1, -1, -10, 100], target = 100)"
    ],
    "sample_22": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"AABCD\")",
        "minLength(s = \"AABCD\")",
        "minLength(s = \"AABCD\")",
        "minLength(s = \"ABACD\")",
        "minLength(s = \"CDABD\")",
        "minLength(s = \"ABABABAB\")",
        "minLength(s = \"ABABACD\")",
        "minLength(s = \"CDABDAC\")",
        "minLength(s = \"AABCCAB\")"
    ],
    "sample_7": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[1, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1], [0, 0]])",
        "colorTheArray(n = 2, queries = [[0,1],[1,0]])",
        "colorTheArray(n = 2, queries = [[1, 2], [1, 1]])",
        "colorTheArray(n = 2, queries = [[0,0], [1,0]])",
        "colorTheArray(n = 1, queries = [[1, 0], [1, 0]])",
        "colorTheArray(n = 1, queries = [[1, 1], [1, 1]])",
        "colorTheArray(n = 4, queries = [[0, 0], [2, 1], [3, 2], [1, 3], [0, 4], [1, 2], [1, 0], [3, 4], [2, 0], [1, 4], [2, 2]])"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [2, 3], [5, 4], [5, 5]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [2, 3], [4, 4], [4, 5]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [1, 3], [1, 4], [2, 3]])",
        "colorTheArray(n = 5, queries = [[0, 1], [0, 2], [1, 2], [1, 3], [2, 4]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,2],[2,3],[4,4],[4,1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [2, 1], [5, 1], [4, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [0, 2], [2, 3], [4, 2], [3, 1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [1, 3], [0, 4], [0, 1], [2, 2]])",
        "colorTheArray(n = 5, queries = [[-1, 1], [0, 1], [1, 2], [2, 3], [2, 3]])",
        "colorTheArray(n = 5, queries = [[-1, 5], [0, 1], [1, 2], [2, 6], [3, 1], [4, 3]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [3,1,2])",
        "semiOrderedPermutation(nums = [4,1,3,2])",
        "semiOrderedPermutation(nums = [4,1,3,2])",
        "semiOrderedPermutation(nums = [1,4,3,2])",
        "semiOrderedPermutation(nums = [2,5,1,3,4])",
        "semiOrderedPermutation(nums = [3,2,1])",
        "semiOrderedPermutation(nums = [3, 2, 1])",
        "semiOrderedPermutation(nums = [1,2,5,4,3])",
        "semiOrderedPermutation(nums = [1,2,4,3,5])",
        "semiOrderedPermutation(nums = [5,2,6,1,3,4])"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [3, 1, 2, 4, 3], threshold = 1)",
        "longestAlternatingSubarray(nums = [12, 24, 8, 32], threshold = 16)",
        "longestAlternatingSubarray(nums = [0, 1, 2, 3, 4, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [0, 1, 0, 1, 0], threshold = 0)",
        "longestAlternatingSubarray(nums = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], threshold = 3)",
        "longestAlternatingSubarray(nums = [12, 345, 2, 2, 4, 12, 98, 21], threshold = 100)",
        "longestAlternatingSubarray(nums = [12, 34, 45, 56, 34, 12, 60, 10], threshold = 13)",
        "longestAlternatingSubarray(nums = [2, 3, 5, 1, 2, 4, 2, 2, 5, 2, 2, 3, 6, 3], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 1, 2, 3, 4, 5, 2, 3, 1, 3, 2, 4, 2, 2, 1, 1, 3, 2, 3, 3, 4, 2, 1], threshold = 2)"
    ],
    "sample_33": [
        "removeTrailingZeros(num = '512300001')",
        "removeTrailingZeros(num = '5123000001')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = \"5123000001\")",
        "removeTrailingZeros(num = \"5123000001\")",
        "removeTrailingZeros(num = \"51230000001\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = \"51230100000\")",
        "removeTrailingZeros(num = \"5000100\")"
    ],
    "sample_50": [
        "smallestString(s = \"abaab\")",
        "smallestString(s = \"abab\")",
        "smallestString(s = \"abab\")",
        "smallestString(s = \"abab\")",
        "smallestString(s = 'baab')",
        "smallestString(s = \"baba\")",
        "smallestString(s = \"baaaab\")",
        "smallestString(s = 'zaaaz')",
        "smallestString(s = \"abcba\")",
        "smallestString(s = 'abac')"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [-1, 0, 1, 2, 3])",
        "distinctDifferenceArray(nums = [5, 7, 3, 9, 4])",
        "distinctDifferenceArray(nums = [1, 5, 7, 8, 5, 3, 4, 2])",
        "distinctDifferenceArray(nums = [1, 1, 3, 3, 5])",
        "distinctDifferenceArray(nums = [1, 5, 7, 8, 5, 3, 4, 8])",
        "distinctDifferenceArray(nums = [1, 1, 2, 3, 3, 4])",
        "distinctDifferenceArray(nums = [-1, -1, 1, 1, 1])",
        "distinctDifferenceArray(nums = [3, 4, 6, 5, 2])"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 3)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 3)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 20)"
    ],
    "sample_118": [
        "minimumIndex(nums = [1, 3, 5])",
        "minimumIndex(nums = [3, 4, 3, 2, 3, -1, 3, 3])",
        "minimumIndex(nums = [3, 4, 3, 2, 3, 5, 5, 6])",
        "minimumIndex(nums = [4, 3, 2, 1, 0])",
        "minimumIndex(nums = [4, 1, 3, 2])",
        "minimumIndex(nums = [1, 1, 0, 1, 1, 1, 1])",
        "minimumIndex(nums = [1, 1, 3, 3, 1, 1])",
        "minimumIndex(nums = [-4, -4, 3, 2])",
        "minimumIndex(nums = [8, 6, 4, 1, 3, 2, 5, 7])",
        "minimumIndex(nums = [-3, 4, -4, 3, 4])"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [123, 456])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "countBeautifulPairs(nums = [2, 4, 3, 6])",
        "countBeautifulPairs(nums = [2, 3, 5])",
        "countBeautifulPairs(nums = [2, 2, 2, 2])",
        "countBeautifulPairs(nums = [10, 20, 5])",
        "countBeautifulPairs(nums = [10, 2, 1000, 200])",
        "countBeautifulPairs(nums = [1, 10, 13, 3, 15])",
        "countBeautifulPairs(nums = [28, 7, 16])",
        "countBeautifulPairs(nums = [43, 345, 324, 543, 5423, 254, 2523])"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '512300001')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '5123000001')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = '51230000')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = '51230000000001')"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"aabbcc\")",
        "minimizedStringLength(s = \"aabcccccaaa\")",
        "minimizedStringLength(s = \"aab\")",
        "minimizedStringLength(s = \"aaabbc\")",
        "minimizedStringLength(s = \"aaa\")",
        "minimizedStringLength(s = \"aaabbbcc\")",
        "minimizedStringLength(s = \"zzz\")",
        "minimizedStringLength(s = \"aabacb\")",
        "minimizedStringLength(s = \"codeleet\")",
        "minimizedStringLength(s = \"aabcdefghj\")"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3], k = 0)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 2, 3], k = 0)",
        "maximumBeauty(nums = [2, 3, 4, 1], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 10, 12, 19], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9, 10], k = 4)"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)",
        "makeTheIntegerZero(num1 = 3, num2 = 7)",
        "makeTheIntegerZero(num1 = 1000, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 11)",
        "makeTheIntegerZero(num1 = 200, num2 = 2)",
        "makeTheIntegerZero(num1 = 50, num2 = 4)",
        "makeTheIntegerZero(num1 = 999, num2 = 333)"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 5, 11, 5])",
        "findValueOfPartition(nums = [1,4,3,2])",
        "findValueOfPartition(nums = [1, 5, 4, 8])",
        "findValueOfPartition(nums = [2, 1])",
        "findValueOfPartition(nums = [1, 5, 2, 4, 3])",
        "findValueOfPartition(nums = [1, 1, 0])",
        "findValueOfPartition(nums = [1, 5, 4, 8, 11])",
        "findValueOfPartition(nums = [1,2,3,5])",
        "findValueOfPartition(nums = [5, 6, 10])",
        "findValueOfPartition(nums = [1, 3, 4, 6, 8, 12])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 100, additionalTank = 0)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1])",
        "doesValidArrayExist(derived = [0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 0, 0, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0])"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'neven')",
        "makeSmallestPalindrome(s = 'nev')",
        "makeSmallestPalindrome(s = \"noeven\")",
        "makeSmallestPalindrome(s = \"nevn\")",
        "makeSmallestPalindrome(s = 'nevener')",
        "makeSmallestPalindrome(s = 'noon')"
    ],
    "sample_110": [
        "checkArray(nums = [1, 0, 1], k = 1)",
        "checkArray(nums = [1, -2, 3, 1], k = 3)",
        "checkArray(nums = [1, 1, 1], k = 2)",
        "checkArray(nums = [1,2,3,4], k = 2)",
        "checkArray(nums = [3, 4, 2, 1, 5, 2], k = 3)",
        "checkArray(nums = [2, 1, 2, 0], k = 1)",
        "checkArray(nums = [2, 5, 1, 3, 4], k = 3)",
        "checkArray(nums = [10, -2, 10, -2, 10, -2, 10, -2, 10, -2], k = 3)",
        "checkArray(nums = [-1, 4, 5, -2, 5], k = 3)",
        "checkArray(nums = [2,5,1,4,6,2,4,5,10,3,7,8,2,2], k = 4)"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [0, 1])",
        "doesValidArrayExist(derived = [0, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 1, 0, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1])"
    ],
    "sample_54": [
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = 'aaaabbbcd')",
        "smallestString(s = 'abcd')",
        "smallestString(s = \"zzz\")",
        "smallestString(s = \"azddsbnca\")",
        "smallestString(s = \"xzyz\")",
        "smallestString(s = \"aaaaaasdfa\")",
        "smallestString(s = \"kdeaadcb\")",
        "smallestString(s = \"azbbzdz\")",
        "smallestString(s = \"aadbzfddf\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1, 2, 1, 2, 3])",
        "continuousSubarrays(A = [0, 0, 0, 0, 0, 0])",
        "continuousSubarrays(A = [2, 4, 4, 5, 7])",
        "continuousSubarrays(A = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3, 3, 2, 3, 1])",
        "continuousSubarrays(A = [5, 2, 2, 1, 3, 3])",
        "continuousSubarrays(A = [3, 3, 7, 7, 7])",
        "continuousSubarrays(A = [2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 3])",
        "continuousSubarrays(A = [1,2,1,1,2,3,4,3,5])",
        "continuousSubarrays(A = [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = 'ab')",
        "makeSmallestPalindrome(s = 'ab')",
        "makeSmallestPalindrome(s = 'ab')",
        "makeSmallestPalindrome(s = 'ab')",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = 'a')",
        "makeSmallestPalindrome(s = 'a')",
        "makeSmallestPalindrome(s = 'a')",
        "makeSmallestPalindrome(s = 'abc')",
        "makeSmallestPalindrome(s = \"ab\")"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [2, 1])",
        "findValueOfPartition(nums = [1, 10])",
        "findValueOfPartition(nums = [1, 10])",
        "findValueOfPartition(nums = [1, 10, 100, 1000])",
        "findValueOfPartition(nums = [1, 5, 2, 4, 3])",
        "findValueOfPartition(nums = [1, 2, 4, 8, 10])",
        "findValueOfPartition(nums = [1, 2, 2])",
        "findValueOfPartition(nums = [4,2,1,3])",
        "findValueOfPartition(nums = [4, 2, 1, 2, 3])",
        "findValueOfPartition(nums = [1, 5, 2, 10, 6, 3, 7, 4])"
    ],
    "sample_51": [
        "smallestString(s = 'kkddsbncd')",
        "smallestString(s = \"akddsbncd\")",
        "smallestString(s = 'kddsnbdc')",
        "smallestString(s = 'zddd')",
        "smallestString(s = 'keeps')",
        "smallestString(s = 'aqce')",
        "smallestString(s = \"kkddsbamcd\")",
        "smallestString(s = \"xasaaaax\")",
        "smallestString(s = \"hqchqk\")",
        "smallestString(s = \"dzjjcazbkddsbncd\")"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 0)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 4)",
        "maximumBeauty(nums = [1, 2, 3, 1, 2, 3], k = 0)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], k = 5)",
        "maximumBeauty(nums = [4, 5, 3, 2, 6, 1], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 2, 3, 4, 5, 5, 8], k = 4)",
        "maximumBeauty(nums = [3, 1, 2, 4, 5, 10], k = 1)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 4], k = 4)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "checkArray(nums = [0, 0, 1, 0], k = 1)",
        "checkArray(nums = [5, 1, 5, 2, 5, 3, 5, 4], k = 4)",
        "checkArray(nums = [10, -2, 5, 8], k = 3)",
        "checkArray(nums = [2, 2, 2, 2, 2], k = 1)",
        "checkArray(nums = [3, -1, 2, 4], k = 2)",
        "checkArray(nums = [3,4,6,2], k = 3)",
        "checkArray(nums = [1, 1, 2, 1, 1, 3, 5], k = 3)",
        "checkArray(nums = [1, -2, 5, 0, 3, -4], k = 3)"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 0, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 10)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 2, additionalTank = 3)",
        "distanceTraveled(mainTank = 100, additionalTank = 0)",
        "distanceTraveled(mainTank = 12, additionalTank = 4)"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 4, 2, 3])",
        "distinctDifferenceArray(nums = [0, 1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 1])",
        "distinctDifferenceArray(nums = [5, 7, 7, 8, 8])",
        "distinctDifferenceArray(nums = [-1, 0, 1, 3, 4])",
        "distinctDifferenceArray(nums = [1, 4, 5, 7, 9, 10])",
        "distinctDifferenceArray(nums = [1, 7, 2, 3, 5])",
        "distinctDifferenceArray(nums = [1, 3, 5, 6, 6, 5])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1, 2, 2, 3, 1])",
        "continuousSubarrays(A = [1, 1, 2, 1, 1, 3])",
        "continuousSubarrays(A = [1, 4, 2, 5, 3])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3])",
        "continuousSubarrays(A = [3, 1, 2, 5, 4])",
        "continuousSubarrays(A = [1, 2, 3, 4, 2, 2, 4, 3, 3])",
        "continuousSubarrays(A = [1, 3, 5, 5, 3, 3, 1])",
        "continuousSubarrays(A = [1,2,3,4,5,5,5,6,6,7,8,9])",
        "continuousSubarrays(A = [4, 5, 6, 3, 4, 8, 7])",
        "continuousSubarrays(A = [1, 3, 4, 8, 2, 2, 6, 7, 9, 10, 1, 3, 1, 4, 1, 3, 5, 6, 1, 3, 1, 3])"
    ],
    "sample_6": [
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 2, queries = [[1,1],[2,1],[1,0],[2,0]])",
        "colorTheArray(n = 3, queries = [[0,1],[1,1],[2,0],[1,1]])",
        "colorTheArray(n = 4, queries = [[0, 0], [2, 0], [1, 1], [1, 1]])",
        "colorTheArray(n = 4, queries = [[0,1],[0,2],[0,1],[1,1],[2,2]])",
        "colorTheArray(n = 3, queries = [[0,0],[0,1],[0,2],[0,1],[2,1],[1,2]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,1],[2,1],[3,1],[3,0],[0,1],[2,1]])"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 3, b = 2)",
        "makeTheIntegerZero(a = 3, b = 2)",
        "makeTheIntegerZero(a = 1, b = 2)",
        "makeTheIntegerZero(a = 7, b = 2)",
        "makeTheIntegerZero(a = 2, b = 3)",
        "makeTheIntegerZero(a = 5, b = 1)",
        "makeTheIntegerZero(a = 10, b = 1)",
        "makeTheIntegerZero(a = 14, b = 3)",
        "makeTheIntegerZero(a = 73, b = 2)",
        "makeTheIntegerZero(a = 30, b = 23)"
    ],
    "sample_100": [
        "maximumJumps(nums = [10, 13, 12, 14, 15], target = 2)",
        "maximumJumps(nums = [100, -23, -23, 404, 100, 23, 23, 23, 3, 404], target = 100)",
        "maximumJumps(nums = [100, -23, -23, 404, 100, 23, 23, 23, 3, 404], target = 100)",
        "maximumJumps(nums = [100, -23, -23, 404, 100, 23, 23, 23, 3, 404], target = 101)",
        "maximumJumps(nums = [100, -23, -23, 404, 100, 23, 23, 23, 3, 404], target = 100)",
        "maximumJumps(nums = [2, 5, 1, 1, 1], target = 3)",
        "maximumJumps(nums = [1,2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [2, 5, 1, 1, 1, 1, 1, 1, 1, 2], target = 2)",
        "maximumJumps(nums = [3, 0, 4, 1, 0, 5, 6, 7], target = 1)",
        "maximumJumps(nums = [118, -17, 61, 120, 38, 99, 66, -53, -51, -28], target = 66)"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5], threshold = 3)",
        "longestAlternatingSubarray(nums = [4, 2, 5, 3], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 1)",
        "longestAlternatingSubarray(nums = [2, 3, 2, 2, 4, 3, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,2,1,2,1], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,3,2,4,5], threshold = 5)",
        "longestAlternatingSubarray(nums = [3, 1, 4, 3], threshold = 2)",
        "longestAlternatingSubarray(nums = [10, 11, 2, 4, 6, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [0,1,1,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "longestAlternatingSubarray(nums = [2, 5, 2, 6, 6, 2, 2, 2, 2], threshold = 0)"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [3, 2, 6, 4, 5, 1], b = [1, 2, 3, 4, 5, 6])",
        "maxNonDecreasingLength(a = [1, 3, 7, 9, 5], b = [1, 2, 3, 4, 6])",
        "maxNonDecreasingLength(a = [1, 3, 8, 4, 6], b = [1, 2, 3, 4, 5])",
        "maxNonDecreasingLength(a = [7, 6, 5, 4, 3, 2, 1], b = [7, 6, 5, 4, 3, 2, 1])",
        "maxNonDecreasingLength(a = [1, 5, 2, 1, 4], b = [1, 4, 3, 2, 5])",
        "maxNonDecreasingLength(a = [1, 4, 5, 2, 3], b = [1, 2, 3, 2, 1])",
        "maxNonDecreasingLength(a = [0, 1, 2, 3], b = [1, 2, 3, 0])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [3, 2, 1, 3, 5])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 3, 4], b = [1, 2, 3, 4, 4, 4])",
        "maxNonDecreasingLength(a = [1, 3, 5, 7], b = [10, 10, 10, 10])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 0, 1, 1])"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 1, 1, 1, 1], threshold = 0)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 2], threshold = 0)",
        "longestAlternatingSubarray(nums = [1,2,3], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 3, 2, 4], threshold = 1)",
        "longestAlternatingSubarray(nums = [10, 15, 3, 7], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 3, 1, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [5, 3, 4, 2, 1], threshold = 1)",
        "longestAlternatingSubarray(nums = [4, 6, 9, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 6, 7, 11, 12], threshold = 10000)"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [2, 1])",
        "findValueOfPartition(nums = [1, 10])",
        "findValueOfPartition(nums = [1, 4, 3, 2])",
        "findValueOfPartition(nums = [1, 1, 2, 4])",
        "findValueOfPartition(nums = [4,3,2,1])",
        "findValueOfPartition(nums = [1, 10, 10, 100, 100, 1000])",
        "findValueOfPartition(nums = [1, 7, 2, 5, 4, 3, 1])",
        "findValueOfPartition(nums = [1, 7, 2, 5, 13])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = 'ab')",
        "makeSmallestPalindrome(s = 'ab')",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = 'abb')",
        "makeSmallestPalindrome(s = 'abb')",
        "makeSmallestPalindrome(s = 'abc')",
        "makeSmallestPalindrome(s = \"abc\")",
        "makeSmallestPalindrome(s = \"b\")",
        "makeSmallestPalindrome(s = \"aaabba\")"
    ],
    "sample_18": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"CDABD\")",
        "minLength(s = \"CDABCD\")",
        "minLength(s = \"ABCABCD\")",
        "minLength(s = \"BCD\")",
        "minLength(s = \"ABCDCDCDCDABCD\")"
    ],
    "sample_99": [
        "maximumJumps(nums = [10, 13, 12, 14, 15], target = 2)",
        "maximumJumps(nums = [6, 4, 14, 6, 8, 13, 9, 7, 10, 6, 12], target = 2)",
        "maximumJumps(nums = [2,3,1,1,4], target = 3)",
        "maximumJumps(nums = [11, 22, 7, 7, 7, 7, 7, 7, 7, 22, 13], target = 5)",
        "maximumJumps(nums = [100, 200, 150, 100, 100], target = 50)",
        "maximumJumps(nums = [7,6,5,4,3,2,1,0], target = 0)",
        "maximumJumps(nums = [100, 100, 100, 100, 100], target = 0)",
        "maximumJumps(nums = [100, 200, 150, 100, 100, 150, 50], target = 200)",
        "maximumJumps(nums = [11,10,9,1], target = 2)",
        "maximumJumps(nums = [1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [2, 1], [4, 1], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [1, 2], [1, 3], [2, 2], [2, 3]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [2, 1], [3, 2], [4, 1], [5, 2], [2, 1]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [3, 1], [4, 1]])",
        "colorTheArray(n = 5, queries = [[1, 0], [2, 1], [3, 0], [4, 1], [5, 0]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 0], [2, 1], [0, 0], [1, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [2, 3], [1, 2], [3, 4], [1, 1]])",
        "colorTheArray(n = 5, queries = [[0, 0], [2, 2], [1, 2], [2, 1], [1, 0]])",
        "colorTheArray(n = 5, queries = [[2,1], [1,2], [5,3], [5,1], [3,4]])",
        "colorTheArray(n = 4, queries = [[0, 1], [0, 1], [2, 0], [2, 1], [1, 0]])"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank=1, additionalTank=0)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank=5, additionalTank=0)",
        "distanceTraveled(mainTank=2, additionalTank=0)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7])",
        "countBeautifulPairs(nums = [123, 234, 345, 456])",
        "countBeautifulPairs(nums = [12, 18, 20, 45])",
        "countBeautifulPairs(nums = [22, 57, 39])",
        "countBeautifulPairs(nums = [4234, 4951, 3214, 2334, 4234, 3214])",
        "countBeautifulPairs(nums = [22, 44, 78, 45, 56, 101])",
        "countBeautifulPairs(nums = [21, 12, 23, 41, 11, 24, 51, 13, 32, 33])",
        "countBeautifulPairs(nums = [405, 795, 938, 444, 489])",
        "countBeautifulPairs(nums = [40, 18, 27, 10, 47, 33, 8, 19, 1, 50, 44])"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3, 4], x = 2)",
        "minCost(A = [1, 2, 3, 4], x = 2)",
        "minCost(A = [1, 2, 3], x = 1)",
        "minCost(A = [1,2,3], x = 3)",
        "minCost(A = [2, 3, 4], x = 2)",
        "minCost(A = [3, 2, 1, 4], x = 2)",
        "minCost(A = [1, 2, 1], x = 2)",
        "minCost(A = [1, 5, 10], x = 2)",
        "minCost(A = [4, 1, 6], x = 2)",
        "minCost(A = [3, 4, 4, 6], x = 2)"
    ],
    "sample_98": [
        "maximumJumps(nums = [1,1,1,1,1], target = 0)",
        "maximumJumps(nums = [-10,-5,0,3,7], target = 5)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 2, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [3, 2, 1, 0, 4], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 1, 1, 1], target = 3)",
        "maximumJumps(nums = [2, 0, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 3, 2, 5], target = 3)",
        "maximumJumps(nums = [2,2,1,0,0,1,1,2,1,2,0,1,2,2], target = 2)",
        "maximumJumps(nums = [1, 100, 3, 2, 4, 200, 10, 500, 200, 400, 1000, 1000, 1000, 1000, 2000], target = 1000)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6])",
        "distinctDifferenceArray(nums = [-1, 0, 1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 3, 5, 7, 9, 10])",
        "distinctDifferenceArray(nums = [-5, -3, -1, 1, 3, 5])",
        "distinctDifferenceArray(nums = [1, 1, 2, 3, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 4, 1, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 2, 3, 4, 4, 4, 5, 6])",
        "distinctDifferenceArray(nums = [1, 5, 7, 8, 5, 3, 4, 3, 7])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 1, 2, 3, 2, 4, 1])",
        "distinctDifferenceArray(nums = [2, 3, 1, 1, 3, 4, 3, 2, 4, 5])"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [4, 3, 2, 1, 5])",
        "countBeautifulPairs(nums = [10, 20, 40, 50, 80, 100, 150, 200])",
        "countBeautifulPairs(nums = [45, 10, 35, 15, 25])",
        "countBeautifulPairs(nums = [10, 30, 21, 72, 64])",
        "countBeautifulPairs(nums = [1100, 1000, 1000, 1010, 1000, 1100, 1100])",
        "countBeautifulPairs(nums = [20, 13, 22, 31, 16, 17])",
        "countBeautifulPairs(nums = [123, 567, 1000, 700, 698])",
        "countBeautifulPairs(nums = [2134, 6529, 2724, 8171])",
        "countBeautifulPairs(nums = [12, 28, 66, 35, 41, 25, 12, 32, 38, 17, 32, 32])"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"aabbcc\")",
        "minimizedStringLength(s = \"aabcc\")",
        "minimizedStringLength(s = \"babc\")",
        "minimizedStringLength(s = \"abbcccddddeeeee\")",
        "minimizedStringLength(s = \"geeksforgeeks\")",
        "minimizedStringLength(s = \"aaaaaab\")",
        "minimizedStringLength(s = \"abcdedcba\")",
        "minimizedStringLength(s = \"zzoo\")",
        "minimizedStringLength(s = \"babababababab\")"
    ],
    "sample_41": [
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aaba\")",
        "minimumCost(s = \"xyyxz\")",
        "minimumCost(s = \"bacb\")",
        "minimumCost(s = \"100100100\")",
        "minimumCost(s = \"aaabbaa\")",
        "minimumCost(s = \"bza\")",
        "minimumCost(s = \"31022\")",
        "minimumCost(s = \"coaai\")"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 1, 1, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 1, 3])",
        "distinctDifferenceArray(nums = [3, 1, 3, 2, 4, 2])",
        "distinctDifferenceArray(nums = [1, 3, 2, 5, 3])",
        "distinctDifferenceArray(nums = [2, 3, 5, 7, 11, 11, 11])",
        "distinctDifferenceArray(nums = [1, 4, 3, 5, 2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 3, 4, 4, 5])",
        "distinctDifferenceArray(nums = [-5, -5, -3, 2, 2, 5, 7])",
        "distinctDifferenceArray(nums = [0, 1, 0, 2, 2, 3, 4, 3])"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [0,0,0,0])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 2, 3])",
        "doesValidArrayExist(derived = [1, 1, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [3,3,3,3])",
        "doesValidArrayExist(derived = [1, 1, 1, 2, 3, 5, 8, 13])"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0, 0, 0, 0])",
        "doesValidArrayExist(derived = [0, 0])",
        "doesValidArrayExist(derived = [0, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 2, 3, 4])",
        "doesValidArrayExist(derived = [1, 1, 0, 1])",
        "doesValidArrayExist(derived = [2, 1, 3, 0])",
        "doesValidArrayExist(derived = [2, 0, 1, 1, 3])"
    ],
    "sample_52": [
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"zddsbncd\")",
        "smallestString(s = 'ddsbncd')",
        "smallestString(s = \"aaaa\")",
        "smallestString(s = \"abba\")",
        "smallestString(s = 'abczed')",
        "smallestString(s = 'bazzdkddsbncd')",
        "smallestString(s = \"kaqdjdsbncd\")",
        "smallestString(s = \"cdxdyy\")",
        "smallestString(s = \"bdflsnfgzbxhd\")"
    ],
    "sample_40": [
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aabbcc\")",
        "minimumCost(s = \"aabb\")",
        "minimumCost(s = \"xyyx\")",
        "minimumCost(s = \"aabcc\")",
        "minimumCost(s = \"zzzz\")",
        "minimumCost(s = \"aabccb\")",
        "minimumCost(s = \"01101110\")"
    ],
    "sample_38": [
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"xyyzyx\")",
        "minimumCost(s = \"10110\")",
        "minimumCost(s = \"bbb\")",
        "minimumCost(s = \"zzzyyyxxx\")",
        "minimumCost(s = \"xyz\")",
        "minimumCost(s = \"10110110\")",
        "minimumCost(s = \"aabbccbb\")",
        "minimumCost(s = \"ABAA\")",
        "minimumCost(s = \"99999999\")"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 1, 1, 2, 2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6])",
        "distinctDifferenceArray(nums = [1, 1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [4, 5, 2, 3, 1])",
        "distinctDifferenceArray(nums = [3, 2, 1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [-1, 0, 1, 3, 6])",
        "distinctDifferenceArray(nums = [2, 4, 3, 3, 2])",
        "distinctDifferenceArray(nums = [2, 6, 8, 5, 3])",
        "distinctDifferenceArray(nums = [-10, 0, 5, 10, 20])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 3, 2, 1, 5, 2])"
    ],
    "sample_53": [
        "smallestString(s = 'baaac')",
        "smallestString(s = \"baabc\")",
        "smallestString(s = 'baacc')",
        "smallestString(s = \"bacd\")",
        "smallestString(s = \"bacb\")",
        "smallestString(s = \"abac\")",
        "smallestString(s = 'cabbac')",
        "smallestString(s = 'baaabz')",
        "smallestString(s = 'babf')",
        "smallestString(s = 'azzyy')"
    ],
    "sample_109": [
        "checkArray(nums = [1,2,3], k = 3)",
        "checkArray(nums = [1, 2, 3, 4], k = 1)",
        "checkArray(nums = [3,2,1,5,4], k = 2)",
        "checkArray(nums = [1,2,3,1,2,3], k = 2)",
        "checkArray(nums = [5, 4, 3, 2, 1], k = 2)",
        "checkArray(nums = [10,10,10,10,10,10], k = 1)",
        "checkArray(nums = [3,3,3,4,5], k = 2)",
        "checkArray(nums = [1, 4, 2, 5, 3], k = 3)",
        "checkArray(nums = [5, 2, 4, 1], k = 1)",
        "checkArray(nums = [5, 2, 1, 3, 6, 4, 1], k = 4)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1,2,3,4], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 0)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 0)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 0)",
        "maximumBeauty(nums = [1, 1, 3, 5, 7, 9], k = 3)",
        "maximumBeauty(nums = [1, 3, 2, 5, 4], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 15], k = 5)",
        "maximumBeauty(nums = [1,2,3,7,8,9,10,11,12], k = 1)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [2, 1, 1, 2, 3])",
        "distinctDifferenceArray(a = [1,2,3,4,3,2,1])",
        "distinctDifferenceArray(a = [-1, -3, -5, -4, -2])",
        "distinctDifferenceArray(a = [2, 4, 6, 8, 9])",
        "distinctDifferenceArray(a = [1, 3, 5, 2, 7])",
        "distinctDifferenceArray(a = [1, 5, 7, 9, 10])",
        "distinctDifferenceArray(a = [1,2,1,3,4,3,2])",
        "distinctDifferenceArray(a = [5, 4, 2, 1, 4])",
        "distinctDifferenceArray(a = [-2, 5, 2, 3, 4, 6])"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '512300001')",
        "removeTrailingZeros(a = '512300001')",
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '51230001')",
        "removeTrailingZeros(a = '5123000001')",
        "removeTrailingZeros(a = \"51230100\")",
        "removeTrailingZeros(a = '5123010000000')",
        "removeTrailingZeros(a = '51230000000000000000000000000001')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'neve')",
        "makeSmallestPalindrome(s = 'nev')",
        "makeSmallestPalindrome(s = 'nev')",
        "makeSmallestPalindrome(s = 'never')",
        "makeSmallestPalindrome(s = 'never')",
        "makeSmallestPalindrome(s = \"eve\")",
        "makeSmallestPalindrome(s = 'enev')",
        "makeSmallestPalindrome(s = \"ven\")",
        "makeSmallestPalindrome(s = 'evn')"
    ],
    "sample_55": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbndcd\")",
        "smallestString(s = 'kddsbnco')",
        "smallestString(s = 'kddscd')",
        "smallestString(s = 'yzkddsbncd')",
        "smallestString(s = 'fkdsfsccfd')",
        "smallestString(s = \"zcacdddsz\")"
    ],
    "sample_35": [
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = \"512300001\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230001\")",
        "removeTrailingZeros(num = '000000512301')",
        "removeTrailingZeros(num = \"512300\")",
        "removeTrailingZeros(num = \"000512300\")",
        "removeTrailingZeros(num = '0000100000010000001000000001000000000000')"
    ],
    "sample_23": [
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"CDABCDAB\")",
        "minLength(s = \"ABCDCDABCD\")",
        "minLength(s = \"ABCABCD\")",
        "minLength(s = \"CDABAB\")",
        "minLength(s = \"BACD\")",
        "minLength(s = \"AAAABCDCD\")",
        "minLength(s = \"ABCDCDCDCDABA\")",
        "minLength(s = \"ABDCDBDCD\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '512300001')",
        "removeTrailingZeros(num = '51230001')",
        "removeTrailingZeros(num = '51230001')",
        "removeTrailingZeros(num = '5123000001')",
        "removeTrailingZeros(num = '5123000001')",
        "removeTrailingZeros(num = '5123000001')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123000000001')",
        "removeTrailingZeros(num = \"512300000000010\")"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 4, num2 = 2)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)",
        "makeTheIntegerZero(num1 = 100, num2 = 5)",
        "makeTheIntegerZero(num1 = 25, num2 = 3)",
        "makeTheIntegerZero(num1 = 50, num2 = 5)",
        "makeTheIntegerZero(num1 = 5, num2 = 100)",
        "makeTheIntegerZero(num1 = 67, num2 = 2)",
        "makeTheIntegerZero(num1 = 54648, num2 = 3)"
    ],
    "sample_57": [
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 5, b = 1)",
        "distanceTraveled(a = 1, b = 2)",
        "distanceTraveled(a = 2, b = 2)",
        "distanceTraveled(a = 3, b = 0)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [2,3,2,2,4], t = 3)",
        "longestAlternatingSubarray(nums = [1,1,2,3], t = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4,8], t = 7)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], t = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], t = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,5], t = 2)",
        "longestAlternatingSubarray(nums = [2,3,3,2], t = 10000)",
        "longestAlternatingSubarray(nums = [2,3,2,3,3,2,3,3,2,3,2,3,2], t = 3)",
        "longestAlternatingSubarray(nums = [1,2,2,2,2,2,3,3,3,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2",
        "longestAlternatingSubarray(nums = [0,1,2,4,6,5,8,10,9,11,15,14,13,16], t = 2)"
    ],
    "sample_102": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [10, 13, 12, 14, 15], target = 2)",
        "maximumJumps(nums = [1,1,1,1,1], target = 1)",
        "maximumJumps(nums = [2,5,0,0], target = 1)",
        "maximumJumps(nums = [1, 5, 2, 1, 1, 1, 1, 1, 1], target = 3)",
        "maximumJumps(nums = [11, 2, 3, 2, 4], target = 5)",
        "maximumJumps(nums = [-3, 2, -1, 1, 4], target = 2)",
        "maximumJumps(nums = [1, 0, 1, 2, 0, 1, 0, 1], target = 3)",
        "maximumJumps(nums = [5, 6, 1, 1, 1, 1, 1, 1, 3, 6, 6, 3], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 1, 0, 9, 10, 12, 16, 19], target = 3)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '512300001')",
        "removeTrailingZeros(num = '512300001')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = '5123000001')",
        "removeTrailingZeros(num = '512300010')",
        "removeTrailingZeros(num = '51230000001')",
        "removeTrailingZeros(num = '51230000')",
        "removeTrailingZeros(num = '5123000010')",
        "removeTrailingZeros(num = \"512300000\")"
    ],
    "sample_101": [
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [100, -23, -23, 404, 100, 23, 23, 23, 3, 404], target = 101)",
        "maximumJumps(nums = [2,5,0,0], target = 0)",
        "maximumJumps(nums = [5, 6, 4, 4, 6, 9, 4, 4, 7, 4], target = 3)",
        "maximumJumps(nums = [-10, -5, 0, 4, 8, 10], target = 2)",
        "maximumJumps(nums = [8,2,3,3,5,8], target = 4)",
        "maximumJumps(nums = [-40, -20, 30, 10, 5, 50], target = 30)",
        "maximumJumps(nums = [3, 0, 8, 2, 5, 4, 5], target = 3)"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0, 1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0, 1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 0, 0, 0, 1])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 0, 1, 0])"
    ],
    "sample_19": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"AABCDCD\")",
        "minLength(s = 'ABCDABCD')",
        "minLength(s = \"ABACDCD\")",
        "minLength(s = \"CDCD\")",
        "minLength(s = 'ABABCDBCD')",
        "minLength(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "minLength(s = \"AAAACD\")",
        "minLength(s = \"ACDBCDACD\")",
        "minLength(s = \"AABABCDCDCABCDA\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'neve')",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = 'nevernodd')",
        "makeSmallestPalindrome(s = \"nivekn\")"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [2,1,3])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4, 5])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4, 5])",
        "semiOrderedPermutation(nums = [1,3,2,4])",
        "semiOrderedPermutation(nums = [2,1,3,5])",
        "semiOrderedPermutation(nums = [2,3,1,4,5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4])",
        "semiOrderedPermutation(nums = [1, 5, 3, 6, 2, 4])"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,1,2,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,1,0,0,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 1, 3, 5, 7, 9], k = 1)",
        "maximumBeauty(nums = [1, 1, 3, 5, 7, 9], k = 3)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 0)",
        "maximumBeauty(nums = [1, 2, 3], k = 0)",
        "maximumBeauty(nums = [2, 1, 4, 5, 3], k = 2)",
        "maximumBeauty(nums = [2, 1, 4, 3], k = 0)",
        "maximumBeauty(nums = [2,3,2,1,3], k = 1)"
    ],
    "sample_117": [
        "minimumIndex(nums = [1, 3, 5, 5])",
        "minimumIndex(nums = [1, 3, 5, 2, 2, 2, 5, 1])",
        "minimumIndex(nums = [1, 2, 2, 0])",
        "minimumIndex(nums = [4, 3, 2, 4, 3])",
        "minimumIndex(nums = [0, 0, 0])",
        "minimumIndex(nums = [0, 1, 2, 1, 2, 0])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 6, 6, 7, 8])",
        "minimumIndex(nums = [1, 3, 3, 3, 4, 5, 6, 7, 9, 11])",
        "minimumIndex(nums = [3, 2, 3, 1, 3, 2, 3, 1, 3, 2])",
        "minimumIndex(nums = [1, 0, 0, 2, 3, 0, 1, 2, 3, 4])"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 11, num2 = 2)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)",
        "makeTheIntegerZero(num1 = 9, num2 = 2)",
        "makeTheIntegerZero(num1 = 4, num2 = 1)",
        "makeTheIntegerZero(num1 = 6, num2 = 1)",
        "makeTheIntegerZero(num1 = 31, num2 = 7)",
        "makeTheIntegerZero(num1 = 60, num2 = 5)"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [1, 2, 3])",
        "countBeautifulPairs(nums = [2, 3, 5, 7])",
        "countBeautifulPairs(nums = [2,3,4,5])",
        "countBeautifulPairs(nums = [12,34,56])",
        "countBeautifulPairs(nums = [2, 4, 6, 9, 14, 16])",
        "countBeautifulPairs(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024])",
        "countBeautifulPairs(nums = [12, 19, 26, 36, 49, 64])",
        "countBeautifulPairs(nums = [48, 34, 27, 24, 19, 17])",
        "countBeautifulPairs(nums = [1000, 2000, 1002000, 1000001])",
        "countBeautifulPairs(nums = [324, 3465, 23, 34, 567, 345, 234, 456, 56, 3456])"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 5)",
        "makeTheIntegerZero(num1 = 11, num2 = 2)",
        "makeTheIntegerZero(num1 = 100, num2 = 1)",
        "makeTheIntegerZero(num1 = 13, num2 = 6)",
        "makeTheIntegerZero(num1 = 8, num2 = 6)",
        "makeTheIntegerZero(num1 = 34, num2 = 2)",
        "makeTheIntegerZero(num1 = 40, num2 = 15)",
        "makeTheIntegerZero(num1 = 65, num2 = 4)",
        "makeTheIntegerZero(num1 = 576, num2 = 56)"
    ],
    "sample_20": [
        "minLength(s = \"AABCD\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABCBAB\")",
        "minLength(s = \"ABCDCDABCD\")",
        "minLength(s = \"ACDABCDABCD\")",
        "minLength(s = \"CDABCDABAB\")",
        "minLength(s = \"ABCDAAABCD\")",
        "minLength(s = \"ABDCDC\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3], k = 1)",
        "maximumBeauty(nums = [1, 2, 3], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 3, 2, 5, 4], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 5, 7, 8, 10, 12, 14, 15], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 5, 5, 5, 5, 7, 8, 9, 10], k = 1)"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [1,2,3,4,5])",
        "countBeautifulPairs(nums = [32,16,21])",
        "countBeautifulPairs(nums = [3,1,2,5,4])",
        "countBeautifulPairs(nums = [12,18,30])",
        "countBeautifulPairs(nums = [1,10,100,1000])",
        "countBeautifulPairs(nums=[12, 18])",
        "countBeautifulPairs(nums = [11111,22222,33333,44444])",
        "countBeautifulPairs(nums = [4,5,6,7,7])",
        "countBeautifulPairs(nums = [10, 5, 13, 21])",
        "countBeautifulPairs(nums = [22, 23, 33, 41, 52])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 3)",
        "makeTheIntegerZero(num1 = 12, num2 = 2)",
        "makeTheIntegerZero(num1 = 8, num2 = 4)",
        "makeTheIntegerZero(num1 = 13, num2 = 10)",
        "makeTheIntegerZero(num1 = 2, num2 = 7)",
        "makeTheIntegerZero(num1 = 17, num2 = 11)",
        "makeTheIntegerZero(num1 = 123, num2 = 456)",
        "makeTheIntegerZero(num1 = 24, num2 = 13)",
        "makeTheIntegerZero(num1 = 720, num2 = 18)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'neven')",
        "makeSmallestPalindrome(s = 'never')",
        "makeSmallestPalindrome(s = 'never')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = 'nevern')",
        "makeSmallestPalindrome(s = \"niven\")"
    ],
    "sample_37": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aabbaa\")",
        "minimumCost(s = \"abababa\")",
        "minimumCost(s = \"adam\")",
        "minimumCost(s = \"lwlr\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,0,0,0,0,0])"
    ],
    "sample_105": [
        "checkArray(nums = [2, -1, 2], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 3, 2, 1], k = 4)",
        "checkArray(nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,",
        "checkArray(nums = [1, 2, 3], k = 4)",
        "checkArray(nums = [1, -2, 3, 4, -5], k = 3)",
        "checkArray(nums = [1, 1, 2, 2, 3, 3], k = 2)",
        "checkArray(nums = [3, 2, 1, 2, 3], k = 4)",
        "checkArray(nums = [1,2,4,3], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 3, 3, 2, 1], k = 4)",
        "checkArray(nums = [1, 0, 3, 0, -1, -2, 0], k = 2)"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [1, 4, 3, 2])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation(nums = [3, 1, 4, 2])",
        "semiOrderedPermutation(nums = [1, 2, 5, 3, 4])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [1, 2, 0])",
        "semiOrderedPermutation(nums = [1, 5, 4, 2, 3])",
        "semiOrderedPermutation(nums = [1,2,3,4,5,6,7,8,9])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [10, 5, 2, 25, 13], k = 3)",
        "checkArray(nums = [10, -10, 10, -10, 10, -10, 10, -10], k = 3)",
        "checkArray(nums = [2, 3, 1, 1, 4], k = 3)",
        "checkArray(nums = [1, 2, 3, 3, 4], k = 3)",
        "checkArray(nums = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], k = 2)",
        "checkArray(nums = [1, 0, 0, 0, 0, 0], k = 6)",
        "checkArray(nums = [1, 0, 2, 3], k = 3)",
        "checkArray(nums = [5, 2, 3, 1, 4, 5, 2, 3], k = 4)",
        "checkArray(nums = [2, 2, 3, 1, 0, 1, 3, 2, 1], k = 3)"
    ],
    "sample_39": [
        "minimumCost(s = \"aabb\")",
        "minimumCost(s = \"aa\")",
        "minimumCost(s = \"1001\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"a\")",
        "minimumCost(s = \"cc\")",
        "minimumCost(s = \"bob\")",
        "minimumCost(s = \"caa\")",
        "minimumCost(s = \"ttt\")",
        "minimumCost(s = \"aaaaabbb\")"
    ],
    "sample_65": [
        "findValueOfPartition(a = [3, 1, 2])",
        "findValueOfPartition(a = [1, 15, 7])",
        "findValueOfPartition(a = [1, 5, 3, 4, 2])",
        "findValueOfPartition(a = [1, 3, 10])",
        "findValueOfPartition(a = [-1, 5, 10, 20, 28, 3])",
        "findValueOfPartition(a = [2, 5, 1, 6, 7])",
        "findValueOfPartition(a = [1, 1000, 20])",
        "findValueOfPartition(a = [-5, 5, 10, 15, 20, 25])",
        "findValueOfPartition(a = [1, 5, 2, 0, 8, 3, 6])",
        "findValueOfPartition(a = [2, 7, 8, 5, 1, 6, 3, 4])"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 0)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 5)",
        "distanceTraveled(mainTank = 5, additionalTank = 5)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1,2,3,4,5])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [2, 4, 6, 7])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 1, 3])",
        "doesValidArrayExist(derived = [0, 0, 1, 1, 0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2])",
        "doesValidArrayExist(derived = [1, 2, 1, 3, 2, 3, 1, 2])",
        "doesValidArrayExist(derived = [8, 4, 2, 1, 2, 4, 8])",
        "doesValidArrayExist(derived = [1, 2, 3, 1, 4, 5, 6, 7, 8])"
    ],
    "sample_106": [
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1, 3, 2], k = 1)",
        "checkArray(nums = [1, 5, 3, 4, 2], k = 2)",
        "checkArray(nums = [0, 0, 1], k = 2)",
        "checkArray(nums = [3, 4, 5, 1, 2, 3], k = 3)",
        "checkArray(nums = [1, 1, 3, 1, 1], k = 3)",
        "checkArray(nums = [1,2,3,4,5,6,7,8,9,10,11], k = 3)",
        "checkArray(nums = [0, 0, 0, 1, 1, 1, 1], k = 3)",
        "checkArray(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2], k = 9)",
        "checkArray(nums = [2, 8, 3, 1, 6, 7, 10, 5, 4], k = 2)"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5], threshold = 1)",
        "longestAlternatingSubarray(nums = [2, 3, 1, 4], threshold = 1)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6, 7], threshold = 2)",
        "longestAlternatingSubarray(nums = [5, 1, 2, 3, 4], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,3,4,5,6,7], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 1, 2, 3, 5, 4], threshold = 2)",
        "longestAlternatingSubarray(nums = [3, 2, 2, 2, 3, 2, 4], threshold = 10)",
        "longestAlternatingSubarray(nums = [2,1,3,1,1,2,3,3,3,2], threshold = 1)",
        "longestAlternatingSubarray(nums = [2,3,5,7,2,12,3,17,5,2,3,6,7,2,12,3,17,5,2,3,6,7,17,12,3,17,12,3,17,5,2,3,6,7,2,12,3,17,5,2,3,6,7,17,12,3,17,12,3,17,5,2,3,6,7,2,12,3,17,5,2,3,6,7,17,12,3,17,12,3,17,5,2,3,6,7,2,12,3,17,5,2,3,6,7,17,12,3,17,12,3,17,5,2,3,6,7,2,12,3,17,5,2,3,6,7,17,12,3,17,12,3,17,5,2,3,6,7,2,12,3,17,5,2,3,6,7,17,12,3,17,12,3,17,5,2,3,6,7,2,12,3,17,5,2,3,6,7,17,12,3,17,12,3,17,5,2,3,6,7,2,12,3,17,5,2,3,6,7,17,12,3,17,12,3,17,5,2,3,6,7,2,12,3,17,5,2,3,6,7,17,12,3,17,12,3,17,5,2,3,6,7,2,12,3,17,5,2,3,6,7,17,12,3,17,12,3,17,5,2,3,6,7,2,12,3,17,5,2,3,6,7"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [12, 345, 2, 6, 7896])",
        "countBeautifulPairs(nums = [12, 345, 2, 6, 7896])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7])",
        "countBeautifulPairs(nums = [123, 345, 456])",
        "countBeautifulPairs(nums = [1, 4, 5, 7])",
        "countBeautifulPairs(nums = [2, 6, 4, 2])",
        "countBeautifulPairs(nums = [12, 3, 4, 5])",
        "countBeautifulPairs(nums = [2, 4, 1, 1, 1, 2])",
        "countBeautifulPairs(nums = [50, 70, 20])",
        "countBeautifulPairs(nums = [6053, 9534, 3754, 3503, 6946, 2299, 8854, 729, 6474])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1,2,3,4], t = 4)",
        "longestAlternatingSubarray(nums = [2,2,2,2,2], t = 2)",
        "longestAlternatingSubarray(nums = [0,1,2,3,4,5,6,7,8], t = 5)",
        "longestAlternatingSubarray(nums = [2,3,3], t = 1)",
        "longestAlternatingSubarray(nums = [1,2,2,4], t = 2)",
        "longestAlternatingSubarray(nums= [2,3,2,2,4,3], t = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], t = 100)",
        "longestAlternatingSubarray(nums= [5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7,2,5,7",
        "longestAlternatingSubarray(nums = [0,1,1,1,2,2,2,2,3,3,3,4,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12], t = 5)",
        "longestAlternatingSubarray(nums = [3,1,3,5,5,2,4,2,1,3,4,5,5,4,3,1,4,5,5,3,4,5,4,2,5,4,2,3,3,5,4,1,5,2,3,4,1,2,4,1,2,3,4,5,5,1,2,4,1,2,3,5,1,4,1,2,3,4,5,3,5,2,1,4,5,5,5,1,1,4,3,1,2,3,1,4,3,1,4,1,5,1,1,1,2,4,1,4,5,4,5,1,1,2,4,1,3,1,3,2,1,4,1,5,2,1,1,2,3,1,1,1,4,1,1,2,4,1,5,1,1,2,4,1,2,3,1,4,5,1,5,1,5,3,1,1,1,5,1,2,3,2,1,1,1,5,5,1,1,1,2,2,4,2,2,1,3,1,2,3,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
    ],
    "sample_36": [
        "minimumCost(s = \"aabbcc\")",
        "minimumCost(s = \"aabbcc\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"leetcode\")",
        "minimumCost(s = \"1011101\")",
        "minimumCost(s = \"0101\")",
        "minimumCost(s = \"xxxyyyzzz\")",
        "minimumCost(s = \"01010\")",
        "minimumCost(s = \"leet\")",
        "minimumCost(s = \"0100110\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"AABCDCD\")",
        "minLength(s = \"ABABABCD\")",
        "minLength(s = \"ABABABAB\")",
        "minLength(s = \"ACBCD\")",
        "minLength(s = \"ABCD1234\")",
        "minLength(s = \"ABCBADCD\")",
        "minLength(s = \"ABBCDD\")",
        "minLength(s = \"BADBAB\")"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 1, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 0, 1, 1, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 1, 1, 0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0,1,1,1,1])"
    ],
    "sample_9": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 2, queries = [[0, 0], [1, 1]])",
        "colorTheArray(n = 2, queries = [[1, 0], [0, 1]])",
        "colorTheArray(n = 4, queries = [[1,1],[2,2],[2,1],[3,2]])",
        "colorTheArray(n = 1, queries = [[1, 1], [0, 1], [0, 2]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 2], [0, 0], [2, 1], [0, 2], [2, 0]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 1], [2, 2], [0, 2], [1, 0], [0, 0], [2, 0], [2, 1], [1, 2], [0, 1]])",
        "colorTheArray(n = 10, queries = [[0, 1], [0, 2], [2, 1], [1, 2], [6, 2], [8, 1], [8, 2], [2, 1], [5, 0], [5, 2]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [1, 2])",
        "maxNonDecreasingLength(nums1 = [1, 1, 2], nums2 = [1, 2, 3])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 2, 1], nums2 = [3, 2, 1, 2, 3])",
        "maxNonDecreasingLength(nums1 = [1, 2, 1], nums2 = [2, 3, 2])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5, 6, 7], nums2 = [5, 6, 7, 8, 9, 10, 11])",
        "maxNonDecreasingLength(nums1 = [1, 3, 7, 9, 4, 5], nums2 = [5, 6, 7, 8, 9, 10])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 1, 2, 1], nums2 = [1, 2, 3, 2, 1, 2])",
        "maxNonDecreasingLength(nums1 = [2, 6, 4], nums2 = [7, 7, 7])",
        "maxNonDecreasingLength(nums1 = [10, 9, 2, 5, 3, 7, 101, 18], nums2 = [2, 3, 7, 101, 102, 18, 1000, 1001])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2, 4, 2, 2, 4, 5, 6],\n                              nums2 = [1, 3, 4, 2, 2, 2, 4, 5, 6])"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 1], k = 1)",
        "maximumBeauty(nums = [1, 2, 2, 3], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 4)",
        "maximumBeauty(nums = [3, 1, 2, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 5, 4, 2, 3], k = 1)",
        "maximumBeauty(nums = [1,2,3,3,3,2,1], k = 1)",
        "maximumBeauty(nums = [2, 1, 2, 5, 2, 3, 1], k = 2)",
        "maximumBeauty(nums = [3, 2, 1, 0, 4, 4], k = 0)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1,2])",
        "findValueOfPartition(nums = [3, 1, 2])",
        "findValueOfPartition(nums = [1, 2, 5])",
        "findValueOfPartition(nums = [1,5,6])",
        "findValueOfPartition(nums = [1, 2, 3, 5])",
        "findValueOfPartition(nums = [2, 3, 1, 4])",
        "findValueOfPartition(nums = [1, 5, 7, 9])",
        "findValueOfPartition(nums = [1,3,7,9,11,13])",
        "findValueOfPartition(nums = [1, 2, 5, 2, 2, 3])"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1,2,3,4,10])",
        "findValueOfPartition(nums = [4,10,4,3,8])",
        "findValueOfPartition(nums = [1, 3, 6, 7, 10])",
        "findValueOfPartition(nums = [2,1,4,7])",
        "findValueOfPartition(nums = [1,15,7,12])",
        "findValueOfPartition(nums = [2, 3, 2, 1, 4])",
        "findValueOfPartition(nums = [3,4,8,1,2,7])",
        "findValueOfPartition(nums
        "findValueOfPartition(nums = [4,8,10,15,20,30,50])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])",
        "semiOrderedPermutation(nums = [3, 4, 1, 2])",
        "semiOrderedPermutation(nums = [4, 3, 2, 1])",
        "semiOrderedPermutation(nums = [2, 5, 1, 3, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5])",
        "semiOrderedPermutation(nums = [1, 4, 2, 3])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [4, 1, 3, 2])",
        "semiOrderedPermutation(nums = [4, 1, 3, 2])",
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [1, 4, 2, 3])",
        "semiOrderedPermutation(nums = [3, 4, 1, 2])",
        "semiOrderedPermutation(nums = [1, 1, 2, 3])",
        "semiOrderedPermutation(nums = [5, 4, 3, 2, 1])",
        "semiOrderedPermutation(nums = [2, 4, 1, 3, 5])",
        "semiOrderedPermutation(nums = [3,2,1,4])",
        "semiOrderedPermutation(nums = [1,2,3,4,5,6,7,8,9,10])"
    ],
    "sample_167": [
        "isAcronym(words = [\"A\", \"B\", \"C\"], s = \"ABC\")",
        "isAcronym(words = [\"First\", \"Second\", \"Third\"], s = \"FST\")",
        "isAcronym(words = [\"internationalization\", \"and\", \"localization\"], s = \"i18n\")",
        "isAcronym(words = [\"Cool\", \"Tacos\", \"Awesome\"], s = \"CTA\")",
        "isAcronym(words = [\"Blog\", \"Say\"], s = \"BS\")",
        "isAcronym(words = [\"Salesforce\", \"Apex\", \"Pytest\"], s = \"SPA\")",
        "isAcronym(words = [\"asdasd\", \"asd\", \"d\"], s = \"s\")",
        "isAcronym(words = [\"zazza\", \"zzz\", \"zzz\", \"zzz\", \"zzz\"], s = \"zzz\")",
        "isAcronym(words = [\"Hos\", \"Al\", \"Bank\"], s = \"HAB\")",
        "isAcronym(words = [\"hi\", \"my\", \"name\", \"is\", \"cory\"], s = \"HMNYSC\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1,2,4,3], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2,1,2,4,3], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "countInterestingSubarrays(nums=[1,2,3],m=1,k=0)",
        "countInterestingSubarrays(nums = [3,5,6,7,8,10,11,12], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [3,5,1,4,2], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [4, 2, 4, 7], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,1,2,2,3,3,4,4,5,5,1,2], m = 3, k = 2)"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1, 2], [1, 4], [2, 3], [2, 4], [4, 5]])",
        "numberOfPoints(nums = [[1, 1], [2, 2], [3, 3]])",
        "numberOfPoints(nums = [[1,3],[3,5]])",
        "numberOfPoints(nums = [[1,2],[3,4],[2,3]])",
        "numberOfPoints(nums = [[1, 5], [1, 10]])",
        "numberOfPoints(nums = [[1, 3], [2, 3], [1, 2], [2, 4], [3, 4]])",
        "numberOfPoints(nums = [[1, 3], [4, 7], [9, 11]])",
        "numberOfPoints(nums = [[1, 10], [2, 6], [1, 2]])",
        "numberOfPoints(nums = [[0, 6], [3, 7]])",
        "numberOfPoints(nums = [[5,7],[3,6],[1,3],[6,9]])"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = ['easy problem'], separator = ' ')",
        "splitWordsBySeparator(words = ['easy problem'], separator = ' ')",
        "splitWordsBySeparator(words = ['easy,problem'], separator = ',')",
        "splitWordsBySeparator(words = ['easy_problem'], separator = \"_\")",
        "splitWordsBySeparator(words = [\"easy problem\"], separator = ' ')",
        "splitWordsBySeparator(words = ['split easy problem'], separator = ' ')",
        "splitWordsBySeparator(words = ['a-b-c', 'd', 'e-f-g'], separator = '-')",
        "splitWordsBySeparator(words = [\"This, is easy problem\"], separator = \", \")",
        "splitWordsBySeparator(words = [\"easy_problem\", \" \", \"\", \" \"], separator = \"_\")",
        "splitWordsBySeparator(words = [\"split\", \"this\"], separator = \"s\")"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 2], [1, 3], [2, 3]])",
        "numberOfPoints(nums = [[1, 2], [1, 3], [2, 3]])",
        "numberOfPoints(nums = [[1, 3], [2, 6], [3, 4]])",
        "numberOfPoints(nums = [[2, 3], [4, 5], [6, 7], [8, 10], [12, 16]])",
        "numberOfPoints(nums = [[1, 10], [10, 20], [1, 20], [5, 15]])",
        "numberOfPoints(nums = [[1, 3], [1, 3], [2, 4], [2, 4], [3, 6], [3, 6], [4, 6], [4, 6]])",
        "numberOfPoints(nums = [[2,5],[4,7],[1,6]])",
        "numberOfPoints(nums = [[1, 5], [3, 5], [2, 3], [1, 2], [5, 7]])",
        "numberOfPoints(nums = [[2, 7], [12, 13], [5, 10]])",
        "numberOfPoints(nums = [[0, 4], [3, 5], [1, 3], [3, 3], [4, 4], [0, 1], [3, 4]])"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 2, 1, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,1,2,1,3])",
        "countCompleteSubarrays(nums = [1,1,2,2,3,4,4,5])",
        "countCompleteSubarrays(nums = [1,2,1,3,2,5])",
        "countCompleteSubarrays(nums = [1, 1, 1, 2, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 4, 2])",
        "countCompleteSubarrays(nums = [1, 2, 2, 2, 2, 2, 3])",
        "countCompleteSubarrays(nums = [2,4,3,5,4,3])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ',')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = '-')",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one', 'two', 'three'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three four five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = \"one two three four five six\".split(\" \"), separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three four five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = 'one two three four five six'.split(), separator = \" \")",
        "splitWordsBySeparator(words = [\"one two\", \"three\", \"\", \"four\", \"five\", \"six\"], separator = \" \")"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 2, 3, 4])",
        "maxIncreasingGroups(u = [1, 3, 2, 4, 5, 6])",
        "maxIncreasingGroups(u = [1, 4, 3, 5])",
        "maxIncreasingGroups(u = [1, 1, 2, 2, 3, 4, 4, 5])",
        "maxIncreasingGroups(u = [1, 3, 4, 6, 1, 2, 5])",
        "maxIncreasingGroups(u = [5, 10, 10, 5])",
        "maxIncreasingGroups(u = [4, 4, 4, 1, 4, 4])",
        "maxIncreasingGroups(u = [1, 2, 3, 3, 4, 5, 6, 7, 8, 8, 8, 10])",
        "maxIncreasingGroups(u = [1, 5, 1, 5, 4, 3, 2, 4])",
        "maxIncreasingGroups(u = [1, 1, 2, 1, 2, 3, 2, 2, 3, 3, 2, 1, 2, 2, 3, 4, 2, 1, 2, 2, 3, 2, 3, 3, 1, 2, 2, 3, 2, 2, 3, 3, 2, 1, 2, 2, 3, 2, 2, 3, 3, 2, 1, 2, 2, 3, 2, 2, 3, 3, 2, 1, 2, 2, 3, 2, 2, 3, 3, 2, 1, 2, 2, 3, 2, 2, 3, 3, 2, 1, 2, 2, 3, 2, 2, 3, 3, 2, 1, 2, 2, 3, 2, 2, 3, 3, 2, 1, 2, 2, 3, 2, 2, 3, 3, 2, 1, 2, 2, 3, 2, 2, 3, 3, 2, 1, 2, 2, 3, 2, 2, 3, 3, 2, 1, 2, 2, 3, 2, 2, 3, 3, 2, 1, 2, 2, 3, 2, 2, 3, 3, 2, 1, 2, 2, 3, 2, 2, 3, 3, 2, 1, 2, 2, 3, 2, 2, 3, 3, 2, 1, 2, 2, 3, 2, 2, 3, 3, 2, 1, 2, 2, 3, 2, 2, 3, 3, 2, 1, 2, 2, 3, 2, 2, 3, 3, 2, 1, 2, 2, 3, 2, 2, 3, 3,"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1,3,4,8], x = 3)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 3)",
        "minAbsoluteDifference(nums = [4,5,8], x = 2)",
        "minAbsoluteDifference(nums = [5,4,3,2,1], x = 3)",
        "minAbsoluteDifference(nums = [1,3,6,10,15], x = 3)",
        "minAbsoluteDifference(nums = [1, 3, 4, 8, 10, 20, 30, 50], x = 3)",
        "minAbsoluteDifference(nums = [4,1,5,20,3], x = 2)",
        "minAbsoluteDifference(nums = [1,-1,-1,3], x = 1)",
        "minAbsoluteDifference(nums = [5,4,9,10], x = 2)",
        "minAbsoluteDifference(nums = [3, 6, 1, 2, 4, 5, 10], x = 6)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [0, 1, 2, 3, 4], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [2, 1, 1, 2], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 4, 2, 7, 5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [0, 1, 1, 0, 0, 1, 0, 1], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [4, 6, 2, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 4, 0, 5, 4], modulo = 10, k = 5)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 2, 3, 4], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 15)",
        "canSplitArray(nums = [1, 2, 3], m = 1)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 13)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 13)",
        "canSplitArray(nums = [1, 2, 1], m = 2)",
        "canSplitArray(nums = [1, 2, 1], m = 2)",
        "canSplitArray(nums = [1, 2, 1, 1, 1], m = 2)"
    ],
    "sample_169": [
        "isAcronym(words = [\"this\", \"is\", \"an\", \"acronym\"], s = \"TIAN\")",
        "isAcronym(words = [\"I\", \"AM\", \"GROOT\"], s = \"IG\")",
        "isAcronym(words = [\"Ministry\", \"of\", \"Education\"], s = \"MOE\")",
        "isAcronym(words = [\"is\", \"it\", \"this\"], s = \"iit\")",
        "isAcronym(words = [\"North\", \"Carolina\", \"State\", \"University\", \"Chapel\", \"Hill\"], s = \"NCSUCH\")",
        "isAcronym(words = [\"bread\", \"pants\", \"banana\"], s = \"bpb\")",
        "isAcronym(words = [\"international\", \"occupation\", \"of\", \"heavy\", \"industrial\", \"and\", \"mechanical\", \"workers\"], s = \"i oh h i m w\")",
        "isAcronym(words = ['Microsoft', 'International', 'Standard', 'Universal', 'Integration'], s = 'MISU')",
        "isAcronym(words = ['Tom', 'King', 'Lowry'], s = 'TKL')",
        "isAcronym(words = ['I', 'am', 'Mario', 'Brosius'], s = \"IBAM\")"
    ],
    "sample_121": [
        "minimumIndex(nums = [1, 2, 2, 3, 1])",
        "minimumIndex(nums = [0, 1, 2, 3, 4])",
        "minimumIndex(nums = [1, 2, 3])",
        "minimumIndex(nums = [4, 3, 2, 1])",
        "minimumIndex(nums = [0,1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex(nums = [1,3,3,1,1])",
        "minimumIndex(nums = [2, 2, 3, 5, 7])",
        "minimumIndex(nums = [2,2,3,2,3,4,3])",
        "minimumIndex(nums = [1, 2, 3, 4, 2, 3, 5, 5])",
        "minimumIndex(nums = [-7,-8,2,3,4,5,6,8])"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 2, offers = [[1,2,3],[2,3,4],[3,4,5]])",
        "maximizeTheProfit(n = 2, offers = [[1,3,2],[2,3,5],[1,2,7]])",
        "maximizeTheProfit(n = 6, offers = [[1, 6, 10], [2, 3, 10], [3, 4, 10], [4, 5, 10], [5, 6, 10], [6, 7, 10]])",
        "maximizeTheProfit(n = 4, offers = [[1, 4, 2], [3, 5, 3], [2, 3, 1], [4, 5, 2], [1, 1, 1]])",
        "maximizeTheProfit(n = 3, offers = [[2, 2, 3], [1, 3, 4], [0, 1, 2]])",
        "maximizeTheProfit(n = 2, offers = [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "maximizeTheProfit(n = 3, offers = [[1, 1, 10], [2, 2, 5], [1, 3, 6]])",
        "maximizeTheProfit(n = 3, offers = [(2, 3, 2), (3, 2, 1), (2, 2, 1)])",
        "maximizeTheProfit(n = 10, offers = [[2, 6, 2], [5, 12, 5], [9, 20, 9], [1, 10, 1]])",
        "maximizeTheProfit(n = 10, offers = [[2, 6, 5], [3, 7, 4], [2, 2, 3], [5, 8, 6]])"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [-7, -3, -2, 5, 8])",
        "maximumTripletValue(nums = [2, -1, 2])",
        "maximumTripletValue(nums = [5, 1, 3])",
        "maximumTripletValue(nums = [1, 2, 0, 2])",
        "maximumTripletValue(nums = [3, 4, 5, 6, 2])",
        "maximumTripletValue(nums = [-3, 1, 2, 4, 8])",
        "maximumTripletValue(nums = [-7, -1, 2, 3])",
        "maximumTripletValue(nums = [0, -1, -2, 0, -3, 1])"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"RRRLLL\")",
        "furthestDistanceFromOrigin(moves = \"RLLL\")",
        "furthestDistanceFromOrigin(moves = \"RRRRLLLL\")",
        "furthestDistanceFromOrigin(moves = \"RLLLLRRRLR\")",
        "furthestDistanceFromOrigin(moves = \"_RRLL\")",
        "furthestDistanceFromOrigin(moves = \"LLLRRLL\")",
        "furthestDistanceFromOrigin(moves = \"LLLRRR__\")",
        "furthestDistanceFromOrigin(moves = \"R__LRLRLR\")",
        "furthestDistanceFromOrigin(moves = \"LRLR__LR\")",
        "furthestDistanceFromOrigin(moves = \"RLL__RRRRR_L\")"
    ],
    "sample_149": [
        "finalString(s = 'rtsng')",
        "finalString(s = \"tsing\")",
        "finalString(s = \"tsrngi\")",
        "finalString(s = 'reverse this string')",
        "finalString(s = \"itsrtsng\")",
        "finalString(s = 'eia')",
        "finalString(s = \"thisismyfirststring\")",
        "finalString(s = 'isitdog')",
        "finalString(s = 'rtsgtsing')",
        "finalString(s = \"niersng\")"
    ],
    "sample_162": [
        "maxSum(nums = [30, 11, 23, 4, 20])",
        "maxSum(nums = [33, 11, 77, 33, 90])",
        "maxSum(nums = [14, 2, 6, 88, 38, 1])",
        "maxSum(nums = [21, 50, 45, 24, 75, 37, 100])",
        "maxSum(nums = [123, 44, 45, 2, 4, 66, 99, 9])",
        "maxSum(nums = [21, 25, 31, 12, 40, 24, 25, 29])",
        "maxSum(nums = [53, 63, 61, 79, 60, 67, 62, 36, 100, 96])",
        "maxSum(nums = [13, 5, 77, 99, 101, 99, 2000, 1999, 2000, 1998, 1997, 2000, 2001, 2002, 10000, 10001])",
        "maxSum(nums = [212, 462, 501, 269, 146, 973, 878, 626])",
        "maxSum(nums = [21, 4, 2, 8, 12, 13, 4, 20, 11, 7, 14, 1, 2, 19, 12, 6, 2, 14, 10])"
    ],
    "sample_230": [
        "countWays(nums = [1, 2, 2])",
        "countWays(nums = [1, 1, 1, 1, 1])",
        "countWays(nums = [1, 1, 1, 1])",
        "countWays(nums = [1, 2, 3, 4, 5, 6])",
        "countWays(nums = [1, 3, 2])",
        "countWays(nums = [1, 1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "countWays(nums = [5, 1, 4, 3])",
        "countWays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])",
        "countWays(nums = [4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 2, target = 10)",
        "minimumPossibleSum(n = 5, target = 3)",
        "minimumPossibleSum(n = 10, target = 20)",
        "minimumPossibleSum(n = 3, target = 11)",
        "minimumPossibleSum(n = 1000, target = 100000)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 3, offers = [[1, 2, 5], [2, 3, 10]])",
        "maximizeTheProfit(N = 3, offers = [[0, 1, 2], [1, 2, 3], [2, 3, 4]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 3], [2, 4, 3]])",
        "maximizeTheProfit(N = 2, offers = [[1, 1, 2], [1, 2, 4], [2, 1, 3]])",
        "maximizeTheProfit(N = 5, offers = [[0, 1, 2], [1, 2, 4], [2, 4, 3]])",
        "maximizeTheProfit(N = 5, offers = [[3, 2, 500], [1, 2, 900], [2, 5, 100], [3, 4, 1100]])",
        "maximizeTheProfit(N = 10, offers = [[1, 4, 3], [2, 5, 3], [4, 6, 6]])",
        "maximizeTheProfit(N = 3, offers = [[0, 1, 5], [0, 2, 3], [0, 1, 1], [1, 2, 1], [1, 3, 1], [2, 3, 3]])",
        "maximizeTheProfit(N = 6, offers = [\n    [3, 3, 2],\n    [2, 2, 3],\n    [3, 4, 4],\n    [2, 3, 3],\n    [2, 2, 4],\n    [1, 1, 3],\n])",
        "maximizeTheProfit(N = 5, offers = [[2, 2, 3], [3, 5, 4], [5, 6, 6], [2, 3, 1], [2, 5, 7], [5, 4, 6], [3, 4, 7]])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 3, offers = [[0, 1, 5], [1, 2, 10], [0, 2, 6]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 10]])",
        "maximizeTheProfit(n = 10, offers = [[1, 2, 5], [3, 5, 10], [4, 8, 15]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [3, 4, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 1, 3], [1, 2, 4], [2, 3, 6]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 4], [1, 2, 8], [2, 3, 8], [3, 4, 10]])",
        "maximizeTheProfit(n = 4, offers = [[0, 3, 1], [0, 2, 2], [1, 1, 2], [1, 3, 2], [2, 3, 3]])",
        "maximizeTheProfit(n = 6, offers = [[0, 1, 1], [2, 4, 6], [3, 5, 7], [0, 2, 8], [0, 3, 9], [0, 4, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 4], [2, 4, 6], [2, 3, 8], [5, 6, 10], [6, 7, 12], [6, 8, 16], [7, 8, 14]])",
        "maximizeTheProfit(n = 10, offers = [[1, 2, 3], [2, 3, 4], [4, 5, 6], [3, 4, 5], [5, 6, 7], [5, 7, 8], [6, 7, 9], [8, 9, 10], [3, 8, 11], [6, 9, 12]])"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 0, 0, 0, 0], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 1, 1, 1, 1], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 8, 12], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 3, 3, 3], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 1, 2, 3], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 40, 10], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 10, 4, 3, 8], target = 9)"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [2,3,1,6,7])",
        "countCompleteSubarrays(nums = [0,1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countCompleteSubarrays(nums = [0,1,2,0,1,2])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 2, 5])",
        "countCompleteSubarrays(nums = [1,2,0])",
        "countCompleteSubarrays(nums = [2, 2, 2, 2, 2])",
        "countCompleteSubarrays(nums = [10,5,20,4,1,6])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1,2,3,4])",
        "countWays(nums = [1, 3, 5, 6, 7, 8])",
        "countWays(nums = [1, 1, 3, 5])",
        "countWays(nums = [3, 2, 1, 0, -1, -2, -3])",
        "countWays(nums = [1, 2, 3, 4, 5, 1, 2])",
        "countWays(nums = [1, 3, 5, 7, 8, 10, 12, 14, 16])",
        "countWays(nums = [0, 1, 2, 3, 4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [1, 1, 1, 1])",
        "maxIncreasingGroups(usageLimits = [2, 2, 1, 2, 1])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])",
        "maxIncreasingGroups(usageLimits = [15, 10, 9, 5, 3, 1])",
        "maxIncreasingGroups(usageLimits = [9, 2, 4, 6, 8, 1])",
        "maxIncreasingGroups(usageLimits = [2, 1, 4, 6, 3, 5, 7, 4, 9])",
        "maxIncreasingGroups(usageLimits = [2, 5, 4, 8, 6, 4, 3, 2, 6, 2])",
        "maxIncreasingGroups(usageLimits = [3, 1, 10, 5, 6, 1, 3, 1, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5, 2, 2, 5, 2, 2, 3, 4, 4, 3])",
        "maxIncreasingGroups(usageLimits = [955, 739, 853, 536, 632, 909])"
    ],
    "sample_173": [
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 4, k = 2)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 5)"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 1, 2, 2, 3], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 2, 2, 3], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [2, 4, 6], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 1, 1, 1], m = 1, k = 0)",
        "countInterestingSubarrays(nums = [4, 10, 4, 10, 4, 10], m = 5, k = 4)",
        "countInterestingSubarrays(nums = [0, 1, 2, 0, 1, 2, 3, 0, 1, 2, 0, 1, 2, 3, 0, 1, 2, 0, 1, 2, 3, 0, 1, 2], m = 3, k = 1)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1, 2, 1, 3])",
        "countCompleteSubarrays(nums = [0, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [2, 3, 1, 6, 7])",
        "countCompleteSubarrays(nums = [4, 2, 3, 4, 4])",
        "countCompleteSubarrays(nums = [1,1,1,1,1,1])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 2, 5, 1])",
        "countCompleteSubarrays(nums = [4,2,2,3,3,1])"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,2,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,3,1,2,4,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,2,3,1,4,1,2,3], k = 2)"
    ],
    "sample_170": [
        "isAcronym(words = [\"I\", \"love\", \"Python\"], s = \"ILovePython\")",
        "isAcronym(words = [\"This\", \"is\", \"a\", \"test\"], s = \"TIAT\")",
        "isAcronym(words = [\"This\", \"Is\", \"A\", \"Test\"], s = \"TIAT\")",
        "isAcronym(words = [\"hi\", \"there\"], s = \"h\")",
        "isAcronym(words = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"], s = \"eat\")",
        "isAcronym(words = [\"this\", \"is\", \"an\", \"example\"], s = \"aie\")",
        "isAcronym(words = [\"air\", \"airplane\", \"airborne\"], s = \"aap\")",
        "isAcronym(words = [\"Dot\", \"Notation\", \"Separated\", \"List\"], s = \"DNSEL\")",
        "isAcronym(words = [\"benjamin\", \"duckett\", \"kennedys\", \"andrews\"], s = \"BDAKA\")",
        "isAcronym(words = [\"Cry\", \"o\", \"me\", \"t\", \"O\", \"nce\", \"upo\", \"n\", \"Ti\", \"me\"], s = \"COMOTUTI\")"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '0001')",
        "maximumOddBinaryNumber(s = '0001')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '111')",
        "maximumOddBinaryNumber(s = '10111')",
        "maximumOddBinaryNumber(s = \"01110101\")",
        "maximumOddBinaryNumber(s = \"00100001001001001\")",
        "maximumOddBinaryNumber(s = '01111001110100100')",
        "maximumOddBinaryNumber(s
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 1, 2])",
        "countWays(nums = [-1, 0, 1])",
        "countWays(nums = [1, 2, 3, 3])",
        "countWays(nums = [3, 1, 2])",
        "countWays(nums = [1, 3, 6])",
        "countWays(nums = [-4, -2, 1, 2, 3])",
        "countWays(nums = [1, 3, 1, 2, 5])",
        "countWays(nums = [1, 3, 3, 3, 3, 2])"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 5, offers = [[1, 1, 1], [2, 3, 2], [3, 4, 6], [4, 6, 7]])",
        "maximizeTheProfit(n = 2, offers = [[1, 1, 6], [1, 2, 3], [2, 2, 4]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 2], [2, 1, 3], [2, 3, 3]])",
        "maximizeTheProfit(n = 4, offers = [[0, 0, 5], [1, 1, 10], [3, 2, 15]])",
        "maximizeTheProfit(n = 5, offers = [[3, 2, 10], [2, 2, 5]])",
        "maximizeTheProfit(n = 3, offers = [[2, 1, 5], [3, 2, 10], [1, 3, 10]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [2, 4, 5], [2, 4, 7]])",
        "maximizeTheProfit(n = 4, offers = [[2, 0, 2], [2, 1, 3], [1, 2, 3], [3, 2, 5], [0, 1, 1]])",
        "maximizeTheProfit(n = 4, offers = [[0, 1, 1], [1, 0, 3], [3, 0, 5], [0, 3, 4], [2, 1, 10]])",
        "maximizeTheProfit(n = 5, offers = [[2, 1, 1], [2, 1, 1], [1, 3, 3], [3, 5, 2], [4, 3, 1], [4, 3, 1], [4, 3, 1], [4, 3, 1], [3, 2, 2], [5, 4, 2]])"
    ],
    "sample_122": [
        "minimumIndex(nums = [1, 2, 3, 4, 5])",
        "minimumIndex(nums = [1,1,2,2,3])",
        "minimumIndex(nums = [1,2,3,1,3])",
        "minimumIndex(nums = [0,1,2,3,4,5,6,7,8,9,10,11])",
        "minimumIndex(nums = [3,2,2,3])",
        "minimumIndex(nums = [4, 3, 2, 1, 0, 1, 2, 3, 4])",
        "minimumIndex(nums = [1,1,3,1,2,1])",
        "minimumIndex(nums = [1, 0, 1, 1, 0, 1, 1, 1, 0])",
        "minimumIndex(nums = [3,2,3,1,1,3,2,3,1,2,3,3])",
        "minimumIndex(nums = [3,2,2,2,3,3,3,2,3,2,3,3,3,3,2,2,3,3])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1, 2], [1, 3], [2, 3]])",
        "numberOfPoints(nums = [[1,2],[1,4],[3,4]])",
        "numberOfPoints(nums = [[1,3], [2,6], [3,4]])",
        "numberOfPoints(nums = [[1,4],[3,5]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [3, 5]])",
        "numberOfPoints(nums = [[3,10],[4,10],[10,20]])",
        "numberOfPoints(nums = [[1, 5], [2, 3], [3, 4], [4, 5]])",
        "numberOfPoints(nums = [[1,2],[2,3],[2,4],[1,3],[1,4],[2,5]])",
        "numberOfPoints(nums = [[1,2],[1,3],[1,5],[1,7],[1,9]])",
        "numberOfPoints(nums = [[2, 3], [4, 8], [10, 10], [1, 1], [2, 4], [10, 10]])"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"a.b\", \"\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"a, b, c\", \"d, e\", \"f\"], separator = \", \")",
        "splitWordsBySeparator(words = [\"banana\", \" \", \"apple\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"helloworld\", \"hello,world\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"a,b\", \"1,2\", \"c,d\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"a-b-c\", \"\", \"---d\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"0/1/2/3/4/5\"], separator = \"/\")",
        "splitWordsBySeparator(words = [\"hi, my name is\", \"hello, world\"], separator = \" \")",
        "splitWordsBySeparator(words = ['q:','w;','e,','r'], separator = ':')"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 0, target = 0)",
        "minimumPossibleSum(n = 5, target = 3)",
        "minimumPossibleSum(n = 3, target = 5)"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [4, 5]])",
        "numberOfPoints(nums = [[1, 3], [1, 5], [5, 7]])",
        "numberOfPoints(nums = [[1, 3], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [1, 4], [2, 7]])",
        "numberOfPoints(nums = [[1, 3], [6, 9], [2, 6], [1, 2], [2, 4], [4, 7], [5, 7]])",
        "numberOfPoints(nums = [[1, 3], [4, 6], [7, 100]])",
        "numberOfPoints(nums = [[1, 3], [1, 4], [2, 8], [8, 10]])",
        "numberOfPoints(nums = [[1, 5], [2, 3], [4, 7], [1, 7]])",
        "numberOfPoints(nums = [[1, 2], [4, 8], [10, 11], [7, 8]])",
        "numberOfPoints(nums = [[1, 3], [1, 4], [2, 5], [2, 7], [3, 6], [3, 8], [4, 8], [5, 7], [6, 8], [7, 8]])"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 4, 6], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [2,1,2,4,3], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1, 3], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1,1,2,1,1,2,1,2,2,2], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [2, 2, 1, 3, 5, 2, 4, 2, 1, 3, 5, 2, 4, 2, 1, 3, 5, 2, 4], m = 6, k = 4)"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [3, 1, 2, 5, 4, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 1, 2, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 2, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 1, 2, 5, 4, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 1, 2, 3, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [3, 1, 2, 3, 2, 1, 2, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [10,2,3,4,5,6,7,8,9,10,11,12,13,14,15], k = 1)"
    ],
    "sample_203": [
        "minimumOperations(num = \"01\")",
        "minimumOperations(num = \"000\")",
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"2525\")",
        "minimumOperations(num = \"500\")",
        "minimumOperations(num = \"525\")",
        "minimumOperations(num = \"27\")",
        "minimumOperations(num = \"10000\")",
        "minimumOperations(num = \"021\")",
        "minimumOperations(num = \"5757\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1,2,3,4], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 6], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1,2,4,5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [3,1,2,4], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1,1,2,2,3,1], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [0,1,0,0,1], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [3, 5, 7, 11, 13, 17], modulo = 11, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 2, 6, 4, 3, 1, 3, 2, 1, 2, 2], modulo = 5, k = 3)"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1, 2, 1, 2, 3], K = 0)",
        "longestEqualSubarray(A = [1,2,1,2,3], K = 2)",
        "longestEqualSubarray(A = [1,2,3,1,2,3,1,2,3], K = 0)",
        "longestEqualSubarray(A = [1,2,1,2,1,1], K = 2)",
        "longestEqualSubarray(A = [1,2,2,2,2,3], K = 1)",
        "longestEqualSubarray(A = [2,3,1,4,2,3], K = 2)",
        "longestEqualSubarray(A = [10, 2, 5, 2, 4], K = 1)",
        "longestEqualSubarray(A = [1, 2, 1, 3, 4, 4, 3, 3, 3, 4], K = 1)",
        "longestEqualSubarray(A = [1, 2, 1, 2, 1, 3, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2], K = 3)",
        "longestEqualSubarray(A = [1,3,1,4,2,3,5,4,9,2,3], K = 4)"
    ],
    "sample_146": [
        "finalString(s = 'pointer')",
        "finalString(s = \"pointer\")",
        "finalString(s = \"pointer\")",
        "finalString(s = 'pointer')",
        "finalString(s = 'itopn')",
        "finalString(s = 'ipperonter')",
        "finalString(s = 'cat')",
        "finalString(s = \"mister\")",
        "finalString(s = \"potintopener\")",
        "finalString(s = \"vniprnio')"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 13, 14, 15], target = 13)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10, 10, 10, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 15, 25, 30], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [40, 10, 30, 20], target = 25)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 10, 10, 10, 10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 7, 8, 8, 7, 7, 7, 8], target = 7)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]])",
        "numberOfPoints(nums = [[1, 3], [1, 7], [4, 7]])",
        "numberOfPoints(nums = [[1, 3], [1, 3], [2, 5], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 3], [3, 4], [3, 5]])",
        "numberOfPoints(nums = [[1,3], [1,4], [2,5], [1,2]])",
        "numberOfPoints(nums = [[1, 3], [1, 5], [2, 7], [3, 5], [4, 5]])",
        "numberOfPoints(nums = [[1, 3], [1, 5], [2, 5], [2, 4]])",
        "numberOfPoints(nums = [[1, 3], [6, 7], [1, 4], [2, 5]])",
        "numberOfPoints(nums = [[1, 3], [1, 7], [2, 4], [2, 8], [4, 7], [4, 9], [5, 9]])",
        "numberOfPoints(nums = [[1, 1], [3, 3], [1, 3], [2, 2], [2, 4], [4, 4], [3, 6]])"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 2, 3])",
        "maxIncreasingGroups(A = [1, 2, 3, 4])",
        "maxIncreasingGroups(A = [1, 2, 3, 4])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(A = [1, 3, 5, 4, 7])",
        "maxIncreasingGroups(A = [1,2,3,4,5])",
        "maxIncreasingGroups(A = [2, 1, 5, 6, 2, 3])",
        "maxIncreasingGroups(A = [1, 3, 2, 2, 5, 2, 3, 7])",
        "maxIncreasingGroups(A = [1, 4, 3, 5])",
        "maxIncreasingGroups(A = [1, 3, 2, 1, 2, 3, 6, 5, 4, 5])"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 3, offers = [[1,1,1],[2,2,1],[3,3,1]])",
        "maximizeTheProfit(n = 2, offers = [[1, 1, 1], [2, 2, 2]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 2], [2, 1, 1], [3, 3, 1]])",
        "maximizeTheProfit(n = 6, offers = [[1,2,3],[2,5,2]])",
        "maximizeTheProfit(n = 6, offers = [[1,2,3],[2,3,2],[3,5,100]])",
        "maximizeTheProfit(n = 10, offers = [[5,0,3],[4,2,3],[2,6,3]])",
        "maximizeTheProfit(n=7, offers = [[1,2,2],[2,1,2],[3,2,5]])",
        "maximizeTheProfit(n = 7, offers = [[1,1,3],[3,4,5],[6,7,7],[8,10,12]])",
        "maximizeTheProfit(n=5,offers=[[2,3,2],[3,2,2],[2,1,2],[1,2,6],[3,2,5]])",
        "maximizeTheProfit(n = 12, offers = [[1,5,2],[1,4,3],[2,2,6],[5,5,4],[5,4,5]])"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"LRLRLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"RRR_R_RR\")",
        "furthestDistanceFromOrigin(moves = \"RR_RR_RR_RR_RR\")",
        "furthestDistanceFromOrigin(moves = \"LLR_RR\")",
        "furthestDistanceFromOrigin(moves = \"RRLRL\")",
        "furthestDistanceFromOrigin(moves = \"RRLRR\")",
        "furthestDistanceFromOrigin(moves = \"R_LRLRLRLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LR__RR_RR\")",
        "furthestDistanceFromOrigin(moves = \"LR__R_L_R\")",
        "furthestDistanceFromOrigin(moves = \"L_RLRRLLLLLRLRRR_LLRL_RR\")"
    ],
    "sample_175": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 4, k = 5)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 5, k = 10)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,2],[2,3],[3,4]])",
        "numberOfPoints(nums = [[1, 4], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[2,5],[6,9]])",
        "numberOfPoints(nums = [[1, 5],[2, 3],[4, 7]])",
        "numberOfPoints(nums = [[1,10],[20,30]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [2, 3], [4, 5], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [1, 2], [3, 5]])",
        "numberOfPoints(nums = [[5,10],[2,6],[9,12]])",
        "numberOfPoints(nums = [[1,4],[2,8],[3,6],[1,3]])",
        "numberOfPoints(nums = [[2,3],[3,4],[4,5],[5,6],[6,8],[8,9],[9,10]])"
    ],
    "sample_205": [
        "minimumOperations(num = \"1001\")",
        "minimumOperations(num = \"50\")",
        "minimumOperations(num = \"0050\")",
        "minimumOperations(num = \"001100\")",
        "minimumOperations(num = \"00110011\")",
        "minimumOperations(num = \"5\")",
        "minimumOperations(num = \"1201\")",
        "minimumOperations(num = \"10100100\")",
        "minimumOperations(num = \"010100110\")",
        "minimumOperations(num = \"1001011010101010111101000010010101010010101010101000101111010001\")"
    ],
    "sample_120": [
        "minimumIndex(nums = [1, 3, 5])",
        "minimumIndex(nums = [1, 2, 3, 4, 5])",
        "minimumIndex(nums = [1, 3, 5, 3])",
        "minimumIndex(nums = [3, 1, 2, 1])",
        "minimumIndex(nums = [2, 3, 4, 2, 3, 4, 2, 3, 4, 2])",
        "minimumIndex(nums = [2, 3, 4, 3, 2, 4, 2])",
        "minimumIndex(nums = [1, 4, 4, 0, 3, 1, 3])",
        "minimumIndex(nums = [1, 4, 5, 5, 6, 7, 9, 10])",
        "minimumIndex(nums = [-1, 2, 4, 2])",
        "minimumIndex(nums = [1, 2, 2, 2, 2, 3, 4, 5, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"RLRLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"RLRLLRLL\")",
        "furthestDistanceFromOrigin(moves = \"LLLLL___RRRRRR\")",
        "furthestDistanceFromOrigin(moves = \"RRRR_LLLLR\")",
        "furthestDistanceFromOrigin(moves = \"RLL__LRLRR\")",
        "furthestDistanceFromOrigin(moves = \"L_RLRRL_L\")",
        "furthestDistanceFromOrigin(moves = \"RRR_LLL_RRR_LLL_RRR_LLL_RRR_LLL\")",
        "furthestDistanceFromOrigin(moves = \"R_RLRLRLRLRLRLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"_RRL_RRRLL\")",
        "furthestDistanceFromOrigin(moves
    ],
    "sample_161": [
        "maxSum(nums = [2, 7, 9, 3, 1])",
        "maxSum(nums = [10, 2, 3, 4])",
        "maxSum(nums = [3, 30, 35, 5, 9])",
        "maxSum(nums = [-1, 99])",
        "maxSum(nums = [2, 1, 9, 6])",
        "maxSum(nums = [42, 11, 3, 5])",
        "maxSum(nums = [88, 50, 20, 10, 100])",
        "maxSum(nums = [11, 78, 36, 59, 21, 44, 73])",
        "maxSum(nums = [-23, -2, -5, -13, -23, -24, 20, 13, 23, -20])",
        "maxSum(nums = [-8492, -3381, -6987, 7906, 6493, -8238, 8490, 9003, -7650, 9182])"
    ],
    "sample_160": [
        "maxSum(nums = [1, 1, 1])",
        "maxSum(nums = [1, 3, 4, 5, 2])",
        "maxSum(nums = [3,4,1,3])",
        "maxSum(nums = [1234, 2345, 3456, 4567, 5678])",
        "maxSum(nums = [24, 70])",
        "maxSum(nums = [32, 324, 34, 56, 23, 2, 423, 43])",
        "maxSum(nums = [701, 700, 702, 700])",
        "maxSum(nums = [12,1,23,1,2,23,24])",
        "maxSum(nums = [10, 4, 7, 2, 3, 10, 8, 3])",
        "maxSum(nums = [23, 31, 30, 14, 21, 28, 26, 10, 1, 7, 29, 13, 3, 24, 27, 20, 12, 9, 11, 16, 15, 25, 17, 2, 18, 19, 6, 8, 22, 1, 23, 20, 26, 29, 18, 13, 15, 25, 12, 22, 19, 17, 24, 27, 28, 31, 21, 23, 11, 16, 10, 9, 8, 7, 30, 14, 2, 6, 1, 5, 3, 23, 26, 29, 20, 27, 18, 13, 15, 25, 12, 22, 19, 17, 24, 28, 31, 21, 23, 11, 16, 10, 9, 8, 7, 30, 14, 2, 6, 1, 5, 3, 23, 26, 29, 20, 27, 18, 13, 15, 25, 12, 22, 19, 17, 24, 28, 31, 21, 23, 11, 16, 10, 9, 8, 7, 30, 14, 2, 6, 1, 5, 3, 23, 26, 29, 20, 27, 18, 13, 15, 25, 12, 22, 19, 17, 24, 28, 31, 21, 23, 11, 16, 10, 9, 8, 7, 30, 14, 2, 6, 1, 5, 3,"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = ['one,two,three', 'four,five,six'], separator = ',')",
        "splitWordsBySeparator(words = ['one-two-three', 'four-five-six'], separator = '-')",
        "splitWordsBySeparator(words = ['one|two|three', 'four|five|six'], separator = '|')",
        "splitWordsBySeparator(words = [\"one,two\", \"three\", \"four,five,six\"])",
        "splitWordsBySeparator(words = [\"one-two-three\", \"four-five\", \"six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three,four\", \"five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = ['one|two|three|four|five', 'six'], separator = '|')",
        "splitWordsBySeparator(words = \"one/two/three/four/five/six\", separator = \"/\")",
        "splitWordsBySeparator(words = \"one,two,three,four,five,six\".split(','))",
        "splitWordsBySeparator(words = ['one.two.three', 'four', 'five.', 'six'], separator = '.')"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [0], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 0], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 8, 0], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 1, 1], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 15, 2], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 10, 2], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 16, 21], target = 16)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 3, 4, 1, 2], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [50, 20, 40, 30, 10, 30, 20, 20, 30, 10, 20, 10, 10, 20, 10], target = 20)"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [0, 0, 0, 0], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 10, 11, 12], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 3], target = 0)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 10, 12], target = 13)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 8], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 0, 1, 2, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 6, 3, 1, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 10, 15, 0, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [20,20,18,25], target = 21)"
    ],
    "sample_171": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 4, k = 2)",
        "minimumSum(n = 4, k = 2)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 4, k = 5)",
        "minimumSum(n = 4, k = 6)",
        "minimumSum(n = 4, k = 1)",
        "minimumSum(n = 1, k = 1)",
        "minimumSum(n = 3, k = 12)"
    ],
    "sample_159": [
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10])",
        "maxSum(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
        "maxSum(nums = [11,12,13,14])",
        "maxSum(nums = [10,11,12,13])",
        "maxSum(nums = [2, 3, 8, 4, 6])",
        "maxSum(nums = [11,22,33,1,2,3])",
        "maxSum(nums = [435,435,435])",
        "maxSum(nums = [432,5653,653,5])",
        "maxSum(nums=[92, 70, 20])",
        "maxSum(nums = [18, 13, 7, 10, 24, 6, 1])"
    ],
    "sample_157": [
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 2)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 2)",
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 15)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3], m = 3)",
        "canSplitArray(nums = [2, 2, 2], m = 2)",
        "canSplitArray(nums = [1, 4, 8, 10], m = 7)",
        "canSplitArray(nums = [2, 1, 2, 0, 2, 1], m = 3)",
        "canSplitArray(nums = [3, 10, 5, 6, 1], m = 16)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"apple,orange,banana\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"-\", \"--\", \"-\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"\"], separator = \"p\")",
        "splitWordsBySeparator(words = [\"one;two\", \"three;four\"], separator = \";\")",
        "splitWordsBySeparator(words = [\"a-b\", \"c--d\", \"--e\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"i|am|a|long|string\", \"i|am|a|long|string\"], separator = \"|\")",
        "splitWordsBySeparator(words = [\"ip-ipip-ip\", \"ip-ipip-ip\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"we are #artists\", \"united #we #are\"], separator = \"#\")",
        "splitWordsBySeparator(words = [\"apple,banana,cherry\", \"orange,apple,mango\", \"pineapple,peach\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"q|q|q|q\", \"b|n|a|n|a\", \"a|n|a\", \"c|a|t\"], separator = \"|\")"
    ],
    "sample_172": [
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 4, k = 2)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 1, k = 1)"
    ],
    "sample_228": [
        "countWays(nums = [0, 1, 2])",
        "countWays(nums = [0, 1, 2, 3, 4])",
        "countWays(nums = [1,1,2])",
        "countWays(nums = [3, 0, 1, 2])",
        "countWays(nums = [0,1,3])",
        "countWays(nums = [1,2,4,3])",
        "countWays(nums = [2,4,3,2])",
        "countWays(nums = [1, 4, 2, 0, 3])",
        "countWays(nums = [2, 1, 3, 5, 4, 6, 7])",
        "countWays(nums = [2, 3, 0, 4, 0, 2, 1])"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '0001')",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = '10101')",
        "maximumOddBinaryNumber(s = \"010\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = '1000111')",
        "maximumOddBinaryNumber(s = \"011101110111\")",
        "maximumOddBinaryNumber(s = '1111000')",
        "maximumOddBinaryNumber(s = \"11110\")"
    ],
    "sample_119": [
        "minimumIndex(nums = [3, 1, 2])",
        "minimumIndex(nums = [1, 1, 2, 2, 3, 3])",
        "minimumIndex(nums = [4, 3, 2, 3, 5, 2, 1])",
        "minimumIndex(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minimumIndex(nums = [1, 2, 3, 2, 3])",
        "minimumIndex(nums = [1, 2, 2, 1, 1, 1, 2, 2, 2])",
        "minimumIndex(nums = [1, 1, 2, 3, 5, 5, 7, 7])",
        "minimumIndex(nums = [2, 2, 2, 4, 2, 2, 2, 4])",
        "minimumIndex(nums = [1, 3, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 12, 12, 12, 12])",
        "minimumIndex(nums = [5, 5, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5])"
    ],
    "sample_153": [
        "canSplitArray(nums = [7,2,5,10,8], m = 16)",
        "canSplitArray(nums = [7,2,5,10,8], m = 16)",
        "canSplitArray(nums = [7,2,5,10,8], m = 16)",
        "canSplitArray(nums = [7,2,5,10,8], m = 16)",
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "canSplitArray(nums = [1,1,1,2,2,1,7], m = 2)",
        "canSplitArray(nums = [1,2,4,5,7,8], m = 12)"
    ],
    "sample_147": [
        "finalString(s = 'string')",
        "finalString(s = 'rtsing')",
        "finalString(s = \"strings\")",
        "finalString(s = \"srtsng\")",
        "finalString(s = 'ietsgnirts')",
        "finalString(s = \"btsing\")",
        "finalString(s = \"noting\")",
        "finalString(s = 'twister')",
        "finalString(s = \"hiceirtsng\")",
        "finalString(s = 'the string is not important')"
    ],
    "sample_174": [
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 4, k = 6)",
        "minimumSum(n = 3, k = 100)"
    ],
    "sample_154": [
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [7,2,5,10,8], m = 22)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1,2,3,4,5], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 6)",
        "canSplitArray(nums = [1,4,4], m = 8)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7], m = 6)",
        "canSplitArray(nums = [1,1,1,1,4,4], m = 3)",
        "canSplitArray(nums = [7, 1, 5, 8, 9, 10], m = 10)"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1,2,3,4])",
        "countCompleteSubarrays(nums = [1, 1, 2, 1, 1])",
        "countCompleteSubarrays(nums = [2,5,2,1,2])",
        "countCompleteSubarrays(nums = [2,1,2,4,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,1,3,2,4,5])",
        "countCompleteSubarrays(nums = [2, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1,2,0,3,4,5,6])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 4, 2, 3, 5])"
    ],
    "sample_150": [
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = \"string\")",
        "finalString(s = 'its')",
        "finalString(s = 'its')",
        "finalString(s = \"reverse this string\")",
        "finalString(s = 'tincon')"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 4, target = 10)"
    ],
    "sample_176": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 3, k = 11)"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1,2,4,0], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1,1,2,2,3], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 1, 1, 0, 1], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 4], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [3,1,4,2], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [0,0,1,1,0,0,1,1,0,1,1,0], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 5, 1, 3, 4, 2, 4], modulo = 10, k = 3)"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 1, 2, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 4, 5, 6], k = 1)",
        "sumIndicesWithKSetBits(nums = [3, 1, 2, 5, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 1, 2, 4, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 1, 12, 11, 13, 14, 15, 16], k = 1)"
    ],
    "sample_151": [
        "finalString(s = 'string')",
        "finalString(s = 'rtsng')",
        "finalString(s = 'testing')",
        "finalString(s = \"rtsing\")",
        "finalString(s = 'tsrng')",
        "finalString(s = 'sring')",
        "finalString(s = \"tset\")",
        "finalString(s = \"iots\")",
        "finalString(s = 'eratsng')",
        "finalString(s = 'Tis I who makes you stare')"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4], k = 1)",
        "sumIndicesWithKSetBits(nums = [0,1,0], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 2, 2], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3], k = 0)"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5, 6, 7])",
        "maxIncreasingGroups(usageLimits = [2, 2, 3, 1, 1])",
        "maxIncreasingGroups(usageLimits = [3, 4, 1, 5, 6])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 1, 2])",
        "maxIncreasingGroups(usageLimits = [100, 200, 200, 1000])",
        "maxIncreasingGroups(usageLimits = [9, 2, 3, 6])",
        "maxIncreasingGroups(usageLimits = [8, 2, 5, 7, 10])",
        "maxIncreasingGroups(usageLimits = [5, 2, 6, 10])",
        "maxIncreasingGroups(usageLimits = [10, 20, 30, 40, 11, 22, 33, 44, 100, 101])",
        "maxIncreasingGroups(usageLimits = [90, 50, 10, 20, 40, 70, 30, 60, 80, 110])"
    ],
    "sample_204": [
        "minimumOperations(s = \"000000\")",
        "minimumOperations(s = \"250\")",
        "minimumOperations(s
        "minimumOperations(s = \"2525\")",
        "minimumOperations(s = \"00025\")",
        "minimumOperations(s = \"00001111\")",
        "minimumOperations(s = \"11011\")",
        "minimumOperations(s = \"001100250\")",
        "minimumOperations(s = \"22255777\")",
        "minimumOperations(s = \"2005502050\")"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [40, 30, 60, 10], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 1, 4, 3, 2], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 15, 30], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [6, 8, 10, 12], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], target = 0)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 3, 5, 7, 8], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 5, 9, 4, 3, 6], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 40, 20, 50, 30, 20, 10, 40, 30, 20, 10, 40, 20, 10, 30, 20, 10, 50, 30, 20, 40, 30, 40, 10, 20, 30], target = 30)"
    ],
    "sample_148": [
        "finalString(s = 'pointer')",
        "finalString(s = 'pointer')",
        "finalString(s = \"pointer\")",
        "finalString(s = 'pinter')",
        "finalString(s = \"pinter\")",
        "finalString(s = 'ointer')",
        "finalString(s = 'interest')",
        "finalString(s = 'opinter')",
        "finalString(s = 'interstitial')",
        "finalString(s = \"intrepret\")"
    ],
    "sample_168": [
        "isAcronym(words = [\"This\", \"is\", \"an\", \"acronym\"], s = \"TIA\")",
        "isAcronym(words = [\"This\", \"is\", \"an\", \"acronym\"], s = \"TIAS\")",
        "isAcronym(words = ['internationalization', 'domestication'], s = 'i18n')",
        "isAcronym(words = [\"adrian\", \"is\", \"a\", \"good\", \"boy\"], s = \"aigb\")",
        "isAcronym(words = [\"mango\", \"orange\", \"apple\"], s = \"moa\")",
        "isAcronym(words = [\"This\", \"is\", \"a\", \"test\", \"to\", \"check\", \"if\", \"this\", \"works\"], s = \"TITWTCW\")",
        "isAcronym(words = [\"you\",\"are\",\"cute\"], s = \"yac\")",
        "isAcronym(words = ['hello', 'world', 'of', 'beautiful', 'soup'], s = 'HWOBS')",
        "isAcronym(words = [\"Dolphin\", \"Southern\", \"Dog\"], s = \"DS\")",
        "isAcronym(words = ['Melodic', 'External', 'Sensor'], s = 'MEES')"
    ],
    "sample_201": [
        "minOperations(nums = [2, 4, 8], target = 10)",
        "minOperations(nums = [3, 2, 2, 4], target = 8)",
        "minOperations(nums = [1, 2, 3], target = 4)",
        "minOperations(nums = [1,2,3], target = 1)",
        "minOperations(nums = [2, 3, 2], target = 7)",
        "minOperations(nums = [1, 2, 3, 4], target = 1)",
        "minOperations(nums = [1, 2, 3], target = 14)",
        "minOperations(nums = [1, 2, 4], target = 3)",
        "minOperations(nums = [1,2,3,4], target = 1)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8], target = 32)"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = '0101')",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = '11001')",
        "maximumOddBinaryNumber(s = '110011')",
        "maximumOddBinaryNumber(s = '110011')",
        "maximumOddBinaryNumber(s = '101001')",
        "maximumOddBinaryNumber(s = '00011001')",
        "maximumOddBinaryNumber(s = \"000001\")",
        "maximumOddBinaryNumber(s = \"011011\")",
        "maximumOddBinaryNumber(s = \"0110101100\")"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = '1100')",
        "maximumOddBinaryNumber(s = \"0000\")",
        "maximumOddBinaryNumber(s = \"11000\")",
        "maximumOddBinaryNumber(s = '11110')",
        "maximumOddBinaryNumber(s = \"00110\")",
        "maximumOddBinaryNumber(s = \"10011\")",
        "maximumOddBinaryNumber(s = \"011001\")",
        "maximumOddBinaryNumber(s = \"010010101011001\")",
        "maximumOddBinaryNumber(s = '0001001111001001111001001111001001111001001')"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 4, target = 8)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 4, target = 9)",
        "minimumPossibleSum(n = 4, target = 20)",
        "minimumPossibleSum(n = 2, target = 9)",
        "minimumPossibleSum(n = 4, target = 24)"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLAR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRAA\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRAA\")",
        "furthestDistanceFromOrigin(moves = \"LRRR\")",
        "furthestDistanceFromOrigin(moves = \"L\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLLRRL\")",
        "furthestDistanceFromOrigin(moves = \"RLLLL\")"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 10)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 5, target = 100)",
        "minimumPossibleSum(n = 4, target = 6)",
        "minimumPossibleSum(n = 100, target = 101)",
        "minimumPossibleSum(n = 20, target = 1000)",
        "minimumPossibleSum(n = 10000000, target = 10000000)",
        "minimumPossibleSum(n = 1, target = 1000000010)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [4, 4, 6], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 2], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 5, 7], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 3, 4], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 1, 2, 3], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [40, 20, 10], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 2, 8, 1, 4], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 2, 5, 15], target = 14)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 10, 13, 18, 10], target = 17)",
        "numberOfEmployeesWhoMetTarget(hours = [23, 46, 7, 29, 82], target = 14)"
    ],
    "sample_231": [
        "countWays(nums = [1, 3, 2])",
        "countWays(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countWays(nums = [1, 1, 1, 1, 1])",
        "countWays(nums = [1, 1])",
        "countWays(nums = [0, 1, 3, 4, 5])",
        "countWays(nums = [0, 0, 2, 1])",
        "countWays(nums = [1, 2, 2, 2])",
        "countWays(nums = [1, 3, 6, 7, 9, 45])",
        "countWays(nums = [2, 0, 0, 0, 1])",
        "countWays(nums = [0, 3, 5, 6, 7, 9, 12])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"RRRRRLLLLL\")",
        "furthestDistanceFromOrigin(moves = \"RRRRRRRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLLLRL\")",
        "furthestDistanceFromOrigin(moves = \"LL_RR_\")",
        "furthestDistanceFromOrigin(moves = \"RLRLRLRLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"RLLLRRLL\")",
        "furthestDistanceFromOrigin(moves = \"_RRLLRRLL\")",
        "furthestDistanceFromOrigin(moves = \"LLLLL___R\")",
        "furthestDistanceFromOrigin(moves = \"LLLLLLLRLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"RLLLUUUUU\")"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 1, target = 4)",
        "minimumPossibleSum(n = 1, target = 4)",
        "minimumPossibleSum(n = 4, target = 4)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 10, target = 16)"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [4, 2, 4, 5, 6])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 2, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [0, 1, 2, 0, 1, 2, 3, 4, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 2, 1, 4])",
        "countCompleteSubarrays(nums = [1,2,0,3,4,5,0])"
    ],
    "sample_156": [
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 2)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 2)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 1)",
        "canSplitArray(nums = [1, 1, 1, 1, 1, 1], m = 3)",
        "canSplitArray(nums = [1, 2, 1], m = 4)",
        "canSplitArray(nums = [1, 2, 1, 2], m = 3)",
        "canSplitArray(nums = [5, 2, 3], m = 6)",
        "canSplitArray(nums = [2, 3, 4, 5, 6], m = 5)",
        "canSplitArray(nums = [1, 5, 2, 3, 7], m = 3)",
        "canSplitArray(nums = [10, 2, 3, 4, 8], m = 11)"
    ],
    "sample_200": [
        "minOperations(nums = [1, 1, 1, 1], target = 3)",
        "minOperations(nums = [1, 1, 1, 1, 1, 1], target = 3)",
        "minOperations(nums = [1, 2, 3, 4], target = 11)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 11)",
        "minOperations(nums = [1, 1], target = 3)",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], target = 3)",
        "minOperations(nums = [1, 2, 3], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 6)",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1], target = 9)",
        "minOperations(nums = [1, 2, 3], target = 2)"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [3, 1, 2, 4, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 1, 2, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], k = 2)",
        "sumIndicesWithKSetBits(nums = [3,1,5,7,4,2,6], k = 4)",
        "sumIndicesWithKSetBits(nums = [3, 1, 5, 8, 4, 2, 6, 7, 9], k = 1)"
    ],
    "sample_165": [
        "isAcronym(words = [\"A\", \"B\", \"C\"], s = \"ABC\")",
        "isAcronym(words = [\"this\", \"is\", \"an\", \"acronym\"], s = \"tia\")",
        "isAcronym(words = [\"this\", \"is\", \"an\", \"acronym\"], s = \"thisisanacronym\")",
        "isAcronym(words = [\"this\", \"is\", \"an\", \"acronym\"], s = \"TIA\")",
        "isAcronym(words = [\"P\", \"Y\", \"T\", \"H\", \"O\", \"N\"], s = \"PYTHON\")",
        "isAcronym(words = ['Python', 'Programming', 'Language'], s = 'PPL')",
        "isAcronym(words = [\"L\", \"O\", \"L\"], s = \"LOL\")",
        "isAcronym(words = [\"That\", \"Is\", \"A\", \"Test\"], s = \"TIA\")",
        "isAcronym(words = [\"internationalization\", \"interoperability\", \"information\", \"communication\"], s = \"i18n\")",
        "isAcronym(words = [\"Big\", \"Red\", \"Rabbit\", \"Jumps\", \"Over\", \"the\", \"Brown\", \"Fox\"], s = \"BRRJOTB\")"
    ],
    "sample_227": [
        "countWays(nums = [-1, 0, 1, 2])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [10, 15, 20])",
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [1, 2, 4, 7, 11])",
        "countWays(nums = [0, 1, 2, 0, 1, 2])",
        "countWays(nums = [1, 5, 2, 1, 2, 3])",
        "countWays(nums = [1, 5, 2, 1, 2, 3])",
        "countWays(nums = [0, 0, 0, 1, 2, 3, 4, 5])",
        "countWays(nums = [-1, 2, 0, 6, 3, 5, 4])"
    ],
    "sample_158": [
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "maxSum(nums = [0,0,0,0,0,0,0,0])",
        "maxSum(nums = [1,2,1])",
        "maxSum(nums = [2, 1, 3, 3, 2, 1])",
        "maxSum(nums = [2, 3, 3, 4])",
        "maxSum(nums = [42, 12, 18, 24])",
        "maxSum(nums = [908, 957, 933])",
        "maxSum(nums = [2, 1, 2, 5, 6, 1, 7, 8, 9, 9, 9])",
        "maxSum(nums = [12, 10, 20, 15, 17, 11, 7, 9])"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 2, 3, 4], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3, 3], k = 2)",
        "longestEqualSubarray(nums = [2, 1, 2, 2, 2, 2, 3, 2, 1, 2, 2, 1, 3], k = 3)"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 3, offers = [[0, 2, 5], [1, 3, 4], [0, 3, 6]])",
        "maximizeTheProfit(n = 3, offers = [[1, 1, 1], [2, 2, 3], [3, 3, 5]])",
        "maximizeTheProfit(n = 1, offers = [ [1, 1, 10] ])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [3, 2, 4], [2, 3, 5]])",
        "maximizeTheProfit(n = 4, offers = [[0, 1, 2], [1, 3, 4], [2, 3, 5]])",
        "maximizeTheProfit(n = 5, offers = [[0, 2, 5], [1, 3, 7], [2, 4, 10], [3, 4, 15], [4, 5, 20]])",
        "maximizeTheProfit(n = 3, offers = [[0, 1, 10], [1, 2, 30], [2, 1, 50]])",
        "maximizeTheProfit(n = 4, offers = [[1, 1, 5], [2, 3, 7], [3, 2, 6], [4, 1, 4]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 2], [1, 3, 3], [2, 3, 4], [1, 4, 5], [3, 4, 6], [4, 5, 7], [1, 5, 8], [3, 5, 9], [4, 5, 10]])",
        "maximizeTheProfit(n = 10, offers = [[1, 2, 2], [3, 5, 5], [6, 7, 7], [8, 9, 8], [1, 2, 3], [4, 8, 4]])"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(x = [1, 4, 3, 2])",
        "maxIncreasingGroups(x = [3, 1, 4, 2, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 2, 1, 2, 3])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 100, 101, 102, 103, 104])",
        "maxIncreasingGroups(x = [4, 5, 6, 1, 3])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 3, 4, 5, 2, 1])",
        "maxIncreasingGroups(x = [2, 1, 3, 2, 2, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(x = [1, 5, 8, 9, 3, 2, 4, 7])",
        "maxIncreasingGroups(x = [1, 12, 10, 14, 2, 11, 8])"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 3)",
        "sumIndicesWithKSetBits(nums = [3, 1, 2, 4, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 1, 3, 5], k = 2)"
    ],
    "sample_207": [
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"100\")",
        "minimumOperations(num = \"10\")",
        "minimumOperations(num = \"000111\")",
        "minimumOperations(num = \"505\")",
        "minimumOperations(num = \"10001\")",
        "minimumOperations(num = \"5250\")",
        "minimumOperations(num = \"2005\")",
        "minimumOperations(num = \"11110000\")",
        "minimumOperations(num = \"0011110\")"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLL\")",
        "furthestDistanceFromOrigin(moves = \"RLR\")",
        "furthestDistanceFromOrigin(moves = \"RRR\")",
        "furthestDistanceFromOrigin(moves = \"RRR\")",
        "furthestDistanceFromOrigin(moves = \"RRRLLRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRRRR\")",
        "furthestDistanceFromOrigin(moves = \"RLRLL\")",
        "furthestDistanceFromOrigin(moves = \"RLLRRRLR\")"
    ],
    "sample_206": [
        "minimumOperations(num = \"050\")",
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"101\")",
        "minimumOperations(num = \"20\")",
        "minimumOperations(num = \"52\")",
        "minimumOperations(num = \"02500\")",
        "minimumOperations(num = '00')",
        "minimumOperations(num = '205')",
        "minimumOperations(num = \"0111000\")",
        "minimumOperations(num = \"7750100\")"
    ],
    "sample_155": [
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [1,2,3,4,5], m = 6)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 12)",
        "canSplitArray(nums = [1, 2, 3], m = 2)",
        "canSplitArray(nums = [1, 1, 1], m = 2)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 13)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7], m = 8)",
        "canSplitArray(nums = [1,2,3,4,5], m = 4)",
        "canSplitArray(nums = [4, 2, 3, 5, 4, 5, 5], m = 9)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 2, 1, 3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 1, 3])",
        "countCompleteSubarrays(nums = [0, 1, 2, 0])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 1])",
        "countCompleteSubarrays(nums = [2,3,1,1,4])",
        "countCompleteSubarrays(nums = [10, 5, 2, 6])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 4, 1, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 4, 2, 2, 4, 4, 1, 2, 3, 1, 3, 3, 2])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 5, 4, 1, 7, 6, 8])"
    ],
    "sample_202": [
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"1000\")",
        "minimumOperations(num = \"0000000000\")",
        "minimumOperations(num = \"050\")",
        "minimumOperations(num = \"5075\")",
        "minimumOperations(num = \"150\")",
        "minimumOperations(num = \"12345678\")",
        "minimumOperations(num = \"0010101\")",
        "minimumOperations(num = \"2352\")"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [], b = \"a\")",
        "splitWordsBySeparator(a = [\"\", \" \"], b = \" \")",
        "splitWordsBySeparator(a = [\"a:b:c\", \"d:e:f\"], b = \":\")",
        "splitWordsBySeparator(a = [\"a,b,c\", \"d-e-f\"], b = \",\")",
        "splitWordsBySeparator(a = [\"foo;bar\", \"foo;bar\"], b = \";\")",
        "splitWordsBySeparator(a = ['a-b-c', 'a-b-c-d'], b = '-')",
        "splitWordsBySeparator(a = [\"a a\", \"\", \"a\", \"a\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"Hello, world\", \"Hola, mundo\"], b = \", \")",
        "splitWordsBySeparator(a = [\"--a---b---c---\"], b = \"-\")",
        "splitWordsBySeparator(a = ['Python', 'is', 'great', 'for', 'machine', 'learning'], b = ' ')"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [3, 1, 2, 5, 4, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [3,1,2,4,5,6,7,8], k = 3)",
        "sumIndicesWithKSetBits(nums = [3, 1, 2, 5, 4, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 1, 2, 5, 4, 6, 7, 8], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 1, 2, 4, 5, 4, 9], k = 2)"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = '0001')",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = '1011')",
        "maximumOddBinaryNumber(s = '11001')",
        "maximumOddBinaryNumber(s = \"0100\")",
        "maximumOddBinaryNumber(s = '011100')",
        "maximumOddBinaryNumber(s = '001110')",
        "maximumOddBinaryNumber(s = '0100111')",
        "maximumOddBinaryNumber(s = \"00100011\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,2,1,1], k = 2)",
        "longestEqualSubarray(nums = [1,1,2,1,1,3], k = 2)",
        "longestEqualSubarray(nums = [1,0,1,1,0,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3,4,2,2,2,1], k = 2)",
        "longestEqualSubarray(nums = [1,1,2,1,1,1,1,1,1,1,1,1], k = 2)",
        "longestEqualSubarray(nums = [1,1,2,3,3,4,2,2,2,2,3,4,5], k = 2)"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 4, 5], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 1, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,3,4,1,5], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 1, 3, 1, 4, 1, 5, 1], k = 3)",
        "longestEqualSubarray(nums = [1,2,2,2,2,2,1], k = 1)",
        "longestEqualSubarray(nums = [0, 1, 1, 2, 1, 1, 3, 3, 0, 4, 2, 2, 4, 4, 1, 2, 0, 4, 4], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,3,3,3,3,4,4,4,5,5,6,6,7,7,8], k = 2)"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = '1001')",
        "maximumOddBinaryNumber(s = '111')",
        "maximumOddBinaryNumber(s = '10111')",
        "maximumOddBinaryNumber(s = \"110000\")",
        "maximumOddBinaryNumber(s = '011111')",
        "maximumOddBinaryNumber(s = \"1010010110101110\")",
        "maximumOddBinaryNumber(s = '000010001101110101010001000100111010111')"
    ],
    "sample_166": [
        "isAcronym(words = [\"this\", \"is\", \"an\", \"acronym\"], s = \"TIA\")",
        "isAcronym(words = [\"rock\", \"paper\", \"scissors\"], s = \"rps\")",
        "isAcronym(words = [\"ab\", \"cd\"], s = \"abcd\")",
        "isAcronym(words = [\"bubble\", \"sort\"], s = \"BOS\")",
        "isAcronym(words = [\"A\", \"C\", \"R\", \"O\", \"N\", \"A\", \"M\"], s = \"ACRONYM\")",
        "isAcronym(words = [\"Championship\", \"Series\", \"2\"], s = \"CS2\")",
        "isAcronym(words = [\"Leadership\", \"Organization\", \"Experience\"], s = \"LOX\")",
        "isAcronym(words = [\"The\", \"brown\", \"cow\", \"says\", \"mooooooooooooo\"], s = \"TBCS\")",
        "isAcronym(words = [\"MAIL\", \"MACHINE\", \"INSTRUCTION\", \"LANGUAGE\"], s = \"MLMAILMACHINEINSTRUCTIONLANGUAGE\")",
        "isAcronym(words = [\"combining\", \"multiple\", \"strings\", \"to\", \"make\", \"acronym\"], s = \"camelot\")"
    ],
    "sample_163": [
        "maxSum(nums = [1, 34, 3, 98, 9, 76, 45, 4])",
        "maxSum(nums = [-1, -1, -1, -1])",
        "maxSum(nums = [100, 100, 100, 100])",
        "maxSum(nums = [12, 234, 345, 456])",
        "maxSum(nums = [1111111111,1111111111,1111111111,1111111111])",
        "maxSum(nums = [999,998,998,999,999,999,998,999,999])",
        "maxSum(nums = [92, 60, 37, 38])",
        "maxSum(nums = [11, 1, 111, 2, 3, 12345, 6789])",
        "maxSum(nums = [198, 99, 24, 39, 22, 11])",
        "maxSum(nums = [27, 60, 35, 2, 9, 12, 33, 8, 22, 93])"
    ]
}