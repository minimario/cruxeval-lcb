{
    "sample_48": [
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation([1, 2, 3])",
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [3, 2, 1])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7])",
        "semiOrderedPermutation(nums = [1,3,2])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4, 5])",
        "semiOrderedPermutation(nums = [0,1,2,3])",
        "semiOrderedPermutation(nums = [0, 1, 2])",
        "semiOrderedPermutation(nums = [3,2,3,1,2,2])"
    ],
    "sample_94": [
        "continuousSubarrays([1,2,3,4])",
        "continuousSubarrays(a = [1, 1, 1, 2, 2, 2])",
        "continuousSubarrays(a = [1,1,1,1,1,1,1,1,1,1,1])",
        "continuousSubarrays(a = [1, 2, 1, 2, 1, 2, 1, 2, 1])",
        "continuousSubarrays(a = [1,2,2,2,3,3,3])",
        "continuousSubarrays(a = [1, 1, 1, 1, 1])",
        "continuousSubarrays(a = [0,1,1,0,1,1])",
        "continuousSubarrays(a = [1, 1, 2, 2, 3, 3])",
        "continuousSubarrays(a = [1, 0, 1, 0, 1, 1, 0, 0, 1, 1])",
        "continuousSubarrays(a = [0,2,0,0,2,3,0])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [1, 2, 2, 3, 3, 3])",
        "continuousSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "continuousSubarrays(nums = [1, 4, 3, 2])",
        "continuousSubarrays([0, 1, 2, 3, 4])",
        "continuousSubarrays(nums = [1, 0, 0, 2, 1])",
        "continuousSubarrays([1, 2, 3, 3, 4, 4, 5, 5, 6])",
        "continuousSubarrays(nums = [5,2,4,3,6])",
        "continuousSubarrays(nums = [4, 1, 4, 3, 3, 2])",
        "continuousSubarrays(nums = [1,2,1,2,1,3,4,5,6,7,8,9])",
        "continuousSubarrays([1, 2, 2, 2, 4, 4, 3])"
    ],
    "sample_8": [
        "colorTheArray(n = 5, queries = [[1, 0], [1, 1]])",
        "colorTheArray(n = 3, queries = [[1, 0], [0, 1], [0, 0]])",
        "colorTheArray(n = 6, queries = [[0, 1], [1, 0], [0, 0]])",
        "colorTheArray(n = 5, queries = [[0, 3, 1, 2, 0]])",
        "colorTheArray(n = 3, queries = [[2, 1], [1, 1], [0, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1, 1], [1, 0, 1], [0, 1, 0], [0, 1, 1]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 1], [3, 1], [4, 1], [5, 0]])",
        "colorTheArray(n = 6, queries = [[0, 0], [1, 1], [1, 0], [0, 1]])",
        "colorTheArray(5, [(0, 0), (1, 0), (0, 1), (1, 1), (1, 0)])",
        "colorTheArray(n = 5, queries = [[1, 1, 0, 0, 0], [1, 0, 1, 0, 0], [0, 1, 1, 1, 0], [0, 1, 0, 1, 0], [0, 0, 1, 1, 1]])"
    ],
    "sample_97": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 5)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [3,2,1,1,4], target = 5)",
        "maximumJumps(nums = [1,2,3,4], target = 3)",
        "maximumJumps(nums = [1,2,3,4,5,6], target = 10)",
        "maximumJumps(nums = [5,3,1,1,4], target = 8)",
        "maximumJumps(nums = [0,1,2,3,4,5,6], target = 7)",
        "maximumJumps(nums = [1,3,1,1,1,4,1,1], target = 3)",
        "maximumJumps(nums = [2, 3, 5, 1, 8, 1], target = 10)",
        "maximumJumps([1,1,2,1,4,1,2,1,1,2], 7)"
    ],
    "sample_22": [
        "minLength(\"AB\")",
        "minLength(\"ab\")",
        "minLength(s1 = \"AB\", s2 = \"CD\")",
        "minLength(s = \"AB\")",
        "minLength(s = \"AB\")",
        "minLength(\"abab\")",
        "minLength(s = \"ab\")",
        "minLength(s1 = \"AB\", s2 = \"CD\")",
        "minLength(s = \"AC\")",
        "minLength(\"cb\")"
    ],
    "sample_7": [
        "colorTheArray(n = 4, queries = [[0, 0], [0, 1], [1, 0], [1, 1]])",
        "colorTheArray(n = 3, queries = [[1, 0], [2, 1], [2, 2]])",
        "colorTheArray(n = 4, queries = [[0, 0], [2, 1], [3, 2]])",
        "colorTheArray(n = 6, queries = [[1,2],[2,3],[3,4],[4,5],[5,6]])",
        "colorTheArray(n = 5, queries = [[0,1], [3,3]])",
        "colorTheArray(n = 4, queries = [[2,2],[2,3],[3,3],[3,4],[4,4]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 2], [4, 4], [1, 0], [3, 1]])",
        "colorTheArray(n = 5, queries = [[1,0],[2,0],[1,1],[3,2],[3,3],[2,2]])",
        "colorTheArray(n = 3, queries = [[0,1],[1,2],[2,0],[2,1],[1,2]])",
        "colorTheArray(n = 4, queries = [\n    [0, 2],\n    [2, 3],\n    [1, 0],\n    [2, 0],\n])"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 0], [2, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [2, 2]])",
        "colorTheArray(n = 5, queries = [[0,0],[1,0],[2,1],[3,1],[4,0]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 1], [3, 3]])",
        "colorTheArray(n = 5, queries = [[1,1], [2,3]])",
        "colorTheArray(n = 3, queries = [[0, 0], [1, 1], [2, 0], [1, 0], [2, 1]])",
        "colorTheArray(n = 6, queries = [[0, 1], [1, 2], [2, 4], [1, 4], [2, 5], [5, 4]])",
        "colorTheArray(n = 5, queries = [[2, 0], [3, 1], [2, 1], [3, 0], [4, 1], [3, 0], [4, 0]])",
        "colorTheArray(n = 5, queries = [[0,2], [1,1], [1,0], [2,0], [2,1], [3,2], [3,3], [3,4], [4,4]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation(nums = [1,3,2])",
        "semiOrderedPermutation(nums = [2,1,3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation([3,1,4,2])",
        "semiOrderedPermutation(nums = [3,6,9])",
        "semiOrderedPermutation(nums = [2,4,5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7])",
        "semiOrderedPermutation(nums = [2,3,1,4,2,1,5,3,2])"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 4, 2, 3, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 0, 1, 0, 1, 0, 0], threshold = 2)",
        "longestAlternatingSubarray(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 1, 3, 5, 7, 8, 9, 10], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 1, 3, 1, 4], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 1, 1, 3, 3, 5, 5, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [6,9,2,4,4], threshold = 3)",
        "longestAlternatingSubarray(nums = [4,2,6,8,3,9,5,7,1,2,6,8,3,9,5,7,1,2,6,8,3,9], threshold = 5)"
    ],
    "sample_33": [
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '123000')",
        "removeTrailingZeros(num = '1230')",
        "removeTrailingZeros(num = 'abcde')",
        "removeTrailingZeros(num = \"0000123\")",
        "removeTrailingZeros(num = \"0000000000\")",
        "removeTrailingZeros(\"aaaa\")",
        "removeTrailingZeros(s1 = '1023')",
        "removeTrailingZeros(\"00123000\")",
        "removeTrailingZeros(num = \"001111111\")"
    ],
    "sample_50": [
        "smallestString(s1 = \"ab\", s2 = \"a\")",
        "smallestString(s1 = 'a', s2 = 'b')",
        "smallestString(\"abc\")",
        "smallestString(s = \"abc\")",
        "smallestString(s = \"bab\")",
        "smallestString(s1 = \"aa\", s2 = \"aab\")",
        "smallestString(\"abc\")",
        "smallestString(\"aabbb\")",
        "smallestString(s = \"bba\")",
        "smallestString(s1 = \"abaab\", s2 = \"aaab\")"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0])",
        "distinctDifferenceArray(nums = [0, 1, 2, 0, 1, 2])",
        "distinctDifferenceArray(nums = [0, 1, 1, 2, 2, 2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 2])",
        "distinctDifferenceArray(nums = [1, 1, 1, 2, 2, 2])",
        "distinctDifferenceArray([1,2,3,3,4])",
        "distinctDifferenceArray(nums = [4, 5, 6, 9, 10, 6, 6, 10])"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 1, additionalTank = 3)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 4, additionalTank = 5)",
        "distanceTraveled(mainTank = 4, additionalTank = 6)",
        "distanceTraveled(mainTank = 2, additionalTank = 6)",
        "distanceTraveled(main = 2, additional = 3)",
        "distanceTraveled(mainTank = 0, additionalTank = 5)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(main = 4, additional = 3)"
    ],
    "sample_118": [
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6])",
        "minimumIndex([1, 2, 3, 1, 2])",
        "minimumIndex(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5])",
        "minimumIndex(nums = [1,2,3,1,2,3,1,2,3,1])",
        "minimumIndex(my_list = [3, 3, 2, 2, 1])",
        "minimumIndex(nums = [0, 1, 1, 0, 0, 1, 1, 0])",
        "minimumIndex(nums = [3, 5, 1, 5, 2, 1])",
        "minimumIndex([5,4,3,3,2,1,1])",
        "minimumIndex(nums = [0, 1, 2, 3, 4, 4, 2, 2, 2])",
        "minimumIndex(nums = [3,2,1,4,4,5,2,5,6])"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countBeautifulPairs(nums = [1, 2, 4, 5, 8])",
        "countBeautifulPairs(nums = [2,3,4,5,7,8])",
        "countBeautifulPairs(nums = [30, 10, 20, 10])",
        "countBeautifulPairs(nums = [1, 3, 5, 9, 12, 17])",
        "countBeautifulPairs([4, 6, 8, 6, 8])",
        "countBeautifulPairs(nums = [10, 15, 24, 37])"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"12301\")",
        "removeTrailingZeros(num = \"1230\")",
        "removeTrailingZeros(num = '550000')",
        "removeTrailingZeros(num = '9999999999')",
        "removeTrailingZeros(s1 = '0'*5 + '5', s2 = '512301')",
        "removeTrailingZeros(s1 = '1230001', s2 = '0012301')",
        "removeTrailingZeros(num = 'mqpzl')",
        "removeTrailingZeros(s1 = \"23450123\", s2 = \"00512301\")"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"ab\")",
        "minimizedStringLength(s1 = \"abc\")",
        "minimizedStringLength(s = \"abcde\")",
        "minimizedStringLength(s = \"aab\")",
        "minimizedStringLength(s = \"bba\")",
        "minimizedStringLength(s = \"aabbb\")",
        "minimizedStringLength(s1 = \"ba\", s2 = \"bb\")",
        "minimizedStringLength(\"abracadabra\")",
        "minimizedStringLength(s1 = \"aa\", s2 = \"a\")",
        "minimizedStringLength(s1 = \"abcbab\", s2 = \"babcb\")"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "maximumBeauty([1,1,1,1,1,1,1,1], 2)",
        "maximumBeauty(nums = [5, 3, 8, 9, 10], k = 2)",
        "maximumBeauty([1, 3, 6, 9, 12], 2)",
        "maximumBeauty(nums = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9], k = 3)",
        "maximumBeauty(nums = [2, 1, 5, 4, 8, 7, 6], k = 3)",
        "maximumBeauty(nums = [3, 2, 5, 7, 9, 8], k = 2)",
        "maximumBeauty(nums = [2, 8, 6, 5, 1, 3, 7, 4], k = 1)",
        "maximumBeauty(nums = [10, 13, 13, 11, 10, 7], k = 3)",
        "maximumBeauty(nums = [1, 7, 3, 1, 4, 1, 6, 1, 0], k = 2)"
    ],
    "sample_76": [
        "makeTheIntegerZero(??, 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 10)",
        "makeTheIntegerZero(num1 = 5, num2 = 7)",
        "makeTheIntegerZero(num1 = 0, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 10)",
        "makeTheIntegerZero(num1 = 3, num2 = 3)",
        "makeTheIntegerZero(??, 0)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)",
        "makeTheIntegerZero(num1 = 123456789, num2 = 987654321)",
        "makeTheIntegerZero(a = 1, b = 3)"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 3, 5, 7])",
        "findValueOfPartition(nums = [5,4,3,2,1])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5, 6, 7])",
        "findValueOfPartition(nums = [3,1,2,4])",
        "findValueOfPartition([0,1,2])",
        "findValueOfPartition(sorted_list = [1, 4, 3, 2, 7])",
        "findValueOfPartition(nums = [6, 8, 10, 4, 12, 1])",
        "findValueOfPartition(nums = [3,2,4,5,8,9,1,5,3,2])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 10)",
        "distanceTraveled(mainTank = 2, additionalTank = 4)",
        "distanceTraveled(mainTank = 5, additionalTank = 4)",
        "distanceTraveled(mainTank = 8, additionalTank = 2)",
        "distanceTraveled(mainTank = 3, additionalTank = 5)",
        "distanceTraveled(mainTank = 7, additionalTank = 3)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [0, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0,1,0])",
        "doesValidArrayExist(derived = [1, 1, 0, 1])",
        "doesValidArrayExist([0, 0, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0,0,1,0,1])",
        "doesValidArrayExist(my_list = [0, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 0, 0, 0, 1, 0])",
        "doesValidArrayExist(derived = [1,1,0,0,1,1,0,0])"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"aba\")",
        "makeSmallestPalindrome(s = \"banana\")",
        "makeSmallestPalindrome(\"\")",
        "makeSmallestPalindrome(s = \"bab\")",
        "makeSmallestPalindrome(s = \"aba\")",
        "makeSmallestPalindrome(s = \"aab\")",
        "makeSmallestPalindrome(s1 = \"race\", s2 = \"care\")",
        "makeSmallestPalindrome(s1 = \"abcd\", s2 = \"deab\")",
        "makeSmallestPalindrome(s1 = \"abcd\", s2 = \"efgh\")",
        "makeSmallestPalindrome(s1 = \"hello\", s2 = \"world\")"
    ],
    "sample_110": [
        "checkArray(nums = [0, 1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "checkArray(nums = [0, 1, 2, 3], k = 1)",
        "checkArray(nums = [1, 1, 1], k = 2)",
        "checkArray(nums = [1, 1, 2, 3, 5], k = 2)",
        "checkArray(nums = [0, 0, 0, 0, 0, 0, 0, 0], k = 7)",
        "checkArray(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], k = 2)",
        "checkArray(nums = [-1, -2, 3, 4, 0], k = 3)",
        "checkArray(nums = [1, -1, -2, -3, -4, -5, -6], k = 4)",
        "checkArray(nums = [3,2,1,1,4,4,4,5,0,3,3], k = 3)"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 2])",
        "doesValidArrayExist(derived = [0, 1, 2, 3])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [0,1,0])",
        "doesValidArrayExist(my_list = [1, 0, 0, 1])",
        "doesValidArrayExist(my_list = [1,2,0])",
        "doesValidArrayExist(derived = [1, 1, 0, 0, 0, 0, 0, 0, 0])",
        "doesValidArrayExist(derived = [1,2,3,4,5,0,0,0,0])"
    ],
    "sample_54": [
        "smallestString(s1 = \"abc\", s2 = \"ab\")",
        "smallestString(s = \"abc\")",
        "smallestString(s1 = \"ab\", s2 = \"ac\")",
        "smallestString(\"banana\")",
        "smallestString(\"abc\")",
        "smallestString(s1 = \"a\", s2 = \"ab\")",
        "smallestString(s = \"kddsa\")",
        "smallestString(s = \"cba\", z = \"z\")",
        "smallestString(s1 = \"abc\", s2 = \"klmn\")",
        "smallestString(\"aaabb\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [2, 2, 2, 2, 2])",
        "continuousSubarrays([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "continuousSubarrays([0, 1, 0, 1])",
        "continuousSubarrays([1, 2, 1, 2, 1, 2, 1])",
        "continuousSubarrays(A = [1, 3, 2, 3, 4])",
        "continuousSubarrays(A = [2, 2, 2, 2, 1, 1, 1])",
        "continuousSubarrays(A = [3,2,3,1,2])",
        "continuousSubarrays(A = [1, 1, 2, 3, 2, 2, 2, 1])",
        "continuousSubarrays(A = [0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1])",
        "continuousSubarrays(A = [1,1,1,0,0,0,0,1,1,1,1,0,1,1,1,1,0,1,1,0,1,0,0,0,1,0,0,0,1,0,0])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s1 = \"ab\", s2 = \"ba\")",
        "makeSmallestPalindrome(s1 = \"ab\")",
        "makeSmallestPalindrome(s1 = \"abcd\")",
        "makeSmallestPalindrome(s = \"babad\")",
        "makeSmallestPalindrome(s = \"abcdefg\")",
        "makeSmallestPalindrome(s = \"abc\")",
        "makeSmallestPalindrome(s = 'aa')",
        "makeSmallestPalindrome(\"abbc\")",
        "makeSmallestPalindrome(s1 = \"abac\", s2 = \"bcac\")"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [0, 1, 2, 3, 4, 5])",
        "findValueOfPartition([1,2,3,4,5])",
        "findValueOfPartition([2, 7, 11, 15])",
        "findValueOfPartition(nums = [2, 3, 1, 5])",
        "findValueOfPartition(nums = [3, 5, 6, 8, 9])",
        "findValueOfPartition(nums = [2,2,3,3,3])",
        "findValueOfPartition(nums = [2,3,1,5,6,7])",
        "findValueOfPartition(nums = [1, 4, 7, 5, 3, 2])",
        "findValueOfPartition(nums = [4, 10, 4, 5, 6, 7])"
    ],
    "sample_51": [
        "smallestString(\"abc\")",
        "smallestString(s = \"ab\")",
        "smallestString(s1 = \"abc\", s2 = \"abcd\")",
        "smallestString(s = \"aaab\")",
        "smallestString(s1 = \"a\", s2 = \"aa\")",
        "smallestString(s1 = \"aaa\")",
        "smallestString(s = \"abcd\")",
        "smallestString('abcdefg')",
        "smallestString(s1 = \"abcd\")",
        "smallestString(s1 = \"kdd\", s2 = \"dbz\")"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 4)",
        "maximumBeauty([1, 2, 3, 4, 5], 3)",
        "maximumBeauty(nums = [4, 5, 6, 7, 8, 9], k = 3)",
        "maximumBeauty(nums = [1, 6, 7, 8, 9], k = 2)",
        "maximumBeauty(nums = [3, 10, 15, 20], k = 3)",
        "maximumBeauty(nums = [3,2,1,5,4,6,7], k = 4)",
        "maximumBeauty(nums = [10, 5, 2, 8, 5], k = 2)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1,2,3,4,5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1,2,3,4], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 4)",
        "checkArray(nums = [5, 5, 2, 2, 3], k = 2)",
        "checkArray(nums = [5, 10, 5, 10, 5, 10], k = 3)",
        "checkArray(nums = [2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7], k = 3)",
        "checkArray(nums = [3,4,5,5,7,8,8,8], k = 4)"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 7, additionalTank = 3)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 3, additionalTank = 4)",
        "distanceTraveled(mainTank = 8, additionalTank = 3)",
        "distanceTraveled(mainTank = 0, additionalTank = 2)",
        "distanceTraveled(mainTank = 9, additionalTank = 3)"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 5, 7])",
        "distinctDifferenceArray(nums = [1, 2, 4, 5, 6, 7, 8, 9, 10])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 5, 5, 6, 6, 6, 6])",
        "distinctDifferenceArray(s1 = [0,0,0,0,1,2,2,3], s2 = [0,0,0,0,1,1,2,3])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays(A = [1,2,3,4,5,6])",
        "continuousSubarrays(A = [1, 1, 1, 2, 2, 2, 2])",
        "continuousSubarrays([1, 0, 0, 0, 1, 1])",
        "continuousSubarrays(A = [2, 3, 2, 4, 3, 2, 3])",
        "continuousSubarrays(A = [2,2,1,1,1,1,2,2,2,2])",
        "continuousSubarrays([1, 2, 3, 4, 5, 5, 5, 5, 6, 6, 6, 6])",
        "continuousSubarrays([3, 5, 3, 2, 1])",
        "continuousSubarrays(my_list = [1, 2, 3, 4, 5, 1, 2, 3, 4])",
        "continuousSubarrays(A = [1,2,2,2,1,1,3,3,3,3,4,4,4,4,4])"
    ],
    "sample_6": [
        "colorTheArray(n = 3, queries = [[0,0], [0,1], [0,2]])",
        "colorTheArray(n = 5, queries = [[1,1], [2,1], [3,1], [4,0]])",
        "colorTheArray(n = 3, queries = [[0,0,1],[2,2,2],[1,0,1]])",
        "colorTheArray(n = 5, queries = [[0, 1, 1], [1, 2, 2], [1, 2, 1]])",
        "colorTheArray(n = 3, queries = [[1, 0], [2, 0], [0, 1], [1, 1], [0, 2]])",
        "colorTheArray(n = 6, queries = [[1, 0], [0, 1], [1, 1], [2, 0], [0, 2], [0, 1]])",
        "colorTheArray(n = 4, queries = [[0,0],[2,2],[2,0],[1,1],[3,3]])",
        "colorTheArray(n = 4, queries = [[2,2],[3,3],[2,2],[3,3],[1,1],[2,2],[3,3]])",
        "colorTheArray(n = 7, queries = [[1, 0], [2, 0], [3, 0], [3, 1], [4, 0], [6, 1], [6, 0]])",
        "colorTheArray(n = 5, queries = [\n    [1, 3],\n    [2, 2],\n    [4, 0],\n    [0, 2],\n    [3, 0],\n])"
    ],
    "sample_75": [
        "makeTheIntegerZero(??)",
        "makeTheIntegerZero(a = 5, b = 2)",
        "makeTheIntegerZero(a = 3, b = 2)",
        "makeTheIntegerZero(a = 9, b = 3)",
        "makeTheIntegerZero(a = 3, b = 4)",
        "makeTheIntegerZero(a = 5, b = 3)",
        "makeTheIntegerZero(a = 2, b = 2)",
        "makeTheIntegerZero(??, 1)",
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 0, b = 1, mod = 9)"
    ],
    "sample_100": [
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [2,3,1,1,4], target = 3)",
        "maximumJumps(nums = [1, 2, 3], target = 2)",
        "maximumJumps(nums = [1, 3, -1, -3, 5, 3, 6, 7], target = 3)",
        "maximumJumps(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], target = 10)",
        "maximumJumps(nums = [3, 2, 1, 4, 1, 5, 9, 2, 6, 4], target = 3)",
        "maximumJumps(nums = [5,3,8,6,7], target = 3)",
        "maximumJumps(nums = [1, 5, 8, 9, 10, 6, 2, 3], target = 5)",
        "maximumJumps(nums = [2, 1, 1, 5, 9, 2, 6, 3, 3, 7, 3, 4], target = 7)"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 3)",
        "longestAlternatingSubarray([1,2,3,4], 3)",
        "longestAlternatingSubarray(nums = [4,2,3,5,1], threshold = 1)",
        "longestAlternatingSubarray(nums = [1,4,7,2,5], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,3,5,7,8,9,10,11,12,13], threshold = 10)",
        "longestAlternatingSubarray(nums = [2,1,4,3,5,7,6,9], threshold = 4)",
        "longestAlternatingSubarray(nums = [2,5,1,7,2,6,4], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29], threshold = 20)",
        "longestAlternatingSubarray(nums = [1,4,7,8,9,2,5,3], threshold = 5)"
    ],
    "sample_104": [
        "maxNonDecreasingLength(??)",
        "maxNonDecreasingLength([], [])",
        "maxNonDecreasingLength(a = [3, 2, 1], b = [2, 3, 2])",
        "maxNonDecreasingLength(a = [1, 1, 2, 3, 4], b = [1, 2, 3, 4, 5])",
        "maxNonDecreasingLength([5, 5, 5, 5], [5, 5, 5, 5])",
        "maxNonDecreasingLength(a = [3, 5, 7, 9], b = [5, 7, 9, 10])",
        "maxNonDecreasingLength(a = [5, 2, 4, 1], b = [1, 5, 5, 5])",
        "maxNonDecreasingLength(a = [4, 0, 1, 3], b = [2, 1, 2, 0])",
        "maxNonDecreasingLength(a = [5, 3, 1, 1, 3], b = [6, 2, 4, 3, 5])",
        "maxNonDecreasingLength(a = [10, 3, 8, 4, 1], b = [0, 1, 5, 7, 9, 2])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [0, 0, 0, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,0,0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1])",
        "numberOfGoodSubarraySplits([??])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0,1,0,1,0])",
        "numberOfGoodSubarraySplits([1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1])",
        "numberOfGoodSubarraySplits([0,1,0,1,0,1,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [3, 1, 2, 4, 3])",
        "numberOfGoodSubarraySplits(nums = [3, 2, 1, 4, 4, 3, 3, 1])"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 2)",
        "longestAlternatingSubarray([1,2,3,4,5,6], 0)",
        "longestAlternatingSubarray(nums = [2, 1, 1, 2, 2, 1], threshold = 2)",
        "longestAlternatingSubarray(nums = [4, 2, 1, 1, 4], threshold = 3)",
        "longestAlternatingSubarray(nums = [0, 2, 1, 3, 5, 4, 6, 7, 8, 9], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,3,2,4,3,6,7], threshold = 1)",
        "longestAlternatingSubarray(nums = [2, 5, 1, 8, 3, 7, 9, 7, 5, 3], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 7, 9, 3, 1, 7, 6, 5, 2, 9], threshold = 6)"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5, 6])",
        "findValueOfPartition([])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 5, 6])",
        "findValueOfPartition(nums = [5, 2, 1, 3])",
        "findValueOfPartition([9, 3, 2])",
        "findValueOfPartition(nums = [2, 3, 6, 7, 10])",
        "findValueOfPartition(nums = [1, 3, 4, 10, 11, 13])",
        "findValueOfPartition(nums = [0, 0, 1, 2, 4, 8, 16])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"ab\")",
        "makeSmallestPalindrome(s = \"abccba\")",
        "makeSmallestPalindrome(s = \"abca\")",
        "makeSmallestPalindrome(s = \"ba\")",
        "makeSmallestPalindrome(s = \"a\")",
        "makeSmallestPalindrome(s = \"aaabb\")",
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")",
        "makeSmallestPalindrome(\"abcbde\")",
        "makeSmallestPalindrome(s1 = \"abac\")",
        "makeSmallestPalindrome(s = \"abcde\")"
    ],
    "sample_18": [
        "minLength(\"abcd\")",
        "minLength(s1 = \"AB\", s2 = \"CD\")",
        "minLength(\"AB\")",
        "minLength(\"ab\")",
        "minLength(\"abcde\")",
        "minLength(\"ABC\")",
        "minLength(\"BA\")",
        "minLength(s = \"CD\")",
        "minLength(s = \"CD\")",
        "minLength(s1 = \"aab\")"
    ],
    "sample_99": [
        "maximumJumps(nums = [1, 2, 3, 4], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 9)",
        "maximumJumps([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4)",
        "maximumJumps(nums = [1,3,5,8], target = 5)",
        "maximumJumps(nums = [2,5,3,1,4,6], target = 4)",
        "maximumJumps(nums = [2, 1, 5, 3, 7, 4, 6], target = 2)",
        "maximumJumps(nums = [10, 3, 1, 7, 2, 4, 6, 8, 5], target = 1)",
        "maximumJumps(nums = [10, 15, 2, 7, 1, -3, 0, -5, -10], target = 5)"
    ],
    "sample_11": [
        "colorTheArray(n = 3, queries = [[1, 3], [3, 2]])",
        "colorTheArray(n = 3, queries = [[0, 0], [1, 0], [0, 1]])",
        "colorTheArray(n = 3, queries = [[0,1], [1,2], [1,1]])",
        "colorTheArray(n = 3, queries = [[0,1],[0,2]])",
        "colorTheArray(n = 3, queries = [[0, 2], [2, 1], [1, 0]])",
        "colorTheArray(n = 6, queries = [[1, 4], [2, 4], [3, 4]])",
        "colorTheArray(n = 6, queries = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 3], [1, 4]])",
        "colorTheArray(n = 7, queries = [[0, 2], [1, 3], [3, 6]])",
        "colorTheArray(n = 5, queries = [[1, 0], [0, 0], [1, 1], [0, 2], [1, 1], [2, 1], [0, 3], [1, 3]])",
        "colorTheArray(n = 7, queries = [[1, 4], [0, 4], [3, 0], [1, 0], [1, 4], [1, 5], [3, 1], [0, 2]])"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 4)",
        "distanceTraveled(mainTank = 5, additionalTank = 10)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 3)",
        "distanceTraveled(mainTank = 10, additionalTank = 3)",
        "distanceTraveled(mainTank=2, additionalTank=4)",
        "distanceTraveled(mainTank = 7, additionalTank = 4)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs([1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countBeautifulPairs(nums = [2, 7, 11])",
        "countBeautifulPairs(nums = [2, 3, 5, 6, 7])",
        "countBeautifulPairs(nums = [9,15,10])",
        "countBeautifulPairs(nums = [5, 7, 3, 8, 11, 12])",
        "countBeautifulPairs(nums = [23, 46, 12, 12, 12, 12])",
        "countBeautifulPairs(nums = [23, 25, 30, 26, 34, 27])",
        "countBeautifulPairs(nums = [7, 29, 28, 25, 24, 19, 13, 11, 8, 7])"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3, 4, 5, 6], x = 3)",
        "minCost(A = [1, 2, 3, 4, 5, 6, 7], x = 3)",
        "minCost(A = [3, 5, 8, 10], x = 3)",
        "minCost(A = [5, 1, 6, 3, 4], x = 2)",
        "minCost(A = [1,3,2,5,4], x = 2)",
        "minCost(A = [1, 4, 2, 5, 1, 3], x = 2)",
        "minCost(A = [6, 3, 2, 4, 6, 1], x = 2)",
        "minCost(A = [3, 1, 4, 5, 7, 8, 2], x = 3)",
        "minCost(my_list = [0, 0, 1, 2, 3, 3, 3])",
        "minCost(A = [3, 9, 1, 8, 2, 10, 0, 4, 1, 7, 6, 5, 9, 2, 3], x = 3)"
    ],
    "sample_98": [
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [1,2,3,4,5], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps([1, 2, 3, 4, 5], 3)",
        "maximumJumps(nums = [1, 3, 1, 1, 4, 1, 5, 9, 2, 6], target = 3)",
        "maximumJumps(nums = [1, 1, 1, 2, 2, 3], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 5, 8, 8], target = 3)",
        "maximumJumps(nums = [4, 3, 7, 9, 2, 5, 8], target = 3)",
        "maximumJumps(nums = [10,4,8,9,1], target = 1)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [0, 0, 0])",
        "numberOfGoodSubarraySplits([1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 0, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0, 1, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 2, 1, 3, 4, 5])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,1,1,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,0,0,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 2, 1, 3, 2, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1])"
    ],
    "sample_1": [
        "distinctDifferenceArray([-3, -1, 1, 3, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 5])",
        "distinctDifferenceArray(nums = [1, 1, 1, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 5, 5, 5, 5])",
        "distinctDifferenceArray(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3])",
        "distinctDifferenceArray(nums = [2,2,1,1,1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 4, 4, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 1, 4])",
        "distinctDifferenceArray(nums = [0, 2, 1, 2, 1, 0, 0, 1, 1, 3])",
        "distinctDifferenceArray(nums = [3, 2, 2, 1, 3, 2, 3, 4, 3])"
    ],
    "sample_73": [
        "countBeautifulPairs([1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60])",
        "countBeautifulPairs(a = [2, 3, 4])",
        "countBeautifulPairs(a = [3, 4, 5, 6])",
        "countBeautifulPairs(s1 = \"11\", s2 = \"22\")",
        "countBeautifulPairs(nums = [10, 8, 12])",
        "countBeautifulPairs([1, 1, 2, 3, 5, 8, 13, 21])",
        "countBeautifulPairs(s1 = [1, 4, 6, 1], s2 = [1, 4, 6, 8])"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"abcde\")",
        "minimizedStringLength(s = \"aab\")",
        "minimizedStringLength(s1 = \"ba\", s2 = \"nana\")",
        "minimizedStringLength(s = \"aba\")",
        "minimizedStringLength(s = \"abcdefghij\")",
        "minimizedStringLength(s = \"abcdefg\")",
        "minimizedStringLength(s = \"abcc\")",
        "minimizedStringLength(s = \"abcdabd\")"
    ],
    "sample_41": [
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(\"banana\")",
        "minimumCost(s = \"banana\")",
        "minimumCost(\"aba\")",
        "minimumCost(\"ab\")",
        "minimumCost(s1 = \"aab\")",
        "minimumCost(s = \"a\")",
        "minimumCost(s1 = \"ab\", s2 = \"bc\")"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 1, 2])",
        "distinctDifferenceArray(nums = [2, 1, 2, 2])",
        "distinctDifferenceArray(nums = [3, 4, 5, 6])",
        "distinctDifferenceArray(nums = [3, 1, 4, 2, 3, 2])",
        "distinctDifferenceArray(nums = [1, 3, 4, 5, 5, 5, 5])",
        "distinctDifferenceArray(nums = [1,1,2,2,3,3])",
        "distinctDifferenceArray([1, 2, 1, 3, 4, 3])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 2, 2, 2])",
        "distinctDifferenceArray(nums = [3, 1, 2, 1, 3])",
        "distinctDifferenceArray(nums = [4, 5, 1, 2, 3, 2])"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [0, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1,2,3,4,5,6])",
        "doesValidArrayExist([0,1])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1, 0])",
        "doesValidArrayExist(derived = [0,0,1])",
        "doesValidArrayExist(derived = [1,1,1,0,0,0])",
        "doesValidArrayExist(my_list = [0,1,1,0])"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0, 1, 2])",
        "doesValidArrayExist(derived = [0, 1, 2])",
        "doesValidArrayExist(derived = [0, 1, 2, 3])",
        "doesValidArrayExist(derived = [0, 0, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "doesValidArrayExist([0, 0, 0, 0, 0])",
        "doesValidArrayExist(s1 = [0, 1, 2, 3])",
        "doesValidArrayExist(derived = [0, 1, 3, 5, 7])",
        "doesValidArrayExist([0, 0, 0, 0, 0, 0, 0, 0])",
        "doesValidArrayExist(s1 = [0, 1, 2, 3], s2 = [0, 1, 2, 3])"
    ],
    "sample_52": [
        "smallestString(s1 = \"abc\", s2 = \"def\")",
        "smallestString(\"abcd\")",
        "smallestString(s1 = \"abc\", s2 = \"acb\")",
        "smallestString('aaaaaa')",
        "smallestString(s1 = \"aaaab\")",
        "smallestString(\"aaab\")",
        "smallestString(s1 = \"abcd\", s2 = \"a\")",
        "smallestString(s = 'aabaa')",
        "smallestString(s = \"baaabab\")",
        "smallestString(s1 = \"zab\")"
    ],
    "sample_40": [
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"ba\")",
        "minimumCost(s = \"banana\")",
        "minimumCost(\"abc\")",
        "minimumCost(s = \"bab\")",
        "minimumCost(\"baab\")",
        "minimumCost(\"abacaba\")",
        "minimumCost(s1 = \"ba\", s2 = \"bb\")",
        "minimumCost(s = \"babca\")",
        "minimumCost(s1 = \"bba\", s2 = \"nna\")"
    ],
    "sample_38": [
        "minimumCost(s = \"banana\")",
        "minimumCost(s = \"ba\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(\"abc\")",
        "minimumCost(s = \"abacaba\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"babab\")",
        "minimumCost(s = \"ababbc\")",
        "minimumCost(s1 = \"aaa\", s2 = \"baa\")"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 3, 5, 7, 9])",
        "distinctDifferenceArray(nums = [0, 1, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 5, 6])",
        "distinctDifferenceArray(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6])",
        "distinctDifferenceArray(nums = [1, 3, 4, 1, 3, 3])",
        "distinctDifferenceArray(nums = [3, 2, 5, 3, 2, 1, 3])",
        "distinctDifferenceArray(nums = [0, 2, 3, 4, 5, 6])"
    ],
    "sample_53": [
        "smallestString(??)",
        "smallestString(s1 = \"abcd\")",
        "smallestString(s1 = \"abc\", s2 = \"abc\")",
        "smallestString(s1 = \"abc\", s2 = \"ba\")",
        "smallestString(\"abc\")",
        "smallestString(s1 = \"banana\")",
        "smallestString(\"baab\")",
        "smallestString('abccba')",
        "smallestString(s1 = \"b\", s2 = \"aa\")",
        "smallestString(s1 = \"bacd\", s2 = \"dabc\")"
    ],
    "sample_109": [
        "checkArray(nums = [1,2,3,4,5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1,2,3,4], k = 2)",
        "checkArray(nums = [1, 2, 3], k = 1)",
        "checkArray([1, 2, 3, 4], 2)",
        "checkArray(nums = [3, 1, 4, 2], k = 1)",
        "checkArray(nums = [1, 5, 3], k = 2)",
        "checkArray(nums = [1, 3, 5, 7, 8], k = 2)",
        "checkArray(nums = [1, 4, 7, 8, 9, 11], k = 2)",
        "checkArray(nums = [2,3,5,2,4,7,6], k = 2)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "maximumBeauty(nums = [0, 1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty([1, 3, 5, 7], 3)",
        "maximumBeauty(nums = [1, 2, 4, 6, 9], k = 3)",
        "maximumBeauty(nums = [1,5,6,3,2], k = 3)",
        "maximumBeauty(nums = [2, 5, 3, 3, 1], k = 1)",
        "maximumBeauty(nums = [4, 0, 1, 1, 3], k = 1)",
        "maximumBeauty(nums = [0, 5, 3, 7, 2, 6, 1], k = 2)",
        "maximumBeauty(nums = [5, 4, 3, 2, 1, 3, 5, 2, 4, 2], k = 3)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1,2,3,4])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "distinctDifferenceArray(a = [1,2,3,4])",
        "distinctDifferenceArray(a = [1, 2, 3, 4])",
        "distinctDifferenceArray(a = [1,2,3,1,3])",
        "distinctDifferenceArray([1, 2, 3, 2, 1])",
        "distinctDifferenceArray(a = [1,2,3])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "distinctDifferenceArray(a = [4, 8, 6, 12, 10])",
        "distinctDifferenceArray(a = [1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4])"
    ],
    "sample_34": [
        "removeTrailingZeros(??)",
        "removeTrailingZeros(a = '512301')",
        "removeTrailingZeros(s1 = \"512301\")",
        "removeTrailingZeros(s1 = '512301', s2 = '0')",
        "removeTrailingZeros(a = '012345')",
        "removeTrailingZeros(s1 = \"0005123\", s2 = \"123\")",
        "removeTrailingZeros(s1 = \"1\", s2 = \"100\")",
        "removeTrailingZeros(s1 = '502301', s2 = '01')",
        "removeTrailingZeros(s1 = '000000000', s2 = '000')",
        "removeTrailingZeros(s1 = \"baab0023\", s2 = \"23ba\")"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = \"banana\")",
        "makeSmallestPalindrome('ab')",
        "makeSmallestPalindrome(\"banana\")",
        "makeSmallestPalindrome(s1 = 'abcd', s2 = 'dcba')",
        "makeSmallestPalindrome('abracadabra')",
        "makeSmallestPalindrome(s = \"abcba\")",
        "makeSmallestPalindrome(s1 = 'b', s2 = 'a')",
        "makeSmallestPalindrome(\"abccd\")",
        "makeSmallestPalindrome(s = \"racer\")",
        "makeSmallestPalindrome('ball')"
    ],
    "sample_55": [
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(\"a\")",
        "smallestString('ab')",
        "smallestString(s1 = \"ba\", s2 = \"ab\")",
        "smallestString(\"banana\")",
        "smallestString(\"aaabbc\")",
        "smallestString(\"abcde\")",
        "smallestString(\"kddbdbc\")",
        "smallestString(\"kdb\")",
        "smallestString(\"aaabb\")"
    ],
    "sample_35": [
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '12301')",
        "removeTrailingZeros(num = \"123400\")",
        "removeTrailingZeros(s1 = \"512301\", s2 = \"0\")",
        "removeTrailingZeros(num = \"123123\")",
        "removeTrailingZeros(??)",
        "removeTrailingZeros(s1 = \"ab0\", s2 = \"ab\")",
        "removeTrailingZeros(s1 = \"23\")"
    ],
    "sample_23": [
        "minLength(\"abcd\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"abcde\")",
        "minLength(\"AB\")",
        "minLength(\"ACBD\")",
        "minLength(\"ABBBCCD\")",
        "minLength(s1 = \"ABABAB\")",
        "minLength(\"BCDEF\")",
        "minLength(\"aA\")",
        "minLength(\"BANCDA\")"
    ],
    "sample_31": [
        "removeTrailingZeros(??)",
        "removeTrailingZeros(num = \"123000\")",
        "removeTrailingZeros(s1 = \"12345\", s2 = \"0\")",
        "removeTrailingZeros(num = \"123000\")",
        "removeTrailingZeros(??)",
        "removeTrailingZeros(?? = \"123450000\")",
        "removeTrailingZeros(s1 = \"12\")",
        "removeTrailingZeros(num = '0234')",
        "removeTrailingZeros(s1 = '1230101', s2 = '1230101')",
        "removeTrailingZeros(num = \"56307620\")"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 0, num2 = 0)",
        "makeTheIntegerZero(??, 5)",
        "makeTheIntegerZero(num1 = 0, num2 = 10)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 5)",
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 12, num2 = 9)",
        "makeTheIntegerZero(num1 = 9, num2 = 10)",
        "makeTheIntegerZero(num1 = 12345, num2 = 54321)"
    ],
    "sample_57": [
        "distanceTraveled(a = 5, b = 10)",
        "distanceTraveled(a = 5, b = 2)",
        "distanceTraveled(a = 5, b = 0)",
        "distanceTraveled(a = 1, b = 2)",
        "distanceTraveled(a = 0, b = 9)",
        "distanceTraveled(a = 10, b = 1)",
        "distanceTraveled(a = 5, b = 2)",
        "distanceTraveled(a = 9, b = 6)",
        "distanceTraveled(a = 3, b = 8)",
        "distanceTraveled(a = 6, b = 7)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10], t = 7)",
        "longestAlternatingSubarray(nums = [0,0,0], t = 2)",
        "longestAlternatingSubarray(nums = [0,1,2,3,4,5,6,7,8,9], t = 3)",
        "longestAlternatingSubarray(nums = [0, 1, 2, 3, 4, 5, 6], t = 2)",
        "longestAlternatingSubarray(nums = [3,4,5,6], t = 7)",
        "longestAlternatingSubarray(nums = [3,5,7], t = 1)",
        "longestAlternatingSubarray(nums = [4,1,2,3,4], t = 3)",
        "longestAlternatingSubarray(nums = [0,0,0,1,2,2,1], t = 4)",
        "longestAlternatingSubarray(nums = [0,0,1,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,1], t = 1)"
    ],
    "sample_102": [
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps([1, 2, 3, 4, 5], 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6], target = 2)",
        "maximumJumps(nums = [1,2,3,4], target = 2)",
        "maximumJumps([1, 2, 3], 1)",
        "maximumJumps(nums = [3, 2, 1, 0], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 1, 2, 3, 1], target = 2)",
        "maximumJumps([1, 1, 3, 1, 1, 1], 4)",
        "maximumJumps(nums = [1,2,1,1,3,1,4], target = 2)",
        "maximumJumps(nums = [3, 1, 1, 5, 9, 2, 6, 4, 3, 5], target = 8)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(s1 = '12345', s2 = '0')",
        "removeTrailingZeros(s1 = \"12345\", s2 = \"0\")",
        "removeTrailingZeros(s1 = \"512301\", s2 = \"01\")",
        "removeTrailingZeros(s1 = \"5123\", s2 = \"01\")",
        "removeTrailingZeros(num = \"20\")",
        "removeTrailingZeros(s1 = \"0023\", s2 = \"1234\")",
        "removeTrailingZeros(s1 = '512301', s2 = '12053')",
        "removeTrailingZeros(s1 = \"12abcd\", s2 = \"12\")",
        "removeTrailingZeros(s1 = 'zazz', s2 = '12301')"
    ],
    "sample_101": [
        "maximumJumps(nums = [1, 2, 3, 4], target = 3)",
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [1, 2, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 5, 8, 9, 10], target = 7)",
        "maximumJumps(nums = [1,2,3,4,5,6,7,8,9,10], target = 9)",
        "maximumJumps(nums = [1, 3, 6, 4, 2, 5], target = 2)",
        "maximumJumps(nums = [1, 3, 6, 8, 9], target = 9)",
        "maximumJumps(nums = [3, 1, 2, 2, 3, 1], target = 2)",
        "maximumJumps(nums = [1, 2, 2, 4, 3, 5, 1], target = 3)",
        "maximumJumps(nums = [2, 1, 1, 4, 4, 4], target = 3)"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 0])",
        "doesValidArrayExist(derived = [1,2,3])",
        "doesValidArrayExist([0, 0, 0, 0, 0, 0, 0, 0, 0])",
        "doesValidArrayExist([1, 0, 0, 1])",
        "doesValidArrayExist(my_list = [1, 2, 3, 4])",
        "doesValidArrayExist([0, 1, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 0, 1, 1, 0, 1, 1])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits([1, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 2, 1, 2, 1, 2, 1, 2])",
        "numberOfGoodSubarraySplits([1, 0, 0, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 0, 0, 0, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [2,2,1,2,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_19": [
        "minLength(s1 = \"AB\", s2 = \"CD\")",
        "minLength(\"AB\")",
        "minLength(s = \"abcd\")",
        "minLength('AB')",
        "minLength(\"\")",
        "minLength(\"aab\")",
        "minLength(s1 = \"abc\", s2 = \"abcd\")",
        "minLength(s = 'abcdabcd')",
        "minLength(s = \"ABabcCD\")",
        "minLength(\"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome('abcd')",
        "makeSmallestPalindrome('abcd')",
        "makeSmallestPalindrome(s = \"abab\")",
        "makeSmallestPalindrome(s = \"a\")",
        "makeSmallestPalindrome(s = \"a\")",
        "makeSmallestPalindrome(\"racecar\")",
        "makeSmallestPalindrome(\"banana\")",
        "makeSmallestPalindrome(s = \"Madam\")",
        "makeSmallestPalindrome(s = \"bzbzqz\")",
        "makeSmallestPalindrome(s = \"abcdefghijklmnopqrstuvwxyz\")"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [2,1,3])",
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation(nums = [0,1,2])",
        "semiOrderedPermutation(nums = [1,2,3,4,5,6])",
        "semiOrderedPermutation([1,2,3,4,5])",
        "semiOrderedPermutation([1,2,1])",
        "semiOrderedPermutation(nums = [5, 2, 3, 4, 1])"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1, 2, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1,2,3])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 0, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [3,5,5])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,0])",
        "numberOfGoodSubarraySplits(indexs = [0,1,1,0,0])",
        "numberOfGoodSubarraySplits(nums = [5, 1, 1, 2, 4, 3, 5, 3, 1])",
        "numberOfGoodSubarraySplits(nums = [3,2,1,3,5,4,8,9,3,2])"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "maximumBeauty([1, 2, 3, 4, 5], 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "maximumBeauty(nums = [1,3,5,7], k = 2)",
        "maximumBeauty(nums = [3, 4, 2, 1, 5], k = 3)",
        "maximumBeauty(nums = [0,0,0,0,0,0,0,0,0], k = 0)",
        "maximumBeauty(nums = [0, 0, 1, 2], k = 1)",
        "maximumBeauty(nums = [1, 4, 6, 5, 3, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 3, 6, 4], k = 2)",
        "maximumBeauty(nums = [3, 6, 1, 0, 2, 5, 3, 4], k = 1)"
    ],
    "sample_117": [
        "minimumIndex([5,5,5,5,5])",
        "minimumIndex([3,2,1,2,1,3])",
        "minimumIndex(nums = [2, 1, 2, 1, 1])",
        "minimumIndex(nums = [3, 1, 5, 2, 6, 7])",
        "minimumIndex(my_list = [2, 4, 5, 6])",
        "minimumIndex(nums = [1, 2, 2, 2, 2, 4, 4, 4])",
        "minimumIndex(nums = [4, 2, 3, 5, 1, 2, 1])",
        "minimumIndex(my_list = [4, 2, 3, 2, 1, 4, 4, 4, 3])",
        "minimumIndex([3, 2, 3, 4, 2, 2, 4])",
        "minimumIndex(nums = [0, 3, 0, 2, 1, 2, 0, 1, 3, 2])"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(??)",
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 0, num2 = 1)",
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 0, num2 = 6)",
        "makeTheIntegerZero(num1 = 20, num2 = 5)",
        "makeTheIntegerZero(num1 = 3, num2 = 4)",
        "makeTheIntegerZero(??,2)",
        "makeTheIntegerZero(num1 = 12345, num2 = 0)"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [])",
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(nums = [34, 56, 78, 90])",
        "countBeautifulPairs(my_list = [11, 22, 33, 44])",
        "countBeautifulPairs(nums = [15, 2, 3])",
        "countBeautifulPairs(nums = [12, 15, 10])",
        "countBeautifulPairs(nums = [24, 15, 18])",
        "countBeautifulPairs(nums = [3,4,5,5,6,6,8])",
        "countBeautifulPairs(nums = [10, 30, 100, 1000, 10000])",
        "countBeautifulPairs([123,246,369])"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 0, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 4)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 20, num2 = 3)",
        "makeTheIntegerZero(num1 = 2, num2 = 7)",
        "makeTheIntegerZero(num1 = 0, num2 = 4)",
        "makeTheIntegerZero(num1 = 123, num2 = 0)",
        "makeTheIntegerZero(num1 = 20, num2 = 7)",
        "makeTheIntegerZero(num1 = 12345, num2 = 12345)",
        "makeTheIntegerZero(num1 = 0b1100001, num2 = 0b0101010)"
    ],
    "sample_20": [
        "minLength(\"abcd\")",
        "minLength(\"abcd\")",
        "minLength(\"abcde\")",
        "minLength(s1 = \"abcdef\")",
        "minLength(s1 = \"abcdefg\")",
        "minLength(\"AB\")",
        "minLength(\"ababab\")",
        "minLength(s1 = \"abcdabcd\")",
        "minLength(s1 = \"ABBA\")",
        "minLength(\"pancakes\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty([3, 2, 1], 2)",
        "maximumBeauty(nums = [1, 5, 9, 12, 15], k = 2)",
        "maximumBeauty([10, 20, 30, 40, 50], k = 5)",
        "maximumBeauty(nums = [2, 5, 1, 4, 9], k = 3)",
        "maximumBeauty(nums = [3, 4, 1, 5, 2, 6, 7, 8], k = 3)",
        "maximumBeauty(nums = [2, 4, 6, 5, 9, 8, 7, 3, 1, 10], k = 2)",
        "maximumBeauty(nums = [6, 8, 2, 4, 6, 3, 5], k = 2)",
        "maximumBeauty(nums = [2, 5, 9, 11, 11, 11, 12, 12, 12, 12], k = 3)"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [1,2,3,4,5])",
        "countBeautifulPairs(nums = [1,2,3,4])",
        "countBeautifulPairs(nums = [10,20,30,40])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countBeautifulPairs(nums = [1, 4, 6, 2, 3])",
        "countBeautifulPairs(nums = [10, 3, 5])",
        "countBeautifulPairs(nums = [3,5,2,3,1,7])",
        "countBeautifulPairs(nums = [4, 3, 10, 20, 30])",
        "countBeautifulPairs(nums = [12,4,1,2,3,2,3])",
        "countBeautifulPairs(nums = [23, 37, 18, 47, 51, 16, 22])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 2, num2 = 3)",
        "makeTheIntegerZero(num1 = 0, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 3, num2 = 7)",
        "makeTheIntegerZero(num1 = 5, num2 = 10)",
        "makeTheIntegerZero(num1 = 9, num2 = 3)",
        "makeTheIntegerZero(num1 = 4, num2 = 5)",
        "makeTheIntegerZero(num1 = 6, num2 = 6)",
        "makeTheIntegerZero(num1 = 7, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 20)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(\"abcd\")",
        "makeSmallestPalindrome(s = \"abcde\")",
        "makeSmallestPalindrome(\"abcde\")",
        "makeSmallestPalindrome('bab')",
        "makeSmallestPalindrome(s1 = \"a\", s2 = \"b\")",
        "makeSmallestPalindrome('abc')",
        "makeSmallestPalindrome(\"dcba\")",
        "makeSmallestPalindrome(s1 = 'cba')",
        "makeSmallestPalindrome('ababa')",
        "makeSmallestPalindrome(s1 = 'mango', s2 = 'naroo')"
    ],
    "sample_37": [
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(\"\")",
        "minimumCost(s = \"aaaa\")",
        "minimumCost(\"aaa\")",
        "minimumCost(\"abca\")",
        "minimumCost(s = \"ababc\")",
        "minimumCost(s = \"aaabbbccc\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits([0,0,0,0,0])",
        "numberOfGoodSubarraySplits([0,1,1,0])",
        "numberOfGoodSubarraySplits([0,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,0,1,1,0,0,0])",
        "numberOfGoodSubarraySplits([1, 0, 1, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits([1,1,0,1,1,1])",
        "numberOfGoodSubarraySplits([2,3,4,5])",
        "numberOfGoodSubarraySplits(nums = [1,2,1,1,1,2,1,2,2])",
        "numberOfGoodSubarraySplits(nums = [1,2,2,2,4,4,5,5,5,5])"
    ],
    "sample_105": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "checkArray(nums = [0, 1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1,2,3], k = 4)",
        "checkArray(nums = [3, 2, 1, 4], k = 2)",
        "checkArray(nums = [0,1,2,3,4], k = 5)",
        "checkArray(nums = [1, 0, 0, 0, 0, 0, 0], k = 3)",
        "checkArray(nums = [0, 3, -1, -3, 5, 3, 6, 7], k = 2)",
        "checkArray([3, 2, 5, 1, 1, 2, 3], 3)"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [1,3,2])",
        "semiOrderedPermutation([1, 2, 3, 4])",
        "semiOrderedPermutation([1, 3, 2])",
        "semiOrderedPermutation(nums = [0, 0, 1])",
        "semiOrderedPermutation(nums = [1, 3, 1, 2, 1, 2, 3])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray([1, 2, 3], 1)",
        "checkArray(nums = [1, -2, 3], k = 2)",
        "checkArray(nums = [3, -2, 4, -1], k = 2)",
        "checkArray(nums = [5, 3, 1, 2, 0], k = 3)",
        "checkArray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4)",
        "checkArray(nums = [3,2,5,1,4], k = 2)",
        "checkArray(nums = [4,2,3,1,5,6], k = 2)",
        "checkArray([3, 5, 1, 2, 6], 2)",
        "checkArray(nums = [3, 4, 1, 5, 8, 3, 9, 7, 2, 6], k = 3)"
    ],
    "sample_39": [
        "minimumCost(s = \"abc\")",
        "minimumCost(s1 = \"ab\", s2 = \"ba\")",
        "minimumCost(s1 = \"abcd\")",
        "minimumCost(s = \"aaaa\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s1 = \"ab\", s2 = \"aab\")",
        "minimumCost(s1 = \"ab\")",
        "minimumCost(\"aabb\")",
        "minimumCost(s1 = \"aba\", s2 = \"aba\")",
        "minimumCost(s1 = \"aa\", s2 = \"ab\")"
    ],
    "sample_65": [
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5, 6])",
        "findValueOfPartition(sorted(my_list))",
        "findValueOfPartition(a = [3, 1, 4, 2])",
        "findValueOfPartition(a = [3,5,4,2,1])",
        "findValueOfPartition(a = [2, 7, 3, 1, 5])",
        "findValueOfPartition(a = [2,3,6,7,8])",
        "findValueOfPartition(s1 = [5,6,8,9,12,13,15])"
    ],
    "sample_58": [
        "distanceTraveled(m = 5, a = 4)",
        "distanceTraveled(m = 2, a = 5)",
        "distanceTraveled(m = 0, a = 4)",
        "distanceTraveled(m = 2, a = 3)",
        "distanceTraveled(m = 4, a = 2)",
        "distanceTraveled(mainTank = 0, additionalTank = 4)",
        "distanceTraveled(m = 9, a = 9)",
        "distanceTraveled(m = 3, a = 4)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(main = 10, additional = 5)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1, 2, 3])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [])",
        "doesValidArrayExist([1, 0, 1])",
        "doesValidArrayExist(s1 = [1,2,3])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 2, 4, 2, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1, 1, 1, 0, 0])",
        "doesValidArrayExist(derived = [4,5,6,7,8,9,0,1,2,3])"
    ],
    "sample_106": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [0,1,2,3], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "checkArray([0, 0, 0, 0, 0], 1)",
        "checkArray(nums = [5, 6, 7, 8], k = 2)",
        "checkArray(nums = [1, 1, 1, 1], k = 0)",
        "checkArray(nums = [0, 3, 5, 6], k = 3)",
        "checkArray([3, 4, 2, 1, 5], 1)",
        "checkArray(nums = [1, 0, 2, 3, -2], k = 2)",
        "checkArray(nums = [1, 1, 2, 4, 1, 1], k = 2)"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,2,1,3], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 3, 2, 4, 6, 5, 7, 8, 9], threshold = 3)",
        "longestAlternatingSubarray([3,2,1,5,4,3], 3)",
        "longestAlternatingSubarray(nums = [1,3,2,4,3,1,1], threshold = 3)",
        "longestAlternatingSubarray(nums = [2,2,3,3,4,4,1,1,2,2], threshold = 2)",
        "longestAlternatingSubarray(nums = [0,2,2,2,4,4,4,4,4,6], threshold = 2)",
        "longestAlternatingSubarray(nums = [3, 2, 4, 1, 1, 5, 1, 6], threshold = 5)"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(nums = [9, 9, 9, 9])",
        "countBeautifulPairs(nums = [1, 0, 1, 0, 1])",
        "countBeautifulPairs(nums = [2, 3, 1, 4])",
        "countBeautifulPairs(nums = [9, 2, 4])",
        "countBeautifulPairs(nums = [17, 19, 21, 23])",
        "countBeautifulPairs(my_list = [17, 11, 77])",
        "countBeautifulPairs(nums = [17, 15, 12, 5, 10, 8])",
        "countBeautifulPairs([100, 10, 25, 20, 5])",
        "countBeautifulPairs(nums = [5, 7, 7, 3, 3, 2, 2, 2])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5], t = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6], t = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5], t = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], t = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 1)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6], t = 6)",
        "longestAlternatingSubarray(nums = [1,3,4,2,1], t = 2)",
        "longestAlternatingSubarray(nums = [1,3,3,4,4], t = 1)",
        "longestAlternatingSubarray(nums = [1,2,4,3,5,6,2,3,4,5,6], t = 3)",
        "longestAlternatingSubarray(nums = [1,3,2,5,3,2,5,6], t = 2)"
    ],
    "sample_36": [
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(\"abcd\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(\"ba\")",
        "minimumCost(s1 = \"ba\", s2 = \"ab\")",
        "minimumCost(s1 = \"bba\", s2 = \"aab\")",
        "minimumCost(s1 = \"ba\", s2 = \"bnna\")"
    ],
    "sample_21": [
        "minLength(\"abcd\")",
        "minLength(\"abcde\")",
        "minLength(\"abcd\")",
        "minLength(s1 = \"abc\")",
        "minLength(s1 = \"ABCDE\")",
        "minLength(s1 = \"abcdef\")",
        "minLength(\"abcdabcd\")",
        "minLength(s = \"ABCD\")",
        "minLength(\"CDAB\")",
        "minLength(s1 = \"ABBAA\")"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [3, 2, 1, 2, 4, 3])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",
        "numberOfGoodSubarraySplits([0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,1,1,0,1,0,0,1,1,0,0])"
    ],
    "sample_9": [
        "colorTheArray(n = 3, queries = [[0, 2], [1, 2], [0, 2]])",
        "colorTheArray(n = 3, queries = [[0, 2], [1, 3], [2, 3]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [3, 2], [4, 2]])",
        "colorTheArray(n = 6, queries = [[0, 2], [1, 3], [2, 4], [3, 5], [4, 1], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 5], [1, 3], [5, 3], [5, 1]])",
        "colorTheArray(n = 3, queries = [[0, 2], [1, 2], [0, 2], [0, 1], [2, 1]])",
        "colorTheArray(n = 5, queries = [[0,1], [1,0], [0,1], [1,0], [0,1], [1,0], [1,0]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,0],[3,2],[4,3],[3,4]])",
        "colorTheArray(n = 5, queries = [[1,2],[0,3],[1,4],[4,1],[3,4]])",
        "colorTheArray(n = 7, queries = [[1,2],[0,2],[2,4],[0,4],[1,3],[3,5],[4,6]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 2, 1], nums2 = [2, 3, 4, 3, 2])",
        "maxNonDecreasingLength([1, 1, 1, 1], [1, 2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [3, 4, 5, 2, 1], nums2 = [5, 3, 4, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 2, 2, 1], nums2 = [3, 2, 1, 2, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 3, 5, 5], nums2 = [1, 2, 2, 3, 4, 4])",
        "maxNonDecreasingLength(nums1 = [3, 2, 3, 5], nums2 = [3, 3, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1,2,3,5,6,7,8], nums2 = [2,3,4,5,6,7])",
        "maxNonDecreasingLength(nums1 = [3,5,3,6,2,4], nums2 = [1,2,3])"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 2, 3, 4], k = 3)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 3)",
        "maximumBeauty(nums = [10, 20, 30, 40, 50], k = 25)",
        "maximumBeauty(nums = [2, 5, 6, 8, 9, 10], k = 2)",
        "maximumBeauty(nums = [4, 2, 8, 5, 3], k = 3)",
        "maximumBeauty(nums = [0, 2, 2, 1, 1, 0, 0], k = 2)",
        "maximumBeauty(nums = [8, 3, 3, 2], k = 2)",
        "maximumBeauty(nums = [10, 2, 9, 3], k = 4)",
        "maximumBeauty(nums = [1, 3, 1, 3, 3, 3, 4, 4, 4, 4], k = 2)",
        "maximumBeauty(nums = [6,3,1,4,1,8,3,5], k = 2)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 3, 5, 7, 9])",
        "findValueOfPartition(sorted(??))",
        "findValueOfPartition(nums = [1, 3, 5, 7, 9])",
        "findValueOfPartition(nums = [1,3,5,6,7])",
        "findValueOfPartition(nums = [1, 4, 5, 8, 9, 10])",
        "findValueOfPartition(nums = [2,3,3,4,4,4,4])",
        "findValueOfPartition(nums = [4,1,6,2,3,5])",
        "findValueOfPartition(nums = [7, 11, 13, 11, 12, 6])"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1,2,3,4,5])",
        "findValueOfPartition(nums = [0,1,2,3,4,5])",
        "findValueOfPartition([1,3,5])",
        "findValueOfPartition(nums = [2,3,4])",
        "findValueOfPartition([1,3,5,7,10])",
        "findValueOfPartition(nums = [1,5,10,11])",
        "findValueOfPartition(nums = [3,5,1,6,4,7])",
        "findValueOfPartition(nums = [1, 5, 7, 9, 10, 15])",
        "findValueOfPartition([2,5,1,7,5,4,3,5,4])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation([1, 2, 3])",
        "semiOrderedPermutation([1, 2, 3])",
        "semiOrderedPermutation([1,2,3])",
        "semiOrderedPermutation(nums = [0, 1, 2, 3, 4, 5, 6])",
        "semiOrderedPermutation(nums = [4, 1, 5, 3, 2])",
        "semiOrderedPermutation([1, 3, 2, 0, 3])"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [0, 1, 1, 0])",
        "semiOrderedPermutation(nums = [0, 1, 2])",
        "semiOrderedPermutation([1, 0, 1])",
        "semiOrderedPermutation(nums = [0,1,0,1,1,0,1])",
        "semiOrderedPermutation(nums = [1,3,1,2])",
        "semiOrderedPermutation([1, 1, 1, 1, 1, 1, 1])",
        "semiOrderedPermutation([1, 0, 0, 1])",
        "semiOrderedPermutation(s1 = [1,2,3], s2 = [1,2])"
    ],
    "sample_167": [
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(s1 = \"NASA\", s2 = \"SARS\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hwa\")",
        "isAcronym(s1 = [\"apple\"], s2 = [\"ap\"])",
        "isAcronym(words = [\"CODE\"], s = \"Code\")",
        "isAcronym(words = [\"red\", \"apple\"], s = \"readeapple\")",
        "isAcronym(s1 = \"LOL\", s2 = \"LOLULUL\")",
        "isAcronym(words = [\"ABC\", \"def\", \"Ghi\"], s = \"ACB\")",
        "isAcronym(words = [\"banana\", \"anagram\"], s = \"bananabram\")",
        "isAcronym(s1 = [\"I\", \"am\", \"cool\"], s2 = \"I\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "countInterestingSubarrays(nums = [3,2,1,2,2,1,1,3,3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [3,4,5,7,8,9,10,11,15], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [12, 9, 12, 8, 7, 12], m = 12, k = 12)",
        "countInterestingSubarrays(nums = [9, 12, 7, 18, 11, 8], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [4,7,5,8,2,5,6,2,8,3,9,3], m = 2, k = 2)"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[\"1\", \"2\"], [\"3\", \"4\"], [\"5\", \"6\"]])",
        "numberOfPoints(nums = [\n    [1, 2],\n    [3, 4],\n    [5, 6],\n])",
        "numberOfPoints(nums = [[\"1\", \"2\"], [\"1\", \"3\"], [\"2\", \"3\"]])",
        "numberOfPoints(s1 = [0, 1], s2 = [3, 4])",
        "numberOfPoints(nums = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20]])",
        "numberOfPoints(nums = [[0,10],[1,20],[20,30]])",
        "numberOfPoints(nums = [[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]])",
        "numberOfPoints([[3,2,1],[2,2,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1]])",
        "numberOfPoints(nums = [[1,4], [1,5], [5,6], [5,7], [7,8], [8,9], [9,10]])",
        "numberOfPoints(nums = [[0, 9], [3, 7], [1, 3], [0, 9]])"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = ['easy', 'problem'], separator = ' ')",
        "splitWordsBySeparator(s1 = \"easy problem\", separator = \" \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \"e\")",
        "splitWordsBySeparator(w1 = \"easy\", w2 = \"problem\", sep = \" \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\", \"word\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \"a\")",
        "splitWordsBySeparator(words = ['easy', 'problem', 'easy', 'easy'], separator = 'e')",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \"o\")"
    ],
    "sample_216": [
        "numberOfPoints([[1, 3], [2, 4]])",
        "numberOfPoints(nums = [\n    [1, 2],\n    [2, 3],\n    [3, 4],\n    [4, 5],\n    [5, 6],\n    [6, 7],\n    [7, 8]\n])",
        "numberOfPoints([[1, 3], [2, 4]])",
        "numberOfPoints(nums = [[1, 2], [2, 4], [3, 4]])",
        "numberOfPoints(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "numberOfPoints([[2, 4], [4, 6], [8, 10]])",
        "numberOfPoints(nums = [ [0, 1], [1, 3], [4, 6] ])",
        "numberOfPoints(nums = [\n    [1, 3],\n    [0, 4],\n    [3, 2],\n    [5, 1]\n])",
        "numberOfPoints(nums = [ [1,3], [4,5], [2,6]])",
        "numberOfPoints(nums = [[3, 5], [0, 4], [8, 11], [2, 7], [10, 12], [2, 4]])"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [0, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1,1,1,1])",
        "countCompleteSubarrays([1, 2, 2, 3])",
        "countCompleteSubarrays(nums = [0, 0, 0, 1, 1, 1])",
        "countCompleteSubarrays([2, 2, 3])",
        "countCompleteSubarrays(nums = [2, 1, 4, 2])",
        "countCompleteSubarrays(nums = [0,1,1,0,0,0])",
        "countCompleteSubarrays(nums = [2,2,1,2,1,2,2,1,2])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"-\")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = '-')",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \".\")",
        "splitWordsBySeparator(?? = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"xyz\")"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 2, 3, 4])",
        "maxIncreasingGroups(u = [1, 2, 3])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(u = [3, 4, 5, 1, 2])",
        "maxIncreasingGroups(u = [10, 5, 2, 1])",
        "maxIncreasingGroups(u = [4, 2, 3, 1, 2])",
        "maxIncreasingGroups([3, 4, 5, 6, 7])",
        "maxIncreasingGroups(u = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11])",
        "maxIncreasingGroups(u = [1, 2, 4, 2, 1])",
        "maxIncreasingGroups(u = [1,3,4,2,4])"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 1)",
        "minAbsoluteDifference(nums = [1, 2, 3, 4, 5], x = 3)",
        "minAbsoluteDifference(nums = [3,2,4,1,5], x = 4)",
        "minAbsoluteDifference(nums = [6,4,2,1,3,5], x = 3)",
        "minAbsoluteDifference(nums = [-1, 1, 2, -3, 4], x = 1)",
        "minAbsoluteDifference(nums = [2,3,-2,1], x = 1)",
        "minAbsoluteDifference(nums = [0, 1, 2, -1, -4], x = -3)",
        "minAbsoluteDifference(nums = [5,2,3,4,4,5], x = 1)",
        "minAbsoluteDifference(nums = [0, 0, 0, 2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5], x = 2)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], modulo = 3, k = 4)",
        "countInterestingSubarrays(nums = [0, 0, 0, 0, 0, 0, 0, 0], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,0], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 1, 1, 1, 2, 2, 2, 2, 2], modulo = 2, k = 2)",
        "countInterestingSubarrays(nums = [0,1,2,3,4,5,6,7,8,9,10], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [1, 1, 2, 4, 8, 16], modulo = 2, k = 3)",
        "countInterestingSubarrays([5,7,8,9,10,11,12], 5, 3)",
        "countInterestingSubarrays(nums = [2, 3, 5, 10, 5, 3, 3, 2], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 6, 4, 5, 8, 5, 9], modulo = 2, k = 2)",
        "countInterestingSubarrays(nums = [9,1,5,3,4,2,1,2,1,1,1], modulo = 2, k = 4)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 3)",
        "canSplitArray(nums = [2, 4, 6], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7, 8], m = 11)",
        "canSplitArray(nums = [1, 2, 5, 6], m = 7)",
        "canSplitArray(nums = [3, 4, 5, 6], m = 5)",
        "canSplitArray(nums = [2, 3, 2, 4], m = 7)",
        "canSplitArray(nums = [5, 2, 1, 4], m = 7)",
        "canSplitArray(nums = [1, 3, 4, 7, 8], m = 9)"
    ],
    "sample_169": [
        "isAcronym(words = [\"ABC\", \"DEF\"], s = \"ABCDEF\")",
        "isAcronym(s1 = \"foo\", s2 = \"bar\")",
        "isAcronym(words = [\"hi\"], s = \"h\")",
        "isAcronym(words = [\"NASA\", \"ISS\"], s = \"NASS\")",
        "isAcronym(words = [\"Mr.\", \"Mrs.\", \"Ms.\"], s = \"Mr.Mrs.Ms.\")",
        "isAcronym(words = [\"Happy\", \"Birthday\"], s = \"HBP\")",
        "isAcronym(words = [\"Mr.\", \"Miss\", \"Mrs.\"], s = \"Mrs.\")",
        "isAcronym(words = [\"\", \"AB\", \"CDE\"], s = \"ACDE\")",
        "isAcronym(words = [\"add\", \"me\"], s = \"abcde\")",
        "isAcronym(words = [\"id\", \"kam\"], s = \"idkam\")"
    ],
    "sample_121": [
        "minimumIndex(nums = [5,4,3,2,1])",
        "minimumIndex(nums = [2, 2, 2, 2, 2])",
        "minimumIndex(nums = [1,2,3,4])",
        "minimumIndex(nums = [1,1,2])",
        "minimumIndex(nums = [4, 3, 2, 1])",
        "minimumIndex([1,2,3,3,2,1])",
        "minimumIndex(nums = [1,1,1,3,3,3,4,4,4,4])",
        "minimumIndex(my_list = [1, 2, 3, 4, 4, 4, 5, 5])",
        "minimumIndex([1, 2, 3, 4, 5, 3, 2, 1, 0])",
        "minimumIndex(nums = [2,1,4,5,3,7,2,6,1,5,6])"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 1, offers = [[1, 1, 1], [2, 2, 2], [3, 3, 3]])",
        "maximizeTheProfit(n = 3, offers = [[1, 10, 4], [2, 6, 3], [3, 5, 2]])",
        "maximizeTheProfit(n = 6, offers = [[1, 6, 3], [4, 5, 1], [2, 3, 4]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 100], [2, 4, 200], [3, 6, 300]])",
        "maximizeTheProfit(n = 4, offers = [[1, 6, 1], [2, 7, 3], [3, 8, 2]])",
        "maximizeTheProfit(n = 10, offers = [[1, 2, 100], [2, 3, 50], [3, 4, 20], [4, 5, 15]])",
        "maximizeTheProfit(n = 3, offers = [(0, 3, 1), (2, 6, 5), (1, 3, 2), (3, 8, 4)])",
        "maximizeTheProfit(n = 5, offers = [[5, 10, 3], [1, 10, 7], [3, 2, 5], [3, 3, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 2], [5, 2, 3], [5, 5, 3], [1, 6, 2], [1, 8, 3]])",
        "maximizeTheProfit(n = 9, offers = [\n    [5, 5, 2],\n    [5, 6, 1],\n    [5, 8, 5],\n    [8, 6, 3],\n    [7, 7, 2],\n    [7, 7, 6],\n    [6, 6, 8],\n    [5, 5, 5]\n])"
    ],
    "sample_238": [
        "maximumTripletValue([1, 2, 3])",
        "maximumTripletValue([1,2,3,4,5,6])",
        "maximumTripletValue(nums = [12, 34, 56, 78])",
        "maximumTripletValue(nums = [3, 1, 2])",
        "maximumTripletValue([2,3,1,4,5])",
        "maximumTripletValue([0, -1, 2, -3])",
        "maximumTripletValue([1, -2, 3, -4])",
        "maximumTripletValue(nums = [4, 5, 8, 4])",
        "maximumTripletValue(nums = [4, 5, 2, 9, 10, 4])",
        "maximumTripletValue([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"LR\")",
        "furthestDistanceFromOrigin(moves = \"_LR_\")",
        "furthestDistanceFromOrigin(moves = \"LLR_\")",
        "furthestDistanceFromOrigin(moves = \"_LL_LR_\")",
        "furthestDistanceFromOrigin(moves = \"LR_LR_R_L\")",
        "furthestDistanceFromOrigin(\"LR_LL\")",
        "furthestDistanceFromOrigin(moves = \"LR_LLR_RRR\")",
        "furthestDistanceFromOrigin(moves = \"L_LR_L_L_L\")",
        "furthestDistanceFromOrigin(\"LLRR_RRLL\")",
        "furthestDistanceFromOrigin(s = \"LRRLRLL\")"
    ],
    "sample_149": [
        "finalString(s = \"hi\")",
        "finalString(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "finalString(s = \"abcd\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ghi\")",
        "finalString(s1 = \"ir\", s2 = \"nag\")",
        "finalString(s1 = \"ro\", s2 = \"t\")",
        "finalString(s1 = \"asd\", s2 = \"dsa\")",
        "finalString(s1 = \"ki\")",
        "finalString(s1 = \"cat\", s2 = \"dog\", s3 = \"cat\")"
    ],
    "sample_162": [
        "maxSum([1, 2, 3, 4, 5])",
        "maxSum([1, 2, 3])",
        "maxSum([1, 2, 3])",
        "maxSum([1, 2, 3, 4, 5])",
        "maxSum([1, 1, 1, 2, 2, 3])",
        "maxSum(nums = [1, 3, 5, 10, 12])",
        "maxSum([0, 2, 2, 0])",
        "maxSum([-1, 2, 3, 4, -5, -6, -7, -8, -9])",
        "maxSum([-10, 0, 10, -10, -10])",
        "maxSum(nums = [1, 5, -10, 3, 3, -8, -8, -10, 10, 10])"
    ],
    "sample_230": [
        "countWays(nums = [4, 2, 3, 1])",
        "countWays(nums = [4,2,1,3])",
        "countWays(nums = [1,3,4,2,5])",
        "countWays([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countWays(nums = [2,3,1,2,5])",
        "countWays(my_list = [3, 2, 1, 5, 4])",
        "countWays(my_list = [3, 1, 4, 2])",
        "countWays(nums = [10, 4, 5, 1])",
        "countWays(nums = [3, 2, 2, 4, 5, 5])",
        "countWays(nums = [10, 3, 2, 10, 8, 2, 10])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 4, target = 5)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 5, target = 20)",
        "minimumPossibleSum(n = 6, target = 9)",
        "minimumPossibleSum(n = 4, target = 12)",
        "minimumPossibleSum(n = 2, target = 7)",
        "minimumPossibleSum(n = 10, target = 20)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 3, offers = [(0, 0, 1), (1, 1, 2), (2, 2, 3)])",
        "maximizeTheProfit(N = 6, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(N = 2, offers = [[1,3,5],[2,4,6]])",
        "maximizeTheProfit(N = 3, offers = [[0, 2, 5], [1, 2, 6], [2, 1, 7]])",
        "maximizeTheProfit(N = 5, offers = [[0, 1, 10], [2, 3, 5], [4, 3, 2]])",
        "maximizeTheProfit(N = 1, offers = [(1, 2, 3), (2, 3, 4), (3, 4, 5), (5, 6, 6)])",
        "maximizeTheProfit(N = 4, offers = [\n    [1, 3, 2],\n    [1, 2, 4],\n    [2, 3, 3],\n    [2, 3, 2],\n])",
        "maximizeTheProfit(N = 10, offers = [(0, 1, 5), (1, 0, 6), (1, 2, 7), (3, 2, 8)])",
        "maximizeTheProfit(N = 5, offers = [\n    [1, 5, 1],\n    [3, 4, 2],\n    [2, 1, 3],\n    [4, 5, 5],\n    [5, 1, 4]\n])",
        "maximizeTheProfit(N = 100, offers = [[3, 2, 6], [5, 2, 3], [8, 8, 9]])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 4, offers = [[0, 1, 1], [1, 2, 1], [2, 3, 1], [3, 4, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,3], [4,5,6], [1,2,3]])",
        "maximizeTheProfit(n = 10, offers = [[1, 3, 5], [2, 6, 7], [3, 9, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 5, 10], [2, 3, 7]])",
        "maximizeTheProfit(n = 4, offers = [[0, 2, 1], [1, 2, 0], [2, 1, 1], [3, 0, 2]])",
        "maximizeTheProfit(n = 6, offers = [[1, 3, 5], [2, 4], [0, 1, 5]])",
        "maximizeTheProfit(n = 5, offers = [\n    [1, 2, 2],\n    [2, 3, 4],\n    [3, 3, 3],\n    [3, 3, 3],\n    [3, 3, 3],\n])",
        "maximizeTheProfit(n = 3, offers = [[3, 8, 9], [1, 5, 2], [0, 7, 3]])",
        "maximizeTheProfit(n = 6, offers = [\n    [1, 5, 7],\n    [2, 3, 8],\n    [3, 4, 9],\n    [4, 2, 6],\n    [5, 1, 8],\n    [6, 7, 4]\n])",
        "maximizeTheProfit(n = 7, offers = [[3, 4, 2], [5, 6, 3], [8, 9, 9], [4, 8, 9], [6, 7, 4], [1, 8, 2], [9, 1, 6]])"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(??)",
        "numberOfEmployeesWhoMetTarget(??)",
        "numberOfEmployeesWhoMetTarget(??)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 10, 15, 20], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50, 60], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [6,7,8], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 5, 9], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 6, 7, 8], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 8, 7, 8, 9, 10, 12], target = 7)"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9])",
        "countCompleteSubarrays(nums = [1,2,3,4])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,1])",
        "countCompleteSubarrays(nums = [1, 2, 2])",
        "countCompleteSubarrays(nums = [1,2,3,4,4,3,2,1,2])",
        "countCompleteSubarrays(nums = [1,2,1,3,2,3,3])",
        "countCompleteSubarrays(nums = [1,2,1,3,4,4,5,6])",
        "countCompleteSubarrays(nums = [3, 1, 2, 6, 5, 4])",
        "countCompleteSubarrays(nums = [4,5,1,1,5,5,6,4,3,2])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1,2,3])",
        "countWays(nums = [0, 1, 2])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays(nums = [1, 3, 4, 5])",
        "countWays([1,3,5])",
        "countWays(nums = [1,2,4,5])",
        "countWays(my_list = [1, 2, 4, 5])",
        "countWays(s1 = [1, 3, 5, 6], s2 = [2, 3, 4, 5])",
        "countWays(nums = [1, 3, 7, 4, 5, 6])"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(count = [3, 2, 1])",
        "maxIncreasingGroups(usageLimits = [0, 1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [0, 0, 0, 0])",
        "maxIncreasingGroups(usageLimits = [1, 3, 6, 5])",
        "maxIncreasingGroups(count = [1, 3, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [3, 4, 2, 6, 7])",
        "maxIncreasingGroups(count = [0, 0, 1, 1, 1, 0])",
        "maxIncreasingGroups(usageLimits = [20,30,40])",
        "maxIncreasingGroups([3, 5, 2, 5, 3, 5, 5])"
    ],
    "sample_173": [
        "minimumSum(n = 10, k = 3)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 6, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(k = 5, n = 8)",
        "minimumSum(k = 4, n = 5)"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 4, 3, 5], m = 3, k = 3)",
        "countInterestingSubarrays(nums = [2, 3, 4, 5, 6, 7, 8, 9], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], m = 4, k = 2)",
        "countInterestingSubarrays(nums = [3, 3, 4, 5, 5, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [0, 1, 1, 2, 2, 3, 5, 5, 8], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 3, 4, 6, 8, 12, 24, 48], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [5, 6, 8, 10, 4, 2, 1], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [20, 45, 30, 10, 25, 20], m = 5, k = 2)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,5,5,5,5])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 1])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,4])",
        "countCompleteSubarrays(nums = [2,1,2])",
        "countCompleteSubarrays([1, 2, 3, 4, 5, 4, 3, 2, 1])",
        "countCompleteSubarrays(nums = [0, 0, 1, 2, 2, 3])",
        "countCompleteSubarrays(nums = [2, 2, 4, 4, 6])",
        "countCompleteSubarrays(nums = [1, 2, 2, 1, 1, 2, 1, 1])"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4], k = 2)",
        "longestEqualSubarray(nums = [1,1,2], k = 2)",
        "longestEqualSubarray(nums = [2, 1, 1, 2, 2, 2], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 4, 3, 5], k = 2)",
        "longestEqualSubarray(nums = [3,2,4,5,1,2], k = 3)",
        "longestEqualSubarray(nums = [2,2,3,3,3,2], k = 4)",
        "longestEqualSubarray([0, 1, 1, 0, 1, 0, 1, 0, 0, 0], 1)",
        "longestEqualSubarray([2, 4, 6, 2, 1, 3, 5], 3)"
    ],
    "sample_170": [
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"ABC\"], s = \"ABC\")",
        "isAcronym(words = [\"ab\", \"cd\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\"], s = \"ap\")",
        "isAcronym(words = [\"ANACRONYM\"], s = \"ANACRONYM\")",
        "isAcronym(words = [\"CAT\", \"DOG\", \"MONK\"], s = \"CATDOGMONK\")",
        "isAcronym(words = [\"USA\", \"NASA\", \"MARS\"], s = \"USA\")",
        "isAcronym(words = [\"NASA\", \"SARS\", \"CORONA\"], s = \"SARS\")",
        "isAcronym(words = [\"Yes\", \"Yes\"], s = \"YEs\")",
        "isAcronym(words = [\"WELCOME\", \"FAILURE\"], s = \"WELCOMEFAILURE\")"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = \"1001\")",
        "maximumOddBinaryNumber(s = \"1001\")",
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"010\")",
        "maximumOddBinaryNumber(s1 = \"101\")",
        "maximumOddBinaryNumber(s = \"011\")",
        "maximumOddBinaryNumber(\"111\")",
        "maximumOddBinaryNumber(s = \"0101\")",
        "maximumOddBinaryNumber(s = \"1010\")",
        "maximumOddBinaryNumber(\"10110111\")",
        "maximumOddBinaryNumber(\"abcccba\")"
    ],
    "sample_226": [
        "countWays([1,2,3])",
        "countWays([1,2,3])",
        "countWays(nums = [1, 2, 1])",
        "countWays(nums = [1,2,3,4])",
        "countWays(nums = [0, 1, 2, 3, 4])",
        "countWays(nums = [1,1,2])",
        "countWays([2, 3, 4, 5])",
        "countWays(nums = [4, 5, 2, 1, 3])",
        "countWays([1, 2, 2, 2, 3, 4, 4, 4, 4])",
        "countWays(nums = [1, 2, 3, 4, 5, 5, 5, 5, 5])"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 3, offers = [[1,2,3], [2,3,4], [3,4,5]])",
        "maximizeTheProfit(n = 9, offers = [[1, 3, 5], [2, 4, 6]])",
        "maximizeTheProfit(n = 3, offers = [[2, 3, 1], [5, 2, 6], [3, 4, 5]])",
        "maximizeTheProfit(n = 3, offers = [[2, 1, 10], [5, 3, 2], [7, 8, 9]])",
        "maximizeTheProfit(n = 2, offers = [[2, 3, 6], [3, 5, 2], [5, 2, 1]])",
        "maximizeTheProfit(n = 3, offers = [[1,3,4], [2,3,5], [2,3,3], [3,3,3], [3,3,1]])",
        "maximizeTheProfit(n = 12, offers = [[3, 6, 5], [5, 2, 6], [2, 4, 7]])",
        "maximizeTheProfit(n = 8, offers = [[3, 3, 4], [5, 4, 5], [6, 5, 6], [7, 4, 6]])",
        "maximizeTheProfit(n = 4, offers = [[0, 1, 1, 0], [2, 3, 3, 1], [3, 4, 5, 3], [2, 2, 2, 1]])",
        "maximizeTheProfit(n = 6, offers = [[1, 3, 1], [4, 2, 6], [5, 2, 7], [2, 7, 8], [1, 3, 6], [5, 2, 5]])"
    ],
    "sample_122": [
        "minimumIndex(nums = [1,2,3,4,5,6,7,8,9])",
        "minimumIndex(nums = [1,2,2,3,3,3])",
        "minimumIndex(nums = [1, 2, 2, 2])",
        "minimumIndex(nums = [3,1,2,4])",
        "minimumIndex(nums = [3,3,1,3,3])",
        "minimumIndex([1,3,2,4,3])",
        "minimumIndex(nums = [2,3,4,2,5])",
        "minimumIndex(nums = [3, 1, 2, 2, 5])",
        "minimumIndex(nums = [5, 2, 5, 2])",
        "minimumIndex(nums = [2,2,2,2,2,2,1,1,1,1,1,1])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[0,1], [2,3], [4,5]])",
        "numberOfPoints(nums = [[0,1], [1,2], [2,3], [3,4]])",
        "numberOfPoints(nums = [[1,2,3], [2,3,4], [3,4,5]])",
        "numberOfPoints(nums = [[1, 10], [2, 20], [5, 15]])",
        "numberOfPoints(nums = [[1,10],[1,2],[3,5]])",
        "numberOfPoints(nums = [[2,3], [5,7], [2,5]])",
        "numberOfPoints(nums = [[0,10], [0,10], [0,10], [0,10], [0,10], [0,10], [0,10], [0,10], [0,10], [0,10]])",
        "numberOfPoints(l = [1, 2, 3, 4], r = [5, 6, 7, 8])",
        "numberOfPoints([[1,4],[4,3],[5,4],[7,9]])",
        "numberOfPoints(nums = [[0, 2], [0, 5], [0, 6], [1, 5], [1, 7], [2, 6], [2, 7], [3, 6], [3, 7]])"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"hello\", \"world\"], separator = \" \")",
        "splitWordsBySeparator(s1 = \"banana\", separator = \" \")",
        "splitWordsBySeparator(words = [\"cat\", \"dog\", \"fish\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"banana\", \"apple\", \"orange\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"the\", \"cat\", \"in\", \"the\", \"hat\"], separator = \"the\")",
        "splitWordsBySeparator(s1 = \"a,b,c,d,e,f,g\", separator = \",\")",
        "splitWordsBySeparator(words = [\"google\", \"microsoft\", \"apple\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"banana\", \"ana\", \"xyz\"], separator = \"a\")",
        "splitWordsBySeparator(s1 = \"bannana\", separator = \"n\")",
        "splitWordsBySeparator(s1 = \"redredredredred\", separator = \"red\")"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 5, target = 7)",
        "minimumPossibleSum(n = 5, target = 3)",
        "minimumPossibleSum(n = 5, target = 7)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 4, target = 8)",
        "minimumPossibleSum(n = 8, target = 8)",
        "minimumPossibleSum(n = 10, target = 0)",
        "minimumPossibleSum(n = 15, target = 8)"
    ],
    "sample_219": [
        "numberOfPoints([[1, 2], [3, 4], [1, 5]])",
        "numberOfPoints([[1, 3], [2, 2], [3, 4]])",
        "numberOfPoints(nums = [[1,3], [2,4], [3,2]])",
        "numberOfPoints(nums = [[1, 3], [2, 2], [4, 6]])",
        "numberOfPoints(nums = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5]])",
        "numberOfPoints([[2, 3], [1, 2], [4, 5]])",
        "numberOfPoints([[0, 2], [1, 3], [1, 5]])",
        "numberOfPoints(nums = [\n    [0, 1],\n    [1, 2],\n    [2, 3],\n    [3, 4],\n    [4, 5],\n    [5, 6],\n    [6, 7],\n])",
        "numberOfPoints(nums = [[0, 2], [1, 3], [2, 2]])",
        "numberOfPoints([[1,2], [2,3], [2,2], [1,3]])"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [0,0,0,0,0], m = 1, k = 3)",
        "countInterestingSubarrays(nums = [1,1,1,1,1,1,1,1,1], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [1, 0, 1, 1, 1, 1, 0], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [0, 1, 0, 1, 0, 0, 1, 1, 1], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1,1,0,1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [3,1,0,1,3], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [2,1,3,5,6], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [6, 1, 1, 6, 5, 2, 2, 4], m = 3, k = 2)"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4], k = 3)",
        "sumIndicesWithKSetBits(nums = [3, 5, 6, 8], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 5, 1, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [6, 7, 8, 9], k = 3)",
        "sumIndicesWithKSetBits(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], k = 4)"
    ],
    "sample_203": [
        "minimumOperations(num = \"0025\")",
        "minimumOperations(\"0025\")",
        "minimumOperations(??)",
        "minimumOperations(\"00\")",
        "minimumOperations('00')",
        "minimumOperations(num = \"0025507500\")",
        "minimumOperations(num = \"11\")",
        "minimumOperations(num = \"100100\")",
        "minimumOperations(num = \"a00ab\")",
        "minimumOperations(s1 = 'zzz', s2 = 'aa')"
    ],
    "sample_209": [
        "countInterestingSubarrays([1, 2, 3, 4, 5], 2, 2)",
        "countInterestingSubarrays([1,2,3,4,5], 2, 3)",
        "countInterestingSubarrays(nums = [2, 1, 4, 3], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [0,0,0,1,1,1], modulo = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 0, 1, 1, 0, 0, 1], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 1, 2, 4, 5, 6], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 4, 5, 6, 7, 8], modulo = 8, k = 2)",
        "countInterestingSubarrays(nums = [3, 1, 1, 3, 3, 1], modulo = 2, k = 2)",
        "countInterestingSubarrays(nums = [2, 2, 3, 2, 2, 1, 2, 2, 1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [10, 10, 0, 1, 0, 1, 0, 0], modulo = 3, k = 1)"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1, 2, 3, 4, 5, 6, 7], K = 2)",
        "longestEqualSubarray(A = [0, 0, 0, 0, 0, 0], K = 1)",
        "longestEqualSubarray([0, 0, 0, 0], 1)",
        "longestEqualSubarray(A = [2,2,1,2,2,2], K = 2)",
        "longestEqualSubarray([1, 2, 2, 3, 3, 3, 4], 3)",
        "longestEqualSubarray(A = [2, 2, 2, 2, 2, 3, 3, 3, 3, 3], K = 2)",
        "longestEqualSubarray(A = [5, 2, 2, 1, 1], K = 2)",
        "longestEqualSubarray([0,0,1,0,0,1,1,0,0,0], 2)",
        "longestEqualSubarray([1, 1, 3, 2, 2, 2, 3, 3, 4, 4, 4, 4], 2)",
        "longestEqualSubarray(A = [5,3,4,1,2,5,6,7,2,9], K = 4)"
    ],
    "sample_146": [
        "finalString(s1 = \"ponter\")",
        "finalString(s1 = 'ponter', s2 = 'ter')",
        "finalString(\"ponter\")",
        "finalString(s1 = \"ponter\", s2 = \"ter\")",
        "finalString(s1 = \"ponter\", s2 = \"ter\")",
        "finalString('i')",
        "finalString(s1 = 'ponter', s2 = 'onter')",
        "finalString(s = \"ponter\")",
        "finalString(\"i\")",
        "finalString(\"ponter\")"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 25)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 5, 8, 12], target = 8)",
        "numberOfEmployeesWhoMetTarget([2,3,4,5], 3)",
        "numberOfEmployeesWhoMetTarget(hours = [100, 200, 300, 40], target = 300)",
        "numberOfEmployeesWhoMetTarget(hours = [6, 5, 7, 3, 6, 5, 6, 7], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 4, 3, 6, 9, 9, 9], target = 8)",
        "numberOfEmployeesWhoMetTarget([5,3,3,3,7,6], 4)"
    ],
    "sample_218": [
        "numberOfPoints(??)",
        "numberOfPoints(nums = [[1,2],[3,4],[5,6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [4, 5]])",
        "numberOfPoints([[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1,2], [2,3], [4,5]])",
        "numberOfPoints([[1, 2], [4, 5], [6, 7]])",
        "numberOfPoints(s1 = [1,2,3,4], s2 = [3,4,5,6])",
        "numberOfPoints([[0, 3], [2, 4], [5, 7]])",
        "numberOfPoints([[1, 3], [2, 5], [1, 2]])",
        "numberOfPoints(nums = [([0, 0], [3, 3]), ([0, 0], [1, 1]), ([1, 1], [3, 3])])"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1,2,3,4,5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(A = [5, 4, 3, 2, 1])",
        "maxIncreasingGroups([1,2,3,4,5,6,7,8,9])",
        "maxIncreasingGroups([3, 2, 1])",
        "maxIncreasingGroups(A = [2, 3, 1, 4, 6, 5, 7])",
        "maxIncreasingGroups(A = [1,4,3,2,4,5])",
        "maxIncreasingGroups(A = [1, 3, 5, 8, 10, 12, 13])",
        "maxIncreasingGroups(A = [0, 1, 2, 4, 9, 8])"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 5, offers = [[1,3,5],[2,3,4],[3,4,5]])",
        "maximizeTheProfit(n = 3, offers = [[0,1,2],[0,3,4],[0,4,5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 4, 5], [1, 3, 5], [2, 3, 5], [2, 4, 5], [3, 4, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1,4,3], [2,1,2], [3,3,2]])",
        "maximizeTheProfit(n = 5, offers = [[1,3,4],[1,3,5],[1,3,6],[1,4,5],[1,4,6],[1,5,6]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 1], [3, 2, 5], [1, 3, 6], [4, 2, 3], [2, 2, 1]])",
        "maximizeTheProfit(n = 10, offers = [[2, 5, 9], [1, 3, 8], [0, 3, 7], [1, 2, 9]])",
        "maximizeTheProfit(n = 5, offers = [ [1,1,2], [2,1,1], [1,2,3], [1,1,1], [2,2,1], [1,1,3], [2,1,2] ])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 7], [2, 6, 5], [1, 8, 6], [2, 9, 7], [3, 6, 6]])",
        "maximizeTheProfit(n = 10, offers = [[1,3,3], [3,1,1], [2,1,4], [5,1,2], [5,3,5], [5,2,1], [3,4,3], [1,3,5], [2,4,1], [4,3,2]])"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"L_R_L_R\")",
        "furthestDistanceFromOrigin(moves = \"LR\")",
        "furthestDistanceFromOrigin(moves = \"LLRL\")",
        "furthestDistanceFromOrigin(moves = \"LR_LLR\")",
        "furthestDistanceFromOrigin(s = \"L_R_L_R_\")",
        "furthestDistanceFromOrigin(moves = \"LR_\")",
        "furthestDistanceFromOrigin(moves = \"LL_RR__\")",
        "furthestDistanceFromOrigin(moves = \"_\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLL_\")",
        "furthestDistanceFromOrigin(s = \"L_R_L_R_L_R\")"
    ],
    "sample_175": [
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 4, k = 12)",
        "minimumSum(n = 4, k = 12)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 4, k = 7)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 5, k = 15)",
        "minimumSum(k = 6, n = 2)",
        "minimumSum(k = 5, n = 12)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,2],[3,4],[5,6]])",
        "numberOfPoints(nums = [[1,2],[3,4],[5,6]])",
        "numberOfPoints([[1,3],[2,4]])",
        "numberOfPoints(nums = [[1,4],[2,2],[3,3]])",
        "numberOfPoints(lst = [[1,2], [3,5], [7,10]])",
        "numberOfPoints(nums = [[1,5], [1,1], [3,4]])",
        "numberOfPoints(nums = [[0,0], [1,0], [0,1]])",
        "numberOfPoints([[2,4,4],[4,2,2],[2,2,2]])",
        "numberOfPoints(nums = [ [1,2,3], [2,3,5], [3,4,7], [4,5,10] ])",
        "numberOfPoints(nums = [[3, 3], [1, 2], [2, 1], [1, 1], [2, 2], [3, 3]])"
    ],
    "sample_205": [
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"1234\")",
        "minimumOperations(\"1234\")",
        "minimumOperations(num = \"1234\")",
        "minimumOperations(num = \"025\")",
        "minimumOperations(\"01\")",
        "minimumOperations(num = \"122333444455555\")",
        "minimumOperations(num = \"025000\")",
        "minimumOperations(num = \"1201\")",
        "minimumOperations(\"122520\")"
    ],
    "sample_120": [
        "minimumIndex(nums = [1, 1, 2, 3, 3, 4])",
        "minimumIndex(nums = [2,2,1,1])",
        "minimumIndex(my_list = [2, 1, 2, 3, 1])",
        "minimumIndex([1, 1, 2, 2, 3, 3, 3, 3])",
        "minimumIndex(nums = [0, 1, 1, 2, 2, 2, 3, 4])",
        "minimumIndex(nums = [3, 4, 4, 2, 1, 1])",
        "minimumIndex([1, 1, 3, 2, 3, 2, 2, 1])",
        "minimumIndex(nums = [1, 1, 3, 3, 3, 3, 3, 1, 1, 1])",
        "minimumIndex([5,6,6,6,5,6,7])",
        "minimumIndex([3, 5, 1, 2, 5, 1, 4, 5, 2])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"L_R_L_R\")",
        "furthestDistanceFromOrigin(moves = \"LLRRR_\")",
        "furthestDistanceFromOrigin(moves = \"LR_R_L_R_L\")",
        "furthestDistanceFromOrigin(\"LR_R_L\")",
        "furthestDistanceFromOrigin(moves = \"LR_LLRL\")",
        "furthestDistanceFromOrigin(moves = \"LR_R_L_\")",
        "furthestDistanceFromOrigin(moves = \"RRLL_L\")",
        "furthestDistanceFromOrigin(moves = \"LLR_R_LLL_\")",
        "furthestDistanceFromOrigin(moves = \"LL_RR_LL_\")",
        "furthestDistanceFromOrigin(moves = \"LLRLRL_R_RLRL\")"
    ],
    "sample_161": [
        "maxSum([1, 2, 3])",
        "maxSum(nums = [1, 3, -1, -3, 5, 3, 6, 7])",
        "maxSum([1, 5, 2, 6, 3])",
        "maxSum([2, 4, 5, 6])",
        "maxSum(nums = [1, -1, 3, -4, 5])",
        "maxSum([5, 2, 2, 3, 1])",
        "maxSum([2, 3, 7, 8])",
        "maxSum(nums = [3, 5, 5, 1, 3, 2])",
        "maxSum([4, 20, 100, 60])",
        "maxSum(nums = [10, 20, 40, 40, -100])"
    ],
    "sample_160": [
        "maxSum([1,2,3,4])",
        "maxSum([1, 2, 3, 4, 5])",
        "maxSum([1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 1, 2, 3])",
        "maxSum(nums = [3, 2, 6, 7, 8, 4])",
        "maxSum([7, -8, 8, -7])",
        "maxSum(nums = [-10, -8, -8, -7, -7, -6, -6, -5, -5, -4])",
        "maxSum([123, 23, 4, 5, 7, 2])",
        "maxSum(my_list = [3,2,5,1,7,8,5,4,2])",
        "maxSum([2, 4, 5, 3, 7, 7, 6, 5, 2, 3, 5, 6, 1, 1, 1, 7, 6, 7, 3, 5])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"e\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"\\\\s+\")",
        "splitWordsBySeparator(w1 = \"one\", w2 = \"two\", w3 = \"three\")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"], separator = \" \")",
        "splitWordsBySeparator(s1 = \"one\", s2 = \"two\", separator = \"-\")",
        "splitWordsBySeparator(words = [\"foo\", \"bar\", \"baz\", \"qux\"], separator = \" \")",
        "splitWordsBySeparator(words = ['1', '2', '3', '4', '5', '6'], separator = '-')",
        "splitWordsBySeparator(s1 = \"hello world\", separator = ' ')"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6], target = 5)",
        "numberOfEmployeesWhoMetTarget(s1 = [10, 20, 30, 40, 50], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 11, 12, 13], target = 12)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 2, 1, 4, 3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 3, 4, 2], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 7, 9], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 5, 1, 4, 10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [3,4,5,6,4,5,2], target = 6)"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(??)",
        "numberOfEmployeesWhoMetTarget(??)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(??, 2)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 35)",
        "numberOfEmployeesWhoMetTarget([10, 20, 30, 40], 15)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 3, 5, 2], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 5, 2, 5, 5, 6, 9], target = 5)",
        "numberOfEmployeesWhoMetTarget(hrs = [36, 28, 32, 25], target = 26)",
        "numberOfEmployeesWhoMetTarget(hours = [120, 230, 80, 545], target = 120)"
    ],
    "sample_171": [
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 6, k = 2)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 12, k = 3)",
        "minimumSum(n = 10, k = 2)",
        "minimumSum(n = 10, k = 4)"
    ],
    "sample_159": [
        "maxSum([1,1,2,2])",
        "maxSum([1,2,3,4,5,4,3,2,1])",
        "maxSum([9,1,5,8])",
        "maxSum(nums = [4, 5, 1, 2, 4])",
        "maxSum([-3,5,-1,9])",
        "maxSum(nums = [9,4,8,3,2,6])",
        "maxSum([1,3,-2,5,4,-8])",
        "maxSum([-1, 3, 4, -2, 7, 1])",
        "maxSum(nums = [6, 10, 4, 2, 0, 5, 3, 7, 1])",
        "maxSum([23, -21, 5, -4, -9, 12, -2, -5])"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 6)",
        "canSplitArray(nums = [1, 2, 3], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 10)",
        "canSplitArray(nums = [1, 2, 4, 8], m = 5)",
        "canSplitArray(nums = [1, 2, 4, 6, 9], m = 10)",
        "canSplitArray(nums = [2, 3, 5, 4, 6], m = 9)",
        "canSplitArray(nums = [2,2,2,4,4,4,4], m = 6)",
        "canSplitArray(nums = [4, 2, 6, 10, 1], m = 9)",
        "canSplitArray(nums = [10, 12, 11, 9, 9, 8, 7], m = 17)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"hello\", \"world\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"this\", \"is\", \"a\", \"sentence\"], separator = \" \")",
        "splitWordsBySeparator(s1 = \"ba\", s2 = \"nana\")",
        "splitWordsBySeparator(words = [\"hi\", \"how\", \"are\", \"you\"], separator = \" \")",
        "splitWordsBySeparator(s1 = \"a b c d e f g\", separator = \" \")",
        "splitWordsBySeparator(s1 = \"banana\", s2 = \"-\")",
        "splitWordsBySeparator(words = [\"hello\", \"world\", \"good\", \"morning\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"ba\", \"na\", \"nana\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"banana\", \"mango\", \"pineapple\", \"orange\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"hi\", \"my\", \"name\", \"is\", \"john\"], separator = \" \", return_new_list = False)"
    ],
    "sample_172": [
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 4, k = 2)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 5, k = 4)",
        "minimumSum(n = 10, k = 4)",
        "minimumSum(n = 6, k = 5)",
        "minimumSum(k = 5, n = 6)"
    ],
    "sample_228": [
        "countWays(nums = [0,0,0])",
        "countWays(nums = [0,1,2,3])",
        "countWays([0, 1, 2])",
        "countWays([0, 1, 2, 3, 4, 5])",
        "countWays([0, 0, 1, 1, 0])",
        "countWays(nums = [0, 0, 0, 1, 0])",
        "countWays(nums = [0,1,0,1,0,1,0,1,0])",
        "countWays(nums = [1,1,2,2,2])",
        "countWays(nums = [0, 1, 2, 0, 1, 1])",
        "countWays([-1,2,4,0,3,2,6,1])"
    ],
    "sample_233": [
        "maximumOddBinaryNumber('1101')",
        "maximumOddBinaryNumber(s = \"1\")",
        "maximumOddBinaryNumber(\"0101\")",
        "maximumOddBinaryNumber(\"\")",
        "maximumOddBinaryNumber(s = \"abcd\")",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = \"10101010\")",
        "maximumOddBinaryNumber(s = \"1234\")",
        "maximumOddBinaryNumber(\"11110000\")",
        "maximumOddBinaryNumber(\"aaaaaaaa\")"
    ],
    "sample_119": [
        "minimumIndex(nums = [0, 0, 0, 0, 0])",
        "minimumIndex(nums = [2, 3, 4, 5, 6])",
        "minimumIndex([2, 1, 2, 3, 1, 2])",
        "minimumIndex(nums = [0, 0, 0, 1, 1, 1, 1, 1, 1, 1])",
        "minimumIndex(my_list = [1, 2, 1, 1, 2, 1])",
        "minimumIndex(my_list = [1, 2, 1, 3, 3, 3])",
        "minimumIndex(nums = [4, 3, 2, 6, 7, 8, 9])",
        "minimumIndex(nums = [5, 4, 2, 5, 1])",
        "minimumIndex(nums = [0,2,1,2,0,3,3,3])",
        "minimumIndex(nums = [1, 3, 4, 2, 5, 6, 7, 3, 4, 2, 6, 5, 4, 2, 5, 6, 7])"
    ],
    "sample_153": [
        "canSplitArray(nums = [10,20,30], m = 30)",
        "canSplitArray(nums = [0, 1, 2, 3], m = 2)",
        "canSplitArray(nums = [1,2,3,5,6], m = 3)",
        "canSplitArray(nums = [1,2,5,3,4], m = 6)",
        "canSplitArray(nums = [1,5,10,20], m = 15)",
        "canSplitArray(nums = [6, 5, 4, 7, 8], m = 5)",
        "canSplitArray(nums = [4,7,1,2,1], m = 6)",
        "canSplitArray(nums = [10, 4, 1, 3], m = 6)",
        "canSplitArray(nums = [3,2,7,11,5,6], m = 5)",
        "canSplitArray(nums = [5,5,3,7,8], m = 9)"
    ],
    "sample_147": [
        "finalString(s1 = \"hello\", s2 = \"world\")",
        "finalString(s1 = \"i\", s2 = \"g\")",
        "finalString(s1 = \"i\", s2 = \"g\")",
        "finalString(s1 = \"hi\", s2 = \"there\")",
        "finalString(s1 = \"hi\", s2 = \"there\")",
        "finalString(\"hi there\")",
        "finalString('in')",
        "finalString(\"mississippi\")",
        "finalString(s1 = \"ha\", s2 = \"hi\")",
        "finalString(s = \"i\"*10 + \"s\" + \"n\"*10)"
    ],
    "sample_174": [
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 4, k = 2)",
        "minimumSum(n = 8, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 12, k = 5)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 4, k = 5)",
        "minimumSum(k = 1, n = 6)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1,2,3], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5,6], m = 6)",
        "canSplitArray(nums = [2,3,4], m = 4)",
        "canSplitArray(nums = [0,1,2,3], m = 3)",
        "canSplitArray(nums = [4,2,5], m = 8)",
        "canSplitArray(nums = [5,9,12,15], m = 6)",
        "canSplitArray(nums = [3,3,4,5,3], m = 4)",
        "canSplitArray(nums = [2,2,3,4,3,4], m = 10)"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3])",
        "countCompleteSubarrays([1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 5, 5, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 3, 4])",
        "countCompleteSubarrays(nums = [0, 0, 0, 0, 0, 0, 0, 0])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 4, 4, 4])",
        "countCompleteSubarrays(nums = [3, 2, 1, 4, 3])",
        "countCompleteSubarrays(nums = [0, 1, 1, 2, 2, 1])",
        "countCompleteSubarrays(nums = [4, 6, 2, 4, 6, 1])"
    ],
    "sample_150": [
        "finalString(s1 = \"rtsn\")",
        "finalString(\"si\")",
        "finalString(s1 = \"aba\", s2 = \"bab\")",
        "finalString(s1 = 'abcdefg', s2 = 'i')",
        "finalString(s1 = \"aba\", s2 = \"bba\")",
        "finalString(s = \"ghij\")",
        "finalString(s1 = 'i', s2 = 'z')",
        "finalString(s1 = \"bib\", s2 = \"nia\")",
        "finalString(s1 = \"grwfq\")",
        "finalString(s = \"ihijikal\")"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 5, target = 5)",
        "minimumPossibleSum(n = 10, target = 5)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 10, target = 20)"
    ],
    "sample_176": [
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 10, k = 3)",
        "minimumSum(n = 10, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 10, k = 3)",
        "minimumSum(k = 5, n = 12)",
        "minimumSum(n = 100, k = 23)"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1,2,3,4,5,6], modulo = 2, k = 4)",
        "countInterestingSubarrays(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], modulo = 1, k = 1)",
        "countInterestingSubarrays(nums = [0,1,0,0,1,1,0,1], modulo = 2, k = 2)",
        "countInterestingSubarrays(nums = [2, 5, 7, 2], modulo = 2, k = 3)",
        "countInterestingSubarrays(nums = [3,1,2,2,3,2], modulo = 2, k = 2)",
        "countInterestingSubarrays(nums = [7,2,5,3,7,2,5,3], modulo = 3, k = 3)",
        "countInterestingSubarrays(nums = [4, 6, 3, 5, 8], modulo = 2, k = 5)",
        "countInterestingSubarrays(nums = [2, 5, 9, 4, 2, 3], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [0,1,2,2,2,3,4,4,5,6,7,8,9,10], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [3,4,6,3,4,5,3,2,1,2,3,4,6,3,4,5,3,2,1,2,3,4,6,3,4,5,3,2,1,2,3,4,6,3,4,5,3,2,1,2,3,4,6,3,4,5,3,2,1,2,3,4,6,3,4,5,3,2,1,2,3,4,6,3,4,5,3,2,1,2,3,4,6], k=3, modulo=3)"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 4, 5, 6], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 1, 0, 1, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 4)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [3,4,5,6], k = 2)"
    ],
    "sample_151": [
        "finalString(s1 = \"hi\")",
        "finalString(s = \"i\")",
        "finalString(s1 = \"abc\", s2 = \"def\")",
        "finalString(s = \"hi\")",
        "finalString(s1 = 'si')",
        "finalString(s1 = 'hi', s2 = 'hi')",
        "finalString(\"hello world\")",
        "finalString(\"ro\")",
        "finalString(\"inp\")",
        "finalString(s1 = 'uop', s2 = 'nqo')"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 0, 0, 1, 1, 0], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 0, 1, 1, 0], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 0, 0, 1, 0, 1, 0], k = 0)",
        "sumIndicesWithKSetBits(nums = [1,0,0,1,0,1,1,1], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,0,0,1,1,1,0,1,0,0], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 3, 4, 6, 6, 6, 6], k = 2)"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 3, 5, 7])",
        "maxIncreasingGroups(usageLimits = [5, 3, 1])",
        "maxIncreasingGroups(usageLimits = [1, 5, 10])",
        "maxIncreasingGroups(usageLimits = [0, 3, 5])",
        "maxIncreasingGroups(usageLimits = [1, 5, 9])",
        "maxIncreasingGroups([1, 3, 5, 6, 8, 10])",
        "maxIncreasingGroups([1, 2, 3, 6, 7, 8])",
        "maxIncreasingGroups(usageLimits = [5, 3, 7, 2, 6, 8])",
        "maxIncreasingGroups([2,5,2,5,3])",
        "maxIncreasingGroups([0, 1, 2, 3, 5, 6, 7, 9, 12, 15])"
    ],
    "sample_204": [
        "minimumOperations(s = \"0025\")",
        "minimumOperations(s = \"0025\")",
        "minimumOperations(s = \"002550\")",
        "minimumOperations(s = \"002550\")",
        "minimumOperations(s = \"001\")",
        "minimumOperations(s = \"25\")",
        "minimumOperations(\"01\")",
        "minimumOperations(\"0123456789\")",
        "minimumOperations(s1 = \"10\", s2 = \"00\")",
        "minimumOperations(s1 = \"abcd\")"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(??)",
        "numberOfEmployeesWhoMetTarget(??, 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9], target = 5)",
        "numberOfEmployeesWhoMetTarget(??, ??)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 10, 15], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [6, 8, 10, 12], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 10, 5, 15], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 1, 9, 10], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 4, 5, 2, 2], target = 4)"
    ],
    "sample_148": [
        "finalString(s1 = \"ponter\", s2 = \"ponter\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"pi\", s2 = \"no\")",
        "finalString(s1 = \"i\", s2 = \"nana\")",
        "finalString(s1 = 'ponter', s2 = 'ein')",
        "finalString(s = \"hi\")",
        "finalString(s1 = \"ponter\", s2 = \"iponter\")",
        "finalString(s1 = 'ponter', s2 = 'opter')",
        "finalString(s = \"j\", c = \"i\")",
        "finalString('imeron')"
    ],
    "sample_168": [
        "isAcronym(words = [\"Federal\", \"Bureau\", \"of\", \"Investigation\"], s = \"FBI\")",
        "isAcronym(s1 = \"abcd\", s2 = \"abc\")",
        "isAcronym(words = [\"banana\"], s = \"banna\")",
        "isAcronym(words = [\"NASA\", \"is\"], s = \"National Aeronautics and Space Administration\")",
        "isAcronym(words = [\"banana\", \"apple\", \"cherry\"], s = \"abn\")",
        "isAcronym(words = [\"Netflix\", \"Twitter\", \"Facebook\"], s = \"Netflix\")",
        "isAcronym(words = [\"IS\", \"A\", \"CRON\"], s = \"ISACRON\")",
        "isAcronym(words = [\"car\", \"plane\"], s = \"ac\")",
        "isAcronym(words = [\"E\", \"A\", \"R\", \"N\", \"O\"], s = \"ERON\")",
        "isAcronym(words = [\"NASA\", \"APPLE\", \"LASER\"], s = \"NAPLESARTHEAPPLE\")"
    ],
    "sample_201": [
        "minOperations(nums = [1,2,3,4,5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 7)",
        "minOperations(nums = [1, 2, 3, 4], target = 9)",
        "minOperations([1,2,3,4],5)",
        "minOperations(nums = [1,0,1,0], target = 2)",
        "minOperations([1,0,1,1,0], 3)",
        "minOperations(nums = [4,2,2,2,3], target = 10)",
        "minOperations(nums = [4, 2, 6, 10, 12], target = 6)",
        "minOperations(nums = [3,5,8,3,4], target = 21)",
        "minOperations(nums = [0, 2, 2, 2, 5, 5, 10], target = 8)"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(??)",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"0110\")",
        "maximumOddBinaryNumber(s = \"10101010\")",
        "maximumOddBinaryNumber(??)",
        "maximumOddBinaryNumber(s = '110101')",
        "maximumOddBinaryNumber(s = \"1010101\")",
        "maximumOddBinaryNumber(s1 = \"0101\", s2 = \"1010\")",
        "maximumOddBinaryNumber(s1 = '010', s2 = '111')",
        "maximumOddBinaryNumber(s = \"0001010111\")"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = \"ba\")",
        "maximumOddBinaryNumber(??)",
        "maximumOddBinaryNumber(??)",
        "maximumOddBinaryNumber(s = '10101')",
        "maximumOddBinaryNumber(s = \"110101010\")",
        "maximumOddBinaryNumber(s1 = \"11\")",
        "maximumOddBinaryNumber(s = \"101010\")",
        "maximumOddBinaryNumber(s = \"10001100\")",
        "maximumOddBinaryNumber(s = \"1000\")",
        "maximumOddBinaryNumber(s = \"aaaa\")"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 5, target = 20)",
        "minimumPossibleSum(n = 3, target = 9)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 2, target = 6)",
        "minimumPossibleSum(n = 4, target = 6)",
        "minimumPossibleSum(n = 5, target = 20)",
        "minimumPossibleSum(n = 10, target = 35)"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LR\")",
        "furthestDistanceFromOrigin(moves = \"LRLR\")",
        "furthestDistanceFromOrigin(\"LR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLLRR\")",
        "furthestDistanceFromOrigin(\"LR\")",
        "furthestDistanceFromOrigin(moves = \"LRL\")",
        "furthestDistanceFromOrigin(\"LRRLRR\")",
        "furthestDistanceFromOrigin(moves = \"LRLLLLLRL\")",
        "furthestDistanceFromOrigin(s1 = \"LRRRLLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRLLRRLLLRLRLR\")"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 10, target = 10)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 10, target = 4)",
        "minimumPossibleSum(n = 8, target = 3)",
        "minimumPossibleSum(n = 5, target = 2)",
        "minimumPossibleSum(n = 12, target = 8)",
        "minimumPossibleSum(n = 100, target = 66)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(??)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 25)",
        "numberOfEmployeesWhoMetTarget(??, 13)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 5, 10, 15], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 2, 1, 4, 2], target = 2)",
        "numberOfEmployeesWhoMetTarget([3, 4, 5, 5, 6], 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 4, 10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [8,9,1,2,3,4,5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 6, 5, 3, 4, 7, 8], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [4,5,5,3,8,7,4,4,4], target = 6)"
    ],
    "sample_231": [
        "countWays(nums = [1,2,3])",
        "countWays(nums = [0,1,2])",
        "countWays(nums = [1, 3, 5])",
        "countWays([0, 1, 2])",
        "countWays(nums = [1, 2, 3, 4, 5, 6])",
        "countWays(nums = [3, 1, 2, 2])",
        "countWays(nums = [1, 2, 3, 5, 7, 9])",
        "countWays(s1 = [0, 1, 1, 2, 2, 2])",
        "countWays([3, 4, 2, 5, 1, 7])",
        "countWays([2, 4, 1, 1, 5, 9, 2, 5, 6])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"L_R_L_R\")",
        "furthestDistanceFromOrigin(moves = \"LR\")",
        "furthestDistanceFromOrigin(moves = \"LR_L\")",
        "furthestDistanceFromOrigin(moves = \"LR_R_R\")",
        "furthestDistanceFromOrigin(moves = \"L_R_L_R_L_L\")",
        "furthestDistanceFromOrigin(moves = \"LLR_LRL\")",
        "furthestDistanceFromOrigin(moves = \"LRRL\")",
        "furthestDistanceFromOrigin(moves = \"LR_LR_LR_R_R\")",
        "furthestDistanceFromOrigin(moves = \"LRLLRLLL\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLRLR\")"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 4, target = 6)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 1, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 5, target = 6)",
        "minimumPossibleSum(n = 10, target = 20)",
        "minimumPossibleSum(n = 0, target = 0)"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countCompleteSubarrays(nums = [1,2,3,4])",
        "countCompleteSubarrays([1,2,2,3,3,3,4,4,4,4])",
        "countCompleteSubarrays([1, 2, 3, 2, 1])",
        "countCompleteSubarrays([1,2,2,1])",
        "countCompleteSubarrays(s = {1, 2, 2, 3, 3, 3, 4, 4, 4, 4})",
        "countCompleteSubarrays([1, 2, 3, 4, 5, 5, 6, 7, 9])",
        "countCompleteSubarrays(nums = [3, 2, 2, 3, 4, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 1, 5, 6, 7, 8])"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 3)",
        "canSplitArray(nums = [1, 2, 3], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 4)",
        "canSplitArray(nums = [10, 20, 30, 40, 50], m = 100)",
        "canSplitArray(nums = [2, 3, 6, 6], m = 10)",
        "canSplitArray(nums = [3,4,5,6,7], m = 9)",
        "canSplitArray(nums = [4, 3, 7, 1, 5], m = 10)",
        "canSplitArray(nums = [3, 4, 2, 5, 8, 1], m = 9)",
        "canSplitArray(nums = [5, 3, 2, 7, 8, 1, 6, 4], m = 9)",
        "canSplitArray(nums = [5, 5, 5, 6, 6, 7, 8, 9, 9], m = 6)"
    ],
    "sample_200": [
        "minOperations(nums = [1, 2, 3], target = 6)",
        "minOperations([1, 2, 3], 4)",
        "minOperations(nums = [3, 1, 2], target = 4)",
        "minOperations(nums = [2, 4, 6, 8, 10], target = 5)",
        "minOperations([5,4,3,2,1], 9)",
        "minOperations(nums = [1,2,3,4,5,6,7,8], target = 20)",
        "minOperations(nums = [1, 3, 4, 10], target = 5)",
        "minOperations(nums = [5, 1, 3, 6], target = 8)",
        "minOperations(nums = [10, 1, 2, 2, 5], target = 5)",
        "minOperations(nums = [5, 5, 10, 10, 30], target = 30)"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 0, 1, 0, 1, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 4, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [3,5,6,5,6], k = 2)",
        "sumIndicesWithKSetBits(nums = [10, 15, 24, 32, 40], k = 3)",
        "sumIndicesWithKSetBits(nums = [3, 6, 8, 10, 11, 15], k = 2)"
    ],
    "sample_165": [
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"abc\"], s = \"abc\")",
        "isAcronym(words = [\"Python\", \"is\", \"awesome\"], s = \"PYTHON\")",
        "isAcronym(words = [\"Apple\", \"Banana\", \"Cherry\"], s = \"abc\")",
        "isAcronym(words = [\"National Aeronautics and Space Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"The\", \"quick\", \"brown\", \"fox\"], s = \"TQBF\")",
        "isAcronym(words = [\"Mr\", \"Mrs\"], s = \"Ms\")",
        "isAcronym(words = [\"NASA\", \"ASIA\", \"AUSTRALIA\"], s = \"ASIA\")",
        "isAcronym(s1 = \"SKY\", s2 = \"BANANA\")",
        "isAcronym(words = [\"ad\", \"na\"], s = \"nad\")"
    ],
    "sample_227": [
        "countWays([-0x3f3f3f3f, 0x3f3f3f3f, 0x3f3f3f3f])",
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [3, 2, 1])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1,2,3,4,5])",
        "countWays(nums = [2, 4, 5])",
        "countWays(nums = [0,1,2,3])",
        "countWays(nums = [1, -1, 2, -2, 3, -3, 3, -3])",
        "countWays(nums = [1, 3, 6, 7, -0x2, 0x3f, 0x3f, 0x3f])"
    ],
    "sample_158": [
        "maxSum([1, 2, 3])",
        "maxSum([1,2,3])",
        "maxSum(nums = [10, 20, 30, 40])",
        "maxSum(nums = [5, 6, 7])",
        "maxSum(nums = [3, 5, 7, 8])",
        "maxSum([11, 22, 33, 44, 55])",
        "maxSum([1, 12, 34, 567, 8, 9])",
        "maxSum([3,5,9,1,1,5])",
        "maxSum([1, 11, 21, 12, 3, 12, 31])",
        "maxSum([4, 3, 2, 3, 2, 3, 4, 1])"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1, 2, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,3,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 2, 3, 4, 4, 4], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 2, 3, 3, 3, 4], k = 3)",
        "longestEqualSubarray(nums = [1, 3, 5, 7, 9], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,3,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,3,3,3,3,3,3,3], k = 2)",
        "longestEqualSubarray([1, 1, 1, 3, 3], 2)",
        "longestEqualSubarray(nums = [3,3,1,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 3, 3, 2, 5, 5, 5, 6, 6, 7, 7, 8], k = 1)"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 0, offers = [[0, 0, 0], [1, 1, 1], [1, 2, 3]])",
        "maximizeTheProfit(n = 5, offers = [[1, 1, 10], [2, 5, 3], [3, 4, 1]])",
        "maximizeTheProfit(n = 10, offers = [[5, 5, 5], [7, 8, 9]])",
        "maximizeTheProfit(n = 3, offers = [\n    [1, 2, 1],\n    [1, 2, 2],\n    [1, 2, 3],\n    [1, 3, 3],\n    [1, 3, 4],\n])",
        "maximizeTheProfit(n = 2, offers = [\n    [1, 1, 2],\n    [2, 1, 3],\n    [3, 1, 5]\n])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 5], [2, 4, 6], [5, 5, 5], [7, 8, 9]])",
        "maximizeTheProfit(n = 5, offers = [\n    [1, 1, 5],\n    [2, 4, 4],\n    [1, 1, 1]\n])",
        "maximizeTheProfit(n = 10, offers = [[0, 0, 0], [1, 1, 1], [1, 0, 0], [0, 1, 1], [0, 1, 0], [0, 0, 1], [0, 0, 0]])",
        "maximizeTheProfit(n = 2, offers = [\n    [3, 7, 4],\n    [3, 5, 5],\n    [2, 4, 2]\n])",
        "maximizeTheProfit(n=20, offers=[[5, 2, 10], [10, 3, 2], [8, 8, 8]])"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups([1, 2, 3, 4])",
        "maxIncreasingGroups(x = [3, 2, 1])",
        "maxIncreasingGroups(x = [1, 1, 2, 2, 3, 3])",
        "maxIncreasingGroups(x = [2,3,4,5,6])",
        "maxIncreasingGroups(x = [1, 3, 6, 7, 9])",
        "maxIncreasingGroups(x = [1,2,4])",
        "maxIncreasingGroups(x = [1,2,1,2])",
        "maxIncreasingGroups(x = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",
        "maxIncreasingGroups([1, 3, 3, 4, 4])"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,0,1,1], k = 2)",
        "sumIndicesWithKSetBits(nums = [2,4,6,8], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1], k = 3)",
        "sumIndicesWithKSetBits(nums = [2,1,2,2], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 2, 5, 10, 8, 12], k = 3)",
        "sumIndicesWithKSetBits(nums = [3, 2, 5, 3, 2, 4, 2], k = 3)"
    ],
    "sample_207": [
        "minimumOperations(??)",
        "minimumOperations(\"00\")",
        "minimumOperations(num = \"1234\")",
        "minimumOperations(num = \"1234\")",
        "minimumOperations(\"0\")",
        "minimumOperations(\"123\")",
        "minimumOperations(num = \"2425\")",
        "minimumOperations(s1 = \"23\", s2 = \"5\")",
        "minimumOperations(\"25252525\")",
        "minimumOperations(s1 = \"bca\", s2 = \"abc\")"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"LR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(\"LR\")",
        "furthestDistanceFromOrigin(moves = \"LRLLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLL\")",
        "furthestDistanceFromOrigin(moves=\"LRLL\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLLLL\")",
        "furthestDistanceFromOrigin(moves=\"LRLLLL\")",
        "furthestDistanceFromOrigin(moves
    ],
    "sample_206": [
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"25\")",
        "minimumOperations(\"00\")",
        "minimumOperations(num = \"75\")",
        "minimumOperations(num = \"01\")",
        "minimumOperations(\"002525\")",
        "minimumOperations('001')",
        "minimumOperations(num = \"18\")",
        "minimumOperations(num = '11')"
    ],
    "sample_155": [
        "canSplitArray(nums = [1,2,3], m = 4)",
        "canSplitArray(nums = [1,2,3,4,5,6,7,8,9,10], m = 5)",
        "canSplitArray(nums = [2, 3, 4, 5, 6], m = 9)",
        "canSplitArray(nums = [1, 3, 5], m = 9)",
        "canSplitArray(nums = [3, 5, 7], m = 13)",
        "canSplitArray([1, 2, 4, 8], 4)",
        "canSplitArray([1, 1, 2, 2, 3, 3], 2)",
        "canSplitArray(nums = [6, 1, 5, 9], m = 7)",
        "canSplitArray(nums = [5,8,5,4,7], m = 10)",
        "canSplitArray(nums = [10,5,3,1,3,7], m = 15)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 3, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countCompleteSubarrays([1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1,2,3,4])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [4, 2, 3, 4])",
        "countCompleteSubarrays(nums = [3,5,2,1,4,6])"
    ],
    "sample_202": [
        "minimumOperations(??)",
        "minimumOperations(num = \"12345\")",
        "minimumOperations(num = \"01\")",
        "minimumOperations(\"001\")",
        "minimumOperations(\"1\")",
        "minimumOperations(num = \"12000\")",
        "minimumOperations(\"125\")",
        "minimumOperations(num = \"10111\")",
        "minimumOperations(\"88\")",
        "minimumOperations(num = \"0125000\")"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [\"banana\", \"apple\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"abc\", \"def\", \"ghi\"], b = \"def\")",
        "splitWordsBySeparator(a = [\"this\", \"is\", \"a\", \"sentence\"], b = \"is\")",
        "splitWordsBySeparator(a = [\"ab\", \"cd\"], b = \"cd\")",
        "splitWordsBySeparator(my_list = [\"hello\", \"world\"], separator = \" \")",
        "splitWordsBySeparator(a = [\"banana\", \"apple\"], b = \"na\")",
        "splitWordsBySeparator(a = [\"abc\", \"def\"], b = \"xyz\")",
        "splitWordsBySeparator(a = [\"ba\", \"ab\", \"baa\"], b = \"a\")",
        "splitWordsBySeparator(s1 = \"aaaaabbbbb\", s2 = \"b\")",
        "splitWordsBySeparator(a = [\"apple\", \"orange\"], b = \"e\")"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [10, 20, 30, 40, 50], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 1, 1, 0], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 1, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 5, 8, 9, 12], k = 2)"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = \"1001\")",
        "maximumOddBinaryNumber(\"ba\")",
        "maximumOddBinaryNumber(s = \"01010101\")",
        "maximumOddBinaryNumber(\"1001\")",
        "maximumOddBinaryNumber(s = \"banana\")",
        "maximumOddBinaryNumber(s = \"12\")",
        "maximumOddBinaryNumber('0000')",
        "maximumOddBinaryNumber(s1 = \"ba\", s2 = \"10\")",
        "maximumOddBinaryNumber(\"?\")",
        "maximumOddBinaryNumber(\"aabb\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,2,3,4,5,6], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,4,4,4,4,4], k = 3)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3,3,3,3], k = 3)",
        "longestEqualSubarray(nums = [2,2,2,2,2,3,3,4,4,4], k = 3)",
        "longestEqualSubarray(nums = [2, 1, 2, 3, 2, 5, 6], k = 1)",
        "longestEqualSubarray(nums = [0,0,1,0,1,1,2,0,0], k = 3)",
        "longestEqualSubarray(nums = [4, 1, 5, 9, 2, 8, 3, 7, 10], k = 3)"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3], k = 3)",
        "longestEqualSubarray(nums = [1, 1, 1, 0, 0, 0], k = 2)",
        "longestEqualSubarray(nums = [5,5,5,5,5,5,5,5,5], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,1,2,2], k = 1)",
        "longestEqualSubarray(nums = [1,2,2,1,1,1,1], k = 3)",
        "longestEqualSubarray(nums = [1, 3, 2, 5, 4, 5, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 3, 3, 2, 4, 6, 5], k = 2)",
        "longestEqualSubarray(nums = [4,2,2,1,1,1,5,2,1], k = 3)"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = \"1001\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = \"1010\")",
        "maximumOddBinaryNumber(\"101\")",
        "maximumOddBinaryNumber(s1 = '101')",
        "maximumOddBinaryNumber(s = \"12\")",
        "maximumOddBinaryNumber(\"1011\")",
        "maximumOddBinaryNumber(s = \"1\")",
        "maximumOddBinaryNumber(s = \"1101\")"
    ],
    "sample_166": [
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"abc\", \"def\", \"ghi\"], s = \"abcdefghi\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hlloworld\")",
        "isAcronym(words = [\"hello\", \"hi\", \"hey\"], s = \"hello\")",
        "isAcronym(words = [\"A\", \"C\", \"G\", \"T\"], s = \"ACGT\")",
        "isAcronym(s1 = [\"apple\", \"banana\", \"cat\"], s2 = \"apbnc\")",
        "isAcronym(words = [\"CAT\", \"Dog\", \"HAT\"], s = \"CHATDOGHAT\")",
        "isAcronym(words = [\"NASA\", \"EOS\", \"MSR\"], s = \"NASA EOS MSR\")",
        "isAcronym(words = [\"snake\", \"play\"], s = \"naks\")"
    ],
    "sample_163": [
        "maxSum([1, 2, 3, 4, 5, 6, 7])",
        "maxSum([1, 12, -5, -6, 50, 3])",
        "maxSum([1, 1, 2, 2, 3, 3])",
        "maxSum(nums = [1, 2, 3, 4, 5, 10, 100])",
        "maxSum([4, 5, 2, 7])",
        "maxSum([5, 3, 1, 4, 6, 4])",
        "maxSum([10, 12, 2, 9])",
        "maxSum(nums = [12, 55, 9])",
        "maxSum(nums = [10,12,13,12,13,12])",
        "maxSum([1, 10, 2, 6, 5, 1, -1, -5, -3])"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(??)",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts([5, 4, 3, 2, 1])",
        "minimumRightShifts(nums = [4, 2, 1, 3])",
        "minimumRightShifts(nums = [1,3,5,2,4])",
        "minimumRightShifts(nums = [1,3,5,6,7,9])",
        "minimumRightShifts(nums = [4, 3, 2, 1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [10, 7, 4, 9])",
        "minimumRightShifts(nums = [5, 2, 3, 7, 6, 3, 4, 5])"
    ],
    "sample_453": [
        "minChanges(\"abc\")",
        "minChanges(s = \"ab\")",
        "minChanges(s1 = \"ba\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abba\")",
        "minChanges(\"ababa\")",
        "minChanges(s1 = \"aaab\", s2 = \"ab\")",
        "minChanges(s1 = \"ba\", s2 = \"banana\")",
        "minChanges(\"aabab\")",
        "minChanges(s = \"abbbc\")"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [10, 22, 9, 33, 21, 50, 41, 60, 80], target = 60)",
        "lengthOfLongestSubsequence(nums = [3, 1, 4, 2], target = 4)",
        "lengthOfLongestSubsequence(nums = [2, 3, 1, 2, 5, 6], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 2, 4, 4, 5], target = 2)",
        "lengthOfLongestSubsequence([1, 3, 2, 4, 3], 3)",
        "lengthOfLongestSubsequence(nums = [1,1,2,2,2,3,3,3,3], target = 2)",
        "lengthOfLongestSubsequence(nums = [5, 2, 4, 9, 3, 1], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 5, 10, 9, 2, 4, 6], target = 5)",
        "lengthOfLongestSubsequence(nums = [5,10,2,15,5,2,4,3], target = 15)",
        "lengthOfLongestSubsequence([10,13,21,26,54,58,61,66], 66)"
    ],
    "sample_367": [
        "sortVowels(s1 = \"lYmpH\")",
        "sortVowels(s1 = \"aeiou\")",
        "sortVowels(s1 = 'abcd')",
        "sortVowels(s = \"abcde\")",
        "sortVowels(\"baa\")",
        "sortVowels(s1 = \"lump\")",
        "sortVowels(s1 = \"ellYmpsH\")",
        "sortVowels(s = \"ybobobo\")",
        "sortVowels(s1 = \"this is a sentence\", s2 = \"this should be a string\")",
        "sortVowels(s1 = 'som\",jimmy')"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [3,2,1,5,6,4], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,1], target = 2)",
        "lengthOfLongestSubsequence(nums = [1,5,3,2,4], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 5, 7], target = 5)",
        "lengthOfLongestSubsequence(nums = [0,3,4,1,2], target = 4)",
        "lengthOfLongestSubsequence(nums = [1,3,2,4,6,8], target = 4)",
        "lengthOfLongestSubsequence(nums = [1,3,2,4,6,7,8,9], target = 10)",
        "lengthOfLongestSubsequence([1, 0, 2, 3, 0, 4, 5, 0], 7)",
        "lengthOfLongestSubsequence([5, 2, 1, 7, 3], 5)",
        "lengthOfLongestSubsequence(nums = [3,4,5,1,2,5,3,1,2], target = 5)"
    ],
    "sample_381": [
        "countPairs(nums = [1,2,3,4], t = 5)",
        "countPairs(nums = [1,2,3,4,5,6,7], t = 10)",
        "countPairs(nums = [1,2,3,4], t = 2)",
        "countPairs(nums = [5,10,15], t = 20)",
        "countPairs(nums = [0,1,2,3,4,5,6,7,8,9], t = 10)",
        "countPairs(nums = [1, 2, 3, 4], t = 6)",
        "countPairs(nums = [2,2,3,3], t = 6)",
        "countPairs(nums = [1,1,2,2,3,3,4,4], t = 7)",
        "countPairs(nums = [1,5,9,3,2], t = 6)",
        "countPairs(nums = [2,1,4,4,3,2], t = 8)"
    ],
    "sample_366": [
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 4])",
        "isGood(s1 = [3, 2, 1], s2 = [1, 2, 3])",
        "isGood([1, 2, 4, 3, 2])",
        "isGood([2,1,1])",
        "isGood(s1 = [0,1,2], s2 = [1,2,3])"
    ],
    "sample_369": [
        "sortVowels(\"banana\")",
        "sortVowels(s1 = \"apple\", s2 = \"banana\")",
        "sortVowels(s = \"abc\")",
        "sortVowels(s1 = \"ll\")",
        "sortVowels(s1 = \"Hello\", s2 = \"World\")",
        "sortVowels(s1 = \"banana\", s2 = \"mana\")",
        "sortVowels(s1 = \"banana\", s2 = \"aN\")",
        "sortVowels('yy')",
        "sortVowels(s1 = \"Banana\", s2 = \"cat\")",
        "sortVowels(s = \"aRgYmP\")"
    ],
    "sample_404": [
        "minimumRightShifts([1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts([1, 3, 2, 3, 1])",
        "minimumRightShifts([3, 2, 4, 5, 1])",
        "minimumRightShifts([5, 2, 3, 2, 5])",
        "minimumRightShifts([2, 1, 3, 2, 4, 1])",
        "minimumRightShifts(nums = [5, 2, 8, 6])",
        "minimumRightShifts(nums = [1, 3, 2, 4, 6, 3, 4])",
        "minimumRightShifts(nums = [4, 2, 3, 1, 2, 2, 3, 4, 4, 3])"
    ],
    "sample_448": [
        "minChanges(\"abc\")",
        "minChanges(\"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(\"ab\")",
        "minChanges(s = \"aab\")",
        "minChanges(s1 = \"aab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s1 = \"bba\")",
        "minChanges(\"bba\")",
        "minChanges(s1 = \"ba\", s2 = \"na\")"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abcde\")",
        "canBeEqual(s1 = \"ba\", s2 = \"bn\")",
        "canBeEqual(s1 = \"bba\", s2 = \"abab\")",
        "canBeEqual(\"ab\", \"ba\")"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1,2,3,4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",
        "minLengthAfterRemovals(nums = [2, 2, 1, 1, 2, 2])",
        "minLengthAfterRemovals([0,1,1,0])",
        "minLengthAfterRemovals([0, 0, 1, 2, 2])",
        "minLengthAfterRemovals([3,2,2,1,3])",
        "minLengthAfterRemovals(nums = [4, 1, 3, 2, 2, 3])",
        "minLengthAfterRemovals([2,2,1,1,2,3,3])",
        "minLengthAfterRemovals(nums = [5, 1, 3, 2, 2, 1])"
    ],
    "sample_361": [
        "isGood(my_list = [1, 1, 2, 2, 3, 3])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood(my_list = [1, 2, 3, 2, 1])",
        "isGood(a = [1,2,2,3,3])",
        "isGood(s1 = [0, 1, 2])",
        "isGood(a = [0, 0, 1, 2, 2, 2])",
        "isGood(a = [1,2,3,4,3])",
        "isGood(a = [1, 2, 3, 2, 1, 1])",
        "isGood([1, 2, 2, 3, 3, 3, 3])",
        "isGood([2,3,5])"
    ],
    "sample_419": [
        "minOperations(nums = [0,1,2,3,4,5,6,7,8,9], k = 3)",
        "minOperations(nums = [3,4,5,6], k = 3)",
        "minOperations(nums = [1,1,2,2,3,3,3], k = 2)",
        "minOperations(nums = [10, 20, 30, 40, 50], k = 40)",
        "minOperations(nums = [2,3,4,5,3,2,1], k = 3)",
        "minOperations(nums = [4,4,3,3,3,2,2,1,1], k = 2)",
        "minOperations(nums = [3, 2, 1, 0, 5, 4, 6, 7], k = 4)",
        "minOperations(nums = [1, 3, 2, 4, 5, 4, 3, 2, 1], k = 4)",
        "minOperations(nums = [5,2,8,7,3,1], k = 5)",
        "minOperations(nums = [1,3,2,3,1,4,5,5,4,5], k = 2)"
    ],
    "sample_478": [
        "findMaximumLength([1,2,3,4,5,6])",
        "findMaximumLength(nums = [1,2,3,4,5])",
        "findMaximumLength(nums = [2,1,3,5,6,4])",
        "findMaximumLength(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",
        "findMaximumLength(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])",
        "findMaximumLength(nums = [0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,",
        "findMaximumLength(nums = [2,1,1,4,5,3,6,7,8,9])",
        "findMaximumLength(nums = [1, 3, 4, 1, 2, 2, 3, 3, 1])",
        "findMaximumLength([10,5,2,1,4,5])",
        "findMaximumLength(nums = [1,1,3,4,3,3,6,7,8])"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1,2,3,4,5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [0,1,0,1,0,1])",
        "maxSubarrays(nums = [3,2,1,4,5])",
        "maxSubarrays(nums = [2, 1, 4])",
        "maxSubarrays(my_list = [1,1,2,2,2])",
        "maxSubarrays([-2,1,-1])",
        "maxSubarrays(nums = [2,5,5,1,3,2])",
        "maxSubarrays(nums = [10, 4, 3, 7, 5])"
    ],
    "sample_389": [
        "canMakeSubsequence(s1 = \"ab\", s2 = \"abc\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"ab\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"abcabc\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"bcd\")",
        "canMakeSubsequence(s1 = \"banana\", s2 = \"bana\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"a\")",
        "canMakeSubsequence(str1 = \"aab\", str2 = \"aba\")",
        "canMakeSubsequence(str1 = \"ba\", str2 = \"z\")",
        "canMakeSubsequence(\"abcde\", \"abzab\")"
    ],
    "sample_402": [
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 2, 3, 4], m = 2, k = 3)",
        "maxSum(nums = [2, 2, 2, 2, 2, 2, 2, 2], m = 3, k = 4)",
        "maxSum(nums = [1, 0, 0, 1, 0, 0, 0, 0], m = 1, k = 2)",
        "maxSum(nums = [5, 2, 1, 2, 3, 4], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5,1,3,2,4,5], m = 3, k = 5)",
        "maxSum(nums = [3, 4, 5, 4, 2, 5, 6], m = 3, k = 2)",
        "maxSum(nums = [2,5,7,4,6,4,3,7], m = 2, k = 3)",
        "maxSum(nums = [9, 4, 3, 3, 9, 9, 3, 9], m = 3, k = 2)"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"pear\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"banana\", \"apple\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"pear\", \"apple\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"banana\", \"pear\"], x = \"ban\")",
        "findWordsContaining(words = [\"banana\", \"a\", \"nana\"], x = \"nana\")",
        "findWordsContaining(words = [\"abcd\", \"ab\", \"a\"], x = \"ab\")",
        "findWordsContaining(words = [\"find\", \"words\", \"containing\"], x = \"o\")",
        "findWordsContaining(words = [\"pan\", \"cake\", \"boat\"], x = \"ba\")",
        "findWordsContaining(words = [\"a\", \"e\", \"i\", \"o\", \"u\"], x = \"y\")",
        "findWordsContaining(words = [\"nana\", \"ananab\", \"ba\", \"ban\", \"nana\"], x = \"nana\")"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"prev\", \"mq\", \"px\", \"zy\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\"])",
        "lastVisitedIntegers(words = [\"prev\", \"a\", \"b\", \"c\"])",
        "lastVisitedIntegers(??)",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"visit\", \"prev\", \"visit\", \"prev\", \"visit\"])",
        "lastVisitedIntegers(words = [\"prev\", \"0\", \"prev\", \"1\"])",
        "lastVisitedIntegers(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"5\", \"3\", \"3\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"in\", \"cur\", \"next\", \"prev\"])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1, 3, 5, 7], k = 6)",
        "minOperations(nums = [1,2,3,4,5,6,7,8], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6,7], k = 6)",
        "minOperations(nums = [2, 1, 2, 3, 4, 2], k = 2)",
        "minOperations(nums = [4, 5, 4, 1, 5, 5, 2], k = 4)",
        "minOperations(nums = [5,4,6,4,2,3,4], k = 3)"
    ],
    "sample_418": [
        "minOperations(nums = [3, 2, 1], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1, 2, 2, 2], k = 2)",
        "minOperations(nums = [1, 1, 3, 4, 5, 2], k = 2)",
        "minOperations(nums = [3, 1, 2, 1, 5, 9, 2, 6, 4, 5], k = 3)",
        "minOperations([4,4,4,4,4], 5)",
        "minOperations(nums = [3, 2, 4, 5, 6, 8, 7], k = 4)",
        "minOperations(nums = [10, 12, 2, 3, 5], k = 2)",
        "minOperations(nums = [7, 3, 1, 3, 5], k = 5)"
    ],
    "sample_375": [
        "minimumSeconds([])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8])",
        "minimumSeconds([1, 2, 3])",
        "minimumSeconds(nums = [0, 1, 2, 3, 2, 1])",
        "minimumSeconds(nums = [1, 3, 2, 0, 4, 2, 1])",
        "minimumSeconds(nums = [1, 2, 3, 2, 4, 3, 3])",
        "minimumSeconds(nums = [9,8,7,4,2,1])",
        "minimumSeconds(nums = [1,3,2,5,3,6,1])",
        "minimumSeconds(nums = [4, 1, 2, 1, 3, 5, 4, 3])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 4)",
        "countPairs(nums = [1, 2, 3, 4], target = 10)",
        "countPairs(s1 = [1, 2, 3], target = 4)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 11)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 10)",
        "countPairs(nums = [3, 5, 6], target = 9)",
        "countPairs(nums = [2, 3, 5, 7, 11], target = 7)",
        "countPairs(nums = [1, 5, 6, 7], target = 11)",
        "countPairs(nums = [2, 6, 3, 1, 1, 5, 6], target = 7)"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"abcd\", \"abcd\", \"abcd\"], x = \"ab\")",
        "findWordsContaining(words = [\"ba\", \"ab\", \"ba\"], x = \"b\")",
        "findWordsContaining(words = [\"banana\", \"ananas\", \"bananana\"], x = \"ana\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\", \"grapes\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"anana\", \"bab\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"na\", \"anana\"], x = \"an\")",
        "findWordsContaining(words = [\"abc\", \"abcd\"], x = \"bc\")",
        "findWordsContaining(words = [\"banana\", \"ananas\", \"banana\", \"ba\"], x = \"na\")",
        "findWordsContaining(words = [\"banana\", \"panama\", \"kiwi\"], x = \"ba\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"mango\", \"nak\", \"ap\"], x = \"an\")"
    ],
    "sample_372": [
        "sortVowels(s1 = 'abcde')",
        "sortVowels(s1 = \"lOtcede\")",
        "sortVowels(s1 = 'azcbobobegghakl')",
        "sortVowels(\"L\u00e9o\")",
        "sortVowels(s1 = 'lEOtcede')",
        "sortVowels(s = 'Hello World')",
        "sortVowels('banana')",
        "sortVowels('apple')",
        "sortVowels(\"tea\")",
        "sortVowels(s = \"lOrOtEdE\")"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [1, 2, 3])",
        "minLengthAfterRemovals(nums = [0, 0, 0, 0])",
        "minLengthAfterRemovals(nums = [3,2,2,1,1])",
        "minLengthAfterRemovals(nums = [1,1,2,2,2,3,3,3,3])",
        "minLengthAfterRemovals(nums = [2,2,2,1,1,1])",
        "minLengthAfterRemovals(nums = [1, 3, 2, 1, 1])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,4,4,5,5,5])",
        "minLengthAfterRemovals(nums = [0, 0, 1, 1, 1, 2, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [3, 2, 3, 3, 4, 4, 5])",
        "minLengthAfterRemovals(nums = [1,3,3,4,4,4,2,2])"
    ],
    "sample_452": [
        "minChanges(\"ab\")",
        "minChanges(s = \"banana\")",
        "minChanges(\"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s1 = \"abcd\")",
        "minChanges(s = \"baab\")",
        "minChanges(s1 = \"abab\")",
        "minChanges(s = \"aab\")",
        "minChanges(s1 = \"ab\", s2 = \"ac\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")"
    ],
    "sample_385": [
        "countPairs(nums = [1,2,3,4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 7)",
        "countPairs(nums = [3,7,11,15], target = 9)",
        "countPairs(nums = [1,2,3,4], target = 4)",
        "countPairs(nums = [1,2,3], target = 0)",
        "countPairs(nums = [10, 20, 30, 40], target = 42)",
        "countPairs(nums = [1, 4, 7, 8], target = 10)",
        "countPairs(nums = [1, 3, 4, 3, 3], target = 6)",
        "countPairs(nums = [0, 1, 2, 4, 3, 7, 10, 6, 11], target = 11)",
        "countPairs(nums = [4,1,5,9,2,3,2,4,2,1,9,2,3,3,4,4], target = 10)"
    ],
    "sample_427": [
        "minOperations(nums = [1,2,3,4,5])",
        "minOperations(nums = [2, 3, 4, 5, 6])",
        "minOperations([1, 2, 3, 4, 5, 6, 7])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [3, 3, 3, 3, 3])",
        "minOperations(nums = [1, 3, 2, 2])",
        "minOperations([1,2,4,7])",
        "minOperations(nums = [1, 3, 5, 6, 9, 9])",
        "minOperations(nums = [3, 2, 1, 6, 5, 2])",
        "minOperations(nums = [3,4,5,6,7,1,8])"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1,2,3,4,5])",
        "minLengthAfterRemovals(nums = [0,1,1,0])",
        "minLengthAfterRemovals([1,2,3,4,3,2,1])",
        "minLengthAfterRemovals(nums = [9,9,9,9,9,9])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 3, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [3, 2, 3, 1, 3])",
        "minLengthAfterRemovals(nums = [2,2,2,2,3,3,3,3,3])",
        "minLengthAfterRemovals(nums = [1,1,1,1,2,2,2,2,3])",
        "minLengthAfterRemovals([0, 1, 2, 0, 1, 2, 0, 1, 2])",
        "minLengthAfterRemovals(nums = [1,3,1,2,3,4,2,3])"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [10, 20, 30])",
        "minimumCoins(prices = [1,5,10,25,50])",
        "minimumCoins(prices = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])",
        "minimumCoins(prices = [1,3,2,4,3])",
        "minimumCoins(s1 = [\"2\", \"1\", \"1\"], s2 = [\"3\", \"5\"])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"abc\", \"def\", \"ghi\"], x = \"c\")",
        "findWordsContaining(s1 = \"apple\", s2 = \"banana\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"carrot\"], x = \"car\")",
        "findWordsContaining(s1 = [\"b\", \"a\", \"n\"], x = \"ban\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"pear\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"frog\"], x = \"dog\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"pear\", \"kiwi\"], x = \"na\")"
    ],
    "sample_420": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [3,2,5,1], k = 3)",
        "minOperations(nums = [3, 5, 2, 1, 8], k = 3)",
        "minOperations(nums = [3, 2, 5, 6, 7], k = 2)",
        "minOperations(nums = [6, 5, 3, 2, 1], k = 2)",
        "minOperations(nums = [7, 1, 2, 3], k = 3)",
        "minOperations(nums = [5, 1, 3, 6], k = 3)",
        "minOperations(nums = [3, 6, 8, 1, 2, 3], k = 3)",
        "minOperations(nums = [3, 2, 2, 3, 3, 1], k = 3)"
    ],
    "sample_362": [
        "isGood([1, 2, 3, 4, 5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1, 2, 3])",
        "isGood([1, 2, 3])",
        "isGood([])",
        "isGood([0, 1, 2, 3, 4, 5])",
        "isGood(nums = [1,2,3])",
        "isGood(my_list = [0, 1, 2, 3, 4])",
        "isGood(sorted(??))",
        "isGood([1,2,3,4,5,6,7])"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 4)",
        "lengthOfLongestSubsequence(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [1,5,9,11], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,3,5,3,2,4], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 5, 9, 2, 3, 4], target = 10)",
        "lengthOfLongestSubsequence(nums = [10, 1, 2, 5, 6, 7, 8, 9, 3], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 3, 1, 3, 5, 9, 2, 5, 1, 3], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 4, 3, 3, 3], target = 5)",
        "lengthOfLongestSubsequence(nums = [10,5,2,7,9,1], target = 9)"
    ],
    "sample_365": [
        "isGood(nums = [1,2,3,4,5])",
        "isGood([1,2,3,4])",
        "isGood([1,2,3,4])",
        "isGood(nums = [1,2,3,4])",
        "isGood([1, 2, 3, 4])",
        "isGood([0, 1, 2, 3])",
        "isGood(nums = [3, 2, 1])",
        "isGood(nums = [1, 1, 1])",
        "isGood([0, 0, 0])",
        "isGood(nums = [4, 3, 3, 2, 2, 1])"
    ],
    "sample_434": [
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1,2,3,4,5,6,7,8])",
        "maxSubarrays(nums = [1,2,3,4,5])",
        "maxSubarrays(nums = [1,2,3,4,5,6,7,8,9])",
        "maxSubarrays(nums = [1,2,3,4,5,6])",
        "maxSubarrays([0, 0, 0, 1])",
        "maxSubarrays(nums = [2,1,1,5,9])",
        "maxSubarrays([-1,0,1,0,-4,2,1,-5,1,-3])",
        "maxSubarrays([2, 5, 2, 3, 4])",
        "maxSubarrays(nums = [1, -4, 2, -5, -3, 5])"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 4)",
        "lengthOfLongestSubsequence(nums = [1,3,1], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,3,5,6,9,11], target = 9)",
        "lengthOfLongestSubsequence(nums = [4,2,1,5], target = 8)",
        "lengthOfLongestSubsequence([2, 3, 1, 4, 4], 5)",
        "lengthOfLongestSubsequence([1,3,5,6,4,2,1],4)",
        "lengthOfLongestSubsequence(nums = [1,9,3,2,5,8,2,1], target = 9)",
        "lengthOfLongestSubsequence(nums = [1,5,10,5,6], target = 9)",
        "lengthOfLongestSubsequence(nums = [3,6,2,5,8,9,10,1,4], target = 20)",
        "lengthOfLongestSubsequence(nums = [5,7,4,8,10,2,8,9,1], target = 17)"
    ],
    "sample_450": [
        "minChanges(\"abab\")",
        "minChanges(\"aab\")",
        "minChanges(\"abc\")",
        "minChanges(s = \"ababab\")",
        "minChanges(\"aaaaa\")",
        "minChanges(\"aaaaa\")",
        "minChanges(s1 = \"abca\")",
        "minChanges(\"bb\")",
        "minChanges(s1 = \"abacaba\")",
        "minChanges(s1 = \"banana\", s2 = \"na\")"
    ],
    "sample_463": [
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 6, limit = 4)",
        "distributeCandies(n = 5, limit = 7)",
        "distributeCandies(n = 12, limit = 4)",
        "distributeCandies(n = 12, limit = 6)",
        "distributeCandies(n = 13, limit = 5)",
        "distributeCandies(n = 7, limit = 12)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 6, limit = 5)"
    ],
    "sample_443": [
        "sumCounts([])",
        "sumCounts([1, 2, 3])",
        "sumCounts(nums = [1, 2, 1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 5, 5])",
        "sumCounts(nums = [1, 3, 4, 3, 2, 1])",
        "sumCounts([1, 1, 1, 2])",
        "sumCounts(nums = [0, 2, 1, 2, 0, 2])",
        "sumCounts(nums = [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0])",
        "sumCounts(nums = [1, 3, 4, 3, 6])",
        "sumCounts(nums = [3,1,3,5,3,6,3])"
    ],
    "sample_449": [
        "minChanges(s = \"aba\")",
        "minChanges(\"ab\")",
        "minChanges(s1 = \"ab\")",
        "minChanges(s1 = \"ba\")",
        "minChanges(s1 = \"ab\", s2 = \"ab\")",
        "minChanges(s1 = \"abc\", s2 = \"ab\")",
        "minChanges(s1 = \"aabbc\")",
        "minChanges(s1 = \"abcd\", s2 = \"abcb\")",
        "minChanges(s1 = \"ababaab\")",
        "minChanges(s1 = \"bdbb\")"
    ],
    "sample_425": [
        "minOperations([1, 2, 3, 4, 5, 6])",
        "minOperations([1, 3, 5, 7, 9])",
        "minOperations(nums = [2, 3, 5, 7, 11])",
        "minOperations(nums = [2, 2, 2, 2, 2, 3, 3, 3, 3, 3])",
        "minOperations(nums = [2, 3, 4, 5, 3, 4, 5])",
        "minOperations(nums = [3, 4, 7, 5])",
        "minOperations([5, 1, 6, 3, 8])",
        "minOperations([5,3,1,1,2,3,4])",
        "minOperations(nums = [3, 4, 2, 7, 6, 5, 2, 3, 8, 9])",
        "minOperations(nums = [9, 4, 4, 9, 5, 5, 9, 4, 1, 9, 6])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"banana\", str2 = \"nana\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"banana\", str2 = \"bananas\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"cba\")",
        "canMakeSubsequence(str1 = \"abcz\", str2 = \"abcd\")",
        "canMakeSubsequence(\"abc\", \"def\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abracadabra\")",
        "canMakeSubsequence(str1 = \"ba\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"ax\", str2 = \"az\")",
        "canMakeSubsequence(s1 = \"abz\", s2 = \"banana\")"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1,2,3,4,5,6])",
        "minimumSeconds(nums = [10,20,30,40,50])",
        "minimumSeconds(nums = [1,1,2,2])",
        "minimumSeconds(nums = [1,3,2,4,5])",
        "minimumSeconds(nums = [4, 3, 2, 1])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9,10,11])",
        "minimumSeconds(nums = [5,3,2,1])",
        "minimumSeconds(nums = [1,2,3,2,3])",
        "minimumSeconds([0,0,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8])",
        "minimumSeconds(nums = [10,100,40,60,80,5])"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [1,2,1], target = 3)",
        "lengthOfLongestSubsequence(nums = [0,1,2,3,4,5,6,7,8,9], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,3,2,3,4], target = 3)",
        "lengthOfLongestSubsequence(nums = [1,2,1,3], target = 2)",
        "lengthOfLongestSubsequence([1,2,3,4,5,6,7,8,9,10], 6)",
        "lengthOfLongestSubsequence(nums = [3,1,2,1,5,6,4], target = 6)",
        "lengthOfLongestSubsequence(nums = [3,2,4,2,3,2], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,9,3,5,6,7], target = 7)",
        "lengthOfLongestSubsequence(nums = [5,4,3,2,1,4,3,4,5], target = 3)",
        "lengthOfLongestSubsequence(nums = [4,2,1,2,4,4,2,1], target = 2)"
    ],
    "sample_370": [
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels('hello')",
        "sortVowels(s1 = \"banana\", s2 = \"nana\")",
        "sortVowels(s1 = \"leetcode\", s2 = \"codeleet\")",
        "sortVowels(s1 = \"abcde\", s2 = \"zyxwvutsrqponmlkjihgfedcba\")",
        "sortVowels(s1 = 'banana')",
        "sortVowels(s1 = \"banana\")",
        "sortVowels(\"hello there\")",
        "sortVowels(s = \"aaA\")",
        "sortVowels(\"Najeba\")"
    ],
    "sample_421": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [3,2,2,1], k = 4)",
        "minOperations(nums = [1,3,4,7], k = 4)",
        "minOperations(nums = [10, 1, 2, 3, 4], k = 2)",
        "minOperations(nums = [3, 5, 4, 1, 2, 6], k = 2)",
        "minOperations(nums = [3, 4, 6, 5, 2], k = 5)",
        "minOperations(nums = [10, 3, 2, 4, 5, 9, 4, 3], k = 4)"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1])",
        "maxSubarrays([1, 2, 3, 1, 2, 3])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])",
        "maxSubarrays([1,0,1,0,1,1])",
        "maxSubarrays(nums = [9,5,1,7])",
        "maxSubarrays(nums = [5,3,2,1,5,6,4])",
        "maxSubarrays(nums = [2, -1, -2, 4, -1, -3, 1, -5, 2, -3])"
    ],
    "sample_415": [
        "countPairs(coordinates = [(0, 0), (0, 1), (1, 0), (1, 1)], k = 2)",
        "countPairs(coordinates = [[1, 2], [2, 1], [3, 4], [4, 3]], k = 2)",
        "countPairs(coordinates = [\n    [0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]\n], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 0], [1, 1]], k = 2)",
        "countPairs([[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], 2)",
        "countPairs(coordinates = [[\"mq\", \"px\"], [\"px\", \"zy\"], [\"zy\", \"mq\"]], k = 2)",
        "countPairs(coordinates = [[2, 2], [3, 3], [3, 3], [5, 5]], k = 3)",
        "countPairs(coordinates = [[1, 2], [3, 4], [4, 3]], k = 3)",
        "countPairs([[1, 3], [3, 1], [2, 2], [5, 5]], 2)",
        "countPairs(coordinates = [[\"m\", \"k\"], [\"p\", \"q\"], [\"y\", \"z\"]], k = 3)"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7], target = 9)",
        "lengthOfLongestSubsequence(nums = [1,1,2,2,2,3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1,2,1,1,2], target = 4)",
        "lengthOfLongestSubsequence(nums = [5,1,9,11], target = 12)",
        "lengthOfLongestSubsequence(nums = [2, 3, 6, 5, 7], target = 10)",
        "lengthOfLongestSubsequence([0,1,3,4,5,5], 5)",
        "lengthOfLongestSubsequence(nums = [5, 4, 1, 2, 3, 6, 8], target = 4)",
        "lengthOfLongestSubsequence(nums = [3, 5, 1, 9, 12, 2, 7, 14], target = 9)",
        "lengthOfLongestSubsequence(nums = [4, 5, 3, 5, 3, 3, 5, 1, 4, 2], target = 10)",
        "lengthOfLongestSubsequence(nums = [2, 5, 2, 8, 4, 9, 2, 3, 7, 1], target = 13)"
    ],
    "sample_445": [
        "sumCounts(nums = [1,1,1,2,2])",
        "sumCounts(nums = [1,1,2,2,3,3,3])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [3,2,3])",
        "sumCounts(nums = [1, 2, 3, 1, 2])",
        "sumCounts(my_list = [1,1,1,2,2,3,3,3])",
        "sumCounts(nums = [1,3,2,3])",
        "sumCounts([3,1,2,2])",
        "sumCounts(nums = [1,2,1,3,1,3,4,5,5])",
        "sumCounts(nums = [4, 1, 1, 2, 3, 4, 2, 5, 4])"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",
        "minimumBeautifulSubstrings(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",
        "minimumBeautifulSubstrings(s = \"abcabcabc\")",
        "minimumBeautifulSubstrings(s = \"abababab\")",
        "minimumBeautifulSubstrings(\"abababab\")",
        "minimumBeautifulSubstrings(s = \"ababc\")",
        "minimumBeautifulSubstrings(s = \"abacab\")",
        "minimumBeautifulSubstrings(s = \"abac\")",
        "minimumBeautifulSubstrings(s1 = \"a\", s2 = \"bab\")",
        "minimumBeautifulSubstrings(s1 = \"ababa\", s2 = \"abab\")"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 2, 3])",
        "maxSubarrays([])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays([1,2,3,4,5,6])",
        "maxSubarrays(nums = [5,4,3,2,1])",
        "maxSubarrays(nums = [1, 2, 3, -1])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, -1])",
        "maxSubarrays(nums = [3,2,2,3])",
        "maxSubarrays(nums = [0, 1, -1, 0, 2, -1, 3, -1])",
        "maxSubarrays(nums = [3, -3, 5, 2, -2, 7, -1, 4, -1, -2, -3, -1])"
    ],
    "sample_401": [
        "maxSum(nums = [1, 2, 3, 4], m = 4, k = 2)",
        "maxSum(nums = [1, 1, 2], m = 2, k = 2)",
        "maxSum(nums = [1,2,3,4], m = 3, k = 2)",
        "maxSum(nums = [1,1,2], m = 3, k = 2)",
        "maxSum(nums = [10, 20, 30, 40], m = 2, k = 1)",
        "maxSum(nums = [2, 3, 1, 5, 7], m = 3, k = 2)",
        "maxSum(nums = [5, 10, 15, 20, 25], m = 5, k = 2)",
        "maxSum(nums = [6, 2, 6, 2], m = 2, k = 2)",
        "maxSum(my_list = [1, 5, 2, 7, 3], m = 2, k = 1)",
        "maxSum(nums = [0, 10, 10, 10, 1], m = 2, k = 3)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6], m = 2, k = 3)",
        "maxSum(A = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], m = 3, k = 2)",
        "maxSum(A = [1,2,3,4], m = 2, k = 1)",
        "maxSum(A = [0, 1, 2, 3], m = 2, k = 3)",
        "maxSum(A = [1, 2, 1, 1], m = 2, k = 3)",
        "maxSum(A = [3, 2, 3, 4], m = 2, k = 3)",
        "maxSum(A = [1,2,1,1,3], m = 2, k = 2)",
        "maxSum(A = [0, 1, 3, 5, 3, 2, 1], m = 3, k = 2)",
        "maxSum(A = [3, 7, 9, 7, 2, 7], m = 3, k = 5)"
    ],
    "sample_363": [
        "isGood([0, 0, 0, 0, 0])",
        "isGood(nums = [1,1,1,2])",
        "isGood([2,2,1,1,2])",
        "isGood(nums = [3, 2, 1, 1, 3])",
        "isGood(nums = [0,1,2,3,4,5,6,7,8,9])",
        "isGood(nums = [3, 3, 3, 4])",
        "isGood(nums = [3,1,3,2])",
        "isGood(nums = [1, 2, 2, 2, 3, 4, 5, 5, 5, 5])",
        "isGood([1, 1, 2, 2, 2, 3, 3, 4, 4, 5])",
        "isGood(nums = [2, 4, 6, 1, 3])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,",
        "minimumSeconds([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [3, 2, 1, 4, 3, 2])",
        "minimumSeconds(nums = [0, 5, 10, 15])",
        "minimumSeconds(nums = [1, 5, 3, 2, 4, 6])",
        "minimumSeconds([0, 1, 2, 3, 5, 6])",
        "minimumSeconds([4, 1, 5, 2])",
        "minimumSeconds(nums = [1, 2, 4, 2, 2, 3, 1])",
        "minimumSeconds(nums = [3,3,2,3,4,5,4])"
    ],
    "sample_376": [
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [10, 20, 30, 40])",
        "minimumSeconds(nums = [1,2,3,2,1])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 5, 7])",
        "minimumSeconds([3,1,4,2,5])",
        "minimumSeconds(nums = [2, 5, 1, 8, 4])",
        "minimumSeconds(nums = [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0])",
        "minimumSeconds([0, 1, 2, 3, 2, 4, 2, 5])",
        "minimumSeconds(nums = [3, 1, 5, 4, 6, 7, 2, 0, 8, 1, 9])"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [3,3,3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3])",
        "minLengthAfterRemovals([1,2,3,2])",
        "minLengthAfterRemovals(nums = [1,1,2,3])",
        "minLengthAfterRemovals([1, 2, 3, 2, 1])",
        "minLengthAfterRemovals(my_list = [1, 2, 3])",
        "minLengthAfterRemovals([0, 1, 2, 2])",
        "minLengthAfterRemovals(nums = [3,2,1,1,2,3])",
        "minLengthAfterRemovals(nums = [1,1,1,2,2,3,3,3,4])",
        "minLengthAfterRemovals(nums = [0,1,1,2,2,1,0])"
    ],
    "sample_399": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 2)",
        "maxSum([1,1,1,2,2,3], 3, 2)",
        "maxSum(nums = [1,1,1,1,2,2,3,3,4,4], m = 3, k = 2)",
        "maxSum(nums = [10, 20, 10, 30, 20], m = 3, k = 2)",
        "maxSum([2,1,3,2,3], 2, 4)",
        "maxSum(nums = [1,1,1,2,2,3,3,3,4,4,4], m = 4, k = 3)",
        "maxSum(nums = [0,1,1,1,1,2,2,2], m = 4, k = 3)",
        "maxSum(nums = [3,6,8,9,2], m = 4, k = 3)",
        "maxSum(nums = [10, 4, 10, 1, 2, 3, 1, 4, 1, 5], m = 2, k = 3)"
    ],
    "sample_397": [
        "maxSum([1, 2, 3, 4, 5], 3, 3)",
        "maxSum([1, 2, 3, 4], 2, 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)",
        "maxSum([1, 1, 2, 2, 1], 2, 2)",
        "maxSum(nums = [1,2,3,1,2,3], m = 3, k = 2)",
        "maxSum([1,2,1,3,2,1], 2, 2)",
        "maxSum(nums = [5, 3, 2, 4, 3, 2, 1], m = 2, k = 2)",
        "maxSum(nums = [1, 1, 2, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 9, 9], m = 3, k = 2)",
        "maxSum(nums = [3, 1, 2, 3, 5, 7, 7], m = 2, k = 2)",
        "maxSum(nums = [3,5,-1,-3,5,3,6,3], m = 3, k = 2)"
    ],
    "sample_364": [
        "isGood(nums = [1,2,3])",
        "isGood([1,2,3])",
        "isGood(sorted(nums)",
        "isGood(nums = [0,1,2,3])",
        "isGood(s1 = [1,2,3], s2 = [3,2,1])",
        "isGood(nums = [1,1,1,2])",
        "isGood(nums = [4,1,2])",
        "isGood(nums = [4, 2, 1])",
        "isGood(my_list = [1,3,4])",
        "isGood(nums = [2,3,4,5,6,7])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [3, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [0, 1, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [5, 5, 5])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 2, 3, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [3,3,4,2,1])",
        "minLengthAfterRemovals([1, 2, 2, 3, 4, 4, 4, 5, 5])",
        "minLengthAfterRemovals(nums = [2, 4, 1, 2, 1, 2, 3])",
        "minLengthAfterRemovals([??, 5, 5, 5])",
        "minLengthAfterRemovals(nums = [3,1,2,2,4,5,1,2,6,3,1])"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\"], x = \"an\")",
        "findWordsContaining(words = [\"ba\", \"na\", \"na\"], x = \"na\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"blueberry\"], x = \"an\")",
        "findWordsContaining(words = [\"abc\", \"def\", \"ghi\"], x = \"cde\")",
        "findWordsContaining(words = [\"ana\", \"nana\", \"banana\"], x = \"na\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"pineapple\"], x = \"pine\")",
        "findWordsContaining(words = [\"ba\", \"zab\", \"ba\"], x = \"ab\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"anana\", \"apple\"], x = \"p\")",
        "findWordsContaining(words = [\"lmao\", \"mama\", \"mazam\"], x = \"am\")"
    ],
    "sample_473": [
        "minimumCoins([1, 2, 3])",
        "minimumCoins(prices = [1,2,3,4,5,6])",
        "minimumCoins(prices = [1,2,3,4])",
        "minimumCoins(prices = [1,1,1,1,1,1,1,1,1,1])",
        "minimumCoins([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumCoins(prices = [10, 10, 5, 1, 1])",
        "minimumCoins(prices = [5,1,2,4])",
        "minimumCoins(s1 = [1, 2, 4], s2 = [1, 2, 3, 5])",
        "minimumCoins(prices = [1,1,2,2,3,4,5,6,7])",
        "minimumCoins(prices = [1, 5, 9, 10, 25, 49])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"ba\")",
        "minimumBeautifulSubstrings(s = \"ababab\")",
        "minimumBeautifulSubstrings(s = \"aab\")",
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"ababab\")",
        "minimumBeautifulSubstrings(s = \"abcdefg\")",
        "minimumBeautifulSubstrings(\"aab\")",
        "minimumBeautifulSubstrings(\"aab\")",
        "minimumBeautifulSubstrings(\"ababa\")",
        "minimumBeautifulSubstrings(\"ababc\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"abc\", s2 = \"acb\")",
        "canBeEqual(s1 = \"ba\", s2 = \"ab\")",
        "canBeEqual(s1 = \"ab\", s2 = \"bc\")",
        "canBeEqual(\"abc\", \"cba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abcde\")",
        "canBeEqual(s1 = \"apple\", s2 = \"pear\")",
        "canBeEqual(s1 = \"ba\", s2 = \"za\")",
        "canBeEqual(s1 = \"aa\", s2 = \"aab\")",
        "canBeEqual(s1 = \"aaaa\", s2 = \"baaab\")"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"banana\", str2 = \"anana\")",
        "canMakeSubsequence(str1 = \"ba\", str2 = \"banana\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abab\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ab\")",
        "canMakeSubsequence(s1 = \"ba\", s2 = \"nana\")",
        "canMakeSubsequence(str1 = \"bc\", str2 = \"abc\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"cba\")",
        "canMakeSubsequence(\"abcde\", \"ab\")",
        "canMakeSubsequence(str1 = \"baz\", str2 = \"bat\")"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1, 1, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 1])",
        "minLengthAfterRemovals(nums = [0, 0, 0, 0, 0, 0])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [2, 4, 2])",
        "minLengthAfterRemovals([1, 2, 1, 4, 1, 2])",
        "minLengthAfterRemovals([2, 3, 1, 1, 2, 1])",
        "minLengthAfterRemovals(nums = [4, 2, 1, 5, 1, 2])",
        "minLengthAfterRemovals([4, 4, 5, 6, 6, 6])",
        "minLengthAfterRemovals(nums = [2, 1, 1, 3, 4, 4])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"ba\", s2 = \"an\")",
        "canBeEqual(s1 = \"ba\", s2 = \"anana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"bna\")",
        "canBeEqual(s1 = \"ba\", s2 = \"bna\")",
        "canBeEqual(s1 = \"ba\", s2 = \"bn\")",
        "canBeEqual(s1 = \"ab\", s2 = \"bc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abce\")",
        "canBeEqual(s1 = \"aab\", s2 = \"aba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cab\")",
        "canBeEqual(\"aa\", \"ab\")"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 9)",
        "countPairs(nums = [1, 2, 3, 4], target = 4)",
        "countPairs(nums = [1, 3, 5, 7], target = 9)",
        "countPairs(nums = [1,2,3,4,5], target = 8)",
        "countPairs(nums = [1, 1, 2, 3, 5, 8, 13, 21], target = 10)",
        "countPairs(nums = [1, 4, 6, 2, 3], target = 3)",
        "countPairs(nums = [1, 3, 5, 7, 9, 10, 13, 15, 17], target = 10)",
        "countPairs(nums = [1, 3, 4, 5, 6, 9, 12, 14, 15, 17, 18, 19, 20], target = 20)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"ab\", s2 = \"abc\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"ab\")",
        "canMakeSubsequence(s1 = \"ba\", s2 = \"nana\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"cba\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"def\")",
        "canMakeSubsequence(s1 = \"ab\", s2 = \"aa\")",
        "canMakeSubsequence(s1 = \"ba\", s2 = \"baz\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"abab\")",
        "canMakeSubsequence(s1=\"abc\", s2=\"acb\")",
        "canMakeSubsequence(\"banana\", \"abc\")"
    ],
    "sample_437": [
        "lastVisitedIntegers(s1 = \"ba\", s2 = \"nana\")",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(??)",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev1\", \"prev2\", \"prev3\", \"prev4\"])",
        "lastVisitedIntegers([\"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"visited\", \"next\"])",
        "lastVisitedIntegers(words = [\"a\", \"b\", \"c\", \"prev\", \"d\"])"
    ],
    "sample_416": [
        "countPairs(coordinates = [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)], k = 3)",
        "countPairs(coordinates = [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)], k = 3)",
        "countPairs(coordinates = [[0,0],[0,1],[1,0]], k = 2)",
        "countPairs(coordinates = [[2, 2], [2, 3], [3, 2]], k = 3)",
        "countPairs(coordinates = [(0, 1), (1, 2), (2, 3)], k = 3)",
        "countPairs([(0, 0), (0, 1), (1, 0)], 1)",
        "countPairs(coordinates = [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (3, 1)], k = 2)",
        "countPairs(coordinates = [[\"a\", \"b\"], [\"c\", \"d\"], [\"a\", \"d\"], [\"c\", \"a\"]], k = 1)",
        "countPairs(coordinates = [[\"m\", \"k\"], [\"p\", \"k\"], [\"z\", \"k\"]], k = 2)",
        "countPairs(coordinates = [[\"mq\", \"px\"], [\"mn\", \"nb\"]], k = 1)"
    ],
    "sample_451": [
        "minChanges(\"abc\")",
        "minChanges(\"abcd\")",
        "minChanges(s1 = \"abcd\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(\"abac\")",
        "minChanges(\"aaaa\")",
        "minChanges(s = \"abb\")",
        "minChanges(s1 = \"bbb\")",
        "minChanges(s1 = \"abcb\", s2 = \"ab\")",
        "minChanges(\"mqpxy\")"
    ],
    "sample_461": [
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 4, limit = 3)",
        "distributeCandies(n = 5, limit = 4)",
        "distributeCandies(n = 1, limit = 1)",
        "distributeCandies(n = 4, limit = 5)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 6, limit = 4)",
        "distributeCandies(n = 5, limit = 6)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"ba\", s2 = \"ba\")",
        "canBeEqual(s1 = \"ba\", s2 = \"ba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"abc\")",
        "canBeEqual(s1 = \"abc\", s2 = \"acb\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"abc\", s2 = \"ab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abcb\")",
        "canBeEqual(s1 = \"apple\", s2 = \"peple\")"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 9, limit = 4)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 12, limit = 12)",
        "distributeCandies(n = 2, limit = 4)",
        "distributeCandies(n = 1, limit = 6)",
        "distributeCandies(n = 10, limit = 20)",
        "distributeCandies(n = 2, limit = 10)",
        "distributeCandies(n = 17, limit = 10)"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 100)",
        "accountBalanceAfterPurchase(??)",
        "accountBalanceAfterPurchase(p = 12345)",
        "accountBalanceAfterPurchase(p = 12)",
        "accountBalanceAfterPurchase(p = 3)",
        "accountBalanceAfterPurchase(p = 13)",
        "accountBalanceAfterPurchase(p = 66)",
        "accountBalanceAfterPurchase(a = 1, b = 4)",
        "accountBalanceAfterPurchase(p = 23)",
        "accountBalanceAfterPurchase(p = 97)"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(nums = [1,2,3,4,5,6,7,8,9,10])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 2, 2, 3, 3])",
        "sumCounts([1, 2, 3, 4, 5, 6])",
        "sumCounts(nums = [1, 2, 2, 3, 4, 4, 4])",
        "sumCounts(nums = [1, 2, 3, 4, 4, 5])",
        "sumCounts(nums = [1, 1, 2, 2, 3, 4, 4, 4])",
        "sumCounts(nums = [1, 2, 1, 4])",
        "sumCounts(nums = [1, 2, 2, 3, 3, 4, 5, 6, 7, 7, 7])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1,3,5,7,9])",
        "minimumSeconds(A = [2,3,1,4])",
        "minimumSeconds([3, 2, 1])",
        "minimumSeconds(A = [3, 1, 2, 2, 1])",
        "minimumSeconds(A = [0,2,2,3,3,3])",
        "minimumSeconds(A = [1,2,2,3,3,4,5,5])",
        "minimumSeconds(A = [1,0,0,0,0,0,0])",
        "minimumSeconds(A = [1, 3, 5, 2, 7, 6])",
        "minimumSeconds(A = [6, 1, 2, 8, 0, 0])",
        "minimumSeconds(A = [2, 1, 3, 4, 5, 6, 8, 8, 9])"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"banana\", str2 = \"banana\")",
        "canMakeSubsequence(str1 = \"banana\", str2 = \"ana\")",
        "canMakeSubsequence(\"abcd\", \"ab\")",
        "canMakeSubsequence(s1 = \"ba\", s2 = \"ab\")",
        "canMakeSubsequence(s1 = \"ab\", s2 = \"cde\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"bb\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"bcde\")",
        "canMakeSubsequence(s1 = \"abcd\", s2 = \"abcdabcde\")"
    ],
    "sample_408": [
        "minimumRightShifts(??)",
        "minimumRightShifts([1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 3, 5, 7, 9])",
        "minimumRightShifts(nums = [3, 3, 3, 3, 3, 3])",
        "minimumRightShifts([5, 3, 1, 4])",
        "minimumRightShifts([1, 0, 1, 0, 1])",
        "minimumRightShifts(my_list = [1, 2, 2, 3])",
        "minimumRightShifts([5,4,3,2,1,5])",
        "minimumRightShifts([3, 4, 1, 3, 3])",
        "minimumRightShifts([4, 2, 5, 6, 8])"
    ],
    "sample_441": [
        "countSubMultisets(nums = [0, 0, 0, 0], l = 0, r = 1)",
        "countSubMultisets(nums = [2,2,2,3,3], l = 0, r = 4)",
        "countSubMultisets(nums = [1, 2, 1, 2, 3, 4], l = 0, r = 3)",
        "countSubMultisets(nums = [3, 2, 1, 4, 2, 3], l = 0, r = 2)",
        "countSubMultisets(nums = [2,3,5,5,2], l = 1, r = 6)",
        "countSubMultisets(nums = [3,4,5,6,7,8,9,9,9,9,9,9,9], l = 0, r = 1)",
        "countSubMultisets(nums = [5, 2, 4, 2, 6], l = 0, r = 10)",
        "countSubMultisets(nums = [1,2,3,4,4,4,4,5,6,6], l = 5, r = 15)",
        "countSubMultisets(nums = [1, 3, 4, 4, 1, 1, 2, 2, 3], l = 0, r = 9)",
        "countSubMultisets(nums = [2, 5, 10, 20, 50, 70, 100, 150, 200, 250], l = 1, r = 20)"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 1, 1])",
        "minimumCoins(prices = [1, 2, 4, 8])",
        "minimumCoins(prices = [1, 3, 4, 5, 2])",
        "minimumCoins(prices = [1, 4, 2, 2, 1])",
        "minimumCoins(prices = [5,2,6,1])",
        "minimumCoins(prices = [1, 3, 10, 1, 3])",
        "minimumCoins(prices = [1,3,5,7,8,9,11])",
        "minimumCoins([20, 50, 75, 100])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1,2,3,4,5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumCoins(prices = [1, 3, 2, 5])",
        "minimumCoins(prices = [10, 15, 25])",
        "minimumCoins(prices = [1, 3, 6, 7, 8])",
        "minimumCoins(prices = [100, 90, 70, 60])",
        "minimumCoins(prices = [5, 3, 5])",
        "minimumCoins(prices = [6, 4, 5, 6, 3])"
    ],
    "sample_438": [
        "lastVisitedIntegers(??)",
        "lastVisitedIntegers(words = [\"prev\", \"a\", \"b\", \"c\"])",
        "lastVisitedIntegers(words = [\"prev\", \"ba\", \"nana\"])",
        "lastVisitedIntegers(words = [\"a\", \"b\", \"c\", \"d\", \"prev\"])",
        "lastVisitedIntegers(my_list = [\"apple\", \"banana\", \"cherry\"])",
        "lastVisitedIntegers(s1 = \"abc\", s2 = \"bcd\")",
        "lastVisitedIntegers(words = [\"prev\", \"curr\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"pre\", \"po\", \"pre\", \"po\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"0\", \"prev\", \"3\", \"2\"])",
        "lastVisitedIntegers(words = [\"prev\", \"blah\", \"blah2\", \"blah3\", \"blah4\", \"prev\", \"blah5\"])"
    ],
    "sample_428": [
        "minOperations([1, 2, 3])",
        "minOperations(nums = [2, 2, 2, 2])",
        "minOperations(nums = [1, 2, 2, 2])",
        "minOperations([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 3, 3])",
        "minOperations(nums = [1, 0, 1, 0, 1, 1, 0])",
        "minOperations([4, 2, 1, 3])",
        "minOperations(nums = [3, 5, 2, 4, 5])",
        "minOperations(nums = [1, 0, 0, 2, 2, 2, 0, 0, 1, 1])",
        "minOperations(nums = [6, 5, 1, 2])"
    ],
    "sample_439": [
        "lastVisitedIntegers(??)",
        "lastVisitedIntegers(words = [\"p\", \"p\", \"p\"])",
        "lastVisitedIntegers(words = [\"hello\", \"world\"])",
        "lastVisitedIntegers([\"p\", \"p\", \"p\", \"p\", \"p\", \"p\"])",
        "lastVisitedIntegers([\"apple\", \"banana\", \"pineapple\", \"mango\"])",
        "lastVisitedIntegers(words = [\"p\", \"q\", \"x\", \"w\", \"y\"])",
        "lastVisitedIntegers([\"q\", \"p\", \"z\", \"y\", \"a\"])",
        "lastVisitedIntegers(words = [\"puzzle\", \"leet\", \"code\"])",
        "lastVisitedIntegers([\"badc\", \"pqr\", \"stu\"])",
        "lastVisitedIntegers([\"p\", \"a\", \"p\", \"y\", \"p\", \"n\"])"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9])",
        "minimumSeconds(nums = [1,2,3,4])",
        "minimumSeconds(nums = [1,2,2,3,3,3])",
        "minimumSeconds(nums = [1, 3, 5, 7, 9])",
        "minimumSeconds(nums = [0, 1, 2, 3])",
        "minimumSeconds([1,3,2,4])",
        "minimumSeconds([2, 3, 4, 5, 6])",
        "minimumSeconds(nums = [2,1,4,1,5,9,2,6,5,3,5])",
        "minimumSeconds(nums = [10, 9, 2, 5, 3, 7, 12, 13, 16])"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"banana\", \"apple\", \"mango\"], x = \"a\")",
        "findWordsContaining(words = [\"bob\", \"bob\", \"bob\", \"bob\"], x = \"bob\")",
        "findWordsContaining(s1 = [\"ba\", \"an\", \"ba\"], x = \"ba\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"bat\"], x = \"cat\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"carrot\", \"dog\"], x = \"an\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"mouse\"], x = \"op\")",
        "findWordsContaining(words = [\"bob\", \"foo\", \"bar\"], x = \"bob\")",
        "findWordsContaining(words = [\"ant\", \"bat\", \"cat\", \"dog\", \"elephant\"], x = \"tat\")",
        "findWordsContaining(words = [\"is\", \"a\", \"dog\"], x = \"is\")",
        "findWordsContaining(words = [\"ba\", \"baa\", \"baaaa\", \"ab\"], x = \"ba\")"
    ],
    "sample_431": [
        "maxSubarrays([])",
        "maxSubarrays(nums = [1,1,1,1,1,1])",
        "maxSubarrays(nums = [0,1,0,1,0])",
        "maxSubarrays([-1, 2, -3, -4, 5, -6])",
        "maxSubarrays(nums = [1, 2, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [4,2,3,2,3])",
        "maxSubarrays(nums = [1, 2, 0, 1, 0, 1, 2, 3, 4])",
        "maxSubarrays(my_list = [2, 1, 2, 1, 1, 2, 3])",
        "maxSubarrays(nums = [5, -2, 3, 5, -1, 2])",
        "maxSubarrays([-1,0,1,3,2,4,7,8,-5,1])"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"1\", \"3\"])",
        "lastVisitedIntegers(s1 = \"prev\", s2 = \"1\")",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"curr\", \"curr\"])",
        "lastVisitedIntegers(s1 = [\"ba\", \"nana\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"mq\", \"prev\", \"px\", \"prev\", \"zy\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"next\", \"3\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"prev\", \"22\", \"19\", \"23\"])",
        "lastVisitedIntegers(words = [\"prev\", \"is\", \"visited\", \"on\", \"the\", \"number\", \"of\", \"visits\", \"to\", \"the\", \"numbers\", \"visited\", \"today\"])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1,2,3,4,5], target = 4)",
        "countPairs(nums = [1, 3, 5, 7], target = 7)",
        "countPairs(nums = [1, 3, 6, 7, 9, 10], target = 10)",
        "countPairs([1, 0, 2, -1], 0)",
        "countPairs(nums = [1, 1, 2, 3, 5, 8, 13], target = 8)",
        "countPairs(nums = [2,3,5,7,11], target = 11)",
        "countPairs(nums = [1, 2, 2, 4, 4, 7, 7], target = 10)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acbd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcda\")",
        "canBeEqual(s1 = \"aaa\", s2 = \"bbb\")",
        "canBeEqual(s1 = \"abba\", s2 = \"bbaa\")",
        "canBeEqual(s1 = \"ab\", s2 = \"bca\")",
        "canBeEqual(\"aba\", \"aab\")",
        "canBeEqual(s1 = \"xyzabc\", s2 = \"xyzab\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(??)",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\"])",
        "lastVisitedIntegers([\"prev\", \"1\", \"2\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers([\"prev\", \"a\", \"b\", \"c\"])",
        "lastVisitedIntegers(s1 = [\"prev\", \"abc\", \"def\"], s2 = [\"a\", \"b\", \"c\"])",
        "lastVisitedIntegers(s1 = [\"prev\", \"one\", \"two\", \"three\"], s2 = [\"two\", \"one\", \"three\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"12\", \"10\", \"15\", \"9\", \"prev\"])"
    ],
    "sample_464": [
        "distributeCandies(n = 10, limit = 20)",
        "distributeCandies(n = 6, limit = 6)",
        "distributeCandies(n = 6, limit = 6)",
        "distributeCandies(n = 5, limit = 8)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 5, limit = 4)",
        "distributeCandies(n = 20, limit = 100)",
        "distributeCandies(n = 2, limit = 5)",
        "distributeCandies(n = 5, limit = 4)",
        "distributeCandies(n = 5, limit = 20)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1,2,3,4,5,6])",
        "minimumRightShifts([1, 2, 3])",
        "minimumRightShifts(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1])",
        "minimumRightShifts(nums = [4, 3, 2, 1, 0])",
        "minimumRightShifts(nums = [3, 4, 5, 2, 1])",
        "minimumRightShifts([5, 2, 3])",
        "minimumRightShifts(nums = [8, 4, 6, 1])",
        "minimumRightShifts(nums = [1,3,2,5,2,4,8,9,6,7])",
        "minimumRightShifts(nums = [5, 1, 2, 8, 3, 1, 6, 3, 7, 9, 3, 2, 8, 7, 9, 0, 3, 2, 8, 7, 9])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"abcd\", \"efgh\", \"ijkl\"], x = \"abc\")",
        "findWordsContaining(words = [\"ba\", \"ba\"], x = \"b\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"bat\"], x = \"t\")",
        "findWordsContaining(words = [\"cat\", \"at\", \"dog\"], x = \"at\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"carrot\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"bab\", \"baa\", \"aba\", \"bbb\"], x = \"a\")",
        "findWordsContaining(words = [\"giant\", \"ant\", \"hippo\"], x = \"go\")",
        "findWordsContaining(words = [\"hippo\", \"lion\", \"tiger\", \"eagle\", \"bear\"], x = \"t\")",
        "findWordsContaining(words = [\"ba\", \"baz\", \"can\", \"den\", \"ax\"], x = \"z\")"
    ],
    "sample_398": [
        "maxSum(nums = [2, 1, 2], m = 2, k = 2)",
        "maxSum(nums = [1,2,3,3,4,4,5,5,5,5], m = 2, k = 3)",
        "maxSum(nums = [2, 2, 3, 4, 4, 4, 4], m = 2, k = 2)",
        "maxSum(nums = [3,3,4,4,4,4,4], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5,5,6,7,7,8,9,9], m = 3, k = 2)",
        "maxSum(nums = [5,5,5,3,1], m = 5, k = 2)",
        "maxSum(nums = [2, 5, 7, 4, 8], m = 3, k = 4)",
        "maxSum(nums = [2, 5, 8, 3, 3, 6, 5], m = 3, k = 2)",
        "maxSum(nums = [0,2,5,4,5,4,5,0], m = 2, k = 2)",
        "maxSum(nums = [1, 0, 2, 5, 2, 1, 4, 6, 8], m = 4, k = 2)"
    ],
    "sample_424": [
        "minOperations(nums = [2,2,2,3,3,3,3])",
        "minOperations(nums = [0,1,2,3,4,5,6,7,8,9])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minOperations(nums = [4,1,2,2,1])",
        "minOperations(nums = [3,2,3,1,1,3])",
        "minOperations(nums = [1,3,4,5,3,1])",
        "minOperations([1, 3, 3, 4, 4])",
        "minOperations(nums = [6, 6, 6, 6, 6, 6, 6, 6, 6])",
        "minOperations(nums = [3,1,3,2,3,3,3])",
        "minOperations([5,5,5,3,3])"
    ],
    "sample_417": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [5, 3, 1, 2, 4], k = 3)",
        "minOperations(nums = [3,1,5,2,4], k = 3)",
        "minOperations(nums = [1,3,5,9,12], k = 10)",
        "minOperations(nums = [0,0,0,0,0,0,0,0,0,0], k = 5)",
        "minOperations(nums = [3,2,3,1,1,1], k = 3)",
        "minOperations(nums = [3, 7, 10, 2, 2], k = 10)",
        "minOperations(nums = [10, 4, 5, 8, 8], k = 2)",
        "minOperations([0, 2, 3, 5, 9, 14], 5)",
        "minOperations(nums = [4, 4, 1, 1, 2, 2, 3, 3, 5, 5, 6, 6, 7, 7], k = 6)"
    ],
    "sample_371": [
        "sortVowels(??)",
        "sortVowels(\"banana\")",
        "sortVowels(s1 = \"leetcode\", s2 = \"leetcode\")",
        "sortVowels(\"hello\")",
        "sortVowels(s1 = \"L\", s2 = \"y\")",
        "sortVowels(s1 = \"ll\")",
        "sortVowels(s1 = 's', s2 = 'p')",
        "sortVowels(\"leetcode\")",
        "sortVowels(s1 = \"bca\", s2 = \"ab\")",
        "sortVowels(s1 = \"lYmpH\", s2 = \"Xam\")"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 3, limit = 5)",
        "distributeCandies(n = 3, limit = 5)",
        "distributeCandies(n = 3, limit = 5)",
        "distributeCandies(n = 12, limit = 10)",
        "distributeCandies(n = 9, limit = 10)",
        "distributeCandies(n = 25, limit = 6)",
        "distributeCandies(n = 20, limit = 2)"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 1, 1, 2, 2, 2])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6])",
        "sumCounts(nums = [1, 2, 2, 2, 3, 3])",
        "sumCounts(nums = [1,2,2,3,3,3,4,4,4,4])",
        "sumCounts(nums = [0, 1, 0, 1, 1, 0, 0])",
        "sumCounts(my_list = [1, 2, 3, 1, 4])",
        "sumCounts(nums = [0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 4, 5, 5, 6])"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays([1,2,3])",
        "maxSubarrays(nums = [3, 2, 1, 0])",
        "maxSubarrays(nums = [1, 1, 2, 3, 2, 1])",
        "maxSubarrays(nums = [1,3,2,4])",
        "maxSubarrays(my_list = [1, 1, 1, 1])",
        "maxSubarrays([-1, 2, -3])",
        "maxSubarrays([5, 10, 20, 30, 10])",
        "maxSubarrays(nums = [4, 2, 1, 3, 5, 3, 2, 1, 4, 1])",
        "maxSubarrays(nums = [12, 34, 56, 21, 9, 5])"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 1, 2])",
        "sumCounts(nums = [1, 2, 1, 3])",
        "sumCounts([1, 2, 3, 3])",
        "sumCounts(nums = [1, 1, 2, 3, 4, 4])",
        "sumCounts(nums = [1,1,2,2,3,3,4,4])",
        "sumCounts(nums = [1,1,2,2,3,3,4,4,4])",
        "sumCounts(nums = [0, 1, 0, 1, 0, 1, 0])",
        "sumCounts(nums = [3, 5, 1, 2, 3])",
        "sumCounts(s1 = [3, 2, 1, 4], s2 = [4, 1, 3, 2])",
        "sumCounts(nums = [4, 2, 4, 3, 6, 1, 2, 3, 6, 6])"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"aba\", s2 = \"baa\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(\"abcd\", \"abcd\")",
        "canBeEqual(s1 = \"aba\", s2 = \"abc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abce\")",
        "canBeEqual(s1 = \"banana\", s2 = \"anana\")",
        "canBeEqual(s1 = \"abb\", s2 = \"bba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"ba\")"
    ],
    "sample_380": [
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3], target = 5)",
        "countPairs([1,2,3,4], 5)",
        "countPairs(nums = [1,1,2,3,4,5], target = 5)",
        "countPairs(nums = [1, 3, 2], target = 5)",
        "countPairs(nums = [0,1,2,3,4,5,6,7,8,9], target = 9)",
        "countPairs(nums = [3,2,2,1], target = 6)",
        "countPairs(my_list = [1, 2, 3, 4, 5, 6], target = 9)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 3, 4, 4])",
        "sumCounts(nums = [2, 3, 4])",
        "sumCounts(nums = [2, 1, 3, 4, 5])",
        "sumCounts([0, 1, 0, 1, 0, 0, 1])",
        "sumCounts([4, 5, 3, 5, 4, 3])",
        "sumCounts(nums = [3, 2, 1, 3, 3, 2, 1, 2, 3])",
        "sumCounts(nums = [3, 5, 7, 9, 10, 13, 15])"
    ],
    "sample_368": [
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(s1 = \"banana\", s2 = \"anana\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(\"abracadabra\")",
        "sortVowels(s1 = 'apple', s2 = 'leet')",
        "sortVowels(s1 = \"a\", s2 = \"u\")",
        "sortVowels(s1 = \"b\", s2 = \"q\")",
        "sortVowels(\"Evelyn and Dan\")",
        "sortVowels(\"aeyuioawojqz\")",
        "sortVowels(s = \"LIPIUPOSNRH\")"
    ],
    "sample_462": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 5)",
        "distributeCandies(n = 6, limit = 5)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 5, limit = 8)",
        "distributeCandies(n = 2, limit = 3)",
        "distributeCandies(n = 1, limit = 3)"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [10, 20, 30, 40, 50])",
        "minimumCoins(prices = [1, 4, 5])",
        "minimumCoins(prices = [1, 3, 2, 6, 5, 4])",
        "minimumCoins(prices = [10,1,5,3,6,7,8])",
        "minimumCoins(prices = [1, 2, 5, 6, 8])",
        "minimumCoins(prices = [1, 5, 6])",
        "minimumCoins(prices = [1, 5, 2, 10, 3, 8])",
        "minimumCoins(prices = [3, 10, 5, 10, 5, 1])",
        "minimumCoins([10, 1, 5, 3, 8, 10, 9, 2, 7, 4])"
    ],
    "sample_426": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1, 2, 3, 4, 5])",
        "minOperations(nums = [1, 3, 5, 7, 8])",
        "minOperations(nums = [5,3,1,4,6])",
        "minOperations(nums = [6, 2, 3, 4, 5, 6])",
        "minOperations(nums = [5,6,7,8,9,10])",
        "minOperations([3, 3, 4, 2, 4])",
        "minOperations(nums = [7, 4, 1, 2, 3])",
        "minOperations(nums = [1,1,3,3,3,6])",
        "minOperations(my_list = [5, 3, 1, 7, 4, 5, 2])"
    ],
    "sample_423": [
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minOperations([1,2,3,4,5])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minOperations(nums = [3,3,4,4,5,5])",
        "minOperations(nums = [0, 0, 0, 1, 1, 2, 2, 3, 4])",
        "minOperations(nums = [3, 6, 12, 12, 3])",
        "minOperations(my_list = [1, 3, 2, 2, 3, 1, 1, 3])",
        "minOperations(nums = [2, 3, 5, 4, 1, 3, 3, 6, 4, 4])"
    ],
    "sample_476": [
        "minimumCoins(prices = [1,2,3])",
        "minimumCoins(prices = [10,20,30,40,50])",
        "minimumCoins(prices = [1, 5, 6])",
        "minimumCoins([5,10,2,20])",
        "minimumCoins(prices = [0,1,5,10,20,50])",
        "minimumCoins(prices = [5,3,1,10])",
        "minimumCoins(prices = [10,10,20,40,20])",
        "minimumCoins(prices = [5,1,5,10,2,20])",
        "minimumCoins(prices = [20, 50, 3, 5, 2])",
        "minimumCoins(prices = [3,7,12,1,2,9,8,13,10,11,6])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(??)",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumRightShifts([5,5,5,5,5])",
        "minimumRightShifts(nums = [3, 4, 1, 5, 2])",
        "minimumRightShifts([3,1,2,5,4])",
        "minimumRightShifts(nums = [3, 1, 2, 4, 4])",
        "minimumRightShifts(nums = [4, 5, 6, 3, 2, 1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1,3,2,1,5,2,2,3,1,3,2,1])"
    ],
    "sample_403": [
        "minimumRightShifts([1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(??)",
        "minimumRightShifts([1, 2, 3, 4])",
        "minimumRightShifts([1, 2, 3])",
        "minimumRightShifts([1, 3, 2])",
        "minimumRightShifts(nums = [3,1,2])",
        "minimumRightShifts([3, 2, 2, 1])",
        "minimumRightShifts(s = [0, 1, 2, 3, 4, 5])",
        "minimumRightShifts([0, 1, 2, 3, 5, 6, 7])"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"mq\", s2 = \"px\", s3 = \"zy\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"bab\", s3 = \"bba\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"ab\", s3 = \"ac\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"bab\", s3 = \"baba\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"abcd\")",
        "findMinimumOperations(\"aba\", \"bab\", \"aba\")",
        "findMinimumOperations(s1 = \"qwerty\", s2 = \"zxcvbn\", s3 = \"asdfgh\")",
        "findMinimumOperations(\"ba\", \"bn\", \"zp\")"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabc\")",
        "longestSemiRepetitiveSubstring(\"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbbccc\")",
        "longestSemiRepetitiveSubstring(\"abaab\")",
        "longestSemiRepetitiveSubstring(s = \"ababc\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbb\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"bat\", \"tab\", \"cat\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"acb\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"baab\", \"abab\", \"abab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"ba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"racecar\", \"carrace\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"acb\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"ba\", \"ba\", \"an\", \"na\"])",
        "maximumNumberOfStringPairs(words = [\"ba\", \"na\", \"ab\", \"ba\", \"ba\", \"a\"])",
        "maximumNumberOfStringPairs(words = [\"ba\", \"ba\", \"aba\", \"ababa\"])"
    ],
    "sample_247": [
        "minOperations(s1 = \"a\", s2 = \"b\", x = 1)",
        "minOperations(s1 = \"ba\", s2 = \"ab\", x = 2)",
        "minOperations(s1 = \"ba\", s2 = \"an\", x = 2)",
        "minOperations(s1 = \"ba\", s2 = \"an\", x = 2)",
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 3)",
        "minOperations(s1 = \"ab\", s2 = \"ac\", x = 2)",
        "minOperations(s1 = \"banana\", s2 = \"ananas\", x = 3)",
        "minOperations(s1 = \"ba\", s2 = \"bc\", x = 1)",
        "minOperations(s1 = \"ab\", s2 = \"cde\", x = 2)",
        "minOperations(s1 = \"abc\", s2 = \"def\", x = 3)"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"bca\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"cat\", \"dog\", \"tac\", \"god\"])",
        "maximumNumberOfStringPairs(words = [\"cat\", \"dog\", \"tac\", \"god\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"bb\", \"ccc\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"cc\", \"dd\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"banana\", \"apple\", \"apricot\"])",
        "maximumNumberOfStringPairs(words = [\"can\", \"see\", \"them\", \"see\", \"them\"])"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment([])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [1, 4, 5])",
        "minGroupsForValidAssignment(nums = [2, 5, 5])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,9,9])",
        "minGroupsForValidAssignment(nums = [3,4,2,2,1,3])",
        "minGroupsForValidAssignment(nums = [2, 5, 7, 4, 7, 1])",
        "minGroupsForValidAssignment(nums = [2,3,4,5,1,1,1,2,3,4])",
        "minGroupsForValidAssignment(nums = [1, 3, 2, 4, 5, 4, 3, 1, 2, 1, 1, 1, 2, 3])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 7, m = 3)",
        "differenceOfSums(n = 1, m = 2)",
        "differenceOfSums(n = 11, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(m = 5, n = 15)",
        "differenceOfSums(n = 100, m = 1)"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"abab\", k = 2)",
        "shortestBeautifulSubstring(s = \"1\", k = 2)",
        "shortestBeautifulSubstring(s = \"11111\", k = 2)",
        "shortestBeautifulSubstring(s1 = \"ba\", k = 2)",
        "shortestBeautifulSubstring(s = \"12\", k = 3)",
        "shortestBeautifulSubstring(s = \"10\", k = 2)",
        "shortestBeautifulSubstring(s = \"ab0111\", k = 2)",
        "shortestBeautifulSubstring(s = \"abacbab\", k = 2)",
        "shortestBeautifulSubstring(s = \"111100\", k = 2)",
        "shortestBeautifulSubstring(s = \"abcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbababcbabababcbababcbababcbababcbababcbabababcbababcbababcbababcbabababcbababcbababcbabababcbababcbabababcbababcbabababcbababcbababcbabababcbabababcbababcbabababcbababcbabababcbababcbabababcbabababcbababcbabababcbabababcbabababcbabababcbabababcbabababcbabababcbabababcbabababcbabababcbabababcbabababcbabababcbabababcbabababcbababababcbabababcbabababcbababababcbabababcbabababcbabababcbababababcbababababcbababababcbabababcbabababababcbababababcbabababcbabababcbababababcbababababcbabababababcbabababababcbababababababcbabababababcbabababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"ba\", s3 = \"ba\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"cd\")",
        "findMinimumOperations(s1 = \"abab\", s2 = \"abab\", s3 = \"abab\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"bbb\", s3 = \"ccc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bca\", s3 = \"cab\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"na\", s3 = \"ban\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"an\", s3 = \"ana\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"ab\", s3 = \"abcd\")",
        "findMinimumOperations(\"ababab\", \"bababa\", \"aaaaaa\")"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"aab\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabc\")",
        "longestSemiRepetitiveSubstring(\"ababab\")",
        "longestSemiRepetitiveSubstring(\"aab\")",
        "longestSemiRepetitiveSubstring(s = \"ba\")",
        "longestSemiRepetitiveSubstring(s = \"aaabdd\")",
        "longestSemiRepetitiveSubstring(\"aabbbb\")",
        "longestSemiRepetitiveSubstring(s = \"aaabaaaaaab\")",
        "longestSemiRepetitiveSubstring(s = \"abccdddeee\")"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minSum([0,0,0], [0,0,0])",
        "minSum([1, 2, 3], [3, 2, 1])",
        "minSum(nums1 = [2,3,4,5], nums2 = [4,5,6,7])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [3, 2, 1, 4])",
        "minSum(nums1 = [1,2,0,3], nums2 = [2,0,3,4])",
        "minSum(nums1 = [5, 2, 3], nums2 = [9, 1, 8])",
        "minSum(nums1 = [10, 20, 30, 40], nums2 = [1, 1, 1, 1])",
        "minSum(nums1 = [1,2,0,0], nums2 = [0,2,2,2])"
    ],
    "sample_289": [
        "minimumSteps(s = \"0011\")",
        "minimumSteps(s
        "minimumSteps(s = \"001\")",
        "minimumSteps(s = \"11001\")",
        "minimumSteps(s = \"010101\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"10000000001\")",
        "minimumSteps(s1 = \"11000\")",
        "minimumSteps(s1 = \"ba\", s2 = \"anana\")",
        "minimumSteps(s1 = \"0111\", s2 = \"11\")"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [10, 20, 30, 40, 50])",
        "maximumTripletValue(nums = [3, 5, 2])",
        "maximumTripletValue([2, 1, 3, 4, 5])",
        "maximumTripletValue(nums = [2, 4, 3, 1, 5])",
        "maximumTripletValue(nums = [2, 3, 4, 2, 6])",
        "maximumTripletValue([0, 1, 3, 4, 5, 6])",
        "maximumTripletValue([5, -3, 10, -2, -4])",
        "maximumTripletValue([3, -2, 1, -4, -1, 5, 1, -5])"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"abab\", k = 2)",
        "beautifulSubstrings(s1 = \"abcd\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"bba\", k = 3)",
        "beautifulSubstrings(s = \"ba\", k = 2)",
        "beautifulSubstrings(s = \"abracadabra\", k = 2)",
        "beautifulSubstrings(s = \"aabb\", k = 2)",
        "beautifulSubstrings(s1 = \"pwwkew\", k = 2)",
        "beautifulSubstrings(s = \"abcba\", k = 3)",
        "beautifulSubstrings(s = \"aAaaA\", k = 3)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(s = \"baab\")",
        "minimumBeautifulSubstrings(s = \"bab\")",
        "minimumBeautifulSubstrings(\"abc\")",
        "minimumBeautifulSubstrings(s = \"abcabcabc\")",
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(\"banana\")",
        "minimumBeautifulSubstrings(s = \"abababab\")"
    ],
    "sample_313": [
        "matrixSum([[1, 2], [3, 4]])",
        "matrixSum(my_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"i\"]])",
        "matrixSum(a = [[1, 2, 3], [1, 2, 3], [1, 2, 3]])",
        "matrixSum(a = [[3, 1, 4], [1, 5, 9], [2, 6, 5]])",
        "matrixSum([[1, 2, 3], [2, 1, 4], [3, 4, 1]])",
        "matrixSum(a = [\n    [1, 3],\n    [2, 2]\n])",
        "matrixSum([[4, 2, 1], [3, 1, 4], [3, 2, 1]])",
        "matrixSum(matrix = [[1, 5, 8, 0], [2, 9, 6, 3], [4, 3, 1, 7], [9, 1, 3, 5]])",
        "matrixSum(s1 = [ [2,4,2], [5,3,1], [8,9,5] ], s2 = [ [1,3,3], [3,2,6], [4,4,4] ])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [3, 4, 5, 6])",
        "minSum(nums1 = [0, 0, 0], nums2 = [0, 0, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 1, 2])",
        "minSum(nums1 = [0, 0, 0], nums2 = [0, 1, 2])",
        "minSum(s1 = [0, 0, 1], s2 = [0, 0, 1])",
        "minSum(s1 = [1, 2, 2], s2 = [3, 4, 4])",
        "minSum(nums1 = [4, 1, 2, 2], nums2 = [1, 1, 1, 1])",
        "minSum([1, 3, 0, 5, 9], [2, 4, 3, 0, 6])",
        "minSum(nums1 = [0,2,4,5,9], nums2 = [3,1,5,6,7])",
        "minSum(nums1 = [10, 30, 20, 50, 100], nums2 = [1, -1, 3, -4, -5])"
    ],
    "sample_282": [
        "minOperations([1, 2, 3, 4], [4, 3, 2, 1])",
        "minOperations([1, 2, 3], [2, 1, 3])",
        "minOperations(nums1 = [3, 3, 3], nums2 = [3, 2, 2])",
        "minOperations(nums1 = [1, 3, 5, 7, 9], nums2 = [0, 2, 4, 6, 8])",
        "minOperations(nums1 = [2, 1, 3, 6, 5], nums2 = [6, 5, 4, 3, 2])",
        "minOperations([-1, 0, -2], [-3, -1, 2])",
        "minOperations([3, 5, 1, 6, 7], [2, 4, 1, 8, 9])",
        "minOperations(nums1 = [1, 5, 10, 100], nums2 = [1, 5, 6, 10])",
        "minOperations([1, 3, 5, 3, 2, 4], [2, 5, 3, 5, 3, 6])",
        "minOperations(nums1 = [10, 50, 80, 100], nums2 = [6, 7, 10, 8])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [1,2,1,2,1])",
        "alternatingSubarray(nums = [1,2,4,5,6])",
        "alternatingSubarray(nums = [1,2,3,3,3,3,2,1])",
        "alternatingSubarray(nums = [2,1,3,4,2])",
        "alternatingSubarray(nums = [1,3,4,5,6,7])",
        "alternatingSubarray([1, 2, 4, 1, 2, 3])",
        "alternatingSubarray(nums = [0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
        "alternatingSubarray(nums = [3,0,2,5,5,1])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [20, 30, 40], money = 100)",
        "buyChoco(prices = [20, 15], money = 30)",
        "buyChoco(prices = [20, 30, 25, 35], money = 100)",
        "buyChoco(prices = [1,1,2,2,3], money = 3)",
        "buyChoco(prices = [1, 4, 2, 3, 4], money = 15)",
        "buyChoco(prices = [10, 1, 10], money = 3)",
        "buyChoco(prices = [10, 12, 15, 25, 20], money = 50)"
    ],
    "sample_302": [
        "countSeniors(details = [\"a1\", \"a2\", \"a3\", \"a4\", \"a5\", \"a6\", \"a7\", \"a8\", \"a9\", \"a10\"])",
        "countSeniors(details = [\"011234\", \"234567\", \"345678\"])",
        "countSeniors(details = [\"18\", \"25\", \"32\", \"55\"])",
        "countSeniors(details = [\"65\", \"45\", \"20\", \"33\"])",
        "countSeniors(details = [\"i am 60\", \"i am 37\", \"i am 59\"])",
        "countSeniors(details = [\"65 years\", \"1 year\", \"85 years\"])",
        "countSeniors(details = [\"25\",\"66\",\"70\"])",
        "countSeniors(details = [\"joey\", \"sally\", \"george\", \"peter\", \"james\"])",
        "countSeniors(details = [\"bob\", \"mary\", \"tue\", \"juni\", \"jan\", \"feb\", \"oct\", \"nov\", \"dec\"])",
        "countSeniors(details = [\"585094\", \"706058\", \"656048\", \"667890\", \"603053\"])"
    ],
    "sample_298": [
        "beautifulSubstrings(s1 = \"ba\", k = 3)",
        "beautifulSubstrings(s1 = \"a\", k = 2)",
        "beautifulSubstrings(\"aab\", 2)",
        "beautifulSubstrings(s = \"abracadabra\", k = 3)",
        "beautifulSubstrings(\"banana\", 5)",
        "beautifulSubstrings(s1 = \"abcd\", k = 3)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(\"hello\", 3)",
        "beautifulSubstrings(s = \"babab\", k = 4)",
        "beautifulSubstrings(s = \"abccdeffghijklmnopqrstuvwxyz\", k = 7)"
    ],
    "sample_255": [
        "minimumSum([1,2,3,4,5,6])",
        "minimumSum([1,2,3])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [0,1,2,3,4,5,6,7,8,9])",
        "minimumSum(nums = [1,3,2,4,5])",
        "minimumSum([3,2,1,5,6,4])",
        "minimumSum([2,3,1,1,4])",
        "minimumSum(nums = [2,2,1,1,5])",
        "minimumSum(my_list = [5,2,1,6])",
        "minimumSum(nums = [10, 2, 8, 9, 7])"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1,3,2])",
        "minGroupsForValidAssignment(nums = [3,2,2,1,1,1])",
        "minGroupsForValidAssignment(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1])",
        "minGroupsForValidAssignment(nums = [2,3,1,3])",
        "minGroupsForValidAssignment(s1 = [1,2,3,4,5], s2 = [5,4,3,2,1])",
        "minGroupsForValidAssignment(s1 = \"a\", s2 = \"b\", s3 = \"c\", s4 = \"d\")",
        "minGroupsForValidAssignment(nums = [1,3,4,2,5,3])",
        "minGroupsForValidAssignment(nums = [5, 10, 15, 16])",
        "minGroupsForValidAssignment(nums = [1,3,4,2,7,1,9,2,7,3,6,1,2,1,3,4,7,5,3])"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray([1,2,3,5,6,7])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray([1,2,3,4,3,2,1])",
        "alternatingSubarray([1,2,3,4,5,6])",
        "alternatingSubarray([1,2,3,5,6])",
        "alternatingSubarray(nums = [1,2,3,4,4,4,3,2,1])",
        "alternatingSubarray(nums = [1,2,2,3,4,5,6,7])",
        "alternatingSubarray(nums = [1,2,3,5,6,8,11,12,13])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = \"ababab\", k = 2)",
        "shortestBeautifulSubstring(s = \"aab\", k = 2)",
        "shortestBeautifulSubstring(s = \"baab\", k = 2)",
        "shortestBeautifulSubstring(s = \"abacabadabacaba\", k = 4)",
        "shortestBeautifulSubstring(s = \"110111\", k = 3)",
        "shortestBeautifulSubstring(\"ba\", 2)",
        "shortestBeautifulSubstring(s = \"11001\", k = 4)",
        "shortestBeautifulSubstring(s = \"ababaab\", k = 3)",
        "shortestBeautifulSubstring(\"1010\", 3)",
        "shortestBeautifulSubstring(s = \"11100111011101110110011101110111011101111\", k = 3)"
    ],
    "sample_293": [
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"11\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"01\")",
        "minimumSteps(\"1001\")",
        "minimumSteps(s = \"110001\")",
        "minimumSteps(s1 = \"1011\")",
        "minimumSteps(s1 = \"110\", s2 = \"00\")",
        "minimumSteps(s1 = \"0111101\", s2 = \"1011\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(\"banana\")",
        "longestSemiRepetitiveSubstring(\"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"ababababab\")",
        "longestSemiRepetitiveSubstring(\"\")",
        "longestSemiRepetitiveSubstring(s = \"pwwkew\")",
        "longestSemiRepetitiveSubstring(s = \"hijkl\")"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [1,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,2,3])",
        "minGroupsForValidAssignment([1,2,3])",
        "minGroupsForValidAssignment(nums = [1,2,2,2,1])",
        "minGroupsForValidAssignment(nums = [1,3,2,2,3])",
        "minGroupsForValidAssignment(nums = [2,3,3,4,2])",
        "minGroupsForValidAssignment([1, 1, 2, 2, 3, 3, 4, 4])",
        "minGroupsForValidAssignment(nums = [3,3,2,2,1,1,0])",
        "minGroupsForValidAssignment(nums = [1, 1, 3, 1, 1])",
        "minGroupsForValidAssignment([0,2,3,0,3,1,4,2])"
    ],
    "sample_307": [
        "countSeniors(details = [\"55\", \"66\", \"77\", \"88\", \"99\"])",
        "countSeniors(details = [\"60\", \"70\", \"75\"])",
        "countSeniors(details = [\"M0\", \"M1\", \"M2\"])",
        "countSeniors(details = [\"33\", \"41\", \"57\"])",
        "countSeniors(details = [\"bob\", \"mike\", \"mike\", \"dave\"])",
        "countSeniors(details = [\"60-59\", \"65-69\", \"71-79\", \"80-89\"])",
        "countSeniors(details = [\"John\", \"Joe\", \"Paul\", \"Sam\"])",
        "countSeniors(details = [\"12-59\", \"21-59\", \"60-59\", \"31-59\"])",
        "countSeniors(details = [\"12-30\", \"50\", \"42\", \"59\", \"45\"])",
        "countSeniors(details = [\"mj-33-3-1\", \"mj-34-2-0\", \"mj-35-1-3\"])"
    ],
    "sample_290": [
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"0011\")",
        "minimumSteps(s = \"01010\")",
        "minimumSteps(s = \"1110\")",
        "minimumSteps(s1 = \"0101\")",
        "minimumSteps(s = \"1000\")",
        "minimumSteps(\"10101\")",
        "minimumSteps(s = \"0ba1\")",
        "minimumSteps(s = \"00101010101010101\")",
        "minimumSteps(s = \"1010010001\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [2,2,2,1,1,1], moveFrom = [0,1], moveTo = [3,4])",
        "relocateMarbles(nums = [2,1,1,1,2,2,2], moveFrom = [1,2], moveTo = [2,3])",
        "relocateMarbles(nums = [1,1,1,2,2,3,4,4], moveFrom = [2,4], moveTo = [1,3])",
        "relocateMarbles(nums = [5,3,3,2,4], moveFrom = [0,2], moveTo = [1,3])",
        "relocateMarbles(nums = [2,2,2,2,2,2,2,2,2,2], moveFrom = [0,1,2,3,4,5,6,7,8,9], moveTo = [1,0,2,3,4,5,6,7,8,9])",
        "relocateMarbles(s1 = [1,2,2,3], s2 = [4,4,4,5], s3 = [5,5,5,6])",
        "relocateMarbles(nums = [1,2,1,2,2,3,3,4,4,4,4], moveFrom = [0,1,2,3], moveTo = [2,3,4])",
        "relocateMarbles(nums = [1,2,3,3,3,3,4,4,4,4,4], moveFrom = [2,3,4], moveTo = [1,4,5])",
        "relocateMarbles(nums = [1,2,3,1,3,3,3,3], moveFrom = [2,4], moveTo = [1,3])",
        "relocateMarbles(nums = [4, 4, 3, 3, 2, 2, 1], moveFrom = [2, 1, 0], moveTo = [3, 2, 0])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1,2,3,4,5,6])",
        "alternatingSubarray([1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1, 2, 3, 1, 2, 3])",
        "alternatingSubarray(nums = [1, 0, 1, 0, 1, 1])",
        "alternatingSubarray([2,3,4,5])",
        "alternatingSubarray(nums = [3, 2, 1, 0, 5, 4])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s1 = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"banana\", k = 4)",
        "beautifulSubstrings(s = \"aab\", k = 2)",
        "beautifulSubstrings(s1 = \"aab\", k = 3)",
        "beautifulSubstrings(s = \"aabb\", k = 3)",
        "beautifulSubstrings(s1 = \"abcd\", k = 3)",
        "beautifulSubstrings(s = \"abababab\", k = 3)",
        "beautifulSubstrings(s1 = \"aaaa\", s2 = \"bb\")",
        "beautifulSubstrings(s = 'abcde', k = 6)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [1,2,3,4,5,6,7,8,9,10])",
        "maximumTripletValue(nums = [1,5,2,3,4,6])",
        "maximumTripletValue([2, 0, 1, 5])",
        "maximumTripletValue(nums = [3,5,1,6,2,1])",
        "maximumTripletValue(nums = [1,5,9,5,9,9,9])",
        "maximumTripletValue(nums = [9,3,7,1,4,5,6,8])",
        "maximumTripletValue(nums = [10,7,8,6,9,2])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ba\", \"ba\", \"ba\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"ba\", \"an\", \"an\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"bba\", \"abba\", \"abab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"ab\", \"ab\"])",
        "maximumNumberOfStringPairs([\"abba\", \"abcd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"bb\", \"ba\", \"a\"])",
        "maximumNumberOfStringPairs([\"abc\", \"def\", \"abc\", \"ghi\", \"abc\"])",
        "maximumNumberOfStringPairs(s1 = [\"ba\", \"nana\"], s2 = [\"ba\", \"an\"])"
    ],
    "sample_245": [
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 6, m = 3)",
        "differenceOfSums(n = 3, m = 2)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 11, m = 3)",
        "differenceOfSums(n = 4, m = 2)",
        "differenceOfSums(n = 15, m = 5)",
        "differenceOfSums(n = 3, m = 4)",
        "differenceOfSums(n = 25, m = 3)"
    ],
    "sample_314": [
        "buyChoco(prices = [10, 20, 30], money = 50)",
        "buyChoco(prices = [1, 2, 3, 4], money = 5)",
        "buyChoco(prices = [1,2,3], money = 5)",
        "buyChoco(prices = [1, 3, 5, 9], money = 10)",
        "buyChoco(prices = [1, 1, 2, 5], money = 5)",
        "buyChoco(prices = [10, 2], money = 7)",
        "buyChoco(prices = [5, 8, 10], money = 25)",
        "buyChoco(prices = [3, 4, 4, 2, 5], money = 15)",
        "buyChoco(prices = [12, 7, 16], money = 15)",
        "buyChoco(prices = [3, 5, 7, 2, 6, 5], money = 10)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ac\", \"bc\", \"bd\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"aab\", \"aab\"])",
        "maximumNumberOfStringPairs(words = [\"cat\", \"dog\", \"apple\", \"banana\"])",
        "maximumNumberOfStringPairs(words = [\"xyz\", \"yzx\", \"zxy\"])",
        "maximumNumberOfStringPairs(words = [\"ra\", \"da\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"pizza\", \"pizzapizza\", \"pizzapizzapizza\"])",
        "maximumNumberOfStringPairs(words = [\"red\", \"emerald\", \"green\"])"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(\"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"baab\")",
        "longestSemiRepetitiveSubstring(\"aaaabbbb\")",
        "longestSemiRepetitiveSubstring(s1 = \"aaabbbccc\")",
        "longestSemiRepetitiveSubstring(\"abaabaab\")"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"ab\", \"bc\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"banana\", \"mq\", \"px\", \"zy\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"aa\", \"aaa\", \"aaaa\"])",
        "minimizeConcatenatedLength(s1 = \"abc\", s2 = \"xyz\")",
        "minimizeConcatenatedLength(s1 = \"abc\", s2 = \"xyz\")",
        "minimizeConcatenatedLength(words = [\"abc\", \"abd\", \"abcd\"])",
        "minimizeConcatenatedLength(s1 = \"a\", s2 = \"bb\")",
        "minimizeConcatenatedLength(words = [\"banana\", \"aba\", \"baa\", \"baab\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"at\", \"add\", \"da\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"an\", \"ca\", \"na\", \"te\", \"e\"])"
    ],
    "sample_323": [
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 9)",
        "isFascinating(n = 5)",
        "isFascinating(n = 9)",
        "isFascinating(n = 5)",
        "isFascinating(n = 3)",
        "isFascinating(n = 2)",
        "isFascinating(n = 1234)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(\"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabc\")",
        "longestSemiRepetitiveSubstring(\"aab\")",
        "longestSemiRepetitiveSubstring(\"aab\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(\"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbc\")",
        "longestSemiRepetitiveSubstring(\"aabbc\")",
        "longestSemiRepetitiveSubstring(\"aaaaaaaa\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"40\", \"50\", \"60\"])",
        "countSeniors(details = [\"20\", \"30\", \"40\"])",
        "countSeniors(details = [\"40-59\", \"60-79\", \"80-89\", \"90-100\"])",
        "countSeniors(details = [\"age=55\", \"age=65\", \"age=67\"])",
        "countSeniors(s1 = \"aa\", s2 = \"23\")",
        "countSeniors(details = [\"00\", \"11\", \"22\", \"33\", \"44\", \"55\", \"66\", \"77\", \"88\", \"99\"])",
        "countSeniors(details = [\"60a\", \"40a\", \"55a\"])",
        "countSeniors(details = [\"60\", \"21\", \"19\", \"25\", \"45\"])",
        "countSeniors(details = [\"70\", \"20\", \"34\", \"60\", \"32\", \"48\"])",
        "countSeniors(details = [\"jerry\", \"75\", \"jill\", \"35\", \"gustavo\"])"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [3, 2, 1])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 1, 1])",
        "minGroupsForValidAssignment([4, 5, 6, 7])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 5, 7, 9])",
        "minGroupsForValidAssignment([3, 5, 6])",
        "minGroupsForValidAssignment(nums = [9, 2, 5, 7, 6, 2, 3, 1])",
        "minGroupsForValidAssignment(nums = [2, 3, 1, 6, 4, 6, 7, 8, 3, 9])",
        "minGroupsForValidAssignment([4, 1, 0, 0, 1, 1, 0, 2, 1, 1, 1, 0, 0, 0, 1, 0])"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSum([1, 2, 3, 4])",
        "minimumSum([1, -2, 3, -4])",
        "minimumSum([3, -1, 5, 2, 4])",
        "minimumSum(nums = [3, 5, 2, 1, 9])",
        "minimumSum([1,5,8,3,2])",
        "minimumSum(nums = [4, 2, 5, 3, 2, 1])",
        "minimumSum(nums = [3, 5, 7, 2, 10])",
        "minimumSum(my_list = [1, 2, 5, 6, 10])",
        "minimumSum(nums = [3, 5, 7, 2, 6, 4, 1, 9])"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"bc\", \"ac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"acb\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"cd\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"mq\", \"px\", \"py\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bca\", \"abcd\"])",
        "maximumNumberOfStringPairs(s1 = \"ab\", s2 = \"bc\", s3 = \"cd\")",
        "maximumNumberOfStringPairs(words = [\"abba\", \"abcd\", \"abab\", \"abcd\", \"abab\", \"abcd\"])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = \"1\", k = 2)",
        "shortestBeautifulSubstring(s = \"ba\", k = 2)",
        "shortestBeautifulSubstring(s1 = \"ba\", s2 = \"nana\")",
        "shortestBeautifulSubstring(s = \"12345\", k = 2)",
        "shortestBeautifulSubstring(\"1101111\", 2)",
        "shortestBeautifulSubstring(s1 = \"aaab\", k = 2)",
        "shortestBeautifulSubstring(s = \"aaaaaaab\", k = 2)",
        "shortestBeautifulSubstring(s = \"11000101\", k = 3)",
        "shortestBeautifulSubstring(\"bcab\", 2)",
        "shortestBeautifulSubstring(s1 = \"abccbaabccbaabccbaabccba\", k = 2)"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 2, 3, 4, 5], limit = 3)",
        "lexicographicallySmallestArray(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1], limit = 4)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 2, 3, 4, 5, 6], limit = 1)",
        "lexicographicallySmallestArray(nums = [1, 2, 3, 4, 5], limit = 6)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9, 10, 11, 12, 13], limit = 3)",
        "lexicographicallySmallestArray(nums = [2, 4, 3, 2, 4, 3], limit = 10)",
        "lexicographicallySmallestArray(nums = [1, 3, 2, 1, 9, 0, 5, 4, 7], limit = 3)",
        "lexicographicallySmallestArray(nums = [2, 0, 8, 5, 9, 12, 3, 7], limit = 4)"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum([[1, 2], [3, 4]])",
        "matrixSum([[1,2], [3,4]])",
        "matrixSum(matrix = [[1, 2], [3, 4]])",
        "matrixSum([[1, 3], [2, 4]])",
        "matrixSum(a = [[\"2\", \"3\", \"4\"], [\"5\", \"6\", \"7\"], [\"8\", \"9\", \"10\"]])",
        "matrixSum([[1, 5, 7], [2, 3, 4]])",
        "matrixSum(a = [ [1,3,6], [2,5,7], [4,8,9]])",
        "matrixSum([[3,1,4],[5,5,3]])",
        "matrixSum(matrix = [\n    [3, 7, 1],\n    [0, 2, 5],\n    [4, 6, 8]])"
    ],
    "sample_295": [
        "beautifulSubstrings(s1 = \"aeiou\", k = 3)",
        "beautifulSubstrings(s1 = \"abcd\", k = 3)",
        "beautifulSubstrings(s1 = \"ab\", k = 2)",
        "beautifulSubstrings(\"abcabcabc\", 3)",
        "beautifulSubstrings(\"ba\", 3)",
        "beautifulSubstrings(\"abcab\", 2)",
        "beautifulSubstrings(\"mq\", 3)",
        "beautifulSubstrings(s1 = \"ba\", s2 = \"na\", k = 2)",
        "beautifulSubstrings(\"abcabc\", k = 6)",
        "beautifulSubstrings(\"doo\", 1)"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"ba\", \"an\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"ef\"])",
        "maximumNumberOfStringPairs(words = [\"hello\", \"world\", \"llohe\"])",
        "maximumNumberOfStringPairs(words = [\"cba\", \"bca\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"edabit\", \"dab\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"dummy\", \"dum\", \"dum\", \"dad\"])",
        "maximumNumberOfStringPairs(words = [\"bob\", \"arcade\", \"racecar\", \"civic\"])",
        "maximumNumberOfStringPairs(words = [\"banana\", \"abcd\", \"ba\", \"ncdba\"])",
        "maximumNumberOfStringPairs(words = [\"moo\", \"oov\", \"oo\", \"vv\", \"oo\", \"moo\"])",
        "maximumNumberOfStringPairs(words = [\"accc\", \"bbaa\", \"cccc\", \"aaaaa\"])"
    ],
    "sample_325": [
        "isFascinating(n = 12345)",
        "isFascinating(n = 12345)",
        "isFascinating(n = 5)",
        "isFascinating(n = 10)",
        "isFascinating(n = 2)",
        "isFascinating(n = 1234)",
        "isFascinating(n = 8)",
        "isFascinating(n = 42)",
        "isFascinating(n = 24)",
        "isFascinating(n = 24)"
    ],
    "sample_240": [
        "maximumTripletValue([1, 2, 3, 4])",
        "maximumTripletValue(nums = [3,2,1])",
        "maximumTripletValue(nums = [1, 3, 2, 5, 4])",
        "maximumTripletValue(nums = [1,2,3,4,5,6])",
        "maximumTripletValue(nums = [3, 4, 5, 1, 2])",
        "maximumTripletValue([10, 15, 20, 25])",
        "maximumTripletValue(my_list = [1, 4, 6, 8, 12])",
        "maximumTripletValue([1, 3, 0, -5, 3, 8])",
        "maximumTripletValue(nums = [3, 4, -1, 5, -2, 7, 8, 1, -5])",
        "maximumTripletValue(my_list = [0, -3, 2, -1, 3, -2, -5, -6])"
    ],
    "sample_312": [
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(matrix = [[1, 2], [3, 4]])",
        "matrixSum(??)",
        "matrixSum(matrix = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(matrix = [[1,2],[3,4]])",
        "matrixSum(nums = [ [1,2], [3,4] ])",
        "matrixSum(nums = [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]])",
        "matrixSum(matrix = [[\"a\",\"b\",\"c\"],[\"d\",\"e\",\"f\"],[\"g\",\"h\",\"i\"]])",
        "matrixSum(nums = [\n    [1,2,3,],\n    [4,5,6,],\n    [7,8,9,],\n])"
    ],
    "sample_281": [
        "minOperations(??)",
        "minOperations(a = [1, 2, 3], b = [1, 2, 3, 4])",
        "minOperations(a = [9, 9, 9, 9], b = [9, 9, 9, 9])",
        "minOperations(a = [3, 4, 3], b = [4, 4, 4])",
        "minOperations(a = [2,2,3], b = [3,3,3])",
        "minOperations(my_list = [7, 3, 6])",
        "minOperations(a = [1, 10, 3], b = [1, 3, 5])",
        "minOperations(a = [5, 3, 2, 5, 1], b = [1, 1, 2, 2, 3])",
        "minOperations([3, 0, 1, 0, 3, 0], [0, 0, 1, 0, 0, 1])",
        "minOperations(a = [12, 4, 4, 6, 9], b = [3, 1, 3, 1, 2])"
    ],
    "sample_280": [
        "minOperations(nums1 = [10, 20, 30], nums2 = [20, 30, 10])",
        "minOperations(nums1 = [1, 2, 2], nums2 = [2, 3, 4])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 1, 2, 2])",
        "minOperations(nums1 = [3, 5, 7], nums2 = [7, 3, 5])",
        "minOperations(nums1 = [3, 4, 6], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [10, 20, 30], nums2 = [4, 5, 9])",
        "minOperations(nums1 = [1,3,3], nums2 = [1,2,4])",
        "minOperations(nums1 = [3, 7, 5], nums2 = [3, 4, 1])",
        "minOperations(nums1 = [10, 5, 10, 4], nums2 = [10, 5, 10, 1])",
        "minOperations(nums1 = [100, 1, 10, 100, 2], nums2 = [1, 10, 100, 100, 2])"
    ],
    "sample_243": [
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [3, 2, 5, 1, 4])",
        "maximumTripletValue(nums = [1, 1, 2, 3, 4])",
        "maximumTripletValue([0, 1, 3, 7])",
        "maximumTripletValue([-10, -10, 0, 10, 20])",
        "maximumTripletValue(nums = [1, 3, 5, 2, 2, 2])",
        "maximumTripletValue([0, 2, 1, 0, 4, 3])",
        "maximumTripletValue(nums = [5, 3, 7, 2, 8, 9])",
        "maximumTripletValue(nums = [4, 2, 1, 8, 0, 4])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"abab\", k = 2)",
        "shortestBeautifulSubstring(s = \"010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
        "shortestBeautifulSubstring(s1 = \"ba\", k = 2)",
        "shortestBeautifulSubstring(s1 = \"abcd\", k = 3)",
        "shortestBeautifulSubstring(s = \"abababab\", k = 2)",
        "shortestBeautifulSubstring(s = \"bab\", k = 2)",
        "shortestBeautifulSubstring(s = \"aabbc\", k = 3)",
        "shortestBeautifulSubstring(s = \"bababc\", k = 2)",
        "shortestBeautifulSubstring(s = \"1a1b2c3d4e5f6g7h8i9j0\", k = 3)",
        "shortestBeautifulSubstring(s = \"abacbabab\", k = 5)"
    ],
    "sample_256": [
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])",
        "minimumSum([3, 1, 2, 4, 5])",
        "minimumSum([1, 4, 2, 5, 3])",
        "minimumSum([3, 5, 2, 7])",
        "minimumSum(nums = [1, 2, 4, 7, 5, 6])",
        "minimumSum(nums = [3, 2, 1, 4, 3, 2, 3, 1])",
        "minimumSum(nums = [8, 10, 2, 1, 6, 3, 7, 4, 5, 9])"
    ],
    "sample_291": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(\"1001\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"babab\")",
        "minimumSteps(\"0111\")",
        "minimumSteps(s1 = \"1212\")",
        "minimumSteps(s = \"1022\")",
        "minimumSteps(s = \"1a1a1\")",
        "minimumSteps(s1 = \"01011\")",
        "minimumSteps(\"1000000001\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [3, 4, 5, 6, 7])",
        "minOperations(nums1 = [1, 3, 4, 2], nums2 = [4, 3, 2, 1])",
        "minOperations(nums1 = [1, 3, 4, 2], nums2 = [3, 1, 4, 2])",
        "minOperations(nums1 = [1, 5, 2], nums2 = [4, 3, 6])",
        "minOperations(nums1 = [1,2,2,3], nums2 = [3,2,1,2])",
        "minOperations(nums1 = [2, 2, 3, 3], nums2 = [3, 3, 2, 2])",
        "minOperations([2, 4, 3], [1, 3, 5])",
        "minOperations([1,3,3,5], [2,1,4,3])"
    ],
    "sample_277": [
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[0,0,0],[0,0,0],[0,0,0]])",
        "findChampion(grid = [[0,0,0],[0,0,0],[0,0,0]])",
        "findChampion(grid = [[\"b\", \"b\", \"b\"], [\"b\", \"b\", \"b\"], [\"b\", \"b\", \"b\"]])",
        "findChampion(grid = [[0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[\"1\", \"0\"], [\"0\", \"2\"]])",
        "findChampion(grid = [\n    [1, 2, 3, 4, 5],\n    [2, 0, 1, 0, 2],\n    [3, 1, 0, 1, 3],\n    [4, 0, 1, 0, 4],\n    [5, 2, 3, 4, 5],\n])",
        "findChampion(grid = [[3, 0, 0, 3], [0, 2, 0, 3], [0, 0, 3, 2], [3, 2, 2, 1]])",
        "findChampion([[2, 3, 1, 4], [1, 0, 2, 3], [3, 4, 2, 1]])",
        "findChampion(grid = [[3, 0, 0, 0, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1, 0, 0], [0, 1, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 3, m = 2)",
        "differenceOfSums(n = 9, m = 3)",
        "differenceOfSums(n = 4, m = 2)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 3, m = 2)",
        "differenceOfSums(n = 3, m = 2)",
        "differenceOfSums(n = 1000, m = 3)"
    ],
    "sample_292": [
        "minimumSteps(s = \"1101\")",
        "minimumSteps(\"101\")",
        "minimumSteps(\"1101\")",
        "minimumSteps(\"0111\")",
        "minimumSteps(s = \"11100\")",
        "minimumSteps(s = \"01010\")",
        "minimumSteps(?? = \"101\")",
        "minimumSteps(s = \"12345\")",
        "minimumSteps(s = \"00010101\")",
        "minimumSteps(s = \"10203040\")"
    ],
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1,2,3,4,5,6])",
        "alternatingSubarray([1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8])",
        "alternatingSubarray(nums = [1, 3, 7, 10, 2])",
        "alternatingSubarray(nums = [4,3,5,1,7,2])",
        "alternatingSubarray(nums = [3, 5, 7, 3, 6, 4, 8])",
        "alternatingSubarray(nums = [5, 8, 1, 9, 12])"
    ],
    "sample_353": [
        "relocateMarbles(nums = [0, 1, 0], moveFrom = [1, 0], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [0, 2], moveTo = [1, 3])",
        "relocateMarbles(nums = [3, 5, 2], moveFrom = [0, 2], moveTo = [1, 3])",
        "relocateMarbles(nums = [1,2,3,4], moveFrom = [1,4], moveTo = [0,2])",
        "relocateMarbles(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], moveTo = [5, 6, 7, 8, 9, 0, 1, 2, 3, 4])",
        "relocateMarbles(nums = [1, 1, 1, 2, 2, 3, 3, 4, 4], moveFrom = [1, 4], moveTo = [2, 3])",
        "relocateMarbles(nums = [2, 0, 1, 2, 3, 1], moveFrom = [0, 2, 3], moveTo = [1, 4])",
        "relocateMarbles(nums = [5, 5, 1, 5, 3], moveFrom = [0, 2], moveTo = [1, 3])",
        "relocateMarbles(nums = [0,1,2,0,0,1,2,2,1], moveFrom = [2,0], moveTo = [1,3])",
        "relocateMarbles(nums = [3,4,2,3,3], moveFrom = [1,0], moveTo = [4,2])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maximumTripletValue([-1, -2, -3, 4, -5, 6])",
        "maximumTripletValue(nums = [1, -2, 5, -1, 3])",
        "maximumTripletValue([-2, -1, 0, 3, 2, -4])",
        "maximumTripletValue([-1,2,-3,4,-1,-2,1])",
        "maximumTripletValue(nums = [-6, -3, -2, -1, 0, 1, 2, 3, 4])",
        "maximumTripletValue([3, 5, 8, 1, 4])",
        "maximumTripletValue(nums = [4, 10, 1, 7, -2])"
    ],
    "sample_273": [
        "findChampion([[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(??)",
        "findChampion(grid = [ [0,0,0], [0,1,0], [0,0,0] ])",
        "findChampion([[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]])",
        "findChampion(grid = [[0,0,0], [1,0,0], [0,1,0]])",
        "findChampion(grid = [\n  [0, 1, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0]\n])",
        "findChampion([[0, 1, 2], [3, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[1,0,1], [0,1,0], [1,0,1]])",
        "findChampion(grid = [[1,0,1], [0,1,0], [0,1,0]])",
        "findChampion(grid = [[0,0,1,0,0,0],[1,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]])"
    ],
    "sample_267": [
        "minSum([1, 2, 3], [4, 5, 6])",
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum([1, 2, 3], [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6, 7])",
        "minSum([1,2,3], [4,5,6,7])",
        "minSum(nums1 = [2, 1, 4], nums2 = [1, 2, 3])",
        "minSum([1,2,3,4], [1,1,1])",
        "minSum(nums1 = [2, -1, 1], nums2 = [-2, 1, -1])",
        "minSum(nums1 = [4, 5, 9], nums2 = [6, 3, 7])",
        "minSum([-1, 0, 1, 1, -2, 2], [0, 1, 2])"
    ],
    "sample_294": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"0011\")",
        "minimumSteps(\"1\")",
        "minimumSteps(s = \"bbb\")",
        "minimumSteps(s1 = \"11\", s2 = \"10\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"bb\")"
    ],
    "sample_274": [
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1,2],[3,4]])",
        "findChampion(grid = [[0, 1, 1, 1], [1, 0, 1, 0], [1, 1, 0, 1], [1, 0, 1, 0]])",
        "findChampion(grid = [[3, 4], [1, 2]])",
        "findChampion(grid = [\n    [1, 1, 1, 1],\n    [1, 0, 0, 1],\n    [1, 0, 0, 1],\n    [1, 1, 1, 1],\n])",
        "findChampion(grid = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 0, 1], [2, 3, 4, 5]])",
        "findChampion(grid = [[5,4,3], [2,1,0], [7,6,9]])",
        "findChampion(grid = [[5, 3, 0, 0], [9, 2, 5, 1], [1, 0, 1, 0], [0, 1, 0, 1]])",
        "findChampion(grid = [[-5, -2, -4], [-2, -4, -6], [-6, -6, -8]])"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment([1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,3,4,5,6])",
        "minGroupsForValidAssignment(nums = [2,3,5,6,7])",
        "minGroupsForValidAssignment(nums = [1,2,2,1,3,3])",
        "minGroupsForValidAssignment(s = [2,2,3,4,4])",
        "minGroupsForValidAssignment([12,12,12,12,12,12])",
        "minGroupsForValidAssignment(nums = [1,5,4,6,3,2,6,3])",
        "minGroupsForValidAssignment(nums = [3,0,5,0,0,3,7])"
    ],
    "sample_270": [
        "minSum(nums1 = [0, 0, 0], nums2 = [1, 0, 0])",
        "minSum([0, 1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 0])",
        "minSum([0,1,2,3,4,5], [6,7,8,9,10,11])",
        "minSum([], [1, 2, 3, 4, 5])",
        "minSum([0,0], [1,0,0])",
        "minSum(nums1 = [4, 0, 0, 0], nums2 = [0, 0, 0, 0])",
        "minSum([1, -2, 3], [5, -6, 7])",
        "minSum(nums1 = [0, 3], nums2 = [2, 2, 3])",
        "minSum([0, 0, -1, 0], [-1, 1, 0, 0])",
        "minSum([3, -1, 2, 4], [5, -1, 3, 6])"
    ],
    "sample_317": [
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1,2,3], money = 3)",
        "buyChoco(prices = [1,3,5], money = 10)",
        "buyChoco(prices = [10, 5], money = 10)",
        "buyChoco(prices = [5, 2, 7], money = 8)",
        "buyChoco(prices = [5, 10, 5], money = 20)",
        "buyChoco(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9], money = 18)",
        "buyChoco(prices = [8,5,3,1], money = 5)",
        "buyChoco(prices = [5, 3, 2, 8, 6], money = 9)",
        "buyChoco(prices = [5, 10, 8, 3, 12], money = 23)"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"aab\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 5)",
        "beautifulSubstrings(s = \"banana\", k = 4)",
        "beautifulSubstrings(s = \"abca\", k = 3)",
        "beautifulSubstrings(\"abcd\", 2)",
        "beautifulSubstrings(s = \"aaabbb\", k = 3)",
        "beautifulSubstrings(\"banana\", 2)",
        "beautifulSubstrings(\"a\"*1000, 1000)",
        "beautifulSubstrings(s = \"xyzab\", k = 2)"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"aab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbb\")",
        "longestSemiRepetitiveSubstring(\"a\")",
        "longestSemiRepetitiveSubstring(s = \"abccbaab\")",
        "longestSemiRepetitiveSubstring(\"aaababab\")",
        "longestSemiRepetitiveSubstring(\"abbbbb\")"
    ],
    "sample_341": [
        "longestString(??)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 5, z = 2)",
        "longestString(x = 3, y = 5, z = 7)",
        "longestString(x = 2, y = 4, z = 1)",
        "longestString(x = 7, y = 4, z = 3)",
        "longestString(x = 5, y = 2, z = 5)",
        "longestString(s1 = \"abc\", s2 = \"defg\", s3 = \"hijkl\")",
        "longestString(x = 5, y = 10, z = 3)",
        "longestString(x = 5, y = 6, z = 2)"
    ],
    "sample_271": [
        "minSum([1, 0, 0, 0, 0], [0, 1, 0, 0, 0])",
        "minSum([0, 0, 0], [1, 2, 0])",
        "minSum([0,0,0,0,1,1,1], [1,1,1,0,0,0,0])",
        "minSum(nums1 = [0, 0, 0, 0], nums2 = [1, 2, 1])",
        "minSum(nums1 = [1, 2, 0], nums2 = [0, 0, 1, 2])",
        "minSum([4,2,1,2,3], [1,1,1,1,1])",
        "minSum(nums1 = [3,4,0,3], nums2 = [2,4,3])",
        "minSum(nums1 = [0,0,0,0,1,1,0], nums2 = [1,0,1,1,1,1,1])",
        "minSum(s1 = [5,6], s2 = [4,5,5])",
        "minSum([1, 0, 3, 5, 1, 2, 0, 6, 1], [1, 2, 1, 0, 2, 1, 2, 1, 0])"
    ],
    "sample_340": [
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 3, y = 2, z = 4)",
        "longestString(x = 0, y = 0, z = 0)",
        "longestString(x = 2, y = 1, z = 3)",
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(x = 3, y = 1, z = 2)",
        "longestString(s1 = \"ab\", s2 = \"cd\", s3 = \"ef\")",
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(x = 1, y = 4, z = 6)",
        "longestString(x = 3, y = 3, z = 5)"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"ba\", k = 3)",
        "shortestBeautifulSubstring(s = \"aba\", k = 3)",
        "shortestBeautifulSubstring(s1 = \"abcd\", k = 4)",
        "shortestBeautifulSubstring(s1 = \"ab\", k = 2)",
        "shortestBeautifulSubstring(s = \"abcba\", k = 3)",
        "shortestBeautifulSubstring(s = \"abcabcabc\", k = 4)",
        "shortestBeautifulSubstring(s = \"abcabcabc\", k = 9)",
        "shortestBeautifulSubstring(s1 = \"abcb\", k = 3)",
        "shortestBeautifulSubstring(s = \"1023456789\", k = 3)",
        "shortestBeautifulSubstring(s = \"ababababab\", k = 6)"
    ],
    "sample_324": [
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 0)",
        "isFascinating(n = 9)",
        "isFascinating(n = 12345678)",
        "isFascinating(n = 12345)",
        "isFascinating(n = 2)",
        "isFascinating(n = 17)",
        "isFascinating(n = 89)"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSum([1, 2, 3, 2])",
        "minimumSum([3, 3, 2, 2, 1])",
        "minimumSum([1, 3, 4, 7])",
        "minimumSum(nums = [2, 5, 1, 7, 3])",
        "minimumSum(nums = [10, 10, 2, 2])",
        "minimumSum([4, 2, 5, 1, 9, 3, 7, 8])",
        "minimumSum([1, 4, 3, 2, 6, 8, 1])",
        "minimumSum(nums = [3, 8, 1, 8, 6, 9, 8, 4])"
    ],
    "sample_268": [
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 4, 5])",
        "minSum(nums1 = [1,2,3,4], nums2 = [2,3,4,5])",
        "minSum(nums1 = [1, 2, 0], nums2 = [3, 4, 5])",
        "minSum(nums1 = [0, 0, 0, 0], nums2 = [0, 0, 1, 0])",
        "minSum(nums1 = [0, 1, 0, 0], nums2 = [0, 2, 0, 3])",
        "minSum([1,2,0,0,0], [3,4,5,6,7])",
        "minSum([1, 2, 3, 0], [3, 1, 3, 1])",
        "minSum(nums1 = [5, 0, 0, 0, 0, 0], nums2 = [2, 0, 0, 0])",
        "minSum(s1 = [3, 0, 0, 5], s2 = [0, 3, 1, 2])",
        "minSum(nums1 = [3, 1, 4, 2, 2, 2], nums2 = [2, 1, 1])"
    ],
    "sample_288": [
        "findMinimumOperations(\"\", \"\", \"\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"b\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"cba\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"zab\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"baa\", s3 = \"abba\")",
        "findMinimumOperations(s1 = \"bab\", s2 = \"ab\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"ana\", s3 = \"na\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"cdeab\", s3 = \"deabc\")",
        "findMinimumOperations(\"ba\", \"a\", \"ab\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"bab\", s3 = \"bb\")"
    ],
    "sample_321": [
        "maxStrength([??])",
        "maxStrength([-1, 2, -3, 4, -5])",
        "maxStrength(nums = [-4, -2, 0, 1, 3])",
        "maxStrength([??, 1, -1, 3, -3])",
        "maxStrength(nums = [-3, 5, -6, -8])",
        "maxStrength(nums = [4, 2, -1, 2, -3, 1])",
        "maxStrength(nums = [-10, 0, 10, 20, 30])",
        "maxStrength([4, -4, 2, -2, 5, 1])",
        "maxStrength(nums = [3, 7, -2, -9, 2, 0, 5, 1])",
        "maxStrength(nums = [5, 5, 1, 3, 2, 5, 3, 2, 1, 0])"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [0, 2], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [0,1,2], moveTo = [3,4,5])",
        "relocateMarbles(nums = [2, 1, 3], moveFrom = [0, 1], moveTo = [0, 2])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [2, 3], moveTo = [0, 1])",
        "relocateMarbles(nums = [1, 2, 2, 3], moveFrom = [1, 4], moveTo = [3, 5])",
        "relocateMarbles(nums = [1, 3, 5, 2, 4, 6], moveFrom = [0, 3], moveTo = [1, 2])",
        "relocateMarbles(nums = [2, 1, 3, 1, 4, 5], moveFrom = [1, 2, 4], moveTo = [3, 5])",
        "relocateMarbles(nums = [4, 5, 2, 3, 7, 6, 1], moveFrom = [0, 1], moveTo = [3, 5])",
        "relocateMarbles([2,5,8,8,1,1,9], [4,2,3,3,1,2,4], [5,5,6,6,8,9,10])"
    ],
    "sample_357": [
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9], moveFrom = [1,3,5], moveTo = [2,4,6,8,9])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9], moveFrom = [1,6,8], moveTo = [5,9])",
        "relocateMarbles(nums = [1, 2, 5, 4], moveFrom = [1, 3], moveTo = [3, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [3, 4, 5, 6], moveTo = [1, 2, 3, 4])",
        "relocateMarbles(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9,10], moveFrom = [1,4,6], moveTo = [3,5])",
        "relocateMarbles([], [1, 2], [2, 3])",
        "relocateMarbles(nums = [0, 5, 5, 5, 8, 8, 9], moveFrom = [0, 2], moveTo = [1, 3])",
        "relocateMarbles(nums = [1,2,3,4], moveFrom = [3,2,5,1], moveTo = [2,1,5,4])",
        "relocateMarbles(nums = [1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], moveFrom = [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], moveTo = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 2, 3, 4], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3, 4], money = 10)",
        "buyChoco(prices = [10, 20, 30], money = 50)",
        "buyChoco(prices = [1, 2, 3], money = 0)",
        "buyChoco(prices = [1, 2, 3], money = 10)",
        "buyChoco(prices = [2, 3, 5, 1], money = 10)",
        "buyChoco(prices = [1, 1, 1, 3], money = 4)",
        "buyChoco(prices = [1, 5, 3, 10, 7], money = 20)",
        "buyChoco(prices = [3,5,8,4,10], money = 20)"
    ],
    "sample_308": [
        "matrixSum([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1,2,3], [4,5,6], [7,8,9]])",
        "matrixSum(nums = [[\"1\", \"2\", \"3\"], [\"4\", \"5\", \"6\"], [\"7\", \"8\", \"9\"]])",
        "matrixSum(nums = [[1, 3], [2, 2]])",
        "matrixSum([[1, 3], [2, 1]])",
        "matrixSum([[1, 2, 2], [3, 4, 4], [5, 5, 5]])",
        "matrixSum(nums = [[1,3,5], [2,4,6], [3,5,7]])",
        "matrixSum(nums = [[1, 0, 3], [2, 2, 2], [0, 1, 1]])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2], money = 5)",
        "buyChoco(prices = [20, 30, 40], money = 100)",
        "buyChoco(prices = [100, 200, 50], money = 300)",
        "buyChoco(prices = [10, 5, 1], money = 10)",
        "buyChoco(prices = [2, 3, 5], money = 7)",
        "buyChoco(??, 5)",
        "buyChoco(prices = [2, 3, 1], money = 6)",
        "buyChoco(prices = [10, 30, 40], money = 60)",
        "buyChoco(prices = [100,50,25], money = 100)"
    ],
    "sample_259": [
        "minimumSum([1,2,3,4,5])",
        "minimumSum(nums = [1,2,3])",
        "minimumSum(nums = [1, 1, 2, 3, 5, 8, 13, 21])",
        "minimumSum(nums = [1,2,5,1])",
        "minimumSum(nums = [5,1,4,2,3])",
        "minimumSum([4,2,1,3,5])",
        "minimumSum(nums = [1, 5, 7])",
        "minimumSum([2,4,6,1,1,9])",
        "minimumSum(nums = [3,10,3,1,2,1,5,2,3])",
        "minimumSum(nums = [3,3,6,4,7,4,8,9])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [1, 2, 1, 3, 2, 1])",
        "alternatingSubarray(nums = [1, 4, 2, 5, 3])",
        "alternatingSubarray([0,1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray([1, 3, 2, 4, 1, 2, 3])",
        "alternatingSubarray([0, 1, 0, -1, 1])",
        "alternatingSubarray(nums = [1,3,4,8,10,11,12])",
        "alternatingSubarray(nums = [1,3,6,4,2,5,7,2,1,0])"
    ],
    "sample_311": [
        "matrixSum(nums = [[1,2,3], [1,2,3], [1,2,3]])",
        "matrixSum(nums = [[1, 1, 1], [1, 2, 3], [1, 1, 1]])",
        "matrixSum(nums = [[1, 2, 3], [1, 2, 3]])",
        "matrixSum([[1, 1, 1], [0, 0, 0], [2, 2, 2]])",
        "matrixSum(m = [[1, 2, 3], [4, 5, 6]], n = [1, 2, 3])",
        "matrixSum(nums = [[1, 1, 1], [0, 2, 0], [3, 0, 1]])",
        "matrixSum([[0, 2, 1], [1, 0, 2], [0, 1, 0]])",
        "matrixSum([[1, 3, 5], [2, 2, 1], [4, 4, 4]])",
        "matrixSum(matrix = [\n    [1, 2, 0],\n    [3, 4, 5],\n    [6, 0, 8]\n])",
        "matrixSum(nums = [ [1,3,0,0], [5,1,0,3], [0,0,8,3] ])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 2, 3, 4], money = 10)",
        "buyChoco(a = [1,2,3], money = 3)",
        "buyChoco(a = [1, 10, 20, 30], money = 30)",
        "buyChoco(a = [2, 1, 1], money = 5)",
        "buyChoco(a = [0, 1, 5], money = 7)",
        "buyChoco(a = [1, 5, 10, 20], money = 11)",
        "buyChoco(money = 15, a = [10, 20, 30])",
        "buyChoco(a = [30, 20, 10, 5, 5], money = 30)",
        "buyChoco(money = 15, prices = [4, 2])",
        "buyChoco(a = [200,10,30], money = 160)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(??)",
        "minGroupsForValidAssignment(nums = [0, 1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [3, 2, 3])",
        "minGroupsForValidAssignment(nums = [4, 6, 2])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1])",
        "minGroupsForValidAssignment(nums = [3, 1, 5, 4, 4, 3])",
        "minGroupsForValidAssignment(nums = [3, 5, 7, 1, 2, 4, 1, 5])",
        "minGroupsForValidAssignment(nums = [10,5,7,4,3,9,3,1,2,3])"
    ],
    "sample_276": [
        "findChampion([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1,2,3],[1,2,3],[1,2,3]])",
        "findChampion([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[1, 2, 3], [3, 4, 5], [4, 5, 6]])",
        "findChampion([[0, 1], [2, 3]])",
        "findChampion(grid = [[1, 2, 3], [3, 2, 1], [4, 3, 2]])",
        "findChampion([[1,1,0],[0,1,0],[0,0,1]])",
        "findChampion(grid = [\n    [1, 2, 3],\n    [3, 1, 2],\n    [2, 3, 1]\n])",
        "findChampion(grid = [[1,1,0], [0,1,1], [0,0,0]])",
        "findChampion(grid = [[\"3\", \"2\", \"1\"], [\"2\", \"2\", \"1\"], [\"1\", \"2\", \"3\"]])"
    ],
    "sample_320": [
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength([1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 3, 5])",
        "maxStrength(nums = [10, 20, 30])",
        "maxStrength(nums = [1, 1, 2, 2, 3, 3])",
        "maxStrength([3, 5, 10])",
        "maxStrength(nums = [0, 2, 3, 5])",
        "maxStrength([2, 5, 3, 7])",
        "maxStrength([5, 3, 6, 2, 4])",
        "maxStrength([4, 2, 7, 3])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(s1 = \"ba\", s2 = \"nana\")",
        "minimizeConcatenatedLength(words = [\"mq\", \"px\", \"zy\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"an\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"abd\", \"acd\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"abcd\", \"abdc\"])",
        "minimizeConcatenatedLength(s1 = \"banana\", s2 = \"apple\")",
        "minimizeConcatenatedLength(words = [\"ab\", \"bc\", \"bc\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"abcd\", \"abdc\", \"bcda\", \"bcda\", \"bcda\"])",
        "minimizeConcatenatedLength(words = [\"pax\", \"pyx\", \"paxy\", \"paxy\", \"paxy\"])"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"ba\", s2 = \"ba\", s3 = \"ba\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"ba\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"aab\", s3 = \"aab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"aab\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"bab\", s3 = \"bab\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"banana\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"a\", s3 = \"b\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"aba\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"aba\", s3 = \"abc\")",
        "findMinimumOperations(\"abcd\", \"abcde\", \"abced\")"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1, 3, 4, 2])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 3, 2])",
        "alternatingSubarray(nums = [1, 3, 1, 2, 2, 4])",
        "alternatingSubarray(nums = [4, 3, 2, 1, 1, 1, 2, 3, 4])",
        "alternatingSubarray([1, 2, 3, 4, 4, 5, 6, 7, 8])",
        "alternatingSubarray([1,3,4,7,2,6,5])",
        "alternatingSubarray([1, 3, -1, 3, 10, 5, 1])"
    ],
    "sample_278": [
        "findChampion(grid = [[1,2,3],[4,5,6],[7,8,9]])",
        "findChampion(grid = [[1,2,3],[4,5,6],[7,8,9]])",
        "findChampion(grid = [[1, 2], [3, 4]])",
        "findChampion(grid = [[1,2], [3,4]])",
        "findChampion(grid = [[1,2,3], [4,5,6], [7,8,9]])",
        "findChampion(grid = [[1,1,1,1,1],\n                           [1,2,2,2,1],\n                           [1,2,2,2,1],\n                           [1,2,2,2,1],\n                           [1,1,1,1,1]])",
        "findChampion(grid = [[0,1,0], [0,2,1], [1,1,0]])",
        "findChampion(grid = [[2, 4, 6], [3, 1, 9], [4, 8, 5]])",
        "findChampion([[3,7,1], [9,0,6], [2,4,5]])",
        "findChampion(grid = [[\"b\",\"g\",\"a\"],[\"g\",\"o\",\"k\"],[\"a\",\"k\",\"o\"]])"
    ],
    "sample_304": [
        "countSeniors(details = [\"1a\", \"2a\", \"3a\", \"4a\", \"5a\"])",
        "countSeniors(details = [\"name: John\", \"age: 45\", \"name: Jane\"])",
        "countSeniors(details = [\"5567891011\", \"5567891011\", \"5567891011\", \"5567891011\"])",
        "countSeniors(details = [\"1h1m3s\", \"2h2m3s\", \"3h3m3s\", \"4h4m4s\"])",
        "countSeniors(details = [\"eleven\", \"senior\", \"sixtyfour\"])",
        "countSeniors(details = [\"124555\", \"55123\", \"12345\"])",
        "countSeniors(details = [\"bba0860\", \"bba0860\", \"bba0861\"])",
        "countSeniors(details = [\"6100000\", \"590000\", \"59000\", \"70000\"])",
        "countSeniors(details = [\"My name is Kyan\", \"My surname is Akhtar\", \"My age is 50\"])",
        "countSeniors(details = [\"x6798\", \"x76\", \"x7602\", \"x769\", \"x87654\"])"
    ],
    "sample_297": [
        "beautifulSubstrings(s1 = \"ba\", k = 2)",
        "beautifulSubstrings(s = \"abca\", k = 3)",
        "beautifulSubstrings(\"abcd\", 2)",
        "beautifulSubstrings(s = \"ababa\", k = 2)",
        "beautifulSubstrings(\"abca\", 2)",
        "beautifulSubstrings(s = \"abacabadabacaba\", k = 20)",
        "beautifulSubstrings(\"cat\", 3)",
        "beautifulSubstrings(\"caa\", 2)",
        "beautifulSubstrings(s1 = \"ababab\", k = 1)",
        "beautifulSubstrings(s = \"abcabcabcabc\", k = 3)"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"abab\", k = 2)",
        "shortestBeautifulSubstring(s = \"ab\", k = 2)",
        "shortestBeautifulSubstring(s = \"11\", k = 2)",
        "shortestBeautifulSubstring(s = \"ab\", k = 2)",
        "shortestBeautifulSubstring(s = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "shortestBeautifulSubstring(s1 = \"ba\", k = 3)",
        "shortestBeautifulSubstring(s = \"ab1aab1\", k = 2)",
        "shortestBeautifulSubstring(s = \"abccba\", k = 1)",
        "shortestBeautifulSubstring(s = '1101011101', k = 2)",
        "shortestBeautifulSubstring(s = \"ab12b\", k = 2)"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"bb\", \"cc\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"foo\", \"bar\", \"baz\"])",
        "minimizeConcatenatedLength(words = [\"abcd\", \"efgh\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"bb\", \"ccc\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"a\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"nana\", \"zoo\"])"
    ],
    "sample_327": [
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 0)",
        "isFascinating(n = 0)",
        "isFascinating(n = 0)",
        "isFascinating(n = 12345)",
        "isFascinating(n = 13)",
        "isFascinating(n = 100)",
        "isFascinating(n = 27)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3], [4,5,6], [7,8,9]])",
        "matrixSum([[1, 1, 1], [2, 2, 2], [3, 3, 3]])",
        "matrixSum(nums = [\n    [1,2,3],\n    [4,5,6],\n    [7,8,9],\n])",
        "matrixSum(nums = [[1,2,3], [3,2,1], [4,5,6]])",
        "matrixSum(nums = [[0, 0, 1], [1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[\"2\", \"3\", \"4\"], [\"5\", \"6\", \"7\"]])"
    ],
    "sample_326": [
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 12345)",
        "isFascinating(n = 12345678)",
        "isFascinating(n = 0)",
        "isFascinating(n = 7)",
        "isFascinating(n = 4)",
        "isFascinating(n = 814)"
    ],
    "sample_275": [
        "findChampion(grid = [[1,0,0],[0,1,0],[0,0,1]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])",
        "findChampion(grid = [[1, 1, 1], [1, 0, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 1, 1], [0, 0, 0], [1, 0, 1]])",
        "findChampion([[0,0,1], [0,1,0], [1,0,0]])",
        "findChampion(grid = [[0, 1, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1]])",
        "findChampion([[1, 2, 3], [4, 5, 0], [0, 1, 2]])",
        "findChampion(grid = [\n    [1, 2, 1],\n    [1, 0, 1],\n    [0, 1, 1]\n])",
        "findChampion(grid = [[0,1,2], [1,0,0], [0,0,2]])",
        "findChampion(grid = [\n    [1, 0, 0, 0, 0],\n    [0, 1, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 0, 0, 1]\n])"
    ],
    "sample_260": [
        "minimumSum([1,2,3,4,5,6])",
        "minimumSum([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSum([2, 5, 1, 3, 4])",
        "minimumSum([1, 3, 6, 9])",
        "minimumSum([5, 1, 4, 2, 6])",
        "minimumSum(nums = [2,2,2,2,2])",
        "minimumSum([3, 2, 1, 5, 2, 6])",
        "minimumSum(nums = [1, 3, 5, 6, 7, 9, 10])",
        "minimumSum(nums = [1, 5, 3, 5, 7])",
        "minimumSum(nums = [4, 9, 12, 3, 9])"
    ],
    "sample_322": [
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 1234567890)",
        "isFascinating(n = 10)",
        "isFascinating(n = 12345678)",
        "isFascinating(n = 99)",
        "isFascinating(n = 222)",
        "isFascinating(n = 919234789)"
    ],
    "sample_248": [
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 3)",
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 3)",
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 1)",
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 1)",
        "minOperations(s1 = \"ba\", s2 = \"bab\", x = 2)",
        "minOperations(s1 = \"ba\", s2 = \"bab\", x = 1)",
        "minOperations(s1 = \"ba\", s2 = \"mq\", x = 3)",
        "minOperations(\"aab\", \"bbb\", 2)",
        "minOperations(??, \"aa\", 0)",
        "minOperations(s1 = \"abba\", s2 = \"aba\", x = 1)"
    ],
    "sample_342": [
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 5, z = 7)",
        "longestString(x = 4, y = 6, z = 2)",
        "longestString(x = 3, y = 2, z = 6)",
        "longestString(x = 6, y = 2, z = 4)",
        "longestString(x = 5, y = 2, z = 2)",
        "longestString(x = 8, y = 3, z = 4)",
        "longestString(x = 10, y = 2, z = 7)",
        "longestString(x = 6, y = 6, z = 3)",
        "longestString(x = 12, y = 11, z = 13)"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [2, 4, 5], moveTo = [1, 3, 6])",
        "relocateMarbles(nums = [5, 6, 8, 9, 5], moveFrom = [0, 2, 4], moveTo = [1, 3, 5])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [2, 3, 1], moveTo = [0, 2, 3])",
        "relocateMarbles(nums = [2, 1, 3, 4, 5], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [1, 5, 8, 9, 9], moveFrom = [2, 4], moveTo = [3, 6])",
        "relocateMarbles(nums = [5, 5, 6, 6, 8, 9, 9, 9, 9], moveFrom = [1, 3, 4, 7], moveTo = [2, 6, 8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9, 3, 2, 1, 7], moveFrom = [0, 4, 2, 3], moveTo = [4, 1, 5, 6, 0])",
        "relocateMarbles(nums = [2,5,8,4,8,4,8,7,1,7,3,8,8], moveFrom = [1,2], moveTo = [5,6])"
    ],
    "sample_306": [
        "countSeniors(details = [\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"july\", \"august\", \"september\", \"october\", \"november\", \"december\"])",
        "countSeniors(details = [\"I'm 60 years old\", \"I'm 71 years old\"])",
        "countSeniors(details = [\"60 year old man\", \"70 year old man\", \"40 year old man\"])",
        "countSeniors(details = [\"34-50\", \"51-60\", \"60-70\"])",
        "countSeniors(details = [\"15 years old\", \"20 years old\", \"60 years old\", \"40 years old\"])",
        "countSeniors(details = [\"name:bob,age:68,gender:male\", \"name:alice,age:52,gender:female\"])",
        "countSeniors(details = [\"John:23\", \"John:67\", \"John:78\"])",
        "countSeniors(details = [\"64\", \"26\", \"19\", \"76\", \"55\"])",
        "countSeniors(details = [\"bob 30\", \"sarah 50\", \"anna 90\"])",
        "countSeniors(s1 = \"1a,2b,3c,4d,5e,6f,70,80,90\", s2 = \"4d\")"
    ],
    "sample_303": [
        "countSeniors(details = [\"John Smith\", \"Bob Johnson\", \"Alice Thompson\"])",
        "countSeniors(details = [\"64\", \"55\", \"52\", \"67\"])",
        "countSeniors(details = [\"1234\", \"5678\", \"9012\", \"34\"])",
        "countSeniors(details = [\"James\", \"Andrew\", \"George\", \"Robert\"])",
        "countSeniors(details = [\"55\", \"65\", \"68\", \"59\", \"76\", \"81\"])",
        "countSeniors(details = [\"a1b2c3d4e5\", \"f1g2h3i4j5k6\", \"l1m2n3o4p5q6r\"])",
        "countSeniors(details = [\"Jack is 73\", \"John is 66\", \"James is 90\"])",
        "countSeniors(details = [\"Bill:76\", \"Alice:23\", \"Bill:59\"])",
        "countSeniors(details = [\"John is 60\", \"Mary is 37\", \"Paul is 54\", \"Steve is 61\"])",
        "countSeniors(details = [\"(33, 75)\", \"(68, 60)\", \"(88, 65)\", \"(44, 49)\", \"(26, 28)\", \"(52, 46)\", \"(80, 84)\", \"(10, 12)\"])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [2, 3], moveTo = [1, 0])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [0, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [2, 3], moveTo = [4, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [4, 3, 2], moveTo = [1, 5, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6], moveFrom = [3, 5], moveTo = [2, 6])",
        "relocateMarbles(nums = [0, 1, 2, 3, 4], moveFrom = [3, 4, 5, 6], moveTo = [1, 2, 0])",
        "relocateMarbles(nums = [5, 2, 8, 9, 3], moveFrom = [2, 3], moveTo = [4, 1])",
        "relocateMarbles(nums = [1, 5, 7, 2, 8, 9], moveFrom = [0, 2], moveTo = [1, 3])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"bbb\", s3 = \"ccc\")",
        "findMinimumOperations(\"\", \"\", \"\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"bba\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"aa\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"aba\", s3 = \"acb\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"bx\")",
        "findMinimumOperations(\"abcd\", \"aabd\", \"abcd\")",
        "findMinimumOperations(\"abcd\", \"aabcd\", \"cabcd\")",
        "findMinimumOperations(\"abca\", \"bdbc\", \"cdbc\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"cd\", s3 = \"ef\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"ban\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"bab\")",
        "findMinimumOperations(\"aa\", \"bb\", \"cc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bab\", s3 = \"aba\")",
        "findMinimumOperations(s1 = \"aaaa\", s2 = \"aa\", s3 = \"aa\")",
        "findMinimumOperations(s1 = \"ban\", s2 = \"ann\", s3 = \"anna\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"c\", s3 = \"efgh\")"
    ]
}