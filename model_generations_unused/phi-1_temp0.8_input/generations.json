{
    "sample_287": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(\"abc\", \"def\", \"ghi\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcde\", s3 = \"cdef\")",
        "findMinimumOperations(\"abc\", \"ab\", \"a\")"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(\"banana\")",
        "longestSemiRepetitiveSubstring(\"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abcbca\")",
        "longestSemiRepetitiveSubstring(\"abcbdbdbbdcdabd\")",
        "longestSemiRepetitiveSubstring(\"abcbdeffed\")",
        "longestSemiRepetitiveSubstring(\"abcde\")",
        "longestSemiRepetitiveSubstring(\"abcde\")",
        "longestSemiRepetitiveSubstring(s1 = \"abcbde\")",
        "longestSemiRepetitiveSubstring(s = \"abcbdbabdbdbbdabd\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"na\"])",
        "maximumNumberOfStringPairs(words = [\"hello\", \"world\", \"olleh\", \"dlrow\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"racecar\", \"car\", \"race\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"car\", \"care\", \"arc\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"car\", \"arc\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"car\", \"level\", \"deified\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"car\", \"bat\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs([\"race\", \"car\", \"fast\"])"
    ],
    "sample_247": [
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 1)",
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 1)",
        "minOperations(s1 = \"ab\", s2 = \"ba\", x = 1)",
        "minOperations(s1 = \"ab\", s2 = \"ba\", x = 1)",
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 1)",
        "minOperations(s1 = \"abcd\", s2 = \"bcda\", x = 1)",
        "minOperations(s1 = \"banana\", s2 = \"nan\", x = 1)",
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 2)",
        "minOperations(s1 = \"abcde\", s2 = \"bcdef\", x = 1)",
        "minOperations(s1 = \"abcd\", s2 = \"bcde\", x = 2)"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bca\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"def\", \"bac\", \"fed\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bac\", \"bca\", \"cab\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"def\", \"bac\", \"fed\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"cat\", \"dog\", \"tac\", \"god\", \"act\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"car\", \"care\", \"acre\", \"act\"])"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment([1, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment([1,2,2,3,3,3])",
        "minGroupsForValidAssignment([1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment([1, 1, 2, 2, 3, 3])"
    ],
    "sample_246": [
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 4, m = 2)"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s1 = \"1010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"10101010101\", k = 2)",
        "shortestBeautifulSubstring(s1 = \"1010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"1010101010101010\", k = 4)",
        "shortestBeautifulSubstring(\"10111100111001110\", 3)"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"ca\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"ca\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"nan\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(\"abc\", \"bcd\", \"cde\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"nac\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"na\", s3 = \"aa\")",
        "findMinimumOperations(\"abcd\", \"bcde\", \"cdef\")",
        "findMinimumOperations(\"abc\", \"bcde\", \"cdef\")"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"ababab\")",
        "longestSemiRepetitiveSubstring(\"abccba\")",
        "longestSemiRepetitiveSubstring(\"abcabcbb\")",
        "longestSemiRepetitiveSubstring(\"abcbdbdbbdcdabd\")",
        "longestSemiRepetitiveSubstring(\"abcbdab\")",
        "longestSemiRepetitiveSubstring(\"aabbcddddeeeeffff\")",
        "longestSemiRepetitiveSubstring(\"abcbc\")",
        "longestSemiRepetitiveSubstring(s1 = \"abcbdaa\")"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 4, 5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 4, 5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 4, 5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 4, 5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2])",
        "minSum([0, 1, 2], [0, 0, 3])"
    ],
    "sample_289": [
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101\", s2 = \"111\")",
        "minimumSteps(s1 = \"101\")",
        "minimumSteps(s1 = \"101\")",
        "minimumSteps(s1 = \"101\", s2 = \"001\")",
        "minimumSteps(s = \"101\")"
    ],
    "sample_241": [
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4])"
    ],
    "sample_299": [
        "beautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "beautifulSubstrings(s = \"ba\", k = 2)",
        "beautifulSubstrings(\"banana\", 2)",
        "beautifulSubstrings(\"banana\", 2)",
        "beautifulSubstrings(\"hello\", 2)",
        "beautifulSubstrings(\"banana\", 3)",
        "beautifulSubstrings(s = \"ababab\", k = 2)",
        "beautifulSubstrings(\"abacabadabacaba\", k=3)",
        "beautifulSubstrings(s = \"ba\", k = 2)",
        "beautifulSubstrings(\"aebc\", 2)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s = \"a\")",
        "minimumBeautifulSubstrings(s1 = \"abacd\", s2 = \"cbade\")"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum([[1, 2], [3, 4]])",
        "matrixSum([[1, 2], [3, 4]])",
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum([[1,2],[3,4]])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 4, 5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum([0, 1, 2], [3, 4, 5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 0, 4, 5], nums2 = [0, 3, 6, 0, 7])",
        "minSum(nums1 = [1, 0, 2], nums2 = [3, 0, 4])",
        "minSum(nums1 = [1, 0, 3], nums2 = [0, 2, 4])",
        "minSum(nums1 = [1, 0, 2], nums2 = [1, 2, 1])",
        "minSum(nums1 = [0, 1, 2], nums2 = [1, 0, 2])"
    ],
    "sample_282": [
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 4, 5])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 4, 5])",
        "minOperations(nums1 = [1, 3, 5, 7], nums2 = [2, 4, 6, 8])",
        "minOperations(nums1 = [1, 3, 5, 7], nums2 = [2, 4, 6, 8])",
        "minOperations([1, 2, 3], [1, 2, 3])",
        "minOperations(nums1 = [1,2,3], nums2 = [3,4,5])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minOperations([1,2,3], [4,5,6])"
    ],
    "sample_350": [
        "alternatingSubarray([1,2,3,4,5])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1,2,3,4,5,6])",
        "alternatingSubarray([1,2,1,2])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2])",
        "alternatingSubarray([1, 2, 1, 2])",
        "alternatingSubarray(nums = [1,2,1,3,2,5])",
        "alternatingSubarray(nums = [1,7,4,9,2,5])",
        "alternatingSubarray([1, 2, 3, 5, 6, 8, 9])",
        "alternatingSubarray([1,2,3,4,5])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 5], money = 3)",
        "buyChoco(prices = [1, 2, 5], money = 4)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 8)",
        "buyChoco(prices = [1, 2, 5], money = 7)",
        "buyChoco(prices = [10, 20, 30, 40, 50], money = 100)",
        "buyChoco(prices = [1, 2, 5], money = 10)",
        "buyChoco(prices = [1, 2, 5, 10], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 8)",
        "buyChoco(prices = [1, 2, 5], money = 3)",
        "buyChoco(prices = [20, 50, 10, 30, 60], money = 100)"
    ],
    "sample_302": [
        "countSeniors(details = [\"John Smith - 35\", \"Jane Doe - 42\", \"Bob Johnson - 55\"])",
        "countSeniors(details = [\"John sent 100 kg to Jane\", \"Jane sent 200 kg to John\"])",
        "countSeniors(details = [\"John Smith-35\", \"Jane Doe-56\", \"Bob Johnson-42\"])",
        "countSeniors(details = [\"ASDF1234:120\", \"ASDF5678:90\", \"ASDF9101:60\"])",
        "countSeniors(details = [\"hueyere 1: 60-69\", \"hueyere 2: 70-79\", \"hueyere 3: 80-89\"])",
        "countSeniors(details = [\"samantha (60)\", \"heila (50)\", \"lily (70)\"])",
        "countSeniors(details = [\"John Smith 1234 M@#$%^&\", \"Jane Doe 567 B*&^\"])",
        "countSeniors(details = [\"crews 30\", \"crews 55\", \"crews 20\"])",
        "countSeniors(details = [\"Mary had 1 apple and 2 bananas.\", \"John ate 3 pears.\", \"Jane was very sad.\"])",
        "countSeniors(details = [\"Master: 72\", \"Doctor: 81\", \"Seniors: 45\", \"Opsentive: 60\"])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"ba\", k = 2)",
        "beautifulSubstrings(s = \"ba\", k = 2)",
        "beautifulSubstrings(s = \"ba\", k = 2)",
        "beautifulSubstrings(s = \"ba\", k = 3)",
        "beautifulSubstrings(s = \"ba\", k = 3)",
        "beautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "beautifulSubstrings(s = \"ba\", k = 10)",
        "beautifulSubstrings(s = \"baa\", k = 2)",
        "beautifulSubstrings(s = \"leetcode\", k = 2)",
        "beautifulSubstrings(\"beautiful\", k = 5) -> 2"
    ],
    "sample_255": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum([1,2,3,4,5])",
        "minimumSum([1,2,3,4,5])",
        "minimumSum([1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum([1,2,3,4,5])",
        "minimumSum(nums = [3,1,4,2])",
        "minimumSum(nums = [3,2,4,5,1])",
        "minimumSum(nums = [3,4,5,10,20])"
    ],
    "sample_263": [
        "minGroupsForValidAssignment([1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment([1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])",
        "minGroupsForValidAssignment([1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment([1,2,4,8,16])",
        "minGroupsForValidAssignment([1,2,4,7,10])",
        "minGroupsForValidAssignment(nums = [2,3,4,7,6,8,9,10])"
    ],
    "sample_349": [
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1,2,3,4,5])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray([1, 3, 2, 4, 5, 7, 6, 8, 9])",
        "alternatingSubarray([1, 3, 2, 4, 5, 7, 6, 8, 9])",
        "alternatingSubarray([1, 2, 3, 4, 5, 6])",
        "alternatingSubarray([1, 2, 3, 5, 6, 8, 9, 10, 11])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = \"1010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"1010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 2)",
        "shortestBeautifulSubstring(s1 = \"10101010\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"10101010\", k = 2)",
        "shortestBeautifulSubstring(s = \"111\", k = 3)",
        "shortestBeautifulSubstring(s = \"01010101\", k = 2)",
        "shortestBeautifulSubstring(\"1010111011110\", 2)"
    ],
    "sample_293": [
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"1010\", s2 = \"0101\")",
        "minimumSteps(s1 = \"010101\", s2 = \"101010\")",
        "minimumSteps(s1 = \"10100\")",
        "minimumSteps(\"10100\")",
        "minimumSteps(\"010101\")",
        "minimumSteps(\"1010101\")",
        "minimumSteps(s1 = \"01010101\", s2 = \"10101010\")",
        "minimumSteps(s1 = \"001101\", s2 = \"101010\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"banana\")",
        "longestSemiRepetitiveSubstring(\"banana\")",
        "longestSemiRepetitiveSubstring(\"abcbdbdbbdcdabd\")",
        "longestSemiRepetitiveSubstring(\"banana\")",
        "longestSemiRepetitiveSubstring(\"abcbcadef\")",
        "longestSemiRepetitiveSubstring(\"abababa\")",
        "longestSemiRepetitiveSubstring(\"abcbdbdbbdcdabdab\")",
        "longestSemiRepetitiveSubstring(\"abcbdbdbbdbebddbebdbdbd\")"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,2,2,3,3,3,4,4,4,4])",
        "minGroupsForValidAssignment([1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment([1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(my_list = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])"
    ],
    "sample_307": [
        "countSeniors(details = [\"abc123\", \"def456\", \"ghi789\"])",
        "countSeniors(details = [\"John Smith 25\", \"Jane Doe 60\", \"Bob Johnson 80\"])",
        "countSeniors(details = [\"John Smith (60)\", \"Jane Doe (50)\", \"Bob Johnson (75)\"])",
        "countSeniors(details = [\"Mount St. Helens-10\", \"New York, NY 10001\", \"Chicago, IL 60601\"])",
        "countSeniors(details = [\"80s\", \"50s\", \"90s\", \"70s\"])",
        "countSeniors(details = [\"John's house has 50000 feet\", \"Mary's house has 60000 feet\", \"Bob's house has 45000 feet\"])",
        "countSeniors(details = [\"John Smith 10am-12pm\", \"Jane Doe 9am-10pm\", \"Bob Johnson 8pm-9am\"])",
        "countSeniors(details = [\"70 80 90\", \"60 50 40\", \"80 70 80\"])",
        "countSeniors(details = [\"person1: 30, 40\", \"person2: 50, 60\", \"person3: 20, 70\"])",
        "countSeniors(details = [\"105-08-09T17:05:01\", \"105-08-09T17:05:02\", \"105-08-09T17:05:03\", \"105-08-09T17:05:04\"])"
    ],
    "sample_290": [
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101\", s2 = \"111\")",
        "minimumSteps(s1 = \"10100\")",
        "minimumSteps(s = \"101010\")",
        "minimumSteps(s1 = \"10100\", s2 = \"11100\")",
        "minimumSteps(s = \"1010101\")",
        "minimumSteps(s = \"000111\")",
        "minimumSteps(s1 = \"101101\", s2 = \"010101\")",
        "minimumSteps(s1 = \"10100\", s2 = \"10001\")",
        "minimumSteps(\"010101\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9], moveFrom = [0,1,2,3,4,5,6,7,8], moveTo = [9,8,7,6,5,4,3,2,1])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [0,2,4], moveTo = [1,3,4])",
        "relocateMarbles(nums = [1,2,2,3,3,3,4,4,4,4], moveFrom = [1,2,3,4], moveTo = [2,3,4,5])",
        "relocateMarbles(my_list = [1,2,3,4,5,6,7,8,9], moveFrom = [1,3,5,7,9], moveTo = [2,4,6,8])",
        "relocateMarbles(nums = [1,2,3,2,1,3], moveFrom = [3,1,2], moveTo = [1,3,2])",
        "relocateMarbles([1,2,2,3,3,3,4,4,5], [2,3], [5,6])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9], moveFrom = [1,4,7], moveTo = [2,5,8])",
        "relocateMarbles([1,2,2,3,3,3], [2,3,4,5], [5,6,7,8])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9,10], moveFrom = [2,7,3,1], moveTo = [5,4,8,9])",
        "relocateMarbles(nums = [1,2,3,4,5,5,5,6,6,7], moveFrom = [2,5,6], moveTo = [1,3,7])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray([1, 3, 2, 4, 1])",
        "alternatingSubarray([1, 3, 2, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2])",
        "alternatingSubarray([1, 3, 2, 4, 5, 3])",
        "alternatingSubarray(nums = [1, 3, 2, 4, 1])",
        "alternatingSubarray([1, 3, 2, 4, 1, 5])",
        "alternatingSubarray([1, 3, 2, 4, 5, 3, 2])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"beautiful\", k = 10)",
        "beautifulSubstrings(s = \"ba\", k = 10)",
        "beautifulSubstrings(s = \"aeiou\", k = 20)",
        "beautifulSubstrings(s = \"abacabadabacaba\", k = 10)",
        "beautifulSubstrings(s = \"aeiou\", k = 10)",
        "beautifulSubstrings(s = \"hello world\", k = 7)",
        "beautifulSubstrings(s1 = \"ab\", s2 = \"bc\")",
        "beautifulSubstrings(s = \"abc\", k = 10)",
        "beautifulSubstrings(s = \"baaab\", k = 6)",
        "beautifulSubstrings(s = \"abcde\", k = 13)"
    ],
    "sample_242": [
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1,2,3,4,5])",
        "maximumTripletValue(nums = [-1, 0, 1, 2, -1, -4])",
        "maximumTripletValue(nums = [-1, 0, 1, 2, -1, -4])",
        "maximumTripletValue([-1, 0, 1, 2, -1, -4])",
        "maximumTripletValue([1, 2, 3, 4, 5, 6])",
        "maximumTripletValue(nums = [-1, 0, 1, 2, -1, -4])",
        "maximumTripletValue([1,2,3,4,5])",
        "maximumTripletValue([1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aba\", \"bab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aba\", \"bab\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"def\", \"bca\", \"fed\", \"racecar\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"def\", \"fed\", \"edf\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\", \"dc\", \"dc\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"bb\", \"aba\", \"cd\", \"dc\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"car\", \"fast\", \"mate\", \"sport\", \"skateboard\"])"
    ],
    "sample_245": [
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 3, m = 2)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 2)"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [10, 20, 30], money = 50)",
        "buyChoco(prices = [1, 2, 5], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [2, 3, 4], money = 5)",
        "buyChoco(prices = [2, 4, 6, 8], money = 10)",
        "buyChoco(prices = [2, 3, 4], money = 7)",
        "buyChoco(my_list = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [2, 3, 1, 4, 5], money = 8)",
        "buyChoco(prices = [2, 3, 1, 5, 4], money = 10)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"code\", \"edoc\", \"da\", \"d\"])",
        "maximumNumberOfStringPairs(words = [\"code\", \"edoc\", \"da\", \"d\"])",
        "maximumNumberOfStringPairs(words = [\"code\", \"edoc\", \"da\", \"d\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"car\", \"bat\", \"tab\"])",
        "maximumNumberOfStringPairs([\"hello\", \"world\", \"olleh\", \"dlrow\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"racecar\", \"car\", \"care\", \"acre\", \"arc\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"car\", \"acre\", \"arc\"])",
        "maximumNumberOfStringPairs([\"race\", \"car\", \"racecar\", \"hello\", \"world\"])"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"abcabcbb\")",
        "longestSemiRepetitiveSubstring(\"abcabcbb\")",
        "longestSemiRepetitiveSubstring(\"abcbda\")",
        "longestSemiRepetitiveSubstring(\"abccba\")",
        "longestSemiRepetitiveSubstring(\"aabbbcccc\")",
        "longestSemiRepetitiveSubstring(\"abacabadabacaba\")",
        "longestSemiRepetitiveSubstring(s1 = \"ba\", s2 = \"nana\")",
        "longestSemiRepetitiveSubstring(s1 = \"baab\", s2 = \"nana\")"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghij\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"bcd\", \"cde\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\", \"jkl\"])",
        "minimizeConcatenatedLength(words = [\"abcd\", \"bcda\", \"cdab\", \"dabc\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\"])",
        "minimizeConcatenatedLength(words = [\"abcd\", \"bcde\", \"cdef\"])",
        "minimizeConcatenatedLength(words = [\"abcd\", \"bcda\", \"cdab\", \"dabc\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\", \"abcd\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"ni\", \"na\"])"
    ],
    "sample_323": [
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 0)",
        "isFascinating(1)",
        "isFascinating(1)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(1)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(\"banana\")",
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"banana\")",
        "longestSemiRepetitiveSubstring(\"banana\")",
        "longestSemiRepetitiveSubstring(\"banana\")",
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"ababab\")",
        "longestSemiRepetitiveSubstring(s1 = \"abcbca\")",
        "longestSemiRepetitiveSubstring(\"ababab\")",
        "longestSemiRepetitiveSubstring(s1 = \"abcbda\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"123-45-6789\", \"234-56-7890\", \"345-67-8901\"])",
        "countSeniors(details = [\"John Smith 60M\", \"Jane Doe 70M\", \"Bob Johnson 80M\"])",
        "countSeniors(details = [\"John Smith, 40, 123 Main St, New York, NY\", \"Jane Doe, 50, 456 Elm St, San Francisco, CA\"])",
        "countSeniors(details = [\"0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0\", \"0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0\", \"0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0\", \"0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0\"])",
        "countSeniors(details = [\"Name: John Doe, Age: 30, Gender: Male, Seniors: 60\"])",
        "countSeniors(details = [\"08:30\", \"09:45\", \"10:10\", \"11:00\", \"13:00\"])",
        "countSeniors(details = [\"John sent 82 ms to Jane\", \"Mary sent 120 ms to David\"])",
        "countSeniors(details = [\"John sent 123 kg to Jane\", \"Jane sent 456 kg to John\", \"Bob sent 78 kg to Carol\"])",
        "countSeniors(details = [\"101:40-50:30\", \"120:50-60:20\", \"90:20-80:10\"])",
        "countSeniors(details = [\"68px\", \"152mq\", \"93a\", \"18x\"])"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment([1, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minGroupsForValidAssignment([1,2,2,3,3,3,4,4,4,4])",
        "minGroupsForValidAssignment([1,2,2,3,3,3,4,4,4,4])",
        "minGroupsForValidAssignment([1,2,2,3,3,3,4,4,4,4])",
        "minGroupsForValidAssignment([1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment([1, 1, 2, 2, 3, 3])"
    ],
    "sample_257": [
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum(my_list = [1, 2, 3, 4, 5])",
        "minimumSum([3, 4, 2, 1, 5])",
        "minimumSum([1, 3, 5])",
        "minimumSum([1, 3, 1, 5, 4])",
        "minimumSum([4, 2, 3, 7, 1, 5, 6, 8])"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"code\", \"edoc\", \"da\", \"d\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"hello\", \"world\", \"olleh\", \"dlrow\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"def\", \"fed\", \"ihg\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"cc\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"cc\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"na\", \"cb\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"def\", \"ghij\", \"klmno\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"def\", \"ba\", \"fed\", \"ce\"])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s1 = \"1010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"1010101\", k = 2)",
        "shortestBeautifulSubstring(\"101001\", 3)",
        "shortestBeautifulSubstring(\"1010101\", 2)",
        "shortestBeautifulSubstring(\"1010101010101010\", 3)",
        "shortestBeautifulSubstring(s = \"1011011110\", k = 2)",
        "shortestBeautifulSubstring(s = \"10101010101010\", k = 2)",
        "shortestBeautifulSubstring(s1 = \"10110100\", k = 3)",
        "shortestBeautifulSubstring(\"101111001111100\", 4)"
    ],
    "sample_301": [
        "lexicographicallySmallestArray([1, 3, 5], 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5], limit = 2)",
        "lexicographicallySmallestArray([3, 4, 5, 1, 2])",
        "lexicographicallySmallestArray([5, 3, 8, 1, 9], 2)",
        "lexicographicallySmallestArray(nums = [3, 4, 5, 1, 2], limit = 3)",
        "lexicographicallySmallestArray(nums = [3, 1, 4, 2], limit = 2)",
        "lexicographicallySmallestArray([3, 6, 9, 1], 2)",
        "lexicographicallySmallestArray([5, 3, 8, 6, 9], 1)",
        "lexicographicallySmallestArray([3, 5, 2, 8, 4, 7], 1)"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum([[1, 2], [3, 4]])",
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum([[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(my_matrix = [[1, 2], [3, 4]])"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "beautifulSubstrings(s = \"ba\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 4)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"ababa\", k = 2)",
        "beautifulSubstrings(s = \"abae\", k = 5)",
        "beautifulSubstrings(s = \"aeiaaeeiouu\", k = 5)"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"code\", \"edoc\", \"da\", \"d\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"na\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"cc\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"racecar\", \"level\", \"hello\", \"world\"])",
        "maximumNumberOfStringPairs(words = [\"racecar\", \"car\", \"race\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"car\", \"care\", \"arc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\", \"aaa\", \"bbb\", \"aab\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"na\", \"cb\", \"ca\", \"cc\"])"
    ],
    "sample_325": [
        "isFascinating(n = 5)",
        "isFascinating(n = 123)",
        "isFascinating(n = 1)",
        "isFascinating(1)",
        "isFascinating(n = 2)",
        "isFascinating(123)",
        "isFascinating(n = 123)",
        "isFascinating(42)",
        "isFascinating(my_int = 7)",
        "isFascinating(my_int = 97)"
    ],
    "sample_240": [
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([3, 2, 5, 1, 7, 6])"
    ],
    "sample_312": [
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1,2],[3,4]])",
        "matrixSum([[1,2],[3,4]])",
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum([[1,2],[3,4]])",
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum(my_matrix = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(m1 = [[1,2],[3,4]])",
        "matrixSum(my_list = [[1,2],[3,4]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [3, 2, 1])",
        "minOperations(a = [1, 2, 3], b = [3, 2, 1])",
        "minOperations([1, 2, 3], [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(my_list = [1, 2, 3], mx_list = [3, 2, 1])",
        "minOperations(my_list = [1, 2, 3], mx_list = [3, 2, 1])",
        "minOperations(a = [2, 3, 4, 5], b = [1, 3, 4, 5])"
    ],
    "sample_280": [
        "minOperations([1,2,3], [2,3,4])",
        "minOperations(nums1 = [1,2,3], nums2 = [2,3,4])",
        "minOperations(nums1 = [1,2,3], nums2 = [3,4,5])",
        "minOperations([1,2,3], [3,4,5])",
        "minOperations(nums1 = [1,2,3], nums2 = [3,4,5])",
        "minOperations([1,2,3], [1,2,4])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [2,3,4,5,6])",
        "minOperations(nums1 = [2,7,9], nums2 = [1,5,10])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [3, 4, 5, 6, 7])"
    ],
    "sample_243": [
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3])",
        "maximumTripletValue([1, 2, 3])",
        "maximumTripletValue([2, 4, 6, 8])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(\"101010101\", 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s1 = \"1010101\", k = 3)",
        "shortestBeautifulSubstring(s1 = \"1010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"1010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"10101010101\", k = 3)",
        "shortestBeautifulSubstring(\"101010101\", 3)",
        "shortestBeautifulSubstring(s = \"1010101010101010\", k = 3)",
        "shortestBeautifulSubstring('1010101010', 2)",
        "shortestBeautifulSubstring(s = \"1101101111\", k = 3)"
    ],
    "sample_256": [
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([3, 4, 2, 1, 5])",
        "minimumSum([1,2,3,4,5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum(nums = [3,4,-1,1])",
        "minimumSum(nums = [3, 4, 2, 4, 1, 5])",
        "minimumSum(nums = [3, 1, 4, 2, 3])",
        "minimumSum(nums = [3, 2, 4, 6, 1, 5])",
        "minimumSum(nums = [3, 4, 2, 4, 1, 5, 6, 5])",
        "minimumSum([1, 3, 1, 5])"
    ],
    "sample_291": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s1 = \"101\", s2 = \"111\")",
        "minimumSteps(s1 = \"11010\", s2 = \"10110\")",
        "minimumSteps(s1 = \"101\")",
        "minimumSteps(s1 = \"1010\", s2 = \"110011\")",
        "minimumSteps(s1 = \"110101\", s2 = \"101111\")",
        "minimumSteps(s1 = \"1010101\", s2 = \"10101010\")",
        "minimumSteps(s1 = \"1011101\", s2 = \"010101\")",
        "minimumSteps(s1 = \"1011010\", s2 = \"1110010\")",
        "minimumSteps(s1 = \"1100101\", s2 = \"0010111\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 4, 5])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [2, 3, 4, 5])",
        "minOperations([1, 2, 3], [3, 2, 1])",
        "minOperations([1, 2, 3], [4, 5, 6])"
    ],
    "sample_277": [
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [0, 1, 0]])",
        "findChampion(my_grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1,0,1],[0,1,0],[1,0,1]])",
        "findChampion([[1,2,3],[4,0,6],[7,8,9]])"
    ],
    "sample_244": [
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 5, m = 2)"
    ],
    "sample_292": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s1 = \"101\", s2 = \"110\")",
        "minimumSteps(s1 = \"0\", s2 = \"1\")",
        "minimumSteps(s1 = \"101010\", s2 = \"010101\")",
        "minimumSteps(s1 = \"1010\", s2 = \"1110\")",
        "minimumSteps(s1 = \"1010101\", s2 = \"1110001\")",
        "minimumSteps(s1 = \"101010101\", s2 = \"111000111\")",
        "minimumSteps(s1 = \"1010101\", s2 = \"1110010\")",
        "minimumSteps(s1 = \"1010011\", s2 = \"001010\")"
    ],
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 3, 2, 4, 5, 7, 6, 8])",
        "alternatingSubarray([1, 2, 3, 5, 6, 8, 9, 10, 11])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 3, 3, 4, 5, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 6, 8, 9, 10])",
        "alternatingSubarray([1, 2, 3, 5, 7, 8, 9, 10])"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [2, 3], moveTo = [1, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 3, 5], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 3, 2, 4], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles([1, 2, 3, 4, 5], [2, 4], [1, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [0, 3], moveTo = [2, 5])",
        "relocateMarbles(nums = [0, 1, 2, 3, 4, 5, 6, 7], moveFrom = [2, 5, 8], moveTo = [1, 4, 7])"
    ],
    "sample_239": [
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10])"
    ],
    "sample_273": [
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[1,0,1],[0,1,0],[1,0,1]])",
        "findChampion([[0, 0, 0], [0, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[1, 0, 1], [0, 0, 0], [1, 0, 1]])"
    ],
    "sample_267": [
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(my_list = [1, 2, 3], nums2 = [3, 2, 1])",
        "minSum(my_list = [-1, 0, 1], nums2 = [0, -1, 2])"
    ],
    "sample_294": [
        "minimumSteps(s1 = \"101\")",
        "minimumSteps(s1 = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s1 = \"101\")",
        "minimumSteps(s1 = \"101\")",
        "minimumSteps(s1 = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s1 = \"1010101\", s2 = \"1110111\")",
        "minimumSteps(s1 = \"10101\", s2 = \"111\")"
    ],
    "sample_274": [
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion([[1,2,3], [4,5,6], [7,8,9]])",
        "modifyString(\"hello\", 2, \"l\")",
        "numInArray(my_array, 1)"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(my_list = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(my_list = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(my_list = [2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_270": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 0], nums2 = [1, 1, 2])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 3, 4])",
        "minSum(nums1 = [1, 2, 3, 0, 4, 5], nums2 = [1, 2, 3, 0, 4, 5])",
        "minSum(nums1 = [1,2,3], nums2 = [3,4,5])",
        "minSum(nums1 = [0,1,2,0], nums2 = [0,0,1,2])",
        "minSum(nums1 = [1, 0, 1, 1], nums2 = [1, 1, 0, 0])",
        "minSum([-1, 0, 1], [0, -1, 2])",
        "minSum(nums1 = [1, 2, 0, 3, 0], nums2 = [1, 1, 3, 2, 3])",
        "minSum(nums1 = [1, 0, 3, 0, 2], nums2 = [1, 2, 3, 4, 5])"
    ],
    "sample_317": [
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4], money = 5)",
        "buyChoco(prices = [10, 20, 30, 40, 50], money = 100)",
        "buyChoco(prices = [2, 3, 4, 5], money = 7)",
        "buyChoco(my_list = [10, 20, 30], money = 50)",
        "buyChoco(my_list = [1, 2, 3], money = 6)",
        "buyChoco(prices = [2, 3, 1, 4, 5], money = 7)",
        "buyChoco(prices = [10, 20, 30], money = 100)",
        "buyChoco(prices = [2, 5, 10, 1, 3], money = 8)",
        "buyChoco([5, 2, 10, 1], 18)"
    ],
    "sample_296": [
        "beautifulSubstrings(\"banana\", 5)",
        "beautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "beautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "beautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "beautifulSubstrings(s = \"baaeiou\", k = 5)",
        "beautifulSubstrings(\"abacaba\", 7)",
        "beautifulSubstrings(s = \"banana\", k = 3)",
        "beautifulSubstrings(\"aeeiouu\", 5)",
        "beautifulSubstrings(\"abacaba\", 7) => 7",
        "beautifulSubstrings(\"ba\", \"nana\")"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"ababab\")",
        "longestSemiRepetitiveSubstring(\"banana\")",
        "longestSemiRepetitiveSubstring(\"banana\")",
        "longestSemiRepetitiveSubstring(s1 = \"baaab\")",
        "longestSemiRepetitiveSubstring(s1 = \"banana\", s2 = \"nana\")",
        "longestSemiRepetitiveSubstring(s1 = \"baaab\")",
        "longestSemiRepetitiveSubstring(\"abcde\")",
        "longestSemiRepetitiveSubstring(\"abccc\")",
        "longestSemiRepetitiveSubstring(\"abcaaab\")"
    ],
    "sample_341": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 3, y = 5, z = 7)",
        "longestString(3, 5, 7)",
        "longestString(x = 1, y = 3, z = 2)",
        "longestString(x = 3, y = 7, z = 2)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 7, z = 5)",
        "longestString(x = 5, y = 8, z = 3)",
        "longestString(s1 = \"baa\", s2 = \"nnn\", s3 = \"aaa\")"
    ],
    "sample_271": [
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [1,2,3], nums2 = [3,4,5])",
        "minSum(nums1 = [1,2,3], nums2 = [2,3,4])",
        "minSum([0,0,0], [1,1,1])",
        "minSum(nums1 = [1,2,3], nums2 = [-1,2,-3])",
        "minSum(nums1 = [1,2,0,3], nums2 = [4,5,0,6])",
        "minSum(nums1 = [1,2,3], nums2 = [-1,2,-1])",
        "minSum([0,0,0], [0,1,1])",
        "minSum(nums1 = [1,2,0,1], nums2 = [0,1,1,2])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 4])"
    ],
    "sample_340": [
        "longestString(3, 4, 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 5, y = 3, z = 2)",
        "longestString(s1 = \"hello\", s2 = \"world\", s3 = \"python\")",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(s1 = 2, s2 = 3, s3 = 4)",
        "longestString(s1 = \"hello\", s2 = \"world\", s3 = \"hi\")",
        "longestString(x = 5, y = 7, z = 3)",
        "longestString(x = 5, y = 10, z = 15)"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"ababab\", k = 2)",
        "shortestBeautifulSubstring(s1 = \"baa\", k = 2)",
        "shortestBeautifulSubstring(s1 = \"baab\", k = 2)",
        "shortestBeautifulSubstring(\"ababab\", 2)",
        "shortestBeautifulSubstring(s1 = \"baaab\", k = 2)",
        "shortestBeautifulSubstring(s1 = \"ba\", k = 2)",
        "shortestBeautifulSubstring(s = \"ba\", k = 2)",
        "shortestBeautifulSubstring(s = \"abacabadabacaba\", k = 3)",
        "shortestBeautifulSubstring(s = \"abcbadef\", k = 5)",
        "shortestBeautifulSubstring(\"abcde\", k = 1)"
    ],
    "sample_324": [
        "isFascinating(n = 5)",
        "isFascinating(123456789)",
        "isFascinating(my_int = 42)",
        "isFascinating(my_int = 42)",
        "isFascinating(42)",
        "isFascinating(n = 7)",
        "isFascinating(my_int = 123)",
        "isFascinating(42)",
        "isFascinating(123)",
        "isFascinating(n = 10)"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum(nums = [3, 4, 5, 6, 7])",
        "minimumSum([1, 2, 3])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum(nums = [3, 4, 5, 1, 2])"
    ],
    "sample_268": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [5, 6, 7, 8])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 4, 5])",
        "minSum(my_list = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 4, 5])",
        "minSum(nums1 = [1,2,0,3], nums2 = [3,2,0,1])",
        "minSum(nums1 = [1, 2, 0, 3], nums2 = [2, 3, 0, 4])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(\"abc\", \"def\", \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"ca\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghij\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcde\", s3 = \"cdef\")",
        "findMinimumOperations(\"abcde\", \"bcdea\", \"abdea\")",
        "findMinimumOperations(\"abcde\", \"bcdea\", \"bcade\")",
        "findMinimumOperations(\"abcde\", \"bcdea\", \"xyzabc\")",
        "findMinimumOperations(\"abc\", \"bcd\", \"cde\")"
    ],
    "sample_321": [
        "maxStrength([1, 2, 3, 4, 5])",
        "maxStrength([1, -2, 3, -4, 5])",
        "maxStrength([1, -2, 3, -4, 5])",
        "maxStrength([1, 2, -3, 4])",
        "maxStrength([1, -2, 3, -4, 5, -6, 7, -8, 9])",
        "maxStrength(my_list = [1, -2, 3, -4, 5])",
        "maxStrength(nums = [-1, 2, -3, 4, -5, 6, -7, 8, -9, 10])",
        "maxStrength([-1, -2, -3, -4, -5])",
        "maxStrength(nums = [1, -2, 3, 4, -5, 6])",
        "maxStrength([1, 2, 3])"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [2, 3], moveTo = [1, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [3, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [3, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4, 6], moveTo = [1, 3, 5])",
        "relocateMarbles(my_list = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [3, 5])",
        "relocateMarbles([1, 2, 3, 4, 5], [2, 4], [1, 5])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6], moveFrom = [2, 4], moveTo = [1, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [3, 4, 5, 6], moveTo = [7, 8, 9, 10])"
    ],
    "sample_357": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveFrom = [1, 3, 5, 7], moveTo = [2, 4, 6, 8])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [3,4], moveTo = [1,2])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9], moveFrom = [2,4,6], moveTo = [1,3,5])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [2,4], moveTo = [1,3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [0, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 5, 7], moveTo = [8, 2, 6])",
        "relocateMarbles([1,2,3,4,5,6,7,8,9], [5,6], [8,9])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [2, 5, 8], moveTo = [5, 6, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveFrom = [1, 2, 3, 5, 7], moveTo = [4, 6, 8, 9, 10])",
        "relocateMarbles(my_list = [5, 6, 8, 9, 3, 7, 4, 2, 1, 0], moveFrom = [5, 6, 8, 9], moveTo = [0, 1, 2, 3, 4])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 8)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 8)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 8)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 8)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco([1, 2, 3], 7)"
    ],
    "sample_308": [
        "matrixSum([[1,2],[3,4]])",
        "matrixSum([[1,2],[3,4]])",
        "matrixSum([[1,2],[3,4]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(matrix = [[1, 2], [3, 4]])",
        "matrixSum(matrix = [[1, 2], [3, 4]])",
        "matrixSum(nums = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n])",
        "matrixSum(my_matrix = [[1, 2], [3, 4]])",
        "matrixSum([[1, 2], [3, 4]])"
    ],
    "sample_319": [
        "buyChoco(my_list = [1, 2, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 8)",
        "buyChoco(prices = [1, 2, 5], money = 4)",
        "buyChoco(prices = [1, 2, 5], money = 10)",
        "buyChoco(prices = [1, 2, 5], money = 5)",
        "buyChoco(prices = [1, 5, 10], money = 8)",
        "buyChoco(my_list = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [2, 7, 5, 10], money = 11)",
        "buyChoco([1, 2, 3], 4)"
    ],
    "sample_259": [
        "minimumSum([1,2,3,4,5])",
        "minimumSum([1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [4,2,3,1,5])",
        "minimumSum([1,2,3,4,5])",
        "minimumSum(nums = [4,2,5,1,3])",
        "minimumSum([3,4,5,1,2])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [4,2,5,1,3])",
        "minimumSum(nums = [1,2,3,4,5,6,7,8,9,10])"
    ],
    "sample_351": [
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5, 6])",
        "alternatingSubarray([1, 2, 3, 4, 5, 6])",
        "alternatingSubarray([1, 2, 3, 4, 5, 6])",
        "alternatingSubarray([1, 2, 3, 5, 4, 6, 7, 8])",
        "alternatingSubarray([1, 2, 3, 5, 4, 6, 7])",
        "alternatingSubarray(nums = [1, 3, 2, 4, 5, 6, 7])",
        "alternatingSubarray([1, 3, 2, 4, 6, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5, 6])"
    ],
    "sample_311": [
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1,2],[3,4]])",
        "matrixSum([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(matrix = [[1, 2], [3, 4]])",
        "matrixSum(my_list = [[1, 2], [3, 4]])"
    ],
    "sample_316": [
        "buyChoco([1, 2, 3], 5)",
        "buyChoco([1, 2, 3], 5)",
        "buyChoco([10, 20, 30], 50)",
        "buyChoco(a = [1, 2, 5], money = 10)",
        "buyChoco([1, 2, 3], 4)",
        "buyChoco(a = [1, 2, 5], money = 6)",
        "buyChoco(a = [1, 2, 5], money = 7)",
        "buyChoco([1, 2, 5], 10)",
        "buyChoco([1, 2, 3], 5)",
        "buyChoco(my_list = [2, 5, 10], money = 20)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment([1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment([1,2,3,4,5,6,7,8,9,10])"
    ],
    "sample_276": [
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1,2,3],[4,5,6],[7,8,9]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [[1,2,3],[4,5,6],[7,8,9]])",
        "findChampion([[0, 0, 0], [1, 1, 1], [0, 0, 0]])"
    ],
    "sample_320": [
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, -2, 4])",
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 4, 5, 6])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"nn\", \"aa\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"an\", \"na\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"nn\", \"baa\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"nn\", \"aa\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"defg\", \"hijk\", \"lmno\", \"pqrs\", \"tuv\", \"wxyz\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"a\", \"n\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\", \"adg\", \"beh\", \"cfi\", \"aei\", \"cei\", \"aeg\"])"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(\"abc\", \"def\", \"ghi\")",
        "findMinimumOperations(\"abc\", \"def\", \"ghi\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcde\", s3 = \"cdef\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcda\", s3 = \"cdab\")",
        "findMinimumOperations(\"abcde\", \"bcdef\", \"cdefg\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"nana\", s3 = \"nan\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcda\", s3 = \"cdaab\")"
    ],
    "sample_347": [
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 3, 2, 4, 5, 7, 6, 8, 9])",
        "alternatingSubarray(nums = [1, 3, 2, 4, 5, 3, 1])",
        "alternatingSubarray([1, 2, 3, 4, 5])"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2], [3, 4]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion([[1,0,1],[0,1,0],[1,0,1]])",
        "findChampion(grid = [[1,2,3],[4,5,6],[7,8,9]])",
        "findChampion([[1,0,0], [0,1,0], [0,0,1]])"
    ],
    "sample_304": [
        "countSeniors(details = [\"John Smith, 35, Male\", \"Jane Doe, 42, Female\"])",
        "countSeniors(details = [\"John Smith - 35 years old\", \"Jane Doe - 42 years old\"])",
        "countSeniors(details = [\"123 Main St, Anytown, USA 12345\", \"John Smith, Anytown, USA 67890\"])",
        "countSeniors(details = [\"S1: 90-100\", \"S2: 80-89\", \"S3: 70-79\"])",
        "countSeniors(details = [\"12:30\", \"45:15\", \"90:45\", \"15:00\"])",
        "countSeniors(details = [\"John sent 72 inches to Jane\", \"Mary received 60 inches from a child\"])",
        "countSeniors(details = [\"10:00-11:00 60:00\", \"13:00-14:00 80:00\", \"15:00-16:00 90:00\"])",
        "countSeniors(details = [\"88:99\", \"70:59\", \"91:11\", \"75:58\"])",
        "countSeniors(details = [\"81-120 23:59:59|81-120 23:59:59|81-120 23:59:59\"])",
        "countSeniors(details = [\"C 11 31\", \"D 62 85\", \"G 72 76\", \"B 99 68\"])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"abcb\", k = 2)",
        "beautifulSubstrings(s = \"ababab\", k = 2)",
        "beautifulSubstrings(s = \"ababab\", k = 2)",
        "beautifulSubstrings(s = \"ababab\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s1 = \"ababab\", k = 2)",
        "beautifulSubstrings(s = \"baaab\", k = 3)",
        "beautifulSubstrings(s = \"abcbdbbdae\", k = 3)",
        "beautifulSubstrings(s1 = \"baa\", s2 = \"nana\")"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"1010101\", k = 3)",
        "shortestBeautifulSubstring(s1 = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"10101010101010\", k = 3)",
        "shortestBeautifulSubstring(s1 = \"1010101\", k = 2)",
        "shortestBeautifulSubstring(s1 = \"101010101\", k = 2)",
        "shortestBeautifulSubstring(\"101101\", 2)",
        "shortestBeautifulSubstring(\"10101010101010\")",
        "shortestBeautifulSubstring(\"1010101010101010101010101010101010101010101010101010101010\", k = 1)"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghij\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"defg\", \"hijk\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"bc\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"an\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"ab\", \"bc\", \"cb\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"nana\", \"na\", \"nan\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"defg\", \"hijk\", \"lmnoo\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"nana\", \"a\", \"n\"])"
    ],
    "sample_327": [
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 123)",
        "isFascinating(my_int = 123456789)",
        "isFascinating(123456789)",
        "isFascinating(my_int = 42)",
        "isFascinating(5)",
        "isFascinating(7)",
        "isFascinating(my_number = 3)",
        "isFascinating(1)"
    ],
    "sample_309": [
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1,2],[3,4]])",
        "matrixSum([[1, 2], [3, 4], [5, 6]])",
        "matrixSum(matrix = [[1, 2], [3, 4]])",
        "matrixSum(matrix = [[1, 2], [3, 4]])",
        "matrixSum([[1, 2, 3], [4, 5, 6], [7, 8, 9]])"
    ],
    "sample_326": [
        "isFascinating(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isFascinating(n = 1234)",
        "isFascinating(n = 1234)",
        "isFascinating(n = 10)",
        "isFascinating(n = 10)",
        "isFascinating(n = 123)",
        "isFascinating(1234)",
        "isFascinating(n = 0)",
        "isFascinating(my_list = [1, 2, 3])",
        "isFascinating(my_int = 1234)"
    ],
    "sample_275": [
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [1, 1, 0], [0, 1, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 0, 1], [1, 1, 0], [0, 1, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 1], [1, 1, 1]])",
        "findChampion([[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[1, 2, 3], [4, 0, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 1, 1], [0, 1, 1], [1, 0, 1]])"
    ],
    "sample_260": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum([3, 2, 4, 1, 5])",
        "minimumSum(nums = [3, 4, 5, 1])"
    ],
    "sample_322": [
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isFascinating(my_list = [1, 2, 3])",
        "isFascinating(12)",
        "isFascinating(n = 7)",
        "isFascinating(42)",
        "isFascinating(123)"
    ],
    "sample_248": [
        "minOperations(s1 = \"101\", s2 = \"011\", x = 2)",
        "minOperations(\"1011\", \"0101\", 1)",
        "minOperations(\"1010\", \"0101\", 1)",
        "minOperations(\"1010\", \"0101\", 2)",
        "minOperations(s1 = \"101\", s2 = \"111\", x = 1)",
        "minOperations(\"1011\", \"1101\", 2)",
        "minOperations(\"1010\", \"0110\", 2)",
        "minOperations(\"10100\", \"01010\", 2)",
        "minOperations(s1 = \"1010101\", s2 = \"1010110\", x = 1)",
        "minOperations(\"1010101\", \"1010101\", 2)"
    ],
    "sample_342": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 5, y = 5, z = 5)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 4, y = 5, z = 6)",
        "longestString(x = \"hello\", y = \"world\", z = \"hi\")",
        "longestString(x = 3, y = 5, z = 7)",
        "longestString(x = 5, y = 5, z = 5)"
    ],
    "sample_354": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 4, 6], moveTo = [1, 3, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [2, 3], moveTo = [1, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [3, 5])",
        "relocateMarbles(my_list = [1, 2, 3, 4, 5], moveFrom = [1, 3, 5], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 3, 5], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 2], moveTo = [5, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [3, 6, 9], moveTo = [2, 5, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveFrom = [5, 6, 7], moveTo = [2, 4, 8])",
        "relocateMarbles(my_list = [1, 2, 3, 4], moveFrom = [2, 4], moveTo = [5, 6])"
    ],
    "sample_306": [
        "countSeniors(details = [\"John (31)\", \"Jane (45)\", \"Bob (60)\"])",
        "countSeniors(details = [\"John (35) years old\", \"Jane (62) years old\"])",
        "countSeniors(details = [\"John 30 years old\", \"Jane 45 years old\", \"Bob 60 years old\"])",
        "countSeniors(details = [\"John 30\", \"Jane 45\", \"Bob 60\"])",
        "countSeniors(details = [\"John Smith (50)\", \"Jane Doe (70)\", \"Bob Johnson (30)\"])",
        "countSeniors(details = [\"John Smith is 30 years old\", \"Jane Doe is 40 years old\", \"Bob Johnson is 50 years old\"])",
        "countSeniors(details = [\"John: 25\", \"Jane: 60\", \"Bob: 45\", \"Alice: 55\"])",
        "countSeniors(details = [\"John Smith is 60 years old\", \"Jane Doe is 55 years old\"])",
        "countSeniors(details = [\"John is 30 years old\", \"Mary is 50 years old\", \"Bob is 20 years old\"])",
        "countSeniors(details = [\"John has 2 dogs and 1 cat\", \"Mary has 1 dog and 0 cats\", \"Bob has 1 dog and 1 cat\"])"
    ],
    "sample_303": [
        "countSeniors(details = [\"John Smith is 25 years old\", \"Jane Doe is 60 years old\"])",
        "countSeniors(details = [\"John Smith, 35\", \"Jane Doe, 42\", \"Bob Johnson, 60\"])",
        "countSeniors(details = [\"John has 30 siblings\", \"Mary is 40 years old\"])",
        "countSeniors(details = [\"John Smith is 45 years old\", \"Mary Johnson is 70 years old\"])",
        "countSeniors(details = [\"5 years 10 months ago\", \"2 years 5 months ago\"])",
        "countSeniors(my_list = [\"Johnsenior123\", \"Janesenior456\"])",
        "countSeniors(details = [\"John's age is 25.\", \"Mary's age is 80.\"])",
        "countSeniors(details = [\"John has 30 years of age\", \"Jane's income is $50,000\"])",
        "countSeniors(details = [\"John's child is 60 years old\", \"He is still young\"])",
        "countSeniors(details = [\"John has 2 legs and 4 legs\", \"Mary has 5 legs\", \"Jack has 10 legs\"])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [3, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveFrom = [2, 5, 8], moveTo = [6, 9])",
        "relocateMarbles(my_list = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [5, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [5, 7])",
        "relocateMarbles(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveFrom = [2, 4, 6], moveTo = [8, 10, 12])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3, 5, 7], moveTo = [2, 4, 6, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [3, 1, 4, 2], moveTo = [1, 4, 2, 3])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [2, 3], moveTo = [4, 0])",
        "relocateMarbles(my_nums = [5, 6, 8, 9], moveFrom = [2, 3, 7, 10], moveTo = [9, 2, 10, 5])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(\"abc\", \"def\", \"ghi\")",
        "findMinimumOperations(\"abc\", \"def\", \"ghi\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"ca\")",
        "findMinimumOperations(\"abc\", \"abd\", \"abc\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"a\", s3 = \"a\")",
        "findMinimumOperations(\"abc\", \"ab\", \"ab\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"ab\", s3 = \"c\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(\"abc\", \"def\", \"ghi\")",
        "findMinimumOperations(\"abc\", \"def\", \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcda\", s3 = \"cdab\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcde\", s3 = \"cdef\")",
        "findMinimumOperations(\"abc\", \"def\", \"ghi\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcde\", s3 = \"cdef\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghij\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"cd\")"
    ],
    "sample_407": [
        "minimumRightShifts([4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts([4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts(my_list = [3, 4, 5, 1, 2])",
        "minimumRightShifts([4, 5, 6, 7, 1, 2, 3])",
        "minimumRightShifts(nums = [1,3,4,5,6])",
        "minimumRightShifts(nums = [1,3,4,1,2])",
        "minimumRightShifts(my_list = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [1,3,2,4,5])",
        "minimumRightShifts([3,4,1,2])",
        "minimumRightShifts(my_list = [1,3,4,5,6,7])"
    ],
    "sample_453": [
        "minChanges(s1 = \"abccba\")",
        "minChanges(\"aabbcc\")",
        "minChanges(s1 = \"aabbcc\")",
        "minChanges(\"hello\")",
        "minChanges(s = \"abccba\")",
        "minChanges(s1 = \"aba\", s2 = \"aab\")",
        "minChanges(\"ababab\")",
        "minChanges(s1 = \"baaab\", s2 = \"aaabaa\")",
        "minChanges(\"abba\")",
        "minChanges(s1 = \"abcde\", s2 = \"aabccde\")"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 7)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 8)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 10)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 5)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 5)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 9)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 15)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5, 6, 7, 8, 9], 10)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 12)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 5)"
    ],
    "sample_367": [
        "sortVowels(\"hello world\")",
        "sortVowels(\"Hello, World!\")",
        "sortVowels(\"Hello, World!\")",
        "sortVowels(\"Hello, World!\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(\"Hello, world!\")",
        "sortVowels(s1 = \"hello world\")",
        "sortVowels(s1 = \"hello world\")",
        "sortVowels(my_string = \"hello world\")",
        "sortVowels(my_str = \"hello world\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 7)",
        "lengthOfLongestSubsequence([1, 2, 3, 1, 2, 3, 4, 5], 5)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 5)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5)",
        "lengthOfLongestSubsequence(my_list = [1, 2, 3, 4, 5], target = 7)",
        "lengthOfLongestSubsequence([1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])"
    ],
    "sample_381": [
        "countPairs([1,2,3,4,5], 6)",
        "countPairs(nums = [1, 2, 3, 4], t = 5)",
        "countPairs(nums = [1, 2, 3, 4], t = 5)",
        "countPairs(my_list = [1, 2, 3, 4, 5], t = 6)",
        "countPairs(my_list = [1, 2, 3, 4, 5], t = 6)",
        "countPairs(nums = [1,2,3,4,5], t = 8)",
        "countPairs([1,2,3,4,5], 5)",
        "countPairs([1, 2, 3, 4, 5], 6)",
        "countPairs([1, 2, 3, 4, 5], 5)",
        "countPairs(my_list = [1, 2, 3, 4, 5], t = 10)"
    ],
    "sample_366": [
        "isGood([1, 2, 3])",
        "isGood(my_list = [1, 2, 3])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4])",
        "isGood([1, 2, 3])",
        "isGood(my_list = [1, 2, 3])",
        "isGood([1, 3, 5])",
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1, 3, 5])"
    ],
    "sample_369": [
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(s1 = \"baa\", s2 = \"nna\")",
        "sortVowels(s = \"banana\")",
        "sortVowels(\"banana\")",
        "sortVowels('hello world')",
        "sortVowels(\"hello world\")",
        "sortVowels(s1 = \"baa\", s2 = \"nna\")",
        "sortVowels(\"hello world\")",
        "sortVowels(s = \"Hello, world!\")"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts([3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [4, 5, 6, 7, 1, 2, 3])",
        "minimumRightShifts([4, 5, 6, 7, 1, 2, 3])",
        "minimumRightShifts(nums = [1, 3, 5, 4, 2])",
        "minimumRightShifts([4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts(nums = [1, 3, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8])",
        "minimumRightShifts(nums = [1, 3, 4, 5, 6, 7, 8])"
    ],
    "sample_448": [
        "minChanges(s1 = \"ab\", s2 = \"ba\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(s1 = \"aa\", s2 = \"bb\")",
        "minChanges(s1 = \"ab\", s2 = \"ba\")",
        "minChanges(\"aabbc\")",
        "minChanges(\"abc\")",
        "minChanges(\"abc\")",
        "minChanges(s1 = \"abccba\")",
        "minChanges(\"abc\")",
        "minChanges(\"abcde\")"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nn\")",
        "canBeEqual(s1 = \"ba\", s2 = \"na\")",
        "canBeEqual(s1 = \"aaa\", s2 = \"aab\")",
        "canBeEqual(s1 = \"aabb\", s2 = \"ccdd\")"
    ],
    "sample_409": [
        "minLengthAfterRemovals([1,2,3,4,5])",
        "minLengthAfterRemovals([1,2,3,4,5])",
        "minLengthAfterRemovals([1,2,3,4,5])",
        "minLengthAfterRemovals(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals([1,2,3,4,5,6,7,8,9,10])",
        "minLengthAfterRemovals(my_list = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(my_list = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minLengthAfterRemovals(my_list = [1, 2, 2, 3, 3, 3, 4, 4, 5, 5])",
        "minLengthAfterRemovals(my_list = [1,2,2,3,3,3,4,4,5,5])"
    ],
    "sample_361": [
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood(my_list = [1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4])",
        "isGood([1, 2, 3, 4])",
        "isGood(a = [1, 2, 3, 4])"
    ],
    "sample_419": [
        "minOperations([1,2,3,4,5], 3)",
        "minOperations([1,2,3,4,5], 3)",
        "minOperations([1,2,3,4,5], 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(my_list = [1,2,3,4,5], k = 3)",
        "minOperations(my_list = [1,2,3,4,5], k = 3)",
        "minOperations([1,2,3,4,5,6,7,8,9], 3)",
        "minOperations(my_list = [1,2,3,4,5], k = 2)"
    ],
    "sample_478": [
        "findMaximumLength([1,2,3,4,5])",
        "findMaximumLength([1,2,3,4,5])",
        "findMaximumLength([1,2,3,4,5])",
        "findMaximumLength(nums = [1,2,3,4,5])",
        "findMaximumLength([1,2,3,4,5,6,7,8,9,10])",
        "findMaximumLength([1,2,3,4,5])",
        "findMaximumLength([1,2,3,4,5])",
        "findMaximumLength(my_list = [1,2,3,4,5])",
        "findMaximumLength([1,2,3,4,5,6,7,8,9,10])",
        "findMaximumLength([1,2,3,4,5])"
    ],
    "sample_433": [
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 3, 5, 7, 9])",
        "maxSubarrays(nums = [1, 3, 2, 4, 3, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays(my_list = [1, 3, 12, 7])"
    ],
    "sample_389": [
        "canMakeSubsequence(\"abc\", \"def\")",
        "canMakeSubsequence(\"abc\", \"def\")",
        "canMakeSubsequence(\"abcde\", \"ace\")",
        "canMakeSubsequence(my_str1 = \"abc\", my_str2 = \"def\")",
        "canMakeSubsequence(\"ab\", \"bc\")",
        "canMakeSubsequence(\"abcd\", \"ace\")",
        "canMakeSubsequence(\"hello\", \"world\")",
        "canMakeSubsequence(\"abc\", \"abdc\")",
        "canMakeSubsequence(my_str1 = \"abcd\", my_str2 = \"acbd\")",
        "canMakeSubsequence(\"banana\", \"app\")"
    ],
    "sample_402": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum([1,2,3,4,5], 3, 2)",
        "maxSum([1,2,3,4,5], 3, 2)",
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 2)",
        "maxSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 5)",
        "maxSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"l\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"l\")"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"curr\", \"next\", \"prev\", \"curr\", \"next\", \"prev\", \"curr\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"curr\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"4\", \"prev\", \"5\", \"6\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"4\", \"prev\", \"5\", \"prev\", \"prev\", \"6\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"curr\", \"next\", \"next\", \"prev\", \"prev\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"next\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"current\", \"previous\", \"next\", \"previous\", \"current\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\", \"4\", \"5\", \"6\"])",
        "lastVisitedIntegers(words = [\"first\", \"second\", \"third\", \"prev\", \"next\", \"prev\", \"prev\", \"prev\"])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations([1, 2, 3, 4, 5], 3)",
        "minOperations([1, 2, 3, 4, 5], 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)",
        "minOperations(nums = [2, 3, 4, 5, 6, 7, 8, 9], k = 3)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(my_list = [1, 2, 3, 4, 5], k = 3)",
        "minOperations([1, 2, 3, 4, 5], 5)",
        "minOperations([1, 3, 5], 3)",
        "minOperations(nums = [4, 5, 2, 1, 3], k = 3)"
    ],
    "sample_375": [
        "minimumSeconds([1, 2, 3, 4, 5])",
        "minimumSeconds([1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds([1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds([1, 2, 3, 4, 5])",
        "minimumSeconds(my_list = [1,2,3,4,5])",
        "minimumSeconds([1,2,2,3,3,3])",
        "minimumSeconds([1, 2, 2, 3, 4, 4, 4, 5, 5])",
        "minimumSeconds(nums = [2, 3, 1, 2, 1, 7, 7, 7, 7, 7])",
        "minimumSeconds(nums = [1,2,2,3,4,4,5,5,5,5,6,6])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [2, 7, 11, 15], target = 9)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(my_list = [1, 2, 3, 4, 5], target = 7)",
        "countPairs([1, 2, 3, 4, 5], 5)",
        "countPairs([1, 2, 3, 4], 5)",
        "countPairs([1, 2, 3], 4)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 10)"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"foo\", \"bar\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"foo\", \"bar\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"l\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"foo\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"y\")",
        "findWordsContaining(words = [\"hello world\", \"foo bar\", \"baz\", \"qux\"], \"o\")"
    ],
    "sample_372": [
        "sortVowels(\"hello world\")",
        "sortVowels(s1 = \"ba\")",
        "sortVowels(s1 = \"ba\")",
        "sortVowels(\"hello world\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels('Hello, World!')",
        "sortVowels(s = \"banana\")",
        "sortVowels(my_str = \"hello world\")",
        "sortVowels(s1 = \"baa\", s2 = \"nnaa\")",
        "sortVowels(my_string = \"Hello, world!\")"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals([1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(my_list = [1, 2, 2, 3, 3, 3, 4, 4, 5])",
        "minLengthAfterRemovals([1, 2, 2, 3, 3, 3, 4, 4, 5])",
        "minLengthAfterRemovals([1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 5, 5, 6, 6, 7, 7, 7, 7, 8, 8, 9])"
    ],
    "sample_452": [
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(\"aabbc\")",
        "minChanges(\"hello\")",
        "minChanges(s1 = \"abccba\")",
        "minChanges(s = \"abccba\")",
        "minChanges(s = \"hello\")",
        "minChanges(s = \"aba\")",
        "minChanges(\"aabba\")",
        "minChanges(s = \"ababab\")"
    ],
    "sample_385": [
        "countPairs([1, 2, 3, 4, 5], 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [2, 7, 11, 15], target = 9)",
        "countPairs([1, 2, 3, 4], 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs([1,2,3,4,5], 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)"
    ],
    "sample_427": [
        "minOperations([1, 2, 3, 4, 5, 6])",
        "minOperations([1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations([1,2,3,4,5,6])",
        "minOperations([1,2,3,4,5,6,7,8,9])",
        "minOperations([1, 2, 4, 8])",
        "minOperations([1, 3, 2, 3, 1, 1])",
        "minOperations([2, 3, 4, 9])",
        "minOperations([1, 3, 5])"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(my_list = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals([1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(my_list = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minLengthAfterRemovals([1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(my_list = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9])"
    ],
    "sample_472": [
        "minimumCoins([1, 2, 3, 4, 5])",
        "minimumCoins([1, 2, 3, 4, 5])",
        "minimumCoins(prices = [7, 1, 5, 3, 6, 4])",
        "minimumCoins(prices = [7, 1, 5, 3, 6, 4])",
        "minimumCoins(prices = [7, 1, 5, 3, 6, 4])",
        "minimumCoins([2, 7, 9, 3, 1])",
        "minimumCoins([2, 7, 9, 3, 1])",
        "minimumCoins([2, 3, 4, 5, 6])",
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins(prices = [2, 3, 1, 1, 5])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello world\", \"hi there\", \"how are you\"], x = \"hi\")"
    ],
    "sample_420": [
        "minOperations([1, 2, 3, 4, 5], 3)",
        "minOperations([1, 2, 3, 4, 5], 3)",
        "minOperations([1, 2, 3, 4, 5], 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations([1, 2, 3, 4, 5], 3)",
        "minOperations([3, 1, 4, 2, 5], 3)",
        "minOperations([2, 2, 1, 1, 1], 2)"
    ],
    "sample_362": [
        "isGood([1, 2, 3])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3])",
        "isGood([1, 2, 3])",
        "isGood(my_list = [1, 2, 3])",
        "isGood([1,2,3,4])",
        "isGood([1,2,3,4,5])",
        "isGood(my_list = [1, 2, 3, 4])",
        "isGood(my_list = [1,2,3,4,5])",
        "isGood(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 7)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 7)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 8)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 8)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 5)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7], target = 8)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9], target = 12)",
        "lengthOfLongestSubsequence(nums = [1,3,4,5,9,12,13,15,18], target = 15)"
    ],
    "sample_365": [
        "isGood([1,2,3])",
        "isGood([1,2,3])",
        "isGood([1,2,3,4,5])",
        "isGood([1,2,3,4,5])",
        "isGood([1,2,3,4,5])",
        "isGood([1,2,3,4,5])",
        "isGood([1, 2, 3])",
        "isGood([1,2,3])",
        "isGood([1,2,3])",
        "isGood([1,2,3,4])"
    ],
    "sample_434": [
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [-2, -3, 4, -1, -2, 1, 5, -3])",
        "maxSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "maxSubarrays(nums = [1, 2, 3, 1, 2])",
        "maxSubarrays([1, 2, -2, 4, -4])",
        "maxSubarrays([1,2,3,4,5,6,7,8,9,10])",
        "maxSubarrays(nums = [1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence([1,2,3,4,5], 7)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 7)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 8)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 9)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 9)",
        "lengthOfLongestSubsequence([1,2,3,4,5,6,7,8,9,10], 10)",
        "lengthOfLongestSubsequence(nums = [4,4,5,6,7], target = 7)",
        "lengthOfLongestSubsequence([1,3,4,9,10,11,12,15,18,19], 20)",
        "lengthOfLongestSubsequence(my_list = [-2,-3,4,1,-1,2,1,-3,4,-2])"
    ],
    "sample_450": [
        "minChanges(s1 = \"abccba\")",
        "minChanges(s = \"aabbc\")",
        "minChanges(s1 = \"aabbbcc\")",
        "minChanges(s1 = \"aaa\", s2 = \"aa\")",
        "minChanges(s1 = \"ba\", s2 = \"naa\")",
        "minChanges(s1 = \"baabccba\")",
        "minChanges(s1 = \"baab\", s2 = \"aaab\")",
        "minChanges(s1 = \"baaabbbcc\")",
        "minChanges(\"aaabbbccc\")",
        "minChanges(s1 = \"aaabbbccc\")"
    ],
    "sample_463": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 8, limit = 4)"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts([1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts([1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(my_list = [1, 2, 3, 4, 5])"
    ],
    "sample_449": [
        "minChanges(\"hello\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(s1 = \"ab\", s2 = \"ba\")",
        "minChanges(s1 = \"abcde\", s2 = \"edcba\")",
        "minChanges(\"hello\")",
        "minChanges(s1 = \"ababab\")",
        "minChanges(s = \"abccba\")",
        "minChanges(s1 = \"baa\", s2 = \"nna\")",
        "minChanges(s1 = \"aaa\")",
        "minChanges(s1 = \"baaabb\")"
    ],
    "sample_425": [
        "minOperations(nums = [1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3])",
        "minOperations([1, 2, 2, 3, 3, 3])",
        "minOperations([1, 2, 2, 3, 3, 3])",
        "minOperations([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations([1, 1, 2, 1, 1])"
    ],
    "sample_386": [
        "canMakeSubsequence('az', 'za')",
        "canMakeSubsequence('abcz', 'abc')",
        "canMakeSubsequence(\"az\", \"za\")",
        "canMakeSubsequence(my_str1 = \"az\", my_str2 = \"za\")",
        "canMakeSubsequence('az', 'za')",
        "canMakeSubsequence('abc', 'abd')",
        "canMakeSubsequence(my_str1 = \"az\", my_str2 = \"zaa\")",
        "canMakeSubsequence('zaaaz', 'azzaa')",
        "canMakeSubsequence(str1 = \"zaaaz\", str2 = \"abaz\")",
        "canMakeSubsequence(\"a\", \"za\")"
    ],
    "sample_377": [
        "minimumSeconds([1,2,3,4,5])",
        "minimumSeconds([1,2,3,4,5])",
        "minimumSeconds([1,2,3,4,5])",
        "minimumSeconds([1,2,3,4,5])",
        "minimumSeconds([1,2,3,4,5])",
        "minimumSeconds([1,2,3,4,5])",
        "minimumSeconds([1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds([1,1,2,2,3,3,4,4])",
        "minimumSeconds([1,2,3,4,5])",
        "minimumSeconds(my_list = [4, 4, 4, 2, 2, 1])"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence([1,2,3,4,5], 7)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 7)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 7)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,1], target = 4)",
        "lengthOfLongestSubsequence([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], 5)",
        "lengthOfLongestSubsequence([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], 50)",
        "lengthOfLongestSubsequence(my_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])"
    ],
    "sample_370": [
        "sortVowels(\"banana\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(\"banana\")",
        "sortVowels(\"banana\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(\"hello world\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"banana\")"
    ],
    "sample_421": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations([1, 2, 3, 4, 5], 3)",
        "minOperations([1, 2, 3, 4, 5], 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(my_list = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7], k = 5)",
        "minOperations([2, 3, 4, 5, 6], 3)"
    ],
    "sample_430": [
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [-2, -3, 4, -1, -2, 1, 5, -3])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays([1, 2, 3, 4, 5, 6])",
        "maxSubarrays([1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8])"
    ],
    "sample_415": [
        "countPairs([[0, 0], [1, 1], [2, 2]], 3)",
        "countPairs([[0, 0], [1, 1], [2, 2]], 2)",
        "countPairs([[0, 0], [0, 1], [1, 0], [1, 1]], 1)",
        "countPairs(coordinates = [[1, 2], [2, 3], [3, 4]], k = 5)",
        "countPairs([[0, 0], [1, 1], [2, 2], [3, 3]], 3)",
        "countPairs([[0, 0], [1, 1], [2, 2], [3, 3]], 3)",
        "countPairs([[0, 0], [0, 1], [1, 0], [1, 1]], 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [3, 3]], k = 2)",
        "countPairs([[1, 2], [2, 3], [3, 4]], 2)",
        "countPairs([[0,0],[1,1],[2,2]], 0)"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 8)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 8)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 8)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5, 6, 7, 8, 9], 10)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 5)"
    ],
    "sample_445": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1,2,3,4,5,6,7,8,9,10])",
        "sumCounts(nums = [1,2,3,4,5,6,7,8,9,10])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(my_list = [1, 2, 3, 4])",
        "sumCounts(nums = [1,2,2,3,3,3])",
        "sumCounts(nums = [1, 2, 3])"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(\"ababab\")",
        "minimumBeautifulSubstrings(s = \"abcde\")",
        "minimumBeautifulSubstrings(s = \"abcabcabc\")",
        "minimumBeautifulSubstrings(s1 = \"ababab\")"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 3, 2, 4, 5, 7, 6, 8])",
        "maxSubarrays([1, 3, 2, 4, 5, 7, 2, 6, 8])",
        "maxSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays([1, 2, 3, 4, 5])"
    ],
    "sample_401": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum([1, 2, 3, 4, 5], 3, 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum([1, 2, 3, 4, 5], 3, 2)",
        "maxSum([1, 2, 3, 4, 5], 3, 4)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum([1, 2, 3, 4, 5], 3, 2)",
        "maxSum([1, 2, 3, 4, 5], 3, 2)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6], m = 3, k = 2)"
    ],
    "sample_363": [
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 2, 3, 3, 3])",
        "isGood([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood([1, 2, 2, 3, 4, 4, 4])",
        "isGood([1, 2, 2, 3])",
        "isGood([1, 2, 2, 3])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isGood([1, 2, 2, 3, 3, 3, 4, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 5])"
    ],
    "sample_374": [
        "minimumSeconds([1, 2, 3, 4, 5])",
        "minimumSeconds([1, 2, 3, 4, 5])",
        "minimumSeconds([1, 2, 3, 4, 5])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1, 2, 3, 4, 5])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1, 2, 3, 4, 5])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_376": [
        "minimumSeconds([1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds([1,2,3,4,5])",
        "minimumSeconds([1,2,3,4,5])",
        "minimumSeconds([1,2,3,4,5])",
        "minimumSeconds([1,2,3,4,5])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds([1,2,3,4,5,1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds([1, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5])",
        "minimumSeconds(nums = [1,3,2,3,5,4,5])",
        "minimumSeconds(my_list = [1,3,1,5,2])"
    ],
    "sample_411": [
        "minLengthAfterRemovals([1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals([1,2,3,4,5])",
        "minLengthAfterRemovals([1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3,4,4,4,4])",
        "minLengthAfterRemovals(my_list = [1,2,2,3,3,3,4,4,4,4])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9])",
        "minLengthAfterRemovals([1,2,3,4,5])",
        "minLengthAfterRemovals(nums = [4, 2, 1, 1, 3, 3, 2, 1])"
    ],
    "sample_399": [
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 2)",
        "maxSum(nums = [1,2,1], m = 2, k = 2)",
        "maxSum(nums = [1,2,1,3,2,5], m = 3, k = 2)",
        "maxSum(nums = [1,2,1,3,2,5,3], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 3)",
        "maxSum(nums = [1,2,1,2,3,4], m = 2, k = 2)",
        "maxSum(nums = [1,1,2], m = 2, k = 2)",
        "maxSum(nums = [1,2,1,2,3,4,3,2,1], m = 2, k = 2)"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(nums = [1, 3, 2, 2, 5, 7, 2], m = 3, k = 3)"
    ],
    "sample_364": [
        "isGood([1,2,3,4,5])",
        "isGood([1,2,3,4,5])",
        "isGood([1,2,3])",
        "isGood([1,2,3])",
        "isGood([1,2,3,4])",
        "isGood(my_list = [1,2,3,4,5])",
        "isGood([1,2,3,4])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood(my_list = [1,2,3,4])",
        "isGood(my_list = [1, 2, 3, 4])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(my_list = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minLengthAfterRemovals([1, 2, 3, 2, 1])",
        "minLengthAfterRemovals([1, 2, 3, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 1, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 5, 5, 6, 6, 7, 8, 9, 9, 9])"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"o\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"pear\"], x = \"a\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins([1, 5, 10, 25])",
        "minimumCoins(prices = [1, 2, 4, 8, 16])",
        "minimumCoins(prices = [1, 2, 4, 8, 16])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6])",
        "minimumCoins(prices = [1, 4, 2, 3])",
        "minimumCoins(prices = [1, 4, 6, 3, 1])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"ababab\")",
        "minimumBeautifulSubstrings(\"abcde\")",
        "minimumBeautifulSubstrings(\"ababab\")",
        "minimumBeautifulSubstrings(\"abab\")",
        "minimumBeautifulSubstrings(\"abcabcabc\")",
        "minimumBeautifulSubstrings(s = \"abcb\")",
        "minimumBeautifulSubstrings(\"abcabcabc\")",
        "minimumBeautifulSubstrings(s = \"ababcbacadefegdehijhklij\")",
        "minimumBeautifulSubstrings(\"abcde\")",
        "minimumBeautifulSubstrings(\"ababab\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcda\")",
        "canBeEqual(s1 = \"ba1\", s2 = \"nana1\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nb\")",
        "canBeEqual(s1 = \"bana\", s2 = \"nana\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"abfde\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"bacde\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abed\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"edcba\")",
        "canBeEqual(s1 = \"bbb\", s2 = \"ccc\")"
    ],
    "sample_387": [
        "canMakeSubsequence('abc', 'abdc')",
        "canMakeSubsequence('abc', 'abdc')",
        "canMakeSubsequence(\"abcde\", \"ace\")",
        "canMakeSubsequence('abcd', 'bcde')",
        "canMakeSubsequence(my_str1 = \"abcd\", my_str2 = \"bcde\")",
        "canMakeSubsequence(my_str1 = \"abc\", my_str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence('abcz', 'abcde')",
        "canMakeSubsequence(my_str1 = \"abcd\", my_str2 = \"ace\")",
        "canMakeSubsequence(s1 = \"ab\", s2 = \"ac\")"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(my_list = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minLengthAfterRemovals([1, 2, 2, 3, 3, 3, 4, 4, 5])",
        "minLengthAfterRemovals([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minLengthAfterRemovals(my_list = [1, 2, 3, 2, 1])",
        "minLengthAfterRemovals([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba1\", s2 = \"nana1\")",
        "canBeEqual(s1 = \"banana\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nn\")",
        "canBeEqual(s1 = \"banana\", s2 = \"canana\")",
        "canBeEqual(s1 = \"baa\", s2 = \"nna\")",
        "canBeEqual(s1 = \"a1b2c3\", s2 = \"b3c2a1\")",
        "canBeEqual(s1 = \"bq px zy\", s2 = \"nana qx zy\")"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs([1, 2, 3, 4, 5], 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 8)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs([1, 2, 3, 4, 5], 5)",
        "countPairs([1, 2, 3, 4, 5], 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(my_list = [1, 2, 3, 4], target = 5)"
    ],
    "sample_390": [
        "canMakeSubsequence(\"abc\", \"def\")",
        "canMakeSubsequence(\"abcde\", \"ace\")",
        "canMakeSubsequence(\"abcz\", \"abc\")",
        "canMakeSubsequence(s1 = \"ab\", s2 = \"ac\")",
        "canMakeSubsequence(\"abc\", \"ahbgdc\")",
        "canMakeSubsequence(s1 = \"ab\", s2 = \"bc\")",
        "canMakeSubsequence(s1 = \"ab\", s2 = \"bc\")",
        "canMakeSubsequence(s1 = \"abcde\", s2 = \"ace\")",
        "canMakeSubsequence(s1 = \"abcde\", s2 = \"ace\")",
        "canMakeSubsequence(\"hello\", \"world\")"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"prev\", \"curr\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"prev\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"curr\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"qz\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"next\", \"curr\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"hello\", \"world\", \"prev\", \"next\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"prev\", \"px\", \"mq\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"previous\", \"next\", \"current\", \"previous\", \"previous\", \"current\", \"next\"])"
    ],
    "sample_416": [
        "countPairs([[0,0], [1,1], [2,2], [3,3]], 2)",
        "countPairs([[0, 0], [1, 1], [2, 2], [3, 3]], 2)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3]], k = 2)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3]], k = 1)",
        "countPairs([[0,0], [1,0], [0,1], [1,1]], 1)",
        "countPairs(coordinates = [[1, 1], [2, 2], [1, 2]], k = 2)",
        "countPairs([[1, 1], [2, 3], [1, 2]])",
        "countPairs(coordinates = [[0, 0], [1, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[1, 1], [1, 2], [2, 2], [2, 3]], k = 1)",
        "countPairs([[0, 0], [1, 1], [2, 2]], 0)"
    ],
    "sample_451": [
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(s1 = \"abcde\", s2 = \"edcba\")",
        "minChanges(s = \"ababab\")",
        "minChanges(\"abcde\")",
        "minChanges(s1 = \"abccba\", s2 = \"aabbcc\")",
        "minChanges(s1 = \"abab\", s2 = \"abba\")",
        "minChanges(s = \"racecar\")",
        "minChanges(s1 = \"ab\", s2 = \"aab\")",
        "minChanges(s1 = \"abcdefg\")"
    ],
    "sample_461": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 1, limit = 2)",
        "distributeCandies(n = 10, limit = 5)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"banana\", s2 = \"nana\")",
        "canBeEqual(s1 = \"banana\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"aba\", s2 = \"aaa\")",
        "canBeEqual(s1 = \"aba\", s2 = \"aaa\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"cdeab\")"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 1, limit = 3)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 4, limit = 2)"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 75)",
        "accountBalanceAfterPurchase(p = 75)",
        "accountBalanceAfterPurchase(p = 1234)",
        "accountBalanceAfterPurchase(p = 1234)",
        "accountBalanceAfterPurchase(p = 75)",
        "accountBalanceAfterPurchase(p = 75)",
        "accountBalanceAfterPurchase(p = 15)",
        "accountBalanceAfterPurchase(my_list = [100, 50, 20, 10, 5])",
        "accountBalanceAfterPurchase(my_purchase = 20)",
        "accountBalanceAfterPurchase(my_int = 87)"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts([1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(my_list = [1, 2, 3, 4, 5])",
        "sumCounts([1, 2, 3])",
        "sumCounts(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "sumCounts([1, 2, 2, 3, 3, 3])"
    ],
    "sample_378": [
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 2, 1])",
        "minimumSeconds([5, 2, 3, 4, 1])"
    ],
    "sample_388": [
        "canMakeSubsequence('abcde', 'ace')",
        "canMakeSubsequence(\"abcde\", \"ace\")",
        "canMakeSubsequence(\"abc\", \"def\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"def\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"def\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"def\")",
        "canMakeSubsequence(s1 = \"abcde\", s2 = \"ace\")",
        "canMakeSubsequence(\"abcd\", \"bcde\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(my_list = [\"ba\", \"na\", \"na\"])"
    ],
    "sample_408": [
        "minimumRightShifts([3, 4, 5, 1, 2])",
        "minimumRightShifts([4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts([1, 3, 5, 7])",
        "minimumRightShifts([1, 3, 5, 4, 2])",
        "minimumRightShifts([1, 3, 5, 4, 2])",
        "minimumRightShifts([1, 3, 2, 4, 5])",
        "minimumRightShifts(my_list = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 1, 2])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4, 6])",
        "minimumRightShifts(nums = [4, 5, 6, 1, 2])"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1, 2, 3, 4, 5], l = 2, r = 4)",
        "countSubMultisets(nums = [1,2,3,4,5], l = 2, r = 4)",
        "countSubMultisets(my_list = [1, 2, 2, 3, 3, 3], l = 0, r = 4)",
        "countSubMultisets(my_list = [1, 2, 3, 2, 1], l = 2, r = 4)",
        "countSubMultisets(nums = [1, 2, 2, 3, 3, 3], l = 1, r = 4)",
        "countSubMultisets(nums = [1,2,3], l = 1, r = 2)",
        "countSubMultisets([1, 2, 3], 2, 4)",
        "countSubMultisets(nums = [2,3,1,3,2], l = 1, r = 4)",
        "countSubMultisets(my_list = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], l = 1, r = 20)",
        "countSubMultisets(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], l = 1, r = 8)"
    ],
    "sample_475": [
        "minimumCoins([1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [2, 3, 1, 1, 2])",
        "minimumCoins(prices = [2, 4, 1, 2, 7, 8])",
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins([1, 5, 10, 25])",
        "minimumCoins(prices = [2, 3, 1, 4, 5, 6])",
        "minimumCoins([2, 4, 1, 2, 7, 8])",
        "minimumCoins(prices = [2, 3, 4, 5, 6, 7])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins([2, 7, 9, 3, 1])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins([1, 2, 3, 4, 5])",
        "minimumCoins(prices = [7, 1, 5, 3, 6, 4])",
        "minimumCoins(prices = [2, 3, 4, 5, 6])",
        "minimumCoins(prices = [2, 7, 9, 3, 1])",
        "minimumCoins([2, 3, 4, 5, 6])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"4\", \"5\"])",
        "lastVisitedIntegers(words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"])",
        "lastVisitedIntegers(words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"4\", \"5\", \"prev\", \"prev\", \"prev\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"hello\", \"world\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"hello\", \"world\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"re\", \"ba\", \"nana\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"4\", \"5\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"re\", \"mi\", \"ni\", \"bu\", \"pq\", \"qr\"])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 2, 2, 2, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 2, 2, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1,2,2,3,3,3])",
        "minOperations(nums = [1, 1, 2, 2, 3, 3])",
        "minOperations(nums = [1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"pq\", \"px\", \"zy\"])",
        "lastVisitedIntegers(words = [\"pq\", \"px\", \"zy\"])",
        "lastVisitedIntegers(words = [\"hello\", \"world\", \"python\"])",
        "lastVisitedIntegers(words = [\"pq\", \"px\", \"zy\"])",
        "lastVisitedIntegers(words = [\"apple\", \"pen\", \"mark\", \"rabbit\"])",
        "lastVisitedIntegers(words = [\"p1\", \"p2\", \"p3\", \"p4\", \"p5\", \"p6\", \"p7\", \"p8\", \"p9\", \"p10\", \"p11\", \"p12\", \"p13\", \"p14\", \"p15\", \"p16\", \"p17\", \"p18\", \"p19\", \"p20\", \"p21\", \"p22\", \"p23\", \"p24\", \"p25\", \"p26\", \"p27\", \"p28\", \"p29\", \"p30\", \"p31\", \"p32\", \"p33\", \"p34\", \"p35\", \"p36\", \"p37\", \"p38\", \"p39\", \"p40\", \"p41\", \"p42\", \"p43\", \"p44\", \"p45\", \"p46\", \"p47\", \"p48\", \"p49\", \"p50\", \"p51\", \"p52\", \"p53\", \"p54\", \"p55\", \"p56\", \"p57\", \"p58\", \"p59\", \"p60\", \"p61\", \"p62\", \"p63\", \"p64\", \"p65\", \"p66\", \"p67\", \"p68\", \"p69\", \"p70\", \"p71\", \"p72\", \"p73\", \"p74\", \"p75\", \"p76\", \"p77\", \"p78\", \"p79\", \"p80\", \"p81\", \"p82\", \"p83\", \"p84\", \"p85\", \"p86\", \"p87\", \"p88\", \"p89\", \"p90\", \"p91\", \"p92\", \"p93\", \"p94\", \"p95\", \"p96\", \"p97\", \"p98\", \"p99\", \"p100\"])",
        "lastVisitedIntegers(words = [\"hello\", \"world\", \"python\", \"code\"])",
        "lastVisitedIntegers(words = [\"apple\", \"pen\", \"pencil\", \"book\", \"tiger\"])",
        "lastVisitedIntegers(words = [\"apple\", \"pen\", \"pencil\", \"book\", \"banana\", \"computer\"])",
        "lastVisitedIntegers(words = [\"apple\", \"plane\", \"eel\", \"tiger\", \"rhino\", \"peach\"])"
    ],
    "sample_379": [
        "minimumSeconds([1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds([1,2,2,3,3,3,4,4,4,4])",
        "minimumSeconds(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minimumSeconds([1,2,3,2,1])"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")"
    ],
    "sample_431": [
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 1])"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev1\", \"prev2\", \"prev3\", \"prev4\", \"prev5\", \"prev6\", \"prev7\", \"prev8\", \"prev9\", \"prev10\", \"prev11\", \"prev12\", \"prev13\", \"prev14\", \"prev15\", \"prev16\", \"prev17\", \"prev18\", \"prev19\", \"prev20\", \"prev21\", \"prev22\", \"prev23\", \"prev24\", \"prev25\", \"prev26\", \"prev27\", \"prev28\", \"prev29\", \"prev30\", \"prev31\", \"prev32\", \"prev33\", \"prev34\", \"prev35\", \"prev36\", \"prev37\", \"prev38\", \"prev39\", \"prev40\", \"prev41\", \"prev42\", \"prev43\", \"prev44\", \"prev45\", \"prev46\", \"prev47\", \"prev48\", \"prev49\", \"prev50\", \"prev51\", \"prev52\", \"prev53\", \"prev54\", \"prev55\", \"prev56\", \"prev57\", \"prev58\", \"prev59\", \"prev60\", \"prev61\", \"prev62\", \"prev63\", \"prev64\", \"prev65\", \"prev66\", \"prev67\", \"prev68\", \"prev69\", \"prev70\", \"prev71\", \"prev72\", \"prev73\", \"prev74\", \"prev75\", \"prev76\", \"prev77\", \"prev78\", \"prev79\", \"prev80\", \"prev81\", \"prev82\", \"prev83\", \"prev84\", \"prev85\", \"prev86\", \"prev87\", \"prev88\", \"prev89\", \"prev90\", \"prev91\", \"prev92\", \"prev93\", \"prev94\", \"prev95\", \"prev96\", \"prev97\", \"prev98\", \"prev99\", \"prev100\"])",
        "lastVisitedIntegers(words = [\"prev1\", \"prev2\", \"prev3\", \"prev4\", \"prev5\", \"prev6\", \"prev7\", \"prev8\", \"prev9\", \"prev10\", \"prev11\", \"prev12\", \"prev13\", \"prev14\", \"prev15\", \"prev16\", \"prev17\", \"prev18\", \"prev19\", \"prev20\", \"prev21\", \"prev22\", \"prev23\", \"prev24\", \"prev25\", \"prev26\", \"prev27\", \"prev28\", \"prev29\", \"prev30\", \"prev31\", \"prev32\", \"prev33\", \"prev34\", \"prev35\", \"prev36\", \"prev37\", \"prev38\", \"prev39\", \"prev40\", \"prev41\", \"prev42\", \"prev43\", \"prev44\", \"prev45\", \"prev46\", \"prev47\", \"prev48\", \"prev49\", \"prev50\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"previous\", \"current\", \"next\"])",
        "lastVisitedIntegers(words = [\"0\", \"1\", \"2\", \"3\", \"prev\", \"prev\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"4\", \"5\", \"prev\", \"prev\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"4\", \"prev\", \"prev\", \"next\", \"next\", \"prev\", \"prev\"])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 8)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(my_list = [1, 2, 3, 4], target = 5)",
        "countPairs([1, 2, 3, 4, 5], 5)",
        "countPairs([1, 2, 3, 4, 5], 5)",
        "countPairs([1, 2, 3, 4, 5], 3)",
        "countPairs([1, 2, 3, 4, 5], 3)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"banana\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nb\")",
        "canBeEqual(\"racecar\", \"car\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abcdef\", s2 = \"abdcfe\")",
        "canBeEqual(s1 = \"abb\", s2 = \"bba\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"curr\", \"next\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"prev\", \"mq\"])",
        "lastVisitedIntegers(words = [\"prev1\", \"prev2\", \"prev1\", \"prev3\", \"prev2\", \"prev1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"visit\", \"prev\", \"prev\", \"next\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev1\", \"prev2\", \"prev3\", \"prev4\", \"curr\", \"next1\", \"next2\", \"next3\", \"next4\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"mq\", \"px\", \"zy\", \"prev\", \"mq\", \"px\", \"zy\", \"prev\", \"mq\", \"px\", \"zy\"])",
        "lastVisitedIntegers(words = [\"pre\", \"prev\", \"prev\", \"next\", \"next\", \"last\", \"last\", \"last\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"prev\", \"prev\", \"px\", \"mq\"])"
    ],
    "sample_464": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n=5, limit=3)",
        "distributeCandies(n = 8, limit = 2)",
        "distributeCandies(n=3, limit=5)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts([4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts([4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts([3, 4, 5, 1, 2])",
        "minimumRightShifts([3, 4, 5, 1, 2])",
        "minimumRightShifts(my_list = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [1, 3, 5, 7])",
        "minimumRightShifts(nums = [1, 3, 5, 7])",
        "minimumRightShifts([1,3,5,7])",
        "minimumRightShifts(my_list = [1, 3, 2, 4, 5])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"o\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum([1, 2, 3, 4, 5], 3, 2)",
        "maxSum([1, 2, 3, 4, 5], 3, 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum([1, 2, 3, 4, 5], 2, 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8], m = 3, k = 2)",
        "maxSum([1,2,1], 2, 3)"
    ],
    "sample_424": [
        "minOperations(nums = [1,2,2,3,3,3])",
        "minOperations([1,2,2,3,3,3])",
        "minOperations([1,2,2,3,3,3])",
        "minOperations(nums = [1,2,2,3,3,3])",
        "minOperations([1,2,2,3,3,3,4,4,4,4])",
        "minOperations([1,1,2,2,3,3])",
        "minOperations(nums = [1,1,2,2,3,3])",
        "minOperations([1,2,3,4,5,6,7,8,9,10])",
        "minOperations([1,1,1,2,2,3])",
        "minOperations(nums = [1,2,2,2,3,3,4,4,4,4])"
    ],
    "sample_417": [
        "minOperations([1,2,3,4,5], 3)",
        "minOperations([1,2,3,4,5], 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations([1,2,3,4,5], 2)",
        "minOperations([1, 2, 3, 4, 5], 3)",
        "minOperations(my_list = [1, 2, 3, 4, 5], k = 3)",
        "minOperations([1, 2, 3, 4, 5, 6], 3)",
        "minOperations([2, 1, 3, 4, 5], 3)",
        "minOperations([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 3)"
    ],
    "sample_371": [
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"banana\")",
        "sortVowels(\"Hello World\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(s = \"hello world\")",
        "sortVowels(\"hello\")"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 2, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 1, limit = 3)"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts([1, 2, 3])",
        "sumCounts([1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "sumCounts(my_list = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts([1, 2, 3])"
    ],
    "sample_429": [
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [-2, -3, 4, -1, -2, 1, 5, -3])",
        "maxSubarrays(nums = [-2, -3, 4, -1, -2, 1, 5, -3])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(my_list = [1, 2, 3, 4, 5])",
        "sumCounts([1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(my_list = [1, 2, 3])"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"banana\", s2 = \"nana\")",
        "canBeEqual(s1 = \"banana\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"na\")",
        "canBeEqual(s1 = \"ba\", s2 = \"na\")",
        "canBeEqual(s1 = \"ab\", s2 = \"a\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nb\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"efgh\")",
        "canBeEqual(s1 = \"bana\", s2 = \"ban\")",
        "canBeEqual(s1 = \"abccba\", s2 = \"aaabbb\")"
    ],
    "sample_380": [
        "countPairs(nums = [1,2,3,4,5], target = 5)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs([1,2,3,4,5], 8)",
        "countPairs(my_list = [1, 2, 3, 4], target = 5)",
        "countPairs(my_list = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts([1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(my_list = [1, 2, 3, 4, 5])",
        "sumCounts([1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts([1, 2, 3, 4, 5])"
    ],
    "sample_368": [
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels('aeiou')",
        "sortVowels(s = \"aeiou\")",
        "sortVowels(\"banana\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(\"world\")",
        "sortVowels(s1 = \"baaeeiou\")",
        "sortVowels('hello world')",
        "sortVowels(\"hello world\")",
        "sortVowels('aeiou')"
    ],
    "sample_462": [
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 20, limit = 5)",
        "distributeCandies(n = 20, limit = 5)"
    ],
    "sample_474": [
        "minimumCoins([1, 2, 3, 4, 5])",
        "minimumCoins([2, 7, 9, 3, 1])",
        "minimumCoins([2, 7, 9, 3, 1])",
        "minimumCoins([2, 3, 1, 1, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [7, 4, 3, 1, 2])",
        "minimumCoins(my_list = [2, 3, 1, 1, 5])",
        "minimumCoins(prices = [2, 3, 1, 4, 6, 5])",
        "minimumCoins([7, 1, 5, 3])"
    ],
    "sample_426": [
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 2, 3, 4, 5])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])"
    ],
    "sample_423": [
        "minOperations(nums = [1, 1, 2, 2, 3, 3])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(my_list = [1, 2, 2, 3, 3, 3])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations([1, 1, 1, 1, 1, 1])",
        "minOperations([1, 2, 3, 4, 5])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_476": [
        "minimumCoins(prices = [2,3,1,8,4])",
        "minimumCoins(prices = [2,3,1,8,4])",
        "minimumCoins(prices = [2,3,1,8,4])",
        "minimumCoins(prices = [2,3,1,8,4])",
        "minimumCoins(prices = [2,3,1,4,6,5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins([2,3,1,4,0])",
        "minimumCoins([2,3,1,8,4])",
        "minimumCoins([1,2,3,4,5])",
        "minimumCoins([2,3,1,4,6])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1,3,4,2])",
        "minimumRightShifts(nums = [1,3,4,2])",
        "minimumRightShifts([4, 5, 6, 7, 1, 2, 3])",
        "minimumRightShifts([4, 5, 6, 7, 1, 2, 3])",
        "minimumRightShifts([4, 5, 6, 7, 1, 2, 3])",
        "minimumRightShifts([1,3,4,2])",
        "minimumRightShifts(nums = [1, 3, 5, 7])",
        "minimumRightShifts(my_list = [1, 3, 5, 7, 9])",
        "minimumRightShifts(my_list = [1, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [1,3,2,4,5,6])"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts([3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts([1, 3, 5, 7])",
        "minimumRightShifts([4, 5, 6, 7, 1, 2, 3])",
        "minimumRightShifts(nums = [1, 3, 5, 6, 7])",
        "minimumRightShifts([1, 3, 2, 4])",
        "minimumRightShifts([1, 3, 5, 7, 9])",
        "minimumRightShifts(nums = [4, 5, 6, 0, 1, 2])",
        "minimumRightShifts(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0])"
    ],
    "sample_167": [
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"World\", \"Health\"], s = \"WHO\")",
        "isAcronym([\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], \"NASA\")",
        "isAcronym(words = [\"NASA\", \"USA\", \"NATO\"], s = \"USA\")",
        "isAcronym(words = [\"artificial\", \"intelligence\"], s = \"intr-anal\")",
        "isAcronym([\"International Business Machines\", \"Anchor\", \"Artificial Neural Networks\"], \"IBMAN\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 3, k = 1)",
        "countInterestingSubarrays(my_list = [1,2,3,4,5], m=3, k=2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [\"1\",\"2\",\"3\",\"4\"], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8], m = 3, k = 1)"
    ],
    "sample_214": [
        "numberOfPoints([[1,2], [2,3], [4,5]])",
        "numberOfPoints([[1,2], [2,3], [4,5]])",
        "numberOfPoints([[1,2],[2,3],[3,4]])",
        "numberOfPoints([[1,2],[2,3],[4,5]])",
        "numberOfPoints([[1,3], [2,4], [5,7], [6,8]])",
        "numberOfPoints([[1,2], [2,3], [4,5]])",
        "numberOfPoints([[1,3], [2,4], [5,6]])",
        "numberOfPoints([[1,3], [2,4], [5,7], [6,8]])",
        "numberOfPoints(nums = [[1,2],[3,4],[5,6],[7,8]])",
        "numberOfPoints([[1,2], [2,3], [4,5], [5,6], [6,7], [7,8]])"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = \"easy problem\", separator = \" \")",
        "splitWordsBySeparator(words = \"hello world, how are you?\", separator = \" \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello world\", \"how are you?\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy,problem\", \"hard,harder\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easy, problem\", \"hard work\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"mq\", \"px\", \"zy\"], separator = \"x\")",
        "splitWordsBySeparator(words = \"This, is a; test\", separator = \",\")",
        "splitWordsBySeparator(words = [\"easy, problem\", \"difficult, hard\", \"facetious\"], separator = \",\")",
        "splitWordsBySeparator(words = \"harder\", separator = \"er\")"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 5], [3, 4], [2, 6]])",
        "numberOfPoints(nums = [[1, 5], [3, 6], [2, 4]])",
        "numberOfPoints(nums = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]])",
        "numberOfPoints(nums = [[\"1\", \"5\"], [\"2\", \"3\"], [\"4\", \"6\"]])",
        "numberOfPoints([[1, 5], [2, 3], [4, 7], [8, 10]])",
        "numberOfPoints(nums = [[1, 5], [3, 7], [4, 8], [9, 10], [11, 12]])",
        "numberOfPoints(nums = [ [1, 5], [2, 4], [3, 6] ])",
        "numberOfPoints(nums = [[1, 5], [2, 3], [4, 7], [5, 6]])",
        "numberOfPoints(my_list = [[1, 3], [2, 5], [5, 7], [1, 7], [3, 5]])",
        "numberOfPoints(my_list = [[1, 2], [2, 3], [3, 4], [1, 4], [1, 5]])"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays([1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 4])",
        "countCompleteSubarrays([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2])",
        "countCompleteSubarrays([1,2,1,2,1,2,1,2])",
        "countCompleteSubarrays([1,2,1,2,1])",
        "countCompleteSubarrays([1,2,1])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"hello\", \"world\", \"how\", \"are\", \"you\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello\", \"world\", \"how\", \"are\", \"you\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello\", \"world\", \"how\", \"are\", \"you\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello\", \"world\", \"how\", \"are\", \"you\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello\", \"world\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"mq\", \"px\", \"zy\"], separator = \"p\")",
        "splitWordsBySeparator(words = [\"banana\", \"apple\", \"orange\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"a,b,c\", \"d,e,f\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"mq\", \"px\", \"zy\"], separator = \"x\")"
    ],
    "sample_129": [
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups(my_list = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(my_list = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 3, 2, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 3, 2, 4, 5, 7, 6, 8])",
        "maxIncreasingGroups(my_list = [1, 2, 3, 5, 6, 7])"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference([1,2,3,4,5], 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [1,3,5,7], x = 2)",
        "minAbsoluteDifference(nums = [1,3,5,7], x = 2)",
        "minAbsoluteDifference(nums = [1,3,4,7,10], x = 2)",
        "minAbsoluteDifference(nums = [5,7,9,11], x = 2)",
        "minAbsoluteDifference([5,3,4,1,2], 2)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 2)",
        "countInterestingSubarrays([1, 2, 3, 4, 5], 5, 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 2)",
        "countInterestingSubarrays(my_list = [1, 2, 3, 4, 5], modulo = 7, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], modulo = 3, k = 2)"
    ],
    "sample_152": [
        "canSplitArray([1, 2, 3, 4, 5], 8)",
        "canSplitArray([1, 2, 3, 4, 5], 8)",
        "canSplitArray([1, 2, 3, 4, 5], 8)",
        "canSplitArray([1, 2, 3, 4, 5], 5)",
        "canSplitArray([1, 2, 3, 4, 5], 6)",
        "canSplitArray([1, 2, 3, 4], 5)",
        "canSplitArray([1, 2, 3, 4, 5], 3)",
        "canSplitArray([1, 2, 3, 4, 5], 3)",
        "canSplitArray([1, 2, 3, 4, 5], 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)"
    ],
    "sample_169": [
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"NASA\", \"FBI\"], s = \"FBI\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"L\")",
        "isAcronym(words = [\"artificial\", \"intelligence\"], s = \"aTIFn\")",
        "isAcronym(words = [\"artificial\", \"intelligence\"], s = \"intensifikata\")",
        "isAcronym(words = [\"I\", \"am\", \"a\", \"cronym\"], s = \"I am a colonma\")"
    ],
    "sample_121": [
        "minimumIndex([1,2,3,4,5])",
        "minimumIndex([1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(my_list = [1,2,2,3,3,3])",
        "minimumIndex(my_list = [1,2,3,2,1])",
        "minimumIndex(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumIndex([1,2,3,1])",
        "minimumIndex([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumIndex(nums = [3, 4, 4, 5, 6, 7, 7])"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 5, offers = [[1,2,10],[2,3,20],[2,5,30],[3,4,40],[5,6,50]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 1], [2, 4, 2], [3, 2, 3], [4, 1, 4], [5, 2, 5]])",
        "maximizeTheProfit(n = 5, offers = [[0,1,10],[1,2,20],[2,3,30],[3,4,40],[0,3,50]])",
        "maximizeTheProfit(n = 4, offers = [[1, 3, 1], [2, 2, 1], [3, 1, 1], [4, 4, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 3, 1], [3, 4, 1], [4, 5, 2], [5, 6, 2]])",
        "maximizeTheProfit(n = 4, offers = [[2, 3, 1], [3, 2, 1], [1, 1, 2], [3, 1, 2]])",
        "maximizeTheProfit(my_list = [5, 7, 9, 10], offers = [[2, 10, 20], [5, 15, 25], [6, 18, 30]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,3],[2,3,1],[3,4,1],[4,5,2],[5,1,2]])",
        "maximizeTheProfit(n = 4, offers = [[1,2,5],[2,3,4],[2,3,10],[3,4,7]])",
        "maximizeTheProfit(n = 5, offers = [[0,2,10],[4,5,9],[2,8,1],[3,9,11],[0,10,12]])"
    ],
    "sample_238": [
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6])",
        "maximumTripletValue([-1, -2, -3, 4, -5])"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"RL_\")",
        "furthestDistanceFromOrigin(moves = \"RL_\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLR\")",
        "furthestDistanceFromOrigin(moves = \"__L__R__\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLR\")",
        "furthestDistanceFromOrigin(moves = \"L_L_R_R_L\")",
        "furthestDistanceFromOrigin(moves = \"L_L_R\")",
        "furthestDistanceFromOrigin(moves = \"LL_L\")",
        "furthestDistanceFromOrigin(moves = \"__L_R__\")",
        "furthestDistanceFromOrigin(moves = \"LRL_R_R_R_L\")"
    ],
    "sample_149": [
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(\"hello\")",
        "finalString(\"hello\")",
        "finalString(\"hello\")",
        "finalString(\"hello world\")",
        "finalString(my_string = \"hello\")",
        "finalString(my_string = \"hello world\")",
        "finalString(s1 = \"banana\", s2 = \"nana\")",
        "finalString(my_string = \"I am a string\")"
    ],
    "sample_162": [
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSum([10, 20, 30, 40, 50])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSum([1, 2, 3, 4, 5])",
        "maxSum([1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum([10, 20, 30, 40, 50])",
        "maxSum(nums = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6])",
        "maxSum(nums = [1, 10, 11, 12])"
    ],
    "sample_230": [
        "countWays([1, 2, 3, 4, 5])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays([1, 2, 3])",
        "countWays([1, 2, 3, 4])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays([1, 2, 3, 4])",
        "countWays([1, 2, 3])",
        "countWays([1, 2, 3, 4])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 5)",
        "minimumPossibleSum(n = 5, target = 5)",
        "minimumPossibleSum(n = 5, target = 5)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 5, target = 8)",
        "minimumPossibleSum(n = 6, target = 4)",
        "minimumPossibleSum(n = 7, target = 10)"
    ],
    "sample_182": [
        "maximizeTheProfit(my_list = [\"mq\", \"px\", \"zy\"])",
        "maximizeTheProfit(my_list = [1, 2, 3, 4, 5])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 1], [2, 3, 1], [3, 4, 1], [4, 5, 1], [1, 3, 2]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 1], [2, 3, 2], [3, 4, 3], [4, 5, 4], [1, 5, 5]])",
        "maximizeTheProfit(N = 5, offers = [[0, 1, 2], [1, 2, 3], [0, 2, 1], [1, 3, 1], [2, 3, 2]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 1], [2, 3, 2], [3, 4, 3], [4, 5, 4], [1, 5, 1]])",
        "maximizeTheProfit(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maximizeTheProfit(my_list = [(0, 1, 2), (1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, 7), (6, 7, 8), (7, 8, 9), (8, 9, 10), (9, 10, 11), (10, 11, 12)])",
        "maximizeTheProfit(N = 5, offers = [[0, 1, 1], [1, 2, 2], [2, 3, 3], [1, 3, 2], [3, 4, 1]])",
        "maximizeTheProfit(N = 5, offers = [[0, 1, 1], [1, 2, 1], [2, 3, 1], [3, 4, 1], [0, 3, 1]])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [1, 2, 3], [2, 3, 1], [3, 4, 2], [4, 5, 1]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [1, 2, 3], [2, 3, 1], [3, 4, 2], [4, 5, 3]])",
        "maximizeTheProfit(n = 3, offers = [[0, 1, 1], [1, 2, 1], [0, 2, 2]])",
        "maximizeTheProfit(n = 3, offers = [[0, 1, 2], [1, 2, 3], [0, 2, 1]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [1, 2, 3], [0, 3, 1], [1, 4, 2], [2, 3, 3]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 5], [1, 2, 10], [2, 3, 15], [0, 3, 20], [0, 4, 25]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [1, 2, 3], [2, 3, 1], [3, 4, 2], [0, 2, 3], [0, 1, 4]])",
        "maximizeTheProfit(n = 4, offers = [[0, 1, 2], [1, 2, 3], [2, 3, 1], [0, 2, 3]])",
        "maximizeTheProfit(my_list = [(0, 1, 50), (1, 2, 30), (2, 3, 20), (3, 4, 10)])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 3], [2, 3, 4], [1, 3, 2], [3, 4, 1], [1, 4, 3]])"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 10, 11, 12], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 8, 9, 10], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 10, 11, 12], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 6, 5, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 9, 6], target = 5)"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,2,1,2,1,2,1,2,1,2])",
        "countCompleteSubarrays([1,2,3,1])",
        "countCompleteSubarrays([1,2,3,1])",
        "countCompleteSubarrays([1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays([1,2,1,3,4,2])",
        "countCompleteSubarrays([1,2,1])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2])",
        "countCompleteSubarrays(nums = [1,2,1,2,3,4,5,4,5])",
        "countCompleteSubarrays(my_list = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays([1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2])"
    ],
    "sample_229": [
        "countWays([1, 2, 3])",
        "countWays([1, 2, 3])",
        "countWays(my_list = [1, 2, 3])",
        "countWays([1, 2, 3, 4])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(my_list = [1, 2, 3, 4, 5])",
        "countWays([1, 2, 3])",
        "countWays([1, 3, 1, 5])",
        "countWays(nums = [2, 3, 1, 3, 4])"
    ],
    "sample_132": [
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(my_list = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(my_list = [2, 3, 1, 4, 6, 5])",
        "maxIncreasingGroups(count = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])"
    ],
    "sample_173": [
        "minimumSum(n = 10, k = 7)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 10, k = 7)",
        "minimumSum(n = 10, k = 7)",
        "minimumSum(n = 10, k = 5)",
        "minimumSum(n = 6, k = 3)",
        "minimumSum(n=5, k=3)",
        "minimumSum(n = 1, k = 3)",
        "minimumSum(n=10, k=1)"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 2)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays([1, 2, 3, 4, 5])",
        "countCompleteSubarrays([1,2,3,4,5])",
        "countCompleteSubarrays([1, 2, 3, 1])",
        "countCompleteSubarrays([1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1,2,1])",
        "countCompleteSubarrays(my_list = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays([1, 2, 3, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 4, 5])"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 5)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 5)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 5)",
        "longestEqualSubarray(nums = [1,2,3,2,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9], k = 5)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1, 4, 7, 5], k = 3)"
    ],
    "sample_170": [
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym([\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], \"NASA\")",
        "isAcronym([\"World\", \"Health\", \"Organization\"], \"WHO\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"APPLE\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"a\")",
        "isAcronym(words = [\"Apple\", \"Banana\", \"Cherry\"], s = \"AABBCC\")",
        "isAcronym(words = [\"I\", \"love\", \"Python\"], s = \"I love Python\")",
        "isAcronym(words = [\"cat\", \"dog\", \"bat\"], s = \"CD\")"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"010\")",
        "maximumOddBinaryNumber(s1 = '101', s2 = '010')",
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"111\")",
        "maximumOddBinaryNumber(s1 = '101', s2 = '010')",
        "maximumOddBinaryNumber(s = \"1010101\")",
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"111\")",
        "maximumOddBinaryNumber(s1 = \"1101\", s2 = \"1010\")",
        "maximumOddBinaryNumber(s1 = \"1010\", s2 = \"1111\")"
    ],
    "sample_226": [
        "countWays([1, 2, 3, 4, 5])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays([1, 2, 3])",
        "countWays([1, 2, 3])",
        "countWays([1, 2, 3])",
        "countWays(my_list = [1, 2, 3])",
        "countWays([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countWays([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countWays(nums = [1, 1, 2, 2, 3, 3])",
        "countWays([1, 2, 3])"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 1], [3, 4, 2], [4, 5, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 50], [3, 4, 30], [5, 6, 20]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 5, 1], [3, 4, 2], [4, 5, 3], [5, 6, 1]])",
        "maximizeTheProfit(n = 5, offers = [[2, 1, 20], [3, 2, 10], [4, 3, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 50], [2, 3, 30], [5, 3, 20]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 1], [2, 3, 2], [3, 4, 3], [1, 5, 4]])",
        "maximizeTheProfit(n = 5, offers = [[2, 1, 1], [3, 2, 1], [4, 3, 2], [5, 3, 3], [6, 4, 1]])",
        "maximizeTheProfit(n = 5, offers = [[2, 1, 3], [2, 2, 1], [3, 2, 1], [1, 1, 3], [3, 1, 2]])",
        "maximizeTheProfit(n = 5, offers = [[2, 1, 3], [3, 2, 1], [4, 1, 2], [5, 2, 3], [6, 3, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 1], [1, 4, 3], [3, 2, 2], [4, 4, 1]])"
    ],
    "sample_122": [
        "minimumIndex([1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex([1,2,2,3,3,3])",
        "minimumIndex([1, 2, 3, 2, 1])",
        "minimumIndex([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumIndex(my_list = [1,2,3,2,1])",
        "minimumIndex([1, 2, 3, 3, 4, 4, 4, 5])",
        "minimumIndex(my_list = [1, 2, 3, 4, 5])",
        "minimumIndex(nums = [0,1,2,2,1,0,1])",
        "minimumIndex([1,2,3,4,5,6,7,8,9,10])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1,5], [10,15], [20,25]])",
        "numberOfPoints([[1,2], [2,3], [4,5]])",
        "numberOfPoints(nums = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34],[34,35],[35,36],[36,37],[37,38],[38,39],[39,40],[40,41],[41,42],[42,43],[43,44],[44,45],[45,46],[46,47],[47,48],[48,49],[49,50],[50,51],[51,52],[52,53],[53,54],[54,55],[55,56],[56,57],[57,58],[58,59],[59,60],[60,61],[61,62],[62,63],[63,64],[64,65],[65,66],[66,67],[67,68],[68,69],[69,70],[70,71],[71,72],[72,73],[73,74],[74,75],[75,76],[76,77],[77,78],[78,79],[79,80],[80,81],[81,82],[82,83],[83,84],[84,85],[85,86],[86,87],[87,88],[88,89],[89,90],[90,91],[91,92],[92,93],[93,94],[94,95],[95,96],[96,97],[97,98],[98,99],[99,100]])",
        "numberOfPoints(nums = [[1,5], [10,15], [20,25]])",
        "numberOfPoints([[1,2],[3,4],[1,3]])",
        "numberOfPoints([[1, 5], [5, 8], [10, 12]])",
        "numberOfPoints([[1, 2], [5, 7], [10, 12]])",
        "numberOfPoints([[1, 5], [2, 3], [4, 7], [8, 9]])",
        "numberOfPoints(nums = [[1,5], [2,3], [4,6], [7,8]])",
        "numberOfPoints([[1, 2], [5, 7], [10, 12], [15, 18]])"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"hello world\", \"how are you\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello world\", \"how are you\"], separator = \" \")",
        "splitWordsBySeparator(words = \"banana, apple, orange\", separator = \",\")",
        "splitWordsBySeparator(words = [\"mq\", \"px\", \"zy\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"banana\", \"apple,orange\", \"pear\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple,banana,orange\", \"pear\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"ba\", \"nana\", \"apple\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"ba\", \"nana\", \"tac\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"banana\", \"apple\", \"orange\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"ba\", \"nana\", \"fo\"], separator = \"a\")"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 5, target = 3)",
        "minimumPossibleSum(n = 5, target = 3)",
        "minimumPossibleSum(n = 4, target = 5)",
        "minimumPossibleSum(n = 4, target = 5)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(my_list = [1, 2, 3, 4, 5])",
        "minimumPossibleSum(n = 5, target = 7)",
        "minimumPossibleSum(n = 5, target = 5)",
        "minimumPossibleSum(n = 4, target = 2)",
        "minimumPossibleSum(5, 7)"
    ],
    "sample_219": [
        "numberOfPoints([[1, 3], [2, 4], [5, 7], [6, 8]])",
        "numberOfPoints([[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints([[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints([[1, 3], [2, 4], [5, 7], [6, 8]])",
        "numberOfPoints([[1, 3], [2, 4], [5, 7], [6, 8]])",
        "numberOfPoints(nums = [[1, 5], [3, 6], [2, 4]])",
        "numberOfPoints(my_list = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[1, 5], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]])",
        "numberOfPoints(nums = [[1, 5], [3, 6], [4, 7]])",
        "numberOfPoints(my_list = [[1, 5], [2, 3], [4, 6], [7, 9]])"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays([1, 2, 3, 4, 5], 5, 3)",
        "countInterestingSubarrays(nums = [1, 1, 2, 2, 3, 3], m = 2, k = 1)",
        "countInterestingSubarrays([1, 2, 3], 3, 2)",
        "countInterestingSubarrays(nums = [1, 3, 2, 2, 2], m = 3, k = 2)"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(my_list = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [0b101, 0b110, 0b111], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3], k = 2)"
    ],
    "sample_203": [
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"0011\")",
        "minimumOperations(num = \"01\")",
        "minimumOperations(num = \"0101\")",
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"120345\")",
        "minimumOperations(num = \"01\")",
        "minimumOperations(num = \"0111\")",
        "minimumOperations(num = \"001101\")",
        "minimumOperations(num = \"0\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [1,2,3,4], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums = [10,20,30,40,50], modulo = 100, k = 15)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [1,1,1], modulo = 1000000007, k = 2)",
        "countInterestingSubarrays(nums = [1,1,2,2,3,3,3], modulo = 10, k = 3)"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1, 2, 3, 4, 5], K = 1)",
        "longestEqualSubarray(A = [1, 2, 3, 2, 1], K = 2)",
        "longestEqualSubarray(A = [1, 2, 3, 1, 2, 3], K = 2)",
        "longestEqualSubarray(A = [1,2,3,2,1], K = 1)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5], K = 3)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], K = 5)",
        "longestEqualSubarray(my_list = [\"mq\", \"px\", \"zy\"])",
        "longestEqualSubarray(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], K = 5)",
        "longestEqualSubarray([1,2,3,2,1], 1)",
        "longestEqualSubarray(my_list = [\"abcd\", \"bcde\", \"cdef\", \"defg\", \"efgh\", \"fghi\", \"ghij\", \"hijk\", \"ijkl\", \"jklm\", \"klmn\", \"lmnp\", \"mnop\", \"opqrs\", \"pqrs\", \"qrst\", \"rstu\", \"stuv\", \"tuvw\", \"uvwx\", \"vwxy\", \"wxuv\", \"xyuv\", \"xuvw\", \"yuvw\", \"zuvw\"])"
    ],
    "sample_146": [
        "finalString(\"hello\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(\"hello\")",
        "finalString(\"hello\")",
        "finalString(s1 = \"hello\", s2 = \"world\")",
        "finalString(s1 = \"ni\")",
        "finalString(my_str = \"banana\")",
        "finalString(s1 = \"ni\")",
        "finalString(\"I am a string\")",
        "finalString(my_string = \"boi\")"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 10, 11], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 10, 11, 12], target = 10)",
        "numberOfEmployeesWhoMetTarget(my_list = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10], target = 5)"
    ],
    "sample_218": [
        "numberOfPoints([[1, 3], [2, 4], [5, 7], [6, 8]])",
        "numberOfPoints([[1, 3], [2, 4], [5, 7], [6, 8]])",
        "numberOfPoints([[1, 3], [2, 4], [5, 7], [6, 8]])",
        "numberOfPoints([[1, 3], [2, 4], [5, 7], [6, 8]])",
        "numberOfPoints([[1, 5], [3, 4], [2, 6]])",
        "numberOfPoints([[1, 5], [5, 8], [10, 12]])",
        "numberOfPoints([[1, 5], [5, 8], [3, 6]])",
        "numberOfPoints([[1, 5], [5, 9], [10, 12]])",
        "numberOfPoints(nums = [[1, 5], [4, 8], [7, 9]])",
        "numberOfPoints(nums = [[0, 10], [1, 9], [2, 8], [3, 7], [4, 6], [5, 5]])"
    ],
    "sample_130": [
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 3, 2, 4, 5])",
        "maxIncreasingGroups([1, 3, 2, 4, 5, 7, 6, 8])",
        "maxIncreasingGroups([1, 3, 2, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 3, 2, 4, 5, 7, 6, 8, 9])"
    ],
    "sample_181": [
        "maximizeTheProfit(my_list = [\"mq\", \"px\", \"zy\"])",
        "maximizeTheProfit(my_list = [\"mq\", \"px\", \"zy\"])",
        "maximizeTheProfit(n = 5, offers = [[1,2,3],[2,3,1],[3,4,2],[4,5,3]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,1],[2,3,2],[3,4,3],[4,5,4],[5,5,5]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,4],[2,3,1],[3,4,2],[4,5,1]])",
        "maximizeTheProfit(n = 5, offers = [[1,3,2],[2,4,1],[3,2,5]])",
        "maximizeTheProfit(n = 5, offers = [[3,2,1],[4,2,1],[3,1,2]])",
        "maximizeTheProfit(n = 5, offers = [[3,2,1],[2,3,1],[3,1,2],[4,1,1]])",
        "maximizeTheProfit(n = 5, offers = [[2,1,3],[4,2,1],[3,1,2],[2,3,1],[1,3,2]])",
        "maximizeTheProfit(n=5, offers=[(3,2,1),(2,3,1),(4,1,2),(3,1,3),(4,2,2)])"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"RL_\")",
        "furthestDistanceFromOrigin(moves = \"RL_\")",
        "furthestDistanceFromOrigin(moves = \"RL_\")",
        "furthestDistanceFromOrigin(moves = \"LL_L_R\")",
        "furthestDistanceFromOrigin(moves = \"RL_LRL_R\")",
        "furthestDistanceFromOrigin(moves = \"L_R_L\")",
        "furthestDistanceFromOrigin(moves = \"LL_L__RRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLR_L_RL\")",
        "furthestDistanceFromOrigin(moves = \"L_LRL_R\")",
        "furthestDistanceFromOrigin(moves = \"LL_LRLR_\")"
    ],
    "sample_175": [
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 4, k = 7)",
        "minimumSum(n = 4, k = 7)",
        "minimumSum(n = 10, k = 7)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 4, k = 7)",
        "minimumSum(n = 5, k = 10)"
    ],
    "sample_217": [
        "numberOfPoints([[1,2],[2,3],[4,5]])",
        "numberOfPoints([[1,5],[10,15],[20,25]])",
        "numberOfPoints([[1,5],[10,15],[20,25]])",
        "numberOfPoints([[1,5],[2,3],[4,6]])",
        "numberOfPoints([[1,2],[2,3],[4,5]])",
        "numberOfPoints([[1,2],[3,4],[5,6],[7,8]])",
        "numberOfPoints([[1,2],[2,3],[4,5]])",
        "numberOfPoints([[1,2],[2,3],[1,2]])",
        "numberOfPoints([[1,2],[3,4],[5,6],[7,8],[9,10],[11,12]])",
        "numberOfPoints(nums = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,20],[20,30],[30,40],[40,50],[50,60],[60,70],[70,80],[80,90],[90,100]])"
    ],
    "sample_205": [
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"101\")",
        "minimumOperations(num = \"101\")",
        "minimumOperations(num = \"1201\")",
        "minimumOperations(num = \"10\")",
        "minimumOperations(num = \"1203\")",
        "minimumOperations(num = \"1203\")",
        "minimumOperations(num = \"1230\")"
    ],
    "sample_120": [
        "minimumIndex([1, 2, 3, 4, 5])",
        "minimumIndex([1, 2, 3, 4, 5])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(my_list = [1, 2, 3, 4, 5])",
        "minimumIndex(my_list = [1, 2, 3, 4, 5])",
        "minimumIndex(nums = [1, 2, 3, 2, 1])",
        "minimumIndex([1, 2, 2, 1])",
        "minimumIndex([1, 2, 3, 4, 5, 5, 5, 6, 6, 7, 7, 7, 7, 7])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"RL_\")",
        "furthestDistanceFromOrigin(moves = \"LL_L_R\")",
        "furthestDistanceFromOrigin(moves = \"LR_L_\")",
        "furthestDistanceFromOrigin(moves = \"LL_RR_\")",
        "furthestDistanceFromOrigin(moves = \"LR_\")",
        "furthestDistanceFromOrigin(moves = \"LL_L_R_\")",
        "furthestDistanceFromOrigin(moves = \"LL_L_R\")",
        "furthestDistanceFromOrigin(moves = \"LL_L_RR_R_\")",
        "furthestDistanceFromOrigin(moves = \"LLR__RL_\")",
        "furthestDistanceFromOrigin(moves = \"LL_L___RRRRR___\")"
    ],
    "sample_161": [
        "maxSum(nums = [10, 2])",
        "maxSum(nums = [10, 2])",
        "maxSum(nums = [10, 2])",
        "maxSum(nums = [10, 2])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum([10, 20, 30, 40, 50])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 2, 5, 3, 7, 5, 2])"
    ],
    "sample_160": [
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum([10, 20, 30, 40, 50])",
        "maxSum([1,2,3,4,5])",
        "maxSum(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSum(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90])",
        "maxSum(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100])",
        "maxSum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = [\"one,two,three\", \"four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple,banana,orange\", \"grape,kiwi\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple,banana,orange\", \"grape,kiwi\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple,banana,orange\", \"dog,cat,bird\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"mq\", \"px\", \"zy\"], separator = \"m\")",
        "splitWordsBySeparator(words = [\"apple,banana,orange\", \"pear,grape\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"banana\", \"apple,orange\", \"pear\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two,three\", \"four,five,six\"], separator = ',')",
        "splitWordsBySeparator(words = [\"hello world\", \"goodbye moon\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello world\", \"goodbye\"], separator = \" \")"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 9, 8], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 9], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 10, 11, 12], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 8, 7, 10, 11, 12], target = 7)"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 9, 8], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 6, 5], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 10, 11], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 6, 5, 4, 3, 2, 1], target = 5)",
        "numberOfEmployeesWhoMetTarget([1,2,3,4,5], 3)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 10, 11, 12], target = 8)",
        "numberOfEmployeesWhoMetTarget([5, 10, 15], 8)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 8, 7, 6, 5], target = 6)",
        "numberOfEmployeesWhoMetTarget(my_list = [1,2,3,4], target = 2)"
    ],
    "sample_171": [
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 7, k = 2)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 4, k = 7)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 4, k = 2)"
    ],
    "sample_159": [
        "maxSum(nums = [10, 2])",
        "maxSum(nums = [10, 2])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum([1,2,3,4,5])",
        "maxSum(nums = [10, 20, 30, 40])",
        "maxSum([1,2,3])",
        "maxSum([10,2])",
        "maxSum(my_list = [10, 2])"
    ],
    "sample_157": [
        "canSplitArray([1, 2, 3, 4, 5], 5)",
        "canSplitArray([1, 2, 3, 4, 5], 5)",
        "canSplitArray([1, 2, 3, 4, 5], 5)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 8)",
        "canSplitArray([1, 2, 3, 4], 5)",
        "canSplitArray([1, 2, 3, 4], 5)",
        "canSplitArray([1, 2, 3, 4], 5)",
        "canSplitArray([1, 2, 3, 4, 5], 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"hello world\", \"how are you\"], separator = \" \")",
        "splitWordsBySeparator(words = \"banana, apple, orange\", separator = \",\")",
        "splitWordsBySeparator(words = \"hello world\", separator = \" \")",
        "splitWordsBySeparator(words = [\"mq\", \"px\", \"zy\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"banana\", \"apple,orange\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"banana\", \"apple\", \"orange\"], separator = \"a\")",
        "splitWordsBySeparator(words = \"banana\", separator = \"n\")",
        "splitWordsBySeparator(words = [\"banana\", \"split\", \"by\", \"separator\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"ba\", \"nana\", \"apple\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"apple,banana,orange\", \"grapes,kiwi\"], separator = \",\")"
    ],
    "sample_172": [
        "minimumSum(n=5, k=1)",
        "minimumSum(n=5, k=10)",
        "minimumSum(n=3, k=7)",
        "minimumSum(n=5, k=1)",
        "minimumSum(n=5, k=2)",
        "minimumSum(n=5, k=1)",
        "minimumSum(n = 5, k = 6)",
        "minimumSum(n = 5, k = 1)",
        "minimumSum(n=10, k=2)",
        "minimumSum(n = 5, k = 2)"
    ],
    "sample_228": [
        "countWays([0,1,2,3,4])",
        "countWays([1,0,2])",
        "countWays(my_list = [0, 1, 2, 3, 4, 5])",
        "countWays(nums = [2,3,1,4,0])",
        "countWays([1,2,3,0,0,0])",
        "countWays([1, 2, 0])",
        "countWays(my_list = [1, 0, 2, 3, 4])",
        "countWays([2,1,1,0])",
        "countWays([0, 0, 1, 2, 3, 4, 5, 6])",
        "countWays([1, 2, 0, 3, 0, 2])"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"110\")",
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"111\")",
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"111\")",
        "maximumOddBinaryNumber(my_str = \"101\")",
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"010\")",
        "maximumOddBinaryNumber(s1 = \"1010101010\", s2 = \"1010101010\")",
        "maximumOddBinaryNumber(s = \"101010101\")",
        "maximumOddBinaryNumber(my_list = [\"101\", \"111\", \"1001\"])",
        "maximumOddBinaryNumber(s = \"1010101\")"
    ],
    "sample_119": [
        "minimumIndex([1, 2, 3, 4, 5])",
        "minimumIndex(my_list = [1, 2, 3, 4, 5])",
        "minimumIndex([1, 2, 3, 2, 1])",
        "minimumIndex(nums = [1, 2, 2, 3, 3, 3])",
        "minimumIndex(nums = [\"mq\", \"px\", \"zy\"])",
        "minimumIndex(nums = [1, 2, 3, 2, 1])",
        "minimumIndex(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [3, 4, 4, 5, 5, 5])",
        "minimumIndex([1, 1, 1, 2, 2, 3])",
        "minimumIndex(nums = [\"b\", \"a\", \"b\", \"a\", \"c\", \"c\", \"a\", \"a\"])"
    ],
    "sample_153": [
        "canSplitArray([1,2,3,4,5], 3)",
        "canSplitArray([1,2,3,4,5], 3)",
        "canSplitArray([1,2,3,4,5], 3)",
        "canSplitArray([1,2,3,4,5], 3)",
        "canSplitArray([1,2,3,4,5], 3)",
        "canSplitArray([1,2,3,4,5], 2)",
        "canSplitArray([1,2,3,4,5], 3)",
        "canSplitArray(nums = [1,2,3,4,5], m = 3)",
        "canSplitArray(nums = [1,2,3,4,5], m = 2)",
        "canSplitArray([1,2,3,4,5], 1)"
    ],
    "sample_147": [
        "finalString(\"hello\")",
        "finalString(\"hello\")",
        "finalString('hello')",
        "finalString(\"racecar\")",
        "finalString(s1 = \"banana\")",
        "finalString(my_str = \"racecar\")",
        "finalString(\"hi\")",
        "finalString('banana')",
        "finalString(s1 = \"ni\")",
        "finalString(s1 = \"banana\", s2 = \"na\")"
    ],
    "sample_174": [
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 10, k = 7)",
        "minimumSum(n = 10, k = 7)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 10, k = 7)",
        "minimumSum(n = 1, k = 1)",
        "minimumSum(n = 1, k = 1)"
    ],
    "sample_154": [
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4], 5)",
        "canSplitArray([1,2,3,4,5], 8)",
        "canSplitArray([1, 2, 3, 4, 5], 5)",
        "canSplitArray([1, 2, 3, 4, 5], 8)",
        "canSplitArray([1,2,3,4,5], 7)",
        "canSplitArray([1,2,3,4,5], 7)",
        "canSplitArray([1,2,3,4,5], 7)",
        "canSplitArray([1,2,3,4,5], 5)",
        "canSplitArray([1, 2, 3, 4], 5)"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1, 2, 3, 1])",
        "countCompleteSubarrays([1, 2, 3, 1])",
        "countCompleteSubarrays([1, 2, 1])",
        "countCompleteSubarrays([1, 2, 1])",
        "countCompleteSubarrays([1,2,1])",
        "countCompleteSubarrays([1, 2, 3, 1])",
        "countCompleteSubarrays([1,2,3,1,2,1,2,3])",
        "countCompleteSubarrays([1,2,3])",
        "countCompleteSubarrays([1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,1])"
    ],
    "sample_150": [
        "finalString(\"hello\")",
        "finalString(\"hello\")",
        "finalString(\"hello\")",
        "finalString(s1 = \"banana\")",
        "finalString(s1 = \"banana\")",
        "finalString(\"a\")",
        "finalString(\"banana\")",
        "finalString(s1 = \"banana\")",
        "finalString(my_string = \"banana\")",
        "finalString(s1 = \"hello world\", s2 = \"hi there\")"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 5, target = 7)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 5)",
        "minimumPossibleSum(n = 4, target = 7)",
        "minimumPossibleSum(n = 4, target = 7)",
        "minimumPossibleSum(n = 4, target = 5)",
        "minimumPossibleSum(n = 4, target = 5)",
        "minimumPossibleSum(n = 5, target = 8)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 15)"
    ],
    "sample_176": [
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 10, k = 7)",
        "minimumSum(n = 10, k = 7)",
        "minimumSum(n = 10, k = 7)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 1, k = 1)"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 2)",
        "countInterestingSubarrays([1,2,3,4,5], 5, 3)",
        "countInterestingSubarrays([1,2,3,4,5], 5, 3)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo=3, k=2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 6, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo=3, k=2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 7, k = 3)",
        "countInterestingSubarrays(nums = [1, 7, 5, 10], modulo = 3, k = 2)"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits([1, 2, 3, 4, 5], 2)",
        "sumIndicesWithKSetBits([1, 2, 3], 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(my_list = [0b101, 0b010, 0b111], k = 2)"
    ],
    "sample_151": [
        "finalString('hello')",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(\"hello\")",
        "finalString(\"hello\")",
        "finalString(\"hello\")",
        "finalString(\"hello\")",
        "finalString(my_string = \"hello\")",
        "finalString(\"abc\")",
        "finalString(s = \"hello world\")"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits([1, 2, 3, 4, 5], 2)",
        "sumIndicesWithKSetBits([1, 2, 3, 4, 5], 2)",
        "sumIndicesWithKSetBits(my_list = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits([1, 2, 3, 4], 2)",
        "sumIndicesWithKSetBits(my_list = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits([0, 1, 2, 3, 4], 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4], k = 2)"
    ],
    "sample_133": [
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 3, 2, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups([1, 3, 6, 10])",
        "maxIncreasingGroups([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(my_list = [1, 3, 2, 4, 5, 7, 6, 8, 9])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])"
    ],
    "sample_204": [
        "minimumOperations(s = \"101\")",
        "minimumOperations(s = \"101\")",
        "minimumOperations(s1 = \"0025\", s2 = \"0050\")",
        "minimumOperations(s1 = \"00\", s2 = \"00\")",
        "minimumOperations(s = \"0025\")",
        "minimumOperations(s1 = \"00\", s2 = \"00\")",
        "minimumOperations(s1 = \"00\", s2 = \"00\")",
        "minimumOperations(s = \"0110\")",
        "minimumOperations(s1 = \"101\", s2 = \"01\")",
        "minimumOperations(s = \"0011101111\")"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 10, 11], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 10, 11], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 10, 11], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 8, 9, 10], target = 7)"
    ],
    "sample_148": [
        "finalString(\"hello\")",
        "finalString(\"hello\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"banana\")",
        "finalString(s1 = \"hello\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(\"banana\")",
        "finalString(my_str = \"abcde\")",
        "finalString(s1 = \"race\")"
    ],
    "sample_168": [
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], \"NASA\")",
        "isAcronym(words = [\"Apple\", \"Banana\", \"Cat\"], s = \"ABC\")",
        "isAcronym(words = [\"Artificial\", \"Intelligence\"], s = \"ART\")",
        "isAcronym(words = [\"T\", \"A\", \"T\"], s = \"THAT\")"
    ],
    "sample_201": [
        "minOperations([1,2,3,4,5], 7)",
        "minOperations([1,2,4,8], 5)",
        "minOperations([1,2,3,4,5], 5)",
        "minOperations(nums = [1,2,3,4,5], target = 5)",
        "minOperations([1,2,4,8], 5)",
        "minOperations(nums = [1,2,3,4,5], target = 3)",
        "minOperations([1,2,4,8,16,32,64,128], 1024)",
        "minOperations([1,2,4,8,16,32,64,128,256,512],10)",
        "minOperations(nums = [1,2,4,8,16,32], target = 5)",
        "minOperations([1,2,3,4,5], 6)"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s1 = \"101\")",
        "maximumOddBinaryNumber(s1 = \"101\")",
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"010\")",
        "maximumOddBinaryNumber(s1 = \"10110\")",
        "maximumOddBinaryNumber(s1 = \"11010101\", s2 = \"10101010\")",
        "maximumOddBinaryNumber(my_string = \"1101010101\")",
        "maximumOddBinaryNumber(my_string = \"1010101\")",
        "maximumOddBinaryNumber(s1 = \"1101\", s2 = \"1100\")"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s1 = \"101\")",
        "maximumOddBinaryNumber(s1 = \"101\")",
        "maximumOddBinaryNumber(s = \"1010101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s1 = \"101\")",
        "maximumOddBinaryNumber(s = \"1010101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s1 = \"1010\")"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 5, target = 15)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 5, target = 20)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 4, target = 20)"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"RLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"RLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(my_list = [\"L\", \"R\", \"U\", \"D\", \"F\"])",
        "furthestDistanceFromOrigin(my_list = [\"L\", \"R\", \"L\", \"L\", \"L\", \"R\", \"R\", \"R\", \"L\"])"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 6)",
        "minimumPossibleSum(n = 5, target = 15)",
        "minimumPossibleSum(n=5, target=7)",
        "minimumPossibleSum(n = 10, target = 3)",
        "minimumPossibleSum(n = 6, target = 5)",
        "minimumPossibleSum(n = 7, target = 14)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 10, 11, 12, 13], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 7, 9, 10], target = 6)"
    ],
    "sample_231": [
        "countWays([0, 1, 2])",
        "countWays([0, 1, 2, 3, 4, 5])",
        "countWays([0, 1, 2, 3, 4])",
        "countWays([0, 1, 2])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays([2, 0, 2])",
        "countWays([0, 1, 3, 2])",
        "countWays(my_list = [0, 2, 3, 1])",
        "countWays([2, 0, 3, 1, 4, 5])",
        "countWays([0, 1, 2, 3, 4])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"RL_\")",
        "furthestDistanceFromOrigin(moves = \"RL_\")",
        "furthestDistanceFromOrigin(moves = \"LRUD_\")",
        "furthestDistanceFromOrigin(moves = \"LL_UR\")",
        "furthestDistanceFromOrigin(moves = \"LRL_R_R\")",
        "furthestDistanceFromOrigin(moves = \"LL_L__RRRR\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLRU\")",
        "furthestDistanceFromOrigin(moves = \"RL_?L?\")",
        "furthestDistanceFromOrigin(moves = \"L_LRLR_R_R_R\")",
        "furthestDistanceFromOrigin(my_moves = \"LLRRULRLRUUL\")"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 1, target = 4)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 4, target = 5)",
        "minimumPossibleSum(n = 4, target = 5)",
        "minimumPossibleSum(5, 10)",
        "minimumPossibleSum(n = 5, target = 15)",
        "minimumPossibleSum(n = 1, target = 1)"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays([1, 2, 3, 4, 5])",
        "countCompleteSubarrays([1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays([1,2,3,1,2,1])",
        "countCompleteSubarrays([1, 2, 1, 3, 2, 3, 4, 3, 2])"
    ],
    "sample_156": [
        "canSplitArray([1, 2, 3, 4, 5], 5)",
        "canSplitArray([1, 2, 3, 4, 5], 5)",
        "canSplitArray([1, 2, 3, 4, 5], 5)",
        "canSplitArray([1, 2, 3, 4, 5], 5)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 8)",
        "canSplitArray([1, 2, 3, 4, 5], 8)",
        "canSplitArray([1, 2, 3, 4, 5], 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)"
    ],
    "sample_200": [
        "minOperations([1, 2, 3, 4, 5], 8)",
        "minOperations([1, 2, 3, 4, 5], 10)",
        "minOperations(my_list = [1, 2, 3, 4, 5])",
        "minOperations([1, 2, 3, 4, 5], 5)",
        "minOperations([1, 2, 3, 4, 5], 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 3)",
        "minOperations(nums = [1, 2, 3, 4], target = 6)",
        "minOperations(my_list = [1, 2, 3, 4, 5], target = 8)",
        "minOperations(my_list = [1, 2, 3, 4, 5], target = 10)",
        "minOperations([4, 8, 5, 3, 9], 18)"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits([1, 2, 3], 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits([1, 2, 3, 4, 5], 3)",
        "sumIndicesWithKSetBits(my_list = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits([1, 2, 3, 4, 5], 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "sumIndicesWithKSetBits(nums = [0b1, 0b10, 0b11, 0b100, 0b101], k = 2)"
    ],
    "sample_165": [
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"NASA\", \"NATO\"], s = \"USA\")",
        "isAcronym(words = [\"I\", \"am\", \"here\"], s = \"NASA\")",
        "isAcronym(words = [\"apple\", \"pie\"], s = \"AP\")",
        "isAcronym(words = [\"NASA\", \"NATO\", \"BUT\"], s = \"AS\")"
    ],
    "sample_227": [
        "countWays([-3, 0, 3])",
        "countWays([-3, 0, 3])",
        "countWays([-1, 0, 1])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays([1, 2, 3])",
        "countWays([-0x3f3f3f3f, 0x3f3f3f3f, -0x3f3f3f3f])",
        "countWays([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countWays([-3f3f3f3f, -0x3f3f3f3, 0x3f3f3f3f, 3f3f3f3f])",
        "countWays([-3f3f3f3f, -3f3f3f3f, 0x3f3f3f3f, 3f3f3f3f, 3f3f3f3f, 3f3f3f3f, 3f3f3f3f, 3f3f3f3f])",
        "countWays(my_list = [-0x3f3f3f3f, 0x3f3f3f3f, -2x3f3f3f3f, 0x3f3f3f3f, -1x3f3f3f3f, -0x3f3f3f3f, -2x3f3f3f3f])"
    ],
    "sample_158": [
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum([1, 2, 3, 4, 5])",
        "maxSum(nums = [10, 2])",
        "maxSum([10, 20, 30, 40, 50])",
        "maxSum([1, 2, 3])",
        "maxSum(nums = [0, -1, 2, -3, 1])",
        "maxSum(nums = [0, 1, 2, 3, 4, 5])",
        "maxSum(nums = [3, 4, 5, 9, 10])"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 5)",
        "longestEqualSubarray([1,2,3,4,5], 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 5)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9], k = 1)",
        "longestEqualSubarray([1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10])",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "longestEqualSubarray([1,2,3,4,5,5,5,6,6,7,7,7,7,8,8,8,8,9,9,9,9,9,9], 5)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 4, 5, 4, 5, 6, 7], k = 2)"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 50], [2, 3, 100], [3, 4, 150], [4, 5, 200]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 10], [3, 4, 15], [4, 5, 20], [5, 1, 25]])",
        "maximizeTheProfit(n = 5, offers = [[1, 5, 1], [2, 3, 1], [3, 4, 1], [4, 2, 1], [5, 1, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 50], [2, 3, 30], [5, 1, 20]])",
        "maximizeTheProfit(my_list = [(1, 2, 10), (2, 3, 20), (3, 4, 30), (4, 5, 40)])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 3, 20], [3, 4, 30], [4, 5, 40], [1, 5, 50]])",
        "maximizeTheProfit(3, [[1, 2, 1], [2, 1, 2], [1, 2, 3]])",
        "maximizeTheProfit(my_list = [[1, 2, 3], [2, 3, 4], [1, 5, 1], [10, 1, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 5, 3], [3, 2, 5], [4, 1, 2], [5, 3, 4]])",
        "maximizeTheProfit(n = 4, offers = [[2, 3, 1], [1, 2, 4], [3, 2, 1], [4, 1, 1]])"
    ],
    "sample_131": [
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups(my_list = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 3, 2, 4, 5, 6])",
        "maxIncreasingGroups([1, 3, 2, 4, 5])",
        "maxIncreasingGroups(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits([1, 2, 3, 4, 5], 2)",
        "sumIndicesWithKSetBits(my_list = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "sumIndicesWithKSetBits([1, 2, 3, 4], 2)",
        "sumIndicesWithKSetBits([1, 2, 3, 4, 5], 3)",
        "sumIndicesWithKSetBits(my_list = [2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(my_list = [3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)"
    ],
    "sample_207": [
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"1234\")",
        "minimumOperations(num = \"1234\")",
        "minimumOperations(num = \"1234\")",
        "minimumOperations(num = \"101\")",
        "minimumOperations(num = \"1020\")",
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"0123456789\")",
        "minimumOperations('123')",
        "minimumOperations(num = \"248\")"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRDD\")",
        "furthestDistanceFromOrigin(moves = \"LLRRDD\")",
        "furthestDistanceFromOrigin(moves=\"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRLR\")",
        "furthestDistanceFromOrigin(moves = \"RLRLR\")",
        "furthestDistanceFromOrigin(moves=\"LLRRR\")",
        "furthestDistanceFromOrigin(moves = \"RRLLRRLL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLR\")"
    ],
    "sample_206": [
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"75\")",
        "minimumOperations(num = \"1\")",
        "minimumOperations('00')",
        "minimumOperations(my_list = [\"00\", \"01\", \"10\", \"11\", \"50\", \"51\", \"80\", \"81\"])"
    ],
    "sample_155": [
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray([1, 2, 3, 4, 5], 5)",
        "canSplitArray([1, 2, 3, 4, 5], 5)",
        "canSplitArray([1, 2, 3, 4, 5], 5)",
        "canSplitArray([1,2,3,4,5], 7)",
        "canSplitArray([1, 2, 3, 4], 5)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray([1,2,3,4,5], 7)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays([1, 2, 3, 1])",
        "countCompleteSubarrays([1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,1,2,1,2,1,2,1,2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(my_list = [1, 2, 3, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 1, 1, 3, 2, 1])"
    ],
    "sample_202": [
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"0123\")",
        "minimumOperations(num = \"0011\")",
        "minimumOperations(num = \"0101\")",
        "minimumOperations(my_list = [\"00\", \"01\", \"11\"])",
        "minimumOperations(\"1204\")",
        "minimumOperations(my_list = [\"01\", \"02\", \"03\", \"04\", \"05\", \"10\"])",
        "minimumOperations(\"101\")",
        "minimumOperations(my_list = [\"12\", \"05\", \"1\", \"23\", \"05\", \"1\", \"23\", \"05\", \"1\", \"23\", \"05\", \"1\", \"23\", \"05\", \"1\", \"23\"])"
    ],
    "sample_128": [
        "splitWordsBySeparator([\"hello world\", \"how are you\"], \" \")",
        "splitWordsBySeparator([\"hello world\", \"how are you\"], \" \")",
        "splitWordsBySeparator(a = [\"hello world\", \"how are you\"], b = \" \")",
        "splitWordsBySeparator(my_list = [\"hello world\", \"how are you\"], \" \")",
        "splitWordsBySeparator(a = \"banana, apple, orange\", b = \",\")",
        "splitWordsBySeparator(a = \"banana, apple, orange\", b = \",\")",
        "splitWordsBySeparator(my_list = [\"hello world\", \"how are you\", \"goodbye\"], \" \")",
        "splitWordsBySeparator(my_list = [\"mq\", \"px\", \"zy\"], b = \"p\")",
        "splitWordsBySeparator(my_list = [\"hello,world\", \"how are you?\"], \",\")",
        "splitWordsBySeparator(a = [\"mq\", \"px\", \"zy\"], b = \"p\")"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits([1, 2, 3, 4, 5], 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits([1, 2, 3], 2)",
        "sumIndicesWithKSetBits([1, 2, 3, 4], 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(my_list = [2, 3, 4, 5], k = 3)"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s1 = \"101\")",
        "maximumOddBinaryNumber(s = '111')",
        "maximumOddBinaryNumber(s = '110101010')",
        "maximumOddBinaryNumber(s = '11011101110111')",
        "maximumOddBinaryNumber(s1 = '11011101111', s2 = '11111111111')"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,10], k = 5)",
        "longestEqualSubarray([1, 2, 3, 4, 5], 3)",
        "longestEqualSubarray([1,2,3,1,2,3,1,2,3])",
        "longestEqualSubarray(nums = [1,2,3,2,3,4,3,2,2,1], k = 2)",
        "longestEqualSubarray([1,2,3,4,5,5,5,6,6,7,7,7,7,7,8,8,8,8,8,8])"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 2)",
        "longestEqualSubarray([1, 2, 3, 4, 5], 2)",
        "longestEqualSubarray([1, 2, 3, 4, 5], 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 3)",
        "longestEqualSubarray([1, 2, 3, 4, 5], 1)",
        "longestEqualSubarray([1,2,3,4,5,6,7,8,9,10], 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 4], k = 3)",
        "longestEqualSubarray(nums = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], k = 3)"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"110\")",
        "maximumOddBinaryNumber(s = \"1010101\")",
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"110\")",
        "maximumOddBinaryNumber(s1 = \"101\")",
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"010\")",
        "maximumOddBinaryNumber(s = \"101010101\")",
        "maximumOddBinaryNumber(s = \"101010\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s1 = \"101010\", s2 = \"101111\")",
        "maximumOddBinaryNumber(s1 = \"1101\", s2 = \"110\")"
    ],
    "sample_166": [
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"Apple\", \"Banana\", \"Cherry\"], s = \"ABC\")",
        "isAcronym([\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], \"NASA\")",
        "isAcronym(words = [\"Apple\", \"Banana\", \"Cherry\"], s = \"ABC\")",
        "isAcronym(words = [\"Alpha\", \"Beta\", \"Gamma\"], s = \"ABC\")",
        "isAcronym(words = [\"PEMDAS\", \"HOW\", \"ARE\", \"YOU\"], s = \"PMES\")"
    ],
    "sample_163": [
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSum(nums = [-1, 2, -3, 4, -5])",
        "maxSum([1, 2, 3])",
        "maxSum(nums = [10, 20, 30, 40])",
        "maxSum([1, 2, 3, 4, 5, 6])",
        "maxSum(nums = [-1, 2, -3, 4, -5, 6, -7, 8, -9, 10])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(my_list = [1, 2, 3])",
        "semiOrderedPermutation(my_list = [1, 2, 3])",
        "semiOrderedPermutation([1, 2, 3])",
        "semiOrderedPermutation(nums = [3, 2, 1])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4, 5])"
    ],
    "sample_94": [
        "continuousSubarrays([1,2,3,4,5])",
        "continuousSubarrays([1, 2, 3, 4, 5])",
        "continuousSubarrays([1,2,3,4,5,6,7,8,9,10])",
        "continuousSubarrays([1,2,3,4,5,6,7,8,9])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays([1,2,3,4,5])",
        "continuousSubarrays([1,2,3,1])",
        "continuousSubarrays([1,2,1,2,1,2,1,2,1,2])",
        "continuousSubarrays([1,2,2,1,2])",
        "continuousSubarrays([1,2,2,1,2,2,3,3,4,4,4,5,5,5,5])"
    ],
    "sample_95": [
        "continuousSubarrays([1, 2, 3, 4, 5])",
        "continuousSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays([1,2,3,4,5])",
        "continuousSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays([1, 2, 3, 4, 5])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays([1, 2, 3, 2, 1, 4, 5, 4])"
    ],
    "sample_8": [
        "colorTheArray(n = 5, queries = [[0,1],[1,2],[2,3],[0,2]])",
        "colorTheArray(5, [[0,1],[1,2],[2,3],[0,2]])",
        "colorTheArray(n = 5, queries = [[2, 2], [3, 1], [4, 3]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [0, 2], [2, 3]])",
        "colorTheArray(n = 6, queries = [[0,1],[1,2],[2,3],[3,4],[4,5],[1,3]])",
        "colorTheArray(n = 5, queries = [[0, 1], [2, 1], [3, 1], [4, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [2, 1], [3, 3], [2, 2], [0, 2]])",
        "colorTheArray(n = 5, queries = [[1, 3], [2, 3], [0, 3], [0, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [1, 3], [2, 5], [4, 4], [1, 1]])",
        "colorTheArray(5, [[2, 1], [3, 1], [1, 2], [2, 3], [3, 3], [5, 4]])"
    ],
    "sample_97": [
        "maximumJumps(nums = [1,2,3,4,5], target = 5)",
        "maximumJumps(nums = [1,2,3,4,5], target = 5)",
        "maximumJumps(nums = [1,2,3,4,5], target = 5)",
        "maximumJumps([1,2,3,4,5], 5)",
        "maximumJumps([1,2,3,4,5], 7)",
        "maximumJumps([1,3,1,4,2], 2)",
        "maximumJumps(nums = [1,2,3,4,5], target = 5)",
        "maximumJumps([1,2,3,4,5], 8)",
        "maximumJumps(nums = [1,2,3,4,5], target = 3)",
        "maximumJumps([1,2,3,4,5,6,7,8,9,10], 3)"
    ],
    "sample_22": [
        "minLength(\"abc\")",
        "minLength(\"hello\")",
        "minLength(\"abcde\")",
        "minLength(s1 = \"ba\", s2 = \"nana\")",
        "minLength(\"hello world\")",
        "minLength(\"hello world\")",
        "minLength(\"hello\")",
        "minLength(s1 = \"abcde\", s2 = \"bcdea\")",
        "minLength(\"abcabcabc\")",
        "minLength(\"abcbcad\")"
    ],
    "sample_7": [
        "colorTheArray(n = 5, queries = [[2,1],[4,1]])",
        "colorTheArray(n = 5, queries = [[2,1],[1,2]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,2],[2,3],[0,2],[3,4]])",
        "colorTheArray(n = 5, queries = [[2,1],[1,2],[2,3],[3,4]])",
        "colorTheArray(n = 5, queries = [[2,1],[4,4]])",
        "colorTheArray(n = 5, queries = [[2,1],[3,2],[1,4]])",
        "colorTheArray(5, [[2,1],[4,1]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,1],[2,3],[3,2],[2,2]])",
        "colorTheArray(5, [[2, 2], [2, 3], [1, 5], [1, 1], [4, 4]])",
        "colorTheArray(n = 7, queries = [[2,2],[3,2],[1,5],[4,5],[1,2],[2,6],[3,3]])"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[0, 1], [2, 3], [4, 4]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [0, 4]])",
        "colorTheArray(n = 5, queries = [[0, 2], [2, 2], [0, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [2, 3], [4, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 5], [4, 5]])",
        "colorTheArray(n = 6, queries = [[2,1],[1,1],[5,5]])",
        "colorTheArray(n = 5, queries = [[0, 2], [2, 4], [2, 3]])",
        "colorTheArray(n = 7, queries = [[4, 4], [2, 4], [4, 2]])",
        "colorTheArray(5, [[2,1],[3,2],[1,3]])",
        "colorTheArray(n = 7, queries = [[2, 2], [5, 3], [4, 4]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(my_list = [2,3,1,4])",
        "semiOrderedPermutation(my_list = [2,3,1,4])",
        "semiOrderedPermutation(my_list = [3,1,2])",
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation([2,1,3])",
        "semiOrderedPermutation(nums = [2,3,4,1])",
        "semiOrderedPermutation([2,3,1,4])",
        "semiOrderedPermutation(my_list = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [1,2,3,4])",
        "semiOrderedPermutation(my_list = [2,3,1,5,4])"
    ],
    "sample_89": [
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 5)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 5)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 3, 2, 4, 1], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 3, 2, 4, 6, 5, 7, 8], threshold = 5)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5])",
        "longestAlternatingSubarray([1, 3, 2, 4, 1, 5, 7, 9, 2, 6, 8], 6)"
    ],
    "sample_33": [
        "removeTrailingZeros(num = \"0000\")",
        "removeTrailingZeros(num = \"0512301\")",
        "removeTrailingZeros(my_str = \"0\")",
        "removeTrailingZeros(\"0512301\")",
        "removeTrailingZeros(num = \"12030405060\")",
        "removeTrailingZeros(num = \"12301\")",
        "removeTrailingZeros(num = \"120304500\")",
        "removeTrailingZeros(my_str = \"abc123\")",
        "removeTrailingZeros(my_list = [\"000\", \"05\", \"123\", \"0\"])",
        "removeTrailingZeros(my_string = \"101\")"
    ],
    "sample_50": [
        "smallestString(s = \"a\")",
        "smallestString(\"abcde\")",
        "smallestString(s1 = \"aabbcc\")",
        "smallestString(s1 = \"a\", s2 = \"b\")",
        "smallestString(s = \"abab\")",
        "smallestString(s1 = \"aabbc\")",
        "smallestString(s1 = \"a\", s2 = \"z\")",
        "smallestString(my_string = \"abab\")",
        "smallestString(\"hello\")",
        "smallestString(s1 = \"ababab\", s2 = \"abba\")"
    ],
    "sample_2": [
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 1, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2, 5])"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(my_tank = 5, add_tank = 3)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(main_tank = 10, additional_tank = 5)",
        "distanceTraveled(mainTank = 5, additionalTank = 10)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 10, additionalTank = 20)",
        "distanceTraveled(mainTank = 5, additionalTank = 10)",
        "distanceTraveled(my_tank = 5, add_tank = 2)",
        "distanceTraveled(main_tank = 10, additional_tank = 5)"
    ],
    "sample_118": [
        "minimumIndex([1, 2, 3, 4, 5])",
        "minimumIndex([1, 2, 3, 4, 5])",
        "minimumIndex([1, 2, 3, 4, 5])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex([1, 2, 3, 2, 1])",
        "minimumIndex(my_list = [1, 2, 3, 2, 1])",
        "minimumIndex([1, 2, 3, 4, 5, 1, 2, 1])",
        "minimumIndex(nums = [0, 1, 0, 1, 1])",
        "minimumIndex(nums = [0, 1, 2, 2, 1, 0])",
        "minimumIndex([3, 2, 3, 3, 1, 3, 3])"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56, 67, 78, 89, 90])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6])",
        "countBeautifulPairs([10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [11, 22, 33, 44, 55])",
        "countBeautifulPairs([10, 20, 30])",
        "countBeautifulPairs(nums = [12, 21, 30])",
        "countBeautifulPairs([12, 21, 30, 42, 51, 60])"
    ],
    "sample_30": [
        "removeTrailingZeros(num = \"0000123\")",
        "removeTrailingZeros('12345000')",
        "removeTrailingZeros(my_str = \"00110011\")",
        "removeTrailingZeros(my_num = \"0512301\")",
        "removeTrailingZeros(my_string = \"100000\")",
        "removeTrailingZeros(s1 = \"051230001\")",
        "removeTrailingZeros(my_str = \"5.0 million\")",
        "removeTrailingZeros(my_str = \"52100\")",
        "removeTrailingZeros(s1 = \"0010001\", s2 = \"101\")",
        "removeTrailingZeros(my_list = [\"051230\", \"012340\", \"02010\"])"
    ],
    "sample_43": [
        "minimizedStringLength(s1 = \"ba\", s2 = \"nana\")",
        "minimizedStringLength(s1 = \"aabbc\")",
        "minimizedStringLength(\"hello\")",
        "minimizedStringLength(s = \"abcde\")",
        "minimizedStringLength(s1 = \"baaab\")",
        "minimizedStringLength(s1 = \"abbccc\")",
        "minimizedStringLength(my_str = \"hello\")",
        "minimizedStringLength(s1 = \"abab\", s2 = \"baab\")",
        "minimizedStringLength(s1 = \"baaab\", s2 = \"bbbbb\")",
        "minimizedStringLength(my_str = \"abccc\")"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(my_list = [1, 3, 2, 4, 5, 7, 6, 8, 9], k = 2)"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 1, num2 = -1)",
        "makeTheIntegerZero(num1 = 123, num2 = 321)",
        "makeTheIntegerZero(num1 = 1, num2 = 1)",
        "makeTheIntegerZero(num1 = -1, num2 = -2)",
        "makeTheIntegerZero(num1 = 15, num2 = 10)",
        "makeTheIntegerZero(num1 = 7, num2 = 15)",
        "makeTheIntegerZero(num1 = 10, num2 = 6)",
        "makeTheIntegerZero(num1 = 0b101, num2 = 0b11)",
        "makeTheIntegerZero(0b101, 0b11)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 5, 3, 4, 2])",
        "findValueOfPartition(nums = [1, 5, 3, 4, 2])",
        "findValueOfPartition(nums = [1, 5, 3, 4, 2])",
        "findValueOfPartition(nums = [1, 5, 3, 4, 2])",
        "findValueOfPartition(my_list = [1, 5, 3, 4, 2])",
        "findValueOfPartition(nums = [1, 5, 3, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 5])",
        "findValueOfPartition([1, 3, 5, 7, 9])",
        "findValueOfPartition([1, 3, 5])",
        "findValueOfPartition([1, 5, 3, 4])"
    ],
    "sample_59": [
        "distanceTraveled(main_tank = 3, additional_tank = 2)",
        "distanceTraveled(main_tank = 20, additional_tank = 10)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 8, additionalTank = 2)",
        "distanceTraveled(main_tank = 4, additional_tank = 2)",
        "distanceTraveled(main_tank = 8, additional_tank = 2)",
        "distanceTraveled(main_tank = 12, additional_tank = 3)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(my_tank = 7, add_tank = 2)"
    ],
    "sample_16": [
        "doesValidArrayExist([1, 0, 1, 1])",
        "doesValidArrayExist(my_list = [1, 0, 1, 1])",
        "doesValidArrayExist([1,0,1,0,1])",
        "doesValidArrayExist([0, 1, 1, 0])",
        "doesValidArrayExist([1,0,1,1])",
        "doesValidArrayExist([1,0,1])",
        "doesValidArrayExist(my_list = [0, 1, 1, 0])",
        "doesValidArrayExist(my_list = [1,0,1,1])",
        "doesValidArrayExist([0, 1, 1, 0, 1, 0])",
        "doesValidArrayExist([0, 0, 1, 0, 1])"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s1 = \"racecar\")",
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")",
        "makeSmallestPalindrome(s1 = \"race\")",
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")",
        "makeSmallestPalindrome(s1 = \"racecar\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"hello\")",
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"hello\")",
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")",
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")"
    ],
    "sample_110": [
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([2, 1, -1], 2)",
        "checkArray([0, 2, 1, -1], 2)"
    ],
    "sample_13": [
        "doesValidArrayExist([1, 0, 1])",
        "doesValidArrayExist([0, 1, 0, 1])",
        "doesValidArrayExist([0, 1, 0])",
        "doesValidArrayExist([0, 1, 0])",
        "doesValidArrayExist([0, 1, 0])",
        "doesValidArrayExist([True, False, True])",
        "doesValidArrayExist([True, False, True])",
        "doesValidArrayExist([0, 0, 0])",
        "doesValidArrayExist(my_list = [1, 0, 1])",
        "doesValidArrayExist([0, 0, 1, 0, 1])"
    ],
    "sample_54": [
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(\"banana\")",
        "smallestString(\"banana\")",
        "smallestString(\"banana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(my_str = \"banana\")",
        "smallestString(\"ababab\")",
        "smallestString(s = \"abc\")",
        "smallestString(\"aa\")"
    ],
    "sample_93": [
        "continuousSubarrays([1, 2, 3, 2, 1])",
        "continuousSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1])",
        "continuousSubarrays([1, 2, 3, 1])",
        "continuousSubarrays([1, 2, 3, 4, 5, 6])",
        "continuousSubarrays([1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "continuousSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays([1, 2, 1, 2, 1, 2, 3, 4, 5, 4, 5, 5])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"level\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"level\")",
        "makeSmallestPalindrome(s = \"racecar\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"hello\")",
        "makeSmallestPalindrome(s = \"racecar\")",
        "makeSmallestPalindrome(s1 = \"race\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"abc\", s2 = \"def\")",
        "makeSmallestPalindrome(my_str = \"racecar\")"
    ],
    "sample_68": [
        "findValueOfPartition([1, 3, 2, 4, 5])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 5])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 5])",
        "findValueOfPartition(nums = [1, 5, 3, 4, 2])",
        "findValueOfPartition(my_list = [3, 1, 4, 2])",
        "findValueOfPartition(my_list = [1, 3, 2, 4])",
        "findValueOfPartition([1, 3, 5])",
        "findValueOfPartition(nums = [4, 2, 1, 3])",
        "findValueOfPartition(nums = [5, 2, 3, 1, 4])",
        "findValueOfPartition(my_list = [3, 4, 2, 8, 1])"
    ],
    "sample_51": [
        "smallestString('hello')",
        "smallestString(\"hello\")",
        "smallestString(s = \"ab\")",
        "smallestString(\"a\")",
        "smallestString(s1 = \"abcde\")",
        "smallestString(s1 = \"abc\", s2 = \"def\")",
        "smallestString(s1 = \"hello\")",
        "smallestString(s1 = \"a\")",
        "smallestString('abc')",
        "smallestString(s1 = \"bca\")"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(my_list = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [5, 10, 15, 20], k = 2)"
    ],
    "sample_107": [
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1,2,3,4,5], 3)",
        "checkArray([1,2,3,4,5], 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray([1, 2, 3, 4, 5], 4)",
        "checkArray([1,2,3,4,5], 5)"
    ],
    "sample_61": [
        "distanceTraveled(my_tank = 3, add_tank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(my_tank = 3, add_tank = 2)",
        "distanceTraveled(main_tank = 3, additional_tank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(my_tank = 5, add_tank = 2)",
        "distanceTraveled(main_tank = 20, additional_tank = 10)",
        "distanceTraveled(main_tank = 3, add_tank = 2)",
        "distanceTraveled(main_tank = 8, additional_tank = 3)",
        "distanceTraveled(my_tank = 10, add_tank = 5, m_times = 3)"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1, 2, 3, 4, 5])",
        "continuousSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays([1,2,3,4,5])",
        "continuousSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "continuousSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays([1, 2, 2, 1])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 1])",
        "continuousSubarrays(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays([1,2,1,1,2,3,1,1,2,3,4])"
    ],
    "sample_6": [
        "colorTheArray(n = 5, queries = [[0,1],[1,2],[2,3],[0,2],[3,4]])",
        "colorTheArray(5, [[1,2],[2,3],[4,2]])",
        "colorTheArray(n = 5, queries = [[2,2],[3,4]])",
        "colorTheArray(n = 5, queries = [[2,1],[2,2],[1,3],[1,4]])",
        "colorTheArray(n = 7, queries = [[1,1],[2,2],[1,2],[3,3]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,2],[3,1],[4,3],[2,3]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,2],[3,1],[4,2],[1,3]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,2],[3,3],[4,4],[5,5]])",
        "colorTheArray(n = 10, queries = [[1,2],[2,5],[5,5],[4,3],[3,4]])",
        "colorTheArray(n = 7, queries = [[0,1],[1,1],[1,2],[2,2],[2,3],[3,2]])"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 1, b = 2)",
        "makeTheIntegerZero(a = 2, b = 3)",
        "makeTheIntegerZero(a = 1, b = 2)",
        "makeTheIntegerZero(my_list = [1, 2, 3, 4, 5])",
        "makeTheIntegerZero(my_list = [2, 3, 5, 7, 11])",
        "makeTheIntegerZero(my_list = [3, 5, 7])",
        "makeTheIntegerZero(my_list = [1, -2, 3, -4, 5])",
        "makeTheIntegerZero(my_list = [2, 3, 5])",
        "makeTheIntegerZero(a = 0b1011, b = 0b1101)",
        "makeTheIntegerZero(my_int = \"101\", mod_int = \"010\")"
    ],
    "sample_100": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 1)",
        "maximumJumps(nums = [2,3,1,1,4], target = 1)",
        "maximumJumps(nums = [1, 3, 5, 4, 2], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 0)",
        "maximumJumps(nums = [3, 4, 2, 3], target = 1)",
        "maximumJumps(my_list = [1, 3, 5, 9], target = 2)",
        "maximumJumps(nums = [3, 4, 5, 10, 6, 2], target = 5)",
        "maximumJumps([1, 3, 5, 8, 9, 10], 2)",
        "maximumJumps([1, 3, 5, 8], 3)",
        "maximumJumps(nums = [5, 6, 9, 3, 7], target = 6)"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 4)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "longestAlternatingSubarray([1, 3, 2, 4, 5, 7, 6, 8, 9])",
        "longestAlternatingSubarray([1,2,3,4,5,6,7,8,9,10], 8)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5])"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [5, 4, 3, 2, 1])",
        "maxNonDecreasingLength([1, 2, 3], [3, 2, 1])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [1, 3, 2, 4, 5])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [3, 2, 1, 4])",
        "maxNonDecreasingLength(a = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [3, 2, 1, 5, 4])",
        "maxNonDecreasingLength([1, 2, 3, 2, 1], [3, 2, 1, 2, 3])",
        "maxNonDecreasingLength(a = [1, 2, 3], b = [0, 2, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [5, 2, 3, 1])",
        "maxNonDecreasingLength([3, 2, 1, 2], [1, 2, 3, 4])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits([1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1])",
        "numberOfGoodSubarraySplits([1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits([1,1,0,0,0,1,1,1,0,0,0])",
        "numberOfGoodSubarraySplits([1,1,0,0,1,1,0,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,1,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1,1,0,0,1])",
        "numberOfGoodSubarraySplits([1,1,0,1,1,0,0,1,1,1])"
    ],
    "sample_90": [
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5], 2)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 4)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "longestAlternatingSubarray([1, 3, 2, 4, 5, 7, 6, 8], 4)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 4)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5], 3)"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 3, 2, 4, 5])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 5])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 5])",
        "findValueOfPartition(nums = [1, 3, 5, 7])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition([1, 3, 5, 7])",
        "findValueOfPartition([1, 2, 3, 4, 5])",
        "findValueOfPartition([1, 5, 3, 4, 2])",
        "findValueOfPartition(nums = [1, 5, 9, 15])",
        "findValueOfPartition([1, 5, 3, 9, 4])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"carrot\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"level\")",
        "makeSmallestPalindrome(s = \"racecar\")",
        "makeSmallestPalindrome(s = \"banana\")",
        "makeSmallestPalindrome(\"race\")",
        "makeSmallestPalindrome(\"race\")",
        "makeSmallestPalindrome(s1 = \"banana\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"carrace\")",
        "makeSmallestPalindrome(s = \"banana\")"
    ],
    "sample_18": [
        "minLength(\"hello world\")",
        "minLength(\"hello AB world CD\")",
        "minLength(\"abc\")",
        "minLength(\"ABCD\")",
        "minLength(my_str = \"abcd\")",
        "minLength(my_string = \"abcd\")",
        "minLength(my_str = \"abc\")",
        "minLength(\"hello world AB CD AB\")",
        "minLength(\"hello world AB CD AB CD\")",
        "minLength(\"abcAabcDd\")"
    ],
    "sample_99": [
        "maximumJumps([1, 2, 3, 4, 5], 2)",
        "maximumJumps([1, 2, 3, 4, 5], 2)",
        "maximumJumps([1, 2, 3, 4, 5], 2)",
        "maximumJumps([1, 3, 1, 4, 2], 2)",
        "maximumJumps(nums = [2,3,1,1,4], target = 1)",
        "maximumJumps([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)",
        "maximumJumps([1, 3, 1, 5, 4], 2)",
        "maximumJumps([1, 3, 1, 1, 5], 2)",
        "maximumJumps([3, 2, 5, 1, 4, 6, 8, 7], 3)",
        "maximumJumps(nums = [3, 4, 2, 3, 4, 5, 2, 5], target = 1)"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 2], [2, 5], [1, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [1, 3], [2, 4], [3, 5], [4, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [4, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 4], [4, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [2, 3], [1, 4]])",
        "colorTheArray(n = 5, queries = [[2, 1], [4, 3], [1, 5]])",
        "colorTheArray(n = 5, queries = [[2, 2], [4, 4], [1, 3]])",
        "colorTheArray(n = 5, queries = [[1, 2], [1, 3], [2, 5], [3, 4], [4, 5]])",
        "colorTheArray(n = 7, queries = [[0, 1], [2, 1], [4, 5], [5, 6]])",
        "colorTheArray(n = 5, queries = [[2,2],[3,3],[4,2],[1,3]])"
    ],
    "sample_62": [
        "distanceTraveled(my_list = [1, 2, 3, 4, 5])",
        "distanceTraveled(main_tank = 20, additional_tank = 15)",
        "distanceTraveled(main_tank = 5, additional_tank = 2)",
        "distanceTraveled(my_list = [1, 5, 10], additional_list = [2, 3])",
        "distanceTraveled(mainTank=5, additionalTank=3)",
        "distanceTraveled(main_tank = 20, add_tank = 15)",
        "distanceTraveled(mainTank = 10, additionalTank = 3)",
        "distanceTraveled(main_tank = 10, add_tank = 7)",
        "distanceTraveled(main_tank = 2, add_tank = 3)",
        "distanceTraveled(my_tank = 4, add_tank = 2)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [1, 3, 5, 7])",
        "countBeautifulPairs(nums = [10, 20, 30])",
        "countBeautifulPairs(nums = [1, 7, 4, 9, 2])",
        "countBeautifulPairs([10, 20, 30, 40])",
        "countBeautifulPairs([12, 21, 45, 35, 60, 75])",
        "countBeautifulPairs(nums = [1, 7, 6, 4, 9, 2])",
        "countBeautifulPairs(nums = [1, 7, 5, 6, 3, 4, 2])"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3], x = 1)",
        "minCost(A = [1, 2, 3], x = 1)",
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3, 4], x = 2)",
        "minCost(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minCost(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minCost(A = [1, 2, 3, 4, 5], x = 2)",
        "minCost(A = [2, 3, 4, 1, 5], x = 2)",
        "minCost(my_list = [3, 1, 4, 2])",
        "minCost(A = [2, 3, 4, 5, 6], x = 2)"
    ],
    "sample_98": [
        "maximumJumps([1,2,3,4,5], 2)",
        "maximumJumps([1,2,3,4,5], 2)",
        "maximumJumps([1,2,3,4,5], 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [3, 4, 5, 1, 2], target = 1)",
        "maximumJumps(my_list = [1, 3, 5, 7], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 4, 2], target = 2)",
        "maximumJumps([1, 3, 5, 9, 10], 2)",
        "maximumJumps(nums = [1, 3, 5, 9, 12, 15], target = 10)",
        "maximumJumps([3, 4, 5, 10, 9, 11, 12, 15, 16, 18, 20], 7)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits([0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 3, 1, 4, 5, 2])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 3, 2, 4, 5, 3, 2])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 1, 1, 1, 1])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 1, 2, 2, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 4, 2])"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs([1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs([1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56])",
        "countBeautifulPairs([1, 2, 3, 4])"
    ],
    "sample_42": [
        "minimizedStringLength(\"hello\")",
        "minimizedStringLength(\"abcabcbb\")",
        "minimizedStringLength(\"hello\")",
        "minimizedStringLength(s1 = \"abccba\")",
        "minimizedStringLength(s1 = \"abcde\", s2 = \"cdefg\")",
        "minimizedStringLength(s = \"aabbc\")",
        "minimizedStringLength(my_string = \"hello\")",
        "minimizedStringLength(s1 = \"abccba\")",
        "minimizedStringLength(s = \"abcbca\")",
        "minimizedStringLength(my_string = \"hello world\")"
    ],
    "sample_41": [
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aabbc\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(\"abc\")",
        "minimumCost(\"aabb\")",
        "minimumCost(\"aab\")",
        "minimumCost(\"aabbc\")",
        "minimumCost(\"aabbcc\")",
        "minimumCost(s = \"abcbcadef\")"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1,2,3,4,5])",
        "distinctDifferenceArray(nums = [1,2,3,4,5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 1, 2, 3])",
        "distinctDifferenceArray([1, 2, 3, 4, 5, 5, 5, 6, 7, 7, 7])"
    ],
    "sample_15": [
        "doesValidArrayExist([1, 2, 3])",
        "doesValidArrayExist([1, 2, 3])",
        "doesValidArrayExist([1, 2, 3])",
        "doesValidArrayExist([1, 2, 3])",
        "doesValidArrayExist([0, 1, 0])",
        "doesValidArrayExist([1, 0, 1])",
        "doesValidArrayExist([1, 2, 3, 4])",
        "doesValidArrayExist([1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3])",
        "doesValidArrayExist([0, 1, 2, 3, 4, 5, 6])"
    ],
    "sample_17": [
        "doesValidArrayExist([1, 2, 3])",
        "doesValidArrayExist([1, 2, 3])",
        "doesValidArrayExist([1, 2, 3, 4, 5])",
        "doesValidArrayExist([1, 2, 3, 4, 5])",
        "doesValidArrayExist([0, 1, 0])",
        "doesValidArrayExist([0, 1, 0, 1])",
        "doesValidArrayExist([1, 2, 3, 4])",
        "doesValidArrayExist([1, 2, 3, 4])",
        "doesValidArrayExist([1, 0, 1])",
        "doesValidArrayExist([0, 1, 0])"
    ],
    "sample_52": [
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(\"abcde\")",
        "smallestString(s1 = \"banana\")",
        "smallestString(\"baz\")",
        "smallestString(s1 = \"banana\")",
        "smallestString(\"baxaybx\")"
    ],
    "sample_40": [
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(\"abc\")",
        "minimumCost(s1 = \"abc\", s2 = \"def\")"
    ],
    "sample_38": [
        "minimumCost(s1 = \"abc\", s2 = \"def\")",
        "minimumCost(s1 = \"abcde\", s2 = \"bcdea\")",
        "minimumCost(s1 = \"abcde\", s2 = \"edcba\")",
        "minimumCost(s1 = \"abc\", s2 = \"def\")",
        "minimumCost(s = \"aaa\")",
        "minimumCost(\"abcde\")",
        "minimumCost(s = \"abb\")",
        "minimumCost(s1 = \"aba\", s2 = \"ab\")",
        "minimumCost(s = \"abacaba\")",
        "minimumCost(s = \"abc\")"
    ],
    "sample_5": [
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 1, 2, 2, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6])",
        "distinctDifferenceArray(nums = [1, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_53": [
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(\"hello\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"abc\", s2 = \"def\")",
        "smallestString(s1 = \"baa\")",
        "smallestString(s1 = \"baabc\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")"
    ],
    "sample_109": [
        "checkArray([1,2,3,4,5], 2)",
        "checkArray([1,2,3,4,5], 2)",
        "checkArray([1,2,3,4,5], 2)",
        "checkArray([1,2,3,4,5], 2)",
        "checkArray([1,2,3,4,5], 3)",
        "checkArray([1,2,3,4,5], 3)",
        "checkArray([1,2,3,4,5], 3)",
        "checkArray([1,1,1,1,1,1,1,1,1,1], 3)",
        "checkArray([3,1,4,1,5,9,2,6,5,3,5])",
        "checkArray([3, 1, 4, 2], 2)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1,2,3,4,5], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(my_list = [1,2,3,4,5], k = 2)",
        "maximumBeauty(nums = [1,3,2,4,5], k = 1)",
        "maximumBeauty(my_list = [1,2,3,4,5], k = 1)",
        "maximumBeauty([1,3,2,4,5], 2)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 0)",
        "maximumBeauty(nums = [3, 4, 5, 2, 6, 7], k = 1)"
    ],
    "sample_0": [
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray(my_list = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 1, 2, 3, 4, 5])"
    ],
    "sample_34": [
        "removeTrailingZeros(my_string = \"0000123\")",
        "removeTrailingZeros(my_str = \"0000\")",
        "removeTrailingZeros(my_string = \"0000\")",
        "removeTrailingZeros(my_str = \"00000123\")",
        "removeTrailingZeros(my_str = \"0000\")",
        "removeTrailingZeros(my_string = \"00110011\")",
        "removeTrailingZeros(my_str = \"02001\")",
        "removeTrailingZeros(my_string = \"ab123000cde\")",
        "removeTrailingZeros(my_list = ['123000', '450000', '789000'])",
        "removeTrailingZeros(my_str = \"abcde000\")"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s1 = \"race\")",
        "makeSmallestPalindrome(s1 = \"race\")",
        "makeSmallestPalindrome(s = \"racecar\")",
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")",
        "makeSmallestPalindrome(s1 = \"race\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(s = \"abc\")",
        "makeSmallestPalindrome(s1 = \"abc\", s2 = \"def\")",
        "makeSmallestPalindrome(s1 = \"ab\", s2 = \"ba\")",
        "makeSmallestPalindrome(s1 = \"race\")"
    ],
    "sample_55": [
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(\"abc\")",
        "smallestString(\"hello\")",
        "smallestString(\"hello\")",
        "smallestString(s = \"banana\")",
        "smallestString(my_string = \"banana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(my_string = \"banana\")",
        "smallestString(\"hello\")"
    ],
    "sample_35": [
        "removeTrailingZeros(my_num = \"512301\")",
        "removeTrailingZeros(my_str = \"100\")",
        "removeTrailingZeros(my_list = [\"mq\", \"px\", \"0\", \"zy\"])",
        "removeTrailingZeros(num = \"120304050\")",
        "removeTrailingZeros(my_str = \"10000\")",
        "removeTrailingZeros(num = \"051230001\")",
        "removeTrailingZeros(my_str = \"1230001\")",
        "removeTrailingZeros(num = \"1020000000\")",
        "removeTrailingZeros(my_list = [\"1000\", \"05\", \"10\"])",
        "removeTrailingZeros(my_str = \"abc05def0ghi\")"
    ],
    "sample_23": [
        "minLength(\"abcde\")",
        "minLength(\"abcde\")",
        "minLength(\"hello world\")",
        "minLength(\"hello world\")",
        "minLength(\"ABCD\")",
        "minLength(\"ABCDABCD\")",
        "minLength(s1 = \"ba\", s2 = \"nana\")",
        "minLength(\"hello ABworld CD\")",
        "minLength(\"abcabc\")",
        "minLength(\"aBAbcD\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = \"0512301\")",
        "removeTrailingZeros(num = \"0512301\")",
        "removeTrailingZeros('1230001')",
        "removeTrailingZeros('1230001')",
        "removeTrailingZeros(my_str = \"512301\")",
        "removeTrailingZeros(num = \"503\")",
        "removeTrailingZeros(my_num = \"0512301\")",
        "removeTrailingZeros(my_list = ['101', '000', '123'])",
        "removeTrailingZeros(my_list = ['0', '0', '123', '0', '456', '789'])",
        "removeTrailingZeros(my_list = [\"12300\", \"0.0056\", \"0.000123\"])"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 7, num2 = 3)",
        "makeTheIntegerZero(num1 = 1, num2 = 2)",
        "makeTheIntegerZero(my_list = [1, 2, 3])",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 7, num2 = 5)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)",
        "makeTheIntegerZero(my_list = [-1, -2, 3])"
    ],
    "sample_57": [
        "distanceTraveled(a = 5, b = 3)",
        "distanceTraveled(a = 5, b = 2)",
        "distanceTraveled(a = 3, b = 2)",
        "distanceTraveled(a = 2, b = 3)",
        "distanceTraveled(my_list = [3, 2, 1])",
        "distanceTraveled(a = 5, b = 3)",
        "distanceTraveled(a = 9, b = 3)",
        "distanceTraveled(a = 3, b = 7)",
        "distanceTraveled(my_list = [2, 3, 4])",
        "distanceTraveled(a = 8, b = 12)"
    ],
    "sample_92": [
        "longestAlternatingSubarray([1,2,3,4,5], 3)",
        "longestAlternatingSubarray([1,2,3,4,5,6,7,8,9,10], 5)",
        "longestAlternatingSubarray([1,2,3,4,5,6,7,8,9,10], 5)",
        "longestAlternatingSubarray(nums = [1,7,4,9,2,5], t = 5)",
        "longestAlternatingSubarray(nums = [1,3,2,4,5,2], t = 2)",
        "longestAlternatingSubarray([1,2,3,4,5,6,7,8,9,10], t = 5)",
        "longestAlternatingSubarray([1,3,2,4,1])",
        "longestAlternatingSubarray([1,3,2,4,3,5,4])",
        "longestAlternatingSubarray([1,3,5,2,4,6,7], 7)",
        "longestAlternatingSubarray([1,2,3,4,5], 3)"
    ],
    "sample_102": [
        "maximumJumps(nums = [1, 3, 5, 7], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 8, 9], target = 2)",
        "maximumJumps([1, 2, 3, 4, 5], 3)",
        "maximumJumps([1, 2, 3, 4, 5], 1)",
        "maximumJumps([1, 3, 1, 2, 1, 1, 7, 5], 2)",
        "maximumJumps(nums = [1, 3, 5, 7, 9], target = 2)",
        "maximumJumps([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)",
        "maximumJumps([1, 3, 5, 9, 11, 13], 2)",
        "maximumJumps([1, 2, 3, 4, 5], 2)",
        "maximumJumps(nums = [3, 9, 8, 10, 1, 2, 30, 31, 7], target = 5)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = \"0512301\")",
        "removeTrailingZeros('512301')",
        "removeTrailingZeros('123000')",
        "removeTrailingZeros(my_str = \"0\")",
        "removeTrailingZeros(num = \"0000\")",
        "removeTrailingZeros(my_string = \"1234501\")",
        "removeTrailingZeros(num = \"123000\")",
        "removeTrailingZeros(my_string = \"15301\")",
        "removeTrailingZeros(my_list = [\"05123001\", \"051230001\", \"051230001\", \"051230001\"])",
        "removeTrailingZeros(my_list = ['5', '0', '1', '2', '0', '3', '1', '0'])"
    ],
    "sample_101": [
        "maximumJumps([1, 2, 3, 4, 5], 2)",
        "maximumJumps([1, 2, 3, 4, 5], 2)",
        "maximumJumps([1, 2, 3, 4, 5], 2)",
        "maximumJumps([1, 2, 3, 4, 5], 2)",
        "maximumJumps([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps([1, 3, 1, 2, 1, 1, 7, 7], 2)",
        "maximumJumps([1, 3, 1, 2, 1, 4, 9, 3], 2)",
        "maximumJumps([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1)",
        "maximumJumps([1, 3, 5, 8, 9, 10], 2)"
    ],
    "sample_14": [
        "doesValidArrayExist([1, 2, 3])",
        "doesValidArrayExist([1, 2, 3])",
        "doesValidArrayExist([1, 2, 3, 4, 5])",
        "doesValidArrayExist([1, 2, 3, 4])",
        "doesValidArrayExist([1, 2, 4, 8])",
        "doesValidArrayExist([1, 2, 4, 8])",
        "doesValidArrayExist([1, 0, 1])",
        "doesValidArrayExist(my_list = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(my_list = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(my_list = [1, 2, 3, 4])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits([1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits([1, 1, 0, 1, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits([1, 1, 0, 0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 0, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0, 1, 0, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0, 1, 1, 0, 0])"
    ],
    "sample_19": [
        "minLength(\"abcde\")",
        "minLength(s1 = \"abc\", s2 = \"def\")",
        "minLength(\"hello world\")",
        "minLength(s1 = \"abcde\", s2 = \"bcdef\")",
        "minLength(\"abc\")",
        "minLength(s1 = \"abcde\", s2 = \"abfde\")",
        "minLength(\"abcABCD\")",
        "minLength(s = \"ABACDCDC\")",
        "minLength(my_string = \"abcABC\")",
        "minLength(s = \"abcABAbcdaBcD\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s1 = \"race\")",
        "makeSmallestPalindrome(s1 = \"racecar\")",
        "makeSmallestPalindrome(\"racecar\")",
        "makeSmallestPalindrome(\"racecar\")",
        "makeSmallestPalindrome(s1 = \"abc\", s2 = \"def\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"hello\")",
        "makeSmallestPalindrome(s1 = \"ba\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"hello\")",
        "makeSmallestPalindrome(\"racecar\")",
        "makeSmallestPalindrome(s1 = \"banana\", s2 = \"mq\")"
    ],
    "sample_49": [
        "semiOrderedPermutation(my_list = [1, 3, 2, 4])",
        "semiOrderedPermutation(my_list = [1, 3, 2, 4])",
        "semiOrderedPermutation(my_list = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation([3, 1, 2])",
        "semiOrderedPermutation(my_list = [1, 3, 2])",
        "semiOrderedPermutation([1, 2, 3])",
        "semiOrderedPermutation([1,2,3,4])",
        "semiOrderedPermutation([2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation([1, 3, 5])"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits([1,0,0,1])",
        "numberOfGoodSubarraySplits([1,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(my_list = [1,0,0,1,0,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,0,0,1,0,0,1,1,0,1,0,1,1,1,1,1,1,1])"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty([1, 2, 3, 4, 5], 2)",
        "maximumBeauty([1, 2, 3, 4, 5], 2)",
        "maximumBeauty([1, 2, 3, 4, 5], 1)",
        "maximumBeauty(nums = [1, 5, 2, 6, 3], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 0)"
    ],
    "sample_117": [
        "minimumIndex(nums = [1, 2, 3, 2, 1])",
        "minimumIndex(nums = [1, 2, 3, 2, 1])",
        "minimumIndex([1, 2, 2, 3, 3, 3])",
        "minimumIndex(nums = [1, 2, 2, 3, 3, 3, 4, 4, 5])",
        "minimumIndex([1, 2, 3, 2, 1])",
        "minimumIndex([1, 2, 3, 2, 1])",
        "minimumIndex([1, 2, 3, 3, 2, 1])",
        "minimumIndex(my_list = [1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1])",
        "minimumIndex([1, 1, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5])",
        "minimumIndex([1, 2, 2, 1])"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = -1, num2 = 2)",
        "makeTheIntegerZero(my_list = [\"mq\", \"px\", \"zy\"])",
        "makeTheIntegerZero(my_list = [1, -2, 3])",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(-3, 2)",
        "makeTheIntegerZero(my_list = [2, 3, -4, 5])",
        "makeTheIntegerZero(num1 = -101, num2 = 2)",
        "makeTheIntegerZero(-101, -2)"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs([10, 20, 30, 40, 50])",
        "countBeautifulPairs([10, 20, 30, 40, 50])",
        "countBeautifulPairs([10, 20, 30, 40])",
        "countBeautifulPairs(my_list = [10, 20, 30, 40, 50])",
        "countBeautifulPairs([10, 20, 30, 40])",
        "countBeautifulPairs(nums = [12, 24, 36])",
        "countBeautifulPairs(my_list = [21, 28, 35, 42, 55])",
        "countBeautifulPairs(my_list = [22, 28, 35, 44, 55, 66, 77, 88, 99, 100])",
        "countBeautifulPairs(my_list = [31, 14, 5, 20])"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 1, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 42, num2 = 13)",
        "makeTheIntegerZero(num1 = 10, num2 = 7)",
        "makeTheIntegerZero(num1 = 42, num2 = 23)"
    ],
    "sample_20": [
        "minLength(s1 = \"ba\", s2 = \"nana\")",
        "minLength(s1 = \"ba\", s2 = \"nana\")",
        "minLength(\"abcde\")",
        "minLength(\"banana\")",
        "minLength(s1 = \"abc\", s2 = \"def\")",
        "minLength(s1 = \"abcde\", s2 = \"bcdef\")",
        "minLength(\"ABCDABCD\")",
        "minLength(s1 = \"abcd\", s2 = \"bcda\")",
        "minLength(s1 = \"ABACDABCD\", s2 = \"ABCD\")",
        "minLength(\"ABCD\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 3, 2, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(my_list = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(my_list = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 3, 2, 4, 5, 6, 7], k = 2)"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6])",
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs([12, 23, 34, 45, 56, 67, 78, 89, 90])",
        "countBeautifulPairs(nums = [\"11\", \"01\", \"10\"])",
        "countBeautifulPairs(nums = [10, 7, 5, 3, 1])",
        "countBeautifulPairs([10, 20, 30, 40])",
        "countBeautifulPairs(nums = [42, 24, 35, 24, 14, 5])",
        "countBeautifulPairs(nums = [121, 133, 1441, 1451])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = -5, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = -5, num2 = 2)",
        "makeTheIntegerZero(my_list = [1, -2, 3])",
        "makeTheIntegerZero(num1 = 42, num2 = -7)",
        "makeTheIntegerZero(num1 = 10, num2 = -5)",
        "makeTheIntegerZero(3, 5)",
        "makeTheIntegerZero(my_num1 = 5, my_num2 = 7)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")",
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")",
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")",
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")",
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")",
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")",
        "makeSmallestPalindrome(s = \"racecar\")",
        "makeSmallestPalindrome(s1 = \"banana\", s2 = \"nana\")",
        "makeSmallestPalindrome(s1 = \"banana\", s2 = \"nana\")",
        "makeSmallestPalindrome(s1 = \"mq\", s2 = \"px\", s3 = \"zy\")"
    ],
    "sample_37": [
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abca\")",
        "minimumCost(s = \"aaa\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s1 = \"abc\", s2 = \"def\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(my_str = \"aaa\")",
        "minimumCost(\"abcda\")",
        "minimumCost(s1 = \"aabcccccaaa\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits([1,1,0,1])",
        "numberOfGoodSubarraySplits([1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,0,1])",
        "numberOfGoodSubarraySplits([1,1,0,1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,1])",
        "numberOfGoodSubarraySplits([1,0,0,0,1,0,0,0,1])",
        "numberOfGoodSubarraySplits([1,0,0,1,0,1,1,0,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1])"
    ],
    "sample_105": [
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1,2,3,4,5], 3)",
        "checkArray([1, 2, 3], 3)",
        "checkArray([2, 4, 6, 8], 3)"
    ],
    "sample_46": [
        "semiOrderedPermutation(my_list = [1, 2, 3])",
        "semiOrderedPermutation(my_list = [1, 2, 3])",
        "semiOrderedPermutation(my_list = [3, 2, 1])",
        "semiOrderedPermutation(my_list = [3, 1, 2])",
        "semiOrderedPermutation(my_list = [2, 1, 3])",
        "semiOrderedPermutation(my_list = [2, 1, 3])",
        "semiOrderedPermutation(my_list = [2, 3, 1, 4])",
        "semiOrderedPermutation([3, 1, 2])",
        "semiOrderedPermutation([1, 2, 3, 4])",
        "semiOrderedPermutation(my_list = [3, 2, 1, 4])"
    ],
    "sample_108": [
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 3)"
    ],
    "sample_39": [
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s1 = \"abc\", s2 = \"def\")",
        "minimumCost(s1 = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s1 = \"abcde\", s2 = \"cdeab\")",
        "minimumCost(s1 = \"abcde\", s2 = \"edcba\")",
        "minimumCost(s = \"ababab\")",
        "minimumCost(s = \"abccba\")",
        "minimumCost(\"aabcc\")"
    ],
    "sample_65": [
        "findValueOfPartition([3, 1, 4, 2])",
        "findValueOfPartition([3, 1, 4, 2])",
        "findValueOfPartition([3, 1, 4, 2])",
        "findValueOfPartition(my_list = [3, 1, 4, 2])",
        "findValueOfPartition([1, 3, 5, 7])",
        "findValueOfPartition(a = [1, 3, 5, 7])",
        "findValueOfPartition(my_list = [1, 5, 3, 4, 2])",
        "findValueOfPartition([5, 3, 1, 4, 2])",
        "findValueOfPartition(a = [1, 5, 3, 4, 2])",
        "findValueOfPartition(a = [1, 3, 5])"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 10)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(my_tank = 5, add_tank = 2)",
        "distanceTraveled(mainTank = 7, additionalTank = 3)",
        "distanceTraveled(my_tank = 2, add_tank = 3)"
    ],
    "sample_12": [
        "doesValidArrayExist([1, 2, 3])",
        "doesValidArrayExist([1, 2, 3])",
        "doesValidArrayExist([1, 2, 3, 4])",
        "doesValidArrayExist([1, 2, 3, 4])",
        "doesValidArrayExist([1, 2, 3, 4])",
        "doesValidArrayExist([1, 2, 3, 4])",
        "doesValidArrayExist([0, 1, 1, 0])",
        "doesValidArrayExist([1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist([1, 2, 3, 4, 5])"
    ],
    "sample_106": [
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)"
    ],
    "sample_88": [
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray([1, 3, 2, 4, 5, 7, 6, 8], 6)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray([1, 3, 2, 4, 5, 7, 6, 8], 5)",
        "longestAlternatingSubarray([1, 3, 5, 7, 9, 2, 4, 6, 8, 10])",
        "longestAlternatingSubarray([1, 3, 5, 7, 9, 2, 4, 6, 8], 10)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 7)",
        "longestAlternatingSubarray([1, 3, 2, 4, 5, 7, 6, 8], 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 10)"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50])",
        "countBeautifulPairs(my_list = [10, 20, 30])",
        "countBeautifulPairs(my_list = [10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [5, 10, 15])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6])",
        "countBeautifulPairs(my_list = [10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [2, 3, 4, 5, 6])",
        "countBeautifulPairs(nums = [4, 6, 8, 10])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5], t = 3)",
        "longestAlternatingSubarray([1,2,3,4,5,6,7,8,9], 5)",
        "longestAlternatingSubarray([1,2,3,4,5,6,7,8,9], 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 5)",
        "longestAlternatingSubarray([1,3,2,4,5,2,6], 3)",
        "longestAlternatingSubarray(nums = [1,3,2,4,5,7,6,8], t = 3)",
        "longestAlternatingSubarray([1,3,2,4,5,7,6,9,8], 4)",
        "longestAlternatingSubarray(nums = [1, 3, 2, 4, 3, 5, 4, 6], t = 3)",
        "longestAlternatingSubarray([1,2,3,4,5], 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], t = 5)"
    ],
    "sample_36": [
        "minimumCost(s = \"abcde\")",
        "minimumCost(s1 = \"abc\", s2 = \"def\")",
        "minimumCost(s1 = \"abcde\", s2 = \"bcdea\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(\"abcde\")",
        "minimumCost(\"a\")",
        "minimumCost(\"aab\")",
        "minimumCost(s1 = \"ba\", s2 = \"nana\")",
        "minimumCost(s = \"abccba\")",
        "minimumCost(s = \"abacabadabacaba\")"
    ],
    "sample_21": [
        "minLength(\"hello world\")",
        "minLength(\"abcde\")",
        "minLength(s1 = \"abcde\", s2 = \"bcdef\")",
        "minLength(\"abcABCD\")",
        "minLength(\"hello\")",
        "minLength(\"abcabc\")",
        "minLength(\"abcD\")",
        "minLength(\"abcABCDCDC\")",
        "minLength(\"hello world AB AB CD CD\")",
        "minLength(s1 = \"ABACDCDC\", s2 = \"CDCDC\")"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 1])",
        "numberOfGoodSubarraySplits([0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(my_list = [1, 0, 1, 1, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits([0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(my_list = [0, 1, 0, 1, 0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits([1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_9": [
        "colorTheArray(n = 5, queries = [[0, 2], [1, 3], [2, 4]])",
        "colorTheArray(n = 5, queries = [[2, 2], [4, 2]])",
        "colorTheArray(n = 5, queries = [[0, 2], [1, 2], [2, 3]])",
        "colorTheArray(5, [[0, 1], [1, 2], [2, 3], [4, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 4], [5, 4]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 4], [0, 4]])",
        "colorTheArray(n = 5, queries = [[2, 1], [1, 3], [4, 1]])",
        "colorTheArray(5, [[0, 1], [2, 3], [4, 1], [0, 4]])",
        "colorTheArray(n = 7, queries = [[0, 1], [1, 2], [2, 5], [0, 3], [3, 4], [4, 6]])",
        "colorTheArray(n = 7, queries = [[2, 1], [2, 2], [3, 1], [4, 1]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "maxNonDecreasingLength([1, 2, 3], [3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2, 4], nums2 = [2, 3, 1, 4])",
        "maxNonDecreasingLength(nums1 = [1,2,3,4,5], nums2 = [5,4,3,2,1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 2, 1], nums2 = [3, 2, 1, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 2, 1], nums2 = [3, 2, 1, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 2, 1], nums2 = [1, 2, 3, 4, 5])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2], nums2 = [2, 3, 4])"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(my_list = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)"
    ],
    "sample_67": [
        "findValueOfPartition(my_list = [1, 3, 2, 4, 5])",
        "findValueOfPartition(nums = [1,3,2,4,5])",
        "findValueOfPartition(nums = [1, 5, 10])",
        "findValueOfPartition([1,3,2,4])",
        "findValueOfPartition(nums = [1,3,2,4])",
        "findValueOfPartition([1, 5, 3, 4, 2])",
        "findValueOfPartition(my_list = [1, 3, 5, 7, 9])",
        "findValueOfPartition(nums = [5, 10, 15, 20])",
        "findValueOfPartition(my_list = [5, 10, 15, 20])",
        "findValueOfPartition([5, 2, 8, 10])"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1, 3, 5, 7])",
        "findValueOfPartition(my_list = [1, 3, 2, 4, 5])",
        "findValueOfPartition(my_list = [1, 5, 10])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 5])",
        "findValueOfPartition(nums = [1,3,2,4])",
        "findValueOfPartition(nums = [4, 3, 2, 1])",
        "findValueOfPartition(my_list = [1, 5, 10, 15])",
        "findValueOfPartition(nums = [1, 5, 10, 15])",
        "findValueOfPartition(nums = [1,5,11,15])",
        "findValueOfPartition(my_list = [5, 1, 9, 3])"
    ],
    "sample_47": [
        "semiOrderedPermutation(my_list = [1, 2, 3, 4])",
        "semiOrderedPermutation(my_list = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(my_list = [1, 2, 3])",
        "semiOrderedPermutation([1, 2, 3])",
        "semiOrderedPermutation(my_list = [2, 1, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(my_list = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation([2, 3, 1, 4])"
    ],
    "sample_44": [
        "semiOrderedPermutation(my_list = [1, 3, 2])",
        "semiOrderedPermutation(nums = [2, 0, 1])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [1,2,3,4])",
        "semiOrderedPermutation([1,2,3,4,5])",
        "semiOrderedPermutation(nums = [2,3,1,4])",
        "semiOrderedPermutation(my_list = [1, 2, 3, 4])"
    ]
}