{
    "sample_167": [
        "isAcronym(words = [\"a\", \"b\", \"c\"], s = \"abc\")",
        "isAcronym(words = [\"a\", \"b\", \"c\"], s = \"abc\")",
        "isAcronym(words = [\"abc\", \"bc\", \"a\"], s = \"abc\")",
        "isAcronym(words = [\"abcd\", \"bcde\", \"cdef\"], s = \"abcde\")",
        "isAcronym(words = [\"ant\", \"bat\", \"cat\"], s = \"bct\")",
        "isAcronym(words = [\"c++\", \"c#\"], s = \"cpp\")",
        "isAcronym(words=[\"banana\", \"coco\"], s = \"bna\")",
        "isAcronym(words = [\"abr\", \"cat\", \"dog\", \"eas\"], s = \"abc\")",
        "isAcronym(words=[\"analytical\", \"artificial\", \"intelligence\"], s=\"artificial\")",
        "isAcronym(words = [\"VM\", \"Python\", \"PIP\"], s = \"PIP\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 3, k = 0)",
        "countInterestingSubarrays(nums=[1, 1, 2, 1, 1], m=3, k=0)",
        "countInterestingSubarrays(nums=[1,1,2,1,1], m=3, k=0)",
        "countInterestingSubarrays(nums = [2,4,6], m = 1, k = 1)",
        "countInterestingSubarrays(nums=[2,2,2,1,2,2,1,2,2,2], m=2, k=2)",
        "countInterestingSubarrays(nums=[1, 1, 2, 1, 1], m=2, k=3)",
        "countInterestingSubarrays(nums = [2,2,2,2,5,5,5,8], m = 2, k = 3)",
        "countInterestingSubarrays(nums=[1, 1, 2, 1, 1], m=2, k=1)",
        "countInterestingSubarrays(nums = [2,2,2,2,5,5,5,8], m = 3, k = 1)"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[2, 3], [4, 5], [7, 8]])",
        "numberOfPoints(nums = [[1,2],[3,5],[3,7]])",
        "numberOfPoints(nums = [[1,100],[10,20],[10,50]])",
        "numberOfPoints(nums = [[1,199],[2,200]])",
        "numberOfPoints(nums = [[1, 5], [6, 10], [8, 15]])",
        "numberOfPoints(nums = [[0,2], [1,5], [0,10], [3,15]])",
        "numberOfPoints(nums = [[1,10], [2,5], [4,15], [20,30]])",
        "numberOfPoints(nums = [[1,3], [2,2], [1,4], [2,3], [3,4], [1,5], [1,2]])",
        "numberOfPoints(nums = [[1,4], [5,8], [2,6], [3,7], [8,10], [10,13]])",
        "numberOfPoints(nums = [[3, 5], [2, 4], [1, 6], [4, 7], [3, 6], [4, 8]])"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = ['easy', 'problem'], separator = ',')",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = ['easy', 'problem'], separator = \" \")",
        "splitWordsBySeparator(words = ['easy', 'problem'], separator = 'p')",
        "splitWordsBySeparator(words = ['easy, problem'], separator = ', ')",
        "splitWordsBySeparator(words = ['A', 'b', 'c'], separator = 'a')",
        "splitWordsBySeparator(words = ['easy', 'problem'], separator = 'y')",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"orange\"], separator = 'a')",
        "splitWordsBySeparator(words = [\"the\", \"f\", \"ox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"], separator = \" \")"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [1, 3]])",
        "numberOfPoints(nums = [[1, 1], [3, 4], [3, 5], [4, 5]])",
        "numberOfPoints(nums = [[1, 1], [2, 3], [2, 4], [4, 5]])",
        "numberOfPoints(nums=[[1, 2], [2, 3], [3, 4], [1, 3]])",
        "numberOfPoints(nums = [[1,2], [3,4], [5,6], [5,6]])",
        "numberOfPoints(nums = [[1, 2], [1, 4], [3, 4], [3, 5]])",
        "numberOfPoints(nums = [[1,1000000]])",
        "numberOfPoints(nums = [[1, 3], [5, 9], [13, 15]])",
        "numberOfPoints(nums = [[1,5], [1,5], [1,5], [2,7]])",
        "numberOfPoints(nums = [[1, 4], [0, 2], [3, 7], [6, 9], [4, 6]])"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [3, 4, 1, 6, 2])",
        "countCompleteSubarrays(nums = [1,1,2,2,3,3])",
        "countCompleteSubarrays(nums = [2, 3, 1, 4, 5])",
        "countCompleteSubarrays(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countCompleteSubarrays(nums = [2, 1, 0, 4, 3, 5])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ',')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = '-')",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = \", \")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ' )",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"t\")"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 1, 2, 2, 3])",
        "maxIncreasingGroups(u = [1, 3, 2, 3, 4, 1])",
        "maxIncreasingGroups(u = [1, 1, 2, 2, 3, 3, 4, 4, 5])",
        "maxIncreasingGroups(u = [1,2,3,4,5,6])",
        "maxIncreasingGroups(u = [1, 1, 2, 3, 3, 4, 4, 5])",
        "maxIncreasingGroups(u = [1, 3, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1,1,1,1])",
        "maxIncreasingGroups(u = [5, 4, 2, 7, 8, 3, 1, 9])",
        "maxIncreasingGroups(u = [1, 2, 1, 1, 2, 1, 1, 2, 1, 2])",
        "maxIncreasingGroups(u = [1,3,3,5,7,9,9,11,11,11,12,13,15])"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1,4,6,8,10], x = 2)",
        "minAbsoluteDifference(nums = [2,4,5,3], x = 4)",
        "minAbsoluteDifference(nums = [1,4,8,10,20,30,50,60], x = 4)",
        "minAbsoluteDifference(nums = [2,2,2,2,5,5,7,10,12,12,15], x = 4)",
        "minAbsoluteDifference(nums = [2,1,5,10,8], x = 3)",
        "minAbsoluteDifference(nums = [2,2,5,5,9], x = 2)",
        "minAbsoluteDifference(nums = [2,3,7,5,10,14], x = 4)",
        "minAbsoluteDifference(nums = [5,2,7,2,8], x = 4)",
        "minAbsoluteDifference(nums = [-2,-3,6,7,9,10], x = 5)",
        "minAbsoluteDifference(nums = [2,5,15,4,13], x = 2)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [2, 4, 6], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 9, k = 6)",
        "countInterestingSubarrays(nums=[4,2,6], modulo=5, k=1)",
        "countInterestingSubarrays(nums = [4, 4, 4, 5], modulo = 5, k = 4)",
        "countInterestingSubarrays(nums=[4,3,2,4,1,4], modulo=5, k=1)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1,4,4], m = 5)",
        "canSplitArray(nums = [3,2,2,2,4,3,2,1], m = 5)",
        "canSplitArray(nums = [1, 2, 1], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 3], m = 5)",
        "canSplitArray(nums = [2,1,2], m = 5)",
        "canSplitArray(nums = [3,2,1], m = 2)",
        "canSplitArray(nums = [2,1], m = 1)",
        "canSplitArray(nums = [1,2,3,3,3], m = 2)",
        "canSplitArray(nums=[1, 2, 4, 3], m = 4)"
    ],
    "sample_169": [
        "isAcronym(words=[\"abc\", \"xyz\"], s=\"abcxyz\")",
        "isAcronym(words = ['abc', 'xyz'], s = \"abcxyz\")",
        "isAcronym(words = [\"act\", \"actually\"], s = \"act\")",
        "isAcronym(words = ['cat', 'dog', 'tac'], s = \"tac\")",
        "isAcronym(words = ['apple', 'microsoft', 'google'], s = \"abc\")",
        "isAcronym(words = [\"bear\", \"banana\", \"army\"], s = \"baa\")",
        "isAcronym(words = [\"abc\", \"bca\", \"cbb\"], s = \"acb\")",
        "isAcronym(words = [\"google\", \"is\", \"not\", \"good\"], s = \"goog\")",
        "isAcronym(words = [\"books\", \"shed\", \"desk\"], s = \"bs\")",
        "isAcronym(words=[\"f\", \"go\", \"g\", \"go\"], s=\"go\")"
    ],
    "sample_121": [
        "minimumIndex(nums = [3, 4, 3, 2, 3, 1, 3])",
        "minimumIndex(nums = [3, 3, 1, 3, 3, 2])",
        "minimumIndex(nums = [3,2,1])",
        "minimumIndex(nums = [3,3,1,3])",
        "minimumIndex(nums = [3,1,2])",
        "minimumIndex(nums = [2,2,1])",
        "minimumIndex(nums = [1,2,3,3,2,2,3,1])",
        "minimumIndex(nums = [3, 1, 3, 6, 3, 6, 6, 3, 3])",
        "minimumIndex(nums = [3, 3, 1, 3, 3, 3, 3, 3])",
        "minimumIndex(nums = [1,2,3,4,5,6,6,6,7,8,9,9,9,9])"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 5, offers = [[2, 3, 10], [1, 2, 5], [2, 4, 15]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 10], [1, 2, 5], [2, 4, 1]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 10], [1, 2, 10], [4, 5, 10]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 10], [1, 2, 5], [2, 4, 15]])",
        "maximizeTheProfit(n = 4, offers = [[2, 3, 100], [5, 10, 20]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 10], [1, 2, 1], [3, 4, 1]])",
        "maximizeTheProfit(n=2, offers=[[1, 2, 5], [3, 4, 10]])",
        "maximizeTheProfit(n = 6, offers = [[2, 6, 10], [5, 10, 20]])",
        "maximizeTheProfit(n = 6, offers = [[2, 3, 10], [1, 2, 5], [6, 10, 20]])",
        "maximizeTheProfit(n= 5, offers = [[2, 3, 10], [1, 2, 5], [2, 4, 7], [1, 3, 1]])"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [2, 3, -2, 4])",
        "maximumTripletValue(nums = [-2, 0, 3, -5, 2, -1])",
        "maximumTripletValue(nums = [3, -1, 1, 2])",
        "maximumTripletValue(nums = [3, -1, 1, 2])",
        "maximumTripletValue(nums=[-2, 0, -1])",
        "maximumTripletValue(nums = [-1,0,1])",
        "maximumTripletValue(nums = [1, -2, 0, 4, 3])",
        "maximumTripletValue(nums=[12,345,2,6,7896])",
        "maximumTripletValue(nums = [-1, 1, 0, -3, -5, 10])",
        "maximumTripletValue(nums = [-3, -5, -4, -2, -6, 2, 4, 1])"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"LL__RR\")",
        "furthestDistanceFromOrigin(moves = \"LL_RR\")",
        "furthestDistanceFromOrigin(moves = \"RLRRLLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LLLLLRRRRR\")",
        "furthestDistanceFromOrigin(moves = 'LLLRL')",
        "furthestDistanceFromOrigin(moves = \"UURDDLLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRLDD\")",
        "furthestDistanceFromOrigin(moves = 'RLLLLRLRL')",
        "furthestDistanceFromOrigin(moves = \"LLLLLLLLLLLLLLLLLLLLLLLLR\")",
        "furthestDistanceFromOrigin(moves = 'L_LL_RR_LLRRLR_L_LLRRL_R_RLRRRLLRR_LL')"
    ],
    "sample_149": [
        "finalString(s = \"string\")",
        "finalString(s = 'banana')",
        "finalString(s = 'thisisatest')",
        "finalString(s = \"interesting\")",
        "finalString(s = 'this is a test')",
        "finalString(s = 'reversethisstring')",
        "finalString(s = 'this is a test')",
        "finalString(s='car')",
        "finalString(s='rtsg')",
        "finalString(s='frain')"
    ],
    "sample_162": [
        "maxSum(nums = [12, 17, 15, 13, 10, 11, 12])",
        "maxSum(nums = [112, 112, 131, 131, 112, 112, 112])",
        "maxSum(nums = [12, 10, 9, 1, 2, 3, 1, 2, 4])",
        "maxSum(nums = [9, 3, 4, 2, 10, 5, 10, 8, 9])",
        "maxSum(nums = [21, 32, 11, 4, 33, 22, 1])",
        "maxSum(nums = [99, 2, 3, 4, 20, 88, 5, 7])",
        "maxSum(nums = [34, 532, 64, 12, 99, 100, 2, 3])",
        "maxSum(nums = [34, 56, 12, 8, 99, 33, 3, 44, 22, 22, 2])",
        "maxSum(nums = [28, 44, 8, 54, 73, 78, 76, 54, 78])",
        "maxSum(nums = [49, 69, 12, 21, 3, 34, 23, 44, 42, 34, 51, 4, 25, 64, 87, 73, 29, 69, 91, 37, 78, 57, 95, 29, 82, 24, 25, 79, 35, 5, 57, 38, 52, 50, 74, 53, 86, 99, 6, 20, 92, 19, 23, 97, 44, 69, 60, 16, 36, 18, 45, 8, 20, 78, 7, 1, 3, 64, 52, 74, 86, 57, 72, 60, 97, 78, 31, 50, 87, 52, 62, 42, 87, 7, 54, 59, 40, 81, 56, 20, 92, 92, 30, 48, 70, 61, 95, 43, 30, 41, 43, 22, 55, 56, 80, 98, 98, 57, 25, 82, 61, 34, 48, 63, 91, 39, 47, 36, 75, 61, 48, 70, 19, 91, 68, 27, 33, 19, 75, 55, 95, 78, 54, 14, 34, 63, 68, 64, 92, 57, 84, 80, 99, 71, 92, 82, 88, 67, 99, 2, 42, 12, 61, 5, 71, 62, 52, 94, 44, 97, 95, 67, 66, 92, 36, 50, 92, 23, 63, 8"
    ],
    "sample_230": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1,2,3,4])",
        "countWays(nums = [10, 1, 2, 7, 6, 1, 5])",
        "countWays(nums=[1, 1, 1, 1])",
        "countWays(nums = [5, 3, 4, 2, 6])",
        "countWays(nums = [3, 3, 3, 2, 2, 1])",
        "countWays(nums=[4, 2, 3, 1])",
        "countWays(nums = [5, 3, 7, 10, 9])",
        "countWays(nums = [2, 2, 1, 1, 1, 2, 2, 1])",
        "countWays(nums=[2, 4, 5, 1, 2, 7, 9, 1])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 2, target = 6)",
        "minimumPossibleSum(n = 4, target = 5)",
        "minimumPossibleSum(n=2, target=1)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 5, offers = [[2, 1, 2], [3, 2, 3]])",
        "maximizeTheProfit(N = 4, offers = [[1, 2, 4], [2, 3, 5], [3, 4, 6]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 4], [1, 3, 3]])",
        "maximizeTheProfit(N = 6, offers = [[1, 2, 4], [2, 5, 3]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 5], [2, 3, 4]])",
        "maximizeTheProfit(N = 4, offers = [[1, 2, 3], [2, 4, 5]])",
        "maximizeTheProfit(N = 5, offers = [[2, 3, 10], [5, 11, 25], [19, 20, 3]])",
        "maximizeTheProfit(3, [[1, 2, 4], [2, 3, 5], [4, 5, 1]])",
        "maximizeTheProfit(4, offers=[[2, 3, 1], [3, 3, 2]])",
        "maximizeTheProfit(N = 5, offers = [[1,2,3], [2,4,7], [3,5,12], [4,6,25]])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 6, offers = [[2, 5, 4], [1, 3, 1]])",
        "maximizeTheProfit(n = 6, offers = [[2, 5, 4], [1, 5, 10], [6, 3, 1]])",
        "maximizeTheProfit(n=5, offers=[[2, 1, 10], [3, 2, 5]])",
        "maximizeTheProfit(n = 5, offers = [[2, 1, 20], [3, 2, 15]])",
        "maximizeTheProfit(n = 2, offers = [[2, 1, 5], [5, 0, 6]])",
        "maximizeTheProfit(n = 5, offers = [[2, 1, 5], [3, 2, 10], [1, 1, 1]])",
        "maximizeTheProfit(n = 6, offers = [[2, 5, 4], [1, 3, 2], [6, 1, 3]])",
        "maximizeTheProfit(n = 2, offers = [[2, 1, 2], [3, 0, 1]])",
        "maximizeTheProfit(n = 5, offers = [[2, 1, 3], [1, 3, 2], [3, 2, 4], [4, 2, 3], [4, 3, 2]])",
        "maximizeTheProfit(\n    n = 6,\n    offers = [[1, 2, 5], [2, 5, 7], [3, 4, 3], [4, 2, 1]]\n)"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [6, 7, 8, 9], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 10], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 4, 4, 5, 6], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [30, 10, 40], target = 45)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 13, 14, 16, 15], target = 13)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 30, 50, 30, 50, 20, 10, 30, 50, 20, 10, 50], target = 25)"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,2,3,4,5,6])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "countCompleteSubarrays(nums = [1,0,1,0,1])",
        "countCompleteSubarrays(nums = [2, 1, 3, 2])",
        "countCompleteSubarrays(nums = [3,4,7,2,5,8,4,5])",
        "countCompleteSubarrays(nums = [2,3,1,1,2,3,2,1,2])",
        "countCompleteSubarrays(nums = [3,2,3,2,2,2,2,3,5])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1,2,3])",
        "countWays(nums = [0, 1, 2])",
        "countWays(nums = [2,4,6,8,10])",
        "countWays(nums = [3, 3, 2, 1])",
        "countWays(nums = [3, 2, 3, 4, 2])",
        "countWays(nums = [2, 3, 5, 6, 7, 10])",
        "countWays(nums = [3, 0, 1, 4, 2])",
        "countWays(nums=[1, 2, 3, 1, 2, 3])",
        "countWays(nums = [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [1,0,1,2,3,0])",
        "maxIncreasingGroups(usageLimits = [3, 5, 1, 4, 2])",
        "maxIncreasingGroups(usageLimits = [3,5,10,20,25])",
        "maxIncreasingGroups(usageLimits = [2,3,2])",
        "maxIncreasingGroups(usageLimits = [3,2,1,2,1,2,1,2,1])",
        "maxIncreasingGroups(usageLimits=[1,0,1,2,1,1,1,1,1])",
        "maxIncreasingGroups(count = [1,0,2,3,0,0,3,0,3])",
        "maxIncreasingGroups(usageLimits = [3, 2, 1, 1, 3, 3, 1, 1])",
        "maxIncreasingGroups(count = [2, 5, 3, 5, 1, 2, 2, 3, 3, 2])",
        "maxIncreasingGroups(usageLimits = [1,2,1,3,2,3,4,5,2,1,4,3,1,1,4])"
    ],
    "sample_173": [
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 3, k = 9)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 2, k = 7)",
        "minimumSum(n = 1, k = 1)",
        "minimumSum(n = 4, k = 21)"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [2,2,2,1,2,2,1,2,2,2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [2,2,2,1,2,2,1,2,2,2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [2,2,2,1,2,2,1,2,2,2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [2, 4, 6], m = 1, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10,11,12], m = 5, k = 2)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9])",
        "countCompleteSubarrays(nums = [1, 0, 0, 1, 1, 0, 1, 1, 1])",
        "countCompleteSubarrays(nums = [2, 2, 1, 1, 1, 2, 2])",
        "countCompleteSubarrays(nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,",
        "countCompleteSubarrays(nums = [1, 0, 1, 1, 1, 1, 1, 0, 1, 1])",
        "countCompleteSubarrays(nums=[2, 3, 1, 2, 3, 4, 3])",
        "countCompleteSubarrays(nums = [3, 4, 5, 2, 1, 6, 0, 9, 8])"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,1,1], k = 0)",
        "longestEqualSubarray(nums = [1,1,1,1,1], k = 0)",
        "longestEqualSubarray(nums = [0,1,0,1,1,1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [0,0,0,0,0,0], k = 1)",
        "longestEqualSubarray(nums = [0,0,1,1,1], k = 2)",
        "longestEqualSubarray(nums = [0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1], k = 1)"
    ],
    "sample_170": [
        "isAcronym(words = [\"ab\", \"bc\"], s = \"abc\")",
        "isAcronym(words = [\"hack\", \"hacker\", \"hacking\"], s = \"hack\")",
        "isAcronym(words = [\"What\", \"is\", \"the\", \"meaning\", \"of\", \"life?\"], s = \"WOTML\")",
        "isAcronym(words = [\"Python\", \"Ruby\", \"Perl\"], s = \"Py\")",
        "isAcronym(words = [\"program\", \"language\", \"design\"], s = \"pld\")",
        "isAcronym(words = [\"apple\", \"fruit\", \"pie\"], s = \"app\")",
        "isAcronym(words = [\"dog\", \"hot\", \"doggy\"], s = \"dhg\")",
        "isAcronym(words = [\"for\", \"and\", \"be\"], s = \"fb\")",
        "isAcronym(words = [\"I\", \"know\", \"python\", \"very\", \"well\"], s = \"ipw\")",
        "isAcronym(words = [\"awesome\", \"awesomely\", \"amazingly\", \"amaziness\", \"amazingness\"], s = \"Amazing\")"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = \"100101\")",
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s='001')",
        "maximumOddBinaryNumber(s = '10110010')",
        "maximumOddBinaryNumber(s = '10110010')",
        "maximumOddBinaryNumber(s = '1111111111')",
        "maximumOddBinaryNumber(s='11110000')",
        "maximumOddBinaryNumber(s = \"100110101\")",
        "maximumOddBinaryNumber(s='00011011')",
        "maximumOddBinaryNumber(s = \"111101110\")"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 4])",
        "countWays(nums = [2, 4, 6])",
        "countWays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countWays(nums = [1, 4, 5, 6])",
        "countWays(nums = [3, 5, 4, 2])",
        "countWays(nums = [3, 4, 4, 6, 10])",
        "countWays(nums = [3, 4, 5, 2, 1, 5])",
        "countWays(nums = [1,1,4,1,1,3])"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 5, offers = [[2, 1, 5], [3, 2, 6], [4, 3, 10]])",
        "maximizeTheProfit(n = 5, offers = [[2, 1, 3], [3, 2, 2], [4, 2, 4], [5, 1, 5]])",
        "maximizeTheProfit(n = 5, offers = [[2, 1, 5], [3, 1, 10], [4, 1, 20]])",
        "maximizeTheProfit(n = 2, offers = [[2, 1, 5], [1, 0, 3]])",
        "maximizeTheProfit(n = 4, offers = [[2, 1, 5], [2, 2, 3], [3, 0, 10]])",
        "maximizeTheProfit(n = 5, offers = [[2, 1, 10], [3, 0, 15]])",
        "maximizeTheProfit(n = 10, offers = [[2, 5, 4], [5, 10, 2], [1, 6, 1]])",
        "maximizeTheProfit(n=5, offers=[[2, 1, 5], [3, 2, 6], [5, 6, 10]])",
        "maximizeTheProfit(n = 10, offers = [[9, 0, 10], [5, 1, 5]])",
        "maximizeTheProfit(n=4, offers=[[2, 1, 5], [1, 2, 2], [2, 3, 4], [3, 1, 1]])"
    ],
    "sample_122": [
        "minimumIndex(nums = [1,2,3,1,1,3])",
        "minimumIndex(nums = [1,1,1,3,3,3,7])",
        "minimumIndex(nums = [1, 2, 3, 1, 1, 3])",
        "minimumIndex(nums = [2, 2, 1, 1])",
        "minimumIndex(nums = [1,1,2,2,2,1])",
        "minimumIndex(nums = [3, 1, 1, 1, 1, 1, 2])",
        "minimumIndex(nums = [3,2,2,2,2,2,2,3,4])",
        "minimumIndex(nums = [2,3,3,5,5,6,7,8])",
        "minimumIndex(nums = [0,1,2,2,2,2,3,5,5])",
        "minimumIndex(nums = [2,3,2,2,2,4,1,2,1])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1,2], [2,3], [4,5]])",
        "numberOfPoints(nums = [[1,100],[1,100],[1,100]])",
        "numberOfPoints(nums = [[1,1],[2,2],[3,4],[3,5],[4,5]])",
        "numberOfPoints(nums = [[1,3],[2,4]])",
        "numberOfPoints(nums = [[1,3], [5,6], [7,9]])",
        "numberOfPoints(nums = [[1, 5], [6, 10], [3, 7]])",
        "numberOfPoints(nums = [[-2,2],[0,3],[4,5]])",
        "numberOfPoints(nums=[[0,3],[1,5],[2,8]])",
        "numberOfPoints(nums = [[1,1],[2,3],[4,7],[1,8]])",
        "numberOfPoints(nums = [[-1, 1], [-1, 0], [0, 1], [0, 2]])"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"carrot\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"a b\", \"c d\", \"e f\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"grapes\"], separator = \"e\")",
        "splitWordsBySeparator(words = [\"a b c\", \"a-b-c\", \"a_b_c\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple banana\", \"cherry\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\"], separator = \"o\")",
        "splitWordsBySeparator(words = [\"banana\", \"orange\", \"apple\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"cool\", \"string\"], separator = \"c\")"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 4, target = 9)",
        "minimumPossibleSum(n = 5, target = 1)",
        "minimumPossibleSum(n = 5, target = 2)",
        "minimumPossibleSum(n = 7, target = 5)",
        "minimumPossibleSum(n = 11, target = 3)",
        "minimumPossibleSum(n = 20, target = 20)"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [1, 3]])",
        "numberOfPoints(nums = [[0,2], [5,10], [13,23], [24,25]])",
        "numberOfPoints(nums = [[0,2],[5,10],[13,23],[24,25]])",
        "numberOfPoints(nums = [[1, 3], [5, 9]])",
        "numberOfPoints(nums = [[1, 3], [4, 5], [5, 7]])",
        "numberOfPoints(nums = [[1, 3], [5, 5], [2, 2]])",
        "numberOfPoints(nums = [[1,2], [2, 3]])",
        "numberOfPoints(nums = [[1, 5], [5, 9], [2, 6]])",
        "numberOfPoints(nums = [[0,2],[5,8],[4,9]])",
        "numberOfPoints(nums = [[0,0],[0,1],[0,2],[1,2],[1,3],[1,4],[1,5],[2,5]])"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1], m = 2, k = 0)",
        "countInterestingSubarrays(nums=[1, 1, 2, 1, 1], m=3, k=0)",
        "countInterestingSubarrays(nums = [2,2,2,1,2,2,1,2,2,2], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [2,2,2,1,2,2,1,2,2,2], m = 3, k = 0)"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [12, 345, 2, 6, 7896], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 0, 1, 0, 0, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [5, 1, 1, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [12, 1, 2, 22], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 3, 3, 8, 5, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [5, 5, 2, 3, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [10, 2, 3, 5, 24, 6], k = 2)",
        "sumIndicesWithKSetBits(nums=[15, 21, 33, 51, 79], k=4)"
    ],
    "sample_203": [
        "minimumOperations(num = '5000')",
        "minimumOperations(num = \"105\")",
        "minimumOperations(num = \"20025\")",
        "minimumOperations(num = \"1010001\")",
        "minimumOperations(num = \"200001\")",
        "minimumOperations(num = '01200')",
        "minimumOperations(num = \"998989898\")",
        "minimumOperations(num = \"17752400\")",
        "minimumOperations(num = \"22234444\")",
        "minimumOperations(num = '22757020')"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1], modulo = 3, k = 0)",
        "from collections import Counter\n\ndef countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    cnt = Counter()\n    cnt[0] = 1\n    ans = 0\n    s = 0\n    for a in nums:\n        s += a%modulo",
        "countInterestingSubarrays(nums = [2,2,2,2,5,5,5,8], modulo = 10, k = 5)",
        "countInterestingSubarrays(nums = [2,2,2,1,2,2,1,2,2,2,2], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums=[1,1,2,1,1], modulo=5, k=2)",
        "from collections import Counter\n\ndef countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    cnt = Counter()\n    cnt[0] = 1\n    ans = 0\n    s = 0\n    for a in nums:\n        s += a%modulo",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], modulo = 10, k = 7)",
        "countInterestingSubarrays(nums = [4,3,1,1,2], modulo = 10, k = 4)",
        "from collections import Counter\n\ndef countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    cnt = Counter()\n    cnt[0] = 1\n    ans = 0\n    s = 0\n    for a in nums:\n        s += a%modulo",
        "countInterestingSubarrays(nums = [5, 2, 9, 1, 4, 1, 9, 2, 5], modulo = 5, k = 9)"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1, 2, 1, 2, 3], K = 2)",
        "longestEqualSubarray(A = [1, 2, 1, 2, 3], K = 2)",
        "longestEqualSubarray(A = [1,2,1,2,3], K = 2)",
        "longestEqualSubarray(A = [1,2,1,2,3], K = 2)",
        "longestEqualSubarray(A = [1,2,3,1,2,3], K = 2)",
        "longestEqualSubarray(A = [1,2,3,4,5], K = 3)",
        "longestEqualSubarray(A = [1,1,1,1,1], K = 0)",
        "longestEqualSubarray(A = [0,1,1,1,1,1,1,1,1,1], K = 2)",
        "longestEqualSubarray(A = [1, 2, 2, 1, 3, 4], K = 2)",
        "longestEqualSubarray(A = [1, 1, 1, 1, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4], K = 2)"
    ],
    "sample_146": [
        "finalString(s = 'pinter')",
        "finalString(s = \"inter\")",
        "finalString(s = 'this is a test')",
        "finalString(s = 'piper')",
        "finalString(s = \"hello\")",
        "finalString(s = \"india\")",
        "finalString(s = 'tin')",
        "finalString(s = \"supercalifragilisticexpialidocious\")",
        "finalString(s = 'iibi')",
        "finalString(s = 'ipointer')"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 5, 6], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 6, 7, 8, 9], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 3, 4, 4], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 5, 10, 15, 20], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [6, 1, 8, 5, 4, 9, 5], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 3, 5, 2, 6, 2, 4, 1], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1000, 400, 10000, 100], target = 400)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 12, 16, 18, 23, 17], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [45, 23, 67, 10, 89, 23], target = 10)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 2], [2, 4], [3, 6]])",
        "numberOfPoints(nums = [[1,2], [3,4], [5,5]])",
        "numberOfPoints(nums = [[1, 5], [2, 3], [3, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [1, 6]])",
        "numberOfPoints(nums = [[1,2],[2,3],[2,3]])",
        "numberOfPoints(nums = [[1,2],[3,5],[4,5],[5,7],[6,9]])",
        "numberOfPoints(nums = [[1,2],[3,4],[4,5],[1,5]])",
        "numberOfPoints(nums = [[1,3], [1,10], [5,10]])",
        "numberOfPoints(nums = [[2, 3], [4, 7], [4, 5], [1, 10]])",
        "numberOfPoints(nums=[(0, 1), (0, 2), (0, 3), (1, 3), (1, 4), (2, 5), (2, 6)])"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1,2,3,4,5])",
        "maxIncreasingGroups(A = [1,2,3,4,5])",
        "maxIncreasingGroups(A = [1,2,3,4,5])",
        "maxIncreasingGroups(A = [1,2,3,4,5])",
        "maxIncreasingGroups(A = [1, 1, 2, 2, 3, 3, 4, 4, 5])",
        "maxIncreasingGroups(A = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "maxIncreasingGroups(A = [1,2,3,4,5,6,7])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 10])",
        "maxIncreasingGroups(A = [1, 1, 2, 3, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 3, 10, 6, 7, 8, 12, 24])"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 6, offers = [[2, 2, 3], [5, 6, 8], [1, 3, 1]])",
        "maximizeTheProfit(n = 5, offers = [[2, 1, 10], [3, 1, 5]])",
        "maximizeTheProfit(n = 5, offers = [[2, 1, 10], [3, 2, 20]])",
        "maximizeTheProfit(n=4, offers=[[1,2,3],[2,3,2],[3,2,1]])",
        "maximizeTheProfit(n = 5, offers = [[2, 1, 100], [3, 1, 100], [2, 2, 200]])",
        "maximizeTheProfit(n = 6, offers = [[1, 3, 20], [2, 2, 15], [3, 1, 5], [6, 1, 10]])",
        "maximizeTheProfit(n = 5, offers = [[2, 1, 20], [3, 1, 40], [1, 3, 10]])",
        "maximizeTheProfit(n=3, offers=[[2,3,4],[1,5,10],[2,10,6]])",
        "maximizeTheProfit(n=2, offers=[[2, 1, 3], [4, 3, 2], [5, 6, 2]])",
        "maximizeTheProfit(n = 3, offers = [[3,2,1], [2,3,2], [3,3,1]])"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"R_R_R\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"L_R\")",
        "furthestDistanceFromOrigin(moves = \"LL__RR\")",
        "furthestDistanceFromOrigin(moves = \"R_L_R_R\")",
        "furthestDistanceFromOrigin(moves = \"R\")",
        "furthestDistanceFromOrigin(moves = \"L_RL_\")",
        "furthestDistanceFromOrigin(moves = \"R_L_R\")",
        "furthestDistanceFromOrigin(moves = \"LLLLLLLLRL\")",
        "furthestDistanceFromOrigin(moves = \"RRL_L_RL_RR_L\")"
    ],
    "sample_175": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 9)",
        "minimumSum(n = 3, k = 9)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 4, k = 10)",
        "minimumSum(n = 4, k = 8)",
        "minimumSum(n = 3, k = 13)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,100],[1,100],[1,100]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[2,2],[3,3]])",
        "numberOfPoints(nums = [[1,3],[5,5],[2,2]])",
        "numberOfPoints(nums=[[1,2],[2,3],[3,4],[4,5],[5,6],[1,10]])",
        "numberOfPoints(nums = [[0,2],[1,5],[0,3]])",
        "numberOfPoints(nums=[[1,10],[4,9],[9,12]])",
        "numberOfPoints(nums=[(1,2),(1,5),(1,5)])",
        "numberOfPoints(nums = [[1,100], [1,2], [1,2], [2,4], [2,5]])",
        "numberOfPoints(nums = [[1, 3], [1, 11], [2, 21]])"
    ],
    "sample_205": [
        "minimumOperations(num = \"255\")",
        "minimumOperations(num = \"250500\")",
        "minimumOperations(num = \"0110111\")",
        "minimumOperations(num = \"332\")",
        "minimumOperations(num = \"111110000\")",
        "minimumOperations(num = \"210010\")",
        "minimumOperations(num = \"123456789\")",
        "minimumOperations(num = \"0001257500\")",
        "minimumOperations(num = \"10200250\")",
        "minimumOperations(num = \"24130\")"
    ],
    "sample_120": [
        "minimumIndex(nums = [1, 2, 3, 2, 1])",
        "minimumIndex(nums = [2, 2, 2, 0, 1, 1])",
        "minimumIndex(nums = [1,2,2,3,1])",
        "minimumIndex(nums = [2, 3, 1, 2])",
        "minimumIndex(nums = [1, 2, 2, 1, 1, 3])",
        "minimumIndex(nums = [1, 1, 2, 3, 3, 3, 3, 4])",
        "minimumIndex(nums = [3,3,2,1])",
        "minimumIndex(nums = [2, 2, 3, 7, 5, 7])",
        "minimumIndex(nums = [1,1,2,2,2,1,2,2,2,2])",
        "minimumIndex(nums = [4, 3, 2, 2, 2, 3, 3, 2, 2, 1, 2, 2])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"LLRRLLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"RRRRLLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LRLLLRRRLR\")",
        "furthestDistanceFromOrigin(moves = \"R_R\")",
        "furthestDistanceFromOrigin(moves = \"LLL__RRRR\")",
        "furthestDistanceFromOrigin(moves = \"L_L_R_R_R\")",
        "furthestDistanceFromOrigin(moves = \"LRLLRRLLL\")",
        "furthestDistanceFromOrigin(moves = \"L_LL_R\")",
        "furthestDistanceFromOrigin(moves = \"RLLLRLL_R\")",
        "furthestDistanceFromOrigin(moves = \"_LLL_LL_R_RRR__LL_RRRR\")"
    ],
    "sample_161": [
        "maxSum(nums = [9, 3, 6, 1])",
        "maxSum(nums = [1, 7, 3])",
        "maxSum(nums = [123, 456, 789])",
        "maxSum(nums = [34, 5, 6, 12, 1, 9])",
        "maxSum(nums = [2,3,5,2,4,6,8,1])",
        "maxSum(nums = [34, 3, 100, 99, 33, 44, 100, 100])",
        "maxSum(nums = [13, 11, 14, 13, 11, 14])",
        "maxSum(nums = [11,13,13,13,11])",
        "maxSum(nums = [12, 1, 11, 45, 2, 33, 15])",
        "maxSum(nums = [2, 10, 3, 24, 25, 11, 1, 92, 22])"
    ],
    "sample_160": [
        "maxSum(nums = [1,2,3,4])",
        "maxSum(nums = [12, 1, 61, 5, 9, 2])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9])",
        "maxSum(nums = [34, 5, 6, 12, 18])",
        "maxSum(nums = [12, 1, 2, 3, 1])",
        "maxSum(nums = [2,10,6,7,8,9])",
        "maxSum(nums = [1,2,3,5,6,1,4,7,9])",
        "maxSum(nums = [243, 321, 387])",
        "maxSum(nums = [10,2,1,3,5,7,3,4,2,9,1])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = ['one two', 'three four', 'five six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one,two,three,four,five,six'], separator = ',')",
        "splitWordsBySeparator(words = 'one two three four five six'.split(), separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = 'one,two,three,four,five,six'.split(','), separator = ',')",
        "splitWordsBySeparator(words = 'one, two, three, four, five, six'.split(', '), separator = ',')",
        "splitWordsBySeparator(words = ['one two', 'three,four,five,six'], separator = ',')",
        "splitWordsBySeparator(words = [\"one two\", \"three four\", \"five\"], separator = \" \")",
        "splitWordsBySeparator(words=['one,two,,three', 'four,,five,six'], separator=',')",
        "splitWordsBySeparator(words = 'one,,two, three,,four, five,  , six, '.split(','), separator = ',')"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 1, 1], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours=[1,1,1], target=2)",
        "numberOfEmployeesWhoMetTarget(hours = [3,4,2], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 9, 10], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [1,1,2,2,3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [6, 5, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 8, 6, 0, 0], target = 4)"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [2,4,6,8], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5,6,7,8,9,10], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 9, 8], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [8,8,8,8,8,8,8], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 5, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4, 5, 8, 3], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours=[4,8,1,6,5,10,1], target=4)",
        "numberOfEmployeesWhoMetTarget(hours=[1, 2, 4, 3, 6, 3, 2, 1, 7], target=4)"
    ],
    "sample_171": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 6)",
        "minimumSum(n = 4, k = 8)",
        "minimumSum(n = 2, k = 7)",
        "minimumSum(n = 1, k = 5)",
        "minimumSum(n = 2, k = 7)"
    ],
    "sample_159": [
        "maxSum(nums = [12, 345, 2, 6, 7896])",
        "maxSum(nums = [1,2,3,4,5,6])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [10,2,3,4,5])",
        "maxSum(nums=[1,3,4,2,2,4,1])",
        "maxSum(nums=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "maxSum(nums = [23, 13, 19, 23, 22, 12])",
        "maxSum(nums=[52, 9, 27, 14, 16])",
        "maxSum(nums = [1234,5678,23,567,45,2345,1,2,3])",
        "maxSum(nums = [4,3,5,2,1,7,8,7,12,6,5,6,4,2,1])"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 9)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 9)",
        "canSplitArray(nums = [3, 2, 1, 2, 3, 4, 3, 2, 1], m = 5)",
        "canSplitArray(nums = [1,1], m = 2)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 11)",
        "canSplitArray(nums = [3,2,2,2,3], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 9)",
        "canSplitArray(nums = [1, 1, 1, 1], m = 4)",
        "canSplitArray(nums = [1, 1, 1, 1, 1], m = 3)",
        "canSplitArray(nums = [3,2,2,2,3,4,3,2,2,1], m = 4)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"apple banana\", \"pineapple\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \"e\")",
        "splitWordsBySeparator(words = [\"a\", \"bb\", \"ccc\", \"dddd\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"this\", \"is\", \"my\", \"name\"], separator = \"_\")",
        "splitWordsBySeparator(words = \"hello world\".split(\" \"), separator = \"l\")",
        "splitWordsBySeparator(words = [\"good\", \"morning\", \"cabbage\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"rabbit\", \"racecar\", \"racecar\"], separator = \"r\")"
    ],
    "sample_172": [
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 5, k = 4)",
        "minimumSum(n=4, k=3)",
        "minimumSum(n = 6, k = 4)",
        "minimumSum(n = 5, k = 20)",
        "minimumSum(n = 4, k = 11)"
    ],
    "sample_228": [
        "countWays(nums = [0, 0, 1, 1, 2])",
        "countWays(nums=[0,1,2,3])",
        "countWays(nums = [0,0,0,0,0,0,0,0,0,0])",
        "countWays(nums = [1,1,3])",
        "countWays(nums = [0,0,0])",
        "countWays(nums = [0,1,1,1,2,2,3])",
        "countWays(nums=[1,1,0,1])",
        "countWays(nums=[2, 1, 2, 3])",
        "countWays(nums = [0,2,2,3,3,3,3,4,4,4,5])",
        "countWays(nums = [0,0,0,0,0,1,2,2,2,3,3,3,3,3,3,4,4,4,4])"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s = \"10011\")",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = \"110101\")",
        "maximumOddBinaryNumber(s='111')",
        "maximumOddBinaryNumber(s = '111100')",
        "maximumOddBinaryNumber(s = \"1011011\")",
        "maximumOddBinaryNumber(s = \"1100001\")",
        "maximumOddBinaryNumber(s = \"110110101\")",
        "maximumOddBinaryNumber(s = \"0110110010\")"
    ],
    "sample_119": [
        "minimumIndex(nums = [1, 1, 1, 0, 1])",
        "minimumIndex(nums = [2, 2, 1, 1, 1, 2, 2])",
        "minimumIndex(nums = [1, 2, 2, 2, 3])",
        "minimumIndex(nums = [3, 1, 2, 1, 5, 6])",
        "minimumIndex(nums = [1, 2, 2, 2, 1, 3])",
        "minimumIndex(nums = [3, 3, 1, 1, 1, 2, 2, 2])",
        "minimumIndex(nums = [3, 2, 2, 3, 3, 3])",
        "minimumIndex(nums = [5, 1, 1, 3, 3, 1])",
        "minimumIndex(nums=[1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 3, 2])",
        "minimumIndex(nums = [6,6,6,0,4,4,4,2,2,2,2,2,2,2,2])"
    ],
    "sample_153": [
        "canSplitArray(nums = [1,2,3,3,4,5], m = 3)",
        "canSplitArray(nums = [1,2,3,3,4,5], m = 3)",
        "canSplitArray(nums = [3,2,1,2,3,4,3,2,1], m = 3)",
        "canSplitArray(nums = [1,4,4], m = 3)",
        "canSplitArray(nums = [1,2,3,3,3], m = 3)",
        "canSplitArray(nums = [1,2,3,3,3,4,5,6], m = 3)",
        "canSplitArray(nums = [1,2,1,2,1], m = 4)",
        "canSplitArray(nums = [1,2,3,3,3,3,4,5], m = 3)",
        "canSplitArray(nums = [1,4,5,7,8], m = 4)",
        "canSplitArray(nums = [2,3,3,2,3], m = 1)"
    ],
    "sample_147": [
        "finalString(s = 'tin')",
        "finalString(s = 'hello world')",
        "finalString(s = 'mom')",
        "finalString(s = 'this is a string')",
        "finalString(s = 'this is fun')",
        "finalString(s = \"this is a test\")",
        "finalString(s = 'This is an example!')",
        "finalString(s = \"instring\")",
        "finalString(s = 'this is an example')",
        "finalString(s = \"baxgnoi\")"
    ],
    "sample_174": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 4, k = 10)",
        "minimumSum(n = 4, k = 5)",
        "minimumSum(n = 2, k = 6)",
        "minimumSum(n = 2, k = 7)",
        "minimumSum(n = 4, k = 4)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 10, k = 5)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1,4,4], m = 4)",
        "canSplitArray(nums = [1,4,4], m = 4)",
        "canSplitArray(nums = [1,4,4], m = 4)",
        "canSplitArray(nums = [1,4,4], m = 4)",
        "canSplitArray(nums = [1,2,3,4,5], m = 6)",
        "canSplitArray(nums = [1,2,3,4,5,6], m = 3)",
        "canSplitArray(nums = [2,2,2,2,2,2], m = 5)",
        "canSplitArray(nums=[2,2,2,2], m=1)",
        "canSplitArray(nums = [2,3,2,3], m = 4)",
        "canSplitArray(nums = [1, 2, 1, 3, 1, 4, 1, 2, 1, 3], m = 4)"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1,2,3,4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "countCompleteSubarrays(nums = [1,2,2,3,4,7])",
        "countCompleteSubarrays(nums = [1,2,1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 4])",
        "countCompleteSubarrays(nums = [5,2,3,4,6,7])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 4, 5, 5, 6])"
    ],
    "sample_150": [
        "finalString(s = 'banana')",
        "finalString(s = \"mississippi\")",
        "finalString(s = \"rtsng\")",
        "finalString(s = 'hello world')",
        "finalString(s = \"crazy\")",
        "finalString(s = 'this is an example')",
        "finalString(s = \"water\")",
        "finalString(s = 'nfig')",
        "finalString(s = \"this is a test\")",
        "finalString(s = 'Christophe')"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 2, target = 10)",
        "minimumPossibleSum(n = 5, target = 9)",
        "minimumPossibleSum(n = 2, target = 8)",
        "minimumPossibleSum(n = 5, target = 14)",
        "minimumPossibleSum(n = 1, target = 3)",
        "minimumPossibleSum(n=3, target=6)"
    ],
    "sample_176": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 9)",
        "minimumSum(n = 3, k = 9)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 4, k = 7)",
        "minimumSum(n = 2, k = 10)",
        "minimumSum(n = 3, k = 12)",
        "minimumSum(n = 3, k = 14)"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [2,2,2,1,2,2,1,2,2,2], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [2,2,2,1,2,2,1,2,2,2], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [2,4,6], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums=[1, 1, 2, 1, 1], modulo=2, k=1)",
        "countInterestingSubarrays(nums = [5,2,4,1,3], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1,1,2,2,3,4,7], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 1, 1, 1], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1,2,1,1,1], modulo = 2, k = 1)"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [12, 345, 2, 6, 7896], k = 3)",
        "sumIndicesWithKSetBits(nums=[12, 345, 2, 6, 7896], k=1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 0, 0, 0, 0, 1, 1, 1, 1, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [3, 2, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 3, 7, 9, 10, 12], k = 3)",
        "sumIndicesWithKSetBits(nums=[1, 4, 8, 9], k=3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 2, 4, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [10, 9, 8, 5, 6, 2], k = 2)"
    ],
    "sample_151": [
        "finalString(s = 'interesting')",
        "finalString(s = 'this is a test')",
        "finalString(s = 'pqr')",
        "finalString(s = 'This is a test')",
        "finalString(s = \"coding\")",
        "finalString(s = 'Peter')",
        "finalString(s = 'home')",
        "finalString(s = 'lions')",
        "finalString(s = 'This is an example.')",
        "finalString(s = 'DinoX')"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [0, 0, 0, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 4, 6], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 0, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 3, 1, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 4, 5, 7, 8, 11], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums=[3, 5, 6, 7, 9], k=3)",
        "sumIndicesWithKSetBits(nums = [12, 34, 3, 1, 45, 3, 1], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 12, 33, 13, 11, 12], k = 1)"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 3, 2])",
        "maxIncreasingGroups(usageLimits = [1, 3, 2])",
        "maxIncreasingGroups(usageLimits = [3,3,3,1,3])",
        "maxIncreasingGroups(usageLimits = [1,2,3,4,5])",
        "maxIncreasingGroups(usageLimits = [3, 3, 3, 3, 3])",
        "maxIncreasingGroups(usageLimits = [3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5])",
        "maxIncreasingGroups(usageLimits = [2, 1, 3, 2])",
        "maxIncreasingGroups(usageLimits = [1,2,4,6,7,8,9])",
        "maxIncreasingGroups(usageLimits = [1,2,5,4,3,2])",
        "maxIncreasingGroups(usageLimits = [3, 8, 2, 9, 4, 7, 10, 1])"
    ],
    "sample_204": [
        "minimumOperations(s = \"0100255075\")",
        "minimumOperations(s = \"01001\")",
        "minimumOperations(s = \"502500\")",
        "minimumOperations(s = \"010010100\")",
        "minimumOperations(s = \"025025025025\")",
        "minimumOperations(s = \"0102030405060708\")",
        "minimumOperations(s = \"0200250050075\")",
        "minimumOperations(s = \"000255025\")",
        "minimumOperations(s = \"2002\")",
        "minimumOperations(s = \"00025000500075\")"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 4, 5, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 6, 7, 8], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5,6,7,8,9], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 3, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 1, 0, 1, 1, 1], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 9, 8, 11, 10, 12, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 2, 7, 5, 2, 7], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 13, 10, 22, 8], target = 11)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 6, 5, 5, 5, 5, 6, 8, 6, 8], target = 5)"
    ],
    "sample_148": [
        "finalString(s = 'inter')",
        "finalString(s = 'pinter')",
        "finalString(s='ponter')",
        "finalString(s = 'poitner')",
        "finalString(s = 'pytho')",
        "finalString(s = 'iterate')",
        "finalString(s = 'hello world!')",
        "finalString(s = 'pienon')",
        "finalString(s = 'fantastic')",
        "finalString(s='give')"
    ],
    "sample_168": [
        "isAcronym(words = [\"banana\"], s = \"ba\")",
        "isAcronym(words = [\"A\", \"B\", \"C\"], s = \"ABC\")",
        "isAcronym(words = [\"abc\", \"abcde\", \"acb\"], s = \"abc\")",
        "isAcronym(words = [\"for\", \"fun\", \"and\", \"profit\"], s = \"forfunandprofit\")",
        "isAcronym(words = [\"abc\", \"ac\", \"ba\"], s = \"abac\")",
        "isAcronym(words = [\"bears\", \"bear\", \"b\"], s = \"b\")",
        "isAcronym(words = [\"banana\", \"bear\", \"snowy\"], s = \"bsn\")",
        "isAcronym(words = [\"this\", \"is\", \"mysterious\"], s = \"mys\")",
        "isAcronym(words = [\"abc\", \"xyz\", \"zxy\", \"pqx\"], s = \"abc\")",
        "isAcronym(words = [\"disrupt\", \"interrupted\", \"interruption\"], s = \"interru\")"
    ],
    "sample_201": [
        "minOperations(nums = [1, 1, 1, 1, 1], target = 3)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 3)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 3)",
        "minOperations(nums = [2,3,5], target = 8)",
        "minOperations(nums = [2,2,2,2,2], target = 5)",
        "minOperations(nums=[1, 1, 2, 2, 3, 3, 4, 5], target=9)",
        "minOperations(nums=[1,1,2,2,3,3,4,4,5,5], target=4)",
        "minOperations(nums = [9, 3, 5, 7], target = 12)",
        "minOperations(nums=[0,1,0,1], target=1)",
        "minOperations(nums = [5,5,2,2,2,4,5,3,4,5], target = 10)"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = '1010')",
        "maximumOddBinaryNumber(s = '00101')",
        "maximumOddBinaryNumber(s = '101001')",
        "maximumOddBinaryNumber(s = \"101001\")",
        "maximumOddBinaryNumber(s = \"100101\")",
        "maximumOddBinaryNumber(s = '0101111')",
        "maximumOddBinaryNumber(s = \"10010000\")",
        "maximumOddBinaryNumber(s = \"01110101\")",
        "maximumOddBinaryNumber(s = \"001001111\")",
        "maximumOddBinaryNumber(s = '0110110011011')"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = \"1010\")",
        "maximumOddBinaryNumber(s = \"100101\")",
        "maximumOddBinaryNumber(s='0011')",
        "maximumOddBinaryNumber(s = \"101010101\")",
        "maximumOddBinaryNumber(s = \"11001010\")",
        "maximumOddBinaryNumber(s = '011010011')",
        "maximumOddBinaryNumber(s = '110101011')",
        "maximumOddBinaryNumber(s = '000111000')",
        "maximumOddBinaryNumber(s = \"0000011110\")",
        "maximumOddBinaryNumber(s = '1110110110011101110000')"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 9)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 5, target = 9)",
        "minimumPossibleSum(n = 4, target = 7)",
        "minimumPossibleSum(n = 5, target = 20)",
        "minimumPossibleSum(n = 5, target = 13)",
        "minimumPossibleSum(n = 4, target = 4)",
        "minimumPossibleSum(n = 4, target = 17)",
        "minimumPossibleSum(n = 5, target = 24)"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"RLLLLRRRLR\")",
        "furthestDistanceFromOrigin(moves = \"RRLLLLRRRLR\")",
        "furthestDistanceFromOrigin(moves = \"RRLLLLRRRLR\")",
        "furthestDistanceFromOrigin(moves = \"LLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRL\")",
        "furthestDistanceFromOrigin(moves = \"RRLLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLL\")",
        "furthestDistanceFromOrigin(moves=\"LL\")",
        "furthestDistanceFromOrigin(moves = \"LDRRLRUULR\")"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 1, target = 10)",
        "minimumPossibleSum(n=2, target=1)",
        "minimumPossibleSum(n = 6, target = 11)",
        "minimumPossibleSum(n = 20, target = 10)",
        "minimumPossibleSum(n=4, target=2)",
        "minimumPossibleSum(n = 2, target = 7)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 2, 1, 1, 0], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 3, 3], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 0, 1, 0, 0, 0], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 6, 5, 10, 12, 7], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [6, 3, 5, 1, 10], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [35, 10, 6, 21], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [35, 12, 34, 66, 11, 30], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 5, 7, 1, 4, 1, 5, 2, 2, 7, 6], target = 3)"
    ],
    "sample_231": [
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 5])",
        "countWays(nums = [2,4,7])",
        "countWays(nums = [0, 2, 4, 6, 8, 10])",
        "countWays(nums = [0, 0, 0, 1, 1])",
        "countWays(nums = [0, 0, 1, 1, 1, 1])",
        "countWays(nums = [1,2,3,4,6,7,8,9])",
        "countWays(nums = [0, 2, 2, 4, 4, 6, 6])",
        "countWays(nums = [4, 10, 9, 5, 1, 3])",
        "countWays(nums = [1, 2, 3, 5, 4, 4, 8, 9, 7])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"RLRRLLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"UDDDUDUU\")",
        "furthestDistanceFromOrigin(moves = \"LLRRDD\")",
        "furthestDistanceFromOrigin(moves = \"LLLLR\")",
        "furthestDistanceFromOrigin(moves = \"RLLRRLLRR\")",
        "furthestDistanceFromOrigin(moves = \"LL__RRR_\")",
        "furthestDistanceFromOrigin(moves = \"LLLRRRLRRL\")",
        "furthestDistanceFromOrigin(moves = \"R_R__L_R_R\")",
        "furthestDistanceFromOrigin(moves = \"R_R_RLLLLRRRL_LL\")",
        "furthestDistanceFromOrigin(moves = \"UDDLLRRDDLUUUDDLLRULRD_UUDLLRULRU_UUU_LDRRRDDLLUURRDRDUURD_UULURRU_UDDDURD_\")"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 1, target = 4)",
        "minimumPossibleSum(n = 2, target = 7)",
        "minimumPossibleSum(n = 5, target = 8)",
        "minimumPossibleSum(n = 5, target = 4)"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "countCompleteSubarrays(nums = [5, 6, 2, 7, 3, 1, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])",
        "countCompleteSubarrays(nums = [2, 1, 3, 5, 2])",
        "countCompleteSubarrays(nums = [2, 1, 3, 5, 6, 8, 7, 9, 4])",
        "countCompleteSubarrays(nums = [4,2,3,1,1,2,3,2,1,3,3,2,2,3,3,3,1,4,4,3,3,3,4,1,2,1,4,4,1,1,3,1,2,3,3,1,4,4,4,2,2,2,3,4,4,2,3,2,4,1,2,2,4,3,4,3,4,4,3,2,3,3,1,2,1,2,2,4,2,3,3,3,3,2,1,4,1,2,3,1,1,4,3,1,4,2,1,3,3,2,2,4,2,3,3,2,4,3,4,4,4,2,3,1,1,4,3,4,1,4,3,3,4,3,4,1,1,3,4,2,2,3,3,1,3,3,2,2,1,3,3,1,4,4,2,2,2,4,1,1,2,2,2,3,2,4,3,2,1,2,4,3,4,1,1,1,3,2,4,1,4,1,3,2,3,1,2,2,3,1,2,3,1,3,4,4,3,2,1,2,2,2,2,4,3,4,2,1,1,2,2,2,3,2,2,4,1,4,2,2,2,1,3,3,4,3,4,4,3,1,1,4,2,3,1,2,2,2,4,4,4,1,3,3,4,4,3,4,4,3,4,3,4,3,2,3,4,3,2,3,3,3,2,2,3,1,3,3,3,2,4,3,3,3,4,3,3,1,2,3,4,3,4,1,2,2,1,4,1,4,3,3,1,3,1,4,1,2,2,1,4,1,2,3,4,4,3,2,3,3,1,1,3,3,1,4,3,2,4,1,1,4,2,3,4,2,4,3,4,4,2,2,3,4,3,1,"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 9)",
        "canSplitArray(nums = [1,2,3,4,5], m = 9)",
        "canSplitArray(nums = [3, 2, 1, 2, 3, 4, 3, 2, 1], m = 5)",
        "canSplitArray(nums = [1], m = 1)",
        "canSplitArray(nums = [1,1], m = 2)",
        "canSplitArray(nums = [1, 1], m = 2)",
        "canSplitArray(nums = [1,1], m = 3)",
        "canSplitArray(nums = [1, 2, 3], m = 1)",
        "canSplitArray(nums = [1, 4, 4], m = 7)",
        "canSplitArray(nums = [3, 2, 1, 2, 3, 1, 2, 3, 4], m = 6)"
    ],
    "sample_200": [
        "minOperations(nums = [1, 1, 1, 1, 1], target = 3)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 3)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 3)",
        "minOperations(nums = [2,4,9], target = 11)",
        "minOperations(nums = [3, 2, 20, 1, 1, 3], target = 5)",
        "minOperations(nums = [1, 5, 10, 25], target = 9)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], target = 10)",
        "minOperations(nums=[1, 1, 1, 1, 1, 1, 1, 1], target=8)",
        "minOperations(nums = [1, 5, 10, 20], target = 27)",
        "minOperations(nums = [2,1,1,1,2], target = 4)"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 5, 6, 9, 12], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [12, 24, 8, 32], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 5, 3, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 4, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 7, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [12, 34, 6, 1, 1, 2, 78, 3], k = 3)",
        "sumIndicesWithKSetBits(nums = [12, 2, 6, 7, 5], k = 2)"
    ],
    "sample_165": [
        "isAcronym(words = [\"A\", \"B\", \"C\"], s = \"ABC\")",
        "isAcronym(words = [\"abc\", \"def\"], s = \"abcdef\")",
        "isAcronym(words=[\"abc\", \"def\"], s=\"abc\")",
        "isAcronym(words = [\"you\", \"your\", \"yourself\"], s = \"yrs\")",
        "isAcronym(words = [\"abcs\", \"bc\", \"de\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"melon\", \"apricot\"], s = \"aap\")",
        "isAcronym(words = [\"ab\", \"at\", \"b\", \"ba\"], s = \"aba\")",
        "isAcronym(words = [\"Python\", \"JS\", \"Pandas\", \"Bash\"], s = \"PBP\")",
        "isAcronym(words = [\"ORL\", \"SFL\", \"TEB\"], s = \"ORLSTEB\")",
        "isAcronym(words = [\"hfl\", \"z\", \"vg\", \"e\"], s = \"hevega\")"
    ],
    "sample_227": [
        "countWays(nums = [0, 1, 2, 3, 4, 5])",
        "countWays(nums = [3, 4, 5, 6])",
        "countWays(nums = [1, 1, 2, 3])",
        "countWays(nums = [1, 2, 2, 3, 3])",
        "countWays(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "countWays(nums = [0, 0, 0, 0, 0, 0, 0, 0])",
        "countWays(nums = [0, 1, 2, 5, 6, 7, 8])",
        "countWays(nums = [3, 5, 5, 5, 6, 9])",
        "countWays(nums = [0x3f3f3f3f, -0x3f3f3f3f, 1, 2, 3, 5])",
        "countWays(nums = [-0x3f3f3f3f, 0x3f3f3f3f, 1, 2, 2, 2, 3])"
    ],
    "sample_158": [
        "maxSum(nums = [12, 345, 2, 6, 7896])",
        "maxSum(nums = [12, 345, 2, 6, 7896])",
        "maxSum(nums = [123, 321, 456, 789])",
        "maxSum(nums = [99, 98, 97])",
        "maxSum(nums = [9, 3, 5, 7])",
        "maxSum(nums = [34, 5, 98, 9, 76, 13, 27, 45, 4, 62, 0, 3])",
        "maxSum(nums = [9, 8, 6, 1])",
        "maxSum(nums = [59, 55, 91, 88])",
        "maxSum(nums = [34, 3, 10, 99, 30])",
        "maxSum(nums = [9, 3, 4, 8, 9, 9, 9, 4])"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums=[1, 2, 1, 2, 3], k=2)",
        "longestEqualSubarray(nums = [1,1,2,1,1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 2, 1, 1, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 9)",
        "longestEqualSubarray(nums = [1,2,2,1,2,2,1,3,3,3], k = 2)",
        "longestEqualSubarray(nums = [0,0,0,0,0,1,1,1,1,1,1,1,1,1,1], k = 1)",
        "longestEqualSubarray(nums = [1,1,0,1,1,1,1], k = 2)",
        "longestEqualSubarray(nums = [0,1,0,0,0,0,1,1,0,1,0,1,0,0,1,0,0,1,0,0,1,0,1,1,1,0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,1,0,1,1,1,0,1,0,0,1,1,0,1,1,1,1,1,1,0,1,1,0,0,1,0,1,1,0,0,0,1,1,1,0,1,0,0,0,0,0,0,1,1,0,1,0,1,0,0,1,1,1,0,1,1,1,0,1,1,1,1,0,0,0,0,1,1,0,1,1,1,1,0,1,1,0,1,0,1,1,1,1,1,1,0,1,0,0,0,0,1,0,1,0,0,1,1,1,1,1,0,0,1,0,1,0,0,0,1,1,1,0,1,1,1,1,0,1,1,0,1,0,1,0,1,0,1,1,0,1,1,0,1,1,0,0,0,0,0,1,0,0,0,0,1,1,0,1,1,1,1,1,0,1,0,0,1,1,1,1,0,1,1,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,1,0,1,0,1,1,1,1,1,1,0,0,1,0,1,1,1,1,0,0,1,0,1,0,1,0,0,1,0,0,1,1,1,1,0,0,0,1,1,1"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 5, offers = [[2, 3, 4], [3, 2, 1]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 100], [1, 2, 100], [4, 2, 100]])",
        "maximizeTheProfit(n = 4, offers = [[2, 3, 2], [1, 5, 3], [4, 2, 1]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 10], [2, 4, 8], [3, 5, 15]])",
        "maximizeTheProfit(n = 3, offers = [[3, 2, 2], [2, 1, 4], [1, 1, 3]])",
        "maximizeTheProfit(3, [[1, 2, 10], [2, 2, 5], [3, 3, 1]])",
        "maximizeTheProfit(n = 4, offers = [[3, 1, 2], [1, 2, 4], [4, 3, 6]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 20], [3, 2, 15], [2, 5, 100], [6, 1, 20]])",
        "maximizeTheProfit(n = 4, offers = [[2, 3, 10], [1, 2, 5], [2, 1, 10], [2, 1, 4]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 3], [2, 4, 5], [3, 5, 7], [4, 10, 20], [5, 15, 10], [6, 15, 5]])"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 3, 2, 4, 2])",
        "maxIncreasingGroups(x = [1, 3, 2, 4, 5])",
        "maxIncreasingGroups(x = [1,2,3,4,5])",
        "maxIncreasingGroups(x = [1,3,2,4,5])",
        "maxIncreasingGroups(x = [1, 3, 2, 3, 3, 4, 5])",
        "maxIncreasingGroups(x = [0, 1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(x = [1, 3, 3, 2, 3, 3, 3, 3, 3, 3])",
        "maxIncreasingGroups(x = [1,3,9,8,5,2])",
        "maxIncreasingGroups(x = [1, 3, 9, 8, 4, 2, 5, 7, 6])",
        "maxIncreasingGroups(x = [1,3,2,3,3,2,2,3,2,1])"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 4, 7], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 0, 1, 0, 1, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [2,3,5,7,11], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6], k = 1)",
        "sumIndicesWithKSetBits(nums = [5, 6, 8, 8], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 4, 6, 1, 9, 5, 8, 0], k = 2)",
        "sumIndicesWithKSetBits(nums = [5, 2, 3, 4, 6, 1, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,6,10], k = 2)",
        "sumIndicesWithKSetBits(nums = [100, 111, 101, 101, 0, 1, 1], k = 2)"
    ],
    "sample_207": [
        "minimumOperations(num = \"505\")",
        "minimumOperations(num
        "minimumOperations(num = \"12345\")",
        "minimumOperations(num = \"1500\")",
        "minimumOperations(num = \"25502550\")",
        "minimumOperations(num = \"255050\")",
        "minimumOperations(num = '257')",
        "minimumOperations(num = \"03350\")",
        "minimumOperations(num = \"0000001000001000001\")",
        "minimumOperations(num = \"0340012\")"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"RRLLLLRRRLR\")",
        "furthestDistanceFromOrigin(moves = \"RRLLLLRRRLR\")",
        "furthestDistanceFromOrigin(moves=\"RRLLLLRRRLR\")",
        "furthestDistanceFromOrigin(moves = \"LURD\")",
        "furthestDistanceFromOrigin(moves=\"RRLLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LLLLL\")",
        "furthestDistanceFromOrigin(moves=\"RRLLLLRRRLR\")",
        "furthestDistanceFromOrigin(moves = \"LLLRLRLLRRL\")"
    ],
    "sample_206": [
        "minimumOperations(num = \"99\")",
        "minimumOperations(num = \"505\")",
        "minimumOperations(num = \"3025\")",
        "minimumOperations(num = \"0001000\")",
        "minimumOperations(num = \"05075\")",
        "minimumOperations(num = \"1020\")",
        "minimumOperations(num = \"0025505075\")",
        "minimumOperations(num = \"2232\")",
        "minimumOperations(num = \"42455\")",
        "minimumOperations(num = \"0000110100110000\")"
    ],
    "sample_155": [
        "canSplitArray(nums = [1,4,4], m = 3)",
        "canSplitArray(nums = [1], m = 1)",
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 7)",
        "canSplitArray(nums = [2,1,3,4,4], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 5)",
        "canSplitArray(nums = [3,1,1,2,2,2], m = 3)",
        "canSplitArray(nums=[1, 2, 3, 4, 5], m=11)",
        "canSplitArray(nums = [3, 3, 4, 2, 2, 4, 5, 5, 2, 1, 4], m = 13)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countCompleteSubarrays(nums = [1,0,1,2,1,1])",
        "countCompleteSubarrays(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countCompleteSubarrays(nums = [1, 0, 2, 3, 4])",
        "countCompleteSubarrays(nums = [5, 2, 3, 1, 2])"
    ],
    "sample_202": [
        "minimumOperations(num = \"0100\")",
        "minimumOperations(num = \"257250\")",
        "minimumOperations(num = \"010110\")",
        "minimumOperations(num = \"5075250\")",
        "minimumOperations(num = \"9909\")",
        "minimumOperations(num = \"11000000001\")",
        "minimumOperations(num = \"0020257550\")",
        "minimumOperations(num = \"1000025075\")",
        "minimumOperations(num = \"870780\")",
        "minimumOperations(num = \"010110101011\")"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [\"a\", \"b\", \"c\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"a b c\", \"d e f\"], b = \" \")",
        "splitWordsBySeparator(a = [\"hello\", \"world\", \"this\", \"is\", \"a\", \"test\"], b = \" \")",
        "splitWordsBySeparator(a = [\"a\", \"b\"], b = \"ab\")",
        "splitWordsBySeparator(a = [\"a.b.c.d\", \"a.b.e.f\"], b = \".\")",
        "splitWordsBySeparator(a = [\"pineapple\", \"banana\", \"mango\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"apple banana kiwi\", \"grapes lemon\"], b = \" \")",
        "splitWordsBySeparator(a = [\"N\", \"a\", \"n\", \"a\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"Hey,\", \"What\"], b = \",\")",
        "splitWordsBySeparator(a = [\"apples\", \"oranges\", \"pears\"], b = \"e\")"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [12, 345, 2, 6, 7896], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [10, 5, 2, 3, 7, 5, 7], k = 3)",
        "sumIndicesWithKSetBits(nums = [3, 2, 3, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 5, 2, 7, 4], k = 2)",
        "sumIndicesWithKSetBits(nums=[3, 2, 1, 6, 4, 5, 6], k=2)",
        "sumIndicesWithKSetBits(nums = [0, 2, 0, 3, 1, 2, 4], k = 3)",
        "sumIndicesWithKSetBits(nums = [4, 3, 4, 0, 4], k = 1)"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = '1010')",
        "maximumOddBinaryNumber(s = '1010')",
        "maximumOddBinaryNumber(s = '1001')",
        "maximumOddBinaryNumber(s = '10011')",
        "maximumOddBinaryNumber(s = '10011')",
        "maximumOddBinaryNumber(s = '110')",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"1111000\")",
        "maximumOddBinaryNumber(s = \"10101010\")",
        "maximumOddBinaryNumber(s = '1111000101010101')"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [2, 2, 2, 2, 2], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [0,0,0,0,0], k = 0)",
        "longestEqualSubarray(nums = [0,1,0,1,0,1,1,0], k = 2)",
        "longestEqualSubarray(nums=[1, 1, 0, 1, 1, 0], k=3)"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,1,1], k = 0)",
        "longestEqualSubarray(nums = [0,1,0,0,1,0,1,1], k = 3)"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = \"011100\")",
        "maximumOddBinaryNumber(s = \"111101\")",
        "maximumOddBinaryNumber(s = \"1110111\")",
        "maximumOddBinaryNumber(s = \"1010111\")",
        "maximumOddBinaryNumber(s = \"101101\")",
        "maximumOddBinaryNumber(s = \"1101110\")",
        "maximumOddBinaryNumber(s = '1011011')",
        "maximumOddBinaryNumber(s = \"011010011\")",
        "maximumOddBinaryNumber(s = \"111000010100\")",
        "maximumOddBinaryNumber(s
    ],
    "sample_166": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"abc\", \"abc\"], s = \"abc\")",
        "isAcronym(words = [\"foo\", \"bar\", \"baz\"], s = \"fbz\")",
        "isAcronym(words = [\"ab\", \"bc\"], s = \"abbc\")",
        "isAcronym(words = [\"red\", \"blue\", \"yellow\"], s = \"rb\")",
        "isAcronym(words = [\"Word\"], s = \"Wo\")",
        "isAcronym(words = [\"s\", \"t\", \"r\", \"i\", \"n\", \"g\", \"s\"], s = \"str\")",
        "isAcronym(words = [\"WHO\", \"COVID-19\"], s = \"WHO_COVID-19\")",
        "isAcronym(words = [\"mass\", \"acceleration\", \"time\"], s = \"AMAT\")",
        "isAcronym(words = [\"Autonomous\", \"And\", \"Automated\", \"Robots\"], s = \"ARA\")"
    ],
    "sample_163": [
        "maxSum(nums = [12, 345, 2, 6, 7896])",
        "maxSum(nums=[12, 345, 2, 6, 7896])",
        "maxSum(nums = [2, 4, 6, 2, 5])",
        "maxSum(nums = [2, 4, 5, 3, 7, 6])",
        "maxSum(nums = [1000, 999, 998, 997, 996, 995])",
        "maxSum(nums = [12345, 6789, 9876, 54321])",
        "maxSum(nums = [34, 7, 5, 6, 1, 2])",
        "maxSum(nums = [34, 3, 35, 4, 41])",
        "maxSum(nums = [12, 45, 23, 25, 50, 39, 76])",
        "maxSum(nums = [56, 67, 31, 52, 16, 55])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [1, 2, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [3, 2, 1])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4, 5])",
        "semiOrderedPermutation(nums = [2, 4, 3, 1, 5])",
        "semiOrderedPermutation(nums = [4, 3, 5, 2, 1])",
        "semiOrderedPermutation(nums = [1, 3, 5, 2, 4, 6, 7])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 6])",
        "semiOrderedPermutation(nums=[3, 1, 5, 4])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1, 2, 3, 4, 5])",
        "continuousSubarrays(a = [1, 2, 1, 2, 1, 2, 1, 2])",
        "continuousSubarrays(a = [2, 2, 3, 7, 5])",
        "continuousSubarrays(a = [1,1,2,2,3])",
        "continuousSubarrays(a = [1,1,1,2,2,3])",
        "continuousSubarrays(a = [1, 4, 4, 6, 1, 4, 1])",
        "continuousSubarrays(a = [1,2,1,2,1,2,3,1,2])",
        "continuousSubarrays(a = [2, 3, 4, 5, 5, 5, 6, 7, 7])",
        "continuousSubarrays(a = [1, 2, 1, 1, 2, 1, 2, 3, 3, 1, 2, 1, 2, 3, 1, 1, 3])",
        "continuousSubarrays(a = [5,2,10,4,-10,2,-5,-2,-1,0])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [8, 2, 4, 7])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5])",
        "continuousSubarrays(nums = [8,2,4,7])",
        "continuousSubarrays(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2])",
        "continuousSubarrays(nums = [4, 2, 4, 5, 9, 2, 1])",
        "continuousSubarrays(nums = [1, 1, 2, 2, 3, 3])",
        "continuousSubarrays(nums = [3, 4, 3, 4, 4])",
        "continuousSubarrays(nums = [6, 3, 4, 2, 1])",
        "continuousSubarrays(nums=[4,2,4,5,9,2,1,7,7,3])",
        "continuousSubarrays(nums = [6, 1, 4, 2, 3, 6, 4, 3, 2, 1])"
    ],
    "sample_8": [
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 2, queries = [[1, 1], [1, 0]])",
        "colorTheArray(n = 3, queries = [[1, 0], [2, 1]])",
        "colorTheArray(n = 2, queries = [[1, 0], [1, 1], [0, 1]])",
        "colorTheArray(n = 5, queries = [[3, 1], [1, 2], [2, 3], [0, 3], [0, 4]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 1], [3, 2]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 2], [0, 0], [0, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1], [1, 2], [1, 1], [2, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1], [1, 2], [1, 0], [2, 1], [2, 2], [2, 0]])",
        "colorTheArray(n = 10, queries = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 9], [2, 9], [3, 9], [4, 9], [5, 9], [6, 9], [7, 9], [8, 9], [9, 9], [0, 10], [1, 10], [2, 10], [3, 10], [4, 10], [5, 10], [6, 10], [7, 10], [8, 10], [9, 10]])"
    ],
    "sample_97": [
        "maximumJumps(nums = [100, -23, -23, 404, 100, 23, 23, 23, 3, 404], target = 1000)",
        "maximumJumps(nums = [6,4,14,6,8,13,9,7,10,6,12], target = 5)",
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [6,4,14,6,8,13,9,7,10,6,12], target = 5)",
        "maximumJumps(nums = [4,2,3,0,3,1,2], target = 5)",
        "maximumJumps(nums = [6,4,14,6,8,13,9,7,10,6,12], target = 9)",
        "maximumJumps(nums = [10,13,12,14,15], target = 9)",
        "maximumJumps(nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], target = 3)",
        "maximumJumps(nums
        "maximumJumps(nums = [9, 8, 2, 6, 4, 7, 1, 3, 0], target = 1)"
    ],
    "sample_22": [
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"AACCBB\")",
        "minLength(s = \"ABABABCD\")",
        "minLength(s = \"AAAA\")",
        "minLength(s = \"ABDE\")",
        "minLength(s = \"ADACB\")",
        "minLength(s = \"ADDBA\")",
        "minLength(s = \"ABCCBAABCABBAAA\")",
        "minLength(s = \"ACBACCDD\")",
        "minLength(s = \"ZCDAB\")"
    ],
    "sample_7": [
        "colorTheArray(n = 3, queries = [[1,1],[2,2],[3,3]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 2], [0, 0]])",
        "colorTheArray(n = 3, queries = [[1, 0], [1, 1], [1, 2]])",
        "colorTheArray(n = 4, queries = [[1, 3], [2, 1]])",
        "colorTheArray(n = 3, queries = [[2,1],[1,2],[1,0]])",
        "colorTheArray(n = 3, queries = [[1, 2], [1, 0], [0, 1]])",
        "colorTheArray(n = 5, queries = [[1, 0], [2, 1], [3, 1], [4, 0]])",
        "colorTheArray(n = 5, queries = [[1,1],[1,2],[2,2],[1,3],[2,3],[2,4]])",
        "colorTheArray(n = 3, queries = [[1,1],[2,2],[0,1],[2,1],[0,2]])",
        "colorTheArray(n=5, queries=[[1,1], [1,2], [2,5], [1,5], [2,2], [5,4]])"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [0, 3], [1, 4]])",
        "colorTheArray(n = 4, queries = [[1, 2], [2, 3], [3, 4], [1, 3]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,2],[2,3],[3,4]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [2, 1], [1, 0]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 1], [4, 1]])",
        "colorTheArray(n = 6, queries = [[1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 1], [1, 1], [0, 1], [2, 1]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,2],[2,1],[3,1],[1,2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [1, 1], [4, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 0], [2, 1], [2, 2], [3, 3], [3, 4], [4, 1]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [1,3,2,4])",
        "semiOrderedPermutation(nums = [1,3,5,4,2])",
        "semiOrderedPermutation(nums=[1,2,3])",
        "semiOrderedPermutation(nums = [4, 1, 3, 2])",
        "semiOrderedPermutation(nums = [5, 1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 4, 5, 2, 3])",
        "semiOrderedPermutation(nums=[2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [1,1,5])",
        "semiOrderedPermutation(nums = [2,1,3,4,5,6,7])"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [1, 3, 1, 2, 4, 3], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 4, 7, 10, 11, 7, 12, 6, 7, 16, 18, 19], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 4, 7, 10, 11, 7, 12, 6, 7, 16, 18, 19], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8], threshold = 4)",
        "longestAlternatingSubarray(nums = [0, 1, 1, 0, 1, 1, 1], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 5)",
        "longestAlternatingSubarray(nums = [3, 1, 4, 2, 3], threshold = 3)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 4, 4, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [3, 1, 4, 2, 6, 5, 8, 10, 12, 15], threshold = 4)",
        "longestAlternatingSubarray(nums = [3, 1, 2, 5, 6, 4], threshold = 5)"
    ],
    "sample_33": [
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"5123000\")",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = \"5120301\")",
        "removeTrailingZeros(num = \"0512301\")",
        "removeTrailingZeros(num = '1000')",
        "removeTrailingZeros(num = \"5000000001\")",
        "removeTrailingZeros(num = '00050001')"
    ],
    "sample_50": [
        "smallestString(s = \"abaab\")",
        "smallestString(s = 'abaab')",
        "smallestString(s = 'abaab')",
        "smallestString(s = \"abaaba\")",
        "smallestString(s = \"ababa\")",
        "smallestString(s = \"ababa\")",
        "smallestString(s = \"ababa\")",
        "smallestString(s = \"abaabbaa\")",
        "smallestString(s = 'aabab')",
        "smallestString(s = \"abc\")"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [2, 1, 3, 5, 3, 2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6])",
        "distinctDifferenceArray(nums = [1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 3, 5, 2, 3])",
        "distinctDifferenceArray(nums=[1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6])",
        "distinctDifferenceArray(nums = [6, 3, 2, 1, 3, 2, 6, 8])",
        "distinctDifferenceArray(nums = [3, 4, 7, 1, 2, 9, 12])"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 4, additionalTank = 2)",
        "distanceTraveled(mainTank = 4, additionalTank = 2)",
        "distanceTraveled(mainTank = 4, additionalTank = 3)",
        "distanceTraveled(mainTank = 10, additionalTank = 4)",
        "distanceTraveled(mainTank = 6, additionalTank = 2)",
        "distanceTraveled(mainTank = 4, additionalTank = 10)",
        "distanceTraveled(mainTank = 30, additionalTank = 10)",
        "distanceTraveled(mainTank = 17, additionalTank = 10)",
        "distanceTraveled(mainTank = 24, additionalTank = 5)"
    ],
    "sample_118": [
        "minimumIndex(nums = [1, 1, 1, 0, 1])",
        "minimumIndex(nums = [1, 1, 1, 0, 1])",
        "minimumIndex(nums = [3, 2, 1])",
        "minimumIndex(nums = [3, 1, 2])",
        "minimumIndex(nums = [1,2,3])",
        "minimumIndex(nums = [0, 1, 2, 3, 4])",
        "minimumIndex(nums = [0, 2, 2, 2, 1])",
        "minimumIndex(nums = [1, 1, 2, 3, 3, 3, 4])",
        "minimumIndex(nums = [3, 3, 1, 3, 3, 2, 3, 3, 3, 3, 3, 3])",
        "minimumIndex(nums = [6, 1, 3, 8, 3, 4, 1])"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [12, 13, 14, 15])",
        "countBeautifulPairs(nums = [1,2,3,4,5])",
        "countBeautifulPairs(nums = [21, 22, 23, 24, 25, 26, 27, 28])",
        "countBeautifulPairs(nums = [3, 11, 13, 21, 23])",
        "countBeautifulPairs(nums = [2, 3, 4, 1, 3, 2])",
        "countBeautifulPairs(nums = [12,23,21,13,1])",
        "countBeautifulPairs(nums = [5, 2, 3, 6, 1, 7])",
        "countBeautifulPairs(nums = [33, 5, 7, 6, 2])",
        "countBeautifulPairs(nums = [12, 14, 21, 16, 19, 13])",
        "countBeautifulPairs(nums = [34, 2, 35, 22, 15])"
    ],
    "sample_30": [
        "removeTrailingZeros(num = \"512300\")",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"512300\")",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num='512300')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"512000301\")",
        "removeTrailingZeros(num='00001235101')"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"aabbcc\")",
        "minimizedStringLength(s = \"aaabbbccc\")",
        "minimizedStringLength(s = \"abcb\")",
        "minimizedStringLength(s = \"aaa\")",
        "minimizedStringLength(s = \"aaabccddd\")",
        "minimizedStringLength(s = \"aabbbccc\")",
        "minimizedStringLength(s = \"aadada\")",
        "minimizedStringLength(s = \"abbbccc\")",
        "minimizedStringLength(s = \"abacabad\")",
        "minimizedStringLength(s = \"aababac\")"
    ],
    "sample_111": [
        "maximumBeauty(nums = [2, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 3)",
        "maximumBeauty(nums = [1, 2, 4, 7, 8, 10], k = 3)",
        "maximumBeauty(nums = [1, 2, 4, 8, 16], k = 3)",
        "maximumBeauty(nums = [2, 4, 7, 5, 12, 18], k = 3)",
        "maximumBeauty(nums = [2, 4, 7, 5, 10, 7, 12, 11], k = 3)",
        "maximumBeauty(nums = [1, 3, 2, 4, 3, 2, 1], k = 1)",
        "maximumBeauty(nums = [1, 2, 4, 8, 12, 14, 17], k = 2)",
        "maximumBeauty(nums=[5, 8, 4, 6, 3], k=2)"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 10, num2 = 4)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 20, num2 = 4)",
        "makeTheIntegerZero(num1 = 15, num2 = 5)",
        "makeTheIntegerZero(num1 = 1000, num2 = 100)",
        "makeTheIntegerZero(num1 = 25, num2 = 20)",
        "makeTheIntegerZero(num1 = 123, num2 = 12)",
        "makeTheIntegerZero(num1 = 84, num2 = 27)",
        "makeTheIntegerZero(num1=41, num2=12)"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [6, 2, 5, 4, 5, 1, 6])",
        "findValueOfPartition(nums = [5, 4, 3, 2, 1])",
        "findValueOfPartition(nums = [4, 9, 1, 8])",
        "findValueOfPartition(nums = [4, 2, 5, 7, 10, 1])",
        "findValueOfPartition(nums = [1, 10, 20, 5, 16])",
        "findValueOfPartition(nums = [4, 7, 10, 1, 3, 9])",
        "findValueOfPartition(nums = [2, 4, 7, 1])",
        "findValueOfPartition(nums = [1, 2, 7, 10, 12, 15, 17, 20])",
        "findValueOfPartition(nums = [3, 4, 10, 1, 5, 6, 8, 9, 0])",
        "findValueOfPartition(nums = [4, 2, 5, 7, 10, 11, 12, 13, 15, 22, 3, 1])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 3)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 15, additionalTank = 2)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 20, additionalTank = 0)",
        "distanceTraveled(mainTank = 100, additionalTank = 5)",
        "distanceTraveled(mainTank = 20, additionalTank = 2)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 1, 1, 1, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0])"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = \"neve\")",
        "makeSmallestPalindrome(s = \"banana\")",
        "makeSmallestPalindrome(s = \"ne\")",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = \"abde\")",
        "makeSmallestPalindrome(s = 'niv')",
        "makeSmallestPalindrome(s = 'abcdc')",
        "makeSmallestPalindrome(s = \"erev\")",
        "makeSmallestPalindrome(s = 'belee')"
    ],
    "sample_110": [
        "checkArray(nums = [1, -1], k = 1)",
        "checkArray(nums = [1, 0, 1, 0, 1], k = 2)",
        "checkArray(nums = [0, 1, 0, 1, 0, 1], k = 2)",
        "checkArray(nums = [3, 2, 1, 2, 3], k = 3)",
        "checkArray(nums = [2, -2, 1, 2, -2, 1], k = 2)",
        "checkArray(nums = [1, 4, 1, 1, 1], k = 3)",
        "checkArray(nums = [1, 0, 2, 0], k = 1)",
        "checkArray(nums = [1,2,0,0,-1], k = 2)",
        "checkArray(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1], k = 3)",
        "checkArray(nums = [3, 5, 10, 1, 6, 2, 10, 3, 10, 0], k = 4)"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [2, 3, 0, 1])",
        "doesValidArrayExist(derived = [0,1,0,0,1,0])",
        "doesValidArrayExist(derived = [1,0,0,1,0,1,1,1])"
    ],
    "sample_54": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = \"aaaz\")",
        "smallestString(s = 'kddsbzcd')",
        "smallestString(s = \"aaazzz\")",
        "smallestString(s = 'abacaba')",
        "smallestString(s = \"kkkkkkkkk\")",
        "smallestString(s = \"aaabbbccc\")",
        "smallestString(s='abcaaa')",
        "smallestString(s = \"bbaaaaabbbaaaaa\")",
        "smallestString(s = \"aaceeeebbbggg\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1, 2, 2, 3, 1, 4, 2])",
        "continuousSubarrays(A = [1, 2, 2, 3, 1, 4, 2])",
        "continuousSubarrays(A = [1, 2, 2, 3, 1, 4, 2])",
        "continuousSubarrays(A = [4, 2, 4, 5, 2, 3, 1])",
        "continuousSubarrays(A = [1,2,2,2,5])",
        "continuousSubarrays(A = [2,4,6])",
        "continuousSubarrays(A = [1, 2, 1, 3, 4, 1, 2, 1])",
        "continuousSubarrays(A = [1, 0, 1, 1, 1, 0, 1, 1, 1])",
        "continuousSubarrays(A = [2, 4, 6, 4, 2, 2, 2, 6, 10, 4, 2, 2])",
        "continuousSubarrays(A = [3,4,3,2,2,4,2,4,2,3,3,3,2])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = 'abba')",
        "makeSmallestPalindrome(s = 'abb')",
        "makeSmallestPalindrome(s = \"abab\")",
        "makeSmallestPalindrome(s = 'cdc')",
        "makeSmallestPalindrome(s = \"aacabdkacaa\")",
        "makeSmallestPalindrome(s = \"aacabdkacaa\")",
        "makeSmallestPalindrome(s = 'abdc')",
        "makeSmallestPalindrome(s = \"cc\")",
        "makeSmallestPalindrome(s = \"lakers\")",
        "makeSmallestPalindrome(s = 'acdcab')"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [6, 2, 1, 8, 10, 9, 3])",
        "findValueOfPartition(nums = [3, 5, 8, 10, 7, 12])",
        "findValueOfPartition(nums = [1, 3, 10])",
        "findValueOfPartition(nums = [1, 2, 6, 5, 3, 7, 10, 9])",
        "findValueOfPartition(nums = [10, 2, 5, 3, 7, 10, 12])",
        "findValueOfPartition(nums = [1, 3, 100, 7])",
        "findValueOfPartition(nums = [1, 6, 13, 15])",
        "findValueOfPartition(nums = [1, 10, 5, 2, 7, 12, 6])",
        "findValueOfPartition(nums = [1, 10, 2, 9, 5, 6, 1])",
        "findValueOfPartition(nums = [1, 10, 2, 22, 100, 100])"
    ],
    "sample_51": [
        "smallestString(s = 'akddsbncd')",
        "smallestString(s = \"kddsbnca\")",
        "smallestString(s = 'ax')",
        "smallestString(s = \"ba\")",
        "smallestString(s = 'aabc')",
        "smallestString(s = 'zzaz')",
        "smallestString(s = 'hzd')",
        "smallestString(s = 'zzabffzz')",
        "smallestString(s = \"bdbbbczb\")",
        "smallestString(s = 'zdkcnzdbd')"
    ],
    "sample_113": [
        "maximumBeauty(nums = [2, 4, 6, 4, 1], k = 1)",
        "maximumBeauty(nums = [1, 12, 9, 16, 5, 3], k = 3)",
        "maximumBeauty(nums = [1, 3, 1, 4, 2, 3, 5, 1], k = 2)",
        "maximumBeauty(nums = [1, 2, 4, 3], k = 4)",
        "maximumBeauty(nums = [1, 2, 3, 7, 9], k = 2)",
        "maximumBeauty(nums = [3, 6, 10, 15], k = 2)",
        "maximumBeauty(nums=[1, 2, 3, 4, 2, 5, 6], k=1)",
        "maximumBeauty(nums=[20, 1, 15, 3, 7, 10, 5, 8], k=2)",
        "maximumBeauty(nums = [1, 2, 1, 3, 4, 3, 3, 4, 4, 4, 4, 1, 2, 2, 2, 2, 1, 2, 1, 1, 1, 2, 3, 4, 2, 1, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 3, 1, 1, 3, 2, 3, 4, 2, 1, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 3, 1, 1, 3, 2, 3, 4, 2, 1, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 3, 1, 1, 3, 2, 3, 4, 2, 1, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 3, 1, 1, 3, 2, 3, 4, 2, 1, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 3, 1, 1, 3, 2, 3, 4, 2, 1, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 3, 1, 1, 3, 2, 3, 4, 2, 1, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 3, 1, 1, 3, 2, 3, 4, 2, 1, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 3, 1, 1, 3, 2, 3, 4, 2, 1, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 3, 1, 1, 3, 2, 3, 4, 2, 1, 2, 2, 1, 1, 2, 2, 2,",
        "maximumBeauty(nums = [1,2,1,3,2,3,3,2,2,2,2,1,2,2,3,3,1,2,2,1,2,1,2,3,1,1,1,3,1,1,3,3,2,2,1,2,2,2,1,3,1,1,2,2,2,2,3,3,3,1,1,2,1,3,1,3,3,2,2,3,1,1,1,3,3,2,2,2,2,1,2,3,2,2,2,1,2,3,3,3,1,1,1,2,2,2,1,3,2,2,2,1,2,2,2,1,3,1,3,2,2,1,1,3,2,2,1,1,2,3,2,1,2,1,2,2,2,1,1,2,2,2,3,1,2,2,1,3,3,3,2,1,1,2,2,2,3,3,3,1,3,1,1,1,2,1,2,1,2,1,2,2,1,2,2,1,1,2,2,1,3,3,2,2,1,3,2,3,2,2,3,2,2,2,1,3,2,2,3,2,2,1,2,3,3,2,1,3,3,1,3,3,3,2,1,1,2,1,2,1,2,3,2,3,2,2,2,2,2,3,1,2,1,2,2,2,1,2,2,1,2,3,2,1,1,1,1,3,3,2,2,1,2,3,3,2,2,1,2,1,2,1,2,2,2,1,2,1,3,3,3,3,2,3,1,2,1,1,2,2,1,2,2,2,1,2,2,1,2,3,1,2,1,1,3,3,2,1,3,2,2,2,3,2,1,1,2,2,2,2,1,2,3,2,2,2,2,2,1,2,2,3,2,2,2,1,1,2,2,1,1,3,3,1,2,2,2,2,1,"
    ],
    "sample_107": [
        "checkArray(nums = [10, 5, 2, 7, 8, 7], k = 3)",
        "checkArray(nums = [9, 1, 2, 3, 9], k = 3)",
        "checkArray(nums = [9, 1, 2, 3, 9], k = 3)",
        "checkArray(nums = [1, 5, 2, 1, 4], k = 3)",
        "checkArray(nums = [1,2,3,4,5], k = 3)",
        "checkArray(nums = [1, 2, 3, 2, 1], k = 3)",
        "checkArray(nums = [1, 2, 1, 2], k = 2)",
        "checkArray(nums = [10, 2, -10, 7, 2], k = 2)",
        "checkArray(nums = [3, 5, 5, 1, 2, 4], k = 3)",
        "checkArray(nums = [10,5,2,-2,15,10], k = 2)"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 15, additionalTank = 2)",
        "distanceTraveled(mainTank = 15, additionalTank = 3)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 20, additionalTank = 5)",
        "distanceTraveled(mainTank = 15, additionalTank = 0)",
        "distanceTraveled(mainTank = 6, additionalTank = 2)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 100, additionalTank = 100)",
        "distanceTraveled(mainTank = 24, additionalTank = 4)"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 2, 1])",
        "distinctDifferenceArray(nums = [2, 1, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4])",
        "distinctDifferenceArray(nums=[1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [3, 2, 1])",
        "distinctDifferenceArray(nums = [5, 7, 3, 9, 4, 3])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1, 2, 2, 3, 1, 4, 2])",
        "continuousSubarrays(A = [1, 2, 1, 2, 3])",
        "continuousSubarrays(A = [2, 4, 6])",
        "continuousSubarrays(A = [1,2,1,2,1,2])",
        "continuousSubarrays(A = [1, 0, 1, 0, 1, 0, 1, 1])",
        "continuousSubarrays(A = [1, 2, 1, 1, 3, 1])",
        "continuousSubarrays(A = [1, 2, 1, 1, 1, 1, 1, 1, 1])",
        "continuousSubarrays(A = [2, 4, 2, 1, 4, 2, 4])",
        "continuousSubarrays(A = [3, 2, 1, 2, 3, 4, 3])",
        "continuousSubarrays(A = [5, 6, 2, 7, 4, 0, 9, 6, 1])"
    ],
    "sample_6": [
        "colorTheArray(n = 3, queries = [[0,1],[2,1]])",
        "colorTheArray(n = 3, queries = [[1,1], [2,2], [2,1]])",
        "colorTheArray(n = 4, queries = [[1,1],[2,2],[0,1]])",
        "colorTheArray(n = 3, queries = [[2,2],[0,1]])",
        "colorTheArray(n = 5, queries = [[1,1],[1,2],[2,3],[2,4],[5,5]])",
        "colorTheArray(n = 4, queries = [[1,1],[2,2],[2,3],[3,1]])",
        "colorTheArray(n = 6, queries = [[1,3],[2,4],[0,5]])",
        "colorTheArray(n = 10, queries = [[2,1], [1,3], [1,8], [10,1], [5,9]])",
        "colorTheArray(n=6, queries = [[0,1],[0,2],[1,2],[0,4],[0,5],[0,6]])",
        "colorTheArray(n = 5, queries = [[1,1], [1,2], [1,3], [1,4], [1,5], [2,1], [2,2], [2,3], [2,4], [2,5], [3,1], [3,2], [3,3], [3,4], [3,5], [4,1], [4,2], [4,3], [4,4], [4,5], [5,1], [5,2], [5,3], [5,4], [5,5]])"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 10, b = 2)",
        "makeTheIntegerZero(a = 5, b = 2)",
        "makeTheIntegerZero(a = 5, b = 2)",
        "makeTheIntegerZero(a = 6, b = 2)",
        "makeTheIntegerZero(a = 8, b = 2)",
        "makeTheIntegerZero(a = 4, b = 5)",
        "makeTheIntegerZero(a = 235, b = 5)",
        "makeTheIntegerZero(a = 23, b = 3)",
        "makeTheIntegerZero(a = 192, b = 22)",
        "makeTheIntegerZero(a = 90000000000, b = 10000000000)"
    ],
    "sample_100": [
        "maximumJumps(nums = [100, -23, -23, 404, 100, 23, 23, 23, 3, 404], target = 3)",
        "maximumJumps(nums = [100, -23, -23, 404, 100, 23, 23, 23, 3, 404], target = 3)",
        "maximumJumps(nums = [6, 4, 14, 6, 8, 13, 9, 7, 10, 6, 12], target = 3)",
        "maximumJumps(nums = [100, -23, -23, 404, 100, 23, 23, 23, 3, 404], target = 3)",
        "maximumJumps(nums = [6,4,14,6,8,13,9,7,10,6,12], target = 9)",
        "maximumJumps(nums = [6, 4, 14, 6, 8, 13, 9, 7, 10, 6, 12], target = 5)",
        "maximumJumps(nums=[6, 4, 14, 6, 8, 13, 9, 7, 10, 6, 12], target=3)",
        "maximumJumps(nums = [10, 13, 12, 14, 15], target = 1)",
        "maximumJumps(nums = [100, -23, 11, -4, 78, -91, 31, -5], target = 6)",
        "maximumJumps(nums = [2, 6, 4, 5, 9, 8, 10, 2], target = 3)"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [3, 4, 4, 6, 1, 4, 4], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 2, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [8, 4, 0, 10, 12, 2, 10, 6, 14], threshold = 5)",
        "longestAlternatingSubarray(nums = [3, 1, 2, 4, 3], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140,",
        "longestAlternatingSubarray(nums = [1, 1, 1, 1], threshold = 0)",
        "longestAlternatingSubarray(nums = [2, 4, 2, 6, 4, 5, 6], threshold = 3)",
        "longestAlternatingSubarray(nums = [5, 3, 4, 2], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 4, 5, 6, 7, 1, 2, 4, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [8, 4, 0, 10, 6, 12, 1, 14, 9, 11], threshold = 5)"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 1, 1, 1, 1], b = [1, 2, 1, 2, 1])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [5, 5, 5, 5, 5])",
        "maxNonDecreasingLength(a = [1, 1, 1, 2, 2], b = [1, 1, 3, 3, 3])",
        "maxNonDecreasingLength(a = [0, 1, 2], b = [3, 2, 1])",
        "maxNonDecreasingLength(a = [3, 1, 4, 2], b = [4, 4, 4, 4])",
        "maxNonDecreasingLength(a = [1, 3, 2, 4, 5, 8, 7, 6], b = [1, 4, 2, 3, 5, 7, 8, 6])",
        "maxNonDecreasingLength(a = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15], b = [1, 3, 6, 10, 15, 2, 4, 8, 0, 13, 5, 9, 11, 7, 14, 12])",
        "maxNonDecreasingLength(a = [10, 3, 1, 8, 2, 9], b = [7, 4, 2, 1])",
        "maxNonDecreasingLength(a = [1, 5, 3, 7, 9, 10, 15], b = [1, 3, 4, 5, 15, 7, 9])",
        "maxNonDecreasingLength(a = [5, 3, 2, 5, 2, 5, 3, 5, 5], b = [6, 6, 5, 6, 4, 2, 5, 5, 6])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,0,0,0,1])",
        "numberOfGoodSubarraySplits(nums=[0,1,0])"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [0, 1, 0, 1, 0, 1], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 3, 1, 2, 4, 3], threshold = 2)",
        "longestAlternatingSubarray(nums = [4, 2, 5, 3, 7], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,1,1,1], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 0, 1, 1, 0], threshold = 0)",
        "longestAlternatingSubarray(nums = [2, 4, 7, 1, 5, 7], threshold = 0)",
        "longestAlternatingSubarray(nums=[1, 0, 0, 1, 1], threshold=1)",
        "longestAlternatingSubarray(nums = [1, 10, 4, 2, 7, 8, 1], threshold = 2)",
        "longestAlternatingSubarray(nums = [4, 2, 4, 6, 1, 4, 6, 6, 2, 4, 2, 4], threshold = 4)"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 1])",
        "findValueOfPartition(nums = [1, 5, 11, 5])",
        "findValueOfPartition(nums = [1, 3, 6, 7, 9])",
        "findValueOfPartition(nums = [4, 3, 6, 2])",
        "findValueOfPartition(nums = [3, 5, 10, 2, 7])",
        "findValueOfPartition(nums = [2, 1, 5, 7, 2, 3, 5])",
        "findValueOfPartition(nums=[4, 3, 1, 2])",
        "findValueOfPartition(nums = [3, 3, 5, 10, 7])",
        "findValueOfPartition(nums = [9, 3, 6, 1, 2, 1])",
        "findValueOfPartition(nums = [5, 3, 3, 2, 4, 5, 4])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = 'abba')",
        "makeSmallestPalindrome(s = 'abba')",
        "makeSmallestPalindrome(s = 'abccba')",
        "makeSmallestPalindrome(s = 'abb')",
        "makeSmallestPalindrome(s = 'a')",
        "makeSmallestPalindrome(s = 'abcba')",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abab\")",
        "makeSmallestPalindrome(s='abcb')",
        "makeSmallestPalindrome(s='ac')"
    ],
    "sample_18": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCCBA\")",
        "minLength(s = \"abab\")",
        "minLength(s = \"CDABBCDC\")",
        "minLength(s = \"AAABABCDDEE\")",
        "minLength(s = \"CDBBACABACDBACACCDAC\")"
    ],
    "sample_99": [
        "maximumJumps(nums = [100, -23, -23, 404, 100, 23, 23, 23, 3, 404], target = 3)",
        "maximumJumps(nums = [6, 4, 14, 6, 8, 13, 9, 7, 10, 6, 12], target = 3)",
        "maximumJumps(nums = [100, -23, -23, 404, 99], target = 3)",
        "maximumJumps(nums = [100, -23, -23, 404, 404], target = 3)",
        "maximumJumps(nums = [6, 2, 4, 0, 5, 1, 1, 4, 2, 9], target = 2)",
        "maximumJumps(nums = [9, 4, 2, 1, 4, 7, 9, 7, 8, 2], target = 3)",
        "maximumJumps(nums = [100, 200, 400, 300, 301, 302], target = 300)",
        "maximumJumps(nums=[4, 1, 1, 1, 1, 1, 1, 1], target=1)",
        "maximumJumps(nums = [4,14,6,10,1,20], target = 10)",
        "maximumJumps(nums=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], target=1)"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])",
        "colorTheArray(n = 5, queries = [[3, 1], [1, 2], [2, 3], [4, 1]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,2],[3,1],[3,2],[4,1]])",
        "colorTheArray(n = 5, queries = [[2, 1], [4, 1], [1, 2], [5, 0], [3, 0]])",
        "colorTheArray(n = 5, queries = [[2, 1], [4, 3], [2, 1], [3, 2], [1, 3], [2, 3]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 1], [1, 3], [2, 3], [3, 3]])",
        "colorTheArray(n = 5, queries = [[1,2],[2,2],[3,2],[4,3],[5,1]])",
        "colorTheArray(n = 5, queries = [[1,2],[2,4],[3,3],[3,4],[4,3]])",
        "colorTheArray(n=5, queries=[[1, 1], [1, 2], [2, 3], [2, 1], [3, 4], [3, 1]])",
        "colorTheArray(n=3, queries=[[1,1],[2,1],[1,2],[1,3]])"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 6, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 4)",
        "distanceTraveled(mainTank=1, additionalTank=10)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [12, 345, 2, 6, 7896])",
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 34, 57, 89, 145])",
        "countBeautifulPairs(nums = [1, 2, 6, 7, 8, 10])",
        "countBeautifulPairs(nums = [1, 2, 4, 7, 8, 10])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56, 67, 78, 89, 910, 1211])",
        "countBeautifulPairs(nums = [1, 6, 2, 7])",
        "countBeautifulPairs(nums = [222, 1, 2, 222, 2, 2])",
        "countBeautifulPairs(nums = [23, 73, 74, 31, 47, 70])",
        "countBeautifulPairs(nums = [412, 22, 62, 6, 58, 87, 812, 42, 4, 1, 3, 8, 4])"
    ],
    "sample_56": [
        "minCost(A = [1, 4, 8, 10], x = 2)",
        "minCost(A = [4, 3, 1, 2], x = 2)",
        "minCost(A = [1, 2, 4, 8], x = 3)",
        "minCost(A = [10, 20, 10], x = 2)",
        "minCost(A = [1,10,6,4,3], x = 2)",
        "minCost(A = [2, 5, 6, 1], x = 3)",
        "minCost(A = [4, 2, 5, 7, 3, 1], x = 2)",
        "minCost(A = [10, 10, 6, 4, 1], x = 3)",
        "minCost(A = [6, 2, 4, 1, 3], x = 3)",
        "minCost(A = [1, 4, 8, 6, 5, 5, 4], x = 3)"
    ],
    "sample_98": [
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [6,4,14,6,8,13,9,7,10,6,12], target = 3)",
        "maximumJumps(nums = [904], target = 3)",
        "maximumJumps(nums = [6,2,4,0,5,1,1,4,2,9], target = 2)",
        "maximumJumps(nums = [4,2,1,1,2], target = 1)",
        "maximumJumps(nums=[2, 6, 4, 5, 9, 8, 12, 13, 10, 11, 7], target=10)",
        "maximumJumps(nums = [10, -1, 2, -1, 3, 4, 2, 0], target = 1)",
        "maximumJumps(nums = [1, 2, 3], target = 1)",
        "maximumJumps(nums = [4,2,1,1,10,8,5,5,1,3,6,2,4,6,9,1,4,9,4,4,4,7,4,4,4,5,8,1,7,10], target = 9)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums=[0,1,1,0,1])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums=[1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 1, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 3])",
        "distinctDifferenceArray(nums = [2, 1, 3, 5, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [2,1,3])",
        "distinctDifferenceArray(nums = [2, 1, 3, 5, 3, 2, 1])",
        "distinctDifferenceArray(nums = [2, 3, 3, 1])"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [12, 345, 1, 1, 123])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "countBeautifulPairs(nums = [10, 12, 15, 35, 36])",
        "countBeautifulPairs(nums = [3, 12, 24, 36])",
        "countBeautifulPairs(nums = [12, 34, 98, 32])",
        "countBeautifulPairs(nums = [30, 13, 13, 30, 13, 30])",
        "countBeautifulPairs(nums = [12, 345, 1, 1, 1234, 1234, 1234, 345, 1234, 123, 123, 123])",
        "countBeautifulPairs(nums = [13, 541, 5, 22])",
        "countBeautifulPairs(nums = [101, 118, 116, 99, 107])",
        "countBeautifulPairs(nums=[12, 34, 43, 25, 22, 13, 18, 9])"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abcab\")",
        "minimizedStringLength(s = \"aaa\")",
        "minimizedStringLength(s = \"aaabbbcc\")",
        "minimizedStringLength(s = \"baaac\")",
        "minimizedStringLength(s = \"bcdef\")",
        "minimizedStringLength(s = \"aabacada\")"
    ],
    "sample_41": [
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aabbbcc\")",
        "minimumCost(s = \"aabcc\")",
        "minimumCost(s = \"abaab\")",
        "minimumCost(s = \"aaaaa\")",
        "minimumCost(s = \"aabaaab\")",
        "minimumCost(s = \"baba\")",
        "minimumCost(s = \"aabaaca\")",
        "minimumCost(s = \"zbzb\")",
        "minimumCost(s = \"hshs\")"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 1])",
        "distinctDifferenceArray(nums = [2, 1, 3, 5, 2, 3, 4, 1])",
        "distinctDifferenceArray(nums=[1, 2, 2, 3])",
        "distinctDifferenceArray(nums=[-2, -1, 0, 2, 3])",
        "distinctDifferenceArray(nums = [3, 5, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [5, 2, 1, 7, 4])",
        "distinctDifferenceArray(nums = [5, 3, 4, 3, 4, 4, 4])",
        "distinctDifferenceArray(nums = [4, 3, 6, 5, 0, 1, 2])",
        "distinctDifferenceArray(nums = [4, -3, -1, -2, -3, 3])"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [1, 2, 3])",
        "doesValidArrayExist(derived = [1, 2, 3])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [1,2,3])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [2, 4, 1, 3])",
        "doesValidArrayExist(derived = [1, 1, 3, 3])",
        "doesValidArrayExist(derived = [1, 3, 2, 1, 4])",
        "doesValidArrayExist(derived = [1, 2, 1, 2, 1, 1, 2])"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 2, 0])",
        "doesValidArrayExist(derived = [1, 1, 2])",
        "doesValidArrayExist(derived = [0, 1, 0, 0])",
        "doesValidArrayExist(derived = [1, 3, 4, 8])",
        "doesValidArrayExist(derived = [2, 3, 4, 1])",
        "doesValidArrayExist(derived = [0, 3, 0, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 0, 0, 0, 0, 1])",
        "doesValidArrayExist(derived = [5, 3, 6, 5, 1, 5])"
    ],
    "sample_52": [
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncca\")",
        "smallestString(s = \"abaabz\")",
        "smallestString(s = 'abaaakddsbncd')",
        "smallestString(s = 'aabcdde')",
        "smallestString(s = 'aaadncd')",
        "smallestString(s = 'aaybbz')",
        "smallestString(s = 'adbdag')",
        "smallestString(s = 'aabcaaa')",
        "smallestString(s = 'kkbsdbndd')"
    ],
    "sample_40": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aabbbcc\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"aabcc\")",
        "minimumCost(s = \"baac\")",
        "minimumCost(s = \"babcb\")",
        "minimumCost(s = \"zzzyyxx\")",
        "minimumCost(s = \"cccdc\")",
        "minimumCost(s = \"dd\")"
    ],
    "sample_38": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abca\")",
        "minimumCost(s = \"abca\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaaba\")",
        "minimumCost(s = \"abcabba\")",
        "minimumCost(s = \"abaacb\")",
        "minimumCost(s = \"abaacb\")",
        "minimumCost(s = \"aabaab!bb\")"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [2, 1, 3, 5, 3, 2])",
        "distinctDifferenceArray(nums = [2, 1, 3, 5, 3, 2])",
        "distinctDifferenceArray(nums = [1, 3, 5])",
        "distinctDifferenceArray(nums = [3, 2, 1])",
        "distinctDifferenceArray(nums = [2, 1, 3, 5, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 1])",
        "distinctDifferenceArray(nums=[1, 2, 3, 3])",
        "distinctDifferenceArray(nums = [5, 7, 10, 2, 3, 4, 2, 3, 4])"
    ],
    "sample_53": [
        "smallestString(s = \"baabc\")",
        "smallestString(s = \"baabc\")",
        "smallestString(s = \"baaz\")",
        "smallestString(s = 'baaz')",
        "smallestString(s = 'baa')",
        "smallestString(s = 'baab')",
        "smallestString(s = \"abca\")",
        "smallestString(s = \"baac\")",
        "smallestString(s = \"baaabc\")",
        "smallestString(s = \"babba\")"
    ],
    "sample_109": [
        "checkArray(nums = [10, 5, 2, 6], k = 1)",
        "checkArray(nums = [10, 5, 2, 3], k = 2)",
        "checkArray(nums = [10, 5, 2, 3], k = 3)",
        "checkArray(nums = [10, 5, 2, 3], k = 3)",
        "checkArray(nums = [1,2,3,4], k = 2)",
        "checkArray(nums = [1,2,3,4], k = 3)",
        "checkArray(nums = [2, 3, 1, 5], k = 2)",
        "checkArray(nums = [1,2,1], k = 3)",
        "checkArray(nums = [2, 3, 1, 2, 3, 2], k = 0)",
        "checkArray(nums = [1, 3, 2, 3, 1, 5], k = 3)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1, 2, 3, 4], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "maximumBeauty(nums = [1, 5, 2, 1, 4, 0, 1, 2], k = 3)",
        "maximumBeauty(nums = [2, 4, 7, 8, 10], k = 4)",
        "maximumBeauty(nums = [1,3,1,4,5], k = 2)",
        "maximumBeauty(nums = [2, 2, 3, 3, 3, 4, 4, 5], k = 2)",
        "maximumBeauty(nums=[3, 6, 1, 8], k=3)",
        "maximumBeauty(nums = [1,4,2,7,5,8], k = 2)",
        "maximumBeauty(nums = [3, 5, 10, 2, 7, 8], k = 3)",
        "maximumBeauty(nums = [4, 6, 11, 12, 13, 15], k = 1)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1,2,3,4,5])",
        "distinctDifferenceArray(a = [1, 2, 2, 3, 3, 3])",
        "distinctDifferenceArray(a = [1,2,3])",
        "distinctDifferenceArray(a = [2, 1, 3, 5, 3, 2, 4])",
        "distinctDifferenceArray(a = [1, 2, 1, 3, 3])",
        "distinctDifferenceArray(a = [1, 3, 5, 2])",
        "distinctDifferenceArray(a = [1,2,3,4,5,6,7,8,9,10,11,12,13])",
        "distinctDifferenceArray(a = [4, 1, 1, 1, 1, 3, 1])"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '512301')",
        "removeTrailingZeros(a = '512301')",
        "removeTrailingZeros(a = '512301')",
        "removeTrailingZeros(a = '5123010')",
        "removeTrailingZeros(a = '5123010')",
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = \"512300\")",
        "removeTrailingZeros(a = \"512301000\")",
        "removeTrailingZeros(a = \"512301\")",
        "removeTrailingZeros(a
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = 'neven')",
        "makeSmallestPalindrome(s = 'neve')",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = 'evene')",
        "makeSmallestPalindrome(s = \"abc\")",
        "makeSmallestPalindrome(s = 'a')",
        "makeSmallestPalindrome(s='noon')",
        "makeSmallestPalindrome(s = \"nenen\")",
        "makeSmallestPalindrome(s = 'el')",
        "makeSmallestPalindrome(s = \"abbbbab\")"
    ],
    "sample_55": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = 'kddsbnch')",
        "smallestString(s = \"kddsbncb\")",
        "smallestString(s = 'zdbncd')",
        "smallestString(s = \"aabbcca\")",
        "smallestString(s = \"aadfs\")",
        "smallestString(s = \"zzzkddsbncdzz\")",
        "smallestString(s = 'aaaaabbbbbbbbbccccccccc')",
        "smallestString(s = \"zdzkjc\")"
    ],
    "sample_35": [
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = \"000512301\")",
        "removeTrailingZeros(num = \"5123001\")",
        "removeTrailingZeros(num = \"5123000\")",
        "removeTrailingZeros(num = '00500')",
        "removeTrailingZeros(num = \"005123000\")",
        "removeTrailingZeros(num = \"512300000000000000000000\")"
    ],
    "sample_23": [
        "minLength(s=\"ABABCD\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABABAB\")",
        "minLength(s = \"ABABABABABABABAB\")",
        "minLength(s = \"ABABCDDD\")",
        "minLength(s = \"ABCDABCDABCDABCDABCDABCD\")",
        "minLength(s = \"ABABAC\")",
        "minLength(s=\"CDABABAB\")",
        "minLength(s = \"ABCDEF\")",
        "minLength(s=\"ABABABCDCDC\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = \"512300\")",
        "removeTrailingZeros(num = \"512300\")",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '500000')",
        "removeTrailingZeros(num = '0005123010')",
        "removeTrailingZeros(num = \"5000000\")"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 10, num2 = 4)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 3, num2 = 1)",
        "makeTheIntegerZero(num1 = 13, num2 = 3)",
        "makeTheIntegerZero(num1 = 6, num2 = 5)",
        "makeTheIntegerZero(num1 = 20, num2 = 4)",
        "makeTheIntegerZero(num1 = 25, num2 = 3)",
        "makeTheIntegerZero(num1 = 7, num2 = 11)",
        "makeTheIntegerZero(num1 = 32, num2 = 3)"
    ],
    "sample_57": [
        "distanceTraveled(a = 5, b = 2)",
        "distanceTraveled(a = 10, b = 5)",
        "distanceTraveled(a = 5, b = 5)",
        "distanceTraveled(a = 10, b = 10)",
        "distanceTraveled(a = 10, b = 4)",
        "distanceTraveled(a = 4, b = 3)",
        "distanceTraveled(a = 20, b = 3)",
        "distanceTraveled(a = 15, b = 0)",
        "distanceTraveled(a = 14, b = 2)",
        "distanceTraveled(a = 11, b = 5)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [8,2,4,7], t = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10], t = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 4, 7, 10, 11, 7, 12, 6, 7, 16, 18, 19], t = 10)",
        "longestAlternatingSubarray(nums = [2,3,4,2,4,2,4], t = 3)",
        "longestAlternatingSubarray(nums = [2,2,1,2,4,3], t = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 1, 2, 1, 2, 1, 2], t = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 3, 4, 1, 2, 3, 4, 6, 2], t = 4)",
        "longestAlternatingSubarray(nums = [5, 6, 7, 8, 9, 10, 2, 3, 4], t = 5)",
        "longestAlternatingSubarray(nums = [2, 4, 1, 2, 2, 4, 2, 2, 4, 4], t = 2)"
    ],
    "sample_102": [
        "maximumJumps(nums = [6, 4, 14, 6, 8, 13, 9, 7, 10, 6, 12], target = 3)",
        "maximumJumps(nums = [6, 4, 14, 6, 8, 13, 9, 7, 10, 6, 12], target = 3)",
        "maximumJumps(nums = [100, -23, -23, 404, 100, 23, 23, 23, 3, 404], target = 3)",
        "maximumJumps(nums = [6,4,14,6,8,13,9,7,10,6,12], target = 3)",
        "maximumJumps(nums = [4, 2, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [4, 2, 1, 1, 2, 3], target = 1)",
        "maximumJumps(nums = [4, 2, 5, 3, 1], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 6, 9, 5, 6, 1, 2, 3, 4, 7, 7, 6, 8, 3], target = 3)",
        "maximumJumps(nums=[5, 1, 2, 3, 4, 1, 2, 4], target=2)",
        "maximumJumps(nums=[100, -23, 100, 23, 100, 11, 33, -23, 33], target=3)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51200301')",
        "removeTrailingZeros(num = '0512301')",
        "removeTrailingZeros(num = '5000000')",
        "removeTrailingZeros(num = \"051230100\")",
        "removeTrailingZeros(num = '000000')",
        "removeTrailingZeros(num = '51203010000')"
    ],
    "sample_101": [
        "maximumJumps(nums = [10, 13, 12, 14, 15], target = 9)",
        "maximumJumps(nums = [10, 13, 12, 14, 15], target = 3)",
        "maximumJumps(nums = [100, -23, -23, 404, 404], target = 3)",
        "maximumJumps(nums = [10,13,12,14,15], target = 6)",
        "maximumJumps(nums = [3, 3, 3, 3, 3], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [10,13,12,14,15], target = 1)",
        "maximumJumps(nums = [4, 2, 1, 1, 2, 3], target = 1)",
        "maximumJumps(nums = [5, 6, 4, 4, 6, 9, 4, 4, 7, 4], target = 3)",
        "maximumJumps(nums = [100, -23, -23, 404, 404, 3, 3, 23, 3, 1, 3], target = 3)"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 2, 3])",
        "doesValidArrayExist(derived = [0, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 1])",
        "doesValidArrayExist(derived = [1,1,0,0,0])",
        "doesValidArrayExist(derived = [1,0,1,0,0,1,0,1,1,1,0,0,0,1,1])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,2,2,2,3,3])"
    ],
    "sample_19": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = 'ABCD')",
        "minLength(s = \"AACD\")",
        "minLength(s = \"CABCDA\")",
        "minLength(s = \"CDABABABCD\")",
        "minLength(s = \"CAABAB\")",
        "minLength(s = \"CBACDDABCDABC\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = 'nev')",
        "makeSmallestPalindrome(s = \"racecar\")",
        "makeSmallestPalindrome(s='neven')",
        "makeSmallestPalindrome(s = \"banana\")",
        "makeSmallestPalindrome(s = 'racecar')",
        "makeSmallestPalindrome(s = \"abcde\")",
        "makeSmallestPalindrome(s = \"evov\")",
        "makeSmallestPalindrome(s = 'zab')",
        "makeSmallestPalindrome(s = 'hulul')"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [1,2,4,3])",
        "semiOrderedPermutation(nums = [1, 2, 4, 3, 5])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4])",
        "semiOrderedPermutation(nums = [1, 3, 4, 2])",
        "semiOrderedPermutation(nums = [5, 1, 3, 4, 2])",
        "semiOrderedPermutation(nums = [2,1,3,4])",
        "semiOrderedPermutation(nums = [2, 4, 1, 3, 5])",
        "semiOrderedPermutation(nums = [1, 2, 4, 7, 5, 3, 6, 8])",
        "semiOrderedPermutation(nums = [1, 6, 3, 5, 4, 2])",
        "semiOrderedPermutation(nums=[1, 2, 4, 3, 1])"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums=[1,1,1,2,1,1])"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 4, 2, 5, 3], k = 1)",
        "maximumBeauty(nums = [3, 1, 2], k = 1)",
        "maximumBeauty(nums = [1, 6, 8, 11], k = 2)",
        "maximumBeauty(nums = [1, 2, 4, 5, 6, 8, 10], k = 2)",
        "maximumBeauty(nums = [10,2,6,4,1], k = 1)",
        "maximumBeauty(nums = [10, 2, 3, 6], k = 3)",
        "maximumBeauty(nums = [6,2,8,3], k = 1)",
        "maximumBeauty(nums = [1,4,2,3,7,8,15], k = 3)",
        "maximumBeauty(nums = [1, 4, 11, 2, 3, 11], k = 2)",
        "maximumBeauty(nums=[2,10,8,12,14,17], k=2)"
    ],
    "sample_117": [
        "minimumIndex(nums = [3, 4, 3, 2, 3, -1, 3, 3])",
        "minimumIndex(nums = [3, 4, 3, 2, 3, 1, 4, 2])",
        "minimumIndex(nums = [6, 1, 3, 3, 3, 6, 6])",
        "minimumIndex(nums = [0, 1, 2, 3, 0])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6])",
        "minimumIndex(nums = [1, 2, 3, 2, 3, 3])",
        "minimumIndex(nums = [3, 1, 3, 2, 1])",
        "minimumIndex(nums = [3, 1, 2, 3, 1, 1, 2, 1])",
        "minimumIndex(nums = [1, 2, 2, 2, 2, 2, 4, 4, 4])",
        "minimumIndex(nums = [4,3,1,1,3,3,2,2,2,2,1,2])"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 4, num2 = 2)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 11, num2 = 2)",
        "makeTheIntegerZero(num1 = 11, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 1)",
        "makeTheIntegerZero(num1 = 5, num2 = 4)",
        "makeTheIntegerZero(num1 = 11, num2 = 5)",
        "makeTheIntegerZero(num1 = 14, num2 = 10)",
        "makeTheIntegerZero(num1 = 40, num2 = 4)",
        "makeTheIntegerZero(num1 = 63, num2 = 5)"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [12, 345, 2, 6, 7896])",
        "from math import gcd\n\ndef countBeautifulPairs(nums: List[int]) -> int:\n\n    n = len(nums)\n    \n    ct = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            f = int(str(nums[i])[0])\n            s = int(str(nums[j])[-1])\n            \n            #print(f,s)\n            \n            if gcd(s, f)",
        "countBeautifulPairs(nums = [12, 22, 33, 44, 55, 66])",
        "countBeautifulPairs(nums = [12, 13, 21, 23, 32])",
        "countBeautifulPairs(nums=[12, 28, 18, 21, 14])",
        "countBeautifulPairs(nums = [10, 12, 15, 35, 50, 77])",
        "countBeautifulPairs(nums = [12, 28, 36, 37, 120, 121, 122, 125, 128, 130, 134, 135])",
        "countBeautifulPairs(nums = [20, 37, 25, 37, 5, 95, 14, 64, 11, 24])",
        "countBeautifulPairs(nums = [29, 45, 35, 40, 4, 11, 46, 26, 14, 13, 39, 50, 33, 22, 27, 1, 21])",
        "countBeautifulPairs(nums = [3542, 6455, 2899, 7897, 1056, 8332, 6035, 6855, 2422, 6995])"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 4, num2 = 1)",
        "makeTheIntegerZero(num1 = 11, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 2, num2 = 4)",
        "makeTheIntegerZero(num1 = 10, num2 = 7)",
        "makeTheIntegerZero(num1 = 10, num2 = 7)",
        "makeTheIntegerZero(num1 = 3, num2 = 7)",
        "makeTheIntegerZero(num1 = 20, num2 = 2)",
        "makeTheIntegerZero(num1 = 57, num2 = 13)",
        "makeTheIntegerZero(num1 = 57, num2 = 27)"
    ],
    "sample_20": [
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"CDABAB\")",
        "minLength(s = \"AAABBBCCD\")",
        "minLength(s = \"ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCD\")",
        "minLength(s = \"CDAABABCD\")",
        "minLength(s = \"ABABAAAAABCD\")",
        "minLength(s = \"CDABDC\")",
        "minLength(s = \"ACBDEFBCDEFG\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 2, 2, 3], k = 1)",
        "maximumBeauty(nums = [2, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [2, 4, 6, 8, 10], k = 3)",
        "maximumBeauty(nums = [3, 3, 4, 2, 1], k = 1)",
        "maximumBeauty(nums = [5, 4, 9, 7, 1, 3], k = 2)",
        "maximumBeauty(nums = [1, 4, 4, 2, 5], k = 1)",
        "maximumBeauty(nums = [1, 12, 9, 16, 5, 3, 24, 8, 6, 28], k = 2)",
        "maximumBeauty(nums = [4, 10, 1, 3, 2], k = 3)",
        "maximumBeauty(nums = [1, 2, 4, 5, 7, 8, 10, 11, 12, 14], k = 2)",
        "maximumBeauty(nums = [10, 2, 1, 4, 5, 9], k = 4)"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [12, 345, 2, 6, 7896])",
        "countBeautifulPairs(nums = [12, 345, 2, 6, 7896])",
        "countBeautifulPairs(nums=[12,24,8,32])",
        "countBeautifulPairs(nums = [1,2,3,2,1])",
        "countBeautifulPairs(nums = [12, 23, 11, 15])",
        "countBeautifulPairs(nums = [12,23,24,35,46,57])",
        "countBeautifulPairs(nums = [12, 23, 11, 9, 6])",
        "countBeautifulPairs(nums = [526, 561, 588, 669])",
        "countBeautifulPairs(nums = [2,3,4,5,6,8,9,10,12,20])",
        "countBeautifulPairs(nums = [236,535,93,17,407,48,99,543,446,644])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 4, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 3)",
        "makeTheIntegerZero(num1 = 3, num2 = 1)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 15, num2 = 5)",
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 24, num2 = 6)",
        "makeTheIntegerZero(num1 = 3, num2 = 12)",
        "makeTheIntegerZero(num1 = 100000, num2 = 2)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = 'neven')",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = \"neve\")",
        "makeSmallestPalindrome(s = \"abccba\")",
        "makeSmallestPalindrome(s = \"noon\")",
        "makeSmallestPalindrome(s = 'nevn')",
        "makeSmallestPalindrome(s = \"noon\")",
        "makeSmallestPalindrome(s = \"mom\")",
        "makeSmallestPalindrome(s = \"abcbdab\")",
        "makeSmallestPalindrome(s = 'cona')"
    ],
    "sample_37": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"zzyyxx\")",
        "minimumCost(s = \"abcda\")",
        "minimumCost(s = \"aabbbcc\")",
        "minimumCost(s = \"aacaba\")",
        "minimumCost(s = \"mbad\")",
        "minimumCost(s = \"mbbm\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,2,2,5,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "numberOfGoodSubarraySplits(nums = [1,2,2,2,5,0])",
        "numberOfGoodSubarraySplits(nums = [1,2,2,2,5,0])",
        "numberOfGoodSubarraySplits(nums=[1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums=[1,1,1])"
    ],
    "sample_105": [
        "checkArray(nums = [10, 5, 2, 7, 8], k = 3)",
        "checkArray(nums = [10, 5, 2, 7, 8], k = 3)",
        "checkArray(nums = [1, -1, 5, -2, 3], k = 3)",
        "checkArray(nums = [1, -1], k = 1)",
        "checkArray(nums = [10, 5, 2, 7], k = 20)",
        "checkArray(nums = [1,1,2,2], k = 2)",
        "checkArray(nums = [1, 2, 3, -1, 1], k = 3)",
        "checkArray(nums = [1, 1, 1, 1, 2], k = 2)",
        "checkArray(nums=[-1, 0, 1, 2, -1, -4], k=3)",
        "checkArray(nums = [1, -1, 2, 1, -2, 4, -3], k = 2)"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [1, 2, 4, 3])",
        "semiOrderedPermutation(nums = [1, 2, 4, 3])",
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 3, 2, 5, 4])",
        "semiOrderedPermutation(nums = [4, 1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 4, 5, 3, 6])",
        "semiOrderedPermutation(nums = [1, 3, 6, 4, 2, 5, 7])",
        "semiOrderedPermutation(nums = [1, 10, 11, 2, 9])"
    ],
    "sample_108": [
        "checkArray(nums = [10, 5, 2, 7, 8], k = 3)",
        "checkArray(nums = [1, -1, 1], k = 2)",
        "checkArray(nums = [1, 1, 1], k = 1)",
        "checkArray(nums = [3, 1, 2, -2, 5, 6], k = 3)",
        "checkArray(nums = [10, 10, 2, -2, -2, 1], k = 2)",
        "checkArray(nums = [1, 2, -1, 3], k = 2)",
        "checkArray(nums = [3, 1, 2, 2], k = 3)",
        "checkArray(nums = [1, -2, 3, 2], k = 2)",
        "checkArray(nums = [5, -4, 1, -2, -2, 3], k = 2)",
        "checkArray(nums = [1, 4, 1, -1, 0, -2, 4, 0, 3], k = 2)"
    ],
    "sample_39": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abaabba\")",
        "minimumCost(s = \"baanaaa\")",
        "minimumCost(s = \"babcb\")",
        "minimumCost(s = \"aababbab\")",
        "minimumCost(s = \"baacbd\")"
    ],
    "sample_65": [
        "findValueOfPartition(a = [4, 2, 5, 7, 10, 11])",
        "findValueOfPartition(a = [2, 7, 5, 8, 4])",
        "findValueOfPartition(a = [1, 2, 3, 5])",
        "findValueOfPartition(a = [1, 5, 9, 2])",
        "findValueOfPartition(a = [3, 8, 10, 1, 9, 2, 5])",
        "findValueOfPartition(a = [6, 3, 1, 9, 10])",
        "findValueOfPartition(a = [3, 7, 5, 10])",
        "findValueOfPartition(a = [1, 10, 3, 4, 2, 7, 6])",
        "findValueOfPartition(a = [1, 10, 5, 4, 7, 3, 6, 9, 8])",
        "findValueOfPartition(a = [3, 1, 5, 8, 7, 9])"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 7, additionalTank = 3)",
        "distanceTraveled(mainTank = 12, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 30, additionalTank = 4)",
        "distanceTraveled(mainTank = 32, additionalTank = 7)",
        "distanceTraveled(mainTank = 22, additionalTank = 13)",
        "distanceTraveled(mainTank = 100, additionalTank = 45)",
        "distanceTraveled(mainTank = 23, additionalTank = 3)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [1,2,3,4])",
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [2, 3, 5, 6])",
        "doesValidArrayExist(derived = [1, 1, 2, 2, 2, 3, 3, 3])",
        "doesValidArrayExist(derived = [3, 5, 6, 2, 10, 11, 12])",
        "doesValidArrayExist(derived = [1, 4, 2, 5, 5, 5, 1, 0])"
    ],
    "sample_106": [
        "checkArray(nums = [10, 5, 2, 7, 8], k = 3)",
        "checkArray(nums = [1, 2, 0], k = 2)",
        "checkArray(nums = [1, 5, 0, 10, 14], k = 2)",
        "checkArray(nums = [1, -1, 1], k = 2)",
        "checkArray(nums = [1, 2, 3, 5], k = 2)",
        "checkArray(nums = [1, 5, 0, 1, 5], k = 2)",
        "checkArray(nums = [1, 1, 1, 2], k = 1)",
        "checkArray(nums = [2, 1, 5, 0, 0, 3], k = 2)",
        "checkArray(nums = [5, 0, 4, 1, 2], k = 2)",
        "checkArray(nums=[1, 3, 2, 4, 6, 5, 6], k=3)"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [4,2,3,4,4,2,2], threshold = 0)",
        "longestAlternatingSubarray(nums = [4,2,3,4,4,2,2], threshold = 0)",
        "longestAlternatingSubarray(nums = [4, 2, 5, 3], threshold = 3)",
        "longestAlternatingSubarray(nums = [2, 4, 5, 6], threshold = 3)",
        "longestAlternatingSubarray(nums = [0,1,0,1,1,1], threshold = 0)",
        "longestAlternatingSubarray(nums=[1,4,2,5,7], threshold=5)",
        "longestAlternatingSubarray(nums = [4, 24, 6, 30, 39, 24, 7, 6, 21], threshold = 16)",
        "longestAlternatingSubarray(nums = [5,3,4,2,2,2,6], threshold = 3)",
        "longestAlternatingSubarray(nums=[1,10,5,2,7], threshold = 5)",
        "longestAlternatingSubarray(nums = [10,11,12,2,3,14,15,16], threshold = 5)"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [12, 345, 2, 6, 7896])",
        "countBeautifulPairs(nums = [12, 345, 2, 6, 7896])",
        "countBeautifulPairs(nums = [12, 345, 2, 6, 7896])",
        "countBeautifulPairs(nums = [12, 34, 56, 78, 90])",
        "countBeautifulPairs(nums = [3, 2, 1, 5, 4])",
        "countBeautifulPairs(nums = [3,3])",
        "countBeautifulPairs(nums = [1, 2, 4, 5, 7, 8, 10, 11, 12, 14, 15, 17])",
        "countBeautifulPairs(nums = [12,23,24,56,34,2])",
        "countBeautifulPairs(nums = [101, 99, 102, 99, 103, 99])",
        "countBeautifulPairs(nums = [12, 16, 22, 10, 10, 14, 14, 26, 15, 18, 26, 19, 18, 19, 21, 16, 18, 14, 10, 18, 24, 23, 28, 29, 16, 25, 16, 24, 25, 21, 18, 24, 19, 24, 21, 17, 29, 13, 20, 29, 17, 12, 20, 14, 10, 24, 15, 17, 20, 17, 28, 12, 14, 25, 10, 14, 24, 19, 14, 13, 25, 22, 20, 29, 26, 24, 28, 29, 11, 16, 25, 11, 22, 19, 14, 28, 19, 21, 27, 15, 24, 28, 24, 18, 11, 10, 18, 14, 12, 14, 17, 28, 16, 10, 25, 28, 14, 15, 11, 26, 14, 16, 19, 20, 19, 27, 24, 10, 12, 25, 23, 19, 26, 13, 27, 17, 23, 27, 10, 21, 12, 29, 21, 13, 13, 11, 25, 14, 18, 22, 18, 18, 12, 13, 12, 19, 25, 10, 23, 12, 25, 10, 11, 10, 29, 22, 15, 22,"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 3, 4, 1, 2, 3, 4, 6, 2], t = 4)",
        "longestAlternatingSubarray(nums = [1, 1, 0, 1, 1], t = 0)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7], t = 4)",
        "longestAlternatingSubarray(nums=[1, 2, 4, 2, 1], t=4)",
        "longestAlternatingSubarray(nums=[1, 2, 3, 4, 3, 4, 1, 2, 3, 4, 6, 2], t=4)",
        "longestAlternatingSubarray(nums=[2,4,7,1,5,3,8,6], t=4)",
        "longestAlternatingSubarray(nums=[6,2,3,8], t=10)",
        "longestAlternatingSubarray(nums = [1,2,3,4,3,2,1,2,3,5,4], t = 6)",
        "longestAlternatingSubarray(nums = [6,4,7,2,8,5,7,3,9], t = 8)",
        "longestAlternatingSubarray(nums=[1,4,3,4,1,6,1,8,10,1], t=3)"
    ],
    "sample_36": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aabbbcc\")",
        "minimumCost(s = \"abca\")",
        "minimumCost(s = \"baaab\")",
        "minimumCost(s = \"abacaba\")",
        "minimumCost(s = \"cac\")",
        "minimumCost(s = \"time\")",
        "minimumCost(s = \"yxy\")",
        "minimumCost(s = \"mbmzbxdb\")",
        "minimumCost(s = \"ttaaabbb\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"A\")",
        "minLength(s = \"ABCBDAB\")",
        "minLength(s = \"ABCCBA\")",
        "minLength(s = \"AAABBB\")",
        "minLength(s = \"CABBA\")",
        "minLength(s = \"CABAB\")",
        "minLength(s = \"AACDABCDA\")",
        "minLength(s = \"AAACDABBB\")",
        "minLength(s = \"ABDCABDABCD\")"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,0,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,0,0,0,0,0,0,1,1,1,0,1])"
    ],
    "sample_9": [
        "colorTheArray(n = 2, queries = [[1, 0], [1, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 2], [0, 3]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [0, 2]])",
        "colorTheArray(n = 4, queries = [[0, 1], [1, 1], [2, 1], [3, 1]])",
        "colorTheArray(n = 3, queries = [[1,1],[2,1],[1,3]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 1], [1, 0], [0, 1]])",
        "colorTheArray(n = 3, queries = [[1,1], [2,1], [0,0]])",
        "colorTheArray(n = 2, queries = [[1, 1], [2, 2], [2, 2], [1, 1]])",
        "colorTheArray(n = 6, queries = [[1, 1], [2, 2], [2, 1], [2, 1], [3, 3], [3, 1]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 1, 1, 1], nums2 = [1, 1, 1, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 1, 2, 1], nums2 = [1, 2, 3, 4, 5])",
        "maxNonDecreasingLength(nums1 = [2, 1], nums2 = [1, 2])",
        "maxNonDecreasingLength(nums1 = [1, 2, 1, 2, 6], nums2 = [6, 1, 2, 1, 2])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4], nums2 = [2, 1, 2, 3])",
        "maxNonDecreasingLength(nums1 = [1,2,3,5,4,7], nums2 = [6,5,3,4,2,1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 5, 3, 7, 101, 18], nums2 = [2, 3, 7, 10, 18, 101, 19])",
        "maxNonDecreasingLength(nums1 = [1, 10, 100, 1000, 10000], nums2 = [5, 55, 555, 5555, 55555])",
        "maxNonDecreasingLength(nums1 = [1, 2, 1, 2, 6, 7, 9, 10, 1, 11, 12], nums2 = [6, 7, 9, 10, 11, 12, 1, 1, 2, 1, 2])",
        "maxNonDecreasingLength(nums1 = [3, 3, 1, 3, 5, 1, 7], nums2 = [1, 2, 1, 3, 2, 1, 2])"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 4, 3], k = 2)",
        "maximumBeauty(nums = [1, 2, 1, 3, 1], k = 2)",
        "maximumBeauty(nums = [2, 1, 2, 4, 3], k = 2)",
        "maximumBeauty(nums = [4, 2, 3, 6, 1, 12], k = 2)",
        "maximumBeauty(nums = [12, 345, 3, 98, 9, 23, 4, 56], k = 3)",
        "maximumBeauty(nums = [2, 4, 7, 9, 1, 3], k = 4)",
        "maximumBeauty(nums = [10, 12, 13, 2, 3], k = 2)",
        "maximumBeauty(nums = [1,2,1,3,4,1,5,1,6,1], k = 3)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [10, 9, 8, 7])",
        "findValueOfPartition(nums = [1, 10, 3, 2])",
        "findValueOfPartition(nums = [1, 3, 15])",
        "findValueOfPartition(nums = [2, 3, 5, 6, 7, 9])",
        "findValueOfPartition(nums=[5, 2, 3, 1, 4])",
        "findValueOfPartition(nums = [2,3,3,4,5,6])",
        "findValueOfPartition(nums = [2, 2, 2, 2, 1, 2, 2, 2])",
        "findValueOfPartition(nums = [4,3,7,2])",
        "findValueOfPartition(nums = [1, 10, 2, 2, 3, 3, 4, 4, 4])",
        "findValueOfPartition(nums = [3, 9, 1, 7, 5, 2])"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [6, 2, 4, 5, 9, 1, 3])",
        "findValueOfPartition(nums = [1,10,100,1000])",
        "findValueOfPartition(nums = [5, 10, 15, 20, 25])",
        "findValueOfPartition(nums = [2,3,10,5,1])",
        "findValueOfPartition(nums = [1, 10, 4, 3, 2, 2, 1])",
        "findValueOfPartition(nums = [3, 10, 15, 8, 7])",
        "findValueOfPartition(nums = [2,1,2,3,3])",
        "findValueOfPartition(nums=[1,2,2,4,5,6])",
        "findValueOfPartition(nums=[0,10,11,12,13])",
        "findValueOfPartition(nums = [10, 9, 8, 5, 2, 3, 4, 6, 7, 1])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [1, 2, 4, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 5, 4, 3])",
        "semiOrderedPermutation(nums = [5, 3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [1, 2, 6, 4, 5])",
        "semiOrderedPermutation(nums = [1, 3, 6, 7, 3])"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [3, 1, 4, 2])",
        "semiOrderedPermutation(nums = [1, 5, 4, 3, 2])",
        "semiOrderedPermutation(nums = [1, 3, 1])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4, 3])",
        "semiOrderedPermutation(nums = [2, 3, 5, 4, 1, 6])",
        "semiOrderedPermutation(nums = [1, 5, 3, 5])"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"aaa\", s2 = \"bbb\", s3 = \"ccc\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"aaa\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"aa\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ac\", s3 = \"bc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"adc\", s3 = \"aec\")",
        "findMinimumOperations(s1 = \"ad\", s2 = \"bd\", s3 = \"bd\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"ab\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"hot\", s2 = \"dog\", s3 = \"dot\")",
        "findMinimumOperations(s1 = \"dog\", s2 = \"god\", s3 = \"ogd\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"bcdea\", s3 = \"ecabd\")"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"abababa\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abacaba\")",
        "longestSemiRepetitiveSubstring(s = \"abacaba\")",
        "longestSemiRepetitiveSubstring(s = \"abaccc\")",
        "longestSemiRepetitiveSubstring(s = \"abcbaba\")",
        "longestSemiRepetitiveSubstring(s = \"ababb\")",
        "longestSemiRepetitiveSubstring(s = \"cbbd\")",
        "longestSemiRepetitiveSubstring(s = \"aaba\")",
        "longestSemiRepetitiveSubstring(s = \"bbabbababababababababababababa\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words=[\"aba\", \"bbb\", \"aba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"aaa\", \"aab\", \"aba\", \"baa\"])",
        "maximumNumberOfStringPairs(words = [\"aaa\", \"aba\", \"baa\", \"bab\"])",
        "maximumNumberOfStringPairs(words = [\"pqr\", \"mno\", \"abc\", \"xyz\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"ab\", \"ba\", \"aaa\", \"abba\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"zz\", \"dd\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"qq\", \"aa\", \"bb\", \"xx\", \"yy\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"abc\", \"aba\", \"baa\", \"aaa\", \"abb\"])",
        "maximumNumberOfStringPairs(words=[\"abac\", \"abacabac\", \"abc\", \"abcc\", \"abcabc\"])",
        "maximumNumberOfStringPairs(words = [\"abab\", \"abba\", \"cdab\", \"cdc\", \"ac\", \"a\", \"cd\", \"cdcd\"])"
    ],
    "sample_247": [
        "minOperations(s1 = \"aba\", s2 = \"cdc\", x = 2)",
        "minOperations(s1 = \"aba\", s2 = \"baa\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"aba\", x = 1)",
        "minOperations(s1 = \"aba\", s2 = \"aaba\", x = 2)",
        "minOperations(s1 = \"bcabc\", s2 = \"ababc\", x = 2)",
        "minOperations(s1 = \"01100\", s2 = \"10110\", x = 3)",
        "minOperations(s1 = \"aababca\", s2 = \"cbabac\", x = 1)",
        "minOperations(s1 = \"abdc\", s2 = \"aacd\", x = 1)",
        "minOperations(s1 = \"kkkk\", s2 = \"skksk\", x = 4)",
        "minOperations(s1 = \"mbau\", s2 = \"vmdbu\", x = 3)"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"aba\", \"cdc\", \"eae\"])",
        "maximumNumberOfStringPairs(words = [\"banana\", \"apple\", \"mango\", \"orange\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"dog\", \"cat\", \"dog\", \"cat\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"bb\", \"ac\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"cd\", \"bcd\", \"abcd\"])",
        "maximumNumberOfStringPairs(words = [\"ac\", \"bb\", \"ac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"baba\", \"aba\"])",
        "maximumNumberOfStringPairs(words = [\"banana\", \"banana\", \"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"nnn\", \"ss\", \"a\", \"sss\"])"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 4, 3, 2, 1])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 4, 3, 2, 1])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 1, 3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,5,5])",
        "minGroupsForValidAssignment(nums = [4,3,2])",
        "minGroupsForValidAssignment(nums = [4,3,2])",
        "minGroupsForValidAssignment(nums=[3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,4])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 4)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 3, m = 2)",
        "differenceOfSums(n = 6, m = 4)",
        "differenceOfSums(n = 6, m = 4)",
        "differenceOfSums(n = 100, m = 3)"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"011101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101010\", k = 2)",
        "shortestBeautifulSubstring(s = \"001100\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"010010\", k = 1)",
        "shortestBeautifulSubstring(s = \"01100110\", k = 2)",
        "shortestBeautifulSubstring(s = \"010011\", k = 2)",
        "shortestBeautifulSubstring(s = \"1010111\", k = 3)",
        "shortestBeautifulSubstring(s = '1110001111', k = 2)",
        "shortestBeautifulSubstring(s = \"1101001110101110\", k = 2)"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"cde\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abe\")",
        "findMinimumOperations(s1 = \"at\", s2 = \"at\", s3 = \"at\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"cab\", s3 = \"aba\")",
        "findMinimumOperations(s1 = \"b\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"ab\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"aac\", s3 = \"aca\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"acbd\", s3 = \"aabcd\")",
        "findMinimumOperations(s1 = \"ax\", s2 = \"by\", s3 = \"ax\")",
        "findMinimumOperations(s1 = \"aaccc\", s2 = \"bbbb\", s3 = \"c\")"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"abacabad\")",
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbbcc\")",
        "longestSemiRepetitiveSubstring(s = \"aab\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbbb\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abaababa\")",
        "longestSemiRepetitiveSubstring(s = \"abcbbcba\")",
        "longestSemiRepetitiveSubstring(s = \"bbabcbcbbb\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaaabbbbcc\")"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6, 7])",
        "minSum(nums1 = [1, 4, 5], nums2 = [7, 0, 0])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [4, 3, 2, 1])",
        "minSum(nums1 = [0, 1, 2, 3], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [4, 5, 6, 7, 8, 9, 10, 11, 12, 13])",
        "minSum(nums1 = [0, 4, 3, 0, 0, 0], nums2 = [7, 3, 1, 0, 0, 0])",
        "minSum(nums1 = [2, 4, 0, 1], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [3, 4, 2], nums2 = [1, 5, 6, 8, 9])",
        "minSum(nums1 = [1, 4, 0, 9, 0], nums2 = [5, 4, 2, 1])"
    ],
    "sample_289": [
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"1100\")",
        "minimumSteps(s
        "minimumSteps(s = \"10011\")",
        "minimumSteps(s = \"01001\")",
        "minimumSteps(s = \"011110\")",
        "minimumSteps(s = \"000111000\")"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [2, 3, -2, 4])",
        "maximumTripletValue(nums = [3,2,6,8,2,3])",
        "maximumTripletValue(nums = [-3, -5, -8, -4, -10])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [3, -1, 2, -1, 2])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maximumTripletValue(nums = [3, 0, -2, 4])",
        "maximumTripletValue(nums = [3, 4, 5, 2, 6, 1])",
        "maximumTripletValue(nums = [2, 3, 5, 4, 6, 8, 1, 10])",
        "maximumTripletValue(nums = [-3, -2, -6, -4, -5, 7, 8, 10, 1])"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aiaiueo\", k = 2)",
        "beautifulSubstrings(s = \"aba\", k = 1)",
        "beautifulSubstrings(s=\"aba\", k=2)",
        "beautifulSubstrings(s = \"xxyyxyxyxx\", k = 3)",
        "beautifulSubstrings(s = \"x\", k = 1)",
        "beautifulSubstrings(s = \"aba\", k = 3)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 3)",
        "beautifulSubstrings(s = \"aabb\", k = 2)",
        "beautifulSubstrings(s = \"baiaoueo\", k = 4)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"110110\")",
        "minimumBeautifulSubstrings(s = \"zzz\")",
        "minimumBeautifulSubstrings(s = \"2020\")",
        "minimumBeautifulSubstrings(s = \"aabaa\")",
        "minimumBeautifulSubstrings(s = \"232425\")",
        "minimumBeautifulSubstrings(s = \"2222\")",
        "minimumBeautifulSubstrings(s = \"666\")",
        "minimumBeautifulSubstrings(s = \"3242415\")",
        "minimumBeautifulSubstrings(s = \"a11b11c11d11e11f11g11h11i11j11k11l11m11\")",
        "minimumBeautifulSubstrings(s = \"abcbaaccba\")"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1], [1]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[0, 1, 0], [1, 0, 1], [1, 1, 1]])",
        "matrixSum(a = [[1], [4], [3]])",
        "matrixSum(a = [[3, 5], [4, 6]])",
        "matrixSum(a = [[1,1,1],[2,2,2],[2,2,2]])",
        "matrixSum(a = [[1, 2, 1], [1, 0, 2], [2, 1, 1]])",
        "matrixSum(a = [[2, 1, 3], [2, 1, 3], [3, 2, 1]])",
        "matrixSum(a = [[3, 1, 1, 4, 1], [5, 6, 1, 2, 3], [7, 8, 2, 3, 2]])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [0, 0, 0, 0], nums2 = [0, 0, 0, 0])",
        "minSum(nums1 = [1, 0, -1, 0, -2, 2], nums2 = [0, -1, 0, -2, 2, 2])",
        "minSum(nums1 = [3, 4, 0], nums2 = [5, 6, 3])",
        "minSum(nums1 = [1, 2, 3, 4, 0], nums2 = [1, 2, 3, 4, 0])",
        "minSum(nums1 = [0, 0, 0], nums2 = [1, 0, 1])",
        "minSum(nums1 = [0, 0, 0], nums2 = [0, 1, 1])",
        "minSum(nums1 = [0, 0, 1, 0, 1], nums2 = [1, 1, 0, 1, 0])",
        "minSum(nums1 = [0, 3, 5, 7], nums2 = [2, 3, 4, 5])",
        "minSum(nums1 = [4, 2, 1, 4, 2], nums2 = [3, 0, 2, 3, 0])"
    ],
    "sample_282": [
        "minOperations(nums1 = [1, 10, 4, 6], nums2 = [2, 7, 8, 9])",
        "minOperations(nums1 = [1, 2, 5], nums2 = [2, 4, 3])",
        "minOperations(nums1 = [1, 1, 4, 2, 3], nums2 = [5, 2, 6, 2, 3])",
        "minOperations(nums1 = [1, 3, 5, 7, 9], nums2 = [2, 4, 6, 8, 10])",
        "minOperations(nums1 = [5, 3, 6, 5], nums2 = [4, 4, 6])",
        "minOperations(nums1 = [1, 10, 4, 6], nums2 = [0, 9, 5, 1])",
        "minOperations(nums1 = [1, 1, 4, 2, 3], nums2 = [4, 4, 3, 4, 3])",
        "minOperations(nums1 = [2,5,6,9,10,15], nums2 = [1,2,3,4,8,12])",
        "minOperations(nums1 = [1, 2, 5, 7, 8, 12], nums2 = [2, 4, 6, 9, 10, 15])",
        "minOperations(nums1 = [3,5,6,8,10,11,15], nums2 = [1,2,4,7,13,16,17])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1,2,1,2,3])",
        "alternatingSubarray(nums = [1,2,1,2,3])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 3])",
        "alternatingSubarray(nums = [1,1,2,2,3])",
        "alternatingSubarray(nums = [1, 1, 0, 1, 1, 1])",
        "alternatingSubarray(nums = [3,1,2,4,3])",
        "alternatingSubarray(nums = [0, 1, 0, 1, 0])",
        "alternatingSubarray(nums = [1,2,3,1,2,1])",
        "alternatingSubarray(nums = [1,1,2,1,1,1,1,2,2,1,1,1])",
        "alternatingSubarray(nums = [4, 1, 2, 0, 2, 1, 2, 0, 1, 3])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 4, 5], money = 4)",
        "buyChoco(prices = [5, 10, 12], money = 10)",
        "buyChoco(prices = [5, 2, 3], money = 12)",
        "buyChoco(prices = [5, 7, 10], money = 10)",
        "buyChoco(prices = [4, 6, 1], money = 8)",
        "buyChoco(prices = [2, 6, 4, 1], money = 10)",
        "buyChoco(prices=[3, 2, 5], money=7)",
        "buyChoco(prices = [3, 5, 6, 10], money = 7)",
        "buyChoco(prices = [2, 4, 6, 10, 12, 15], money = 15)",
        "buyChoco(prices = [12, 18, 30], money = 20)"
    ],
    "sample_302": [
        "countSeniors(details = [\"<NAME>\", \"<NAME>\"])",
        "countSeniors(details = [\"<NAME>\", \"<NAME>\", \"<NAME>\", \"<NAME>\", \"<NAME>\"])",
        "countSeniors(details = [\"name 23\", \"name 60\"])",
        "countSeniors(details = [\"<NAME>, 49, 62\", \"<NAME>, 32, 46\"])",
        "countSeniors(details = [\"name,age\", \"akshat,25\", \"vikas,62\"])",
        "countSeniors(details = [\"Amritha 63\", \"Raj 58\", \"John 67\"])",
        "countSeniors(details = [\"josh:23\", \"omar:70\", \"harry:41\"])",
        "countSeniors(details = [\"1990-02-12\", \"1960-01-24\", \"2005-03-04\", \"1988-02-01\", \"1992-05-03\"])",
        "countSeniors(details = [\"Kayak 10102019 57\", \"Motorcycle 12052019 55\", \"Bike 11022019 62\"])",
        "countSeniors(details = [\"1950-01-02:1959-12-31:1996-03-26\",\"1950-01-02:1959-12-31:1967-11-09\",\"1950-01-02:1959-12-31:1979-03-02\"])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"bacc\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 4)",
        "beautifulSubstrings(s = \"abba\", k = 4)",
        "beautifulSubstrings(s = \"aeiaaioaaaaei\", k = 3)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 2)",
        "beautifulSubstrings(s = \"u\", k = 2)",
        "beautifulSubstrings(s = \"aet\", k = 3)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiooaauoa\", k = 3)",
        "beautifulSubstrings(s = \"yazzzzy\", k = 3)"
    ],
    "sample_255": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5,6])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1,1,1,1,1,1])",
        "minimumSum(nums = [2, 4, 6, 8, 10, 12])",
        "minimumSum(nums = [-10,-20,-30,-40])",
        "minimumSum(nums = [2,5,7,8,1])",
        "minimumSum(nums = [1,1,4,4,5,1])",
        "minimumSum(nums = [-2,2,3,5,9])",
        "minimumSum(nums = [1, 1, 2, 2, 1, 2, 2, 2])"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [3,1,4,1,5])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,1,1,1])",
        "minGroupsForValidAssignment(nums = [1,2,1,2,1,1,2])",
        "minGroupsForValidAssignment(nums=[4,3,2,1,2])",
        "minGroupsForValidAssignment(nums = [7,3,2,5,1,4,7])",
        "minGroupsForValidAssignment(nums=[4,5,2,1,4,1,5,2,1])",
        "minGroupsForValidAssignment(nums = [2,3,2,3,3,1,1,1,3,3,3,2,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [120, 92, 100, 122, 124, 126, 128, 132, 134, 138, 142, 144, 146, 148, 152, 154, 156, 158, 162, 164, 166, 168, 170, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358,"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1,2,1,2,3])",
        "alternatingSubarray(nums = [1,2,1,2,1])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 3])",
        "alternatingSubarray(nums = [1,2,3,4,5,7])",
        "alternatingSubarray(nums = [1,2,3,4,5,7])",
        "alternatingSubarray(nums = [5,6,4,8])",
        "alternatingSubarray(nums = [1,2,1,2,3,1,4,5,2,1])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = \"10101\", k = 2)",
        "shortestBeautifulSubstring(s = \"10101\", k = 2)",
        "shortestBeautifulSubstring(s = \"010111\", k = 2)",
        "shortestBeautifulSubstring(s = \"11001\", k = 2)",
        "shortestBeautifulSubstring(s = \"01101010\", k = 3)",
        "shortestBeautifulSubstring(s = \"010011\", k = 2)",
        "shortestBeautifulSubstring(s='00101001', k=3)",
        "shortestBeautifulSubstring(s='110100010100', k=2)",
        "shortestBeautifulSubstring(s = \"010101010111\", k = 2)",
        "shortestBeautifulSubstring(s
    ],
    "sample_293": [
        "minimumSteps(s = \"1100\")",
        "minimumSteps(s = \"1100\")",
        "minimumSteps(s = \"0110\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"011011\")",
        "minimumSteps(s = \"110001\")",
        "minimumSteps(s = \"011000\")",
        "minimumSteps(s = \"0101001\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abababa\")",
        "longestSemiRepetitiveSubstring(s = \"aabccbb\")",
        "longestSemiRepetitiveSubstring(s = \"cbbebi\")",
        "longestSemiRepetitiveSubstring(s = \"abbbccbb\")",
        "longestSemiRepetitiveSubstring(s = \"babababa\")",
        "longestSemiRepetitiveSubstring(s = \"abccdeff\")",
        "longestSemiRepetitiveSubstring(s = \"abbabcbdbbbbbc\")",
        "longestSemiRepetitiveSubstring(s = \"abcbaaabcbc\")",
        "longestSemiRepetitiveSubstring(s = \"bbabbabababbbabbabababab\")"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [3,3,6,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,6,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,6,3,3])",
        "minGroupsForValidAssignment(nums = [2,1,3,3,3,2])",
        "minGroupsForValidAssignment(nums = [3,3,6,3,5])",
        "minGroupsForValidAssignment(nums = [2,3,4,5,6])",
        "minGroupsForValidAssignment(nums=[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2",
        "minGroupsForValidAssignment(nums = [2,2,3,3,3,4,4,5,6])",
        "minGroupsForValidAssignment(nums=[2, 2, 1, 2, 2, 2, 2, 1, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,3,3,4,4,5,5,5,6,6,6,7,7,8,8,8,8])"
    ],
    "sample_307": [
        "countSeniors(details = [\"<NAME>\", \"<NAME>\", \"<NAME>\", \"<NAME>\"])",
        "countSeniors(details = [\"<NAME> 28\", \"<NAME> 59\"])",
        "countSeniors(details = [\"m10\", \"f20\", \"m61\", \"f22\"])",
        "countSeniors(details = [\"1800\", \"1900\", \"1800\", \"1999\", \"1600\"])",
        "countSeniors(details = [\"sally\", \"jane\", \"frank\", \"kevin\"])",
        "countSeniors(details = [\"78-90-100\", \"50-60-300\"])",
        "countSeniors(details = [\"18091995\", \"17021996\", \"17021996\"])",
        "countSeniors(details = [\"1998-09-17 16:00:00\", \"1998-08-17 16:00:00\", \"1998-08-17 16:00:00\"])",
        "countSeniors(details = [\"Sarah 73\", \"Lara 69\"])",
        "countSeniors(details = [\"28-10-1992\", \"24-11-1995\", \"20-12-1996\", \"27-11-1995\", \"26-10-1994\"])"
    ],
    "sample_290": [
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"11001\")",
        "minimumSteps(s = \"110011\")",
        "minimumSteps(s = \"10000\")",
        "minimumSteps(s = \"1000\")",
        "minimumSteps(s = \"011100\")",
        "minimumSteps(s = \"1011001\")",
        "minimumSteps(s = \"1000100\")",
        "minimumSteps(s = \"1001010010010101\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,1,2,2], moveFrom = [1,2], moveTo = [2,1])",
        "relocateMarbles(nums = [0, 1, 2, 3, 4], moveFrom = [0, 1], moveTo = [1, 2])",
        "relocateMarbles(nums = [0,1,2,3,4], moveFrom = [0,1,0], moveTo = [1,2,3])",
        "relocateMarbles(nums = [1,2,3,4,5,6], moveFrom = [2,5], moveTo = [5,6])",
        "relocateMarbles(nums=[1,1,1,2], moveFrom=[1,1,1], moveTo=[1,1,1])",
        "relocateMarbles(nums = [3, 2, 4, 1, 5, 6], moveFrom = [2, 1, 4, 3], moveTo = [4, 6, 5, 3])",
        "relocateMarbles(nums=[3,2,3,0,1,2,0], moveFrom=[1,2,3], moveTo=[2,2,2])",
        "relocateMarbles(nums=[1,2,3,5,7,8], moveFrom=[3,5], moveTo=[0,6])",
        "relocateMarbles(nums = [3, 1, 2, 5, 3, 1, 2, 6, 4, 4], moveFrom = [2, 4], moveTo = [3, 6])",
        "relocateMarbles(nums = [1, 10, 5, 11, 12, 3], moveFrom = [2, 1, 11], moveTo = [2, 5, 10])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 2, 1, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 4, 7, 10, 11, 7, 12, 6, 7, 16, 18, 19])",
        "alternatingSubarray(nums = [1, 2, 2, 1])",
        "alternatingSubarray(nums = [3, 1, 4, 2])",
        "alternatingSubarray(nums = [5, 3, 1, 4, 2])",
        "alternatingSubarray(nums = [1, 1, 0, 1, 0, 1])",
        "alternatingSubarray(nums = [1, -1, 0, 1, -1, -1, 1])",
        "alternatingSubarray(nums = [6,2,3,4,7])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"aba\", k = 4)",
        "beautifulSubstrings(s = \"aba\", k = 4)",
        "beautifulSubstrings(s = \"leetcode\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 4)",
        "beautifulSubstrings(s = \"xxyyzz\", k = 3)",
        "beautifulSubstrings(s = \"au\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 3)",
        "beautifulSubstrings(s = \"bc\", k = 2)",
        "beautifulSubstrings(s = \"xxyyzz\", k = 2)",
        "beautifulSubstrings(s = \"aibicniv\", k = 2)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [-2, 0, 1, 2])",
        "maximumTripletValue(nums = [-2,1,-3,4,-1,2,1,-5,4])",
        "maximumTripletValue(nums = [-2, 0, -1])",
        "maximumTripletValue(nums=[1,2,3,4,5,6,7])",
        "maximumTripletValue(nums = [7,2,11,15])",
        "maximumTripletValue(nums = [2,3,5,6,9,1,4,8,7])",
        "maximumTripletValue(nums = [5, 7, 1, 5, 9])",
        "maximumTripletValue(nums = [-1, -3, -1, -3, 1, 3, -1, -3, 3, 1, 3])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"aba\", \"baba\", \"aba\", \"xzxb\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"aabb\", \"abcd\", \"bbaa\", \"dada\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"aaa\", \"aab\", \"aba\", \"baa\", \"bab\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ab\", \"ab\", \"cd\", \"cd\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"a\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cb\", \"dd\", \"ee\", \"ff\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"abcd\", \"a\", \"abcde\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"bb\", \"ccc\", \"dddd\", \"aa\", \"bbb\", \"aa\", \"ccc\", \"ddd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bc\", \"c\", \"abc\", \"aaa\", \"a\", \"c\", \"aa\", \"ab\", \"ba\", \"bc\", \"aa\"])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 4)",
        "differenceOfSums(n = 10, m = 4)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 6, m = 3)",
        "differenceOfSums(n = 15, m = 4)",
        "differenceOfSums(n = 6, m = 4)",
        "differenceOfSums(n = 22, m = 3)"
    ],
    "sample_314": [
        "buyChoco(prices = [3, 1, 4], money = 7)",
        "buyChoco(prices = [1, 3, 5, 7, 9], money = 10)",
        "buyChoco(prices = [1, 4], money = 2)",
        "buyChoco(prices = [2, 3, 5, 6], money = 7)",
        "buyChoco(prices = [10, 2, 3], money = 4)",
        "buyChoco(prices = [1, 5, 4, 9], money = 10)",
        "buyChoco(prices = [1, 7, 5], money = 10)",
        "buyChoco(prices = [4, 10, 8], money = 12)",
        "buyChoco(prices = [6, 8, 10, 12], money = 16)",
        "buyChoco(prices = [1,2,3,4,5,6,7], money = 5)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"baa\", \"bab\"])",
        "maximumNumberOfStringPairs(words = [\"mq\", \"px\", \"zy\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"abc\", \"bcd\"])",
        "maximumNumberOfStringPairs(words = [\"aaa\", \"aaa\", \"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"the\", \"quick\", \"brown\", \"fox\", \"the\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"a\", \"ab\", \"ba\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"a\", \"b\", \"aa\", \"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"ab\", \"aab\", \"aba\", \"b\"])",
        "maximumNumberOfStringPairs(words = [\"banana\", \"mango\", \"papaya\", \"apana\", \"papaya\"])"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"aabccbb\")",
        "longestSemiRepetitiveSubstring(s = \"abaababab\")",
        "longestSemiRepetitiveSubstring(s = \"abbbccdd\")",
        "longestSemiRepetitiveSubstring(s=\"bananas\")",
        "longestSemiRepetitiveSubstring(s = \"abbabcbcbba\")",
        "longestSemiRepetitiveSubstring(s = \"bbbbab\")",
        "longestSemiRepetitiveSubstring(s = \"ababcabcbaba\")",
        "longestSemiRepetitiveSubstring(s=\"aaabaaaaacca\")"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"abc\", \"de\", \"fgh\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"pq\", \"rs\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"d\",\"xyz\"])",
        "minimizeConcatenatedLength(words = [\"you\", \"say\", \"hello\", \"goodbye\"])",
        "minimizeConcatenatedLength(words = [\"abab\", \"baba\", \"aabb\"])",
        "minimizeConcatenatedLength(words = [\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty\",\"betty",
        "minimizeConcatenatedLength(words = [\"abc\",\"d\",\"efg\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"beautiful\", \"cat\"])",
        "minimizeConcatenatedLength(words = [\"a\",\"ab\",\"abc\",\"aba\",\"d\",\"de\",\"e\"])",
        "minimizeConcatenatedLength(words = [\"aba\", \"bab\", \"aad\", \"cab\", \"aaa\", \"bca\"])"
    ],
    "sample_323": [
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 3)",
        "isFascinating(n = 5)",
        "isFascinating(n = 7)",
        "isFascinating(n = 6)",
        "isFascinating(n = 6)",
        "isFascinating(n = 100)",
        "isFascinating(n = 100)",
        "isFascinating(n = 3)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"aabacbebebe\")",
        "longestSemiRepetitiveSubstring(s = \"aabccbb\")",
        "longestSemiRepetitiveSubstring(s = \"abbbcc\")",
        "longestSemiRepetitiveSubstring(s = \"abracadabra\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"ababac\")",
        "longestSemiRepetitiveSubstring(s = \"ababcab\")",
        "longestSemiRepetitiveSubstring(s = \"bbabcbcab\")",
        "longestSemiRepetitiveSubstring(s = \"abcabaabac\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"<NAME> 70\", \"<NAME> 75\", \"<NAME> 80\"])",
        "countSeniors(details = [\"20-01-1998\", \"20-01-1996\", \"20-01-1997\"])",
        "countSeniors(details = [\"<NAME>   65\", \"<NAME> 85\"])",
        "countSeniors(details = [\"Name, Age\", \"Dave, 20\", \"Abby, 65\"])",
        "countSeniors(details = [\"<NAME> 45 1968-04-21\", \"<NAME> 45 1968-04-21\"])",
        "countSeniors(details=[\"18/03/2000\", \"03/05/2000\", \"11/05/2000\", \"10/12/2000\", \"12/12/2000\"])",
        "countSeniors(details = [\"1990-01-01 00:00:00 Mr. Anderson F 60-61\", \"1990-01-01 00:00:00 Ms. <NAME> 62-63\", \"1990-01-01 00:00:00 Mr. <NAME> 64-65\", \"1990-01-01 00:00:00 Ms. <NAME> 66-67\", \"1990-01-01 00:00:00 Mr. <NAME> 68-69\"])",
        "countSeniors(details = [\"1994-02-21 <NAME>\", \"2005-11-09 <NAME>\", \"1995-08-19 <NAME>\", \"1995-01-04 <NAME>\"])",
        "countSeniors(details = [\"<NAME> 1234567890 199609 11 66 123456\", \"<NAME> 1234567890 198609 11 66 123456\", \"<NAME> 1234567890 199601 11 66 123456\", \"<NAME> 1234567890 199409 11 66 123456\", \"<NAME> 1234567890 199509 11 66 123456\"])",
        "countSeniors(details = [\"13399248A 2017/2018  64 68  50\", \"12399248A 2017/2018  75 98  80\", \"13399248A 2017/2018  75 98  80\"])"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [1, 3, 2])",
        "minGroupsForValidAssignment(nums = [3, 1, 3, 3, 3, 2])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 5])",
        "minGroupsForValidAssignment(nums = [2,1,3,3,3,2])",
        "minGroupsForValidAssignment(nums = [2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [2, 2, 3, 3, 3, 4, 4, 5])",
        "minGroupsForValidAssignment(nums = [1, 1, 3, 3, 3, 2])",
        "minGroupsForValidAssignment(nums = [1, 1, 1])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 4, 4, 5, 5])",
        "minGroupsForValidAssignment(nums = [3, 3, 6, 2, 3, 4, 3, 2, 6, 2, 3, 2, 2, 6, 3, 6, 3, 3])"
    ],
    "sample_257": [
        "minimumSum(nums = [3, 1, 2, 4, 3])",
        "minimumSum(nums = [3,2,1,2,3])",
        "minimumSum(nums = [2, 4, 6])",
        "minimumSum(nums = [3, 5, -7, 10])",
        "minimumSum(nums = [1, 2, 3, 2])",
        "minimumSum(nums = [1, 3, 5])",
        "minimumSum(nums = [1, 1, 2, 1, 1, 1])",
        "minimumSum(nums=[2, 4, 5, 2, 1])",
        "minimumSum(nums = [2, 6, 8, 5, 4])",
        "minimumSum(nums = [0, -5, 6, 0])"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"aba\", \"bbb\", \"bab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"aba\", \"baa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"cd\", \"ef\", \"de\"])",
        "maximumNumberOfStringPairs(words = [\"pea\", \"eat\", \"sss\"])",
        "maximumNumberOfStringPairs(words = [\"abab\", \"abc\", \"aba\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"aaa\", \"aa\", \"aaa\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"apple\", \"ple\", \"p\", \"le\", \"apple\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"b\", \"c\", \"ac\", \"ab\", \"bc\", \"abc\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bca\", \"adc\", \"bad\", \"aad\", \"dab\", \"dcb\"])",
        "maximumNumberOfStringPairs(words = [\"hgt\", \"at\", \"kt\", \"k\", \"m\", \"hgt\", \"at\", \"kt\", \"k\", \"m\"])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = \"1101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"010110\", k = 3)",
        "shortestBeautifulSubstring(s = \"010110\", k = 3)",
        "shortestBeautifulSubstring(s = \"111011\", k = 2)",
        "shortestBeautifulSubstring(s = \"01001110\", k = 2)",
        "shortestBeautifulSubstring(s='10110', k=3)",
        "shortestBeautifulSubstring(s = \"1101001011011100001\", k = 3)",
        "shortestBeautifulSubstring(s
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 10)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 10)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 5)",
        "lexicographicallySmallestArray(nums = [3, 5, 1, 8, 9], limit = 7)",
        "lexicographicallySmallestArray(nums = [1, 5, 3, 8, 9], limit = 6)",
        "lexicographicallySmallestArray(nums = [5, 1, 3, 4, 7, 8, 9], limit = 6)",
        "lexicographicallySmallestArray(nums = [1, 5, 8, 9, 10, 15], limit = 13)",
        "lexicographicallySmallestArray(nums = [5, 1, 2, 3, 4, 6], limit = 2)",
        "lexicographicallySmallestArray(nums = [2, 3, 5, 7, 11], limit = 13)",
        "lexicographicallySmallestArray(nums = [4, 1, 7, 2, 5, 3, 9], limit = 5)"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 3, 2], [2, 1, 3]])",
        "matrixSum(a = [[2, 1, 3], [5, 7, 6]])",
        "matrixSum(a = [[1, 3, 1], [2, 1, 2], [3, 4, 1]])",
        "matrixSum(a = [[3, 5], [2, 6], [1, 7], [4, 8]])",
        "matrixSum(a = [[2, 0, 3], [3, 2, 2], [1, 1, 1]])",
        "matrixSum(a = [[1, 0, 0, 1], [1, 0, 0, 0], [0, 1, 0, 0], [1, 0, 0, 1]])",
        "matrixSum(a = [[1, 4, 3], [7, 8, 5], [6, 9, 1]])",
        "matrixSum(a = [[3, 4, 8], [6, 9, 5], [7, 7, 7]])",
        "matrixSum(a = [[1, 3, 5], [4, 4, 1], [2, 2, 2]])",
        "matrixSum(a = [[5, 2, 9, 8, 3], [2, 1, 3, 7, 5], [1, 2, 8, 9, 7]])"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aei\", k = 2)",
        "beautifulSubstrings(s = \"aba\", k = 4)",
        "beautifulSubstrings(s = \"aba\", k = 2)",
        "beautifulSubstrings(s = \"abcba\", k = 3)",
        "beautifulSubstrings(s = \"leet\", k = 2)",
        "beautifulSubstrings(s = \"a\", k = 2)",
        "beautifulSubstrings(s = \"cdefg\", k = 2)",
        "beautifulSubstrings(s = \"krrgw\", k = 2)",
        "beautifulSubstrings(s = \"xzzzaazzz\", k = 11)"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"mom\", \"dad\", \"baby\", \"mom\", \"dad\", \"baby\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"aabb\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"aaa\", \"aaa\", \"aa\", \"bbb\"])",
        "maximumNumberOfStringPairs(words = [\"apple\", \"a\", \"app\", \"ple\"])",
        "maximumNumberOfStringPairs(words = [\"cat\", \"dog\", \"doggy\", \"xy\", \"xyx\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"baab\", \"aaab\", \"bbbb\", \"aaaa\", \"aaba\"])",
        "maximumNumberOfStringPairs(words = [\"myx\", \"xy\", \"xyx\", \"yyx\"])",
        "maximumNumberOfStringPairs(words = [\"acca\", \"aa\", \"aaaa\", \"cccc\", \"cccc\", \"cccc\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"e\", \"i\", \"o\", \"u\", \"ab\", \"ae\", \"ei\", \"eo\", \"ou\", \"aa\", \"ea\", \"ii\", \"oo\", \"uu\"])",
        "maximumNumberOfStringPairs(words = [\"abacaba\", \"acac\", \"baca\", \"cabac\", \"daca\", \"efac\", \"fab\", \"fb\", \"gabcb\", \"gcb\", \"yacac\"])"
    ],
    "sample_325": [
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n=3)",
        "isFascinating(n = 12345)",
        "isFascinating(n=12)",
        "isFascinating(n = 14)",
        "isFascinating(n = 6)",
        "isFascinating(11)",
        "isFascinating(n = 3456)"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [-2, 0, -1])",
        "maximumTripletValue(nums = [-2, 0, -1])",
        "maximumTripletValue(nums = [-2, 0, -1])",
        "maximumTripletValue(nums = [2, 3, 1, 5, 0, 2])",
        "maximumTripletValue(nums=[1, 2, 3])",
        "maximumTripletValue(nums = [1,2,3,4,5,6,7,8,9,10])",
        "maximumTripletValue(nums = [2, -8, 3, -2, 4, -10])",
        "maximumTripletValue(nums = [3, 4, 5, 6, 2])",
        "maximumTripletValue(nums = [-10, 5, 3, 10, 2, 3])",
        "maximumTripletValue(nums = [3, -1, 4, 2, 4, -2, 4, 2, 0, 2])"
    ],
    "sample_312": [
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[0, 1, 2], [3, 4, 5], [6, 7, 8]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1,2,3,4], [1,2,3,4]])",
        "matrixSum(nums = [[3, 7, 8],[9, 5, 1]])",
        "matrixSum(nums = [[1,3,5,7],[2,4,6,8]])",
        "matrixSum(nums = [[5, 8, 1], [2, 6, 3], [4, 7, 6]])",
        "matrixSum(nums = [[5, 1, 2], [3, 2, 7]])",
        "matrixSum(nums = [[5,4,1],[1,4,5],[1,3,2]])",
        "matrixSum(nums = [[4,2,1,3,1],[1,2,2,2,3],[3,2,3,2,1]])"
    ],
    "sample_281": [
        "minOperations(a = [1, 10, 6], b = [2, 7, 8])",
        "minOperations(a = [1, 2, 3, 4], b = [2, 4, 1, 3])",
        "minOperations(a = [1, 2, 3, 4], b = [2, 3, 4, 5])",
        "minOperations(a = [1, 1, 3], b = [1, 1, 3])",
        "minOperations(a = [5, 6, 4], b = [6, 3, 3])",
        "minOperations(a = [4, 5, 6, 8, 9], b = [2, 3, 4, 5, 6])",
        "minOperations(a = [1, 5, 2, 6, 3, 7, 4, 8], b = [1, 5, 2, 6, 3, 7, 4, 8])",
        "minOperations(a = [1, 3, 4, 5, 7, 8, 9, 10, 11], b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])",
        "minOperations(a = [4, 6, 9, 10, 15], b = [1, 5, 8, 15, 19])",
        "minOperations(a = [1,2,4,6,8], b = [3,6,5,4,3])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1, 1, 1], nums2 = [2, 2, 2])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 4, 6])",
        "minOperations(nums1 = [1, 5, 10], nums2 = [2, 3, 4])",
        "minOperations(nums1 = [1, 1, 2, 2, 3, 3], nums2 = [1, 1, 2, 2, 3, 3])",
        "minOperations(nums1 = [1, 2, 5], nums2 = [2, 5, 3])",
        "minOperations(nums1 = [2, 1, 5], nums2 = [2, 5, 7])",
        "minOperations(nums1 = [4, 2, 5, 7], nums2 = [2, 4, 6, 8])",
        "minOperations(nums1 = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6], nums2 = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "minOperations(nums1 = [1, 10, 4, 10, 1], nums2 = [7, 2, 4, 9, 10])",
        "minOperations(nums1 = [4, 2, 5, 3], nums2 = [4, 2, 4, 3])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [2, 3, -2, 4])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [-2, 0, -1])",
        "maximumTripletValue(nums = [3, -1, 2, -1])",
        "maximumTripletValue(nums = [-2,0,3,-5,2,-1])",
        "maximumTripletValue(nums = [-3, 4, 5, 6, 1, 2])",
        "maximumTripletValue(nums = [2, 3, 1, 5, 0, 2, 3])",
        "maximumTripletValue(nums = [3, 0, -2, 9, 1, 5])",
        "maximumTripletValue(nums = [-10, -8, -6, -4, -3, -1, 1, 3, 4, 5])",
        "maximumTripletValue(nums = [-2, 0, 3, 2, -1, -1, 1])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"011010\", k = 2)",
        "shortestBeautifulSubstring(s = \"1011101\", k = 2)",
        "shortestBeautifulSubstring(s='010110', k=2)",
        "shortestBeautifulSubstring(s = \"111001\", k = 2)",
        "shortestBeautifulSubstring(s = \"01100\", k = 2)",
        "shortestBeautifulSubstring(s = \"110010101\", k = 2)",
        "shortestBeautifulSubstring(s='1010101', k=3)",
        "shortestBeautifulSubstring(s=\"101010101\", k=2)",
        "shortestBeautifulSubstring(s=\"0101001010\", k=3)",
        "shortestBeautifulSubstring(s = \"10100110111\", k = 3)"
    ],
    "sample_256": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [2, 4, 6, 2, 5])",
        "minimumSum(nums = [9, 4, 2, 10, 7, 8, 8, 1, 9])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0])",
        "minimumSum(nums = [3, 5, 1, 2, 4, 6, 7, 8])",
        "minimumSum(nums = [6, 3, 5, 7, 4, 8])",
        "minimumSum(nums = [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12])",
        "minimumSum(nums = [5, 6, 2, 3, 7, 3, 2])",
        "minimumSum(nums = [3, 1, 5, 8, 11, 21])"
    ],
    "sample_291": [
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1100\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"100\")",
        "minimumSteps(s = \"1100\")",
        "minimumSteps(s = \"11001\")",
        "minimumSteps(s = \"11001100\")",
        "minimumSteps(s = \"11000101\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [2, 4, 9, 5], nums2 = [5, 6, 7, 8])",
        "minOperations(nums1 = [1, 3, 5, 4, 2], nums2 = [2, 4, 1, 3, 6])",
        "minOperations(nums1 = [1, 1, 0, 1], nums2 = [1, 0, 0, 0])",
        "minOperations(nums1 = [5, 3, 6, 3], nums2 = [4, 3, 6, 3])",
        "minOperations(nums1 = [0,1,2,3,4], nums2 = [3,4,5,6,7])",
        "minOperations(nums1 = [1,1,0,1,1], nums2 = [0,0,0,0,0])",
        "minOperations(nums1 = [1, 1, 1, 2], nums2 = [2, 1, 1, 2])",
        "minOperations(nums1 = [2,4,9,5,1,3,6,8,7,10], nums2 = [5,6,7,9,10,3,1,8,2,4])",
        "minOperations(nums1 = [2, 4, 9, 5, 1, 3, 8], nums2 = [3, 2, 5, 8, 9, 4, 6])",
        "minOperations(nums1 = [3, 8, 9, 4, 2, 1, 6, 5], nums2 = [3, 2, 1, 6, 5, 4, 9, 8])"
    ],
    "sample_277": [
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 0], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 1], [0, 0, 0]])",
        "findChampion(grid = [[1, 1, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [1, 0, 0], [0, 0, 1]])",
        "findChampion(grid=[[0,0,0,0,0], [1,0,0,0,0], [0,1,0,0,0], [0,0,1,0,0], [0,0,0,1,0]])",
        "findChampion(grid = [[1, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0, 1, 0],\n                            [1, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0],\n                            [0, 0, 0, 1, 1],\n                            [0, 0, 0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0]])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 4)",
        "differenceOfSums(n = 10, m = 4)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 15, m = 5)",
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n = 4, m = 3)",
        "differenceOfSums(n = 6, m = 4)",
        "differenceOfSums(n = 12, m = 3)",
        "differenceOfSums(n = 11, m = 2)",
        "differenceOfSums(n = 1, m = 2)"
    ],
    "sample_292": [
        "minimumSteps(s = \"110001\")",
        "minimumSteps(s = \"101101\")",
        "minimumSteps(s = \"1000\")",
        "minimumSteps(s = \"1100110\")",
        "minimumSteps(s = \"100011\")",
        "minimumSteps(s = \"10111011\")",
        "minimumSteps(s = \"000111\")",
        "minimumSteps(s = \"10101101\")",
        "minimumSteps(s = \"10000000000000000001000000000000000001000000000000000001000000000000000001000000000000000001000000000000000001\")",
        "minimumSteps(s
    ],
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 1, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 4, 7, 10, 11, 7, 12, 6, 7, 16, 18, 19])",
        "alternatingSubarray(nums = [5, 6, 2, 7, 3, 1, 4])",
        "alternatingSubarray(nums = [6, 2, 4, 8, 10, 9, 15])",
        "alternatingSubarray(nums = [6, 3, 8, 1, 3, 1, 2, 2])",
        "alternatingSubarray(nums = [5, 6, 1, 4, 2])",
        "alternatingSubarray(nums = [1, 2, 4, 5, 7, 8, 9, 10, 11])",
        "alternatingSubarray(nums = [0, -1, 1, -1, 1])",
        "alternatingSubarray(nums = [1, 2, 2, 2, 1, 3, 2, 2, 2])"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1,2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [0, 1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 5], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 5], moveFrom = [1, 4], moveTo = [2, 5])",
        "relocateMarbles(nums = [2, 4, 5, 6], moveFrom = [5, 4, 6, 2], moveTo = [4, 6, 5, 2])",
        "relocateMarbles(nums = [1,2,5], moveFrom = [5,1], moveTo = [2])",
        "relocateMarbles(nums=[1, 3, 2, 5, 4], moveFrom=[2, 4], moveTo=[5])",
        "relocateMarbles(nums = [3, 1, 4, 2], moveFrom = [1, 2, 3], moveTo = [2, 4, 3])",
        "relocateMarbles(nums = [1, 5, 3, 1, 5, 3, 1, 5], moveFrom = [1, 1, 5, 5], moveTo = [2, 3, 2, 3])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [-2, 0, -1])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [-1, -2, -3])",
        "maximumTripletValue(nums = [1, -2, 3, -4, 5])",
        "maximumTripletValue(nums = [-2, 0, -1, 4])",
        "maximumTripletValue(nums = [-3, -1, -2])",
        "maximumTripletValue(nums = [3, 4, 5, 2])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6, 7])",
        "maximumTripletValue(nums = [2, 3, -8, 8, -4, 4])"
    ],
    "sample_273": [
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[0, 0, 1], [0, 1, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [0, 0, 0]])",
        "findChampion(grid = [[1,1,1], [1,0,1], [1,1,1]])",
        "findChampion(grid = [[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]])",
        "findChampion(grid = [[0, 0, 0, 0], [1, 1, 1, 1], [1, 1, 1, 1], [0, 0, 0, 0]])",
        "findChampion(grid = [\n  [0, 1, 0],\n  [0, 0, 1],\n  [1, 0, 0],\n])",
        "findChampion(grid=[[0,0,0,0], [0,0,0,1], [0,0,0,2], [0,0,0,3]])",
        "findChampion(grid = [[1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0], [1, 0, 1, 0, 1, 0], [0, 0, 1, 0, 0, 0], [1, 0, 1, 0, 1, 0], [0, 0, 1, 0, 1, 1]])"
    ],
    "sample_267": [
        "minSum(nums1 = [0, 0], nums2 = [0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minSum(nums1 = [0, 1, 2], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2], nums2 = [3])",
        "minSum(nums1 = [3, 1, 2, 4], nums2 = [3, 6])",
        "minSum(nums1 = [0, 2, 2], nums2 = [0, 0, 0])",
        "minSum(nums1 = [0, 2, 3], nums2 = [2, 2, 1])",
        "minSum(nums1 = [2, 2, 2, 2, 2], nums2 = [1, 1, 1, 1, 1])",
        "minSum(nums1 = [1, 2, 4, 8], nums2 = [2, 4, 5, 9])"
    ],
    "sample_294": [
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"01110\")",
        "minimumSteps(s = \"110111\")",
        "minimumSteps(s = \"111101\")",
        "minimumSteps(s = \"1100110\")",
        "minimumSteps(s = \"0100000001\")",
        "minimumSteps(s = \"1001101111000\")",
        "minimumSteps(s = \"101100000100000000000\")"
    ],
    "sample_274": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 0, 1], [0, 1, 0], [1, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 1, 1], [0, 0, 0], [1, 0, 1]])",
        "findChampion(grid = [[0, 1, 0, 1], [1, 1, 1, 1], [0, 1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]])",
        "findChampion(grid = [[1, 2, 2, 1], [2, 2, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]])",
        "findChampion(grid = [[1, 1, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 0, 0, 1]])",
        "findChampion(grid = [[0,0,1,1],[0,1,1,1],[0,0,0,1],[1,0,0,1]])",
        "findChampion(grid = [[0, 2, 0, 1, 0], [1, 0, 0, 2, 0], [0, 0, 1, 0, 0], [0, 0, 0, 0, 0], [1, 0, 2, 0, 0]])"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [3,3,6,5])",
        "minGroupsForValidAssignment(nums = [3,1,3,3,3,2])",
        "minGroupsForValidAssignment(nums = [3,3,6,2])",
        "minGroupsForValidAssignment(nums=[4,3,2,3,3,2,1])",
        "minGroupsForValidAssignment(nums=[4,3,2,1])",
        "minGroupsForValidAssignment(nums=[1, 3, 2, 3, 1])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,5,5,5,10,10,10])",
        "minGroupsForValidAssignment(nums = [2,4,6,2,4,6])",
        "minGroupsForValidAssignment(nums=[40,20,40,20,40,40,20,40,40,40])",
        "minGroupsForValidAssignment(nums = [20,10,2,1,5,20,25,3,15,15,1,1,1,1,2,3,3])"
    ],
    "sample_270": [
        "minSum(nums1 = [1, 2, 0], nums2 = [3, 4, 5])",
        "minSum(nums1 = [0, 0, 0], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 0, 2], nums2 = [1, 0, 1])",
        "minSum(nums1 = [1, 2, 3, 0], nums2 = [2, 0])",
        "minSum(nums1 = [0, 0, 3, 3], nums2 = [0, 0, 4, 4])",
        "minSum(nums1 = [2, 4, 8, 0], nums2 = [3, 6, 5, 1])",
        "minSum(nums1 = [2, 1, 0, 0, 2], nums2 = [3, 0, 2])",
        "minSum(nums1 = [1, -1, 0, 4, 0], nums2 = [2, 0, 1, -1, 1])"
    ],
    "sample_317": [
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 4)",
        "buyChoco(prices = [1, 3, 4], money = 4)",
        "buyChoco(prices=[1,3,4,5], money=10)",
        "buyChoco(prices = [5, 6, 4], money = 14)",
        "buyChoco(prices = [3, 1, 2, 5, 4], money = 10)",
        "buyChoco(prices = [2, 5, 6, 1], money = 3)",
        "buyChoco(prices=[4,3,2], money=1)",
        "buyChoco(prices = [2, 4, 6, 7], money = 8)",
        "buyChoco(prices = [4,2,5,1,7], money = 10)",
        "buyChoco(prices = [30, 10, 60, 100, 1], money = 50)"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"leetcode\", k = 2)",
        "beautifulSubstrings(s = \"aba\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"cbaebabacd\", k = 3)",
        "beautifulSubstrings(s = \"bbbaacdafe\", k = 3)",
        "beautifulSubstrings(s = \"krrgw\", k = 2)",
        "beautifulSubstrings(s = \"baa\", k = 2)",
        "beautifulSubstrings(s = \"abcd\", k = 3)",
        "beautifulSubstrings(s = \"yzbqklnj\", k = 2)"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abababa\")",
        "longestSemiRepetitiveSubstring(s = \"abacaba\")",
        "longestSemiRepetitiveSubstring(s = \"abcbbbbcccbdddadacb\")",
        "longestSemiRepetitiveSubstring(s = \"aabcbcbcac\")",
        "longestSemiRepetitiveSubstring(s = \"aba\")",
        "longestSemiRepetitiveSubstring(s = \"abbbbab\")",
        "longestSemiRepetitiveSubstring(s = \"abcb\")",
        "longestSemiRepetitiveSubstring(s = \"abcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcb\")"
    ],
    "sample_341": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(x = 4, y = 2, z = 3)",
        "longestString(x = 5, y = 3, z = 6)"
    ],
    "sample_271": [
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [5, 6, 7, 8])",
        "minSum(nums1 = [1,2,0], nums2 = [3,0,1])",
        "minSum(nums1 = [0, 0, 0, 0], nums2 = [1, 1, 1, 1])",
        "minSum(nums1 = [1, 2, 3, 4, 0], nums2 = [0, 0, 0, 0, 5])",
        "minSum(nums1 = [0, 1, 2, 3, 4, 5, 6], nums2 = [7, 8, 9, 10, 11, 12, 13])",
        "minSum(nums1 = [0, 4, 3, 0, 0, 0], nums2 = [4, 0, 0, 0, 0, 0])",
        "minSum(nums1 = [4, 2, 3], nums2 = [5, 2, 1, 7, 4])",
        "minSum(nums1 = [3, 4, 2, 1], nums2 = [5, 6, 2, 0])",
        "minSum(nums1 = [2,3,4,5,6,7,8,9,0], nums2 = [0,9,8,7,6,5,4,3,2])",
        "minSum(nums1 = [3,0,1,0,3], nums2 = [0,0,0,0,0])"
    ],
    "sample_340": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 1, z = 1)",
        "longestString(x = 2, y = 2, z = 1)",
        "longestString(x = 2, y = 1, z = 0)",
        "longestString(x = 1, y = 5, z = 2)",
        "longestString(x = 3, y = 5, z = 8)",
        "longestString(x = 2, y = 4, z = 4)"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"1211\", k = 2)",
        "shortestBeautifulSubstring(s = \"21122\", k = 3)",
        "shortestBeautifulSubstring(s='1011', k=3)",
        "shortestBeautifulSubstring(s = \"abba\", k = 4)",
        "shortestBeautifulSubstring(s = \"2000\", k = 3)",
        "shortestBeautifulSubstring(s = \"2013\", k = 13)",
        "shortestBeautifulSubstring(s = \"200111\", k = 2)",
        "shortestBeautifulSubstring(s = \"3101311\", k = 10)",
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = \"2213311213311211\", k = 4)"
    ],
    "sample_324": [
        "isFascinating(n = 3)",
        "isFascinating(n = 4)",
        "isFascinating(n = 6)",
        "isFascinating(n = 6)",
        "isFascinating(n = 6)",
        "isFascinating(n = 1)",
        "isFascinating(n = 12)",
        "isFascinating(n = 7)",
        "isFascinating(n = 1000000000)",
        "isFascinating(n = 23)"
    ],
    "sample_258": [
        "minimumSum(nums = [2, 4, 6, 2, 5])",
        "minimumSum(nums = [3, 4, 6, 10, 11, 15])",
        "minimumSum(nums = [1, 5, 10, 20, 40, 80])",
        "minimumSum(nums = [1, 2, 5, 3, 6, 9])",
        "minimumSum(nums = [7, 8, 3, 4, 5, 6])",
        "minimumSum(nums = [4, 6, 2, 1, 9, 7, 8, 3])",
        "minimumSum(nums = [4, -2, 3, 5, 1, -10])",
        "minimumSum(nums = [4, 1, 2, 8, 3, 7, 5])",
        "minimumSum(nums = [6, 2, 3, 9, 8, 1, 5, 7])",
        "minimumSum(nums = [4, 2, 1, 6, 1, 2, 3, 1, 1, 5, 1])"
    ],
    "sample_268": [
        "minSum(nums1 = [0, 2, 1, 0], nums2 = [3, 4, 5, 2])",
        "minSum(nums1 = [0, 0, 2, 2, 2, 2], nums2 = [1, 1, 1, 1])",
        "minSum(nums1 = [0, 2, 1, 0], nums2 = [3, 1, 2, 1])",
        "minSum(nums1 = [0, 0, 2, 2, 2, 2], nums2 = [1, 1, 2, 2, 2, 2])",
        "minSum(nums1 = [0, 0], nums2 = [0, 1])",
        "minSum(nums1 = [2, 0, 2, 0], nums2 = [5, 0, 0, 0])",
        "minSum(nums1 = [1, 0, 2, 0, 3], nums2 = [1, 0, 4, 0, 5])",
        "minSum(nums1 = [0, 0, 0, 0, 1, 1, 0], nums2 = [0, 0, 0, 1, 0, 1, 1])",
        "minSum(nums1 = [5, 3, 1], nums2 = [5, 2, 2])",
        "minSum(nums1 = [0, 1, 2, 4], nums2 = [3, 5, 6])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"xx\", s2 = \"xx\", s3 = \"xx\")",
        "findMinimumOperations(s1 = \"abcaa\", s2 = \"abcbb\", s3 = \"abcbc\")",
        "findMinimumOperations(s1 = \"abdca\", s2 = \"cbda\", s3 = \"abdc\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"aab\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"abcabc\", s2 = \"abacab\", s3 = \"abcabc\")",
        "findMinimumOperations(s1 = \"abcdabcd\", s2 = \"cdabcdab\", s3 = \"abcdabcd\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"yxx\", s3 = \"xxx\")",
        "findMinimumOperations(s1 = \"mississippi\", s2 = \"issipi\", s3 = \"misssispi\")",
        "findMinimumOperations(s1 = \"waterbottle\", s2 = \"erbottlewat\", s3 = \"erbottlewatertest\")"
    ],
    "sample_321": [
        "maxStrength(nums=[2, -3, 4, -5])",
        "maxStrength(nums = [-1, 1, -2])",
        "maxStrength(nums = [10, -2, 3, -1])",
        "maxStrength(nums = [1, 2, -3, -4, 2, 3])",
        "maxStrength(nums=[1, 2, 3, -2, -1, 1])",
        "maxStrength(nums=[3, 1, 5])",
        "maxStrength(nums=[3,-2,-1,5,6,-4])",
        "maxStrength(nums = [3, -4, 6, 2, -5, -1])",
        "maxStrength(nums = [-1, -2, 5, -10, 1, 3])",
        "maxStrength(nums = [5, 0, -5, 3, -3, 2, 0, -1, 7, 4, 1])"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [3], moveTo = [2])",
        "relocateMarbles(nums = [1, 1, 1, 2, 2, 2], moveFrom = [1, 1], moveTo = [2, 2])",
        "relocateMarbles(nums = [1, 2, 4], moveFrom = [1], moveTo = [3])",
        "relocateMarbles(nums = [0, 2], moveFrom = [0, 1], moveTo = [1, 2])",
        "relocateMarbles(nums = [1, 3, 3], moveFrom = [3, 3], moveTo = [2])",
        "relocateMarbles(nums = [2, 3, 4, 6, 8], moveFrom = [2, 3, 6], moveTo = [2, 8])",
        "relocateMarbles(nums = [2, 3, 6, 7], moveFrom = [0, 1, 2], moveTo = [4])",
        "relocateMarbles(nums = [0, 1, 1, 2, 3, 3, 3, 4, 5], moveFrom = [2, 5, 3], moveTo = [0, 3, 2])"
    ],
    "sample_357": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [8, 9], moveTo = [6, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 2], moveTo = [6, 8])",
        "relocateMarbles(nums = [6, 3, 8, 5, 9], moveFrom = [3, 9], moveTo = [5, 6])",
        "relocateMarbles(nums = [1, 2, 5, 6, 8, 9], moveFrom = [1, 5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [1, 2, 3, 5, 6, 7, 8, 9], moveFrom = [1, 6, 9], moveTo = [5, 8])",
        "relocateMarbles(nums=[1, 2, 3, 5, 6, 8, 9], moveFrom=[5, 6], moveTo=[8, 9])",
        "relocateMarbles(nums = [5, 1, 6, 8, 9], moveFrom = [1, 6, 8], moveTo = [9, 5, 1])",
        "relocateMarbles(nums = [4, 3, 6, 7, 8, 9], moveFrom = [3, 7], moveTo = [5, 6])",
        "relocateMarbles(nums = [1, 3, 4, 8, 5, 6, 9], moveFrom = [3, 5, 8], moveTo = [6, 9, 4])",
        "relocateMarbles(nums = [0, 1, 5, 6, 7, 8, 9], moveFrom = [0, 5, 6, 7], moveTo = [8, 6, 5, 9])"
    ],
    "sample_318": [
        "buyChoco(prices=[1, 2, 4], money=4)",
        "buyChoco(prices = [2, 4], money = 6)",
        "buyChoco(prices = [3, 4, 1, 2], money = 5)",
        "buyChoco(prices = [10, 6, 8, 7, 7, 8], money = 16)",
        "buyChoco(prices = [1, 1, 1, 1], money = 3)",
        "buyChoco(prices = [2, 3, 4, 5], money = 9)",
        "buyChoco(prices = [1, 5, 3, 1, 2], money = 10)",
        "buyChoco(prices = [100, 200, 300], money = 100)",
        "buyChoco(prices = [3, 4, 10], money = 17)",
        "buyChoco(prices = [4, 10, 16, 18, 19], money = 24)"
    ],
    "sample_308": [
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1], [2], [3]])",
        "matrixSum(nums = [[1], [2]])",
        "matrixSum(nums = [[1, 0], [1, 1]])",
        "matrixSum(nums = [[1,2,3], [4,5,6]])",
        "matrixSum(nums = [[1,3,1], [1,5,1], [4,2,1]])",
        "matrixSum(nums = [[1, 1, 0], [1, 1, 0], [1, 1, 0]])",
        "matrixSum(nums = [[3, 1, 2], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[2,2], [1,1], [2,2]])",
        "matrixSum(nums = [[1, 5, 3, 1, 3, 3, 4, 4, 3], [2, 6, 2, 2, 2, 2, 2, 2, 2], [2, 1, 2, 2, 2, 2, 2, 2, 2]])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2], money = 4)",
        "buyChoco(prices = [2, 3, 4], money = 5)",
        "buyChoco(prices = [5, 2, 1], money = 10)",
        "buyChoco(prices = [2, 5], money = 3)",
        "buyChoco(prices = [3, 3], money = 4)",
        "buyChoco(prices = [3, 1], money = 1)",
        "buyChoco(prices = [1, 2, 4, 1], money = 4)",
        "buyChoco(prices = [2, 3, 6, 4], money = 8)",
        "buyChoco(prices = [10, 7, 5, 2, 1], money = 12)",
        "buyChoco(prices = [1, 1, 1, 3, 4], money = 8)"
    ],
    "sample_259": [
        "minimumSum(nums = [1, 1, 1])",
        "minimumSum(nums=[4, 3, 2, 1])",
        "minimumSum(nums = [2,3,5,1,2])",
        "minimumSum(nums = [1, 4, 2, 1, 2])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 11, 12, 13, 14, 15])",
        "minimumSum(nums = [2, 1, 5, 8, 4, 9, 6])",
        "minimumSum(nums=[4, 2, 5, 10, 1, 7, 6, 8])",
        "minimumSum(nums = [5, -4, 2, -2, 8])",
        "minimumSum(nums = [3,2,1,5,6,7,8,9,2])",
        "minimumSum(nums = [1,2,10,14,12,13])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums=[3, 1, 2, 4, 3])",
        "alternatingSubarray(nums = [1, -1, -1, 1, -1, -1])",
        "alternatingSubarray(nums = [1, 2, 4, 5, 7, 8, 8, 10, 11])",
        "alternatingSubarray(nums=[3, -1, 0, 5])",
        "alternatingSubarray(nums = [4, -2, 2, -4, 4])",
        "alternatingSubarray(nums = [-1, 1, 2, -2, 2])",
        "alternatingSubarray(nums = [1, 2, 4, 3, 5, 6, 4, 3])",
        "alternatingSubarray(nums = [3, 2, -1, 3, 5])",
        "alternatingSubarray(nums = [5, 6, -3, 4, 1, 1, -3, -3])"
    ],
    "sample_311": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1,2,3], [4,5,6], [7,8,9]])",
        "matrixSum(nums = [[1, 1, 1], [2, 2, 2], [3, 3, 3]])",
        "matrixSum(nums = [[1, 2, 3], [3, 2, 1]])",
        "matrixSum(nums = [[0, 1, 0], [1, 0, 1], [1, 0, 1]])",
        "matrixSum(nums = [[3, 2, 5], [1, 8, 6], [9, 6, 3]])",
        "matrixSum(nums = [[3, 4, 5], [3, 2, 2], [9, 8, 9]])",
        "matrixSum(nums = [[0, 0, 0], [0, 0, 0], [0, 0, 1], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "matrixSum(nums = [[5, 1, 3, 4], [2, 2, 2, 2], [4, 5, 1, 1]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 2], money = 5)",
        "buyChoco(a = [1, 2], money = 2)",
        "buyChoco(a = [3, 1], money = 5)",
        "buyChoco(a = [5, 3], money = 6)",
        "buyChoco(a = [5, 10], money = 10)",
        "buyChoco(a = [6, 5], money = 10)",
        "buyChoco(a = [2, 2], money = 10)",
        "buyChoco(a = [10, 5], money = 10)",
        "buyChoco(a = [2, 4, 6], money = 8)",
        "buyChoco(a = [10, 20, 5, 10, 20], money = 50)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 6])",
        "minGroupsForValidAssignment(nums = [1, 3, 2])",
        "minGroupsForValidAssignment(nums = [2, 1, 3, 3, 3, 2])",
        "minGroupsForValidAssignment(nums = [2, 2, 3, 4, 4, 6])",
        "minGroupsForValidAssignment(nums = [3,3,6,3,5,6])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,5,5])",
        "minGroupsForValidAssignment(nums = [1, 3, 2, 2, 3, 1])",
        "minGroupsForValidAssignment(nums=[3, 3, 6, 2])",
        "minGroupsForValidAssignment(nums = [8, 4, 12, 2, 6])",
        "minGroupsForValidAssignment(nums = [8, 3, 10, 5])"
    ],
    "sample_276": [
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 1, 0], [0, 1, 0], [1, 0, 0]])",
        "findChampion(grid = [[1, 1, 1, 1], [1, 0, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0]])",
        "findChampion(grid = [[1,0,0], [0,0,0], [0,0,0]])",
        "findChampion(grid = [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]])",
        "findChampion(grid = [[0, 0, 0, 0, 0], [0, 1, 1, 0, 0], [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[0, 1, 1, 2], [2, 3, 4, 5], [1, 1, 1, 6]])",
        "findChampion(grid = [[1, 0, 1, 0, 0], [1, 0, 1, 0, 1], [0, 1, 0, 1, 0], [1, 0, 1, 0, 1], [0, 1, 0, 1, 0]])"
    ],
    "sample_320": [
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5, 6])",
        "maxStrength(nums = [1, 2, 3, 4, 3])",
        "maxStrength(nums = [10, 2, 5, 7, 8])",
        "maxStrength(nums = [4, 5, 6, 7, 8])",
        "maxStrength(nums = [3, 2, 1, 5])",
        "maxStrength(nums = [2, 3, 1, 1, 4])",
        "maxStrength(nums = [2, 4, 1, 3, 5, 7])",
        "maxStrength(nums = [2, 4, 1, 0, 8, 2])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"abc\", \"efg\", \"hij\", \"klm\", \"nop\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"nana\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"ba\", \"aa\", \"bb\"])",
        "minimizeConcatenatedLength(words = [\"apple\", \"pie\", \"banana\", \"cake\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"ab\", \"a\", \"ac\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"yy\", \"xx\", \"zz\"])",
        "minimizeConcatenatedLength(words = [\"x\",\"y\",\"zyx\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"bc\", \"ef\", \"eg\", \"mn\", \"do\"])",
        "minimizeConcatenatedLength(words=[\"bn\", \"ba\", \"ab\", \"ta\", \"ta\"])",
        "minimizeConcatenatedLength(words = [\"bat\", \"dog\", \"cat\", \"horse\", \"cow\", \"yak\", \"owl\", \"pig\"])"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"cde\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abe\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abx\", s3 = \"abz\")",
        "findMinimumOperations(s1=\"ab\", s2=\"bc\", s3=\"cd\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"bbb\", s3 = \"bbc\")",
        "findMinimumOperations(s1 = \"pay\", s2 = \"pap\", s3 = \"pat\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"ab\", s3 = \"babc\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"abc\", s3 = \"abca\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"bamboo\")"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, -1, 1, -1, 1])",
        "alternatingSubarray(nums = [5, 3, 1, 2, 3, 1, 2, 3])",
        "alternatingSubarray(nums = [3, -8, 0, 5, -9])",
        "alternatingSubarray(nums = [3, -8, 0, 5, -9])",
        "alternatingSubarray(nums = [1, -1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, -3, 4, 2])",
        "alternatingSubarray(nums = [1, -1, 2, -2, 2, -2])",
        "alternatingSubarray(nums = [4, -1, 0, 3, 1, 5])"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 1, 0], [0, 1, 0], [1, 0, 0]])",
        "findChampion(grid = [[1, 1, 1], [0, 1, 1], [0, 0, 1]])",
        "findChampion(grid = [\n    [1, 0, 0],\n    [0, 1, 0],\n    [0, 0, 1]\n])",
        "findChampion(grid = [[1, 0, 1, 0], [1, 1, 1, 0], [0, 0, 1, 0]])",
        "findChampion(grid = [[2,0,1], [1,0,0], [0,1,0]])",
        "findChampion(grid = [[0,0,0,0], [0,1,0,0], [0,0,0,0], [0,0,1,0]])",
        "findChampion(grid = [[1, 0, 1, 1], [0, 1, 0, 0], [1, 0, 1, 0]])",
        "findChampion(grid = [[0,0,0],\n                            [0,1,0],\n                            [1,1,0]])",
        "findChampion(grid = [[1, 1, 1, 1, 1], [1, 2, 3, 4, 1], [1, 1, 1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0, 0, 1], [0, 1, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [1, 0, 0, 1, 0]])"
    ],
    "sample_304": [
        "countSeniors(details = [\"Name: <NAME>, Age: 38\", \"Name: <NAME>, Age: 68\"])",
        "countSeniors(details = [\"<NAME>, 20, male\", \"<NAME>, 12, female\", \"<NAME>, 14, male\"])",
        "countSeniors(details = [\"<NAME> | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 1995-03-28 | 199",
        "countSeniors(details = [\"10-12-2002, 10-12-2002\", \"10-12-2002, 10-12-2002\", \"10-12-2002, 10-12-2002\"])",
        "countSeniors(details = [\"1999-05-10\", \"1992-03-23\"])",
        "countSeniors(details=[\"<NAME>, 29, 72\", \"<NAME>, 11, 42\"])",
        "countSeniors(details = [\"<NAME> 1990-05-15\", \" <NAME> 1989-08-20\"])",
        "countSeniors(details = [\"<NAME> is 26 years old, works at Google, and lives in New York City.\", \"<NAME> is 19 years old, works at Amazon, and lives in San Francisco.\"])",
        "countSeniors(details = [\"ID: 01, Name: John, Age: 20, Gender: Male\", \"ID: 02, Name: Jane, Age: 20, Gender: Female\", \"ID: 03, Name: John, Age: 35, Gender: Male\"])",
        "countSeniors(details = [\"<NAME>, 64, 1997-10-02, 2001-07-11, 2017-08-12\", \"<NAME>, 24, 1998-01-03, 2005-04-14, 2019-09-14\"])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 2)",
        "beautifulSubstrings(s = \"bbc\", k = 3)",
        "beautifulSubstrings(s = \"ababbc\", k = 3)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiaa\", k = 4)",
        "beautifulSubstrings(s = \"aabbccdd\", k = 2)",
        "beautifulSubstrings(s = \"bcbcbc\", k = 2)",
        "beautifulSubstrings(s = \"aewfafwfawfawf\", k = 3)"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"1101\", k = 2)",
        "shortestBeautifulSubstring(s = \"10101\", k = 2)",
        "shortestBeautifulSubstring(s = \"010110\", k = 2)",
        "shortestBeautifulSubstring(s = '0110', k = 2)",
        "shortestBeautifulSubstring(s = \"1110001\", k = 3)",
        "shortestBeautifulSubstring(s = \"011101\", k = 3)",
        "shortestBeautifulSubstring(s = \"110100010100\", k = 2)",
        "shortestBeautifulSubstring(s = '0101001', k = 1)",
        "shortestBeautifulSubstring(s = \"00010011000\", k = 4)",
        "shortestBeautifulSubstring(s = '0100101110110000100', k = 4)"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"aa\", \"ab\", \"ac\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"ab\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"an\", \"a\", \"n\"])",
        "minimizeConcatenatedLength(words = [\"ax\", \"bx\", \"cx\", \"cy\"])",
        "minimizeConcatenatedLength(words = [\"m\", \"qq\", \"xy\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"a\", \"a\", \"d\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"ac\", \"bd\", \"d\"])",
        "minimizeConcatenatedLength(words = [\"baba\", \"banana\", \"s\"])",
        "minimizeConcatenatedLength(words=[\"abc\", \"aab\", \"baba\", \"a\"])",
        "minimizeConcatenatedLength(words = [\"on\", \"hy\", \"yy\", \"yo\"])"
    ],
    "sample_327": [
        "isFascinating(n = 123456789)",
        "isFascinating(n = 1)",
        "isFascinating(n = 123)",
        "isFascinating(n = 2)",
        "isFascinating(n = 9)",
        "isFascinating(n = 9)",
        "isFascinating(n = 10)",
        "isFascinating(n = 3)",
        "isFascinating(n=12345678)",
        "isFascinating(n=55)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2], [3,4], [5,6]])",
        "matrixSum(nums = [[1,1,1],[1,1,1],[1,1,1]])",
        "matrixSum(nums = [[1, 2, 4], [2, 3, 5], [3, 4, 6]])",
        "matrixSum(nums = [[1,1,1],[1,1,1],[1,1,0]])",
        "matrixSum(nums = [[1], [2, 4], [5, 6, 7]])",
        "matrixSum(nums = [[1, 3, 2], [4, 0, 2]])",
        "matrixSum(nums = [[1, 5, 2], [3, 4, 7]])",
        "matrixSum(nums = [[1,3,5,7],[2,4,1,7],[2,3,6,7]])",
        "matrixSum(nums = [[3, 1, 4, 2, 1], [3, 1, 4, 3, 1], [2, 1, 2, 1, 4], [2, 1, 2, 1, 4]])"
    ],
    "sample_326": [
        "isFascinating(n = 3)",
        "isFascinating(n = 5)",
        "isFascinating(n = 4)",
        "isFascinating(n = 7)",
        "isFascinating(n = 12)",
        "isFascinating(n = 123)",
        "isFascinating(n = 10)",
        "isFascinating(n = 15)",
        "isFascinating(n=1)",
        "isFascinating(n = 647)"
    ],
    "sample_275": [
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 1, 1], [0, 1, 1]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 1], [1, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 1, 0], [1, 1, 1, 0], [0, 1, 0, 0]])",
        "findChampion(grid = [[1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]])",
        "findChampion(grid = [[1,0,0,0,0,0], [0,0,0,0,0,0], [0,0,1,0,0,0], [0,0,0,0,0,0], [0,0,0,0,0,0], [0,0,0,0,0,0]])",
        "findChampion(grid = [[1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0, 0, 1], [0, 0, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 0, 0]])"
    ],
    "sample_260": [
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [4, 2, 1, 3])",
        "minimumSum(nums = [1, 3, 2, 4])",
        "minimumSum(nums = [5, 3, 1, 2, 4])",
        "minimumSum(nums = [2, 1, 5, 3, 7, 6])",
        "minimumSum(nums = [1, 2, 5, -4, 12])",
        "minimumSum(nums = [2, 1, 4, 6, 9, 10])",
        "minimumSum(nums = [2, 4, 8, 3, 6, 10, 1, 12])",
        "minimumSum(nums = [7, 6, 5, 10, 9, 1, 2, 3])",
        "minimumSum(nums = [-1000, -1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000])"
    ],
    "sample_322": [
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 3)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 5)",
        "isFascinating(n=4)",
        "isFascinating(n = 36)",
        "isFascinating(n = 19)",
        "isFascinating(n = 336)"
    ],
    "sample_248": [
        "minOperations(s1 = \"01110\", s2 = \"10110\", x = 3)",
        "minOperations(s1 = \"110\", s2 = \"010\", x = 3)",
        "minOperations(s1 = \"11\", s2 = \"0\", x = 3)",
        "minOperations(s1 = \"1101\", s2 = \"1010\", x = 3)",
        "minOperations(s1 = \"100\", s2 = \"110010\", x = 5)",
        "minOperations(s1 = \"0100\", s2 = \"0010\", x = 2)",
        "minOperations(s1 = \"1111\", s2 = \"0001\", x = 9)",
        "minOperations(s1 = \"101\", s2 = \"101010\", x = 10)",
        "minOperations(s1 = \"10101111\", s2 = \"10101100\", x = 7)",
        "minOperations(s
    ],
    "sample_342": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 1, y = 1, z = 2)",
        "longestString(x = 1, y = 2, z = 1)",
        "longestString(x = 2, y = 1, z = 1)",
        "longestString(x = 1, y = 2, z = 2)",
        "longestString(x = 2, y = 3, z = 2)",
        "longestString(x = 5, y = 5, z = 5)"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 7, 9, 6, 8], moveFrom = [7, 9], moveTo = [6, 8])",
        "relocateMarbles(nums = [2, 3, 5, 6, 8, 9], moveFrom = [3, 5, 6], moveTo = [2, 8, 9])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3, 5], moveTo = [3, 6, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [4, 6, 7], moveTo = [5, 8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 8, 9], moveTo = [8, 5, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [1, 2, 4], moveTo = [6, 7, 9])",
        "relocateMarbles(nums = [4, 7, 8, 5, 9], moveFrom = [4, 7], moveTo = [8, 9])",
        "relocateMarbles(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3, 5], moveTo = [3, 6, 9])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 6, 7], moveTo = [3, 4])",
        "relocateMarbles(nums = [3, 6, 5, 10, 8, 9], moveFrom = [10, 8], moveTo = [6, 10])"
    ],
    "sample_306": [
        "countSeniors(details = [\"<NAME>\", \"<NAME>\", \"<NAME>\"])",
        "countSeniors(details = [\"<NAME> 57\", \"<NAME> 65\", \"<NAME> 63\"])",
        "countSeniors(details = [\"Alice,23\", \"Bob,48\", \"Charlie,72\"])",
        "countSeniors(details = [\"joe 62\", \"mike 63\", \"mary 59\"])",
        "countSeniors(details = [\"57:m:2010\", \"61:f:2017\"])",
        "countSeniors(details = [\"Paul,23,male,49\", \"Mary,62,female,36\"])",
        "countSeniors(details = [\"Mary:24\", \"Bill:56\", \"William:44\", \"Kevin:63\"])",
        "countSeniors(details = [\"45 - 58\", \"11 - 23\", \"31 - 40\", \"67 - 72\"])",
        "countSeniors(details = [\"<NAME> 1985-03-07 1997-01-17\", \"<NAME> 1975-04-19 1980-02-02\"])",
        "countSeniors(details = [\"Mr. Smith 1990-01-02\", \"Mrs. Watson 1991-04-05\", \"Dr. Jones 1969-08-09\", \"Mr. Smith 1990-01-02\"])"
    ],
    "sample_303": [
        "countSeniors(details = [\"1991\", \"1993\", \"2007\"])",
        "countSeniors(details = [\"41 years old\", \"21 years old\", \"61 years old\"])",
        "countSeniors(details=[\"21\", \"65\", \"12\", \"54\"])",
        "countSeniors(details = [\"1975-01-01\", \"1967-01-01\", \"1980-01-01\", \"1984-01-01\"])",
        "countSeniors(details = [\"16yo\", \"36yo\", \"5yo\", \"59yo\", \"62yo\"])",
        "countSeniors(details = [\"<NAME>\", \"<NAME>\", \"Joe 29\", \"Jane 44\"])",
        "countSeniors(details = [\"1980-10-27\", \"1969-09-12\", \"1999-01-28\"])",
        "countSeniors(details = [\"123, Jake, 19\", \"456, Aditya, 80\"])",
        "countSeniors(details = [\"kumiko\", \"cassie\", \"mr\", \"smith\", \"83\"])",
        "countSeniors(details = [\"Earl\",\"1998\",\"61\", \"Sam\",\"1999\",\"65\", \"Alison\", \"1999\", \"60\"])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [1, 5, 6, 8, 9], moveFrom = [1], moveTo = [5])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [1, 2, 3, 4], moveTo = [5, 6, 8, 9])",
        "relocateMarbles(nums = [1, 2, 5, 6, 8, 9], moveFrom = [5, 6], moveTo = [2, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 5, 8], moveTo = [4, 7, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [3, 4], moveTo = [7, 9])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3, 9], moveTo = [6, 8])",
        "relocateMarbles(nums = [1, 2, 5, 8, 9], moveFrom = [1, 5], moveTo = [9, 2])",
        "relocateMarbles(nums = [3, 4, 6, 9], moveFrom = [3, 4], moveTo = [4, 5])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9], moveFrom = [4, 3, 2], moveTo = [6, 8, 1])",
        "relocateMarbles(nums = [3, 2, 4, 1, 5, 6, 7, 8, 9], moveFrom = [5, 6, 7, 8], moveTo = [8, 7, 6, 5])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"acd\", s3 = \"ace\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"adc\", s3 = \"aed\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"cab\")",
        "findMinimumOperations(s1 = \"x\", s2 = \"xx\", s3 = \"x\")",
        "findMinimumOperations(s1 = \"abab\", s2 = \"baba\", s3 = \"abac\")",
        "findMinimumOperations(s1 = \"bc\", s2 = \"a\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"bc\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abdc\", s2 = \"adcb\", s3 = \"cbda\")",
        "findMinimumOperations(s1 = \"bd\", s2 = \"a\", s3 = \"d\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"ab\", s3 = \"acb\")",
        "findMinimumOperations(s1 = \"atcoder\", s2 = \"atcoder\", s3 = \"atcoder\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"ab\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"ban\", s2 = \"ana\", s3 = \"nan\")",
        "findMinimumOperations(s1 = \"abca\", s2 = \"cbda\", s3 = \"adbc\")",
        "findMinimumOperations(s1 = \"love\", s2 = \"love\", s3 = \"love\")",
        "findMinimumOperations(s1 = \"add\", s2 = \"bdd\", s3 = \"bdds\")",
        "findMinimumOperations(s1 = \"abx\", s2 = \"bax\", s3 = \"abx\")",
        "findMinimumOperations(s1 = \"banan\", s2 = \"bannana\", s3 = \"ban\")",
        "findMinimumOperations(s1 = \"lkg\", s2 = \"gljk\", s3 = \"lkj\")"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 3, 2, 1])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1, 3, 2, 4, 3])",
        "minimumRightShifts(nums = [0, 1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 1, 2])",
        "minimumRightShifts(nums = [0, 1, 1, 1, 1, 1, 1])",
        "minimumRightShifts(nums = [3, 5, 7, 9])",
        "minimumRightShifts(nums = [4, 3, 5, 2, 4, 1])",
        "minimumRightShifts(nums = [1, 3, 2, 2, 2, 1])",
        "minimumRightShifts(nums=[3, 5, 0, 1])"
    ],
    "sample_453": [
        "minChanges(s = \"aabbcc\")",
        "minChanges(s = \"abccba\")",
        "minChanges(s = \"abca\")",
        "minChanges(s = \"baab\")",
        "minChanges(s = \"cabaabac\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"aaabbc\")",
        "minChanges(s = \"cbacdcbc\")",
        "minChanges(s = \"bnnnnnaaaan\")",
        "minChanges(s = \"xxhqqqcc\")"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [5,7,7,8,8,10], target = 8)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 11)",
        "lengthOfLongestSubsequence(nums = [3, 5, -4, 8, 11, 15], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 4, 7], target = 9)",
        "lengthOfLongestSubsequence(nums = [10, 9, 2, 5, 3, 7, 101, 18], target = 100)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 9)",
        "lengthOfLongestSubsequence(nums = [0,3,7,2,5,8,4,6,0,1], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3, 4, 5], target=9)",
        "lengthOfLongestSubsequence(nums = [1, 1, 2, 3, 4, 5, 7], target = 6)"
    ],
    "sample_367": [
        "sortVowels(s = \"Hello\")",
        "sortVowels(s = \"Hello World\")",
        "sortVowels(s = \"lYmhP\")",
        "sortVowels(s = 'lmpHLY')",
        "sortVowels(s = \"lUnGA\")",
        "sortVowels(s = 'Hercules')",
        "sortVowels(s = \"AbrAcadabra\")",
        "sortVowels(s = \"I am an example\")",
        "sortVowels(s = \"Hey there, how are you?\")",
        "sortVowels(s = 'hAcEeaeOt')"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [10,9,2,5,3,7,101,18], target = 5)",
        "lengthOfLongestSubsequence(nums = [10, 9, 2, 5, 3, 7, 101, 18], target = 5)",
        "lengthOfLongestSubsequence(nums = [10, 9, 2, 5, 3, 7, 101, 18], target = 5)",
        "lengthOfLongestSubsequence(nums = [0, 3, 7, 2, 5, 8, 4, 6, 0, 1], target = 10)",
        "lengthOfLongestSubsequence(nums = [0, 3, 7, 2, 5, 8, 4, 6, 0, 1], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 4, 7], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 10)",
        "lengthOfLongestSubsequence(nums = [3, 5, -4, 8, 11, 10, -13, 1], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,1,1,1,1], target = 3)",
        "lengthOfLongestSubsequence(nums = [5,6,7,8,9], target = 10)"
    ],
    "sample_381": [
        "countPairs(nums = [3, 1, 4, 1, 5], t = 7)",
        "countPairs(nums = [3, 1, 4, 1, 5], t = 7)",
        "countPairs(nums = [3, 1, 4, 1, 5], t = 7)",
        "countPairs(nums = [3,1,4,1,5], t = 7)",
        "countPairs(nums = [3,1,4,1,5], t = 7)",
        "countPairs(nums = [1, 2, 3, 4], t = 6)",
        "countPairs(nums = [1,4,4,4,4], t = 8)",
        "countPairs(nums = [1,1,1], t = 2)",
        "countPairs(nums=[1, 1, 2, 2], t=4)",
        "countPairs(nums=[1, 2, 3, 4, 5, 6, 7], t=8)"
    ],
    "sample_366": [
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [1, 3, 2])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [2, 3, 1, 5, 4])",
        "isGood(nums = [2, 1, 0])",
        "isGood(nums = [0, 2, 1, 3, 4])",
        "isGood(nums = [1, 2, 4, 7, 8])",
        "isGood(nums = [2, 1, 1, 0, 2, 2, 2])"
    ],
    "sample_369": [
        "sortVowels(s = 'Hello')",
        "sortVowels(s = 'Lymph')",
        "sortVowels(s = 'hello')",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Hello World\")",
        "sortVowels(s = \"HelLo\")",
        "sortVowels(s = \"How Are you?\")",
        "sortVowels(s = \"high\")",
        "sortVowels(s = \"rhythm\")",
        "sortVowels(s = \"Taco cat\")"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 5, 1, 2, 4, 3])",
        "minimumRightShifts(nums = [3, 4, 1, 1, 4])",
        "minimumRightShifts(nums = [4, 3, 7, 8, 6, 2, 1])",
        "minimumRightShifts(nums = [0, 1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 1, 4, 0])",
        "minimumRightShifts(nums = [5, 2, 3, 4, 2])",
        "minimumRightShifts(nums = [2, 1, 1, 3, 4, 1])",
        "minimumRightShifts(nums = [3,4,2,6,5,1,9,7,8,0])"
    ],
    "sample_448": [
        "minChanges(s = \"aba\")",
        "minChanges(s = \"abccba\")",
        "minChanges(s = \"abccba\")",
        "minChanges(s = \"aabbccdd\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"abdc\")",
        "minChanges(s = \"abcbaa\")",
        "minChanges(s = \"aabbcdeff\")",
        "minChanges(s = \"abcdcba\")",
        "minChanges(s = \"abcdeeeef\")"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abcde\", s2 = \"edcba\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"edcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcda\")",
        "canBeEqual(s1 = \"ab\", s2 = \"cd\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"waterbottle\", s2 = \"erbottlewat\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cadb\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acbd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcab\")",
        "canBeEqual(s1 = \"axxb\", s2 = \"xaxb\")"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6])",
        "minLengthAfterRemovals(nums = [1,2,2,2,1,1,2,2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 3, 3, 3, 4])",
        "minLengthAfterRemovals(nums = [4, 4, 4, 4, 5, 5, 5, 5])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [5, 1, 4, 4, 2])",
        "minLengthAfterRemovals(nums = [4, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [4, 4, 2, 2, 8, 8, 4, 2])",
        "minLengthAfterRemovals(nums = [5,1,2,3,5,6,1,3,5])",
        "minLengthAfterRemovals(nums = [1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    ],
    "sample_361": [
        "isGood(a = [1, 2, 3, 3])",
        "isGood(a = [1, 2, 3, 4, 1])",
        "isGood(a = [1, 2, 2, 3, 3, 4])",
        "isGood(a = [1, 2, 1, 2, 3])",
        "isGood(a = [1,2,2])",
        "isGood(a = [1,1,1,1,1,2])",
        "isGood(a = [3, 3, 3, 4])",
        "isGood(a = [0, 1, 1, 0, 1, 1])",
        "isGood(a = [3, 3, 4, 2, 2])",
        "isGood(a = [3, 1, 2, 3, 1, 4, 5])"
    ],
    "sample_419": [
        "minOperations(nums = [1,4,16], k = 4)",
        "minOperations(nums = [1,2,4,7], k = 5)",
        "minOperations(nums = [1,1,4,2,3], k = 2)",
        "minOperations(nums = [1,4,16,22,24], k = 4)",
        "minOperations(nums = [1,4,4], k = 4)",
        "minOperations(nums = [10,20,30,40,50], k = 40)",
        "minOperations(nums = [1, 2, 4, 7, 10], k = 12)",
        "minOperations(nums = [1000, 1000, 1000, 1000, 1000, 1000, 1000], k = 6000)",
        "minOperations(nums = [10,2,5,8,15,1,3,12], k = 8)",
        "minOperations(nums = [10,2,5,8,12,14,15,19,21,25,28], k = 10)"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1,3,5,4,7])",
        "findMaximumLength(nums=[4,2,3,6,1,2])",
        "findMaximumLength(nums=[1,2,3,4,5,6,5,4,3,2,1])",
        "findMaximumLength(nums = [2,2,2,2,2])",
        "findMaximumLength(nums=[1, 1, 2, 4, 4])",
        "findMaximumLength(nums = [1,1,2,2,3,3,4,4,4,4,5])",
        "findMaximumLength(nums=[2,2,3,2,5])",
        "findMaximumLength(nums = [3,4,2,6,3,5])",
        "findMaximumLength(nums = [0,4,2,4,5])",
        "findMaximumLength(nums = [1,2,3,1,4,3,4,4])"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1,0,1,0,1])",
        "maxSubarrays(nums = [1, 1, 2, 1, 1])",
        "maxSubarrays(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "maxSubarrays(nums = [1, 1, 2, 1, 3])",
        "maxSubarrays(nums = [1,0,1,1,1])",
        "maxSubarrays(nums = [3,2,1])",
        "maxSubarrays(nums = [1,1,0,1])",
        "maxSubarrays(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "maxSubarrays(nums = [-1, -2, -1, -4])",
        "maxSubarrays(nums = [0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"axyz\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"axyz\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"aac\", str2 = \"aba\")",
        "canMakeSubsequence(str1 = \"axy\", str2 = \"xbz\")",
        "canMakeSubsequence(str1 = \"zebra\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"zebra\", str2 = \"zbr\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"abacus\")",
        "canMakeSubsequence(str1 = \"abz\", str2 = \"azbz\")",
        "canMakeSubsequence(str1 = \"accb\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"zzzzz\", str2 = \"bzaaa\")"
    ],
    "sample_402": [
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 3)",
        "maxSum(nums = [1,2,1,2,6,7,5,1], m = 4, k = 3)",
        "maxSum(nums = [2, 4, 9, 3], m = 2, k = 2)",
        "maxSum(nums=[1,2,1,2,6,7,5,1], m=2, k=3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 2)",
        "maxSum(nums = [10, 5, 2, 7, 8, 7], m = 2, k = 3)",
        "maxSum(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 2, 2, 2, 5, 6, 2], m = 3, k = 3)",
        "maxSum(nums = [1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4], m = 4, k = 2)",
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 3)"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"ba\", \"nana\"], x = \"a\")",
        "findWordsContaining(words = [\"mary\", \"had\", \"a\", \"little\", \"lamb\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"bear\"], x = \"a\")",
        "findWordsContaining(words = [\"yellow\", \"green\", \"blue\"], x = \"e\")",
        "findWordsContaining(words=[\"banana\", \"apple\", \"orange\", \"bananas\"], x = \"an\")",
        "findWordsContaining(words = [\"aaaa\", \"bbb\", \"cccc\"], x = \"b\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"bye\", \"hell\"], x = \"ll\")",
        "findWordsContaining(words = [\"quack\", \"python\", \"python3\"], x = \"py\")",
        "findWordsContaining(words = [\"abruptly\", \"furiously\", \"grumpily\", \"happily\"], x = \"ily\")"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"3\", \"1\", \"prev\", \"5\", \"prev\", \"4\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"next\", \"next\", \"prev\", \"next\", \"prev\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = ['3', '1', 'prev', 'prev', 'prev', '7', 'prev', 'prev'])",
        "lastVisitedIntegers(words = [\"prev\", \"4\", \"prev\", \"2\", \"4\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"4\", \"1\", \"prev\", \"5\", \"6\", \"prev\", \"5\"])",
        "lastVisitedIntegers(words = [\"prev\", \"5\", \"3\", \"1\", \"6\", \"5\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"5\", \"4\", \"next\", \"1\", \"7\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"4\", \"5\", \"prev\", \"2\", \"4\", \"1\", \"prev\", \"2\", \"prev\", \"3\"])"
    ],
    "sample_422": [
        "minOperations(nums = [1,1,4,2,3], k = 4)",
        "minOperations(nums = [5,4,3,2,1], k = 3)",
        "minOperations(nums = [2, 2, 2, 2, 2, 2], k = 2)",
        "minOperations(nums = [1, 2, 1, 2, 3], k = 3)",
        "minOperations(nums = [1,1,3,2,3], k = 3)",
        "minOperations(nums = [2,4,6,8,10], k = 5)",
        "minOperations(nums = [2,4,1,2,7,8], k = 4)",
        "minOperations(nums=[1, 1, 1, 1, 1, 1, 1], k=1)",
        "minOperations(nums=[1, 2, 4, 3], k=4)",
        "minOperations(nums = [5, 4, 7, 8, 8, 8], k = 4)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 1, 4, 2, 3], k = 2)",
        "minOperations(nums = [1, 1, 1, 1, 1], k = 0)",
        "minOperations(nums = [3,1,1,2,1,3], k = 3)",
        "minOperations(nums = [5, 3, 1, 2, 4], k = 3)",
        "minOperations(nums = [5, 2, 4, 1, 3], k = 2)",
        "minOperations(nums = [1, 3, 2, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 4, 1, 2, 3], k = 4)",
        "minOperations(nums = [1,2,3], k = 5)",
        "minOperations(nums = [7, 4, 2, 1], k = 3)",
        "minOperations(nums = [5, 1, 2, 6, 2, 3, 4, 8, 1], k = 4)"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 8, 9, 10])",
        "minimumSeconds(nums = [2, 2, 2, 0, 1, 0, 1, 2, 0, 1])",
        "minimumSeconds(nums = [1,2,1,3,4,1,3])",
        "minimumSeconds(nums = [1,2,4,7,8,13,15,17,19])",
        "minimumSeconds(nums = [9, 8, 2, 3, 5, 6, 4, 7, 10, 1])",
        "minimumSeconds(nums = [5,3,7,9,11])",
        "minimumSeconds(nums = [2, 2, 2, 1, 5, 5, 4, 4])",
        "minimumSeconds(nums = [1, 2, 2, 3, 1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1])",
        "minimumSeconds(nums = [9, 8, 8, 1, 4, 1, 2, 5, 1, 4, 2, 4, 5, 2, 8, 1, 2, 8, 1, 1, 1, 4, 8, 1, 7, 1, 1, 7, 1, 1, 7, 4, 8, 1, 8, 8, 1, 7, 1, 8, 4, 8, 1, 7, 7, 8, 1, 1, 8, 1, 7, 4, 8, 4, 8, 7, 1, 8, 1, 7, 7, 8, 8, 4, 8, 8, 1, 4, 7, 8, 1, 1, 8, 1, 4, 1, 1, 7, 1, 1, 4, 8, 1, 7, 1, 1, 1, 4, 1, 7, 8, 4, 1, 8, 1, 4, 8, 1, 4, 8, 1, 8, 8, 1, 4, 8, 1, 8, 4, 4, 1, 7, 4, 1, 8, 1, 1, 1, 7, 7, 4, 8, 1, 4, 1, 8, 1, 1, 8, 1, 4, 7, 1, 1, 1, 1, 8, 7, 1, 1, 8, 1, 4, 1, 8, 1, 4, 7, 1, 1, 4, 7, 1, 1, 8, 1, 8, 8, 1, 1, 7, 7, 1, 1, 8, 8, 4, 1, 4, 7, 1, 8, 1, 8, 4, 1, 8, 1, 8, 8, 8, 7, 8, 1, 8, 1, 7, 1,"
    ],
    "sample_383": [
        "countPairs(nums = [1, 1, 2, 2, 3], target = 4)",
        "countPairs(nums = [1, 1, 2, 2, 3], target = 4)",
        "countPairs(nums = [1,1,2], target = 4)",
        "countPairs(nums = [3,1,4,1,5], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,1,2], target = 4)",
        "countPairs(nums = [1,2,3,4,5], target = 5)",
        "countPairs(nums = [1, 1, 2, 2, 3, 4, 5, 5], target = 8)",
        "countPairs(nums = [1, 3, 5], target = 11)",
        "countPairs(nums = [0,0,0,0,1,1,1,1], target = 2)"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"carrot\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"pineapple\"], x = \"a\")",
        "findWordsContaining(words = [\"this\", \"that\", \"the other\"], x = \"the\")",
        "findWordsContaining(words = [\"banana\", \"mango\", \"avocado\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"app\", \"apples\"], x = \"app\")",
        "findWordsContaining(words = [\"ab\", \"bc\", \"xy\"], x = \"x\")",
        "findWordsContaining(words = [\"monkey\", \"banana\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"abc\", \"cde\", \"abab\"], x = \"ab\")",
        "findWordsContaining(words = [\"banana\", \"mellow\", \"cow\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"tuna\", \"chili pepper\"], x = \"nana\")"
    ],
    "sample_372": [
        "sortVowels(s = 'this is a banana')",
        "sortVowels(s = 'leetcode')",
        "sortVowels(s = \"table\")",
        "sortVowels(s = 'tCEodele')",
        "sortVowels(s = 'eilorae')",
        "sortVowels(s = 'What a lovely day')",
        "sortVowels(s = \"Kalis\")",
        "sortVowels(s = \"eAaeOuAeOo\")",
        "sortVowels(s = \"the sky is blue\")",
        "sortVowels(s = 'A cat In a hat')"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [1, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [2, 2, 3, 7, 5])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 5, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 1, 3, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 3, 1, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 3, 4, 1, 2])",
        "minLengthAfterRemovals(nums = [7, 9, 7, 9, 7])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 7])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2])"
    ],
    "sample_452": [
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"ab\")",
        "minChanges(s = \"aabbccdd\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"aabbcd\")",
        "minChanges(s = \"abcb\")",
        "minChanges(s = \"aabbcd\")",
        "minChanges(s = \"cdxxe\")",
        "minChanges(s = \"abaabacada\")"
    ],
    "sample_385": [
        "countPairs(nums = [1, 1, 2, 2, 3], target = 4)",
        "countPairs(nums = [1, 1, 2, 2, 3], target = 4)",
        "countPairs(nums = [1, 1, 2, 2, 3, 3, 4, 5], target = 8)",
        "countPairs(nums = [1, 2, 3, 4], target = 4)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6, 7], target = 12)",
        "countPairs(nums = [1,1,1,1,1,1,1], target = 2)",
        "countPairs(nums=[2, 5, 1, 3, 4], target=4)",
        "countPairs(nums = [1,1,3,3,5], target = 6)",
        "countPairs(nums = [1, 2, 4, 3, 1, 2, 3], target = 7)",
        "countPairs(nums = [2, 5, 3, 9, 2, 8, 6, 8, 10], target = 13)"
    ],
    "sample_427": [
        "minOperations(nums = [3, 1, 2, 4, 3])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 2, 3, 4])",
        "minOperations(nums = [1, 2, 4, 2])",
        "minOperations(nums = [3, 3, 6, 3, 1, 3])",
        "minOperations(nums = [3,3,6,2])",
        "minOperations(nums = [1,1,1])",
        "minOperations(nums=[1, 5, 10, 2])",
        "minOperations(nums = [4, 2, 6, 3, 1, 2, 3, 4, 3, 3, 2])",
        "minOperations(nums = [5,3,7,2,3,5,2,4,1,2,6,3,4,3,2,4])"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 1, 2, 1, 3])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3,4,4,4,4])",
        "minLengthAfterRemovals(nums = [3, 1, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [3, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [5,3,3,3,5,5,5,2,2,7])",
        "minLengthAfterRemovals(nums = [1, 1, 3, 3, 5, 5, 7, 7, 9])",
        "minLengthAfterRemovals(nums = [3, 5, 2, 6, 4, 3])",
        "minLengthAfterRemovals(nums = [3, 4, 1, 2, 5, 6, 8, 10, 9, 7])"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 5, 11, 5])",
        "minimumCoins(prices = [1, 5, 8])",
        "minimumCoins(prices = [1, 5, 8, 9, 10, 17])",
        "minimumCoins(prices = [1, 4, 2, 3])",
        "minimumCoins(prices = [1, 3, 4, 7])",
        "minimumCoins(prices = [1, 4, 6])",
        "minimumCoins(prices = [3, 1, 2, 4, 7])",
        "minimumCoins(prices = [1, 2, 4, 8, 5])",
        "minimumCoins(prices = [1, 5, 10, 20, 100])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"apricot\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"kiwi\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\", \"mango\"], x = \"an\")",
        "findWordsContaining(words = [\"foo\", \"bar\", \"foofoo\"], x = \"foo\")",
        "findWordsContaining(words = [\"a\", \"b\", \"c\", \"banana\"], x = \"na\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"cat\"], x = \"ca\")",
        "findWordsContaining(words = [\"banana\", \"kiwi\", \"hello\", \"goodbye\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"batata\", \"waffle\"], x = \"ana\")",
        "findWordsContaining(words = [\"bc\", \"ay\", \"nn\", \"bc\"], x = \"bc\")"
    ],
    "sample_420": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 9)",
        "minOperations(nums = [1,4,16], k = 4)",
        "minOperations(nums = [2,3,1,1,3], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1, 2, 1, 2, 1, 2], k = 2)",
        "minOperations(nums = [10,20,30,40,50], k = 30)",
        "minOperations(nums = [1, 1, 1, 2, 3], k = 3)",
        "minOperations(nums = [1,10,4,3,2], k = 5)",
        "minOperations(nums = [5,5,4], k = 1)",
        "minOperations(nums = [5,2,4,3], k = 4)"
    ],
    "sample_362": [
        "isGood(nums = [1,2,3])",
        "isGood(nums = [1, 2, 0])",
        "isGood(nums = [1, 3, 2, 4])",
        "isGood(nums = [1, 2, 4, 5])",
        "isGood(nums = [2, 3, 1, 5, 4])",
        "isGood(nums=[1,2,3,4,5])",
        "isGood(nums = [3, 2, 0, 1])",
        "isGood(nums = [3, 5, 1, 2, 4])",
        "isGood(nums = [2, 3, 4, 1, 6])",
        "isGood(nums = [2, 1, 5, 3, 2, 4])"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [10,9,2,5,3,7,101,18], target = 5)",
        "lengthOfLongestSubsequence(nums = [10,9,2,5,3,7,101,18], target = 9)",
        "lengthOfLongestSubsequence(nums = [10,9,2,5,3,7,101,18], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 10)",
        "lengthOfLongestSubsequence(nums = [2,5,10,4,7], target = 9)",
        "lengthOfLongestSubsequence(nums = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], target = 1)",
        "lengthOfLongestSubsequence(nums = [2,1,3,4,7,10,12], target = 5)",
        "lengthOfLongestSubsequence(nums = [0, -1, 0, -1, 2, 0, 1], target = 0)"
    ],
    "sample_365": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [4, 3, 2, 1])",
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums=[1, 2, 2, 3])",
        "isGood(nums=[1,2,3,1])",
        "isGood(nums = [1, 2, 3, 4, 5, 1])",
        "isGood(nums = [5, 6, 4, 3, 1])",
        "isGood(nums = [4,6,5,3,3])",
        "isGood(nums = [2,1,5,4,3])"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 2, 1, 1])",
        "maxSubarrays(nums = [1, 1, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums=[1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [3, 4, 1, 2, 5])",
        "maxSubarrays(nums = [3,2,2,2,4,4,2,2])",
        "maxSubarrays(nums = [2, 5, 6, -9, 2, 5, -3, 5])",
        "maxSubarrays(nums = [3, 4, 1, 6, 2, 3, 10, 10, 10, 10])"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [10,9,2,5,3,7,101,18], target = 5)",
        "lengthOfLongestSubsequence(nums = [3,5,6,7], target = 9)",
        "lengthOfLongestSubsequence(nums = [10,9,2,5,3,7,101,18], target = 9)",
        "lengthOfLongestSubsequence(nums = [1,3,5,4,7], target = 9)",
        "lengthOfLongestSubsequence(nums = [1,1,1,1,1], target = 3)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 4, 7], target = 9)",
        "lengthOfLongestSubsequence(nums=[1,3,5,4,7], target=6)",
        "lengthOfLongestSubsequence(nums = [4,6,5,3,3,1], target = 9)",
        "lengthOfLongestSubsequence(nums = [2,4,5,1,4,6,7,2], target = 9)"
    ],
    "sample_450": [
        "minChanges(s = \"baanaa\")",
        "minChanges(s = \"paapa\")",
        "minChanges(s = \"aabAAB\")",
        "minChanges(s=\"abb\")",
        "minChanges(s = \"AAABBBCC\")",
        "minChanges(s=\"abcdef\")",
        "minChanges(s = \"xyy\")",
        "minChanges(s = \"azzzz\")",
        "minChanges(s=\"ccppp\")",
        "minChanges(s = \"cccce\")"
    ],
    "sample_463": [
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n=10, limit=3)",
        "distributeCandies(n=7, limit=2)",
        "distributeCandies(n = 10, limit = 1)",
        "distributeCandies(n = 20, limit = 2)"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1, 1, 2, 3])",
        "sumCounts(nums = [1, 1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "sumCounts(nums = [1, 1, 1, 2])",
        "sumCounts(nums = [1,2,2,3,4])",
        "sumCounts(nums = [1, 3, 4, 1, 2, 4])",
        "sumCounts(nums = [1,1,1,1,2,2,3,4,4,4,4,5,6,6,7,8,9,9,9])"
    ],
    "sample_449": [
        "minChanges(s = \"aba\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s=\"ab\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"abccde\")",
        "minChanges(s = \"abaa\")",
        "minChanges(s=\"aabbccddeeff\")",
        "minChanges(s = \"abbbbcde\")",
        "minChanges(s = \"rrqq\")"
    ],
    "sample_425": [
        "minOperations(nums = [2,2,2,2,2])",
        "minOperations(nums = [2,2,2,2,2])",
        "minOperations(nums = [3,3,6,7])",
        "minOperations(nums = [1, 2, 2, 3])",
        "minOperations(nums = [2, 4, 8, 16])",
        "minOperations(nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])",
        "minOperations(nums = [1, 2, 3, 2, 1, 1])",
        "minOperations(nums=[1,2,4,1,2,7,8,2,8])",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 6, 7])",
        "minOperations(nums = [5,5,4,1,2])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ac\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"axyz\")",
        "canMakeSubsequence(str1 = \"aba\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"aacb\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"dbca\")",
        "canMakeSubsequence(str1 = \"mango\", str2 = \"banana\")",
        "canMakeSubsequence(str1 = \"bbbaaaaa\", str2 = \"ba\")",
        "canMakeSubsequence(str1 = \"ax\", str2 = \"zba\")",
        "canMakeSubsequence(str1 = 'baaab', str2 = 'ab')"
    ],
    "sample_377": [
        "minimumSeconds(nums=[1,2,3,4,5])",
        "minimumSeconds(nums = [2, 2, 2, 0, 1])",
        "minimumSeconds(nums = [1,2,1,2,1,2,1,2])",
        "minimumSeconds(nums=[1,3,5,7])",
        "minimumSeconds(nums = [1,1,3])",
        "minimumSeconds(nums = [1,2,4,5,7,8,9,10,11,12,13,14,16,17,18,19,20])",
        "minimumSeconds(nums = [1,3,2,2,3,7,8,5,6])",
        "minimumSeconds(nums = [1, 3, 2, 4, 3, 6, 7, 5, 6, 5, 7, 9])",
        "minimumSeconds(nums = [10,20,7,8,7,8,18,12,14,13,15,14,13,11,10,12,11,12,11,12,13,12,13,11,12,13,12,13,12,13,11,12,13,12,13,12,13,11,12,13,12,13,12,13,11,12,13,12,13,12,13])",
        "minimumSeconds(nums = [5, 3, 1, 3, 1, 3, 2, 2, 1, 3, 1, 3, 1, 3, 1, 3, 3, 1, 3, 1, 3, 1, 1, 3, 1, 3, 3, 1, 3, 1, 3, 1, 1, 3, 1, 3, 1, 3, 1, 3, 1, 1, 3, 1, 3, 1, 3, 1, 1, 3, 3, 1, 3, 1, 1, 3, 3, 1, 1, 3, 3, 1, 1, 3, 1, 3, 1, 1, 3, 1, 3, 1, 1, 3, 1, 3, 1, 3, 1, 3, 3, 1, 3, 1, 3, 1, 1, 3, 1, 3, 1, 1, 3, 1, 3, 1, 1, 3, 1, 1, 3, 1, 3, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 3, 1, 1, 3, 1, 3, 1, 1, 3, 1, 3, 1, 1, 3, 1, 1, 3, 1, 3, 1, 1, 3, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1,"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [10,9,2,5,3,7,101,18], target = 5)",
        "lengthOfLongestSubsequence(nums = [10,9,2,5,3,7,101,18], target = 5)",
        "lengthOfLongestSubsequence(nums = [10,9,2,5,3,7,101,18], target = 5)",
        "lengthOfLongestSubsequence(nums = [10,9,2,5,3,7,101,18], target = 5)",
        "lengthOfLongestSubsequence(nums = [10,9,2,5,3,7,101,18], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,3,5,4,7], target = 9)",
        "lengthOfLongestSubsequence(nums=[1,2,3,4], target=5)",
        "lengthOfLongestSubsequence(nums = [4,6,7,7], target = 5)",
        "lengthOfLongestSubsequence(nums = [2, 1, 3, 4, 5], target = 1)",
        "lengthOfLongestSubsequence(nums = [5,6,10,4,2], target = 15)"
    ],
    "sample_370": [
        "sortVowels(s = \"Hello World\")",
        "sortVowels(s = 'banana')",
        "sortVowels(s = \"thequickbrownfoxjumpsoverthelazydog\")",
        "sortVowels(s = \"cedeoLEt\")",
        "sortVowels(s='fire')",
        "sortVowels(s='The quick brown fox jumps over the lazy dog')",
        "sortVowels(s = 'bAcAtee')",
        "sortVowels(s = \"funny\")",
        "sortVowels(s = 'eiOuOtxy')",
        "sortVowels(s = \"knoLLe\")"
    ],
    "sample_421": [
        "minOperations(nums = [1,2,3,4,5], k = 4)",
        "minOperations(nums = [2, 4, 9, 2], k = 5)",
        "minOperations(nums = [3,2,20,1,1,3], k = 3)",
        "minOperations(nums = [1, 4, 1, 2, 7], k = 3)",
        "minOperations(nums = [3,1,1,3], k = 3)",
        "minOperations(nums = [1, 1, 1, 1, 1, 1], k = 1)",
        "minOperations(nums = [3, 2, 1], k = 2)",
        "minOperations(nums = [3, 3, 2, 2, 1, 1], k = 3)",
        "minOperations(nums = [1, 3], k = 2)",
        "minOperations(nums = [10, 6, 5, 4], k = 2)"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1,0,1,0,1])",
        "maxSubarrays(nums = [1,2,3,2,1])",
        "maxSubarrays(nums = [1,1,2,1,2])",
        "maxSubarrays(nums = [1,2,3,4])",
        "maxSubarrays(nums = [2, 1, 3, 4, 3])",
        "maxSubarrays(nums=[1, 1, 2])",
        "maxSubarrays(nums=[1,0,1,0,1,0,1])",
        "maxSubarrays(nums = [1,1,0,1,0,1,1])",
        "maxSubarrays(nums = [2, 2, 3, 1, 3, 3, 1, 1, 2, 3, 1])",
        "maxSubarrays(nums = [2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2"
    ],
    "sample_415": [
        "countPairs(coordinates = [[0, 1], [1, 2], [2, 0]], k = 1)",
        "countPairs(coordinates = [[0, 1], [1, 2], [2, 0]], k = 1)",
        "countPairs(coordinates = [[0, 1], [1, 2], [2, 1]], k = 2)",
        "countPairs(coordinates = [[0, 1], [1, 2], [2, 1]], k = 0)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3], [4, 4]], k = 1)",
        "countPairs(coordinates = [[0, 1], [1, 2], [2, 0], [2, 2], [2, 3]], k = 1)",
        "countPairs(coordinates = [[1, 3], [2, 4], [3, 5], [4, 6]], k = 1)",
        "countPairs(coordinates = [[0, 1], [1, 2], [2, 1], [3, 4], [4, 5], [4, 7], [5, 8]], k = 3)",
        "countPairs(coordinates = [[2, 4], [2, 0], [5, 3], [3, 5], [3, 2]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 1], [3, 2], [5, 10], [12, 11], [15, 15], [20, 12]], k = 0)"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [10,9,2,5,3,7,101,18], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7], target = 9)",
        "lengthOfLongestSubsequence(nums = [10, 9, 2, 5, 3, 7, 101, 18], target = 5)",
        "lengthOfLongestSubsequence(nums = [10,9,2,5,3,7,101,18], target = 100)",
        "lengthOfLongestSubsequence(nums = [1,1,1,1,1], target = 3)",
        "lengthOfLongestSubsequence(nums = [10, 9, 2, 5, 3, 7, 101, 18], target = 100)",
        "lengthOfLongestSubsequence(nums = [10, 9, 2, 5, 3, 7, 101, 18], target = 22)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 5)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3, 7, 5], target=9)",
        "lengthOfLongestSubsequence(nums = [1, 11, 100, 1, 0, 100, 1, 1], target = 50)"
    ],
    "sample_445": [
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [0, 1, 2, 3])",
        "sumCounts(nums = [1,2,3,3])",
        "sumCounts(nums = [1,2,2,3,3,3])",
        "sumCounts(nums = [3, 4, 3, 4, 3])",
        "sumCounts(nums=[1,2,3,1,2,3,4,1,2,3])",
        "sumCounts(nums = [1, 4, 3, 5, 4])"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"abacaba\")",
        "minimumBeautifulSubstrings(s = \"0100110\")",
        "minimumBeautifulSubstrings(s = \"1010101000\")",
        "minimumBeautifulSubstrings(s = \"010010101100110\")",
        "minimumBeautifulSubstrings(s = \"20100223\")",
        "minimumBeautifulSubstrings(s = \"0110011111010110\")",
        "minimumBeautifulSubstrings(s = \"101111111111111111110101010101010101011101010101010101010101010111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s = \"795788854889\")",
        "minimumBeautifulSubstrings(s = \"0110100101100001010011000110000001101100011001000001100000011000010100001011010001110110001001000000000\")",
        "minimumBeautifulSubstrings(s
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [5, 4, 0, 3, 1, 6, 2])",
        "maxSubarrays(nums = [1,0,1,0,1])",
        "maxSubarrays(nums = [1, 1, 1])",
        "maxSubarrays(nums = [5, 4, 0, 3, 1, 6, 2])",
        "maxSubarrays(nums = [0, 1, 1, 1, 0])",
        "maxSubarrays(nums = [1,0,1,1,1,1])",
        "maxSubarrays(nums = [1,0,1,1,1,1,0,0,1])",
        "maxSubarrays(nums = [2, 3, 1, 4, 5, 6, 2, 3, 4, 2, 4])"
    ],
    "sample_401": [
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 1, 2, 6, 7, 5, 1], m = 3, k = 3)",
        "maxSum(nums = [1, 4, 2, 1, 3], m = 2, k = 3)",
        "maxSum(nums = [10, 2, -10, 5, 20], m = 2, k = 3)",
        "maxSum(nums = [1,2,1,2,6,7,5,1], m = 4, k = 3)",
        "maxSum(nums = [1,2,3,4], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8], m = 4, k = 4)",
        "maxSum(nums = [5, 2, 1, 9, 10], m = 4, k = 2)"
    ],
    "sample_400": [
        "maxSum(A = [1, 4, 2, 10, 2, 3, 1, 0, 20], m = 4, k = 3)",
        "maxSum(A = [4, 2, 2, 5, 1, 5, 8], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5, 10], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4], m = 2, k = 2)",
        "maxSum(A = [2, 3, 4, 5, 1], m = 2, k = 3)",
        "maxSum(A = [2, 4, 6, 2, 5, 1, 7, 8, 3, 10], m = 4, k = 3)",
        "maxSum(A = [1, 3, 2, 4, 3, 2, 1, 1], m = 3, k = 3)",
        "maxSum(A = [2, 1, 5, 7, 4, 3, 1, 2, 3, 7, 2], m = 3, k = 2)",
        "maxSum(A = [5, 5, 1, 4, 2, 5, 4, 2, 4, 5], m = 3, k = 3)"
    ],
    "sample_363": [
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [1, 1, 2, 2, 3])",
        "isGood(nums = [1, 1, 1, 2, 2])",
        "isGood(nums = [1, 2, 1, 1, 3])",
        "isGood(nums = [2, 2, 2, 2, 3])",
        "isGood(nums = [1, 2, 2, 4, 2])",
        "isGood(nums = [2, 3, 1, 2, 2])",
        "isGood(nums = [5, 5, 2, 4, 4])",
        "isGood(nums = [2, 3, 4, 3, 5, 1, 2])"
    ],
    "sample_374": [
        "minimumSeconds(nums=[2, 2, 2, 2, 2, 2])",
        "minimumSeconds(nums = [3, 2, 2, 3, 1, 2, 2, 3, 2])",
        "minimumSeconds(nums=[12, 24, 8, 32])",
        "minimumSeconds(nums = [1,2,3,1,3,5])",
        "minimumSeconds(nums = [1, 2, 4, 8, 3, 5, 6, 7, 9, 10])",
        "minimumSeconds(nums = [43,21,46,21,41,46,46])",
        "minimumSeconds(nums = [3,2,2,3,4,3,2,1,2,2,3,2,1,0])",
        "minimumSeconds(nums = [3, 2, 1, 1, 3, 3, 2, 2, 2, 2, 3])",
        "minimumSeconds(nums = [5, 3, 9, 6, 4, 1, 10, 2, 7, 8, 11])",
        "minimumSeconds(nums = [6, 8, 10, 12, 13, 14, 16, 18, 20, 22, 24, 26, 28, 29, 30, 31, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60])"
    ],
    "sample_376": [
        "minimumSeconds(nums = [1, 3, 1, 4, 2, 3, 5, 4])",
        "minimumSeconds(nums = [1,2,3])",
        "minimumSeconds(nums = [6, 4, 1, 3, 0])",
        "minimumSeconds(nums = [3, 3, 3, 3])",
        "minimumSeconds(nums = [5, 2, 10, 3])",
        "minimumSeconds(nums = [1, 2, 3, 4, 3, 4, 5, 6])",
        "minimumSeconds(nums = [0, 1, 3, 4, 7])",
        "minimumSeconds(nums = [3,2,2,1,3,2,1])",
        "minimumSeconds(nums = [2,3,5,1,6,4,1,4,1])",
        "minimumSeconds(nums = [0, 2, 5, 9, 11, 13, 16])"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [3,1,2,10,1,1,3])",
        "minLengthAfterRemovals(nums = [1, 3, 1, 3, 1, 1])",
        "minLengthAfterRemovals(nums = [3, 2, 3, 3, 2, 1])",
        "minLengthAfterRemovals(nums = [2, 1, 3, 4, 5, 6])",
        "minLengthAfterRemovals(nums = [4, 3, 2, 2, 2, 2, 3, 4, 2])",
        "minLengthAfterRemovals(nums = [1,1,1,2,2,2])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 4, 1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [2, 1, 3, 2, 3, 2, 2, 3])"
    ],
    "sample_399": [
        "maxSum(nums = [1,2,1,2,6,7,5,1], m = 4, k = 3)",
        "maxSum(nums = [1,2,1,2,6,7,5,1], m = 2, k = 3)",
        "maxSum(nums = [1,2,1,2,6,7,5,1], m = 3, k = 3)",
        "maxSum(nums = [1,2,1,2,6,7,5,1], m = 3, k = 3)",
        "maxSum(nums = [1,2,1,2,6,7,5,1], m = 3, k = 3)",
        "maxSum(nums = [4,3,5,4,3,3,6,7], m = 4, k = 3)",
        "maxSum(nums = [1, 0, 1, 2, 0, 1, 2], m = 2, k = 3)",
        "maxSum(nums = [9,1,2,4,2,2,2], m = 4, k = 2)",
        "maxSum(nums = [1,2,3,2,3,4,5,6,7], m = 3, k = 2)",
        "maxSum(nums = [1,3,3,7,2,2,1], m = 4, k = 3)"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2, 1, 2, 6, 7, 5, 1], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1,2,1,2,6,7,5,1], m = 3, k = 2)",
        "maxSum(nums = [2, 4, 2, 6, 2, 5, 1], m = 2, k = 4)",
        "maxSum(nums = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4], m = 2, k = 4)",
        "maxSum(nums = [1, 2, 3, 4, 1, 2, 1, 2, 3], m = 3, k = 4)",
        "maxSum(nums = [1,1,1,1,1,1,1,1], m = 2, k = 4)",
        "maxSum(nums=[1, 2, 3, 4, 3, 2, 1], m=3, k=2)",
        "maxSum(nums = [3,2,1,2,4,1,2], m = 2, k = 3)",
        "maxSum(nums = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5], m = 3, k = 4)"
    ],
    "sample_364": [
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums=[1,2,3,4])",
        "isGood(nums=[2, 3, 1])",
        "isGood(nums = [5, 4, 1, 3, 2])",
        "isGood(nums = [3, 6, 2, 1, 7, 9])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1])",
        "minLengthAfterRemovals(nums = [2, 2, 3, 7, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 1, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 3, 4])",
        "minLengthAfterRemovals(nums = [1,1,3,4,5,6,7,8])",
        "minLengthAfterRemovals(nums = [3, 2, 1, 4, 5, 6, 7])"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"banana\", \"apple\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"pineapple\"], x = \"apple\")",
        "findWordsContaining(words = [\"hello\", \"goodbye\"], x = \"e\")",
        "findWordsContaining(words = [\"one\", \"two\", \"three\"], x = \"e\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"coconut\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"pear\", \"peach\"], x = \"pe\")",
        "findWordsContaining(words = [\"ab\", \"cd\", \"ef\", \"mn\"], x = \"m\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"kiwi\", \"melon\", \"tomato\"], x = \"a\")",
        "findWordsContaining(words = [\"book\", \"flow\", \"wall\"], x = \"w\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 5, 8, 9, 10, 17, 17, 20])",
        "minimumCoins(prices = [1, 5, 8, 9, 10, 17, 17, 20])",
        "minimumCoins(prices = [1, 5, 8, 9, 10, 17, 17, 20])",
        "minimumCoins(prices = [1, 5, 8, 9, 10, 17, 17, 20, 24, 30])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [2, 4, 1])",
        "minimumCoins(prices = [4, 2, 1])",
        "minimumCoins(prices = [1, 3, 5, 8])",
        "minimumCoins(prices = [2, 3, 5, 1, 100])",
        "minimumCoins(prices = [2, 5, 8, 10, 20])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"10101\")",
        "minimumBeautifulSubstrings(s = \"10101\")",
        "minimumBeautifulSubstrings(s = \"10101\")",
        "minimumBeautifulSubstrings(s = \"a1b01c2\")",
        "minimumBeautifulSubstrings(s = \"11101\")",
        "minimumBeautifulSubstrings(s = \"bbaacc\")",
        "minimumBeautifulSubstrings(s = \"11101\")",
        "minimumBeautifulSubstrings(s = \"yxyxyx\")",
        "minimumBeautifulSubstrings(s = \"ymymymm\")",
        "minimumBeautifulSubstrings(s = \"4325444532\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"ab\", s2 = \"aa\")",
        "canBeEqual(s1 = \"aabb\", s2 = \"bbaa\")",
        "canBeEqual(s1 = \"aaaa\", s2 = \"bbbb\")",
        "canBeEqual(s1 = \"a\", s2 = \"b\")",
        "canBeEqual(s1 = \"banana\", s2 = \"nanna\")",
        "canBeEqual(s1 = \"12\", s2 = \"21\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"ghij\")",
        "canBeEqual(s1 = \"aac\", s2 = \"abc\")",
        "canBeEqual(s1 = \"book\", s2 = \"back\")",
        "canBeEqual(s1 = \"water\", s2 = \"wate\")"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"bc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"adobecodebanc\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"ba\", str2 = \"nab\")",
        "canMakeSubsequence(str1 = \"acb\", str2 = \"abac\")",
        "canMakeSubsequence(str1 = \"geeks\", str2 = \"ksgeea\")",
        "canMakeSubsequence(str1 = \"aabbcc\", str2 = \"aa\")",
        "canMakeSubsequence(str1 = \"cabz\", str2 = \"xzba\")"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [3,3,3,3,5,5,5,2,2,7])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8])",
        "minLengthAfterRemovals(nums = [1, 3, 1, 2, 1, 3, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [6, 8, 10, 15, 16, 18])",
        "minLengthAfterRemovals(nums = [5, 7, 3, 2, 3, 4, 7, 3, 1, 4, 7, 1, 6, 7])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"aba\", s2 = \"baa\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcde\")",
        "canBeEqual(s1 = \"abba\", s2 = \"baab\")",
        "canBeEqual(s1 = \"banana\", s2 = \"anna\")",
        "canBeEqual(s1 = \"amazon\", s2 = \"amzon\")",
        "canBeEqual(s1 = \"asa\", s2 = \"asaa\")",
        "canBeEqual(s1 = \"abccba\", s2 = \"cbaabac\")",
        "canBeEqual(s1 = \"fxxk\", s2 = \"ffxxk\")",
        "canBeEqual(s1 = \"fxxk\", s2 = \"kyxx\")",
        "canBeEqual(s1 = \"teea\", s2 = \"teeB\")"
    ],
    "sample_382": [
        "countPairs(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5], target = 8)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 9)",
        "countPairs(nums = [1,2,3,4,5], target = 9)",
        "countPairs(nums = [1, 1, 2, 2, 3, 3], target = 5)",
        "countPairs(nums = [2, 2, 2], target = 5)",
        "countPairs(nums = [3, 5, 7, 2, 4, 6], target = 10)",
        "countPairs(nums = [1, 3, 4, 5, 7], target = 10)",
        "countPairs(nums = [1, 3, 4, 2, 5], target = 5)",
        "countPairs(nums = [1, 5, 3, 2, 3], target = 7)",
        "countPairs(nums = [1, 4, 2, 2, 3, 3, 4], target = 5)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"ace\", s2 = \"abcde\")",
        "canMakeSubsequence(s1 = \"axc\", s2 = \"ahbgdc\")",
        "canMakeSubsequence(s1 = \"abcde\", s2 = \"ace\")",
        "canMakeSubsequence(s1 = \"az\", s2 = \"zz\")",
        "canMakeSubsequence(s1 = \"azcbobobegghakl\", s2 = \"abcdef\")",
        "canMakeSubsequence(s1 = \"azcbobobegghakl\", s2 = \"ab\")",
        "canMakeSubsequence(s1 = \"super\", s2 = \"sequence\")",
        "canMakeSubsequence(s1 = \"aca\", s2 = \"ahbgdc\")",
        "canMakeSubsequence(s1 = \"abcdefg\", s2 = \"ace\")",
        "canMakeSubsequence(s1 = \"abca\", s2 = \"bcad\")"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"next\", \"next\", \"prev\", \"prev\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"next\", \"3\", \"next\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"4\", \"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"next\", \"next\", \"next\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"3\", \"2\", \"prev\", \"prev\", \"6\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"first\", \"1\", \"next\", \"2\", \"next\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"7\", \"prev\", \"3\", \"prev\", \"9\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words=[\"prev\", \"5\", \"prev\", \"2\", \"prev\", \"prev\", \"4\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"7\", \"8\", \"3\", \"prev\", \"10\", \"prev\", \"prev\", \"prev\", \"2\"])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[1, 2], [2, 1]], k = 2)",
        "countPairs(coordinates = [[0, 1], [1, 0], [1, 2], [2, 1]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [1, 0], [0, 1]], k = 2)",
        "countPairs(coordinates = [[0, 0], [0, 1]], k = 0)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [2, 0]], k = 2)",
        "countPairs(coordinates = [[-2, -2], [2, 2], [3, 3]], k = 1)",
        "countPairs(coordinates = [[1,1], [2,2], [1,2]], k = 3)",
        "countPairs(coordinates = [[1, 2], [2, 1], [3, 4]], k = 0)",
        "countPairs(coordinates, 2)",
        "countPairs(coordinates = coordinates, k = 1)"
    ],
    "sample_451": [
        "minChanges(s = \"aabbcc\")",
        "minChanges(s = \"aabbcc\")",
        "minChanges(s = \"abccba\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"cabca\")",
        "minChanges(s = \"xxyyzz\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abbac\")",
        "minChanges(s = \"aabaab!aa_\")",
        "minChanges(s = \"aegikm\")"
    ],
    "sample_461": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 12, limit = 4)",
        "distributeCandies(n = 15, limit = 3)",
        "distributeCandies(n = 30, limit = 20)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"banana\", s2 = \"ananab\")",
        "canBeEqual(s1 = \"abba\", s2 = \"abba\")",
        "canBeEqual(s1 = \"banana\", s2 = \"anna\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcad\")",
        "canBeEqual(s1 = \"abdca\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"aabbcc\", s2 = \"abcabc\")",
        "canBeEqual(s1 = \"bee\", s2 = \"be\")",
        "canBeEqual(s1 = \"bcad\", s2 = \"abc\")",
        "canBeEqual(s1 = \"zzzz\", s2 = \"zzzza\")"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 1, limit = 1)",
        "distributeCandies(n = 1, limit = 2)",
        "distributeCandies(n = 20, limit = 3)",
        "distributeCandies(n=5, limit=2)",
        "distributeCandies(n=6, limit=4)"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 100)",
        "accountBalanceAfterPurchase(p = 55)",
        "accountBalanceAfterPurchase(p = 20)",
        "accountBalanceAfterPurchase(p = 20)",
        "accountBalanceAfterPurchase(p = 9)",
        "accountBalanceAfterPurchase(p = 23)",
        "accountBalanceAfterPurchase(p = 165)",
        "accountBalanceAfterPurchase(p = 49)",
        "accountBalanceAfterPurchase(p = 999)",
        "accountBalanceAfterPurchase(p = 244)"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1,2,3,4,5,6])",
        "sumCounts(nums = [1, 1, 2, 3, 3, 3])",
        "sumCounts(nums = [3, 3, 3])",
        "sumCounts(nums = [1,2,2,3,3,3,4,4,4,4])",
        "sumCounts(nums = [1,1,2,2,3,3,4,4])",
        "sumCounts(nums = [1, 2, 4, 5, 4, 6])",
        "sumCounts(nums = [5, 6, 8, 8, 9, 9])",
        "sumCounts(nums = [2, 5, 6, 4, 1, 7, 9, 8])"
    ],
    "sample_378": [
        "minimumSeconds(A = [3, 2, 1])",
        "minimumSeconds(A = [0, 1, 2, 3, 0])",
        "minimumSeconds(A = [0,1,1,2])",
        "minimumSeconds(A = [3,4,2,1,3,4,3,2,4,2])",
        "minimumSeconds(A = [3, 2, 3, 2, 3])",
        "minimumSeconds(A = [1, 2, 3, 4, 5, 10, 11, 12, 13, 14, 15])",
        "minimumSeconds(A = [10,12,10,11,10,10,10])",
        "minimumSeconds(A = [4,4,4,3,3,2,1,0])",
        "minimumSeconds(A = [5, 9, 15, 17, 16])",
        "minimumSeconds(A = [5,3,6,2,1,10,8])"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"acb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"axc\")",
        "canMakeSubsequence(str1 = \"abd\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abd\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"z\")",
        "canMakeSubsequence(str1=\"abc\", str2=\"zab\")",
        "canMakeSubsequence(str1 = \"xyz\", str2 = \"xzzxz\")",
        "canMakeSubsequence(str1 = \"helloworld\", str2 = \"apple\")"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 3, 2])",
        "minimumRightShifts(nums = [1, 3, 2])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [2, 1, 3])",
        "minimumRightShifts(nums = [1, 2, 4, 3, 1, 2, 3])",
        "minimumRightShifts(nums = [2, 3, 1, 5, 4])",
        "minimumRightShifts(nums = [5, 7, 2, 3, 1, 4])",
        "minimumRightShifts(nums = [7, 3, 5, 4, 2, 6, 1])",
        "minimumRightShifts(nums=[1, 1, 1, 0, 0, 0, 0, 0])"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1,2,3], l = 1, r = 1)",
        "countSubMultisets(nums = [1,1,1,1], l = 0, r = 1)",
        "countSubMultisets(nums = [1,1,1], l = 2, r = 3)",
        "countSubMultisets(nums = [0,0,0,0], l = 0, r = 1)",
        "countSubMultisets(nums = [1,2,2,1,2], l = 2, r = 4)",
        "countSubMultisets(nums = [1,2,3,4,5], l = 3, r = 5)",
        "countSubMultisets(nums = [1,1,1,1,1,1,1,1,1,1], l = 3, r = 9)",
        "countSubMultisets(nums = [1,0,3,0,5], l = 2, r = 6)",
        "countSubMultisets(nums = [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0], l = 0, r = 0)",
        "countSubMultisets(nums=[5,5,5,4], l = 0, r = 6)"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 5, 8, 9, 10, 17, 17, 20])",
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 4, 5])",
        "minimumCoins(prices = [1, 3, 2, 5])",
        "minimumCoins(prices = [3, 1, 4, 5])",
        "minimumCoins(prices = [3, 5, 10, 7])",
        "minimumCoins(prices = [1, 5, 10, 20, 25, 30, 40, 50, 55, 60])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins(prices = [1, 5, 8, 9, 10, 17])",
        "minimumCoins(prices = [1, 5, 8, 9])",
        "minimumCoins(prices = [1, 4, 5, 6])",
        "minimumCoins(prices = [1, 5, 11, 50, 100, 200])",
        "minimumCoins(prices = [2, 3, 5, 6, 8, 9])",
        "minimumCoins(prices = [1, 5, 8, 10, 20])",
        "minimumCoins(prices = [1, 2, 4, 3, 3, 4])",
        "minimumCoins(prices = [1, 2, 5, 10, 12, 20, 25, 50])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"next\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"next\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"3\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"next\", \"next\", \"next\", \"prev\", \"next\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"5\", \"prev\", \"10\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"prev\", \"2\", \"prev\", \"1\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words=[\"prev\", \"prev\", \"1\", \"2\", \"next\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"5\", \"prev\", \"4\", \"prev\", \"3\", \"4\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"5\", \"4\", \"next\", \"3\", \"2\", \"1\", \"next\", \"2\"])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 1, 2, 2, 3])",
        "minOperations(nums = [2, 2, 2, 3, 3])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1])",
        "minOperations(nums = [3, 3, 6, 1, 3])",
        "minOperations(nums = [1, 1, 1, 3])",
        "minOperations(nums = [1,2,1,2,1,3])",
        "minOperations(nums = [1, 1, 2, 2, 3])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minOperations(nums = [3,3,3,3,3,4,5,5,5,5,5,5,5,5,5])",
        "minOperations(nums = [5, 2, 3, 2, 3, 2, 2])"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"pp\", \"pq\", \"pr\", \"px\", \"py\", \"pz\"])",
        "lastVisitedIntegers(words = [\"push\", \"pop\", \"push\", \"push\", \"pop\", \"push\", \"push\", \"push\"])",
        "lastVisitedIntegers(words = ['p0', 'p1', 'p2', 'p1', 'p0', 'p0', 'p1', 'p2', 'p0'])",
        "lastVisitedIntegers(words = [\"pp\", \"pq\", \"px\", \"pz\", \"py\", \"pa\"])",
        "lastVisitedIntegers(words = [\"pop\", \"one\", \"two\", \"three\", \"four\", \"pleft\", \"pright\"])",
        "lastVisitedIntegers(words = [\"p2\", \"p1\", \"p-1\", \"p100\", \"p-100\", \"p99\", \"p0\"])",
        "lastVisitedIntegers(words = [\"p1\", \"p2\", \"p3\", \"r1\", \"r1\", \"p2\", \"r1\", \"p2\", \"p1\", \"p1\"])",
        "lastVisitedIntegers(words = [\"pu1\", \"p1u\", \"p1u1\", \"p1u2\", \"p2u1\", \"p2u2\"])",
        "lastVisitedIntegers(words = [\"pe\", \"e\", \"p\", \"e\", \"e\", \"pe\", \"p\", \"e\", \"p\"])",
        "lastVisitedIntegers(words = [\"p-2\", \"p1\", \"p+3\", \"p-1\", \"p-2\", \"p-2\", \"p1\", \"p+1\", \"p-1\", \"p+3\", \"p-1\"])"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1,3,1,4,2,3,5,4])",
        "minimumSeconds(nums = [3, 1, 2, 4, 3])",
        "minimumSeconds(nums = [5, 3, 2, 4, 6])",
        "minimumSeconds(nums = [10, 90, 100, 110, 120])",
        "minimumSeconds(nums = [90, 94, 97, 100, 103])",
        "minimumSeconds(nums = [3, 2, 7, 8, 2, 3, 1, 2, 4, 9, 0])",
        "minimumSeconds(nums = [2, 1, 3, 3, 3, 2])",
        "minimumSeconds(nums = [5, 7, 1, 2, 5])",
        "minimumSeconds(nums
        "minimumSeconds(nums = [1,1,2,3,4,1,2,3,4,5,1,2,3,4,5,6])"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"pear\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"orange\", \"apple\", \"pineapple\"], x = \"apple\")",
        "findWordsContaining(words = [\"dog\", \"cat\", \"apple\", \"bat\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"apple\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"Bla\", \"bla\", \"bla\"], x = \"bla\")",
        "findWordsContaining(words = [\"good\", \"bad\", \"badger\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"are\", \"you\", \"man\"], x = \"me\")",
        "findWordsContaining(words = [\"bi\", \"ban\", \"nana\", \"a\"], x = \"a\")",
        "findWordsContaining(words = [\"book\", \"by\", \"not\", \"good\"], x = \"o\")",
        "findWordsContaining(words = [\"abc\", \"xyz\", \"python\", \"lemon\"], x = \"y\")"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [5, 4, 0, 3, 1, 6, 2])",
        "maxSubarrays(nums = [5, 4, 0, 3, 1, 6, 2])",
        "maxSubarrays(nums = [1,0,1,1,1])",
        "maxSubarrays(nums = [8, 4, 2, 1, 32, 5, 64, 3, 16])",
        "maxSubarrays(nums = [3, 4, 5, 6, 2])",
        "maxSubarrays(nums = [0,1,0,1,0,1,1,1,1])",
        "maxSubarrays(nums = [8,4,2,10,2,7,4,10,2,7])"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"3\", \"1\", \"prev\", \"5\", \"9\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"4\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"0\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"1\", \"prev\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"2\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"next\", \"2\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"3\", \"1\", \"prev\", \"prev\", \"5\", \"1\", \"7\"])",
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"4\", \"5\", \"7\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"5\", \"3\", \"1\", \"2\", \"prev\", \"prev\", \"prev\", \"2\", \"prev\", \"1\"])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 1, 2, 2, 3], target = 4)",
        "countPairs(nums = [1, 3, 5], target = 4)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 8)",
        "countPairs(nums = [1, -1, 0, -1, 1], target = -1)",
        "countPairs(nums = [1, 1, 2, 2, 2, 3, 4], target = 5)",
        "countPairs(nums = [3, 5, 2, 4, 6], target = 9)",
        "countPairs(nums = [2, 3, 6, 6], target = 8)",
        "countPairs(nums = [1, 4, 2, 3, 1, 1], target = 3)",
        "countPairs(nums = [3, 2, 3, 9, 4, 3], target = 8)",
        "countPairs(nums = [3, 2, 1, 4, 6, 1], target = 5)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"aba\", s2 = \"baa\")",
        "canBeEqual(s1 = \"aba\", s2 = \"baa\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"aabb\", s2 = \"bbaa\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcad\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"ace\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dabc\")",
        "canBeEqual(s1 = \"aaaa\", s2 = \"aaaa\")",
        "canBeEqual(s1 = \"mn\", s2 = \"no\")",
        "canBeEqual(s1 = \"saeed\", s2 = \"ssaeed\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"next\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"next\", \"prev\", \"1\", \"next\", \"prev\", \"6\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"prev\", \"prev\", \"4\"])",
        "lastVisitedIntegers(words = [\"next\", \"3\", \"next\", \"2\", \"next\", \"1\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"3\", \"1\", \"prev\", \"prev\", \"1\", \"5\", \"prev\", \"4\", \"prev\"])",
        "lastVisitedIntegers(words = [\"last\", \"prev\", \"next\", \"prev\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"prev\", \"next\", \"next\", \"next\", \"next\", \"next\", \"prev\"])"
    ],
    "sample_464": [
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 2, limit = 3)",
        "distributeCandies(n = 12, limit = 3)",
        "distributeCandies(n = 20, limit = 4)",
        "distributeCandies(n=20, limit=10)",
        "distributeCandies(n=6, limit=3)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [4, 3, 7, 8])",
        "minimumRightShifts(nums = [1, 2, 4, 1, 2, 3, 4])",
        "minimumRightShifts(nums = [0,1,2,3,4])",
        "minimumRightShifts(nums = [1,2,3,4,3,4,5,2,1])",
        "minimumRightShifts(nums = [0,1,2,3,4,5,6,7])",
        "minimumRightShifts(nums = [4, 1, 5, 9, 2, 6, 5, 3, 5])",
        "minimumRightShifts(nums = [1, 0, 6, 5, 4, 3, 2])",
        "minimumRightShifts(nums = [3,4,7,1,2,9,8,5,6])",
        "minimumRightShifts(nums = [9, 3, 2, 1, 3, 4])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\"], x = \"na\")",
        "findWordsContaining(words = [\"apple\", \"pear\", \"orange\"], x = \"e\")",
        "findWordsContaining(words = [\"banana\", \"orange\", \"pear\"], x = \"a\")",
        "findWordsContaining(words = [\"the\", \"quick\", \"brown\", \"fox\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"tortoise\"], x = \"a\")",
        "findWordsContaining(words = [\"bear\", \"fox\", \"zebra\", \"monkey\"], x = \"ea\")",
        "findWordsContaining(words = [\"aba\", \"xzy\", \"bla\"], x = \"b\")",
        "findWordsContaining(words = [\"man\", \"king\", \"in\", \"a\", \"boat\"], x = \"a\")"
    ],
    "sample_398": [
        "maxSum(nums = [1,2,1,2,6,7,5,1], m = 4, k = 3)",
        "maxSum(nums = [1, 2, 1, 2, 6, 7, 5, 1], m = 4, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3], m = 2, k = 1)",
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 3)",
        "maxSum(nums = [100, 200, 300, 400], m = 2, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 5, k = 3)",
        "maxSum(nums=[1,2,3,2,4,5,6], m=3, k=2)",
        "maxSum(nums=[1, 11, 2, 22, 3, 33], m=2, k=3)"
    ],
    "sample_424": [
        "minOperations(nums = [2,2,3,3,3])",
        "minOperations(nums = [1,2,2,3,3,3])",
        "minOperations(nums = [3,2,2,3,3])",
        "minOperations(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "minOperations(nums = [2,2,3,2])",
        "minOperations(nums = [1,2,1])",
        "minOperations(nums = [1,1,2,2,2,2])",
        "minOperations(nums = [2,2,2,2,3,3])",
        "minOperations(nums = [5, 2, 3, 7])",
        "minOperations(nums = [4,4,4,4,4,1,4,4,4])"
    ],
    "sample_417": [
        "minOperations(nums = [1,1,4,2,3], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 4)",
        "minOperations(nums = [3,4,1,2], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1,1,1,1], k = 2)",
        "minOperations(nums = [2, 1, 5, 6, 2, 3], k = 5)",
        "minOperations(nums = [1, 3, 1, 4, 2, 3, 5, 4], k = 4)",
        "minOperations(nums = [1,2,20,10,10], k = 19)",
        "minOperations(nums = [1,1,3,6,4], k = 4)",
        "minOperations(nums = [1, 3, 1, 2, 1, 4, 2, 1, 3], k = 4)"
    ],
    "sample_371": [
        "sortVowels(s = \"hello\")",
        "sortVowels(s = 'Hello World!')",
        "sortVowels(s = \"Hello World\")",
        "sortVowels(s = \"LamPh\")",
        "sortVowels(s = \"Hello World\")",
        "sortVowels(s = 'Hyeol')",
        "sortVowels(s='Bowie')",
        "sortVowels(s = \"HiyYmy\")",
        "sortVowels(s = \"gaaei\")",
        "sortVowels(s = 'unapicoDuinoi')"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 2, limit = 3)",
        "distributeCandies(n = 2, limit = 2)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 1, limit = 3)",
        "distributeCandies(n = 4, limit = 100)",
        "distributeCandies(n=100, limit=10)"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [1, 1, 1, 1, 1])",
        "sumCounts(nums = [2, 4, 6, 8, 10])",
        "sumCounts(nums = [2, 3, 4, 5, 6, 7, 8, 9])",
        "sumCounts(nums=[3, 1, 4, 1, 5])"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1,0,1,1,1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 1, 0])",
        "maxSubarrays(nums = [0, 0, 0, 0, 0, 0, 0, 0])",
        "maxSubarrays(nums = [10, 1, 2, 4, 4, 2, 1])",
        "maxSubarrays(nums = [1,0,1,1,1,1,0,1])",
        "maxSubarrays(nums = [1, 2, 1, 3, 4, 1])",
        "maxSubarrays(nums=[0, 0, 0, 1, 0, 0])",
        "maxSubarrays(nums = [3, 2, 1, 2, 3, 1, 3, 2, 3])",
        "maxSubarrays(nums = [5, 1, 3, 5, 2, 2, 3, 1, 2, 3, 5, 5])"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "sumCounts(nums = [1, 1, 1, 2, 2])",
        "sumCounts(nums = [1, 1, 2, 2, 2, 3])",
        "sumCounts(nums = [1,2,3,4])",
        "sumCounts(nums = [1,2,2,3,3,4])",
        "sumCounts(nums = [3,4,5,6,7,8,9,10,11,12,13])",
        "sumCounts(nums = [2, 3, 5, 2, 3, 4, 5, 5, 2, 2])"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"ab\", s2 = \"aa\")",
        "canBeEqual(s1 = \"ab\", s2 = \"aa\")",
        "canBeEqual(s1 = \"aabbcc\", s2 = \"aabbdd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bacd\")",
        "canBeEqual(s1 = \"aabbcc\", s2 = \"aabbbcc\")",
        "canBeEqual(s1 = \"tree\", s2 = \"flower\")",
        "canBeEqual(s1 = \"aa\", s2 = \"aa\")",
        "canBeEqual(s1 = \"apple\", s2 = \"app\")",
        "canBeEqual(s1 = \"aaba\", s2 = \"aabaa\")",
        "canBeEqual(s1 = \"aba\", s2 = \"bca\")"
    ],
    "sample_380": [
        "countPairs(nums = [1, 1, 2, 2, 3], target = 4)",
        "countPairs(nums = [1,1,2,2,3], target = 4)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 9)",
        "countPairs(nums = [1,2,3,4,5], target = 5)",
        "countPairs(nums = [1, 3, 5, 7, 9], target = 12)",
        "countPairs(nums=[1,2,3,4,5,6,7], target=10)",
        "countPairs(nums = [2, 7, 11, 15], target = 22)",
        "countPairs(nums = [1, 5, 11, 5], target = 10)",
        "countPairs(nums = [1,3,2,4], target = 4)",
        "countPairs(nums = [1,5,7,9], target = 11)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [2, 2, 2, 2])",
        "sumCounts(nums = [1, 1, 2, 3, 5, 8])",
        "sumCounts(nums = [3, 3, 3])",
        "sumCounts(nums = [1, 2, 3, 3, 3])",
        "sumCounts(nums = [1, 3, 5, 10])",
        "sumCounts(nums = [4, 2, 1, 5])",
        "sumCounts(nums = [3,3,3,2,5])",
        "sumCounts(nums = [5, 5, 1, 7, 7])"
    ],
    "sample_368": [
        "sortVowels(s = \"MPHly\")",
        "sortVowels(s = 'man')",
        "sortVowels(s = \"YommH\")",
        "sortVowels(s = \"skYLpH\")",
        "sortVowels(s = 'eLpympH')",
        "sortVowels(s = 'hmPhl')",
        "sortVowels(s = 'hEgWp')",
        "sortVowels(s = \"cAefaE\")",
        "sortVowels(s = 'Gay mate, my vowels are now sorted!')",
        "sortVowels(s='cat')"
    ],
    "sample_462": [
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 10, limit = 4)",
        "distributeCandies(n = 10, limit = 4)",
        "distributeCandies(n = 2, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 5, limit = 3)"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 5, 11, 50, 100, 200])",
        "minimumCoins(prices = [1, 4, 6, 2])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 7])",
        "minimumCoins(prices = [3, 4, 5, 6, 7])",
        "minimumCoins(prices = [2, 5, 7, 1, 3, 9])",
        "minimumCoins(prices = [3, 1, 4, 2, 8])",
        "minimumCoins(prices = [1, 5, 3, 1, 4])",
        "minimumCoins(prices = [1, 2, 4, 1, 3, 2, 2, 3])",
        "minimumCoins(prices = [1, 2, 5, 20, 50, 100, 50, 20, 1])",
        "minimumCoins(prices = [3, 5, 2, 6, 7, 2, 3])"
    ],
    "sample_426": [
        "minOperations(nums = [1,2,3,4,5,6])",
        "minOperations(nums = [3, 1, 2, 4, 3])",
        "minOperations(nums = [1, 2, 1, 1, 1])",
        "minOperations(nums=[1, 2, 3, 4, 5, 6, 7])",
        "minOperations(nums = [5, 6, 7])",
        "minOperations(nums=[1, 2, 3, 4, 5])",
        "minOperations(nums = [4, 1, 2, 1, 2, 1])",
        "minOperations(nums = [3,1,2,1,2])",
        "minOperations(nums=[1,2,3,2,2,2,2,1,3])",
        "minOperations(nums=[1,2,4,6,9,9,9])"
    ],
    "sample_423": [
        "minOperations(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [4,4,4,4])",
        "minOperations(nums = [3, 3, 2, 2, 1])",
        "minOperations(nums = [3,2,2,1,1])",
        "minOperations(nums = [3, 3, 2, 2, 2, 2, 2])",
        "minOperations(nums = [3, 3, 6, 6, 5, 5, 4, 4])",
        "minOperations(nums = [1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,",
        "minOperations(nums = [4, 2, 10, 1, 3, 2, 2, 2])",
        "minOperations(nums=[5, 10, 6, 9, 8, 7])"
    ],
    "sample_476": [
        "minimumCoins(prices = [1, 5, 11, 5])",
        "minimumCoins(prices = [1,5,8,9,10,17,17,20])",
        "minimumCoins(prices = [1,5,8,9,10,17,17,20])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1,3,2,5])",
        "minimumCoins(prices = [1, 5, 10, 15, 20, 25])",
        "minimumCoins(prices=[1,3,5,7])",
        "minimumCoins(prices=[1,5,11,50,100,200,1000])",
        "minimumCoins(prices = [3, 7, 4, 6, 2])",
        "minimumCoins(prices=[3,7,6,1,8,10,12,1,2,4,14,11,17,32])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [2, 2, 2, 2, 2])",
        "minimumRightShifts(nums = [0,1,2,3,4,5])",
        "minimumRightShifts(nums = [3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4])",
        "minimumRightShifts(nums=[3,8,9,7,6])",
        "minimumRightShifts(nums = [1, 2, 4, 1, 2, 4, 1])",
        "minimumRightShifts(nums = [3, 8, 1, 2, 9])",
        "minimumRightShifts(nums = [7, 3, 5, 4, 2, 6])",
        "minimumRightShifts(nums = [1, 4, 0, 10, 6, 2])",
        "minimumRightShifts(nums = [1,2,3,4,6,8,12,24,48])"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [3, 8, 9, 7, 6])",
        "minimumRightShifts(nums = [3, 8, 9, 7, 6])",
        "minimumRightShifts(nums = [4, 3, 7, 1, 2])",
        "minimumRightShifts(nums = [6, 2, 5, 4, 5, 1, 6])",
        "minimumRightShifts(nums = [2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [3, 8, 10, 11, 12, 14, 17, 18, 19])",
        "minimumRightShifts(nums=[1,3,4,2,5,6])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 10, 11, 12, 15])",
        "minimumRightShifts(nums = [4, 3, 7, 8, 6, 9, 11, 2, 10, 5, 0])",
        "minimumRightShifts(nums = [2, 8, 10, 12, 14, 16, 2, 8, 10, 12, 14, 16])"
    ]
}