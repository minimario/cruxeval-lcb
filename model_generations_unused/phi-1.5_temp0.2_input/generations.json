{
    "sample_48": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1,2,3,4,5,6,7,8,9])",
        "continuousSubarrays(a = [1,2,3,4,5,6,7,8,9])",
        "continuousSubarrays(a = [1,2,3,4,5,6,7,8,9])",
        "continuousSubarrays(a = [1,2,3,4,5,6,7,8,9,10])",
        "continuousSubarrays(a = [1,2,3,4,5,6,7,8,9,10])",
        "continuousSubarrays(a = [1,2,3,4,5,6,7,8,9,10])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "continuousSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])"
    ],
    "sample_8": [
        "colorTheArray(n = 5, queries = [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4]])",
        "colorTheArray(n = 5, queries = [[1, 0], [2, 1], [3, 0], [4, 1], [5, 0]])",
        "colorTheArray(n = 5, queries = [[1, 1], [1, 0], [0, 1], [0, 0], [1, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 0], [1, 1], [0, 0], [1, 0]])",
        "colorTheArray(n = 5, queries = [[1, 0], [2, 1], [3, 0], [4, 1]])"
    ],
    "sample_97": [
        "maximumJumps(nums = [1,2,3,4,5], target = 3)",
        "maximumJumps(nums = [1,2,3,4,5], target = 3)",
        "maximumJumps(nums = [1,2,3,4,5], target = 3)",
        "maximumJumps(nums = [1,2,3,4,5], target = 3)",
        "maximumJumps(nums = [1,2,3,4,5], target = 3)",
        "maximumJumps(nums = [1,2,3,4,5], target = 3)",
        "maximumJumps(nums = [2,3,1,1,4], target = 5)",
        "maximumJumps(nums = [1,2,3,4,5], target = 5)",
        "maximumJumps(nums = [1,2,3,4,5,6,7,8,9,10], target = 5)",
        "maximumJumps(nums = [1,2,3,4,5,6,7,8,9,10], target = 10)"
    ],
    "sample_22": [
        "minLength(\"abcd\")",
        "minLength(\"abcd\")",
        "minLength(\"abcd\")",
        "minLength(\"abcd\")",
        "minLength(\"abcd\")",
        "minLength(\"abcd\")",
        "minLength(\"AB\")",
        "minLength(\"AB\")",
        "minLength(\"ab\")",
        "minLength(\"ab\")"
    ],
    "sample_7": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 1]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]])",
        "colorTheArray(n = 5, queries = [[1,2],[2,3],[3,4],[4,5],[5,1]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2]])"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])",
        "colorTheArray(n = 5, queries = [[0, 0], [0, 1], [1, 0], [1, 1], [2, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3]])",
        "colorTheArray(n = 5, queries = [[0, 0], [0, 1], [1, 0], [1, 1], [2, 0]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 0], [1, 1], [0, 1], [1, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 0], [1, 2], [2, 1], [2, 3]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 0], [1, 1], [0, 1], [2, 0]])",
        "colorTheArray(n = 5, queries = [[1, 1], [1, 2], [2, 1], [2, 2]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation(nums = [1,2,3,4])",
        "semiOrderedPermutation(nums = [1,2,3,4])",
        "semiOrderedPermutation(nums = [1,2,3,4])",
        "semiOrderedPermutation(nums = [1,2,3,4,5])"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 3)"
    ],
    "sample_33": [
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"12345\")",
        "removeTrailingZeros(num = \"12345\")",
        "removeTrailingZeros(num = \"12345\")",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '12301')",
        "removeTrailingZeros(num = \"123\")"
    ],
    "sample_50": [
        "smallestString(s1 = \"ab\", s2 = \"ba\")",
        "smallestString(s1 = \"ab\", s2 = \"ba\")",
        "smallestString(s1 = \"ab\", s2 = \"ba\")",
        "smallestString(s1 = \"ab\", s2 = \"ba\")",
        "smallestString(s1 = \"a\", s2 = \"b\")",
        "smallestString(s1 = \"a\", s2 = \"b\")",
        "smallestString(s1 = \"ab\", s2 = \"ba\")",
        "smallestString(s1 = \"ab\", s2 = \"ba\")",
        "smallestString(s1 = \"ab\", s2 = \"ba\")",
        "smallestString(s1 = \"ab\", s2 = \"a\")"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 3)",
        "distanceTraveled(mainTank = 1, additionalTank = 3)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)"
    ],
    "sample_118": [
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(s1 = \"12345\", s2 = \"0\")"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"ab\")",
        "minimizedStringLength(\"abc\")",
        "minimizedStringLength(\"abc\")",
        "minimizedStringLength(s = \"abab\")",
        "minimizedStringLength(s1 = \"ba\", s2 = \"nana\")",
        "minimizedStringLength(s1 = \"ba\", s2 = \"nana\")",
        "minimizedStringLength(\"ab\")",
        "minimizedStringLength(\"abcd\")",
        "minimizedStringLength(\"abcd\")",
        "minimizedStringLength(\"abab\")"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 0, num2 = 0)",
        "makeTheIntegerZero(num1 = 0, num2 = 0)",
        "makeTheIntegerZero(num1 = 0, num2 = 0)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 0, num2 = 0)",
        "makeTheIntegerZero(num1 = 0, num2 = 0)",
        "makeTheIntegerZero(num1 = 0, num2 = 0)"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 0, additionalTank = 5)",
        "distanceTraveled(mainTank = 0, additionalTank = 3)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 0])"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abc\")"
    ],
    "sample_110": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], k = 3)",
        "checkArray(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [0, 1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], k = 2)"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 2, 0])",
        "doesValidArrayExist(derived = [0, 1, 2, 3])",
        "doesValidArrayExist(derived = [0, 1, 2, 0, 1, 2])",
        "doesValidArrayExist(derived = [0, 1, 2, 3, 0])"
    ],
    "sample_54": [
        "smallestString(s1 = \"abcd\", s2 = \"ab\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ab\", s2 = \"ba\")",
        "smallestString(s1 = \"ab\", s2 = \"ba\")",
        "smallestString(s1 = \"abc\", s2 = \"ab\")",
        "smallestString(s1 = \"abcd\", s2 = \"abcd\")",
        "smallestString(s1 = \"abc\", s2 = \"abd\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(A = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "continuousSubarrays(A = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "continuousSubarrays(A = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "continuousSubarrays(A = [1, 1, 1, 2, 2, 2, 3, 3, 3])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s1 = \"abcd\", s2 = \"dcba\")",
        "makeSmallestPalindrome(s1 = \"abcd\", s2 = \"dcba\")",
        "makeSmallestPalindrome(s1 = \"abcd\", s2 = \"dcba\")",
        "makeSmallestPalindrome(s1 = \"abcd\", s2 = \"dcba\")",
        "makeSmallestPalindrome(s1 = \"abcd\", s2 = \"dcba\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s1 = \"ab\", s2 = \"ba\")",
        "makeSmallestPalindrome(s1 = \"abcd\")",
        "makeSmallestPalindrome(s = \"ab\")"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_51": [
        "smallestString(s1 = \"ab\", s2 = \"cd\")",
        "smallestString(s1 = \"abc\", s2 = \"def\")",
        "smallestString(s1 = \"abc\", s2 = \"def\")",
        "smallestString(s1 = \"ab\", s2 = \"ba\")",
        "smallestString(s1 = \"ab\", s2 = \"ba\")",
        "smallestString(s1 = \"abcd\", s2 = \"ab\")",
        "smallestString(s1 = \"ab\", s2 = \"cba\")",
        "smallestString(s1 = \"ab\", s2 = \"cd\")",
        "smallestString(s1 = \"a\", s2 = \"b\")",
        "smallestString(s1 = \"a\", s2 = \"b\")"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 5)"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(A = [1,2,3,4,5,6,7,8,9,10])",
        "continuousSubarrays(A = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "continuousSubarrays(A = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    ],
    "sample_6": [
        "colorTheArray(n = 5, queries = [[1,1],[2,2],[3,3],[4,4],[5,5]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,2],[3,3],[4,4],[5,5]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,2],[3,3],[4,4],[5,5]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,2],[3,3],[4,4],[5,5]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,2],[2,3],[3,4],[4,0]])",
        "colorTheArray(n = 5, queries = [[1,1], [2,2], [3,3], [4,4]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,2],[3,3],[4,4],[4,4]])",
        "colorTheArray(n = 5, queries = [[1,1], [2,2], [3,3], [4,4], [5,5]])",
        "colorTheArray(n = 5, queries = [[1,2],[2,3],[3,4],[4,5],[5,1]])",
        "colorTheArray(n = 5, queries = [[0,0],[1,1],[2,2],[3,3],[4,4]])"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 0, b = 1)",
        "makeTheIntegerZero(a = 0, b = 1)",
        "makeTheIntegerZero(a = 0, b = 1)",
        "makeTheIntegerZero(a = 0, b = 1)",
        "makeTheIntegerZero(a = 0, b = 1)",
        "makeTheIntegerZero(a = 0, b = 3)",
        "makeTheIntegerZero(a = 5, b = 3)",
        "makeTheIntegerZero(a = 5, b = 3)",
        "makeTheIntegerZero(a = 5, b = 3)",
        "makeTheIntegerZero(a = 123, b = 456)"
    ],
    "sample_100": [
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 3)"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [5, 4, 3, 2, 1])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [1, 2, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [1, 2, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [1, 2, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [1, 2, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1, 2, 3], b = [1, 2, 3])",
        "maxNonDecreasingLength(a = [1, 2, 3], b = [1, 2, 3])",
        "maxNonDecreasingLength(a = [1, 2, 3], b = [1, 2, 3])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [2, 3, 4, 5])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,0,0,0,0,0,0,0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,0,1,0,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 0, 1, 1, 0, 0, 1])"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], threshold = 3)"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s1 = \"abcd\", s2 = \"abcd\")",
        "makeSmallestPalindrome(s1 = \"ab\", s2 = \"ba\")",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = \"ab\")"
    ],
    "sample_18": [
        "minLength(\"abcd\")",
        "minLength(\"abcd\")",
        "minLength(\"abcd\")",
        "minLength(\"abcd\")",
        "minLength(s = \"AB\")",
        "minLength(s = \"AB\")",
        "minLength(s = \"AB\")",
        "minLength(s = \"AB\")",
        "minLength(s = \"abcd\")",
        "minLength(s = \"AB\")"
    ],
    "sample_99": [
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 3)"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 0]])"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], x = 3)",
        "minCost(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], x = 3)",
        "minCost(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], x = 3)",
        "minCost(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], x = 3)",
        "minCost(A = [1, 2, 3, 4, 5], x = 2)",
        "minCost(A = [1, 2, 3, 4, 5], x = 2)",
        "minCost(A = [1, 2, 3, 4, 5], x = 2)",
        "minCost(A = [1, 2, 3, 4, 5], x = 2)",
        "minCost(A = [1, 2, 3, 4, 5, 6], x = 2)",
        "minCost(A = [3, 1, 4, 2, 5], x = 2)"
    ],
    "sample_98": [
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [1,2,3,4,5], target = 3)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countBeautifulPairs(nums = [2, 3, 4, 5, 6])"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"ab\")",
        "minimizedStringLength(s = \"ab\")",
        "minimizedStringLength(s = \"ab\")",
        "minimizedStringLength(s = \"ab\")",
        "minimizedStringLength(s = \"ab\")",
        "minimizedStringLength(s = \"ab\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(\"ab\")",
        "minimizedStringLength(s1 = \"ba\", s2 = \"nana\")",
        "minimizedStringLength(s1 = \"ab\", s2 = \"cd\")"
    ],
    "sample_41": [
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abacaba\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s1 = \"abcd\", s2 = \"ab\")"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 2, 3])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0, 1, 2, 3])",
        "doesValidArrayExist(derived = [0, 1, 2, 3])",
        "doesValidArrayExist(derived = [0, 1, 2, 3, 4])",
        "doesValidArrayExist(derived = [0, 1, 2, 3, 4])",
        "doesValidArrayExist(derived = [0, 1, 2, 3, 4])",
        "doesValidArrayExist(derived = [0, 1, 2, 3, 4])",
        "doesValidArrayExist(derived = [0, 1, 2])",
        "doesValidArrayExist(derived = [0, 1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1])"
    ],
    "sample_52": [
        "smallestString(s1 = \"ab\", s2 = \"cd\")",
        "smallestString(s1 = \"abc\", s2 = \"abcd\")",
        "smallestString(s1 = \"ab\", s2 = \"ba\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"abcd\", s2 = \"ab\")",
        "smallestString(s1 = \"abcd\", s2 = \"ab\")",
        "smallestString(s1 = \"abcd\", s2 = \"ab\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"abc\", s2 = \"def\")",
        "smallestString(s1 = \"ab\", s2 = \"bc\")"
    ],
    "sample_40": [
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abcd\")"
    ],
    "sample_38": [
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abacaba\")",
        "minimumCost(s = \"abacaba\")"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_53": [
        "smallestString(s1 = \"ab\", s2 = \"ba\")",
        "smallestString(s1 = \"abc\", s2 = \"abz\")",
        "smallestString(s1 = \"abc\", s2 = \"abz\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"abcd\")",
        "smallestString(s1 = \"abc\", s2 = \"ab\")",
        "smallestString(s1 = \"ab\", s2 = \"cba\")",
        "smallestString(s1 = \"ab\", s2 = \"cba\")"
    ],
    "sample_109": [
        "checkArray(nums = [1,2,3,4,5], k = 2)",
        "checkArray(nums = [1,2,3,4,5], k = 2)",
        "checkArray(nums = [1,2,3,4,5], k = 2)",
        "checkArray(nums = [1,2,3,4,5], k = 2)",
        "checkArray(nums = [1,2,3,4,5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "checkArray(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "checkArray(nums = [1,2,3,4,5,6], k = 2)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_34": [
        "removeTrailingZeros(s1 = \"512301\", s2 = \"0\")",
        "removeTrailingZeros(s1 = \"512301\", s2 = \"0\")",
        "removeTrailingZeros(s1 = \"512301\")",
        "removeTrailingZeros(s1 = \"512301\", s2 = \"01\")",
        "removeTrailingZeros(s1 = \"512301\", s2 = \"01\")",
        "removeTrailingZeros(s1 = '512301')",
        "removeTrailingZeros(s1 = '512301', s2 = '01')",
        "removeTrailingZeros(s1 = '512301', s2 = '0')",
        "removeTrailingZeros(s1 = \"12301\")",
        "removeTrailingZeros(s1 = '512301')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s1 = \"abcd\", s2 = \"dcba\")",
        "makeSmallestPalindrome(s1 = \"abcd\", s2 = \"dcba\")",
        "makeSmallestPalindrome(s1 = \"abcd\", s2 = \"dcba\")",
        "makeSmallestPalindrome(s1 = \"abcd\", s2 = \"dcba\")",
        "makeSmallestPalindrome(s1 = \"abcd\", s2 = \"dcba\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s1 = \"abc\", s2 = \"cba\")",
        "makeSmallestPalindrome(s1 = \"abc\", s2 = \"cba\")",
        "makeSmallestPalindrome(s = \"abcd\")"
    ],
    "sample_55": [
        "smallestString(s1 = \"abcd\")",
        "smallestString(s1 = \"abcd\")",
        "smallestString(s1 = \"abcd\")",
        "smallestString(s1 = \"abcd\")",
        "smallestString(s1 = \"abcd\", s2 = \"ab\")",
        "smallestString(s1 = \"abcd\", s2 = \"ab\")",
        "smallestString(s1 = \"abc\", s2 = \"def\")",
        "smallestString(s1 = \"abc\", s2 = \"def\")",
        "smallestString(s1 = \"abc\", s2 = \"abcd\")",
        "smallestString(s1 = \"abc\", s2 = \"ab\")"
    ],
    "sample_35": [
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '12301')",
        "removeTrailingZeros(num = '12301')",
        "removeTrailingZeros(num = '12301')",
        "removeTrailingZeros(num = '12301')",
        "removeTrailingZeros(s1 = \"123\", s2 = \"0\")"
    ],
    "sample_23": [
        "minLength(\"ABBCCD\")",
        "minLength(\"ABBCCD\")",
        "minLength(\"ABBCCD\")",
        "minLength(\"ABBCCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(\"ABCD\")",
        "minLength(s1 = \"ABCD\")",
        "minLength(\"AB\")",
        "minLength(\"AB\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"12345\")",
        "removeTrailingZeros(num = \"12345\")",
        "removeTrailingZeros(num = \"12345\")",
        "removeTrailingZeros(num = \"12345\")",
        "removeTrailingZeros(s1 = \"12345\", s2 = \"0\")",
        "removeTrailingZeros(s1 = \"123\", s2 = \"01\")",
        "removeTrailingZeros(s1 = \"1234\", s2 = \"0\")"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 0, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 2, num2 = 3)",
        "makeTheIntegerZero(num1 = 2, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)"
    ],
    "sample_57": [
        "distanceTraveled(a = 5, b = 10)",
        "distanceTraveled(a = 5, b = 10)",
        "distanceTraveled(a = 5, b = 10)",
        "distanceTraveled(a = 5, b = 10)",
        "distanceTraveled(a = 5, b = 10)",
        "distanceTraveled(a = 5, b = 3)",
        "distanceTraveled(a = 5, b = 3)",
        "distanceTraveled(a = 5, b = 3)",
        "distanceTraveled(a = 5, b = 2)",
        "distanceTraveled(a = 5, b = 2)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10], t = 5)"
    ],
    "sample_102": [
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(s1 = \"12345\", s2 = \"0\")",
        "removeTrailingZeros(s1 = \"12345\", s2 = \"0\")",
        "removeTrailingZeros(s1 = \"512301\", s2 = \"01\")",
        "removeTrailingZeros(s1 = \"123\", s2 = \"0\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(s1 = '12345', s2 = '0')"
    ],
    "sample_101": [
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1, 0, 1, 0, 1, 0])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0, 0, 1, 1, 0, 0])"
    ],
    "sample_19": [
        "minLength(s = \"AB\")",
        "minLength(s = \"AB\")",
        "minLength(s = \"AB\")",
        "minLength(s = \"AB\")",
        "minLength(s = \"AB\")",
        "minLength(s = \"AB\")",
        "minLength(s = \"abcd\")",
        "minLength(s1 = \"AB\", s2 = \"CD\")",
        "minLength(s1 = \"AB\", s2 = \"CD\")",
        "minLength(s1 = \"AB\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation(nums = [1,2,3,4])",
        "semiOrderedPermutation(nums = [1,2,3,4])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,3,4,5,6,7,8,9])",
        "numberOfGoodSubarraySplits(nums = [1,2,3,4,5,6,7,8,9,10])",
        "numberOfGoodSubarraySplits(nums = [1,2,3,4,5,6,7,8,9])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,0,0,0,0,0,0])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1,0,1,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)"
    ],
    "sample_117": [
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumIndex(nums = [1, 2, 2, 3, 3, 3])",
        "minimumIndex(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex(nums = [1,2,3,4,5,6,7,8,9])"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 0, num2 = 3)",
        "makeTheIntegerZero(num1 = 0, num2 = 3)",
        "makeTheIntegerZero(num1 = 0, num2 = 3)",
        "makeTheIntegerZero(num1 = 0, num2 = 3)",
        "makeTheIntegerZero(num1 = 0, num2 = 3)",
        "makeTheIntegerZero(num1 = 0, num2 = 3)",
        "makeTheIntegerZero(num1 = 0, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 0, num2 = 2)",
        "makeTheIntegerZero(num1 = 0, num2 = 2)"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countBeautifulPairs(nums = [2, 3, 4, 5, 6])",
        "countBeautifulPairs(nums = [2, 3, 4, 5, 6])",
        "countBeautifulPairs(nums = [2, 3, 4, 5, 6])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60])",
        "countBeautifulPairs(nums = [2,3,4,5,6,7,8,9,10])"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 0, num2 = 0)",
        "makeTheIntegerZero(num1 = 0, num2 = 0)",
        "makeTheIntegerZero(num1 = 0, num2 = 0)",
        "makeTheIntegerZero(num1 = 0, num2 = 0)",
        "makeTheIntegerZero(num1 = 0, num2 = 0)",
        "makeTheIntegerZero(num1 = 0, num2 = 0)",
        "makeTheIntegerZero(num1 = 0, num2 = 3)",
        "makeTheIntegerZero(num1 = 0, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 0, num2 = 1)"
    ],
    "sample_20": [
        "minLength(\"abcd\")",
        "minLength(\"abcd\")",
        "minLength(\"abcd\")",
        "minLength(\"abcd\")",
        "minLength(s1 = \"abcd\")",
        "minLength(s1 = \"abcd\")",
        "minLength(s1 = \"abcd\")",
        "minLength(s1 = \"abcd\")",
        "minLength(s1 = \"abcd\")",
        "minLength(s1 = \"abc\", s2 = \"abcd\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [1,2,3,4,5])",
        "countBeautifulPairs(nums = [1,2,3,4,5])",
        "countBeautifulPairs(nums = [1,2,3,4,5])",
        "countBeautifulPairs(nums = [1,2,3,4,5])",
        "countBeautifulPairs(nums = [1,2,3,4,5])",
        "countBeautifulPairs(nums = [1,2,3,4,5,6,7,8,9])",
        "countBeautifulPairs(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countBeautifulPairs(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countBeautifulPairs(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countBeautifulPairs(nums = [1,2,3,4,5,6,7,8,9,10])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 0, num2 = 0)",
        "makeTheIntegerZero(num1 = 0, num2 = 0)",
        "makeTheIntegerZero(num1 = 0, num2 = 0)",
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 3, num2 = 4)",
        "makeTheIntegerZero(num1 = 0, num2 = 0)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s1 = \"abcd\", s2 = \"dcba\")",
        "makeSmallestPalindrome(s1 = \"abcd\", s2 = \"dcba\")",
        "makeSmallestPalindrome(s1 = \"abcd\", s2 = \"dcba\")",
        "makeSmallestPalindrome(s1 = \"abcd\", s2 = \"dcba\")",
        "makeSmallestPalindrome(s1 = \"abcd\", s2 = \"dcba\")",
        "makeSmallestPalindrome(s1 = \"abcd\", s2 = \"dcba\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")"
    ],
    "sample_37": [
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"ab\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,3,4,5,6,7,8,9])",
        "numberOfGoodSubarraySplits(nums = [1,2,3,4,5,6,7,8,9])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1,0,1,1,1,0,1,1,0,1,1,0,1,1,1,0,1,1,0,1,1,0,1,1,1,0,1,1,0,1,1,0,1,1,1,0,1,1,0,1,1,0,1,1,1,0,1,1,0,1,1,0,1,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,0,1,0,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,0,0,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
    ],
    "sample_105": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "checkArray(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], k = 3)",
        "checkArray(nums = [0, 1, 2, 3, 4, 5], k = 3)"
    ],
    "sample_39": [
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abacaba\")",
        "minimumCost(s = \"ab\")"
    ],
    "sample_65": [
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])"
    ],
    "sample_58": [
        "distanceTraveled(m = 5, a = 3)",
        "distanceTraveled(m = 5, a = 3)",
        "distanceTraveled(m = 5, a = 3)",
        "distanceTraveled(m = 5, a = 3)",
        "distanceTraveled(m = 5, a = 2)",
        "distanceTraveled(m = 5, a = 2)",
        "distanceTraveled(m = 5, a = 2)",
        "distanceTraveled(m = 5, a = 2)",
        "distanceTraveled(m = 5, a = 2)",
        "distanceTraveled(m = 3, a = 2)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1, 2, 3, 4])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4])",
        "doesValidArrayExist(derived = [1, 2, 3, 4])",
        "doesValidArrayExist(derived = [1, 2, 3, 4])",
        "doesValidArrayExist(derived = [1, 2, 3, 4])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3])",
        "doesValidArrayExist(derived = [1, 2, 3])"
    ],
    "sample_106": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 2)"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10], t = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10], t = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10], t = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10], t = 5)"
    ],
    "sample_36": [
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"abacaba\")"
    ],
    "sample_21": [
        "minLength(\"abcd\")",
        "minLength(\"abcd\")",
        "minLength(\"abcd\")",
        "minLength(\"abcd\")",
        "minLength(s1 = \"ABCD\")",
        "minLength(\"ABCD\")",
        "minLength(\"ABCD\")",
        "minLength(\"ABCD\")",
        "minLength(\"AB\")",
        "minLength(\"AB\")"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 0, 1, 0, 1, 0])"
    ],
    "sample_9": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 0]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 0]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 0]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 0]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [1, 3], [2, 3]])",
        "colorTheArray(n = 5, queries = [[1, 0], [0, 1], [1, 1], [1, 0], [0, 0]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4], nums2 = [3, 4, 5, 6])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [3, 4, 5, 6, 7])"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1,2,3,4,5])",
        "findValueOfPartition(nums = [1,2,3,4,5])"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1,2,3,4,5])",
        "findValueOfPartition(nums = [1,2,3,4,5])",
        "findValueOfPartition(nums = [1,2,3,4,5])",
        "findValueOfPartition(nums = [1,2,3,4,5])",
        "findValueOfPartition(nums = [1,2,3,4,5])",
        "findValueOfPartition(nums = [1,2,3,4,5,6,7,8,9,10])",
        "findValueOfPartition(nums = [1,2,3,4,5,6,7,8,9,10])",
        "findValueOfPartition(nums = [1,2,3,4,5,6,7,8,9,10])",
        "findValueOfPartition(nums = [1,2,3,4,5,6,7,8,9])",
        "findValueOfPartition(nums = [1,2,3,4,5,6,7,8,9,10])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6])",
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [0, 1, 0, 0, 1, 1, 0, 1, 1])"
    ],
    "sample_167": [
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"NASA\"], s = \"National Aeronautics and Space Administration\")",
        "isAcronym(words = [\"NASA\", \"ISS\"], s = \"NASA\")",
        "isAcronym(words = [\"NASA\", \"ISS\"], s = \"Nasa\")",
        "isAcronym(words = [\"NASA\", \"FBI\", \"CIA\"], s = \"NACO\")",
        "isAcronym(words = [\"NASA\", \"NASA\"], s = \"NASA\")",
        "isAcronym(words = [\"NASA\", \"FBI\", \"CIA\"], s = \"NFC\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hweolrllod\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], m = 3, k = 3)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], m = 3, k = 5)"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1,2], [3,4], [5,6]])",
        "numberOfPoints(nums = [[1,2], [3,4], [5,6]])",
        "numberOfPoints(nums = [[1,2], [3,4], [5,6]])",
        "numberOfPoints(nums = [[1,2],[3,4],[5,6]])",
        "numberOfPoints(nums = [[1,2],[3,4],[5,6]])",
        "numberOfPoints(nums = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]])",
        "numberOfPoints(nums = [[0,1], [1,2], [2,3]])",
        "numberOfPoints(nums = [[0,1],[2,3],[4,5],[6,7],[8,9],[10,11],[12,13],[14,15],[16,17],[18,19],[20,21],[22,23],[24,25],[26,27],[28,29],[30,31],[32,33],[34,35],[36,37],[38,39],[40,41],[42,43],[44,45],[46,47],[48,49],[50,51],[52,53],[54,55],[56,57],[58,59],[60,61],[62,63],[64,65],[66,67],[68,69],[70,71],[72,73],[74,75],[76,77],[78,79],[80,81],[82,83],[84,85],[86,87],[88,89],[90,91],[92,93],[94,95],[96,97],[98,99]])",
        "numberOfPoints(nums = [[0,1], [2,3], [4,5]])",
        "numberOfPoints(nums = [[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,12],[11,13],[12,14],[13,15],[14,16],[15,17],[16,18],[17,19],[18,20],[19,21],[20,22],[21,23],[22,24],[23,25],[24,26],[25,27],[26,28],[27,29],[28,30],[29,31],[30,32],[31,33],[32,34],[33,35],[34,36],[35,37],[36,38],[37,39],[38,40],[39,41],[40,42],[41,43],[42,44],[43,45],[44,46],[45,47],[46,48],[47,49],[48,50],[49,51],[50,52],[51,53],[52,54],[53,55],[54,56],[55,57],[56,58],[57,59],[58,60],[59,61],[60,62],[61,63],[62,64],[63,65],[64,66],[65,67],[66,68],[67,69],[68,70],[69,71],[70,72],[71,73],[72,74],[73,75],[74,76],[75,77],[76,78],[77,79],[78,80],[79,81],[80,82],[81,83],[82,84],[83,85],[84,86],[85,87],[86,88],[87,89],[88,90],[89,91],[90,92],[91,93],[92,94],[93,95],[94,96],[95,97],[96,98],[97,99],[98,100],[99,101],[100,102],[101,103],[102,104],[103,105],[104,106],[105,107],[106,108],[107,109],[108,110],[109,111],[110,112],[111,113],[112,114],[113,115],[114,116],[115,117],[116,118],[117,119],[118,120],[119,121],[120,122],[121,123],[122,124],[123,125],[124,126],[125,127],[126,128],[127,129],[128,130],[129,131],[130,132],[131,133],[132,134],[133,135],[134,136],[135,137],[136,138],[137,139],[138,140],[139,141],[140,142],[141,143],[142,144],[143,145],[144,146],[145,147],[146,148],[147,149],[148,150],[149,151],[150,152],[151,153],[152,154],[153,155],[154,156],[155,157],[156,158],[157"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 3, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 3)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 3)",
        "minAbsoluteDifference(nums = [1,2,3,4,5,6,7,8,9], x = 3)",
        "minAbsoluteDifference(nums = [1,2,3,4,5,6,7,8,9], x = 3)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5,6,7,8,9,10], x = 3)",
        "minAbsoluteDifference(nums = [1,2,3,4,5,6,7,8,9,10], x = 3)",
        "minAbsoluteDifference(nums = [1,2,3,4,5,6,7,8,9,10], x = 3)",
        "minAbsoluteDifference(nums = [1,2,3,4,5,6,7,8,9,10], x = 3)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], modulo = 3, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], modulo = 3, k = 3)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)"
    ],
    "sample_169": [
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"abc\", \"def\", \"ghi\"], s = \"abcdefghi\")",
        "isAcronym(words = [\"abc\", \"def\"], s = \"abcdef\")",
        "isAcronym(words = [\"abc\", \"def\"], s = \"adf\")"
    ],
    "sample_121": [
        "minimumIndex(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumIndex(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6])",
        "maximumTripletValue([1, 2, 3, 4, 5])"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"LR_LR_LR_R\")",
        "furthestDistanceFromOrigin(moves = \"LR_LR_LR_R\")",
        "furthestDistanceFromOrigin(moves = \"LR_LR_LR\")",
        "furthestDistanceFromOrigin(moves = \"LR_LR_LR_R_R_R\")",
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves = \"LR_LL_RR_LL_RR\")",
        "furthestDistanceFromOrigin(moves = \"LR_LL_RR_LL_RR\")",
        "furthestDistanceFromOrigin(moves = \"LR_LL_RR_LL_RR\")",
        "furthestDistanceFromOrigin(moves = \"LR_LR_L\")",
        "furthestDistanceFromOrigin(moves = \"L_R_L_R_L_R\")"
    ],
    "sample_149": [
        "finalString(s = \"hi\")",
        "finalString(s = \"hi\")",
        "finalString(s = \"hi\")",
        "finalString(s = \"hi\")",
        "finalString(s = \"hi\")",
        "finalString(s = \"hi\")",
        "finalString(s = \"i\")",
        "finalString(s1 = \"hi\", s2 = \"there\")",
        "finalString(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "finalString(s = \"hi\")"
    ],
    "sample_162": [
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSum([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum([1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_230": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 4, target = 10)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 3, offers = [\n    [1, 2, 3],\n    [2, 3, 4],\n    [3, 4, 5],\n])",
        "maximizeTheProfit(N = 5, offers = [\n    [1, 2, 3],\n    [2, 3, 4],\n    [3, 4, 5],\n    [4, 5, 6],\n    [5, 6, 7],\n])",
        "maximizeTheProfit(N = 3, offers = [\n    [1, 2, 3],\n    [2, 3, 4],\n    [3, 4, 5]\n])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(N = 5, offers = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n    [10, 11, 12],\n    [13, 14, 15],\n])",
        "maximizeTheProfit(N = 3, offers = [(1, 2, 3), (2, 3, 4), (3, 4, 5)])",
        "maximizeTheProfit(N = 3, offers = [(1, 2, 3), (2, 3, 4), (3, 4, 5)])",
        "maximizeTheProfit(N = 3, offers = [\n    (1, 2, 3),\n    (2, 3, 4),\n    (3, 4, 5),\n])",
        "maximizeTheProfit(N = 5, offers = [\n    (1, 2, 3),\n    (2, 3, 4),\n    (3, 4, 5),\n    (4, 5, 6),\n    (5, 6, 7),\n])",
        "maximizeTheProfit(N = 5, offers = [\n    (1, 2, 3),\n    (2, 3, 4),\n    (3, 4, 5),\n    (4, 5, 6),\n    (5, 6, 7),\n])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 5], [2, 4, 6], [3, 5, 7]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 5], [2, 4, 6], [3, 5, 7], [4, 6, 8], [5, 7, 9]])",
        "maximizeTheProfit(n = 3, offers = [\n    [0, 1, 10],\n    [1, 2, 20],\n    [2, 3, 30],\n])"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 5, 6, 7], target = 5)"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [3, 2, 1, 4, 5])",
        "maxIncreasingGroups(usageLimits = [3, 2, 1, 4, 5])",
        "maxIncreasingGroups(usageLimits = [3, 2, 1, 4, 5])",
        "maxIncreasingGroups(count = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(count = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [3, 1, 2, 4, 5])",
        "maxIncreasingGroups(count = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_173": [
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 10, k = 3)"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 3, 3])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "longestEqualSubarray(nums = [1,2,2,3,3,3,4,4,4,4], k = 3)",
        "longestEqualSubarray(nums = [1,2,2,3,3,3,4,4,4,4], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9], k = 3)"
    ],
    "sample_170": [
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"NASA\", \"ISS\"], s = \"NASA\")",
        "isAcronym(words = [\"NASA\", \"ISS\"], s = \"NASA\")",
        "isAcronym(words = [\"NASA\", \"FBI\", \"CIA\"], s = \"NACI\")",
        "isAcronym(words = [\"NASA\", \"FBI\", \"CIA\"], s = \"NACI\")",
        "isAcronym(words = [\"NASA\", \"FBI\", \"CIA\"], s = \"NASA\")",
        "isAcronym(words = [\"NASA\", \"FBI\", \"CIA\"], s = \"NASA\")",
        "isAcronym(words = [\"NASA\", \"FBI\", \"CIA\"], s = \"NFCI\")",
        "isAcronym(words = [\"NASA\", \"FBI\", \"CIA\"], s = \"NACOIA\")"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"10101\")"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1,2,3])",
        "countWays(nums = [1,2,3,4,5])"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])"
    ],
    "sample_122": [
        "minimumIndex(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex(nums = [1,2,3,4,5,6,7,8,9,10])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1,2],[3,4],[5,6]])",
        "numberOfPoints(nums = [[1,2],[3,4],[5,6]])",
        "numberOfPoints(nums = [[1,2],[3,4],[5,6]])",
        "numberOfPoints(nums = [[1,2],[3,4],[5,6]])",
        "numberOfPoints(nums = [[1,2], [3,4], [5,6]])",
        "numberOfPoints(nums = [[1,2], [3,4], [5,6]])",
        "numberOfPoints(nums = [[1,2], [3,4], [5,6]])",
        "numberOfPoints(nums = [[1,2], [3,4], [5,6]])",
        "numberOfPoints(nums = [[1,2], [3,4], [5,6]])",
        "numberOfPoints(nums = [[1,2], [3,4], [5,6]])"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"hello\", \"world\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"banana\", \"apple\", \"mango\"], separator = \"a\")"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 10, target = 20)",
        "minimumPossibleSum(n = 10, target = 10)",
        "minimumPossibleSum(n = 3, target = 6)"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [4, 5]])",
        "numberOfPoints([[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]])",
        "numberOfPoints(nums = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]])",
        "numberOfPoints(nums = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]])",
        "numberOfPoints(nums = [[0, 1], [1, 2], [2, 3]])",
        "numberOfPoints(nums = [[0, 1], [1, 2], [2, 3], [3, 4]])"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [1, 0, 1, 0, 0, 1, 0, 0, 0, 1], m = 2, k = 1)"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)"
    ],
    "sample_203": [
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"0025\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9], modulo = 3, k = 2)"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1,2,3,4,5,6,7,8,9,10], K = 3)",
        "longestEqualSubarray(A = [1,2,3,4,5,6,7,8,9,10], K = 3)",
        "longestEqualSubarray(A = [1,2,3,4,5,6,7,8,9,10], K = 3)",
        "longestEqualSubarray(A = [1,2,3,4,5,6,7,8,9,10], K = 3)",
        "longestEqualSubarray(A = [1,2,3,4,5,6,7,8,9,10], K = 3)",
        "longestEqualSubarray(A = [1,2,3,4,5,6,7,8,9,10], K = 2)",
        "longestEqualSubarray(A = [1,2,3,4,5,6,7,8,9], K = 3)",
        "longestEqualSubarray(A = [1,2,3,4,5,6,7,8,9], K = 3)",
        "longestEqualSubarray(A = [1,2,3,4,5,6,7,8,9], K = 2)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], K = 2)"
    ],
    "sample_146": [
        "finalString(s1 = \"ponter\", s2 = \"ter\")",
        "finalString(s1 = \"ponter\", s2 = \"ter\")",
        "finalString(s1 = \"ponter\", s2 = \"ter\")",
        "finalString(s1 = \"ponter\", s2 = \"ter\")",
        "finalString(s1 = \"ponter\", s2 = \"ter\")",
        "finalString(s1 = \"ponter\", s2 = \"ter\")",
        "finalString(s1 = \"ponter\", s2 = \"ter\")",
        "finalString(s1 = \"ponter\", s2 = \"ter\")",
        "finalString(s1 = \"ponter\", s2 = \"ter\")",
        "finalString(s1 = \"ponter\", s2 = \"ter\")"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 5, 6, 7], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6], target = 4)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints([[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints([[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints([[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints([[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints([[1,2], [3,4], [5,6]])"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 5, offers = [[1,2,3],[2,3,4],[3,4,5]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,3],[2,3,4],[3,4,5]])",
        "maximizeTheProfit(n = 5, offers = [[1,3,5],[2,4,6],[3,5,7],[4,6,8],[5,7,9]])",
        "maximizeTheProfit(n = 3, offers = [[1,2,3], [1,2,3], [1,2,3]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1,3,2],[2,1,3],[3,2,1]])",
        "maximizeTheProfit(n = 5, offers = [[1,3,5],[2,4,6],[3,5,7]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,3], [4,5,6], [7,8,9]])",
        "maximizeTheProfit(n = 5, offers = [[1,5,3], [2,4,2], [3,3,1]])"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"LLRRLLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLLR\")",
        "furthestDistanceFromOrigin(moves = \"L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_",
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves = \"L_R_L_R_L_R_L_R\")",
        "furthestDistanceFromOrigin(moves = \"L_R_L_R_L_R_L_R\")",
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves = \"LR_L_R_L_R_L_R\")",
        "furthestDistanceFromOrigin(moves = \"LR_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_"
    ],
    "sample_175": [
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 10, k = 3)",
        "minimumSum(n = 10, k = 20)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,2],[3,4],[5,6]])",
        "numberOfPoints(nums = [[1,2],[3,4],[5,6]])",
        "numberOfPoints(nums = [[1,2],[3,4],[5,6]])",
        "numberOfPoints(nums = [[1,2],[3,4],[5,6]])",
        "numberOfPoints(nums = [[1,2],[3,4],[5,6]])",
        "numberOfPoints(nums = [[1,2],[3,4],[5,6]])",
        "numberOfPoints(nums = [[1,2],[3,4],[5,6]])",
        "numberOfPoints(nums = [[1,2],[3,4],[5,6],[7,8],[9,10]])",
        "numberOfPoints(nums = [[1,2], [3,4], [5,6]])",
        "numberOfPoints(nums = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20],[21,22],[23,24],[25,26],[27,28],[29,30],[31,32],[33,34],[35,36],[37,38],[39,40],[41,42],[43,44],[45,46],[47,48],[49,50],[51,52],[53,54],[55,56],[57,58],[59,60],[61,62],[63,64],[65,66],[67,68],[69,70],[71,72],[73,74],[75,76],[77,78],[79,80],[81,82],[83,84],[85,86],[87,88],[89,90],[91,92],[93,94],[95,96],[97,98],[99,100]])"
    ],
    "sample_205": [
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"12\")",
        "minimumOperations(num = \"1234\")",
        "minimumOperations(num = \"1234\")"
    ],
    "sample_120": [
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"LLR_LLR_LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLR_LLR_LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLR_LLR_LLR\")",
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves = \"LLR_LLR_LLR_LLR_LLR_LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR_LLRR_LLRR\")",
        "furthestDistanceFromOrigin(moves = \"L_R_L_R_L_R_L_R\")",
        "furthestDistanceFromOrigin(moves = \"LLRR_LLR_LL_R\")",
        "furthestDistanceFromOrigin(moves = \"LR_R_L_R_L_R_L\")"
    ],
    "sample_161": [
        "maxSum([1, 2, 3, 4, 5])",
        "maxSum([1, 2, 3, 4, 5])",
        "maxSum([1, 2, 3, 4, 5])",
        "maxSum([1, 2, 3, 4, 5])",
        "maxSum([1, 2, 3, 4, 5])",
        "maxSum([1, 2, 3, 4, 5])",
        "maxSum([1, 2, 3, 4, 5])",
        "maxSum([1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum([1, 2, 3, 4])"
    ],
    "sample_160": [
        "maxSum([1,2,3,4,5,6,7,8,9,10])",
        "maxSum([1,2,3,4,5,6,7,8,9])",
        "maxSum([1,2,3,4,5,6,7,8,9,10])",
        "maxSum([1,2,3,4,5,6,7,8,9])",
        "maxSum([1,2,3,4,5,6,7,8,9])",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10])",
        "maxSum([1,2,3,4,5])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5,6,7,8,9,10], target = 5)"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 10, 15, 20], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4, 5, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 5, 7, 9], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 5, 6, 7, 8], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [2,3,4,5], target = 3)"
    ],
    "sample_171": [
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)"
    ],
    "sample_159": [
        "maxSum([1,2,3,4,5])",
        "maxSum([1,2,3,4,5])",
        "maxSum([1,2,3,4,5])",
        "maxSum([1,2,3,4,5])",
        "maxSum([1,2,3,4,5])",
        "maxSum([1,2,3,4,5])",
        "maxSum([1,2,3,4,5])",
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9])"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"hello\", \"world\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello\", \"world\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello\", \"world\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello\", \"world\", \"how\", \"are\", \"you\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"banana\", \"apple\", \"mango\"], separator = \"a\")"
    ],
    "sample_172": [
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)"
    ],
    "sample_228": [
        "countWays(nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,",
        "countWays(nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,",
        "countWays(nums = [0,1,2,3,4,5,6,7,8,9])",
        "countWays(nums = [0,0,0,0,0,0,0,0,0,0])",
        "countWays(nums = [0,1,2,3,4,5,6,7,8,9])",
        "countWays(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countWays(nums = [1,2,3,4,5,6,7,8,9])",
        "countWays(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",
        "countWays(nums = [0,0,1,1,2,2,3,3,4,4,5,5])",
        "countWays([0,0,0,0,0,0,0,0,0,0])"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = \"10101\")"
    ],
    "sample_119": [
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumIndex(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
    ],
    "sample_153": [
        "canSplitArray(nums = [1,2,3,4,5], m = 3)",
        "canSplitArray(nums = [1,2,3,4,5], m = 3)",
        "canSplitArray(nums = [1,2,3,4,5], m = 3)",
        "canSplitArray(nums = [1,2,3,4,5], m = 3)",
        "canSplitArray(nums = [1,2,3,4,5], m = 3)",
        "canSplitArray(nums = [1,2,3,4,5,6,7,8,9,10], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5,6,7,8,9,10], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5,6,7,8,9], m = 3)",
        "canSplitArray(nums = [1,2,3,4,5,6,7,8,9,10], m = 3)",
        "canSplitArray(nums = [1,2,3,4,5,6,7,8,9], m = 5)"
    ],
    "sample_147": [
        "finalString(s1 = \"hi\", s2 = \"there\")",
        "finalString(s1 = \"hi\", s2 = \"there\")",
        "finalString(s1 = \"hi\", s2 = \"there\")",
        "finalString(s1 = \"hi\", s2 = \"there\")",
        "finalString(s1 = \"hi\", s2 = \"there\")",
        "finalString(s1 = \"hi\", s2 = \"there\")",
        "finalString(s1 = \"hi\", s2 = \"there\")",
        "finalString(s1 = \"hi\", s2 = \"there\")",
        "finalString(s1 = \"hi\", s2 = \"there\")",
        "finalString(s1 = \"rtsng\", s2 = \"ng\")"
    ],
    "sample_174": [
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5,6], m = 7)"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])"
    ],
    "sample_150": [
        "finalString(s1 = \"rtsng\", s2 = \"ng\")",
        "finalString(s1 = \"rtsng\", s2 = \"ng\")",
        "finalString(s1 = \"rtsng\", s2 = \"ng\")",
        "finalString(s1 = \"rtsng\", s2 = \"ng\")",
        "finalString(s1 = \"rtsng\")",
        "finalString(s1 = \"abc\", s2 = \"def\")",
        "finalString(s1 = \"rtsng\")",
        "finalString(s1 = \"rtsng\")",
        "finalString(s1 = \"abcdefghijklmnopqrstuvwxyz\")",
        "finalString(s1 = \"abcd\", s2 = \"efgh\")"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 5)"
    ],
    "sample_176": [
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], modulo = 3, k = 3)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], modulo = 3, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100], modulo = 3, k = 3)"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)"
    ],
    "sample_151": [
        "finalString(s1 = \"hi\", s2 = \"there\")",
        "finalString(s1 = \"hi\", s2 = \"there\")",
        "finalString(s1 = \"hi\", s2 = \"there\")",
        "finalString(s1 = \"hi\", s2 = \"there\")",
        "finalString(s1 = \"hi\", s2 = \"there\")",
        "finalString(s1 = \"hi\", s2 = \"there\")",
        "finalString(s1 = \"hi\", s2 = \"there\")",
        "finalString(s1 = \"hi\", s2 = \"there\")",
        "finalString(s1 = \"rtsng\")",
        "finalString(s1 = \"rtsng\")"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])"
    ],
    "sample_204": [
        "minimumOperations(s = \"00255075\")",
        "minimumOperations(s = \"00255075\")",
        "minimumOperations(s = \"00255075\")",
        "minimumOperations(s = \"00255075\")",
        "minimumOperations(s = \"00255075\")",
        "minimumOperations(s = \"00255075\")",
        "minimumOperations(s = \"00255075\")",
        "minimumOperations(s = \"00255075\")",
        "minimumOperations(s = \"00255075\")",
        "minimumOperations(s = \"00255075\")"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 10, 11, 12], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 12, 14], target = 10)"
    ],
    "sample_148": [
        "finalString(s1 = \"ponter\", s2 = \"ter\")",
        "finalString(s1 = \"ponter\", s2 = \"ter\")",
        "finalString(s1 = \"ponter\", s2 = \"ter\")",
        "finalString(s1 = \"ponter\", s2 = \"ter\")",
        "finalString(s1 = \"ponter\", s2 = \"ter\")",
        "finalString(s1 = \"ponter\", s2 = \"ter\")",
        "finalString(s1 = \"ponter\")",
        "finalString(s1 = \"ponter\")",
        "finalString(s1 = \"ponter\")",
        "finalString(s1 = \"ponter\")"
    ],
    "sample_168": [
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"NASA\", \"FBI\", \"CIA\"], s = \"NACOIA\")",
        "isAcronym(words = [\"NASA\", \"FBI\", \"CIA\"], s = \"NFCIA\")"
    ],
    "sample_201": [
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], target = 10)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], target = 10)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], target = 10)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], target = 10)",
        "minOperations(nums = [1,2,3,4,5], target = 10)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], target = 10)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], target = 30)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31], target = 10)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], target = 0)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], target = 10)"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
        "maximumOddBinaryNumber(s = \"10101010\")"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = \"10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = \"101\")"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 5, target = 8)"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LRLL\")",
        "furthestDistanceFromOrigin(moves = \"LRLL\")",
        "furthestDistanceFromOrigin(moves = \"LRLL\")",
        "furthestDistanceFromOrigin(moves = \"LRLL\")",
        "furthestDistanceFromOrigin(moves = \"LRLLRLL\")",
        "furthestDistanceFromOrigin(moves = \"LRLLRLL\")",
        "furthestDistanceFromOrigin(moves = \"LRLLR\")",
        "furthestDistanceFromOrigin(moves = \"LRLLRLL\")",
        "furthestDistanceFromOrigin(moves = \"LRLLR\")",
        "furthestDistanceFromOrigin(moves = \"LRLLLL\")"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 10, target = 10)",
        "minimumPossibleSum(n = 10, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 10, target = 20)",
        "minimumPossibleSum(n = 10, target = 1)",
        "minimumPossibleSum(n = 10, target = 20)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 10, target = 5)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 10, 15, 20], target = 10)"
    ],
    "sample_231": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [0, 1, 2, 3, 4, 5])",
        "countWays(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"LR_LL_RR_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_LL_",
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves = \"LR_LR_L_R_L_R_L_R\")"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 5, target = 7)",
        "minimumPossibleSum(n = 4, target = 6)"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)"
    ],
    "sample_200": [
        "minOperations(nums = [1, 2, 3, 4, 5], target = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 5)",
        "minOperations(nums = [3, 2, 1, 4, 5, 6], target = 10)"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)"
    ],
    "sample_165": [
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"banana\", \"apple\"], s = \"banana\")",
        "isAcronym(words = [\"NASA\", \"FBI\", \"CIA\"], s = \"NACI\")"
    ],
    "sample_227": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countWays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countWays(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countWays(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_158": [
        "maxSum([1, 2, 3, 4, 5])",
        "maxSum([1, 2, 3, 4, 5])",
        "maxSum([1, 2, 3, 4, 5])",
        "maxSum([1, 2, 3, 4, 5])",
        "maxSum([1, 2, 3, 4, 5])",
        "maxSum([1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,10], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,10], k = 2)"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]])"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 2)"
    ],
    "sample_207": [
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"12\")",
        "minimumOperations(num = \"12\")",
        "minimumOperations(num = \"12\")",
        "minimumOperations(num = \"12\")"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LR\")",
        "furthestDistanceFromOrigin(moves = \"LR\")",
        "furthestDistanceFromOrigin(moves = \"LR\")",
        "furthestDistanceFromOrigin(moves = \"LRLL\")",
        "furthestDistanceFromOrigin(moves = \"LRLL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRL\")"
    ],
    "sample_206": [
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"0025\")"
    ],
    "sample_155": [
        "canSplitArray(nums = [1,2,3,4,5], m = 7)",
        "canSplitArray(nums = [1,2,3,4,5], m = 7)",
        "canSplitArray(nums = [1,2,3,4,5,6,7,8,9], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1,2,3,4,5,6], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5,6], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5], m = 6)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_202": [
        "minimumOperations(num = \"00257550\")",
        "minimumOperations(num = \"00257550\")",
        "minimumOperations(num = \"00257550\")",
        "minimumOperations(num = \"00257550\")",
        "minimumOperations(num = \"00257550\")",
        "minimumOperations(num = \"00257550\")",
        "minimumOperations(num = \"00257550\")",
        "minimumOperations(num = \"002575\")",
        "minimumOperations(num = \"12\")",
        "minimumOperations(num = \"1234\")"
    ],
    "sample_128": [
        "splitWordsBySeparator(s1 = \"banana\", s2 = \"ana\")",
        "splitWordsBySeparator(s1 = \"banana\", s2 = \"ana\")",
        "splitWordsBySeparator(s1 = \"banana\", s2 = \"ana\")",
        "splitWordsBySeparator(s1 = \"banana\", s2 = \"ana\")",
        "splitWordsBySeparator(s1 = \"banana\", s2 = \"ana\")",
        "splitWordsBySeparator(a = [\"ba\", \"ba\", \"ba\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"ba\", \"bab\", \"babab\"], b = \"b\")",
        "splitWordsBySeparator(a = [\"ba\", \"na\", \"na\"], b = \"na\")",
        "splitWordsBySeparator(s1 = \"ba\", s2 = \"nana\")",
        "splitWordsBySeparator(a = [\"ba\", \"nana\"], b = \"a\")"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = \"ba\")",
        "maximumOddBinaryNumber(s = \"ba\")",
        "maximumOddBinaryNumber(s = \"ba\")",
        "maximumOddBinaryNumber(s = \"ba\")",
        "maximumOddBinaryNumber(s = \"ba\")",
        "maximumOddBinaryNumber(s = \"ba\")",
        "maximumOddBinaryNumber(s = \"ba\")",
        "maximumOddBinaryNumber(s = \"ba\")",
        "maximumOddBinaryNumber(s = \"ba\")",
        "maximumOddBinaryNumber(s = \"ba\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9], k = 2)"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = \"1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")"
    ],
    "sample_166": [
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"NASA\", \"FBI\", \"CIA\"], s = \"NASA\")",
        "isAcronym(words = [\"NASA\", \"FBI\", \"CIA\"], s = \"NASA\")",
        "isAcronym(words = [\"NASA\", \"FBI\", \"CIA\"], s = \"NASA\")",
        "isAcronym(words = [\"NASA\", \"ISS\"], s = \"NASAISS\")",
        "isAcronym(words = [\"banana\", \"apple\", \"cherry\"], s = \"bap\")"
    ],
    "sample_163": [
        "maxSum([1, 2, 3, 4, 5])",
        "maxSum([1, 2, 3, 4, 5])",
        "maxSum([1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_453": [
        "minChanges(s1 = \"abcd\")",
        "minChanges(s1 = \"abcd\")",
        "minChanges(s1 = \"ab\", s2 = \"ba\")",
        "minChanges(s1 = \"ab\", s2 = \"ba\")",
        "minChanges(s1 = \"ab\", s2 = \"ba\")",
        "minChanges(s1 = \"ab\", s2 = \"ba\")",
        "minChanges(s1 = \"abcd\", s2 = \"abcd\")",
        "minChanges(s1 = \"abcd\", s2 = \"abcd\")",
        "minChanges(s = \"abab\")",
        "minChanges(s1 = \"ba\", s2 = \"bba\")"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9,10], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9], target = 10)"
    ],
    "sample_367": [
        "sortVowels(s1 = \"lYmpH\")",
        "sortVowels(s1 = \"lYmpH\")",
        "sortVowels(s1 = \"lYmpH\")",
        "sortVowels(s1 = \"lYmpH\")",
        "sortVowels(s1 = \"lYmpH\")",
        "sortVowels(s1 = \"lYmpH\")",
        "sortVowels(s1 = \"lYmpH\")",
        "sortVowels(s1 = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9,10], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 3, 2, 4, 5, 6, 7], target = 7)"
    ],
    "sample_381": [
        "countPairs(nums = [1,2,3,4,5], t = 6)",
        "countPairs(nums = [1,2,3,4,5], t = 6)",
        "countPairs(nums = [1,2,3,4,5], t = 6)",
        "countPairs(nums = [1,2,3,4,5], t = 5)",
        "countPairs(nums = [1,2,3,4,5], t = 7)",
        "countPairs(nums = [1,2,3,4,5], t = 7)",
        "countPairs(nums = [1,2,3,4,5,6,7,8,9], t = 10)",
        "countPairs(nums = [1,2,3,4,5,6,7,8,9], t = 10)",
        "countPairs(nums = [1,2,3,4,5,6,7,8,9], t = 10)",
        "countPairs(nums = [1,2,3,4,5,6,7,8,9], t = 10)"
    ],
    "sample_366": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3])"
    ],
    "sample_369": [
        "sortVowels(s1 = \"banana\", s2 = \"nana\")",
        "sortVowels(s1 = \"banana\", s2 = \"nana\")",
        "sortVowels(s1 = \"banana\", s2 = \"nana\")",
        "sortVowels(s1 = \"banana\", s2 = \"nana\")",
        "sortVowels(s1 = \"banana\", s2 = \"nana\")",
        "sortVowels(s1 = \"banana\", s2 = \"anana\")",
        "sortVowels(s1 = \"banana\", s2 = \"anana\")",
        "sortVowels(s1 = \"banana\", s2 = \"anana\")",
        "sortVowels(s1 = \"banana\", s2 = \"anana\")",
        "sortVowels(s1 = \"banana\", s2 = \"anana\")"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts([1, 2, 3, 4, 5])",
        "minimumRightShifts([1, 2, 3, 4, 5])",
        "minimumRightShifts([1, 2, 3, 4, 5])"
    ],
    "sample_448": [
        "minChanges(s1 = \"abcd\")",
        "minChanges(s1 = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(\"abcd\")",
        "minChanges(\"abcd\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])"
    ],
    "sample_361": [
        "isGood(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(my_list = [1, 2, 3, 4, 5, 6])",
        "isGood(my_list = [1, 2, 3, 4, 5, 6])",
        "isGood(a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(a = [1, 2, 3, 4, 5, 6])",
        "isGood(a = [1, 2, 3, 4, 5, 6])",
        "isGood(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isGood(s1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(s1 = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_419": [
        "minOperations(nums = [1,2,3,4,5,6,7,8,9], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1,2,3,4,5,6,7,8,9,10])",
        "findMaximumLength(nums = [1,2,3,4,5,6,7,8,9,10])",
        "findMaximumLength(nums = [1,2,3,4,5,6,7,8,9,10])",
        "findMaximumLength(nums = [1,2,3,4,5,6,7,8,9,10])",
        "findMaximumLength(nums = [1,2,3,4,5,6,7,8,9,10])",
        "findMaximumLength(nums = [1,2,3,4,5])",
        "findMaximumLength(nums = [1,2,3,4,5])",
        "findMaximumLength(nums = [1,2,3,4,5,6,7,8,9])",
        "findMaximumLength(nums = [1,2,3,4,5,6,7,8,9])",
        "findMaximumLength(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "maxSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "maxSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1,2,3,4,5,6,7,8,9])",
        "maxSubarrays(nums = [1,2,3,4,5,6,7,8,9])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"abcd\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"abcd\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"abc\")",
        "canMakeSubsequence(s1 = \"ab\", s2 = \"abc\")",
        "canMakeSubsequence(s1 = \"ab\", s2 = \"abc\")"
    ],
    "sample_402": [
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"banana\", \"apple\", \"mango\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"mango\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"mango\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"mango\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"pear\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"pear\"], x = \"a\")"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\", \"4\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\", \"4\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"1\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"1\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\", \"4\"])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"mango\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"mango\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"pear\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"mango\"], x = \"a\")"
    ],
    "sample_372": [
        "sortVowels(s1 = \"leetcode\")",
        "sortVowels(s1 = \"leetcode\")",
        "sortVowels(s1 = \"leetcode\")",
        "sortVowels(s1 = \"leetcode\")",
        "sortVowels(s1 = \"hello\")",
        "sortVowels(s1 = \"hello\")",
        "sortVowels(s = \"hello\")",
        "sortVowels(s = \"hello\")",
        "sortVowels(s1 = 'lEoTcEdE')",
        "sortVowels(s1 = 'leetcode')"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])"
    ],
    "sample_452": [
        "minChanges(s1 = \"ab\", s2 = \"ba\")",
        "minChanges(s1 = \"ab\", s2 = \"ba\")",
        "minChanges(s1 = \"ab\", s2 = \"ba\")",
        "minChanges(s1 = \"ab\", s2 = \"ba\")",
        "minChanges(s1 = \"abcd\", s2 = \"abcd\")",
        "minChanges(s1 = \"abcd\")",
        "minChanges(s1 = \"abcd\")",
        "minChanges(s1 = \"abcd\", s2 = \"abdc\")",
        "minChanges(s1 = \"abcd\", s2 = \"abdc\")",
        "minChanges(\"abcd\")"
    ],
    "sample_385": [
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1,2,3,4,5,6,7,8,9], target = 10)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)"
    ],
    "sample_427": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"banana\", \"apple\", \"mango\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"mango\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"mango\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"mango\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"pear\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"pear\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"pear\"], x = \"a\")"
    ],
    "sample_420": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [3, 2, 1, 4, 5, 6, 7, 8, 9, 10], k = 3)"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood([1,2,3,4,5])",
        "isGood([1, 2, 3, 4, 5])"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)"
    ],
    "sample_365": [
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1,2,3,4,5,6,7,8,9])"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 3)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 3)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 3)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9,10], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9], target = 10)"
    ],
    "sample_450": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(\"abab\")",
        "minChanges(\"abab\")",
        "minChanges(s1 = \"abab\")",
        "minChanges(s1 = \"ab\")"
    ],
    "sample_463": [
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 2, 3, 3, 3])",
        "sumCounts(nums = [1, 2, 2, 3, 3, 3])",
        "sumCounts(nums = [1, 2, 2, 3, 3, 3])",
        "sumCounts(nums = [1, 2, 2, 3, 3, 3])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_449": [
        "minChanges(s1 = \"abcd\")",
        "minChanges(s1 = \"abcd\")",
        "minChanges(s1 = \"abcd\")",
        "minChanges(s1 = \"abcd\")",
        "minChanges(s1 = \"abcd\")",
        "minChanges(s1 = \"abcd\")",
        "minChanges(s1 = \"abcd\")",
        "minChanges(s1 = \"ab\", s2 = \"ba\")",
        "minChanges(s1 = \"ab\", s2 = \"ba\")",
        "minChanges(s1 = \"abcd\", s2 = \"abcd\")"
    ],
    "sample_425": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"banana\", str2 = \"nana\")",
        "canMakeSubsequence(str1 = \"banana\", str2 = \"nana\")",
        "canMakeSubsequence(str1 = \"banana\", str2 = \"nana\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"abc\")"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9])"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9,10], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9,10], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9,10], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9,10], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9,10], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9,10], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9,10], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,3,2,4,5,2,3,1], target = 5)"
    ],
    "sample_370": [
        "sortVowels(s1 = \"banana\", s2 = \"nana\")",
        "sortVowels(s1 = \"banana\", s2 = \"nana\")",
        "sortVowels(s1 = \"banana\", s2 = \"nana\")",
        "sortVowels(s1 = \"banana\", s2 = \"nana\")",
        "sortVowels(s1 = \"banana\", s2 = \"nana\")",
        "sortVowels(s1 = \"banana\", s2 = \"nana\")",
        "sortVowels(s1 = \"banana\", s2 = \"nana\")",
        "sortVowels(s1 = \"banana\", s2 = \"nana\")",
        "sortVowels(s1 = \"lEtCedE\")",
        "sortVowels(s1 = \"lEtCedE\", s2 = \"oD\")"
    ],
    "sample_421": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "maxSubarrays(nums = [1,2,3,4,5,6,7,8,9])",
        "maxSubarrays(nums = [1,2,3,4,5])",
        "maxSubarrays(nums = [1,2,3,4,5])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], k = 2)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], k = 2)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], k = 2)",
        "countPairs(coordinates = [[1, 2], [2, 3], [3, 4], [4, 5]], k = 2)",
        "countPairs(coordinates = [[1, 2], [2, 3], [3, 4], [4, 5]], k = 2)",
        "countPairs(coordinates = [[1, 2], [2, 3], [3, 4], [4, 5]], k = 2)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3]], k = 2)",
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6]], k = 2)",
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6]], k = 2)",
        "countPairs(coordinates = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]], k = 3)"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 3, 2, 4, 5, 6, 7], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 3, 2, 5, 4, 6, 7], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 3, 2, 4, 5, 7, 6, 8], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 3, 2, 5, 4], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 3, 2, 4, 5, 7, 6], target = 8)"
    ],
    "sample_445": [
        "sumCounts(nums = [1,2,3,4,5,6,7,8,9,10])",
        "sumCounts(nums = [1,2,3,4,5,6,7,8,9,10])",
        "sumCounts(nums = [1,2,3,4,5,6,7,8,9])",
        "sumCounts(nums = [1,2,3,4,5,6,7,8,9,10])",
        "sumCounts(nums = [1,2,3,4,5,6,7,8,9,10])",
        "sumCounts(nums = [1,2,3,4,5,6,7,8,9,10])",
        "sumCounts(nums = [1,2,3,4,5,6,7,8,9])",
        "sumCounts(nums = [1,2,2,3,3,3])",
        "sumCounts(nums = [1,2,2,3,3,3])",
        "sumCounts(nums = [1,1,2,2,3,3])"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "minimumBeautifulSubstrings(s = \"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "minimumBeautifulSubstrings(s = \"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "minimumBeautifulSubstrings(s = \"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "minimumBeautifulSubstrings(s = \"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "minimumBeautifulSubstrings(s = \"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "minimumBeautifulSubstrings(s = \"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "minimumBeautifulSubstrings(s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",
        "minimumBeautifulSubstrings(s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",
        "minimumBeautifulSubstrings(s = \"abababab\")"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1,2,3,4,5])",
        "maxSubarrays(nums = [1,2,3,4,5])",
        "maxSubarrays(nums = [1,2,3,4,5,6])"
    ],
    "sample_401": [
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 2)"
    ],
    "sample_363": [
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_376": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,5,5,5,5])"
    ],
    "sample_399": [
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 5, k = 3)"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)"
    ],
    "sample_364": [
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3])",
        "isGood(nums = [1,2,3])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 4, 4, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5])"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"pear\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"pear\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"mango\"], x = \"an\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(s = \"ababab\")",
        "minimumBeautifulSubstrings(s = \"ababab\")",
        "minimumBeautifulSubstrings(s = \"ababab\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"abc\")"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"ab\", s2 = \"abc\")",
        "canMakeSubsequence(s1 = \"ab\", s2 = \"abc\")",
        "canMakeSubsequence(s1 = \"ab\", s2 = \"abc\")",
        "canMakeSubsequence(s1 = \"ab\", s2 = \"abc\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"ab\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"ab\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"ab\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"ab\")",
        "canMakeSubsequence(s1 = \"ab\", s2 = \"ba\")",
        "canMakeSubsequence(s1 = \"ab\", s2 = \"abcd\")"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\",",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\", \"4\", \"5\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\", \"4\", \"5\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\", \"4\", \"5\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"prev\", \"prev\"])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], k = 2)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], k = 2)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], k = 2)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], k = 2)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], k = 2)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], k = 2)",
        "countPairs(coordinates = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]], k = 2)",
        "countPairs(coordinates = [\n    [0, 0],\n    [0, 1],\n    [1, 0],\n    [1, 1]\n], k = 2)",
        "countPairs(coordinates = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]], k = 2)",
        "countPairs(coordinates = [\n    [0, 0], [0, 1], [1, 0], [1, 1], [0, 2], [2, 0], [2, 1], [1, 2], [2, 2]\n], k = 2)"
    ],
    "sample_451": [
        "minChanges(s1 = \"abcd\", s2 = \"abcd\")",
        "minChanges(s1 = \"abcd\", s2 = \"abcd\")",
        "minChanges(s1 = \"abcd\", s2 = \"abcd\")",
        "minChanges(s1 = \"abcd\", s2 = \"abcd\")",
        "minChanges(s1 = \"abcd\", s2 = \"abcd\")",
        "minChanges(s1 = \"ab\", s2 = \"ba\")",
        "minChanges(s1 = \"ab\", s2 = \"ba\")",
        "minChanges(s1 = \"ab\", s2 = \"ba\")",
        "minChanges(s1 = \"abcd\")",
        "minChanges(s1 = \"abcd\", s2 = \"ab\")"
    ],
    "sample_461": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 10, limit = 3)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"abd\")"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 6)",
        "distributeCandies(n = 3, limit = 6)",
        "distributeCandies(n = 3, limit = 6)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 6, limit = 3)"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 100)",
        "accountBalanceAfterPurchase(p = 100)",
        "accountBalanceAfterPurchase(p = 100)",
        "accountBalanceAfterPurchase(p = 100)",
        "accountBalanceAfterPurchase(p = 12345)",
        "accountBalanceAfterPurchase(p = 12345)",
        "accountBalanceAfterPurchase(p = 12345)",
        "accountBalanceAfterPurchase(p = 1234)",
        "accountBalanceAfterPurchase(p = 1234)",
        "accountBalanceAfterPurchase(p = 5)"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 2, 3, 3, 3])",
        "sumCounts(nums = [1, 2, 2, 3, 3, 3])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds(A = [1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds(A = [1,2,3,4,5])",
        "minimumSeconds(A = [1,2,3,4,5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(A = [1,2,3,4,5,6,7,8,9])",
        "minimumSeconds(A = [1,2,3,4,5,6])",
        "minimumSeconds(A = [1,2,3,4,5,6])"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ab\")"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts([1, 2, 3, 4, 5])",
        "minimumRightShifts([1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 3, 2, 4, 5])"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1,2,3,4,5,6,7,8,9,10], l = 0, r = 10)",
        "countSubMultisets(nums = [1,2,3,4,5,6,7,8,9,10], l = 0, r = 10)",
        "countSubMultisets(nums = [1,2,3,4,5,6,7,8,9,10], l = 0, r = 10)",
        "countSubMultisets(nums = [1,2,3,4,5,6,7,8,9,10], l = 0, r = 10)",
        "countSubMultisets(nums = [1,2,3,4,5,6,7,8,9,10], l = 0, r = 10)",
        "countSubMultisets(nums = [1,2,3,4,5,6,7,8,9,10], l = 0, r = 10)",
        "countSubMultisets(nums = [1,2,3,4,5,6,7,8,9,10], l = 0, r = 10)",
        "countSubMultisets(nums = [1,2,3,4,5,6,7,8,9,10], l = 0, r = 10)",
        "countSubMultisets(nums = [1,2,3,4,5,6,7,8,9], l = 0, r = 9)",
        "countSubMultisets(nums = [1,2,3,4,5,6,7,8,9], l = 0, r = 9)"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"prev\", \"mq\", \"px\", \"zy\"])",
        "lastVisitedIntegers(words = [\"prev\", \"mq\", \"px\", \"zy\"])",
        "lastVisitedIntegers(words = [\"prev\", \"mq\", \"px\", \"zy\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\", \"4\", \"5\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\", \"4\", \"5\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\", \"4\", \"5\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\", \"4\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"prev\", \"prev\"])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"])",
        "lastVisitedIntegers(words = [\"p\", \"q\", \"r\", \"s\", \"t\"])",
        "lastVisitedIntegers(words = [\"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"])",
        "lastVisitedIntegers(words = [\"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"])",
        "lastVisitedIntegers(words = [\"p\", \"q\", \"r\", \"s\", \"t\"])",
        "lastVisitedIntegers(words = [\"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"])",
        "lastVisitedIntegers(words = [\"p\", \"q\", \"r\", \"s\", \"t\"])",
        "lastVisitedIntegers(words = [\"p\", \"q\", \"r\", \"s\", \"t\"])",
        "lastVisitedIntegers(words = [\"p\", \"q\", \"r\", \"s\", \"t\"])",
        "lastVisitedIntegers(words = [\"p\", \"q\", \"r\", \"s\"])"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9])"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"pear\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"mango\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"mango\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"pear\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"pear\", \"peach\"], x = \"ea\")"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\", \"4\", \"5\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\", \"4\", \"5\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\", \"4\", \"5\"])",
        "lastVisitedIntegers(words = [\"prev\", \"visit\", \"prev\", \"visit\"])",
        "lastVisitedIntegers(words = [\"prev\", \"visit\", \"prev\", \"visit\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\", \"4\", \"5\"])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"ba\", s2 = \"ab\")",
        "canBeEqual(s1 = \"ba\", s2 = \"ab\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\", \"4\", \"5\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\", \"4\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"1\", \"3\", \"4\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"1\", \"3\"])"
    ],
    "sample_464": [
        "distributeCandies(n = 5, limit = 10)",
        "distributeCandies(n = 5, limit = 10)",
        "distributeCandies(n = 5, limit = 10)",
        "distributeCandies(n = 5, limit = 10)",
        "distributeCandies(n = 5, limit = 10)",
        "distributeCandies(n = 5, limit = 10)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 3, limit = 3)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts([1, 2, 3, 4, 5])",
        "minimumRightShifts([1, 2, 3, 4, 5])",
        "minimumRightShifts([1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"mango\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"pear\"], x = \"an\")"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)"
    ],
    "sample_424": [
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9])",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9])",
        "minOperations(nums = [1,2,2,3,3,3])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_417": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "minOperations(nums = [3, 2, 1, 4, 5, 6], k = 3)"
    ],
    "sample_371": [
        "sortVowels(s1 = \"banana\", s2 = \"anana\")",
        "sortVowels(s1 = \"banana\", s2 = \"anana\")",
        "sortVowels(s1 = \"banana\", s2 = \"anana\")",
        "sortVowels(s1 = \"banana\", s2 = \"anana\")",
        "sortVowels(s1 = \"banana\", s2 = \"anana\")",
        "sortVowels(s1 = \"banana\", s2 = \"nana\")",
        "sortVowels(s1 = \"banana\", s2 = \"nana\")",
        "sortVowels(s1 = \"banana\", s2 = \"nana\")",
        "sortVowels(s1 = \"banana\", s2 = \"nana\")",
        "sortVowels(s1 = \"abcd\", s2 = \"abcd\")"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 6)",
        "distributeCandies(n = 3, limit = 6)",
        "distributeCandies(n = 3, limit = 6)",
        "distributeCandies(n = 3, limit = 5)",
        "distributeCandies(n = 3, limit = 5)",
        "distributeCandies(n = 10, limit = 3)"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1,2,3,4,5])"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(nums = [1, 2, 2, 3, 3, 3])",
        "sumCounts(nums = [1, 2, 2, 3, 3, 3])",
        "sumCounts(nums = [1, 2, 2, 3, 3, 3])"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")"
    ],
    "sample_380": [
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 5)",
        "countPairs(nums = [1,2,3,4,5], target = 5)",
        "countPairs(nums = [1,2,3,4,5], target = 5)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 5)",
        "countPairs(nums = [1,2,3,4,5,6], target = 7)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 2, 3, 3, 3])",
        "sumCounts(nums = [1, 2, 2, 3, 3, 3])",
        "sumCounts(nums = [1, 2, 2, 3, 3, 3])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6])",
        "sumCounts(nums = [1, 2, 3, 4])"
    ],
    "sample_368": [
        "sortVowels(s1 = \"banana\", s2 = \"nana\")",
        "sortVowels(s1 = \"banana\", s2 = \"nana\")",
        "sortVowels(s1 = \"banana\", s2 = \"nana\")",
        "sortVowels(s1 = \"banana\", s2 = \"nana\")",
        "sortVowels(s1 = \"banana\", s2 = \"nana\")",
        "sortVowels(s1 = \"banana\", s2 = \"nana\")",
        "sortVowels(s1 = \"banana\", s2 = \"nana\")",
        "sortVowels(s1 = \"banana\", s2 = \"nana\")",
        "sortVowels(s1 = \"banana\", s2 = \"nana\")",
        "sortVowels(s1 = \"banana\", s2 = \"anana\")"
    ],
    "sample_462": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 3)"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])"
    ],
    "sample_426": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_423": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [3, 2, 1, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [3, 2, 1, 4, 5, 6])",
        "minOperations(nums = [3, 1, 2, 2, 3, 1, 3, 1])"
    ],
    "sample_476": [
        "minimumCoins(prices = [1,2,3,4,5])",
        "minimumCoins(prices = [1,2,3,4,5])",
        "minimumCoins(prices = [1,2,3,4,5])",
        "minimumCoins(prices = [1,2,3,4,5])",
        "minimumCoins(prices = [1,2,3,4,5])",
        "minimumCoins(prices = [1,2,3,4,5])",
        "minimumCoins(prices = [1,2,3,4,5])",
        "minimumCoins(prices = [1,2,3,4,5,6,7,8,9,10])",
        "minimumCoins(prices = [1,2,3,4,5,6,7,8,9,10])",
        "minimumCoins(prices = [1,2,3,4,5,6])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumRightShifts(nums = [3, 2, 1, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"bab\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"bab\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"bab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"cde\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"anana\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"ab\")"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abababab\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"dc\"])"
    ],
    "sample_247": [
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 1)",
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 1)",
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 1)",
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 1)",
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 1)",
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 1)",
        "minOperations(s1 = \"ab\", s2 = \"ba\", x = 1)",
        "minOperations(s1 = \"ab\", s2 = \"ba\", x = 1)",
        "minOperations(s1 = \"ab\", s2 = \"ba\", x = 1)",
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 2)"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ba\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"def\", \"cba\"])"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 5, m = 2)"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"ababab\", k = 2)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 2)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 2)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 2)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 2)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 2)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 2)",
        "shortestBeautifulSubstring(s = \"abab\", k = 2)",
        "shortestBeautifulSubstring(s = \"abab\", k = 2)",
        "shortestBeautifulSubstring(s = \"abab\", k = 2)"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"ba\", s3 = \"ba\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"ba\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"bab\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"ba\", s3 = \"ba\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"cd\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ab\")"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum([1, 2, 3], [4, 5, 6])",
        "minSum([1, 2, 3], [4, 5, 6])"
    ],
    "sample_289": [
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101010101\")"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"aab\", k = 2)",
        "beautifulSubstrings(s = \"aab\", k = 2)",
        "beautifulSubstrings(s = \"aab\", k = 2)",
        "beautifulSubstrings(s = \"aab\", k = 2)",
        "beautifulSubstrings(s = \"aab\", k = 2)",
        "beautifulSubstrings(s = \"abab\", k = 2)",
        "beautifulSubstrings(s = \"abab\", k = 2)",
        "beautifulSubstrings(s = \"ababab\", k = 2)",
        "beautifulSubstrings(s = \"ababab\", k = 2)",
        "beautifulSubstrings(s = \"ab\", k = 2)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(s = \"ababab\")",
        "minimumBeautifulSubstrings(s = \"abcabcabc\")",
        "minimumBeautifulSubstrings(s = \"abcabcabc\")"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])"
    ],
    "sample_269": [
        "minSum([1, 2, 3], [4, 5, 6])",
        "minSum([1, 2, 3], [4, 5, 6])",
        "minSum([1, 2, 3], [4, 5, 6])",
        "minSum([1, 2, 3], [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum([1, 2, 3], [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 2, 1])"
    ],
    "sample_282": [
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [3, 2, 1, 4])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [3, 2, 1, 4])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)"
    ],
    "sample_302": [
        "countSeniors(details = [\"age:60\", \"age:50\", \"age:70\"])",
        "countSeniors(details = [\"age:60\", \"age:50\", \"age:70\"])",
        "countSeniors(details = [\"mq\", \"px\", \"zy\", \"mq\", \"px\", \"zy\", \"mq\"])",
        "countSeniors(details = [\"age:60\", \"age:70\", \"age:50\"])",
        "countSeniors(details = [\"age:60\", \"age:70\", \"age:50\"])",
        "countSeniors(details = [\"mq\", \"px\", \"zy\", \"mq\", \"px\", \"zy\"])",
        "countSeniors(details = [\"mq\", \"px\", \"zy\", \"mq\", \"px\", \"zy\"])",
        "countSeniors(details = [\"mq\", \"px\", \"zy\", \"bz\"])",
        "countSeniors(details = [\"mq\", \"px\", \"zy\", \"mq\", \"px\", \"zy\", \"mq\", \"px\", \"zy\"])",
        "countSeniors(details = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"abcd\", k = 2)",
        "beautifulSubstrings(s = \"abcd\", k = 3)",
        "beautifulSubstrings(s = \"abcd\", k = 3)",
        "beautifulSubstrings(s = \"abcd\", k = 3)",
        "beautifulSubstrings(s = \"abcd\", k = 2)",
        "beautifulSubstrings(s = \"abcd\", k = 2)",
        "beautifulSubstrings(s = \"banana\", k = 3)",
        "beautifulSubstrings(s = \"banana\", k = 3)",
        "beautifulSubstrings(s = \"abab\", k = 2)",
        "beautifulSubstrings(s = \"ab\", k = 2)"
    ],
    "sample_255": [
        "minimumSum([1,2,3,4,5])",
        "minimumSum([1,2,3,4,5])",
        "minimumSum([1,2,3,4,5])",
        "minimumSum([1,2,3,4,5])",
        "minimumSum([1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum([1,2,3,4,5,6,7,8,9])"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = \"ababab\", k = 2)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 2)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 2)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 2)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 2)",
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = \"11010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
        "shortestBeautifulSubstring(s = \"11010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101"
    ],
    "sample_293": [
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"01010101\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"abababab\")"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,2,2,3,3,3,4,4,4,4])",
        "minGroupsForValidAssignment(nums = [1,2,2,3,3,3,4,4,4,4])"
    ],
    "sample_307": [
        "countSeniors(details = [\"age:60\", \"age:70\", \"age:50\"])",
        "countSeniors(details = [\"mq\", \"px\", \"zy\", \"mq\", \"px\", \"zy\"])",
        "countSeniors(details = [\"mq\", \"px\", \"zy\", \"mq\", \"mq\", \"mq\"])",
        "countSeniors(details = [\"mq\", \"px\", \"zy\", \"mq\", \"mq\", \"mq\"])",
        "countSeniors(details = [\"mq\", \"px\", \"zy\", \"mq\", \"px\", \"zy\", \"mq\"])",
        "countSeniors(details = [\"50\", \"60\", \"70\", \"80\", \"90\"])",
        "countSeniors(details = [\"55\", \"65\", \"70\", \"75\"])",
        "countSeniors(details = [\"55\", \"65\", \"70\", \"75\"])",
        "countSeniors(details = [\"55\", \"65\", \"70\", \"75\", \"80\"])",
        "countSeniors(details = [\"60\", \"65\", \"70\", \"75\"])"
    ],
    "sample_290": [
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"01010101\")",
        "minimumSteps(s = \"01010101\")",
        "minimumSteps(s = \"01010101\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"01010101\")",
        "minimumSteps(s = \"010101\")",
        "minimumSteps(s = \"0101010101\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9,10], moveFrom = [1,3,5,7,9], moveTo = [2,4,6,8,10])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9,10], moveFrom = [1,3,5,7,9], moveTo = [2,4,6,8,10])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9,10], moveFrom = [1,2,3,4,5], moveTo = [6,7,8,9,10])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9], moveFrom = [1,2,3], moveTo = [4,5,6])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9,10], moveFrom = [1,2,3,4,5,6,7,8,9,10], moveTo = [2,3,4,5,6,7,8,9,10,11])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [1,2], moveTo = [3,4])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9,10], moveFrom = [2,3,4], moveTo = [1,5,6])",
        "relocateMarbles(nums = [2,2,2,2,2,2,2,2,2,2], moveFrom = [0,1,2,3,4,5,6,7,8,9], moveTo = [1,2,3,4,5,6,7,8,9,0])",
        "relocateMarbles(nums = [2,2,2,2,2,2,2,2,2,2], moveFrom = [0,1,2,3,4,5,6,7,8,9], moveTo = [2,3,4,5,6,7,8,9,0,1])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9,10], moveFrom = [1,3,5,7], moveTo = [2,4,6,8])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"ab\", k = 3)",
        "beautifulSubstrings(s = \"aab\", k = 2)",
        "beautifulSubstrings(s = \"aab\", k = 2)",
        "beautifulSubstrings(s = \"ab\", k = 2)",
        "beautifulSubstrings(s = \"ab\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"a\", k = 2)",
        "beautifulSubstrings(s = \"abab\", k = 3)",
        "beautifulSubstrings(s = \"abab\", k = 3)",
        "beautifulSubstrings(s = \"abab\", k = 2)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [1,2,3,4,5,6,7,8,9])",
        "maximumTripletValue(nums = [1,2,3,4,5,6,7,8,9])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba\", \"ba"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 5, m = 2)"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [10, 20, 30], money = 50)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ba\", \"ba\", \"ba\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ba\", \"ba\", \"ba\", \"ba\"])"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"ba\", \"an\", \"na\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"an\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"an\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"nana\", \"ba\", \"nana\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"bc\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"bc\", \"cd\", \"de\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"bc\", \"cd\", \"de\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"an\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"an\", \"na\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"an\", \"na\", \"an\", \"ba\"])"
    ],
    "sample_323": [
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 0)",
        "isFascinating(n = 0)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(\"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(\"abab\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"age:60\", \"age:70\", \"age:50\"])",
        "countSeniors(details = [\"age:60\", \"age:70\", \"age:50\"])",
        "countSeniors(details = [\"age:60\", \"age:70\", \"age:50\"])",
        "countSeniors(details = [\"age:60\", \"age:70\", \"age:50\"])",
        "countSeniors(details = [\"age:60\", \"age:50\", \"age:70\"])",
        "countSeniors(details = [\"mq\", \"px\", \"zy\", \"mq\", \"px\", \"zy\", \"mq\", \"px\", \"zy\", \"mq\", \"px\", \"zy\"])",
        "countSeniors(details = [\"mq\", \"px\", \"zy\", \"bz\"])",
        "countSeniors(details = [\"mq\", \"px\", \"zy\", \"bz\", \"bz\", \"bz\"])",
        "countSeniors(details = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\"])",
        "countSeniors(details = [\"mq\", \"px\", \"zy\", \"jk\", \"lm\", \"nop\", \"qr\", \"st\", \"uv\", \"wxy\", \"yz\"])"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_257": [
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ba\", \"ab\"])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = \"ababab\", k = 2)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 2)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 2)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 2)",
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = \"abab\", k = 2)",
        "shortestBeautifulSubstring(s = \"abab\", k = 2)",
        "shortestBeautifulSubstring(s = \"abab\", k = 2)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 3)",
        "shortestBeautifulSubstring(s = \"1101\", k = 2)"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 10)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 10)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 10)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 10)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 10)",
        "lexicographicallySmallestArray(nums = [1, 2, 3, 4, 5], limit = 3)",
        "lexicographicallySmallestArray(nums = [1, 2, 3, 4, 5], limit = 3)",
        "lexicographicallySmallestArray(nums = [1, 2, 3, 4, 5], limit = 3)",
        "lexicographicallySmallestArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], limit = 10)",
        "lexicographicallySmallestArray(nums = [1, 2, 3, 4, 5], limit = 5)"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1,2,3], [4,5,6], [7,8,9]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])"
    ],
    "sample_295": [
        "beautifulSubstrings(s1 = \"ab\", k = 2)",
        "beautifulSubstrings(s1 = \"ab\", k = 2)",
        "beautifulSubstrings(s1 = \"abcd\", k = 2)",
        "beautifulSubstrings(s1 = \"abcd\", k = 2)",
        "beautifulSubstrings(s1 = \"abcd\", k = 2)",
        "beautifulSubstrings(s1 = \"ab\", s2 = \"ba\")",
        "beautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "beautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "beautifulSubstrings(s1 = \"ba\", k = 3)",
        "beautifulSubstrings(s1 = \"ab\", s2 = \"bc\")"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])"
    ],
    "sample_325": [
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 12345)"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])"
    ],
    "sample_312": [
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3], b = [3, 2, 1])",
        "minOperations(a = [1, 2, 3], b = [3, 2, 1])",
        "minOperations(a = [1, 2, 3, 4, 5], b = [5, 4, 3, 2, 1])",
        "minOperations(a = [1, 2, 3, 4, 5], b = [5, 4, 3, 2, 1])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3, 4], b = [4, 3, 2, 1])",
        "minOperations(a = [1, 2, 3, 4], b = [5, 6, 7, 8])",
        "minOperations(a = [1, 2, 3, 4], b = [5, 6, 7, 8])",
        "minOperations(a = [1, 2, 3, 4], b = [3, 2, 1, 4])",
        "minOperations(a = [1, 2, 3, 4, 5], b = [4, 3, 2, 1, 5])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 4])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"ababab\", k = 2)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 2)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 2)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 2)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 2)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 2)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 3)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 3)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 3)",
        "shortestBeautifulSubstring(s = \"abab\", k = 2)"
    ],
    "sample_256": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSum(nums = [1,2,3,4,5])"
    ],
    "sample_291": [
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [4, 3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [3, 2, 1, 4])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [3, 2, 1, 4])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])"
    ],
    "sample_277": [
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1,2,3],[4,5,6],[7,8,9]])",
        "findChampion(grid = [[1,2,3],[4,5,6],[7,8,9]])",
        "findChampion(grid = [[1,0,0],[0,1,0],[0,0,1]])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 5, m = 2)"
    ],
    "sample_292": [
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")"
    ],
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [0, 2], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [0, 2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [0, 2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [0, 2], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [0, 1], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [0, 2], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3, 5, 7], moveTo = [2, 4, 6, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 5, 8], moveTo = [1, 3, 6])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])"
    ],
    "sample_273": [
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0,0,0],[0,0,0],[0,0,0]])",
        "findChampion(grid = [[0,0,0],[0,0,0],[0,0,0]])",
        "findChampion(grid = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])"
    ],
    "sample_267": [
        "minSum([1, 2, 3], [4, 5, 6])",
        "minSum([1, 2, 3], [4, 5, 6])",
        "minSum([1, 2, 3], [4, 5, 6])",
        "minSum([1, 2, 3], [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])"
    ],
    "sample_294": [
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")"
    ],
    "sample_274": [
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [0, 0, 0]])"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])"
    ],
    "sample_270": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum([0, 0, 0], [0, 0, 0])",
        "minSum([0, 0, 0], [0, 0, 0])",
        "minSum(nums1 = [0, 0, 0], nums2 = [0, 0, 0])",
        "minSum([0, 1, 2, 3], [4, 5, 6, 7])",
        "minSum(nums1 = [0, 0, 0, 0], nums2 = [0, 0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 1, 2])",
        "minSum([1, 2, 3], [3, 2, 1])",
        "minSum(nums1 = [0, 1, 2], nums2 = [0, 1, 2])"
    ],
    "sample_317": [
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1,2,3,4,5], money = 10)",
        "buyChoco(prices = [1,2,3,4,5], money = 10)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 4)"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"banana\", k = 3)",
        "beautifulSubstrings(s = \"banana\", k = 3)",
        "beautifulSubstrings(s = \"ababab\", k = 3)",
        "beautifulSubstrings(s = \"ababab\", k = 3)",
        "beautifulSubstrings(s = \"ababab\", k = 3)",
        "beautifulSubstrings(s = \"aab\", k = 2)",
        "beautifulSubstrings(s = \"aab\", k = 2)",
        "beautifulSubstrings(s = \"ababab\", k = 2)",
        "beautifulSubstrings(s = \"ababab\", k = 2)",
        "beautifulSubstrings(s = \"banana\", k = 3)"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(\"abab\")"
    ],
    "sample_341": [
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 2, z = 4)"
    ],
    "sample_271": [
        "minSum([1,2,3,4,5], [5,4,3,2,1])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [5,4,3,2,1])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [5,4,3,2,1])",
        "minSum(nums1 = [0,0,0,0,0,0,0,0,0,0], nums2 = [0,0,0,0,0,0,0,0,0,0])",
        "minSum([0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0])",
        "minSum(nums1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], nums2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",
        "minSum(nums1 = [1,2,3,4,5,6], nums2 = [1,2,3,4,5,6])",
        "minSum(nums1 = [1, 0, 0, 0], nums2 = [0, 1, 0, 0])",
        "minSum([0,1,0,1], [1,0,1,0])",
        "minSum(nums1 = [1, 0, 1], nums2 = [0, 1, 0])"
    ],
    "sample_340": [
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 3, y = 2, z = 4)",
        "longestString(x = 3, y = 2, z = 4)",
        "longestString(x = 3, y = 2, z = 4)"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"ababab\", k = 3)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 3)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 2)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 2)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 2)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 2)",
        "shortestBeautifulSubstring(s = \"abcd\", k = 3)",
        "shortestBeautifulSubstring(s = \"abc\", k = 3)",
        "shortestBeautifulSubstring(s = \"abc\", k = 3)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 3)"
    ],
    "sample_324": [
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])"
    ],
    "sample_268": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [5, 6, 7, 8])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "minSum(nums1 = [0, 0, 0], nums2 = [1, 2, 3])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"bab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"bab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"cd\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"ab\")"
    ],
    "sample_321": [
        "maxStrength(nums = [1, -2, 3, -4, 5])",
        "maxStrength(nums = [1, -2, 3, -4, 5])",
        "maxStrength(nums = [1, -2, 3, -4, 5])",
        "maxStrength(nums = [1, -2, 3, -4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5, 6])",
        "maxStrength([-1, -2, -3, -4, -5])",
        "maxStrength([-1, -2, -3, -4, -5])",
        "maxStrength([-1, -2, -3, -4, -5])",
        "maxStrength(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxStrength(nums = [1, -1, 2, -2, 3, -3])"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 3, 5], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [0, 2, 4], moveTo = [1, 3, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [0, 1], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [0, 2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [0, 2], moveTo = [1, 3])"
    ],
    "sample_357": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [0, 1], moveTo = [2, 3])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [0, 1], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 4, 7], moveTo = [2, 5, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [5, 6, 8], moveTo = [9, 8, 7])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [3, 5, 7], moveTo = [1, 2, 4])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4], money = 10)"
    ],
    "sample_308": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum([[1, 2, 3], [4, 5, 6], [7, 8, 9]])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3, 4], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4], money = 10)",
        "buyChoco(prices = [1, 2, 3], money = 10)"
    ],
    "sample_259": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum([1,2,3,4,5])",
        "minimumSum([1,2,3,4,5])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_311": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 2, 3], money = 5)",
        "buyChoco(a = [1, 2, 3], money = 5)",
        "buyChoco(a = [1, 2, 3], money = 5)",
        "buyChoco(a = [1, 2, 3], money = 5)",
        "buyChoco(a = [1, 2, 3], money = 5)",
        "buyChoco(a = [1, 2, 3], money = 5)",
        "buyChoco(a = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(a = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(a = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(a = [1, 2, 3, 4], money = 10)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_276": [
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"i\"]])",
        "findChampion(grid = [[1,2,3],[4,5,6],[7,8,9]])",
        "findChampion(grid = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n])"
    ],
    "sample_320": [
        "maxStrength([1, 2, 3, 4])",
        "maxStrength([1, 2, 3, 4])",
        "maxStrength([1, 2, 3, 4])",
        "maxStrength([1, 2, 3, 4])",
        "maxStrength([1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength([1, 2, 3])",
        "maxStrength([1, 2, 3, 4, 5])",
        "maxStrength([1, 2, 3, 4, 5])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"ba\", \"an\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"an\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"an\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"nana\", \"ba\", \"nana\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"nana\", \"ba\", \"nana\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"nana\", \"ba\", \"nana\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"nana\", \"ba\", \"nana\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\"])"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"bab\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"ab\")"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 3, 2, 4, 3, 2, 1])",
        "alternatingSubarray(nums = [1, 3, 2, 4, 5, 7, 6])",
        "alternatingSubarray(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17])"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1,2,3],[4,5,6],[7,8,9]])",
        "findChampion(grid = [[1,2,3],[4,5,6],[7,8,9]])"
    ],
    "sample_304": [
        "countSeniors(details = [\"1234\", \"5678\", \"9012\"])",
        "countSeniors(details = [\"1234\", \"5678\", \"9012\", \"3456\"])",
        "countSeniors(details = [\"1234\", \"5678\", \"9012\", \"3456\"])",
        "countSeniors(details = [\"age:60\", \"age:50\", \"age:70\"])",
        "countSeniors(details = [\"1234-5678-9012-3456\", \"5678-9012-3456-7890\"])",
        "countSeniors(details = [\"1234-5678-9012-3456\", \"5678-9012-3456-7890\"])",
        "countSeniors(details = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\"])",
        "countSeniors(details = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\"])",
        "countSeniors(details = [\"1234-5678-9012-3456\", \"1234-5678-9012-3456\", \"1234-5678-9012-3456\"])",
        "countSeniors(details = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\"])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"abab\", k = 2)",
        "beautifulSubstrings(s = \"abab\", k = 2)",
        "beautifulSubstrings(s = \"abab\", k = 2)",
        "beautifulSubstrings(s = \"abab\", k = 2)",
        "beautifulSubstrings(s = \"abab\", k = 2)",
        "beautifulSubstrings(s = \"abab\", k = 2)",
        "beautifulSubstrings(s = \"abab\", k = 2)",
        "beautifulSubstrings(s = \"abab\", k = 2)",
        "beautifulSubstrings(s1 = \"ab\", k = 2)",
        "beautifulSubstrings(s = \"ab\", k = 2)"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"ababab\", k = 2)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 2)",
        "shortestBeautifulSubstring(s = \"abab\", k = 2)",
        "shortestBeautifulSubstring(s = \"abab\", k = 2)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 2)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 2)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 2)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 2)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 2)",
        "shortestBeautifulSubstring(s
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"ba\", \"an\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"an\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"nana\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"nana\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"nana\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"an\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"an\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"nana\", \"ba\", \"nana\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"an\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"ba\"])"
    ],
    "sample_327": [
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3], [4,5,6], [7,8,9]])"
    ],
    "sample_326": [
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)"
    ],
    "sample_275": [
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"i\"]])",
        "findChampion(grid = [\n    [0, 1, 0],\n    [0, 0, 0],\n    [0, 0, 0]\n])"
    ],
    "sample_260": [
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_322": [
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)"
    ],
    "sample_248": [
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 3)",
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 3)",
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 3)",
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 3)",
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 3)",
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 3)",
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 3)",
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 3)",
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 2)",
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 2)"
    ],
    "sample_342": [
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 5, y = 3, z = 2)",
        "longestString(x = 5, y = 3, z = 2)",
        "longestString(x = 5, y = 3, z = 2)",
        "longestString(x = 3, y = 5, z = 2)",
        "longestString(x = 3, y = 5, z = 2)",
        "longestString(x = 2, y = 3, z = 4)"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [0, 1, 2], moveTo = [3, 4, 5])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [0, 1, 2], moveTo = [3, 4, 5])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [0, 1, 2], moveTo = [3, 4, 5])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [0, 1, 2], moveTo = [3, 4, 5])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [0, 1, 2], moveTo = [3, 4, 5])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [0, 1, 2], moveTo = [3, 4, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [0, 1, 2, 3, 4, 5, 6, 7, 8], moveTo = [4, 5, 6, 7, 8, 9, 1, 2, 3])"
    ],
    "sample_306": [
        "countSeniors(details = [\"John is 60\", \"Mary is 70\"])",
        "countSeniors(details = [\"John is 60\", \"Mary is 70\"])",
        "countSeniors(details = [\"John is 60\", \"Mary is 55\"])",
        "countSeniors(details = [\"John is 60\", \"Mary is 55\"])",
        "countSeniors(details = [\"John is 60 years old\", \"Mary is 55 years old\"])",
        "countSeniors(details = [\"John is 60\", \"Mary is 55\", \"Bob is 70\"])",
        "countSeniors(details = [\"John is 60\", \"Mary is 70\", \"Peter is 50\"])",
        "countSeniors(details = [\"mq\", \"px\", \"zy\", \"mq\", \"px\", \"zy\", \"mq\"])",
        "countSeniors(details = [\"John is 60 years old\", \"Jane is 50 years old\"])",
        "countSeniors(details = [\"bob is 60\", \"joe is 65\", \"joe is 70\"])"
    ],
    "sample_303": [
        "countSeniors(details = [\"John\", \"Mary\", \"Bob\", \"Alice\"])",
        "countSeniors(details = [\"John\", \"Mary\", \"Bob\", \"Alice\"])",
        "countSeniors(details = [\"John\", \"Mary\", \"Bob\", \"Alice\"])",
        "countSeniors(details = [\"John\", \"Mary\", \"Bob\", \"Alice\"])",
        "countSeniors(details = [\"John is 60\", \"Mary is 70\", \"Bob is 50\"])",
        "countSeniors(details = [\"John is 60\", \"Mary is 70\", \"Bob is 50\"])",
        "countSeniors(details = [\"50\", \"60\", \"70\", \"80\"])",
        "countSeniors(details = [\"John is 60\", \"Mary is 55\", \"Bob is 70\"])",
        "countSeniors(details = [\"bob\", \"joe\", \"jim\", \"joe\"])",
        "countSeniors(details = [\"bob\", \"joe\", \"jim\", \"joe\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \"jim\", \""
    ],
    "sample_356": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [0, 1], moveTo = [2, 3])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [0, 1], moveTo = [2, 3])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [0, 1, 2], moveTo = [3, 4, 5])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [0, 1, 2], moveTo = [3, 4, 5])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [0, 1, 2], moveTo = [3, 4, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [0, 1, 2, 3], moveTo = [4, 5, 6, 7])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [0, 1, 2], moveTo = [2, 3, 4])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bca\", s3 = \"cab\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bca\", s3 = \"cab\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"aa\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"cd\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"cd\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"cd\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"bab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"bana\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"cd\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"ba\")"
    ]
}