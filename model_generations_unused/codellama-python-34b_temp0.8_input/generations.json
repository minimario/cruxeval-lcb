{
    "sample_287": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcde\", s3 = \"cdef\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"xzy\", s3 = \"xyx\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"aed\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcde\", s3 = \"fghh\")",
        "findMinimumOperations(s1 = \"abx\", s2 = \"axx\", s3 = \"ayx\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"be\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"ayz\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"cat\", s2 = \"cats\", s3 = \"cat\")",
        "findMinimumOperations(s1 = \"qwe\", s2 = \"rty\", s3 = \"ewq\")"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"abcac\")",
        "longestSemiRepetitiveSubstring(s = \"asasd\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"aabac\")",
        "longestSemiRepetitiveSubstring(s = \"aabbabbc\")",
        "longestSemiRepetitiveSubstring(s = \"aacaccbb\")",
        "longestSemiRepetitiveSubstring(s = \"yyytttt\")",
        "longestSemiRepetitiveSubstring(s = \"pwweefrthhp\")",
        "longestSemiRepetitiveSubstring(s = \"bbddeeef\")",
        "longestSemiRepetitiveSubstring(s = \"bbcdeeef\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"hello\", \"olleh\"])",
        "maximumNumberOfStringPairs(words = [\"cat\", \"dog\", \"tac\", \"god\", \"act\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\"])",
        "maximumNumberOfStringPairs(words = [\"abba\",\"ab\",\"ba\",\"aba\",\"ba\"])",
        "maximumNumberOfStringPairs(words = [\"bb\", \"aa\", \"ss\", \"as\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aba\", \"ab\", \"ba\", \"cb\", \"cab\", \"c\"])",
        "maximumNumberOfStringPairs(words = [\"noon\", \"four\", \"tea\", \"at\", \"two\", \"eight\", \"sea\"])",
        "maximumNumberOfStringPairs(words = [\"b\", \"c\", \"b\", \"c\", \"c\", \"b\", \"c\", \"b\", \"c\", \"b\", \"c\", \"d\", \"d\", \"d\", \"d\", \"d\", \"d\", \"d\", \"d\", \"d\"])"
    ],
    "sample_247": [
        "minOperations(s1 = \"xx\", s2 = \"yy\", x = 2)",
        "minOperations(s1 = \"aaaa\", s2 = \"aaaa\", x = 1)",
        "minOperations(s1 = \"abcda\", s2 = \"bcdaa\", x = 2)",
        "minOperations(s1 = \"abcda\", s2 = \"bacdc\", x = 12)",
        "minOperations(s1 = \"bbc\", s2 = \"abb\", x = 2)",
        "minOperations(s1 = \"aaaabbbb\", s2 = \"aaaabbbb\", x = 0)",
        "minOperations(s1 = \"xb\", s2 = \"xd\", x = 2)",
        "minOperations(s1 = \"xxxxxxyyyyyy\", s2 = \"yyyxxxxxyyy\", x = 2)",
        "minOperations(s1 = \"abcdefgh\", s2 = \"hcfbgeff\", x = 4)",
        "minOperations(s1 = \"rrrbbit\", s2 = \"rryyyrg\", x = 1)"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"xx\"])",
        "maximumNumberOfStringPairs(words = [\"hello\", \"olleh\"])",
        "maximumNumberOfStringPairs(words = [\"a\",\"b\"])",
        "maximumNumberOfStringPairs(words = [\"cba\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"21\", \"21\"])",
        "maximumNumberOfStringPairs(words = [\"xyxyxx\", \"yxyxx\", \"et\", \"ett\", \"rere\"])",
        "maximumNumberOfStringPairs(words = [\"BAC\", \"ADA\", \"AA\", \"DCA\"])"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [3,3,3,2,2,2,1,1])",
        "minGroupsForValidAssignment(nums = [2,2,3,3,3,4,4])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 1, 1, 2])",
        "minGroupsForValidAssignment(nums = [1, 1, 4, 2, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [1,2,2,2,3,3,2,4,4,4])",
        "minGroupsForValidAssignment(nums = [3, 2, 5, 7, 9, 1, 5, 9])",
        "minGroupsForValidAssignment(nums = [5,10,5,10,10,3,5,5,3])",
        "minGroupsForValidAssignment(nums = [11, 15, 7, 3, 3, 9, 2, 4, 1, 1])",
        "minGroupsForValidAssignment(nums = [3,5,6,8,1,3,2,6,2,3,2,6,1,4,2,4,5,5,0,1,7,7])",
        "minGroupsForValidAssignment(nums = [4,4,1,6,7,4,4,1,6,7,2,2,1,1,1,4,2,1,1,1,6,6,2,1,2,7,1,2])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 100, m = 3)",
        "differenceOfSums(n = 1000, m = 99)"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"011101\", k = 2)",
        "shortestBeautifulSubstring(s = \"10111100\", k = 2)",
        "shortestBeautifulSubstring(s = \"001100110\", k = 2)",
        "shortestBeautifulSubstring(s = '10111', k = 2)",
        "shortestBeautifulSubstring(s = \"101111\", k = 3)",
        "shortestBeautifulSubstring(s = \"101111100\", k = 3)",
        "shortestBeautifulSubstring(s = '10011001', k = 2)",
        "shortestBeautifulSubstring(s = '1101001', k = 2)",
        "shortestBeautifulSubstring(s = \"010101000\", k = 2)",
        "shortestBeautifulSubstring(s = \"010011010100111100\", k = 2)"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"def\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"aaaa\", s2 = \"aaaa\", s3 = \"aaaa\")",
        "findMinimumOperations(s1 = \"cat\", s2 = \"cat\", s3 = \"cat\")",
        "findMinimumOperations(s1 = \"b\", s2 = \"a\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"xy\", s3 = \"x\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"cde\", s3 = \"cde\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"ab\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"cd\", s3 = \"yz\")",
        "findMinimumOperations(s1 = \"cat\", s2 = \"was\", s3 = \"is\")"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcdabcd\")",
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaabb\")",
        "longestSemiRepetitiveSubstring(s = \"abacababacab\")",
        "longestSemiRepetitiveSubstring(s = \"apple\")",
        "longestSemiRepetitiveSubstring(s = \"abcdedcb\")",
        "longestSemiRepetitiveSubstring(s = \"ghbab\")",
        "longestSemiRepetitiveSubstring(s = \"aacabgrac\")",
        "longestSemiRepetitiveSubstring(s = \"GKSSBSSSDDJDD\")"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2], nums2 = [3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1,0,2], nums2 = [3,4])",
        "minSum(nums1 = [1, 1, 1], nums2 = [0])",
        "minSum(nums1 = [0,0], nums2 = [1,1])",
        "minSum(nums1 = [1, 2, 3, 0], nums2 = [0, 4, 5, 6])",
        "minSum(nums1 = [2, 4, 7], nums2 = [3, 5, 8])",
        "minSum(nums1 = [2,3,4,5], nums2 = [0,0,0,0])",
        "minSum(nums1 = [1,0,2,3], nums2 = [2,4,6,1])",
        "minSum(nums1 = [1, 4, 3, 5, 0], nums2 = [4, 2, 0, 3, 3])"
    ],
    "sample_289": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"011\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"10001\")",
        "minimumSteps(s = \"1000\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"100101\")",
        "minimumSteps(s = \"011010\")",
        "minimumSteps(s = \"01010000000001\")"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [-1, -2, -3, -4, -5])",
        "maximumTripletValue(nums = [-1, -2, 0, 3])",
        "maximumTripletValue(nums = [3, 1, 5])",
        "maximumTripletValue(nums = [-1,0,-2,1,3])",
        "maximumTripletValue(nums = [1,2,3,4,5,6,7])",
        "maximumTripletValue(nums = [-5,-3,-2,7,1])",
        "maximumTripletValue(nums = [3, 7, 8, 0])",
        "maximumTripletValue(nums = [3, 5, 6, 3, 4, 1])",
        "maximumTripletValue(nums = [3, 5, 1, 1, 3])"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"a\", k = 5)",
        "beautifulSubstrings(s = \"bzb\", k = 2)",
        "beautifulSubstrings(s = \"eiou\", k = 2)",
        "beautifulSubstrings(s = \"abcdef\", k = 5)",
        "beautifulSubstrings(s = \"aeee\", k = 2)",
        "beautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxy\", k = 1)",
        "beautifulSubstrings(s = \"ggggggggggggggggggggggggggg\", k = 3)",
        "beautifulSubstrings(s = \"bixxzz\", k = 2)",
        "beautifulSubstrings(s = \"sdfeewueasdfwe\", k = 2)",
        "beautifulSubstrings(s = \"hcqexrwrueiycnukwtdioamqhnmubtlwxtkbdfrvkejlehjzpeuiqkxgxglrqocqxy\", k = 1104)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"011101\")",
        "minimumBeautifulSubstrings(s = \"011101\")",
        "minimumBeautifulSubstrings(s = \"011\")",
        "minimumBeautifulSubstrings(s = \"0111\")",
        "minimumBeautifulSubstrings(s = \"01110101\")",
        "minimumBeautifulSubstrings(s = \"01101111\")",
        "minimumBeautifulSubstrings(s = \"010011100\")",
        "minimumBeautifulSubstrings(s = \"0010111000101110001011100010111000101110001011100010111000101110001011100010111000101110001011100010111000101110001011100010111000101110001011100010111000101110001011100010111000101110001011100010111000101110001011100010111000101110001011100010111000101110001011100010111000101110001011100010111000101110001011100010111000101110001011100010111000101110001011100010111000101110001011100010111000101110001011100010111000101110001011100010111000101110001011100010111000101110001011100",
        "minimumBeautifulSubstrings(s = \"aababbabbaaabbbabbaab\")",
        "minimumBeautifulSubstrings(s = \"bcdccbabcb\")"
    ],
    "sample_313": [
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(a = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(a = [[0, 0], [0, 0]])",
        "matrixSum(a = [[0, 2], [1, 3]])",
        "matrixSum(a = [[0, 1], [-1, 2]])",
        "matrixSum(a = [[1, 0], [-1, 2]])",
        "matrixSum(a = [[1, 2, 3], [-4, 5, 6], [-7, 8, 9]])",
        "matrixSum(a = [[1, 3], [5, 6], [7, 9]])",
        "matrixSum(a = [[1, 0], [-1, -1], [1, 1], [1, 1]])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [0, 0, 0, 0, 0])",
        "minSum(nums1 = [10, 2], nums2 = [10, 2, 12])",
        "minSum(nums1 = [0, 1, 1], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 1, 1, 1], nums2 = [1, 0, 1, 1])",
        "minSum(nums1 = [3, 4, 0, 1], nums2 = [1, 0])",
        "minSum(nums1 = [0,1,2,3], nums2 = [2,1,0,3])",
        "minSum(nums1 = [5, 3, 2], nums2 = [6, 9, 5])"
    ],
    "sample_282": [
        "minOperations(nums1 = [2, 4, 8], nums2 = [8, 4, 2])",
        "minOperations(nums1 = [2, 4, 1], nums2 = [1, 2, 4])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 4])",
        "minOperations(nums1 = [1,2,4,5,6], nums2 = [2,3,5,6,7])",
        "minOperations(nums1 = [2,4,7,8], nums2 = [2,4,8,10])",
        "minOperations(nums1 = [2, 3, 10], nums2 = [1, 5, 9])",
        "minOperations(nums1 = [1,2,3,5,5,6,7,7,8,9], nums2 = [1,2,3,5,5,5,7,7,8,9])",
        "minOperations(nums1 = [1, 4, 7, 11], nums2 = [11, 7, 4, 1])",
        "minOperations(nums1 = [2, 3, 7, 1, 5, 7, 9, 2, 1], nums2 = [5, 7, 9, 2, 1, 3, 7, 2, 3])",
        "minOperations(nums1 = [2, 3, 3, 4, 5, 5, 6, 7, 7, 8], nums2 = [5, 5, 6, 6, 7, 7, 8, 8, 9, 9])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1,3,2,1,3,2,1,2])",
        "alternatingSubarray(nums = [1,2,3,4,5,3,3,3,3])",
        "alternatingSubarray(nums = [3, 1, 4, 2, 5, 3])",
        "alternatingSubarray(nums = [1,3,5,3,3,3,2,4])",
        "alternatingSubarray(nums = [5,4,7,6,10,11])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,4,4,3,5,6])",
        "alternatingSubarray(nums = [1,2,1,1,1,2,2,2,3,3,4,3])",
        "alternatingSubarray(nums = [1,3,5,3,5,3,4,2,1,3,4])",
        "alternatingSubarray(nums = [1,2,4,7,1,3,5,8,1,2,4,9,10,3,4])",
        "alternatingSubarray(nums = [1,4,6,2,2,5,4,2,2,1])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [3, 1, 2], money = 5)",
        "buyChoco(prices = [1,2,3], money = 5)",
        "buyChoco(prices = [1,2,3,4], money = 5)",
        "buyChoco(prices = [5, 3, 1, 2], money = 10)",
        "buyChoco(prices = [1, 2, 3], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5, 6], money = 8)",
        "buyChoco(prices = [10, 4, 5, 2], money = 9)",
        "buyChoco(prices = [5, 6, 7, 8, 9], money = 11)"
    ],
    "sample_302": [
        "countSeniors(details = ['123456789012Junior', '123456789013Senior', '123456789014Senior'])",
        "countSeniors(details = [\"199801011234\", \"197801011234\"])",
        "countSeniors(details = [\"Ms. Ann Smith\", \"Mr. Steve Miller\", \"Mrs. Mary Johnson\"])",
        "countSeniors(details = [\"age-40\", \"age-65\", \"age-67\"])",
        "countSeniors(details = [\"1990-10-01\", \"1980-01-01\", \"2012-12-31\"])",
        "countSeniors(details = [\"199801010000M\", \"200001010000F\", \"200101010000M\", \"199901010000M\", \"199701010000F\"])",
        "countSeniors(details = [\"19650402\", \"19620303\", \"19730919\"])",
        "countSeniors(details = [\"19920520\",\"19930912\",\"19910310\"])",
        "countSeniors(details = [\"Ms. Ann Wilson, 45, San Francisco, CA\", \"Mr. President Donald, 73, Washington, DC\"])",
        "countSeniors(details = ['79022530462', '82022530331', '92090110312'])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautifulsubstrings\", k = 2)",
        "beautifulSubstrings(s = \"rhythms\", k = 6)",
        "beautifulSubstrings(s = \"aeiou\", k = 0)",
        "beautifulSubstrings(s = \"bcdef\", k = 7)",
        "beautifulSubstrings(s = \"at\", k = 2)",
        "beautifulSubstrings(s = \"cbaeio\", k = 3)",
        "beautifulSubstrings(s = \"babca\", k = 11)",
        "beautifulSubstrings(s = \"nmm\", k = 4)",
        "beautifulSubstrings(s = \"bvjkiopa\", k = 2)"
    ],
    "sample_255": [
        "minimumSum(nums = [4,2,1,3])",
        "minimumSum(nums = [4,2,1,3])",
        "minimumSum(nums = [4,2,1,3])",
        "minimumSum(nums = [3,1,2,4])",
        "minimumSum(nums = [3,1,4,2,5])",
        "minimumSum(nums = [1, 4, 2, 3])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [7, 9, 8, 6, 2, 1, 5])",
        "minimumSum(nums = [2, 5, 9, 3, 1, 4])",
        "minimumSum(nums = [2, 3, 7, 4, 9, 4, 2, 1, 9, 3])"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [3,4,5,8,12,3,3,5])",
        "minGroupsForValidAssignment(nums = [3,4,5,3,5,4])",
        "minGroupsForValidAssignment(nums = [21,10,14,7])",
        "minGroupsForValidAssignment(nums = [3,6,1,8,2,5,7])",
        "minGroupsForValidAssignment(nums = [2, 3, 1, 4, 2, 1])",
        "minGroupsForValidAssignment(nums = [11,11,21,42,23,24])",
        "minGroupsForValidAssignment(nums = [7, 4, 5, 1, 2, 5, 1, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [10,20,15,5,2,15,5,15,1,10,15,10,10,20,20])",
        "minGroupsForValidAssignment(nums = [10,4,4,8,3,3,8,2,4,1,6,7,2,4,4,2,3,8,1,7,2,6,1,2,4,2,2,3,4,1,3,5,7,5,2,1,4,6,4,7,7,3,8,5,6,6,2,4,6,5,2,2,5,1,4,2,2,6,7,4,3,2,4,1,6,7,6,8,6,4,5,4,1,9,7,6,2,9,4])"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [4, 6, 7, 8, 5])",
        "alternatingSubarray(nums = [1,2,3,2,1])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10])",
        "alternatingSubarray(nums = [4,2,2,4,4,2,2])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8])",
        "alternatingSubarray(nums = [5,4,6,3,2,7])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14])",
        "alternatingSubarray(nums = [1,2,2,3,3,4,5,6,6])",
        "alternatingSubarray(nums = [4,5,6,3,2,5,4,3,2,1,2,3,4,5,3])",
        "alternatingSubarray(nums = [3,2,4,1,2,3,3,3,3,4,5,3,2,4])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = \"10111100\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"0001100110\", k = 2)",
        "shortestBeautifulSubstring(s = \"0100111\", k = 2)",
        "shortestBeautifulSubstring(s = \"001100111\", k = 2)",
        "shortestBeautifulSubstring(s = \"101111100\", k = 3)",
        "shortestBeautifulSubstring(s = \"0100110\", k = 2)",
        "shortestBeautifulSubstring(s = \"001100110000011\", k = 2)",
        "shortestBeautifulSubstring(s = '0111100011111', k = 3)",
        "shortestBeautifulSubstring(s = \"011011010001101101000011\", k = 2)"
    ],
    "sample_293": [
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"00\")",
        "minimumSteps(s = \"0000000\")",
        "minimumSteps(s = \"0000000\")",
        "minimumSteps(s = \"01001\")",
        "minimumSteps(s = \"01010\")",
        "minimumSteps(s = \"012012012\")",
        "minimumSteps(s = \"010101\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"aaaaaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcab\")",
        "longestSemiRepetitiveSubstring(s = \"abcdabcdab\")",
        "longestSemiRepetitiveSubstring(s = \"abcbdabcd\")",
        "longestSemiRepetitiveSubstring(s = \"aaabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbabbbca\")",
        "longestSemiRepetitiveSubstring(s = \"abcdef\")",
        "longestSemiRepetitiveSubstring(s = \"abcddcbabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcdefghjkll\")",
        "longestSemiRepetitiveSubstring(s = \"ababbbbabaaabbbaaababbabab\")"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [3,3,2,2,2,1,1])",
        "minGroupsForValidAssignment(nums = [3,5,6,7,9])",
        "minGroupsForValidAssignment(nums = [3,3,3,2,3,2,4,4])",
        "minGroupsForValidAssignment(nums = [3,3,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,1,1])",
        "minGroupsForValidAssignment(nums = [3,4,5,8])",
        "minGroupsForValidAssignment(nums = [3,5,2,2,5])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10,10,11])",
        "minGroupsForValidAssignment(nums = [13,12,11,10,8,6,5,4,3,2,1])",
        "minGroupsForValidAssignment(nums = [12, 33, 33, 33, 12, 12, 12, 12, 12, 33, 12, 33])"
    ],
    "sample_307": [
        "countSeniors(details = [\"a2012\", \"b2013\", \"c2001\"])",
        "countSeniors(details = [\"200010100010\", \"199910100010\", \"198910100010\"])",
        "countSeniors(details = [\"1999,python\", \"1968,c\"])",
        "countSeniors(details = [\"951001\", \"961231\", \"940921\", \"960820\"])",
        "countSeniors(details = [\"19850221\", \"19870622\", \"19820330\"])",
        "countSeniors(details = [\"1948-05-14\", \"1988-08-10\", \"2015-10-28\"])",
        "countSeniors(details = [\"CS3240_19_A_68\", \"CS3240_19_A_67\", \"CS3240_19_A_12\", \"CS3240_19_A_62\"])",
        "countSeniors(details = [\"Ms.Hilarious,76,Female\",\"Mr.Swag,56,Male\"])",
        "countSeniors(details = [\"M20 61 62\", \"S19 71 80\", \"S20 75 69\"])",
        "countSeniors(details = [\"Rohan_03_1980\", \"Rohit_01_1985\", \"Rohan_07_1975\", \"Rohit_01_1990\"])"
    ],
    "sample_290": [
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"1001001001001001001\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,2,1,2,3], moveFrom = [1,2,3], moveTo = [3,2,1])",
        "relocateMarbles(nums = [2,1,3,3,2], moveFrom = [2,1], moveTo = [1,2])",
        "relocateMarbles(nums = [2, 3, 3, 4, 5], moveFrom = [0, 4], moveTo = [4, 0])",
        "relocateMarbles(nums = [2, 4, 7, 1, 3], moveFrom = [0, 3], moveTo = [2, 0])",
        "relocateMarbles(nums = [2,3,3,2,3,3,2], moveFrom = [2,2,2], moveTo = [1,1,1])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8], moveFrom = [0,2,1], moveTo = [3,2,3])",
        "relocateMarbles(nums = [2, 3, 5, 2, 2, 2, 2], moveFrom = [2, 2, 2], moveTo = [2, 3, 5])",
        "relocateMarbles(nums = [1,2,2,2,3,4,4,5,6,7,8,9,10], moveFrom = [1,2,3,4,5,6], moveTo = [10,9,8,7,6,5])",
        "relocateMarbles(nums = [0, 1, 1, 0, 2, 0, 2, 0, 2, 2, 2, 0], moveFrom = [4, 1], moveTo = [0, 4])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], moveFrom = [18,22,13,24,21,4,20,25,11,7,19,17,15,6,8,14,16,5,23,9,10,12], moveTo = [13,11,18,12,14,15,22,19,7,10,20,16,21,8,23,9,17,24,6,25,4,5])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [4, 2, 5, 3])",
        "alternatingSubarray(nums = [4, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1,2,3,4,5,6])",
        "alternatingSubarray(nums = [4, 2, 5, 3, 5, 2, 4, 3, 4, 2])",
        "alternatingSubarray(nums = [4, 2, 5, 3, 0, 1, 4, 5, 2, 5, 3])",
        "alternatingSubarray(nums = [4, 2, 5, 3, 5, 2, 1, 2, 3, 4, 6])",
        "alternatingSubarray(nums = [4, 2, 5, 3, 5, 2, 4, 3, 4, 5])",
        "alternatingSubarray(nums = [4, 7, 4, 4, 4, 4, 7])",
        "alternatingSubarray(nums = [4, 3, 7, 8, 10, 9, 2, 1, 6, 5])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 4)",
        "beautifulSubstrings(s = \"aeiou\", k = 4)",
        "beautifulSubstrings(s = \"bbaacdaae\", k = 3)",
        "beautifulSubstrings(s = \"awesome\", k = 2)",
        "beautifulSubstrings(s = \"bacae\", k = 2)",
        "beautifulSubstrings(s = \"gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg",
        "beautifulSubstrings(s = \"eye\", k = 2)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1,2,3,4])",
        "maximumTripletValue(nums=[1, 2, 3, 4])",
        "maximumTripletValue(nums = [3, 5, 6])",
        "maximumTripletValue(nums = [1,0,2,1,1])",
        "maximumTripletValue(nums = [-10, -10, 1, -5, 6])",
        "maximumTripletValue(nums = [1,3,4,5,6,0])",
        "maximumTripletValue(nums = [100, 101, 200, 100, 102])",
        "maximumTripletValue(nums = [7, -5, 3, 14])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"xy\", \"xy\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"xx\", \"xy\", \"yy\", \"yx\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yx\", \"kk\"])",
        "maximumNumberOfStringPairs(words = [\"a\",\"b\",\"c\",\"x\",\"y\",\"x\",\"b\",\"a\"])",
        "maximumNumberOfStringPairs(words = [\"this\", \"this\", \"ck\", \"ck\", \"hi\", \"hik\", \"hi\"])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 4)",
        "differenceOfSums(n = 10, m = 4)",
        "differenceOfSums(n = 10, m = 4)",
        "differenceOfSums(n = 10, m = 4)",
        "differenceOfSums(n = 6, m = 3)",
        "differenceOfSums(n = 12, m = 3)"
    ],
    "sample_314": [
        "buyChoco(prices = [2, 3, 5], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [5, 4, 3, 2, 1], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4], money = 10)",
        "buyChoco(prices = [1, 1, 3, 5], money = 5)",
        "buyChoco(prices = [2, 3, 1], money = 5)",
        "buyChoco(prices = [1, 2, 4], money = 7)",
        "buyChoco(prices = [5, 7, 4], money = 12)",
        "buyChoco(prices = [4, 8, 5, 3, 9], money = 12)",
        "buyChoco(prices = [12, 5, 9, 1], money = 17)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"hello\", \"olleh\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"zzz\"])",
        "maximumNumberOfStringPairs(words = [\"a\",\"b\",\"c\",\"ba\"])",
        "maximumNumberOfStringPairs(words = [\"zzzz\",\"asdf\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\",\"cdab\",\"efgh\",\"awekj\"])",
        "maximumNumberOfStringPairs(words = [\"the\", \"heart\", \"with\", \"you\", \"within\"])"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"abcba\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abba\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abababa\")",
        "longestSemiRepetitiveSubstring(s = \"abbab\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbaa\")",
        "longestSemiRepetitiveSubstring(s = \"yybaba\")",
        "longestSemiRepetitiveSubstring(s = \"x123y4534z\")"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"banana\", \"apples\", \"orange\"])",
        "minimizeConcatenatedLength(words = [\"w\",\"wo\",\"wor\",\"worl\", \"world\"])",
        "minimizeConcatenatedLength(words = [\"cat\",\"dog\",\"catdog\"])",
        "minimizeConcatenatedLength(words = [\"aba\", \"aba\", \"baa\"])",
        "minimizeConcatenatedLength(words = [\"pq\",\"xy\",\"mn\",\"gd\"])",
        "minimizeConcatenatedLength(words = [\"cats\", \"dogs\", \"snakes\", \"lions\"])",
        "minimizeConcatenatedLength(words = [\"cx\", \"xm\", \"xy\", \"xz\"])",
        "minimizeConcatenatedLength(words = [\"bj\",\"by\",\"qg\",\"ea\",\"a\",\"aa\"])",
        "minimizeConcatenatedLength(words = [\"leng\", \"link\", \"din\", \"fun\"])",
        "minimizeConcatenatedLength(words = [\"is\",\"gd\",\"yf\",\"s\",\"k\",\"ur\",\"dc\"])"
    ],
    "sample_323": [
        "isFascinating(n = 2)",
        "isFascinating(n = 1)",
        "isFascinating(n = 3)",
        "isFascinating(n = 10)",
        "isFascinating(n = 5)",
        "isFascinating(n = 9)",
        "isFascinating(n = 11)",
        "isFascinating(n = 20)",
        "isFascinating(n = 999)",
        "isFascinating(n = 19)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"abcabd\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaabba\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaaaaaaaaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaaaaaaaaaaab\")",
        "longestSemiRepetitiveSubstring(s = \"ppppq\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbbaaabbbbba\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaabbbababaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcdddddefgahasjkdhd\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"123456789121\", \"123456789122\", \"123456789123\", \"123456789124\"])",
        "countSeniors(details = [\"12345678900\", \"12345678901\", \"12345678902\"])",
        "countSeniors(details = [\"abcdefghijklmnop\",\"abcdefghijklmnop\",\"abcdefghijklmnop\",\"abcdefghijklmnop\"])",
        "countSeniors(details = [\"10121995\",\"10111998\"])",
        "countSeniors(details = [\"01-01-1990, Blah\", \"01-01-2020, blah\"])",
        "countSeniors(details = [\"2015-05-26 15:00\", \"2015-05-26 15:00\", \"2015-05-26 15:00\"])",
        "countSeniors(details = [\"Ronald,05011999\", \"Haris,01012001\"])",
        "countSeniors(details = [\"John,80\", \"Farris,25\", \"Astra,65\"])",
        "countSeniors(details = [\"21-12-2022 12:00:00\", \"11-11-2020 11:00:00\", \"01-01-2022 12:00:00\"])",
        "countSeniors(details = [\"100642369\", \"1006442369\", \"1006432369\"])"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [3, 3, 3, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [3,3,3,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [4,3,4,3,4,2,4,3,4])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,4,4,4,5,5,5,6,6,7,8,8])",
        "minGroupsForValidAssignment(nums = [15, 30, 20, 35, 20])"
    ],
    "sample_257": [
        "minimumSum(nums = [4, 3, 2, 6])",
        "minimumSum(nums = [1,2,3,4,5,6,7,8,9])",
        "minimumSum(nums = [2, 3, 4])",
        "minimumSum(nums = [3, 4, 8])",
        "minimumSum(nums = [8, 9, 7, 6, 5])",
        "minimumSum(nums = [2, 3, 1, 5, 10])",
        "minimumSum(nums = [3, 1, 5, 1])",
        "minimumSum(nums = [4, 5, 1, 4, 2])",
        "minimumSum(nums = [7, 9, 8, 6, 2, 7, 9, 2, 7])",
        "minimumSum(nums = [7, 5, 9, 2, 2, 4, 5])"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"bob\", \"aba\"])",
        "maximumNumberOfStringPairs(words = [\"aab\", \"aba\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"a\",\"b\",\"a\",\"b\",\"c\"])",
        "maximumNumberOfStringPairs(words = [\"dog\", \"cow\", \"tigra\", \"god\"])",
        "maximumNumberOfStringPairs(words = [\"zz\",\"zp\",\"zz\"])",
        "maximumNumberOfStringPairs(words = [\"adam\", \"amad\", \"mom\"])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = \"011101\", k = 2)",
        "shortestBeautifulSubstring(s = \"011101\", k = 2)",
        "shortestBeautifulSubstring(s = \"10111\", k = 2)",
        "shortestBeautifulSubstring(s = \"10111100\", k = 2)",
        "shortestBeautifulSubstring(s = \"010011100\", k = 2)",
        "shortestBeautifulSubstring(s = \"000001100000\", k = 2)",
        "shortestBeautifulSubstring(s = \"11000011\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"01001010\", k = 2)",
        "shortestBeautifulSubstring(s = '0000111111100000', k = 3)"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [3, 5, 8, 9, 1], limit = 7)",
        "lexicographicallySmallestArray(nums = [5, 4, 3, 2, 1], limit = 1)",
        "lexicographicallySmallestArray(nums = [4, 2, 1, 5, 9], limit = 3)",
        "lexicographicallySmallestArray(nums = [1, 4, 6, 8, 9], limit = 5)",
        "lexicographicallySmallestArray(nums = [3, 1, 9, 5, 8], limit = 1)",
        "lexicographicallySmallestArray(nums = [3, 7, 6, 4, 1], limit = 2)",
        "lexicographicallySmallestArray(nums = [2, 3, 9, 8, 1], limit = 10)",
        "lexicographicallySmallestArray(nums = [5, 8, 9, 1, 3], limit = 10)",
        "lexicographicallySmallestArray(nums = [9, 3, 1, 5, 8], limit = 3)",
        "lexicographicallySmallestArray(nums = [6, 10, 11, 13, 14], limit = 4)"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[0, 1], [0, 1]])",
        "matrixSum(a = [[1,2],[0,1]])",
        "matrixSum(a = [[2, 1], [4, 3]])",
        "matrixSum(a = [[1, 3], [3, 5]])",
        "matrixSum(a = [[1, -2, 3], [-4, 5, -6], [-7, -8, 9]])",
        "matrixSum(a = [[0, 2], [2, 3]])",
        "matrixSum(a = [[1, 3, 2, 4], [5, 1, 2, 5]])",
        "matrixSum(a = [[2,3,4],[5,1,5],[6,7,8]])"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"abaebi\", k = 3)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeii\", k = 6)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeii\", k = 3)",
        "beautifulSubstrings(s = \"abcdefghi\", k = 4)",
        "beautifulSubstrings(s = \"abcde\", k = 2)",
        "beautifulSubstrings(s = \"aeiouaeiouaeiou\", k = 6)",
        "beautifulSubstrings(s = \"aeiiouuu\", k = 2)",
        "beautifulSubstrings(s = \"aeiouaaeiouaeiou\", k = 6)",
        "beautifulSubstrings(s = \"abaacdeefab\", k = 3)"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xyxy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xyy\", \"xx\"])",
        "maximumNumberOfStringPairs(words = [\"dog\", \"cow\", \"tap\", \"god\", \"pat\", \"top\"])",
        "maximumNumberOfStringPairs(words = [\"for\", \"example\", \"walker\", \"anagram\", \"example\", \"for\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aaaa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"fgh\", \"hgf\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"bana\", \"banana\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"ba\", \"cdefg\", \"de\"])",
        "maximumNumberOfStringPairs(words = [\"\", \"aba\", \"abc\", \"ba\", \"xba\", \"\")]"
    ],
    "sample_325": [
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 1)",
        "isFascinating(n = 8)",
        "isFascinating(n = 10)",
        "isFascinating(n = 21)",
        "isFascinating(n = 19)",
        "isFascinating(n = 30)",
        "isFascinating(n = 92)",
        "isFascinating(n = 1234567)"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 0, 3, 1, 2])",
        "maximumTripletValue(nums = [2, 1, -2, 0, 1])",
        "maximumTripletValue(nums = [3, 2, 5, 1, 7])",
        "maximumTripletValue(nums = [4, 0, 3])",
        "maximumTripletValue(nums = [3, 6, -1, 1])",
        "maximumTripletValue(nums = [-1, -4, 2, 1, -5])",
        "maximumTripletValue(nums = [-8, 5, 10])",
        "maximumTripletValue(nums = [-1, 2, 3, -4, 6])",
        "maximumTripletValue(nums = [-2, 0, 1, 2, 3, -1])",
        "maximumTripletValue(nums = [0, 1, 1, 2, 3, 3, 4, 8, 9])"
    ],
    "sample_312": [
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2,3], [4,5,6], [7,8,9]])",
        "matrixSum(nums = [[1,0],[0,1]])",
        "matrixSum(nums = [[1, 2, 3],[4, 5, 6],[7, 8, 9]])",
        "matrixSum(nums = [[1,2,3],[2,3,4],[3,4,5]])",
        "matrixSum(nums = [[-1,0,1],[1,2,3]])",
        "matrixSum(nums = [[0,3,3],[1,4,4]])",
        "matrixSum(nums = [[-2, -3, 0], [-10, -2, -2], [0, -10, 10]])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2], b = [3, 4])",
        "minOperations(a = [4, 2, 1, 3], b = [4, 3, 2, 1])",
        "minOperations(a = [1, 2, 3, 4], b = [2, 3, 4, 1])",
        "minOperations(a = [0, 1, 2, 3, 4], b = [0, 1, 2, 3, 4])",
        "minOperations(a = [4,1], b = [2,3])",
        "minOperations(a = [4, 2, 1, 5], b = [3, 1, 3, 3])",
        "minOperations(a = [2, 4, 5, 5], b = [3, 1, 3, 4])",
        "minOperations(a = [2,3,4,3,4], b = [2,1,2,1,2])",
        "minOperations(a = [1, 3, 4, 6, 5], b = [4, 3, 2, 1, 7])",
        "minOperations(a = [2, 3, 4, 5, 6, 8], b = [2, 3, 4, 5, 1, 8])"
    ],
    "sample_280": [
        "minOperations(nums1 = [3, 1], nums2 = [2, 4])",
        "minOperations(nums1 = [1, 2], nums2 = [3, 7])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 1])",
        "minOperations(nums1 = [3, 2, 7], nums2 = [1, 1, 3])",
        "minOperations(nums1 = [4, 3, 2, 1], nums2 = [1, 2, 3, 4])",
        "minOperations(nums1 = [1, 2, 4, 2, 5], nums2 = [3, 1, 4, 3, 2])",
        "minOperations(nums1 = [1, 2, 4, 3], nums2 = [3, 2, 2, 4])",
        "minOperations(nums1 = [2, 1, 2], nums2 = [5, 2, 4])",
        "minOperations(nums1 = [3, 4, 6, 10], nums2 = [1, 2, 3, 6])",
        "minOperations(nums1 = [1, 2, 3, 5, 8], nums2 = [5, 6, 8, 1, 9])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [-1, -2, -3, -4, -5])",
        "maximumTripletValue(nums = [2, 2, 2])",
        "maximumTripletValue(nums = [-3,0,1,-2,2,5])",
        "maximumTripletValue(nums = [2, 1, 10, 4])",
        "maximumTripletValue(nums = [3, 7, 40])",
        "maximumTripletValue(nums = [-100, 1, 2, 3, 4])",
        "maximumTripletValue(nums = [-6, 1, 0])",
        "maximumTripletValue(nums = [-3, 4, 9])",
        "maximumTripletValue(nums = [4, 6, 5, 7, 8])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"000100111100\", k = 3)",
        "shortestBeautifulSubstring(s = \"1101001\", k = 3)",
        "shortestBeautifulSubstring(s = \"0110110100010\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110110010\", k = 2)",
        "shortestBeautifulSubstring(s = \"010110101001\", k = 4)",
        "shortestBeautifulSubstring(s = '000010010000111000', k = 4)",
        "shortestBeautifulSubstring(s = \"000100011000111111\", k = 3)",
        "shortestBeautifulSubstring(s = '111101101101', k = 2)",
        "shortestBeautifulSubstring(s = \"000100110000000100001000110111\", k = 4)",
        "shortestBeautifulSubstring(s = \"00100100101110000100010010000010100010010110001001000000100001\", k = 4)"
    ],
    "sample_256": [
        "minimumSum(nums = [1,2,3,4,5,6,7,8])",
        "minimumSum(nums = [3, 2, 4, 9])",
        "minimumSum(nums = [2, 3, 0, 1])",
        "minimumSum(nums = [2, 4, 7, 4, 1, 5])",
        "minimumSum(nums = [2,3,0,4,5])",
        "minimumSum(nums = [11, 6, 2, 10, 8])",
        "minimumSum(nums = [4, 7, 6, 2, 2, 6])",
        "minimumSum(nums = [2, 5, 0, 1, 4, 0])",
        "minimumSum(nums = [3, 9, 4, 1, 5, 9])",
        "minimumSum(nums = [3,5,4,9,1,4,1])"
    ],
    "sample_291": [
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"011\")",
        "minimumSteps(s = \"0110111\")",
        "minimumSteps(s = \"000100\")",
        "minimumSteps(s = \"011111100\")",
        "minimumSteps(s = \"0100110000\")",
        "minimumSteps(s = \"0001000101\")",
        "minimumSteps(s = \"000011000\")",
        "minimumSteps(s = \"1100100100101011\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1, 3, 5, 2, 4, 6, 7], nums2 = [2, 3, 1, 5, 6, 4, 7])",
        "minOperations(nums1 = [0, 1], nums2 = [1, 0])",
        "minOperations(nums1 = [1, 3, 5, 2, 4], nums2 = [2, 3, 1, 5, 4])",
        "minOperations(nums1 = [1, 3, 5, 7, 9], nums2 = [8, 6, 4, 2, 0])",
        "minOperations(nums1 = [1, 3, 5, 7], nums2 = [4, 2, 6, 8])",
        "minOperations(nums1 = [1, 3, 5, 2, 4], nums2 = [2, 3, 5, 1, 4])",
        "minOperations(nums1 = [2, 3, 1, 5, 4], nums2 = [3, 1, 4, 2, 5])",
        "minOperations(nums1 = [2, 3, 9], nums2 = [2, 2, 5])",
        "minOperations(nums1 = [1, 1, 3, 5, 2], nums2 = [1, 3, 5, 2, 1])",
        "minOperations(nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [5, 6, 7, 8, 9, 10, 1, 2, 3, 4])"
    ],
    "sample_277": [
        "findChampion(grid = [[1, 0, 0], [0, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 1], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 1, 0], [0, 1, 0]])",
        "findChampion(grid = [[1,0,0,1],[0,0,1,0],[0,1,0,0],[1,0,0,1]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [1, 1, 0]])",
        "findChampion(grid = [[1,1,1], [1,0,1], [1,1,1]])",
        "findChampion(grid = [[1,0,0,0],[0,0,1,0],[0,0,0,0],[0,0,0,0]])",
        "findChampion(grid = [[1, 2, 3], [0, 4, 5], [6, 0, 7]])",
        "findChampion(grid = [[1, 0, 0, 1, 1], [0, 0, 1, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 0, 1], [0, 1, 1, 0, 0]])",
        "findChampion(grid = [[1, 2, 4, 3], [4, 1, 4, 4], [3, 4, 3, 1]])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 6, m = 4)",
        "differenceOfSums(n = 20, m = 12)"
    ],
    "sample_292": [
        "minimumSteps(s = \"0001011101\")",
        "minimumSteps(s = \"01010100\")",
        "minimumSteps(s = \"0010111\")",
        "minimumSteps(s = \"010101\")",
        "minimumSteps(s = \"0010001\")",
        "minimumSteps(s = \"001011100\")",
        "minimumSteps(s = \"001011001\")",
        "minimumSteps(s = \"00101001\")",
        "minimumSteps(s = \"000011111\")",
        "minimumSteps(s = \"001011110001000001\")"
    ],
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [4, 6, 7, 8, 5])",
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [4, 6, 7, 8, 2, 10, 11, 12])",
        "alternatingSubarray(nums = [1, 1, 2, 2])",
        "alternatingSubarray(nums = [2, 1, 2])",
        "alternatingSubarray(nums = [1, 3, 2, 1, 3, 2])",
        "alternatingSubarray(nums = [4, 6, 7, 8, 5, 9, 3])",
        "alternatingSubarray(nums = [4, 6, 7, 8, 5, 9, 4, 3, 5, 7, 8, 1, 3, 6, 6, 8, 9, 0, 1, 3, 7, 4, 6, 4, 1, 7, 8])"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 1])",
        "relocateMarbles(nums = [0,1], moveFrom = [0,1], moveTo = [1,0])",
        "relocateMarbles(nums = [0,1], moveFrom = [0,1], moveTo = [1,0])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [0, 2], moveTo = [2, 0])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2], moveFrom = [0, 1], moveTo = [1, 2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 2])",
        "relocateMarbles(nums = [0], moveFrom = [[0, 0]], moveTo = [[0, 1]])",
        "relocateMarbles(nums = [0, 1, 2], moveFrom = [0, 0, 0, 0, 0], moveTo = [1, 2, 1, 2, 1])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6], moveFrom = [1, 3], moveTo = [2, 1])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [-1, 0, 1])",
        "maximumTripletValue(nums = [1,1,1])",
        "maximumTripletValue(nums = [1,1,1])",
        "maximumTripletValue(nums = [1, 3, 5])",
        "maximumTripletValue(nums = [2, 3, 4])",
        "maximumTripletValue(nums = [4, 2, 1, 3, 0])",
        "maximumTripletValue(nums = [-4, 2, 0, -2, 2])",
        "maximumTripletValue(nums = [3, 5, 2, 4, 1, 0, 1])",
        "maximumTripletValue(nums = [98, 0, 4, 2, 8, 3])"
    ],
    "sample_273": [
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 2], [0, 4, 5], [0, 7, 8]])",
        "findChampion(grid = [[0,1],[0,0]])",
        "findChampion(grid = [[0, 0, 1], [0, 0, 1], [0, 0, 1]])",
        "findChampion(grid = [[0, 1], [0, 1]])",
        "findChampion(grid = [[1, 1, 1], [2, 0, 2], [3, 3, 3]])",
        "findChampion(grid = [[0, 2], [1, 3]])",
        "findChampion(grid = [[0, 2, 3], [1, 4, 5], [7, 8, 0]])",
        "findChampion(grid = [[1,0,3],[2,0,3],[0,0,1]])",
        "findChampion(grid = [[1, 2, 3, 4, 0], [5, 6, 7, 8, 9], [1, 2, 1, 2, 3]])"
    ],
    "sample_267": [
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "minSum(nums1 = [1, 1, 1], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 0, 0])",
        "minSum(nums1 = [1, 3, 2], nums2 = [5, 4, 0])",
        "minSum(nums1 = [3, 2, 1, 0], nums2 = [2, 1, 0, 3])",
        "minSum(nums1 = [1, 2, 4, 2], nums2 = [2, 3, 2, 1])",
        "minSum(nums1 = [2, 4, 7], nums2 = [0, 3, 1])",
        "minSum(nums1 = [5, 1, 4, 2, 3], nums2 = [2, 4, 5, 1, 7])",
        "minSum(nums1 = [1, -1, 0, 2, 4], nums2 = [1, -2, -3, 0, 10])",
        "minSum(nums1 = [3, 4, 5], nums2 = [-5, -1, -3, 0])"
    ],
    "sample_294": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"00110011\")",
        "minimumSteps(s = \"01011\")",
        "minimumSteps(s = \"01011000\")",
        "minimumSteps(s = \"11111111\")",
        "minimumSteps(s = \"0101100001\")",
        "minimumSteps(s = \"0010010110010010001\")"
    ],
    "sample_274": [
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 0]])",
        "findChampion(grid = [[0, 0, 1], [0, 0, 1], [0, 0, 0]])",
        "findChampion(grid = [[1, 3], [0, 2]])",
        "findChampion(grid = [[1,-1,1],[-1,2,-1],[1,-1,1]])",
        "findChampion(grid = [[1,-1,1], [-1,1,-1], [1,-1,1]])",
        "findChampion(grid = [[0, 0, 1], [-2, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 2, 3], [1, 3, 1], [2, 1, 1]])",
        "findChampion(grid = [[0, 2, 3], [1, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 2, 0, 1], [0, 3, 1, 4], [0, 2, 0, 0]])",
        "findChampion(grid = [[1,-1,0,1], [-1,0,0,0], [-1,-1,1,1], [1,-1,0,-1]])"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [3,3,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,2,2,1,1])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 2])",
        "minGroupsForValidAssignment(nums = [2,2,2,1,1])",
        "minGroupsForValidAssignment(nums = [3,4,4,2,2,2,3,4,3,4,4])",
        "minGroupsForValidAssignment(nums = [12,3,3,6,6,4])",
        "minGroupsForValidAssignment(nums = [3,4,5,8,8,3,8,2,3,8,2])",
        "minGroupsForValidAssignment(nums = [3,4,5,8,8,3,4,3,1,2,3,5,3,7])",
        "minGroupsForValidAssignment(nums = [17,59,4,7,1,16,42,20,39,31,84])"
    ],
    "sample_270": [
        "minSum(nums1 = [1, 2], nums2 = [3, 4])",
        "minSum(nums1 = [1], nums2 = [])",
        "minSum(nums1 = [0], nums2 = [0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minSum(nums1 = [0, 1, 2], nums2 = [0])",
        "minSum(nums1 = [0, 1], nums2 = [2, 4])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [5, 6])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [10, 2, 3, 4])",
        "minSum(nums1 = [3,2], nums2 = [2])",
        "minSum(nums1 = [0,2,4], nums2 = [3, 1])"
    ],
    "sample_317": [
        "buyChoco(prices = [1, 2, 3, 4], money = 4)",
        "buyChoco(prices = [2, 3, 5, 6], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 4)",
        "buyChoco(prices = [1,2,3,4], money = 5)",
        "buyChoco(prices = [1, 4, 5, 6, 7], money = 10)",
        "buyChoco(prices = [1, 3, 5], money = 4)",
        "buyChoco(prices = [3, 2, 5, 1], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4, 5, 6, 7, 8], money = 7)",
        "buyChoco(prices = [5, 3, 2, 10], money = 11)"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"abaebi\", k = 2)",
        "beautifulSubstrings(s = \"baobab\", k = 2)",
        "beautifulSubstrings(s = \"ab\", k = 1)",
        "beautifulSubstrings(s = \"beautiful\", k = 5)",
        "beautifulSubstrings(s = \"abababab\", k = 4)",
        "beautifulSubstrings(s = \"abaacaccb\", k = 3)",
        "beautifulSubstrings(s = \"babaab\", k = 3)",
        "beautifulSubstrings(s = \"hoaeiou\", k = 2)",
        "beautifulSubstrings(s = \"abbbbbbbbbbbaaaeeeeeeeeeee\", k = 3)"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"abcac\")",
        "longestSemiRepetitiveSubstring(s = \"abcbdab\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaabbbbb\")",
        "longestSemiRepetitiveSubstring(s = \"barbarabar\")",
        "longestSemiRepetitiveSubstring(s = \"abcacabcacab\")",
        "longestSemiRepetitiveSubstring(s = \"acacbabc\")",
        "longestSemiRepetitiveSubstring(s = \"mmabb\")",
        "longestSemiRepetitiveSubstring(s = \"bbaaacdde\")",
        "longestSemiRepetitiveSubstring(s = \"abcddcbfghbh\")",
        "longestSemiRepetitiveSubstring(s = \"asdfdsfgrgtrf\")"
    ],
    "sample_341": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 5, y = 3, z = 2)",
        "longestString(x = 2, y = 7, z = 5)",
        "longestString(x = 1, y = 2, z = 10)",
        "longestString(x = 4, y = 2, z = 3)",
        "longestString(x = 2, y = 4, z = 0)",
        "longestString(x = 3, y = 2, z = 7)",
        "longestString(x = 7, y = 4, z = 3)",
        "longestString(x = 4, y = 8, z = 6)"
    ],
    "sample_271": [
        "minSum(nums1 = [1,2,3], nums2 = [1,2,3])",
        "minSum(nums1 = [1,2,3,4], nums2 = [4,3,2,1])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [2, 3, 4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [10, 20, 30])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [4, 2, 1, 5])",
        "minSum(nums1 = [1, 0, 1, 0, 1], nums2 = [0, 1, 0, 1, 0])",
        "minSum(nums1 = [1,0,5], nums2 = [4,0,1])",
        "minSum(nums1 = [2, 2, 3], nums2 = [2, 4, 4])",
        "minSum(nums1 = [1,0,4,2], nums2 = [1,1,1,1])",
        "minSum(nums1 = [2,3,1,0], nums2 = [2,4,4,3])"
    ],
    "sample_340": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 1, z = 3)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 3, y = 2, z = 2)",
        "longestString(x = 1, y = 4, z = 2)",
        "longestString(x = 2, y = 4, z = 5)",
        "longestString(x = 4, y = 5, z = 3)",
        "longestString(x = 5, y = 1, z = 2)"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"011101\", k = 2)",
        "shortestBeautifulSubstring(s = \"011101\", k = 2)",
        "shortestBeautifulSubstring(s = \"10111\", k = 2)",
        "shortestBeautifulSubstring(s = \"101111\", k = 3)",
        "shortestBeautifulSubstring(s = \"10111110\", k = 3)",
        "shortestBeautifulSubstring(s = \"001234500\", k = 3)",
        "shortestBeautifulSubstring(s = \"411222314\", k = 3)",
        "shortestBeautifulSubstring(s = '100110011001100', k = 3)",
        "shortestBeautifulSubstring(s = \"55255\", k = 10)",
        "shortestBeautifulSubstring(s = '1001001001100', k = 2)"
    ],
    "sample_324": [
        "isFascinating(n = 15)",
        "isFascinating(n = 2)",
        "isFascinating(n = 6)",
        "isFascinating(n = 4)",
        "isFascinating(n = 134)",
        "isFascinating(n = 700)",
        "isFascinating(n = 997)",
        "isFascinating(n = 112)",
        "isFascinating(n = 389)",
        "isFascinating(n = 175)"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [2, 4, 7, 1, 5, 3])",
        "minimumSum(nums = [3, 5, 7, 1])",
        "minimumSum(nums = [2, 5, 4, 7])",
        "minimumSum(nums = [2, 5, 3, 7, 9])",
        "minimumSum(nums = [2, 4, 3, 6, 4])",
        "minimumSum(nums = [1,2,3,4,5,6,10])",
        "minimumSum(nums = [10, 15, 20, 3, 25, 15, 10])"
    ],
    "sample_268": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1,2], nums2 = [3,4,5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 0])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 1])",
        "minSum(nums1 = [1, 2, 3, 4, 0, 0], nums2 = [4, 5, 6, 7, 8, 9])",
        "minSum(nums1 = [1, 3, 5, 7, 9], nums2 = [1, 1, 0, 0, 0])",
        "minSum(nums1 = [1, 1, 3, 4, 0, 0], nums2 = [4, 0, 5, 0, 0, 0])",
        "minSum(nums1 = [2,3,4], nums2 = [4, 2, 3])",
        "minSum(nums1 = [0, 5, 7, 3, 3, 8, 4, 5, 0], nums2 = [2, 3, 8, 9, 0, 1, 2, 4, 9])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"xzy\", s3 = \"xyx\")",
        "findMinimumOperations(s1 = \"cat\", s2 = \"banana\", s3 = \"bat\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"cdef\", s3 = \"fgh\")",
        "findMinimumOperations(s1 = \"aaaa\", s2 = \"bbbb\", s3 = \"abab\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abcde\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abef\")",
        "findMinimumOperations(s1 = \"abb\", s2 = \"ab\", s3 = \"ba\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abdc\", s3 = \"abyd\")"
    ],
    "sample_321": [
        "maxStrength(nums = [2, -2, 0, 2, 2])",
        "maxStrength(nums = [2, -1, 0, 3, -5])",
        "maxStrength(nums = [-2, 0, 1, -3, 5])",
        "maxStrength(nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4])",
        "maxStrength(nums = [2, 1, 2, -10, 5])",
        "maxStrength(nums = [1, 2, -1, -4, 0, 3])",
        "maxStrength(nums = [-1,0,1,-1,-1,0,-1])",
        "maxStrength(nums = [-10, -10, -10, -8, 1, 2, 3, 4, -20])",
        "maxStrength(nums = [2, -5, 1, -10, 3])",
        "maxStrength(nums = [-100, 10, 5, -99, -100, -99, 5, 5, 10])"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1,2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1,2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1,2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [3, 1])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [2, 3], moveTo = [1, 2])",
        "relocateMarbles(nums = [2, 3, 3], moveFrom = [0, 2], moveTo = [2, 0])",
        "relocateMarbles(nums = [1, 1, 1, 2], moveFrom = [1, 2], moveTo = [2, 1])",
        "relocateMarbles(nums = [1,2,2,3,4], moveFrom = [1,2,3], moveTo = [3,2,4])",
        "relocateMarbles(nums = [2, 4, 3], moveFrom = [3], moveTo = [4])"
    ],
    "sample_357": [
        "relocateMarbles(nums = [5, 5, 6, 8], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 3, 8, 6, 9], moveFrom = [3, 9], moveTo = [8, 5])",
        "relocateMarbles(nums = [5, 7, 8, 6, 9], moveFrom = [7, 8], moveTo = [9, 5])",
        "relocateMarbles(nums=[1, 2, 3, 4, 5, 6, 8, 9], moveFrom=[1, 2, 5, 6], moveTo=[5, 6, 1, 2])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9], moveFrom = [3,5,7], moveTo = [1,2,4])",
        "relocateMarbles(nums = [1,1,2,2,3,4,4,5,5,6,6,7,7,8,8,9,9], moveFrom = [1,2,3,4,5,6,7,8,9], moveTo = [5,6,7,8,9,1,2,3,4])",
        "relocateMarbles(nums = [1,2,3,4,5,6,8,9], moveFrom = [1,2,3,4,5], moveTo = [8,9,6,7,10])",
        "relocateMarbles(nums = [1,2,3,4,5,6,8,9], moveFrom = [3,6,8], moveTo = [5,6,8])",
        "relocateMarbles(nums = [1, 3, 5, 8, 9, 10], moveFrom = [1, 10], moveTo = [2, 3])",
        "relocateMarbles(nums = [8, 1, 10, 2, 3, 4, 5], moveFrom = [8, 2, 4], moveTo = [6, 8, 4])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 1], money = 1)",
        "buyChoco(prices = [2, 3, 5], money = 5)",
        "buyChoco(prices = [10], money = 10)",
        "buyChoco(prices = [0, 1, 2], money = 3)",
        "buyChoco(prices = [4, 3, 1], money = 1)",
        "buyChoco(prices = [1, 2, 3, 4], money = 1000)",
        "buyChoco(prices = [2,2,5], money = 4)",
        "buyChoco(prices = [2, 3, 5, 6, 7, 8, 10], money = 10)",
        "buyChoco(prices = [0, 10, 5], money = 10)",
        "buyChoco(prices = [1, 1, 3, 5, 7, 10], money = 14)"
    ],
    "sample_308": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1,2,3], [4,5,6], [7,8,9]])",
        "matrixSum(nums = [[0,1],[1,2]])",
        "matrixSum(nums = [[0,1,2],[2,1,0]])",
        "matrixSum(nums = [[1, 5, 3], [4, 2, 7]])",
        "matrixSum(nums = [[2,1,3], [1,4,5]])",
        "matrixSum(nums = [[1, 3, 2], [5, 4, 3], [1, 2, 1]])",
        "matrixSum(nums = [[1,3,2,4],[5,7,4,2],[3,2,1,4],[2,1,3,5]])"
    ],
    "sample_319": [
        "buyChoco(prices = [3, 1, 2], money = 5)",
        "buyChoco(prices = [2, 1], money = 3)",
        "buyChoco(prices = [10, 4], money = 14)",
        "buyChoco(prices = [1, 1, 2], money = 2)",
        "buyChoco(prices = [4, 5, 6], money = 11)",
        "buyChoco(prices = [2, 3], money = 6)",
        "buyChoco(prices = [3,1], money = 4)",
        "buyChoco(prices = [5,3], money = 8)",
        "buyChoco(prices = [1, 3, 5, 7, 9], money = 15)",
        "buyChoco(prices = [1, 3, 10, 5], money = 10)"
    ],
    "sample_259": [
        "minimumSum(nums = [2,4,7,3,5,1])",
        "minimumSum(nums = [3,5,6,1])",
        "minimumSum(nums = [-2,3,-4,5])",
        "minimumSum(nums = [2, 2, 2, 2])",
        "minimumSum(nums = [9,5,1,6])",
        "minimumSum(nums = [8,3,5,4,1,7])",
        "minimumSum(nums = [4,4,4,4,2,2,2,2])",
        "minimumSum(nums = [2,3,1,5,2,1,3,4])",
        "minimumSum(nums = [-5, 3, 4, -2, 6, -11])",
        "minimumSum(nums = [8,2,4,9,3,3,5,2,7])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 4, 4, 5, 5, 7, 7])",
        "alternatingSubarray(nums = [12, 10, 4, 6, 5, 11, 1, 6, 10])",
        "alternatingSubarray(nums = [6, 2, 1, 2, 4, 1, 3, 5, 2, 6])",
        "alternatingSubarray(nums = [1, 1, 2, 4, 1, 2, 2, 4, 5, 6])",
        "alternatingSubarray(nums = [3, 1, 4, 2, 5, 6, 4, 7, 3])"
    ],
    "sample_311": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[0, 1], [2, 3]])",
        "matrixSum(nums = [[0,1],[2,0]])",
        "matrixSum(nums = [[1,2,3], [4,5,6]])",
        "matrixSum(nums = [[1, 1, 1, 1, 1], [2, 2, 2, 2, 2], [3, 3, 3, 3, 3], [4, 4, 4, 4, 4], [5, 5, 5, 5, 5]])",
        "matrixSum(nums = [[1, 3, 4], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[3, 2, 4], [5, 6, 1], [7, 8, 9]])",
        "matrixSum(nums = [[2, 1, 2], [2, 1, 1], [1, 2, 3]])"
    ],
    "sample_316": [
        "buyChoco(a = [2, 3], money = 5)",
        "buyChoco(a = [4, 5], money = 9)",
        "buyChoco(a = [1, 2, 3], money = 5)",
        "buyChoco(a = [10, 4], money = 14)",
        "buyChoco(a = [1, 2, 3, 4], money = 4)",
        "buyChoco(a = [5, 7, 9], money = 12)",
        "buyChoco(a = [1,2,4], money = 5)",
        "buyChoco(a = [1, 1, 3, 5], money = 7)",
        "buyChoco(a = [2000, 4000, 7000], money = 9000)",
        "buyChoco(a = [1,2,4,3,5,6], money = 8)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [3,3,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 2, 2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,5,5,5,5,10,10,10])",
        "minGroupsForValidAssignment(nums = [14,9,15,10,11])",
        "minGroupsForValidAssignment(nums = [5, 3, 1, 1, 1, 5, 1, 1])",
        "minGroupsForValidAssignment(nums = [3,1,5,2,5,2,2])",
        "minGroupsForValidAssignment(nums = [15, 3, 2, 9, 12, 8, 4, 10, 6, 11])",
        "minGroupsForValidAssignment(nums = [5, 2, 4, 2, 6, 2, 3, 2, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [15, 32, 4, 28, 33, 30, 16, 12, 15, 4])",
        "minGroupsForValidAssignment(nums = [29,1,3,5,30,3,2,6,3,5,30,7,2,1,3,1,1,2,2,1,1,3,6,1,1,6,3,5,30,7,2,6,2,2,2,1,3,1,1,6,6,3,5,30,7,2,1,3,1,1,2,2,2,2,2,3,5,30,7,2,2,2,2,3,1,2,1,1,1,3,6,6,6,3,5,30,7,2,1,2,3,5,30,7,2,1,1,1,1,2,1,1,1,1,2,1,1,1,1,1,3,5,30,7,2,1,1,1,1,2,2,1,3,5,30,7,2,2,2,1,3,1,1,1,2,1,1,2])"
    ],
    "sample_276": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 0, 0, 1], [0, 0, 1, 0], [0, 1, 0, 0], [1, 0, 0, 0]])",
        "findChampion(grid = [[0, 0, 1], [1, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0,1,0], [0,0,1], [1,0,0]])",
        "findChampion(grid = [[1,0,0],[0,1,0],[0,0,1]])",
        "findChampion(grid = [[0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 1, 1, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0, 1], [1, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0]])",
        "findChampion(grid = [[0, 0, 0, 0, 1], [0, 0, 0, 0, 1], [0, 0, 0, 0, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[-1, 0, 1], [1, 1, 0], [-1, 1, -1]])",
        "findChampion(grid = [[0, 0, 1, 0, 0], [0, 0, 0, 0, 0], [1, 0, 0, 0, 1], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]])"
    ],
    "sample_320": [
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [4, 6, 2, 3, 1])",
        "maxStrength(nums = [2, 4, 5])",
        "maxStrength(nums = [4, 6, 2, 3, 1, 5])",
        "maxStrength(nums = [6, 7, 3, 10])",
        "maxStrength(nums = [2, 3, 9, 10])",
        "maxStrength(nums = [-2,1,-3,4,-1,2,1,-5,4])",
        "maxStrength(nums = [-2, 2, 0, 2, 1])",
        "maxStrength(nums = [10, 2, 3, 4, 5, 6, 7, 8, 9, 1])",
        "maxStrength(nums = [2, 1, 4, 5, 7, 6])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"za\",\"ab\",\"abc\",\"xy\"])",
        "minimizeConcatenatedLength(words = [\"aaa\", \"bbb\", \"abab\"])",
        "minimizeConcatenatedLength(words = [\"b\", \"z\", \"y\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"f\", \"p\", \"q\", \"y\"])",
        "minimizeConcatenatedLength(words = [\"me\",\"to\",\"the\",\"house\"])",
        "minimizeConcatenatedLength(words = [\"wx\", \"wi\", \"wa\", \"zz\"])",
        "minimizeConcatenatedLength(words = [\"b\", \"aa\", \"ac\", \"d\", \"zz\", \"p\"])",
        "minimizeConcatenatedLength(words = [\"it\", \"him\", \"was\"])",
        "minimizeConcatenatedLength(words = [\"ngh\", \"xvw\", \"nhr\"])"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"xyz\", s3 = \"xy\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"bacde\", s3 = \"cdede\")",
        "findMinimumOperations(s1 = \"abcdaf\", s2 = \"fgh\", s3 = \"fgha\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"aabc\", s3 = \"bdc\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"abcds\", s3 = \"abcdi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"aqweq\")"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10])",
        "alternatingSubarray(nums = [1,2,1,2,1,2,1])",
        "alternatingSubarray(nums = [2, 4, 6, 6, 4, 2])",
        "alternatingSubarray(nums = [2, 4, 7, 1, 3, 2, 1, 2, 0, 3])",
        "alternatingSubarray(nums = [1, 1, 0, 2, 0, 1, 1, 0, 0, 0, 1])",
        "alternatingSubarray(nums = [3, 2, 4, 1, 6, 5, 2])",
        "alternatingSubarray(nums = [10,10,20,20,30,30])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 4, 3, 2, 1, 1, 1, 2, 3, 4])"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1,0,0],[0,1,0],[0,0,1]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[1,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,1]])",
        "findChampion(grid = [[0,1,0],[0,1,1],[0,1,0]])",
        "findChampion(grid = [[1, 0, 0, 0, 0], [1, 1, 0, 1, 0], [1, 1, 1, 1, 0], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]])",
        "findChampion(grid = [[1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0], [0, 0, 1, 1, 0, 1], [0, 1, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0], [1, 0, 0, 0, 0, 1]])"
    ],
    "sample_304": [
        "countSeniors(details = [\"123456789012345\", \"234567890123456\", \"345678901234567\"])",
        "countSeniors(details = [\"01-02-1950\",\"01-02-1960\",\"01-02-1970\"])",
        "countSeniors(details = [\"I am 25 years old\", \"I am 75 years old\", \"I am 85 years old\"])",
        "countSeniors(details = [\"Jan 12\", \"Apr 18\", \"Aug 22\"])",
        "countSeniors(details = [\"2001-01-01,John,Snow\", \"2001-01-01,Katniss,Everdeen\"])",
        "countSeniors(details = [\"A111Smith36\", \"A111Jones80\"])",
        "countSeniors(details = [\"Douglas 28\", \"Lucas 10\", \"Mike 65\"])",
        "countSeniors(details = [\"23/12/1959\", \"11/01/1998\", \"27/03/2001\"])",
        "countSeniors(details = [\"Vasudev,27\",\"Richi,20\",\"Anisha,75\"])",
        "countSeniors(details = ['AB102939JB', 'AC809876RH', 'EB901028EF'])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"rhythms\", k = 4)",
        "beautifulSubstrings(s = \"beautiful\", k = 3)",
        "beautifulSubstrings(s = \"abcdef\", k = 1)",
        "beautifulSubstrings(s = \"abaaabbbbb\", k = 3)",
        "beautifulSubstrings(s = \"hhxpxmxxxxxnnxyz\", k = 20)",
        "beautifulSubstrings(s = \"sdfeufhciufugdabvldlfv\", k = 4)"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"11001100\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101\", k = 2)",
        "shortestBeautifulSubstring(s = \"0001101000\", k = 2)",
        "shortestBeautifulSubstring(s = \"100110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"111000111\", k = 2)",
        "shortestBeautifulSubstring(s = \"10111000001\", k = 2)",
        "shortestBeautifulSubstring(s = \"1110001111000\", k = 2)",
        "shortestBeautifulSubstring(s = \"0100100100\", k = 2)",
        "shortestBeautifulSubstring(s = \"10011100111111\", k = 2)",
        "shortestBeautifulSubstring(s = \"0001011111100100111100111111000\", k = 3)"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"ca\", \"bb\", \"ac\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"b\", \"nb\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"eggs\", \"karat\", \"apple\", \"snack\", \"tuna\"])",
        "minimizeConcatenatedLength(words = [\"b\",\"aa\",\"a\",\"bb\"])",
        "minimizeConcatenatedLength(words = [\"pq\", \"qr\", \"rs\"])",
        "minimizeConcatenatedLength(words = [\"ch\", \"r\", \"ha\", \"c\", \"o\", \"a\", \"t\"])",
        "minimizeConcatenatedLength(words = [\"visited\", \"visits\"])",
        "minimizeConcatenatedLength(words = [\"tiny\", \"horse\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"bef\", \"bee\"])"
    ],
    "sample_327": [
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 7)",
        "isFascinating(n = 7)",
        "isFascinating(n = 20)",
        "isFascinating(n = 6)",
        "isFascinating(n = 222)",
        "isFascinating(n = 13)",
        "isFascinating(n = 42)",
        "isFascinating(n = 98)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1], [2]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1], [2, 3]])",
        "matrixSum(nums = [[0, 0], [0, 0]])",
        "matrixSum(nums = [[1, 5], [2, 4]])",
        "matrixSum(nums = [[2, 9, 1], [8, 3, 6], [4, 0, 5]])",
        "matrixSum(nums = [[1, 1, 2], [0, 2, 3], [0, 2, 3]])",
        "matrixSum(nums = [[1],[5,2],[2,4,7],[6,8]])"
    ],
    "sample_326": [
        "isFascinating(n = 111)",
        "isFascinating(n = 100)",
        "isFascinating(n = 999)",
        "isFascinating(n = 999)",
        "isFascinating(n = 145)",
        "isFascinating(n = 134)",
        "isFascinating(n = 12)",
        "isFascinating(n = 7)",
        "isFascinating(s = 145)",
        "isFascinating(n = 19)"
    ],
    "sample_275": [
        "findChampion(grid = [[0,1],[1,0]])",
        "findChampion(grid = [[0,1],[1,0]])",
        "findChampion(grid = [[1,0,0],[0,1,0],[0,0,1]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])",
        "findChampion(grid = [[1, 1, 0], [1, 1, 1], [0, 1, 1]])",
        "findChampion(grid = [[1, 1, 1], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 0], [0, 1, 0]])",
        "findChampion(grid = [[1, 1, 1], [1, 1, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[2, 3], [2, 4]])"
    ],
    "sample_260": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1, 4, 2, 3])",
        "minimumSum(nums = [1,2,3,4,5,6,7])",
        "minimumSum(nums = [4, 3, 5, 2, 1, 7])",
        "minimumSum(nums = [8, 2, 4, 5])",
        "minimumSum(nums = [3, 10, 5, 20, 2])",
        "minimumSum(nums = [3, 2, 1, 5, 6, 4])",
        "minimumSum(nums = [4, 5, 0, 2, 3, 1])",
        "minimumSum(nums = [4, 2, 5, 7, 3, 6, 1, 8])",
        "minimumSum(nums = [4, 3, 5, 7, 6, 1, 2])"
    ],
    "sample_322": [
        "isFascinating(n = 100)",
        "isFascinating(n = 10)",
        "isFascinating(n = 33)",
        "isFascinating(n = 42)",
        "isFascinating(n = 42)",
        "isFascinating(n = 97)",
        "isFascinating(n = 998)",
        "isFascinating(n = 452)",
        "isFascinating(n = 2351)",
        "isFascinating(n = 942784)"
    ],
    "sample_248": [
        "minOperations(s1 = \"010\", s2 = \"110\", x = 1)",
        "minOperations(s1 = \"00101\", s2 = \"11100\", x = 1)",
        "minOperations(s1 = \"10111\", s2 = \"10000\", x = 3)",
        "minOperations(s1 = \"010\", s2 = \"101\", x = 3)",
        "minOperations(s1 = \"0110\", s2 = \"1001\", x = 2)",
        "minOperations(s1 = \"101\", s2 = \"100\", x = 2)",
        "minOperations(s1 = \"10001\", s2 = \"1011\", x = 3)",
        "minOperations(s1 = \"10101\", s2 = \"01110\", x = 5)",
        "minOperations(s1 = \"1100\", s2 = \"1011\", x = 4)",
        "minOperations(s1 = \"010101\", s2 = \"110101\", x = 2)"
    ],
    "sample_342": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 3, y = 3, z = 3)",
        "longestString(x = 3, y = 3, z = 3)",
        "longestString(x = 2, y = 1, z = 6)",
        "longestString(x = 2, y = 1, z = 6)",
        "longestString(x = 1, y = 1, z = 6)"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [8, 5], moveTo = [9, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 4], moveTo = [4, 2])",
        "relocateMarbles(nums = [1, 2, 5, 8, 9], moveFrom = [1, 2], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 5, 8, 9], moveFrom = [5, 5], moveTo = [6, 8])",
        "relocateMarbles(nums = [4, 5, 6, 8, 9], moveFrom = [4, 5], moveTo = [8, 9])",
        "relocateMarbles(nums = [8, 9, 5, 6], moveFrom = [8, 6], moveTo = [5, 9])",
        "relocateMarbles(nums = [1, 4, 8, 9], moveFrom = [1, 8], moveTo = [4, 9])",
        "relocateMarbles(nums = [1, 3, 5, 7, 9], moveFrom = [5, 7], moveTo = [8, 6])",
        "relocateMarbles(nums = [3, 4, 5, 6, 8], moveFrom = [3, 8], moveTo = [9, 5])",
        "relocateMarbles(nums = [1, 3, 5, 8], moveFrom = [1, 8], moveTo = [3, 5])"
    ],
    "sample_306": [
        "countSeniors(details = [\"Ms. Ann\", \"Age: 75\", \"Mr. John\", \"Age: 68\"])",
        "countSeniors(details = [\"sam, 12, male\", \"sara, 42, female\", \"alex, 73, male\"])",
        "countSeniors(details = [\"Name: John, Age: 56\", \"Name: Ken, Age: 70\", \"Name: Dora, Age: 33\"])",
        "countSeniors(details = [\"Senior,Jane,65\", \"Junior,Jim,45\", \"Senior,Lucy,70\"])",
        "countSeniors(details = [\"Victor,age:52\", \"Kamal,age:7\", \"Rahul,age:44\"])",
        "countSeniors(details = [\"Ms. Ann:F:102\", \"Ms. Emily:F:85\", \"Ms. Lea:F:90\", \"Mr. Nick:M:60\", \"Ms. Kim:F:51\"])",
        "countSeniors(details = [\"Edward,25\", \"Nicole,82\", \"Brian,18\", \"Mary,70\", \"Joe,32\"])",
        "countSeniors(details = [\"F,28,0000\", \"F,34,0000\", \"M,45,0000\", \"M,43,0000\", \"M,42,0000\"])",
        "countSeniors(details = [\"cn23-017-0512\", \"cn19-023-0521\", \"cn19-023-1234\"])",
        "countSeniors(details = [\"250120100823\", \"630520190630\", \"201011200823\", \"190503200630\"])"
    ],
    "sample_303": [
        "countSeniors(details = [\"Bill,65\", \"Mary,72\"])",
        "countSeniors(details = [\"age=18,name=Alice\", \"age=78,name=Peter\"])",
        "countSeniors(details = [\"Gary 24 M\", \"Pam 44 F\", \"Tyler 14 M\", \"John 82 M\"])",
        "countSeniors(details = [\"Johny 1990\", \"Johny 1992\", \"Johny 1959\"])",
        "countSeniors(details = ['Sam,30', 'Andy,19', 'Zeph,78'])",
        "countSeniors(details = [\"abc,72,male,Sydney\", \"abc,52,female,Perth\"])",
        "countSeniors(details = [\"abc,1913\", \"bca,1825\", \"abc,1712\"])",
        "countSeniors(details = [\"andreas,56\",\"bill,73\",\"colin,35\",\"dave,47\",\"fred,12\"])",
        "countSeniors(details = [\"agrfg362\", \"ewr45348\", \"qwer56438\", \"rtf34556\"])",
        "countSeniors(details = [\"B:1970:Brown:Sylvia:f\", \"A:1968:Green:Micah:m\", \"B:1980:Brown:Anne:f\", \"A:1955:Smith:Bob:m\", \"B:1980:Brown:Jill:f\", \"A:1958:Smith:Alice:f\", \"A:1950:Green:Dan:m\"])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7, 8], moveTo = [9, 5])",
        "relocateMarbles(nums = [5, 7, 8, 9], moveFrom = [7, 9], moveTo = [6, 8])",
        "relocateMarbles(nums = [5, 8, 9, 6], moveFrom = [8, 5], moveTo = [5, 8])",
        "relocateMarbles(nums = [3, 8, 5, 6], moveFrom = [3, 6], moveTo = [6, 3])",
        "relocateMarbles(nums = [5, 8, 9, 10], moveFrom = [8, 10], moveTo = [12, 14])",
        "relocateMarbles(nums = [4, 6, 8, 9], moveFrom = [4, 6], moveTo = [8, 5])",
        "relocateMarbles(nums = [1, 2, 5, 8], moveFrom = [2, 5], moveTo = [1, 8])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [1, 2, 3, 4], moveTo = [3, 4, 5, 6])",
        "relocateMarbles(nums = [8, 9, 5, 7], moveFrom = [8, 5], moveTo = [9, 7])",
        "relocateMarbles(nums = [5, 5, 6, 6, 8, 8], moveFrom = [5, 6, 5, 8], moveTo = [8, 5, 8, 5])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ba\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"adc\")",
        "findMinimumOperations(s1 = \"cat\", s2 = \"banana\", s3 = \"cattle\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"daf\")",
        "findMinimumOperations(s1 = \"axxx\", s2 = \"ayxx\", s3 = \"axxx\")",
        "findMinimumOperations(s1 = \"gcd\", s2 = \"xhf\", s3 = \"ihf\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"cde\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"xy\", s2 = \"xz\", s3 = \"yy\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"abde\", s3 = \"ade\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"xzy\", s3 = \"xyy\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcde\", s3 = \"abcdef\")",
        "findMinimumOperations(s1 = \"dog\", s2 = \"race\", s3 = \"car\")",
        "findMinimumOperations(s1 = \"cat\", s2 = \"ca\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"deeb\", s2 = \"dee\", s3 = \"deeee\")",
        "findMinimumOperations(s1 = \"xzaz\", s2 = \"xza\", s3 = \"xzb\")"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1, 3, 5])",
        "minimumRightShifts(nums = [3,4,5,1,2])",
        "minimumRightShifts(nums = [1,2])",
        "minimumRightShifts(nums = [1,3,4,5])",
        "minimumRightShifts(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11])",
        "minimumRightShifts(nums = [10, 11, 12, 13])",
        "minimumRightShifts(nums = [2,4,6,8,10])"
    ],
    "sample_453": [
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcdef\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aaabb\")",
        "minChanges(s = \"ab\")",
        "minChanges(s = \"1001\")",
        "minChanges(s = \"xyzz\")",
        "minChanges(s = \"baaab\")",
        "minChanges(s = \"22211222\")"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [10, 1, 2, 3, 4, 5], target = 32)",
        "lengthOfLongestSubsequence(nums = [2, 2, 1], target = 3)",
        "lengthOfLongestSubsequence(nums = [100, 101, 10, 11], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8], target = 3)",
        "lengthOfLongestSubsequence(nums = [2, 5, 1, 0], target = 3)",
        "lengthOfLongestSubsequence(nums = [2, 4, 7, 10, 1, 3, 5, 8], target = 9)",
        "lengthOfLongestSubsequence(nums = [5, 4, 1, 2, 3], target = 13)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 2, 7], target = 3)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6], target = 10000)",
        "lengthOfLongestSubsequence(nums = [-2, 7, -4, 3, 0, 2, 2, 4], target = 6)"
    ],
    "sample_367": [
        "sortVowels(s = \"Hello\")",
        "sortVowels(s = \"pimHly\")",
        "sortVowels(s = \"liMph\")",
        "sortVowels(s = \"lImPh\")",
        "sortVowels(s = \"Hello, World\")",
        "sortVowels(s = \"plmhY\")",
        "sortVowels(s = \"pizza\")",
        "sortVowels(s = \"plemHP\")",
        "sortVowels(s = \"pLaying\")",
        "sortVowels(s = \"lPhEm\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence(nums = [10, 1, 2, 3, 4], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7, 9], target = 0)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 1], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 3, 2, 2, 6], target = 7)",
        "lengthOfLongestSubsequence(nums = [5,1,3,5,2,3,4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5], target = 4)",
        "lengthOfLongestSubsequence(nums = [2,3,5,7,11,13,17], target = 8)"
    ],
    "sample_381": [
        "countPairs(nums = [1, 2, 3, 4], t = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6, 7], t = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8], t = 6)",
        "countPairs(nums = [1,2,3,4,5], t = 6)",
        "countPairs(nums = [1,2,3,4,5,6], t = 6)",
        "countPairs(nums = [1, 1, 2, 3, 4, 5], t = 4)",
        "countPairs(nums=[1, 2, 3, 4, 5, 6], t=6)",
        "countPairs(nums = [1,1,2,3,2,4,4], t = 4)",
        "countPairs(nums = [1, 1, 2, 3, 5, 8, 13], t = 24)"
    ],
    "sample_366": [
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [0, 2, 3, 4])",
        "isGood(nums = [1, 0, 2, 4, 3])",
        "isGood(nums = [0, 2, 3, 4, 5])",
        "isGood(nums = [0,1,2,3,4,5,6,7,8,9])",
        "isGood(nums = [0, 2, 3, 4, 6, 7, 8, 9, 10, 11])",
        "isGood(nums = [0, 2, 1, 3, 4, 5, 6, 7, 8, 9])",
        "isGood(nums = [0, 3, 5, 2, 6, 1, 4])"
    ],
    "sample_369": [
        "sortVowels(s = 'Hello')",
        "sortVowels(s = \"hello\")",
        "sortVowels(s = \"hello\")",
        "sortVowels(s = 'phLmY')",
        "sortVowels(s = \"plymph\")",
        "sortVowels(s = \"pleUmpH\")",
        "sortVowels(s = \"lImph!\")",
        "sortVowels(s = \"pLUmp\")",
        "sortVowels(s = \"HUmPy\")",
        "sortVowels(s = \"HYpmL\")"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [3, 4, 2, 1, 5])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [4, 3, 2, 1])",
        "minimumRightShifts(nums = [2, 3, 4, 1, 2])",
        "minimumRightShifts(nums = [2, 2, 2, 4, 5])",
        "minimumRightShifts(nums = [1,2,3,4,5,6,7])",
        "minimumRightShifts(nums = [2,3,1])",
        "minimumRightShifts(nums = [1, 5, 4, 2, 3, 7])",
        "minimumRightShifts(nums = [7, 6, 2, 4, 9])",
        "minimumRightShifts(nums = [1, 5, 6, 7, 8, 10, 12])"
    ],
    "sample_448": [
        "minChanges(s = \"fdff\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"0101\")",
        "minChanges(s = \"010011\")",
        "minChanges(s = \"32\")",
        "minChanges(s = \"bab\")",
        "minChanges(s = \"221122\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"222222\")",
        "minChanges(s = \"20001\")"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"cab\", s2 = \"abc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"hi\", s2 = \"ih\")"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [3,1,2,3,2])",
        "minLengthAfterRemovals(nums = [3,1,2,3,2])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [3,1,1])",
        "minLengthAfterRemovals(nums = [5,1,5])",
        "minLengthAfterRemovals(nums = [0,1,2,3,4,5,6,7,8,9,10])",
        "minLengthAfterRemovals(nums = [1,1,1,2,3,3,3,2])",
        "minLengthAfterRemovals(nums = [1,2,1,2,1,2,1,2,3,4,5,6])",
        "minLengthAfterRemovals(nums = [1,3,5,3,7,7])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6])"
    ],
    "sample_361": [
        "isGood(a = [3, 0, 1, 1, 2])",
        "isGood(a = [0, 1, 1, 2, 3, 4, 4])",
        "isGood(a = [3, 0, 1, 3, 1])",
        "isGood(a = [0, 1, 3, 3, 4])",
        "isGood(a = [0, 1, 1, 0, 1, 2])",
        "isGood(a = [3, 2, 1, 2, 4])",
        "isGood(a = [0, 0, 2, 3, 3, 3])",
        "isGood(a = [0, 1, 0, 2, 0, 3, 0, 3, 0, 4])",
        "isGood(a = [0, 1, 1, 2, 2, 2, 4, 5])",
        "isGood(a = [1, 0, 2, 0, 1, 0, 3, 2, 0])"
    ],
    "sample_419": [
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9], k = 6)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 1)",
        "minOperations(nums = [1,1,2,2,3,4,5,6], k = 3)",
        "minOperations(nums = [5,3,4,2,1], k = 2)",
        "minOperations(nums = [1,2,3,4,5,1,2,3,4,5], k = 4)",
        "minOperations(nums = [1,3,7,4,4], k = 4)",
        "minOperations(nums = [2,3,5,6,10,11,15], k = 5)"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1])",
        "findMaximumLength(nums = [1,3,5,7,9])",
        "findMaximumLength(nums = [3,1,2,4,3])",
        "findMaximumLength(nums = [3, 1, 3, 4, 1])",
        "findMaximumLength(nums = [1,1,1,2,2,2])",
        "findMaximumLength(nums = [2, 1, 2, 5, 2, 3, 4])",
        "findMaximumLength(nums = [-9, -1, 0, 1, 2, 3, 4, 5, 6])",
        "findMaximumLength(nums=[3, 1, 5, 4, 4])",
        "findMaximumLength(nums = [2, 2, 3, 5, 11, 17, 20])",
        "findMaximumLength(nums = [4, 6, 3, 3, 1, 4])"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [4, 2, 3, 6])",
        "maxSubarrays(nums = [0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [0, 0, 0, 1, 0, 0])",
        "maxSubarrays(nums = [8, 2, 1, 6, 0])",
        "maxSubarrays(nums = [2, 6, 1, 4, 0])",
        "maxSubarrays(nums = [1, 2, 3, 4, 6, 5])",
        "maxSubarrays(nums = [2, 6, 3, 0, 1, 5])",
        "maxSubarrays(nums = [2, 3, 1, 4, 1, 6])",
        "maxSubarrays(nums = [8, 4, 8, 8, 4, 8, 8])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"ab\", str2 = \"bac\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"cab\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"ba\")",
        "canMakeSubsequence(str1 = \"b\", str2 = \"a\")",
        "canMakeSubsequence(str1 = \"abbc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"bca\", str2 = \"a\")",
        "canMakeSubsequence(str1 = \"bccde\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"cdp\", str2 = \"abf\")",
        "canMakeSubsequence(str1 = \"bubbles\", str2 = \"zbabble\")",
        "canMakeSubsequence(str1 = \"dhjkasdfh\", str2 = \"hgjk\")"
    ],
    "sample_402": [
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 1, 2, 1, 2], m = 2, k = 2)",
        "maxSum(nums = [15, 2, 3, 4, 5, 6], m = 3, k = 2)",
        "maxSum(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], m = 14, k = 14)",
        "maxSum(nums = [1,2,3,1,4,5,3,2,5,1], m = 3, k = 6)",
        "maxSum(nums = [1, 3, 3, 2, 4, 3, 1, 2, 4, 1], m = 4, k = 4)",
        "maxSum(nums = [-1, 5, -2, 3, 5], m = 3, k = 2)",
        "maxSum(nums = [0, 2, 3, 5, 6, 3, 4], m = 2, k = 1)",
        "maxSum(nums = [1, 1, 2, 4, 2, 3, 1, 2, 3, 3, 2, 4, 6, 4, 2, 2, 2, 1], m = 2, k = 12)"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"a\", \"b\", \"c\"], x = \"x\")",
        "findWordsContaining(words = [\"cat\", \"dog\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"g\")",
        "findWordsContaining(words = [\"aab\", \"baa\", \"cab\"], x = \"b\")",
        "findWordsContaining(words = [\"chandler\", \"bing\", \"monica\"], x = \"a\")",
        "findWordsContaining(words = [\"hi\", \"hello\", \"welcome\", \"bye\"], x = \"a\")",
        "findWordsContaining(words = [\"wa\", \"xa\", \"ya\", \"za\"], x = \"x\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"home\", \"art\"], x = \"a\")",
        "findWordsContaining(words = [\"pigs\", \"dogs\", \"cats\", \"bulls\"], x = \"x\")",
        "findWordsContaining(words = [\"c\", \"cc\", \"ccc\", \"aa\", \"aaaa\", \"aaa\"], x = \"aa\")"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\",\"prev\",\"prev\",\"2\",\"prev\"])",
        "lastVisitedIntegers(words = ['1', 'prev', '2', 'prev', 'prev'])",
        "lastVisitedIntegers(words = [\"42\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"4\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"3\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"0\", \"prev\", \"1\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"999\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"10\", \"4\", \"prev\"])"
    ],
    "sample_422": [
        "minOperations(nums = [1,2,2,1,1], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], k = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7], k = 6)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "minOperations(nums = [1,1,2,2,2,3,3,1,2,1,2], k = 2)",
        "minOperations(nums = [2, 2, 2, 1, 1, 1, 3, 3, 3, 3], k = 3)",
        "minOperations(nums = [5, 3, 1, 4, 2], k = 10)",
        "minOperations(nums = [5, 2, 7, 4, 9, 6, 3], k = 7)",
        "minOperations(nums = [3, 6, 6, 3, 4, 3, 6, 6, 2, 3], k = 3)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1,2,3,4,5], k = 2)",
        "minOperations(nums = [1, 2, 2, 1], k = 2)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "minOperations(nums = [1, 2, 4, 1, 2], k = 2)",
        "minOperations(nums = [1, 3, 1, 4, 2, 3, 5, 4], k = 3)",
        "minOperations(nums = [0, 2, 0, 2, 0], k = 2)",
        "minOperations(nums = [1, 3, 4, 5, 8], k = 4)",
        "minOperations(nums = [2, 4, 5, 11, 10], k = 3)"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1])",
        "minimumSeconds(nums = [0])",
        "minimumSeconds(nums = [3, 2, 1, 5, 4])",
        "minimumSeconds(nums = [3, 2, 1, 2, 3])",
        "minimumSeconds(nums = [1,2,1,2,1,2,1])",
        "minimumSeconds(nums = [7, 6, 2, 2])",
        "minimumSeconds(nums = [3, 2, 1, 2, 4, 5, 1, 2, 3, 4])",
        "minimumSeconds(nums = [1000, 1000])",
        "minimumSeconds(nums = [1, 1, 1, 4, 5, 5])",
        "minimumSeconds(nums = [7, 4, 9, 6, 8, 6])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3], target = 3)",
        "countPairs(nums = [1, 2, 3], target = 3)",
        "countPairs(nums = [1, 1, 2, 2, 3, 3, 4, 4], target = 4)",
        "countPairs(nums = [1, 2, 3], target = 5)",
        "countPairs(nums = [1, 2, 3], target = 5)",
        "countPairs(nums = [1, 2, 3], target = 6)",
        "countPairs(nums = [1,2,3,4], target = 4)",
        "countPairs(nums = [1,1,2,2,3,3,4,4], target = 7)",
        "countPairs(nums = [3,1,1,2], target = 4)",
        "countPairs(nums = [1, 2, 3, 1], target = 3)"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"house\", \"mouse\", \"dog\"], x = \"o\")",
        "findWordsContaining(words = [\"abcd\", \"cd\", \"a\"], x = \"cd\")",
        "findWordsContaining(words = [\"sky\", \"cloud\", \"blue\", \"yellow\"], x = \"y\")",
        "findWordsContaining(words = [\"happy\", \"tap\", \"go\", \"thanks\"], x = \"ap\")",
        "findWordsContaining(words = [\"cat\", \"caterpillar\", \"Centipede\"], x = \"c\")",
        "findWordsContaining(words = [\"cat\", \"fox\", \"bear\", \"anteater\"], x = \"a\")",
        "findWordsContaining(words = [\"grass\", \"dog\", \"grass\", \"grasshopper\"], x = \"ass\")",
        "findWordsContaining(words = [\"star\", \"telescope\", \"car\", \"sea\"], x = \"ca\")",
        "findWordsContaining(words = [\"abc\",\"defg\",\"aa\",\"cd\"], x = \"a\")",
        "findWordsContaining(words = [\"eaxmple\", \"largest\", \"sample\", \"small\", \"tiny\", \"huge\"], x = \"s\")"
    ],
    "sample_372": [
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = \"letcode\")",
        "sortVowels(s = \"latecede\")",
        "sortVowels(s = \"Leto\")",
        "sortVowels(s = \"telephone\")",
        "sortVowels(s = \"latecoed\")",
        "sortVowels(s = \"LadiesEdition\")",
        "sortVowels(s = \"L4e0tceded\")",
        "sortVowels(s = \"ElOdEcedt\")"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [3,1,2,3,2,1,3])",
        "minLengthAfterRemovals(nums = [3,3,2,1,3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 5, 5])",
        "minLengthAfterRemovals(nums = [2, 3, 3, 2, 4, 4])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8])",
        "minLengthAfterRemovals(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5])",
        "minLengthAfterRemovals(nums = [1, 4, 1, 4, 2, 2, 2, 1])",
        "minLengthAfterRemovals(nums = [0,1,1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 3, 2, 2, 3, 2, 1, 1, 1, 3, 2, 3, 2, 2, 2, 3])"
    ],
    "sample_452": [
        "minChanges(s = \"abcdef\")",
        "minChanges(s = \"aabbccdd\")",
        "minChanges(s = \"aabbccdd\")",
        "minChanges(s = \"foobar\")",
        "minChanges(s = \"cdefg\")",
        "minChanges(s = \"aabab\")",
        "minChanges(s = \"aabaa\")",
        "minChanges(s = \"bacca\")",
        "minChanges(s = \"wwzz\")",
        "minChanges(s = \"wowwwwww\")"
    ],
    "sample_385": [
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1,1,2,2,3,3,4,4], target = 4)",
        "countPairs(nums = [1, 1, 2, 2, 3, 3, 4, 4], target = 4)",
        "countPairs(nums = [1, 1, 2, 2, 3, 3, 4, 4], target = 6)",
        "countPairs(nums = [1,1,2,2,3,3,4,4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 6)",
        "countPairs(nums = [1, 1, 1, 1], target = 2)"
    ],
    "sample_427": [
        "minOperations(nums = [1, 1, 1, 2, 2, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3])",
        "minOperations(nums = [1,3,4,5,2])",
        "minOperations(nums = [2, 2, 2, 5, 5])",
        "minOperations(nums = [4, 1, 2, 4, 1, 2, 4])",
        "minOperations(nums = [2, 3, 3, 2, 2, 2])",
        "minOperations(nums = [1,1,1,4,4,4,2,2,4,4,4,4,4])",
        "minOperations(nums = [88, 88, 88, 88, 20])",
        "minOperations(nums = [5, 1, 3, 3, 4, 4, 4, 4, 4, 5])",
        "minOperations(nums = [1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [3,3,3,3,5,5,5,2,2,7])",
        "minLengthAfterRemovals(nums = [3, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 5, 5])",
        "minLengthAfterRemovals(nums = [1, 1, 0, 0, 0])",
        "minLengthAfterRemovals(nums = [2, 3, 3, 2, 4])",
        "minLengthAfterRemovals(nums = [1,1,1,0,0])",
        "minLengthAfterRemovals(nums = [1, 3, 3, 7, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 0, 0, 0, 4, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1,1,2,2,2])"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3, 1])",
        "minimumCoins(prices = [1, 2, 3, 1])",
        "minimumCoins(prices = [1, 1, 1, 1])",
        "minimumCoins(prices = [1,2])",
        "minimumCoins(prices = [1,2,3])",
        "minimumCoins(prices = [1, 5, 3])",
        "minimumCoins(prices = [1, 2, 5, 6])",
        "minimumCoins(prices = [0, 1, 0, 1, 0, 1])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"apple\", \"cherry\", \"orange\", \"lemon\"], x = \"e\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"tiger\"], x = \"t\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\", \"grapefruit\", \"kiwi\"], x = \"a\")",
        "findWordsContaining(words = [\"abc\", \"def\", \"xyz\", \"uvw\"], x = \"z\")",
        "findWordsContaining(words = [\"cat\", \"bar\", \"foo\", \"barz\"], x = \"ar\")",
        "findWordsContaining(words = [\"bicycle\", \"car\", \"motorcycle\", \"bus\"], x = \"c\")",
        "findWordsContaining(words = [\"Apple\", \"Banana\", \"Pineapple\", \"Mango\"], x = \"a\")",
        "findWordsContaining(words = [\"helloworld\", \"firefox\", \"internet\", \"browsers\"], x = \"o\")",
        "findWordsContaining(words = [\"mother\", \"sister\", \"brother\", \"wife\", \"grandmother\"], x = \"m\")",
        "findWordsContaining(words = [\"babble\", \"kitty\", \"chicken\"], x = \"it\")"
    ],
    "sample_420": [
        "minOperations(nums = [1, 1, 2, 2, 2], k = 2)",
        "minOperations(nums = [1, 2, 3, 4], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 4)",
        "minOperations(nums = [3,2,1,5,4], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 7)",
        "minOperations(nums = [1, 4, 5, 6, 7], k = 3)",
        "minOperations(nums = [7, 6, 4, 5], k = 3)",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 3, 4, 4], k = 2)",
        "minOperations(nums = [4, 3, 5, 1, 3], k = 1)"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 4, 5])",
        "isGood(nums = [1,2,3,5])",
        "isGood(nums = [1,3,4,5])",
        "isGood(nums = [1, 2, 3, 4, 5, 8])",
        "isGood(nums = [1, 2, 3, 4, 5, 7, 8])",
        "isGood(nums = [5, 3, 1, 4, 2])",
        "isGood(nums = [1,3,5,7])",
        "isGood(nums = [0, 1, 2, 2, 4])",
        "isGood(nums = [0,2,2,3,5])",
        "isGood(nums = [4, 2, 5, 1, 7, 4])"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7], target = 8)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 2)",
        "lengthOfLongestSubsequence(nums = [3, 6, 2, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [4,3,10,9,8], target = 12)",
        "lengthOfLongestSubsequence(nums = [2, 1, 3, 5, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 1, 3, 4, 5], target = 3)",
        "lengthOfLongestSubsequence(nums = [4, 6, 30, 2, 2, 10, 1], target = 7)",
        "lengthOfLongestSubsequence(nums = [-2, 1, 4, -1, 3, 0, -1, 2, 3, 0], target = 5)",
        "lengthOfLongestSubsequence(nums = [26,22,20,17,12,10,5,3], target = 35)",
        "lengthOfLongestSubsequence(nums = [2, 4, 11, 15, 2, 13, 13], target = 14)"
    ],
    "sample_365": [
        "isGood(nums = [1,2,3,3,5])",
        "isGood(nums = [1,2,4,5,5])",
        "isGood(nums = [1,2,3,3,4])",
        "isGood(nums = [1,2,3,4,5,6,6])",
        "isGood(nums = [1,2,3,4,5,5,6,7])",
        "isGood(nums = [1,2,3,4,3,6])",
        "isGood(nums = [1, 1, 1, 1, 2, 1])",
        "isGood(nums = [0, 2, 3, 4, 6, 6])",
        "isGood(nums = [0, 1, 3, 2, 3, 5, 4, 5, 6])",
        "isGood(nums = [0,0,0,0,0,1,1,1,1,2,2,2,3,4,5,6])"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [0, 0, 0, 1])",
        "maxSubarrays(nums = [0, 1, 1, 0, 1, 0, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1])",
        "maxSubarrays(nums = [0, 1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 0, 2, 3, 0])",
        "maxSubarrays(nums = [0,0,0,0,0,0,0,0,0,0])",
        "maxSubarrays(nums = [1,1,0,0,0,1])",
        "maxSubarrays(nums = [0, 0, 1, 1, 0, 1, 1, 1, 0, 1])",
        "maxSubarrays(nums = [0,1,2,7,6,4,1,2,42])"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 2, 8], target = 6)",
        "lengthOfLongestSubsequence(nums = [-2, -1, 1, 2], target = 3)",
        "lengthOfLongestSubsequence(nums = [4, 5, 11, 10], target = 1)",
        "lengthOfLongestSubsequence(nums = [-2, 1, 3, 5], target = 6)",
        "lengthOfLongestSubsequence(nums = [4,8,6,2,4], target = 4)",
        "lengthOfLongestSubsequence(nums = [-2, 1, 2, 3, 2, 1], target = 6)",
        "lengthOfLongestSubsequence(nums = [-2, -1, 2, 1, 1, 4, -5], target = 3)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,3,2,1,4,6], target = 2)"
    ],
    "sample_450": [
        "minChanges(s = \"aaabbbaaa\")",
        "minChanges(s = \"ababbbb\")",
        "minChanges(s = \"101010\")",
        "minChanges(s = \"abccbcba\")",
        "minChanges(s = \"AABABAAB\")",
        "minChanges(s = \"10111\")",
        "minChanges(s = \"abcdabcdab\")",
        "minChanges(s = \"AAAAAACCCC\")",
        "minChanges(s = \"3221132143\")",
        "minChanges(s = \"zbabzbab\")"
    ],
    "sample_463": [
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 9, limit = 3)",
        "distributeCandies(n = 9, limit = 4)",
        "distributeCandies(n = 10, limit = 6)",
        "distributeCandies(n=3, limit=3)"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1, 1])",
        "sumCounts(nums = [3, 1, 2, 3])",
        "sumCounts(nums = [3, 3, 3])"
    ],
    "sample_449": [
        "minChanges(s = \"aba\")",
        "minChanges(s = \"abcdef\")",
        "minChanges(s = \"aaaa\")",
        "minChanges(s = \"aaaa\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"1100\")",
        "minChanges(s = \"aabba\")",
        "minChanges(s = \"aaaaaaaaaaaaaa\")",
        "minChanges(s = \"xyzzaz\")"
    ],
    "sample_425": [
        "minOperations(nums = [1])",
        "minOperations(nums = [3, 1, 3, 2, 3])",
        "minOperations(nums = [2,2,2,3,3])",
        "minOperations(nums = [3, 1, 3, 4, 4])",
        "minOperations(nums = [1,2])",
        "minOperations(nums = [3,1,2,3])",
        "minOperations(nums = [1, 1, 2, 2, 2, 4, 4, 4, 4])",
        "minOperations(nums = [2, 3, 5, 2, 2, 2, 2])",
        "minOperations(nums = [1, 2, 3, 2, 2, 1, 2, 1])",
        "minOperations(nums = [3,1,5,7,8,2,2,2])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"azb\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"axz\", str2 = \"azy\")",
        "canMakeSubsequence(str1 = \"abz\", str2 = \"bzc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"cbz\")",
        "canMakeSubsequence(str1 = \"ba\", str2 = \"abz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bqca\")",
        "canMakeSubsequence(str1 = \"bca\", str2 = \"ac\")",
        "canMakeSubsequence(str1 = \"wxqkj\", str2 = \"kwqnx\")",
        "canMakeSubsequence(str1 = \"dhbhgea\", str2 = \"gegb\")",
        "canMakeSubsequence(str1 = \"vzzhayy\", str2 = \"hay\")"
    ],
    "sample_377": [
        "minimumSeconds(nums = [0])",
        "minimumSeconds(nums = [1,2,4,3])",
        "minimumSeconds(nums = [1,1,1,1,1,1,1,1])",
        "minimumSeconds(nums = [2, 3, 7, 5, 1, 3, 5])",
        "minimumSeconds(nums = [2, 3, 7, 5, 1, 3, 5])",
        "minimumSeconds(nums = [1, 2, 4, 5])",
        "minimumSeconds(nums = [1,2,3,2,1])",
        "minimumSeconds(nums = [2, 3, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4,",
        "minimumSeconds(nums = [4, 5, 4, 4, 1])",
        "minimumSeconds(nums = [0, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4])"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [1, 3, 6, 7, 4, 1, 2], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 20)",
        "lengthOfLongestSubsequence(nums = [5,3,1,4,2], target = 6)",
        "lengthOfLongestSubsequence(nums = [3,2,2,2,5,2,3,4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,2,3,3,4,5], target = 5)",
        "lengthOfLongestSubsequence(nums = [3, 4, 6, 10], target = 9)",
        "lengthOfLongestSubsequence(nums = [2, 1, 5, 3, 6, 1, 2, 5, 3], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 3, 4, 8, 2], target = 6)",
        "lengthOfLongestSubsequence(nums=[7, 2, 3, 8], target=4)",
        "lengthOfLongestSubsequence(nums = [1,2,1,3,4,5,6,3,2,1], target = 8)"
    ],
    "sample_370": [
        "sortVowels(s = \"letcode\")",
        "sortVowels(s = \"leotceded\")",
        "sortVowels(s = \"leotceded\")",
        "sortVowels(s = \"leotceded\")",
        "sortVowels(s = 'lEotced')",
        "sortVowels(s = \"Lettuce\")",
        "sortVowels(s = \"teemo\")",
        "sortVowels(s = \"tEcedoteEleL\")",
        "sortVowels(s = \"loIeEEeetcd\")",
        "sortVowels(s = 'eLOrOllodTce')"
    ],
    "sample_421": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4], k = 3)",
        "minOperations(nums = [1, 2, 3, 4], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 6)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 10)",
        "minOperations(nums = [1,2,3,4,5,6], k = 5)",
        "minOperations(nums = [1,2,3,4,5,6,7,8], k = 2)",
        "minOperations(nums = [4, 1, 6, 2, 7, 9, 5], k = 15)"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 3, 5, 7, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "maxSubarrays(nums = [4, 2, 3, 6, 3, 2, 5, 1])",
        "maxSubarrays(nums = [11, 5, 2, 1, 6, 10])",
        "maxSubarrays(nums = [1, 5, 3, 7, 16, 11, 9])",
        "maxSubarrays(nums = [1,2,3,2,1,2,3,2,3,1])",
        "maxSubarrays(nums = [100, 99, 100, 100, 100])",
        "maxSubarrays(nums = [7, 6, 2, 4, 1, 3, 4, 6, 2])",
        "maxSubarrays(nums = [123, 456, 789, 123456, 456789, 123456])",
        "maxSubarrays(nums = [347, 345, 443, 115, 319, 437, 289])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[1,2],[2,3],[3,4],[4,5]], k = 1)",
        "countPairs(coordinates = [[0,0],[0,1],[1,1],[1,0]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 1], [1, 1], [1, 3], [2, 2]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 1], [1, 1], [2, 2], [1, 0], [0, 1]], k = 1)",
        "countPairs(coordinates = [[0,0],[0,1],[2,1],[2,0]], k = 2)",
        "countPairs(coordinates = [[1, 4], [2, 3], [3, 2], [4, 1]], k = 2)",
        "countPairs(coordinates = [[1, 3], [2, 3], [2, 4]], k = 2)",
        "countPairs(coordinates = [[2,1],[2,2],[2,4],[3,2],[4,1],[4,2]], k = 1)",
        "countPairs(coordinates = [[4, 5], [7, 8], [3, 3]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [0, 1], [2, 2], [4, 2]], k = 2)"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [3, 34, 4, 12, 5, 2], target = 9)",
        "lengthOfLongestSubsequence(nums = [3, 3, 3], target = 6)",
        "lengthOfLongestSubsequence(nums = [3, 3, 2, 3], target = 6)",
        "lengthOfLongestSubsequence(nums = [2, 4, 7, 10, 1, 3, 5, 8], target = 12)",
        "lengthOfLongestSubsequence(nums = [1, 5, 10, 20, 25], target = 10)",
        "lengthOfLongestSubsequence(nums = [5, 15, 4], target = 3)",
        "lengthOfLongestSubsequence(nums = [2, 3, 1, 4, 6], target = 6)",
        "lengthOfLongestSubsequence(nums = [5, 4, 1, 2, 3, 3, 4, 5, 9], target = 5)",
        "lengthOfLongestSubsequence(nums = [2, 7, 3, 1, 5, 6, 7, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [3, 3, 3, 11, 5, 11, 3, 6, 6, 6], target = 15)"
    ],
    "sample_445": [
        "sumCounts(nums = [1])",
        "sumCounts(nums = [1])",
        "sumCounts(nums = [1,2])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1,1,1])",
        "sumCounts(nums = [0])",
        "sumCounts(nums = [3])",
        "sumCounts(nums = [2, 1, 3])",
        "sumCounts(nums=[2, 2, 2])"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"011101\")",
        "minimumBeautifulSubstrings(s = \"5555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555",
        "minimumBeautifulSubstrings(s = \"daily\")",
        "minimumBeautifulSubstrings(s = \"bbbaacdaa\")",
        "minimumBeautifulSubstrings(s = \"jivvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv",
        "minimumBeautifulSubstrings(s = \"312131233\")",
        "minimumBeautifulSubstrings(s = \"baacdabdbabaaabcd\")",
        "minimumBeautifulSubstrings(s = \"3154087125783699867198891919834072469631540871257836998671988919198340724696315408712578369986719889191983407246963154087125783699867198891919834072469631540871257836998671988919198340724696315408712578369986719889191983407246963154087125783699867198891919834072469631540871257836998671988919198340724696315408712578369986719889191983407246963154087125783699867198891919834072469631540871257836998671988919198340724696315408712578369986719889191983407246963154087125783699867198891919834072469631540871257836",
        "minimumBeautifulSubstrings(s = \"1025020025020520520520252025052052025205205205202520520520520252052052052025205202502052052025205205205202520250520250205202502052052052025205205202520520250205205205202520520250205205205202520520520252052052025205205202520520520252025052025020520250205205205202520520520252052052025205205202520520520252052052025205202502052052052025205202502052052052025205205202520520520252052052025205205202520520520252052025020520520520252052025020520520520252052052025205205202520520520252052052025205205202520520250520",
        "minimumBeautifulSubstrings(s = \"0110101101001011011000110000011011010001001100011000101110011001101100100100010110111000110111001111101101010010111001010110001101110011000100111010011111011101100101101110110010001000011110010111111100011101001000100110111011111110111110011011000111100111001001010010010011010010000101010110000011101000010011101111101000010100111001010111000000000011101100100111101101100100111111011010000011110110110101111000101001001111011010000110111110110010000011001101101001110000010100110110010000001010111011111011"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [1,0,1,0,1])",
        "maxSubarrays(nums = [1, 2, 4, 8])",
        "maxSubarrays(nums = [1, -2, -3, 4])",
        "maxSubarrays(nums = [-1, 2, 4, 5])",
        "maxSubarrays(nums = [1,2,4,8,16])",
        "maxSubarrays(nums = [1,1,0,0,0])",
        "maxSubarrays(nums = [-1, -2, 0, 1, 2, -1, -2])",
        "maxSubarrays(nums = [2, 2, -1, -1, 2, 2])",
        "maxSubarrays(nums = [3,-1,2,-5,0])"
    ],
    "sample_401": [
        "maxSum(nums = [-1, -2], m = 1, k = 2)",
        "maxSum(nums = [1,2,3], m = 1, k = 3)",
        "maxSum(nums = [0, 0, 0, 0, 0, 0], m = 3, k = 3)",
        "maxSum(nums = [-4,-2,-3,-1,2,1,4], m = 2, k = 2)",
        "maxSum(nums = [-2,2,-3,-4,1], m = 2, k = 2)",
        "maxSum(nums = [5, 5, 10], m = 1, k = 0)",
        "maxSum(nums = [-1, -1, 1, -2, 2], m = 1, k = 1)",
        "maxSum(nums = [1,1,1,3,4,5,6,7,8,9], m = 2, k = 4)",
        "maxSum(nums = [2, 1, 0, 4, 3, 2, 1, 1, 3], m = 4, k = 3)",
        "maxSum(nums = [1, 4, -5, 5, 4, 9, 1, 0, 5, -2], m = 2, k = 3)"
    ],
    "sample_400": [
        "maxSum(A = [1,2,1,2,3], m = 2, k = 2)",
        "maxSum(A = [2, 1, 5, 5, 8], m = 2, k = 2)",
        "maxSum(A = [1, 2, 3], m = 0, k = 1)",
        "maxSum(A = [0,0,0,0], m = 2, k = 2)",
        "maxSum(A = [-1, -2, -3, 4], m = 2, k = 3)",
        "maxSum(A = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], m = 6, k = 2)",
        "maxSum(A = [2, 1, 3, 4], m = 3, k = 3)",
        "maxSum(A = [2, 2, 1, 2], m = 3, k = 1)",
        "maxSum(A = [1,2,4,1,0], m = 1, k = 3)",
        "maxSum(A = [-9, 10, 2, 3, -5, 6, 7, -1], m = 4, k = 3)"
    ],
    "sample_363": [
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isGood(nums = [0,1,2,3,4,4])",
        "isGood(nums = [1, 2, 2, 3, 4, 5])",
        "isGood(nums = [0,1,2,3,4,5,6,7,8,9])",
        "isGood(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "isGood(nums = [1, 2, 2, 3, 4, 4])",
        "isGood(nums = [1, 1, 2, 2, 3, 4])",
        "isGood(nums = [0, 1, 2, 3, 4, 4, 5, 6])",
        "isGood(nums = [0,1,2,3,4,4,5,5])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1])",
        "minimumSeconds(nums = [3, 2, 1, 5, 4])",
        "minimumSeconds(nums = [1, 2, 3])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumSeconds(nums = [4, 2, 2, 2, 4])",
        "minimumSeconds(nums = [3, 1, 4, 5, 2])",
        "minimumSeconds(nums = [0, 1, 2, 2])",
        "minimumSeconds(nums = [1, 3, 5, 7, 9, 11, 13])",
        "minimumSeconds(nums = [2, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31])",
        "minimumSeconds(nums = [2, 2, 3, 4, 6, 10, 20, 24, 28])"
    ],
    "sample_376": [
        "minimumSeconds(nums = [0])",
        "minimumSeconds(nums = [1, 1, 1, 1])",
        "minimumSeconds(nums = [1,3,5,7,9])",
        "minimumSeconds(nums = [1,2,3,4,5,6])",
        "minimumSeconds(nums = [0, 1])",
        "minimumSeconds(nums = [5, 3, 4])",
        "minimumSeconds(nums = [3, 0, 1, 5, 7, 6])",
        "minimumSeconds(nums = [2,1,1,1,2,4,2,2,1])",
        "minimumSeconds(nums = [1, 1, 1, 2, 2, 3, 4, 5, 6, 7, 8])",
        "minimumSeconds(nums = [2, 3, 4, 10, 1, 2, 3, 4])"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3])",
        "minLengthAfterRemovals(nums = [3,2,2,3])",
        "minLengthAfterRemovals(nums = [3, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [3,1,2])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3,4,4,5])",
        "minLengthAfterRemovals(nums = [1,3,5,7,9])",
        "minLengthAfterRemovals(nums = [0, 1, 2, 3, 0, 1, 2, 3])",
        "minLengthAfterRemovals(nums = [2, 3, 1, 4, 5, 1, 2, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [8, 4, 8, 5, 3, 7, 4, 4, 7, 6, 3, 4, 8, 10, 9, 3, 6, 5, 5, 1])"
    ],
    "sample_399": [
        "maxSum(nums = [1,2], m = 2, k = 1)",
        "maxSum(nums = [1,1,2,2], m = 2, k = 2)",
        "maxSum(nums = [1,2,3,2], m = 2, k = 1)",
        "maxSum(nums = [-1], m = 1, k = 2)",
        "maxSum(nums = [-1,2,-5,0], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18], m = 4, k = 5)",
        "maxSum(nums = [2, -1, 3, -2, 1, 4, 5], m = 2, k = 2)",
        "maxSum(nums = [1, 1, 0, 0, 2, 2, 1], m = 2, k = 3)",
        "maxSum(nums = [4,1,-6,10,-2,-7,8], m = 3, k = 3)",
        "maxSum(nums = [-1, 4, 9, 3, 2, -7, 5, 8, -1, 9], m = 3, k = 4)"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2, 3, 4], m = 3, k = 2)",
        "maxSum(nums = [1,2,3], m = 1, k = 2)",
        "maxSum(nums = [-1, -1, 0], m = 2, k = 2)",
        "maxSum(nums = [1,1,1,1], m = 2, k = 3)",
        "maxSum(nums = [0,1,0,2,3,4,5,6,7,8,9,10], m = 5, k = 4)",
        "maxSum(nums = [0, 1, 0, 2, 3, 3], m = 3, k = 4)",
        "maxSum(nums = [-1, 1, 0, 2, 3, 4], m = 2, k = 2)",
        "maxSum(nums = [4, 4, 3, 3, 4], m = 2, k = 2)",
        "maxSum(nums = [1, 10, -2, 4], m = 2, k = 4)",
        "maxSum(nums = [-5, 2, 3, -1, 4, 4, -7, 2, -5], m = 2, k = 4)"
    ],
    "sample_364": [
        "isGood(nums = [0,1,2,3,4,5,6,7,8])",
        "isGood(nums = [0,1,2,3,4,5,6,7,8,9,10])",
        "isGood(nums = [0,2,1,3,4])",
        "isGood(nums = [1, 2, 3, 4, 6])",
        "isGood(nums = [0, 1, 2, 3, 5, 4])",
        "isGood(nums = [0,3,1,2,4])",
        "isGood(nums = [2, 3, 4, 5, 6])",
        "isGood(nums=[3,2,0,1])",
        "isGood(nums = [4, 1, 2, 6, 0, 3, 5])",
        "isGood(nums = [3,4,2,0,6,1])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1,1])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [5, 5, 5, 5, 5, 5])",
        "minLengthAfterRemovals(nums = [3,3,3,3,3,3,3,3])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [7, 7, 7, 7, 7])",
        "minLengthAfterRemovals(nums = [2, 1, 1, 2, 1, 1])",
        "minLengthAfterRemovals(nums = [7, 2, 2, 4, 3, 2, 2, 2])"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"apple\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\"], x = \"o\")",
        "findWordsContaining(words = [\"apple\", \"pear\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"this\", \"is\", \"an\", \"example\"], x = \"a\")",
        "findWordsContaining(words = [\"i\", \"contain\", \"a\", \"maybe\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"cap\", \"hat\"], x = \"a\")",
        "findWordsContaining(words = [\"qwe\", \"asd\", \"zxc\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"lemon\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"doge\", \"doghouse\"], x = \"o\")",
        "findWordsContaining(words = [\"wolf\", \"teeth\"], x = \"e\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [4, 2, 1])",
        "minimumCoins(prices = [1,2,3,1])",
        "minimumCoins(prices = [1, 3, 5, 7, 9])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100, 200])",
        "minimumCoins(prices = [1, 4, 1, 2, 7, 2, 3, 1])",
        "minimumCoins(prices = [1, 3, 5, 7, 9, 11, 15])",
        "minimumCoins(prices = [2, 4, 7, 10])",
        "minimumCoins(prices = [1, 4, 1, 2, 7, 3, 0, 1])",
        "minimumCoins(prices = [3, 4, 10, 15, 20, 12])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"1010011010\")",
        "minimumBeautifulSubstrings(s = \"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100\")",
        "minimumBeautifulSubstrings(s = \"155\")",
        "minimumBeautifulSubstrings(s = \"bbbaacdaa\")",
        "minimumBeautifulSubstrings(s = \"15522\")",
        "minimumBeautifulSubstrings(s = \"15230454\")",
        "minimumBeautifulSubstrings(s = \"bablbllbb\")",
        "minimumBeautifulSubstrings(s = \"10510305110\")",
        "minimumBeautifulSubstrings(s = \"0010010011011100010100110010001010101101100110\")",
        "minimumBeautifulSubstrings(s
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"abb\", s2 = \"bba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abcz\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"adcb\")",
        "canBeEqual(s1 = \"aba\", s2 = \"baa\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"axxx\")"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"xyz\", str2 = \"xzy\")",
        "canMakeSubsequence(str1 = \"xyz\", str2 = \"yxz\")",
        "canMakeSubsequence(str1 = \"xyz\", str2 = \"xz\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"adc\")",
        "canMakeSubsequence(str1 = \"abczy\", str2 = \"cy\")",
        "canMakeSubsequence(str1 = \"abcbc\", str2 = \"abcbc\")",
        "canMakeSubsequence(str1 = \"bz\", str2 = \"b\")",
        "canMakeSubsequence(str1 = \"bcd\", str2 = \"jad\")",
        "canMakeSubsequence(str1 = \"fhjk\", str2 = \"f\")",
        "canMakeSubsequence(str1 = \"bcea\", str2 = \"bcef\")"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [3, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [3,3,3,2,2,4])",
        "minLengthAfterRemovals(nums = [2,2,2,2,2,2])",
        "minLengthAfterRemovals(nums = [2, 3, 3, 5, 5, 5])",
        "minLengthAfterRemovals(nums = [2, 1, 3, 2, 1, 1, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [2, 1, 1, 0, 0, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 2, 2, 3, 4, 5, 5, 5])",
        "minLengthAfterRemovals(nums = [1, 3, 1, 4, 3, 5, 4])",
        "minLengthAfterRemovals(nums = [7, 1, 2, 2, 2, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [2, 2, 2, 2, 2, 1, 3, 4, 3, 1])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"abac\", s2 = \"abca\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"adcbe\")",
        "canBeEqual(s1 = \"bad\", s2 = \"ab\")",
        "canBeEqual(s1 = \"xaxx\", s2 = \"xaxy\")"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 1, 2, 2, 3, 3, 4, 4], target = 4)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 7)",
        "countPairs(nums = [1, 1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 1, 2, 2, 3, 3, 4, 4], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 10)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 6)",
        "countPairs(nums = [1, 3, 2, 2], target = 6)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"azb\", s2 = \"zb\")",
        "canMakeSubsequence(s1 = \"aab\", s2 = \"baa\")",
        "canMakeSubsequence(s1 = \"aabcc\", s2 = \"aca\")",
        "canMakeSubsequence(s1 = \"aub\", s2 = \"ab\")",
        "canMakeSubsequence(s1 = \"cats\", s2 = \"aat\")",
        "canMakeSubsequence(s1 = \"aazza\", s2 = \"azaz\")",
        "canMakeSubsequence(s1 = \"abcdef\", s2 = \"acebacf\")",
        "canMakeSubsequence(s1 = \"abczzbc\", s2 = \"zacabc\")",
        "canMakeSubsequence(s1 = \"apzbobobegghakl\", s2 = \"jkl\")",
        "canMakeSubsequence(s1 = \"bcdjje\", s2 = \"jbfd\")"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"push\",\"1\",\"push\",\"2\",\"prev\",\"prev\",\"prev\"])",
        "lastVisitedIntegers(words = [\"1\",\"prev\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"4\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\",\"prev\",\"prev\",\"2\",\"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"10\", \"5\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"5\", \"3\", \"prev\", \"next\", \"5\", \"prev\"])",
        "lastVisitedIntegers(words = [\"7\", \"prev\", \"next\", \"4\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"5\",\"7\",\"prev\",\"prev\",\"prev\"])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[1,2],[3,4],[5,6]], k = 2)",
        "countPairs(coordinates = [[0,0],[0,1],[1,0],[1,1],[0,2]], k = 1)",
        "countPairs(coordinates = [[0,0],[2,2],[3,3],[2,0]], k = 2)",
        "countPairs(coordinates = [[0, 0], [2, 2], [1, 0]], k = 1)",
        "countPairs(coordinates = [[1, 2], [3, 1], [2, 3]], k = 2)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1], [0, 2], [2, 0], [0, 3], [3, 0], [3, 3], [3, 4]], k = 4)",
        "countPairs(coordinates = [[1,1],[2,2],[3,3],[2,3],[2,2],[4,4]], k = 2)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3], [2, 1], [3, 1], [4, 1], [4, 2], [4, 3], [4, 4], [3, 4]], k = 2)",
        "countPairs(coordinates = [[1, 2], [2, 1], [1, 3], [4, 1], [2, 3], [1, 2], [2, 4], [3, 4], [4, 4], [5, 5]], k = 2)",
        "countPairs(coordinates = [[0,0],[1,1],[2,2],[1,0],[0,1],[0,2],[3,3],[1,1],[2,2],[1,0],[0,1],[0,2],[3,3]], k = 2)"
    ],
    "sample_451": [
        "minChanges(s = \"2010\")",
        "minChanges(s = \"AAABBB\")",
        "minChanges(s = \"abcbac\")",
        "minChanges(s = \"zabzab\")",
        "minChanges(s = \"bitcoin\")",
        "minChanges(s = \"fx\")",
        "minChanges(s = \"3542\")",
        "minChanges(s = \"5004\")",
        "minChanges(s = \"fwymwl\")",
        "minChanges(s = \"whjgshbhjgwhjghjhjjjj\")"
    ],
    "sample_461": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 5, limit = 1)",
        "distributeCandies(n = 5, limit = 1)",
        "distributeCandies(n = 11, limit = 4)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abdc\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"abac\", s2 = \"abac\")",
        "canBeEqual(s1 = \"cab\", s2 = \"abc\")",
        "canBeEqual(s1 = \"xyxy\", s2 = \"yxyx\")"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 2, limit = 1)",
        "distributeCandies(n = 4, limit = 1)",
        "distributeCandies(n = 4, limit = 3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 1, limit = 3)",
        "distributeCandies(n = 11, limit = 4)"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 95)",
        "accountBalanceAfterPurchase(p = 95)",
        "accountBalanceAfterPurchase(p = 95)",
        "accountBalanceAfterPurchase(p = 99)",
        "accountBalanceAfterPurchase(p = 105)",
        "accountBalanceAfterPurchase(p = 45)",
        "accountBalanceAfterPurchase(p = 100)",
        "accountBalanceAfterPurchase(p = 97)",
        "accountBalanceAfterPurchase(p = 104)",
        "accountBalanceAfterPurchase(p = 29)"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1])",
        "sumCounts(nums = [1])",
        "sumCounts(nums = [0,1,2])",
        "sumCounts(nums = [3,1,2,3,4])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1])",
        "minimumSeconds(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(A = [3,1,5,4,2])",
        "minimumSeconds(A = [1,2,3,4,5,6,7])",
        "minimumSeconds(A = [3, 5, 2])",
        "minimumSeconds(A = [2, 3, 5, 1, 6])",
        "minimumSeconds(A = [1,2,2,3,3,3,4])",
        "minimumSeconds(A = [10, 5, 7, 9, 3, 1])",
        "minimumSeconds(A = [3, 1, 1, 1, 2, 2, 2, 0, 0])",
        "minimumSeconds(A = [2, 0, 0, 1, 3, 3, 2, 1, 2, 1, 0, 2])"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"acb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"acb\")",
        "canMakeSubsequence(str1 = \"xyz\", str2 = \"xac\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"bac\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"babc\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"bced\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"bqre\")",
        "canMakeSubsequence(str1 = \"aah\", str2 = \"bbbbb\")",
        "canMakeSubsequence(str1 = \"aqxza\", str2 = \"bazqwq\")",
        "canMakeSubsequence(str1 = \"uynnng\", str2 = \"ynnyuu\")"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 3, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 3, 5, 7, 9])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [1, 3, 2])",
        "minimumRightShifts(nums = [1, 0, 1])",
        "minimumRightShifts(nums = [4, 5, 6, 7, 8])",
        "minimumRightShifts(nums = [8, 4, 1, 0])",
        "minimumRightShifts(nums = [0, 2, 4, 3, 6, 7])"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1], l = 1, r = 1)",
        "countSubMultisets(nums = [2,1,2,2], l = 1, r = 3)",
        "countSubMultisets(nums = [10], l = 1, r = 10)",
        "countSubMultisets(nums = [5, 5, 7, 8], l = 3, r = 13)",
        "countSubMultisets(nums = [2,2,2], l = 0, r = 1)",
        "countSubMultisets(nums = [2,4,2,4,2,4], l = 1, r = 2)",
        "countSubMultisets(nums = [1,1,1,1,2,2,2,2], l = 10, r = 20)",
        "countSubMultisets(nums = [5, 7, 12], l = 17, r = 20)",
        "countSubMultisets(nums = [1,2,4,5,10], l = 4, r = 17)",
        "countSubMultisets(nums = [5, 8, 3, 4, 8, 5, 1, 3], l = 5, r = 15)"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 3, 5])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 3, 4, 5])",
        "minimumCoins(prices = [1, 4, 10])",
        "minimumCoins(prices = [2, 5, 7])",
        "minimumCoins(prices = [1, 5, 2, 1, 4])",
        "minimumCoins(prices = [4, 8, 7, 5])",
        "minimumCoins(prices = [3, 4, 5, 7, 2, 6])",
        "minimumCoins(prices = [5, 3, 7, 8, 2, 3, 10, 6])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 3, 2])",
        "minimumCoins(prices = [1, 2, 3, 5])",
        "minimumCoins(prices = [1, 2, 3, 2, 1])",
        "minimumCoins(prices = [1,3,1])",
        "minimumCoins(prices = [4, 2, 1, 2, 4])",
        "minimumCoins(prices = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"0\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"0\",\"1\",\"prev\",\"prev\",\"prev\",\"2\",\"prev\"])",
        "lastVisitedIntegers(words = [\"0\", \"prev\", \"prev\", \"3\"])"
    ],
    "sample_428": [
        "minOperations(nums = [1,2,3,4,5,6])",
        "minOperations(nums = [1,1,1,3,3,3])",
        "minOperations(nums = [1, 2, 1, 2, 1, 2, 1])",
        "minOperations(nums = [1, 2, 2, 2, 2, 2, 2])",
        "minOperations(nums = [1, 3, 2, 1, 2])",
        "minOperations(nums = [2, 2, 3, 2, 2, 4])",
        "minOperations(nums = [3,3,2,1,4])",
        "minOperations(nums = [2, 3, 1, 2, 2, 1, 3])",
        "minOperations(nums = [3, 1, 2, 5, 4, 3])",
        "minOperations(nums = [7, 5, 5, 5, 5, 7, 7])"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"push\", \"9\", \"push\", \"7\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\",\"1\",\"push\",\"2\",\"pop\",\"push\",\"3\"])",
        "lastVisitedIntegers(words = [\"p\", \"p\", \"3\", \"p\", \"2\"])",
        "lastVisitedIntegers(words = [\"p\", \"1\", \"p\", \"3\", \"p\", \"p\", \"p\"])",
        "lastVisitedIntegers(words = [\"p\", \"p\", \"z\", \"p\", \"p\", \"z\"])",
        "lastVisitedIntegers(words = [\"p\", \"p\", \"add\", \"add\", \"add\", \"p\", \"p\", \"p\"])",
        "lastVisitedIntegers(words = [\"i\",\"m\",\"p\",\"p\",\"m\",\"p\",\"p\",\"p\"])",
        "lastVisitedIntegers(words = [\"print\", \"1\", \"push\", \"print\", \"push\", \"2\", \"print\", \"push\"])",
        "lastVisitedIntegers(words = [\"i\", \"o\", \"p\", \"1\", \"2\", \"p\", \"p\", \"2\", \"3\"])",
        "lastVisitedIntegers(words = [\"d\", \"p\", \"p\", \"v\", \"3\", \"d\", \"p\", \"p\"])"
    ],
    "sample_379": [
        "minimumSeconds(nums = [2, 3, 5, 7, 11, 13, 17, 19])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])",
        "minimumSeconds(nums = [2, 3, 3, 2, 1, 2, 2, 2, 2])",
        "minimumSeconds(nums = [5, 4, 2, 1, 2, 1])",
        "minimumSeconds(nums = [1,2,3,4,5,20,20,40])",
        "minimumSeconds(nums = [500, 500, 400])",
        "minimumSeconds(nums = [20, 100, 100, 100, 20, 100, 20, 20, 20, 20, 20])",
        "minimumSeconds(nums = [3, 5, 8, 10, 20, 15])",
        "minimumSeconds(nums = [5, 15, 25, 35, 10, 20, 30, 25, 20, 15])",
        "minimumSeconds(nums = [5, 4, 15, 12, 18, 12, 19, 15])"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"cool\", \"lock\", \"cook\"], x = \"c\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"this\", \"is\", \"a\", \"test\"], x = \"s\")",
        "findWordsContaining(words = [\"cat\", \"bt\", \"hat\", \"tree\"], x = \"at\")",
        "findWordsContaining(words = [\"contain\", \"this\", \"word\"], x = \"i\")",
        "findWordsContaining(words = [\"x\", \"y\", \"xy\", \"zz\"], x = \"x\")",
        "findWordsContaining(words = [\"hot\", \"dot\", \"dog\", \"lot\"], x = \"o\")",
        "findWordsContaining(words = [\"cat\", \"cater\", \"pig\", \"cats\"], x = \"c\")",
        "findWordsContaining(words = [\"tea\", \"eat\", \"ate\", \"check\"], x = \"e\")"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [0, 1, 1, 0, 0, 1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [0, 1, 1, 0, 1, 1, 1, 0])",
        "maxSubarrays(nums = [0, 1, 0, 1, 0, 0, 0, 1])",
        "maxSubarrays(nums = [0,0,1,0,1,1,0])",
        "maxSubarrays(nums = [0, 1, 1, 0, 0, 1, 1, 1, 1, 0])",
        "maxSubarrays(nums = [0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0])"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\",\"prev\",\"prev\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"4\", \"prev\"])",
        "lastVisitedIntegers(words = [\"3\", \"prev\", \"prev\", \"2\", \"1\"])",
        "lastVisitedIntegers(words = [\"5\", \"1\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"last\"])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1,2,3,4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 8)",
        "countPairs(nums = [1, 1, 2, 2, 3, 3, 4, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 10)",
        "countPairs(nums = [1, 1, 2, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [2, 3, 5, 6], target = 8)",
        "countPairs(nums = [2, 3, 4], target = 5)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"fghij\")",
        "canBeEqual(s1 = \"abc\", s2 = \"abx\")",
        "canBeEqual(s1 = \"bac\", s2 = \"abc\")",
        "canBeEqual(s1 = \"shine\", s2 = \"pi\")",
        "canBeEqual(s1 = \"ab\", s2 = \"baba\")",
        "canBeEqual(s1 = \"aaabbb\", s2 = \"abaaaa\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"4\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\",\"prev\",\"next\",\"4\",\"prev\",\"prev\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"append\",\"1\",\"prev\",\"append\",\"2\",\"print\",\"print\",\"prev\",\"prev\",\"prev\"])",
        "lastVisitedIntegers(words = [\"42\",\"push\",\"push\",\"prev\",\"push\",\"push\",\"prev\",\"prev\",\"prev\",\"prev\"])",
        "lastVisitedIntegers(words = [\"5\", \"9\", \"prev\", \"prev\", \"prev\", \"9\", \"prev\", \"3\", \"prev\"])"
    ],
    "sample_464": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n=5, limit=2)",
        "distributeCandies(n = 3, limit = 4)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 3, 5])",
        "minimumRightShifts(nums = [1, 3, 5])",
        "minimumRightShifts(nums = [1, 3, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 3, 4])",
        "minimumRightShifts(nums = [1, 2])",
        "minimumRightShifts(nums = [2, 3, 1])",
        "minimumRightShifts(nums = [0, 1, 2, 5])",
        "minimumRightShifts(nums = [3, 1, 5, 2, 4])",
        "minimumRightShifts(nums = [10, 3, 4, 5, 8])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"this\", \"is\", \"an\", \"array\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"banana\", \"dog\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"is\", \"cut\"], x = \"a\")",
        "findWordsContaining(words = [\"tiger\", \"bear\", \"lion\"], x = \"i\")",
        "findWordsContaining(words = [\"cat\", \"tea\", \"coffee\"], x = \"e\")",
        "findWordsContaining(words = [\"hate\", \"love\", \"joy\"], x = \"e\")",
        "findWordsContaining(words = [\"bb\", \"bbc\", \"abc\"], x = \"bb\")",
        "findWordsContaining(words = [\"start\", \"other\", \"str_start\"], x = \"start\")",
        "findWordsContaining(words = [\"trojan\", \"bicycle\", \"spider\"], x = \"tro\")"
    ],
    "sample_398": [
        "maxSum(nums = [1,2,3,4,5,6], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 1], m = 2, k = 3)",
        "maxSum(nums = [0,0,0,0,0,0,0,0,0], m = 1, k = 1)",
        "maxSum(nums = [4,2,2,3,1,4], m = 2, k = 2)",
        "maxSum(nums = [4, 1, 5, 2, 4], m = 2, k = 2)",
        "maxSum(nums = [-5, 2, -4, 2, 3], m = 5, k = 2)",
        "maxSum(nums = [1, 0, 0, 3, 5, 4, 5], m = 3, k = 1)",
        "maxSum(nums = [4,5,1,2,7,9], m = 3, k = 3)",
        "maxSum(nums = [0, -6, 5, 6, -4], m = 3, k = 1)",
        "maxSum(nums = [9,52,6,33,13,16,20,25,8,12,20], m = 2, k = 4)"
    ],
    "sample_424": [
        "minOperations(nums = [3,1,3,4,3])",
        "minOperations(nums = [3,1,3,4,3])",
        "minOperations(nums = [3,1,3,2,4,3])",
        "minOperations(nums = [2,2,2,2,2])",
        "minOperations(nums = [3,5,7,9])",
        "minOperations(nums = [2,3,2])",
        "minOperations(nums = [2,3,2])",
        "minOperations(nums = [1,1,1,2,3])",
        "minOperations(nums = [3,1,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4])",
        "minOperations(nums=[4,4,4,2,4,4,4,4,2,4,4,4,4,4])"
    ],
    "sample_417": [
        "minOperations(nums = [4, 7, 6, 5], k = 3)",
        "minOperations(nums = [2, 3, 2, 2, 2, 4, 3, 3, 2, 4, 2], k = 3)",
        "minOperations(nums = [7,8,1,2,3,4,5], k = 9)",
        "minOperations(nums = [2,4,1,9,3,1], k = 20)",
        "minOperations(nums = [4, 5, 7, 4, 5, 7, 4, 5, 7, 4, 5, 7], k = 5)",
        "minOperations(nums = [10, 20, 5, 40, 60, 30], k = 5)",
        "minOperations(nums=[4,2,6,3,8,1,7], k=7)",
        "minOperations(nums = [1, 3, 2, 3, 3, 3, 1, 3, 6, 5, 1, 2], k = 2)",
        "minOperations(nums = [100, 50, 80, 30, 60, 20, 25, 20, 10], k = 25)",
        "minOperations(nums = [100000,100,200,200000,300,400,300000], k = 2)"
    ],
    "sample_371": [
        "sortVowels(s = \"apple\")",
        "sortVowels(s = \"apple\")",
        "sortVowels(s = \"Hello World!\")",
        "sortVowels(s = \"mY lPh\")",
        "sortVowels(s = 'plUmp')",
        "sortVowels(s = \"plum\")",
        "sortVowels(s = 'HiLo')",
        "sortVowels(s = \"HYPmL\")",
        "sortVowels(s = \"flypimp\")",
        "sortVowels(s = \"PlymMph\")"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n=3, limit=1)",
        "distributeCandies(n = 10, limit = 4)"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [0, 1, 2])",
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [3, 1, 2, 3])"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [2, 0, 2, 2, 0])",
        "maxSubarrays(nums = [0, 1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [0, 1, 0, 1, 0, 1, 0, 0, 1])",
        "maxSubarrays(nums = [0, 0, 1, 1, 1, 0, 0])",
        "maxSubarrays(nums = [1,0,1,0,1,1])",
        "maxSubarrays(nums = [2, 4, 5, 6])",
        "maxSubarrays(nums = [0,1,1,0,0,0,1,1,0,1,0,1])",
        "maxSubarrays(nums = [3, 1, 0, 0, 2, 6, 0, 1, 5, 3, 5, 0, 4, 1, 0])"
    ],
    "sample_446": [
        "sumCounts(nums = [1])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [0])",
        "sumCounts(nums = [1, 1])",
        "sumCounts(nums = [0, 1, 2])",
        "sumCounts(nums = [2])",
        "sumCounts(nums = [2])"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"xxyy\", s2 = \"xxxy\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"adcb\")",
        "canBeEqual(s1 = \"xyyx\", s2 = \"xyxy\")",
        "canBeEqual(s1 = \"gCiudzz\", s2 = \"GCizdczz\")"
    ],
    "sample_380": [
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4], target = 6)",
        "countPairs(nums = [1,2,3,4], target = 6)",
        "countPairs(nums = [1,1,2,2,3,3,4,4], target = 4)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 10)",
        "countPairs(nums=[1,2,3,4,5], target=8)",
        "countPairs(nums = [1, 1, 2, 2, 3, 4, 5, 6], target = 6)",
        "countPairs(nums = [2,3,8,1,4], target = 5)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1,2])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1,1,1])",
        "sumCounts(nums = [0])",
        "sumCounts(nums = [1,1])"
    ],
    "sample_368": [
        "sortVowels(s = \"pimHYl\")",
        "sortVowels(s = 'myLmph')",
        "sortVowels(s = \"HiMelp\")",
        "sortVowels(s = 'pimlY')",
        "sortVowels(s = 'lHmpY')",
        "sortVowels(s = \"pYmpHl\")",
        "sortVowels(s = 'pLyMpH')",
        "sortVowels(s = 'plemHY')",
        "sortVowels(s = \"Yellow\")",
        "sortVowels(s = \"Himlp\")"
    ],
    "sample_462": [
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 9, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 8, limit = 3)",
        "distributeCandies(n = 14, limit = 3)",
        "distributeCandies(n = 20, limit = 2)"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 3, 1])",
        "minimumCoins(prices = [1, 2, 3, 1])",
        "minimumCoins(prices = [1,2,3,1])",
        "minimumCoins(prices = [1,2,3,1])",
        "minimumCoins(prices = [3, 2, 1])",
        "minimumCoins(prices = [1, 5, 7])",
        "minimumCoins(prices = [0, 1, 0, 1])",
        "minimumCoins(prices = [2, 2, 3])",
        "minimumCoins(prices = [3,1,1,2,2,1])",
        "minimumCoins(prices = [1, 2, 3, 0, 1, 2, 3])"
    ],
    "sample_426": [
        "minOperations(nums = [2,2,2,4])",
        "minOperations(nums = [2, 2, 2, 5, 5])",
        "minOperations(nums = [12, 30, 21])",
        "minOperations(nums = [2, 2, 2, 3, 2])",
        "minOperations(nums = [1, 3, 4, 4])",
        "minOperations(nums = [1,1,2,2,3,3,3])",
        "minOperations(nums = [2, 4, 4, 4])",
        "minOperations(nums = [4,2,5,2])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 3, 4, 5])",
        "minOperations(nums = [2, 5, 7, 2, 3, 8, 9])"
    ],
    "sample_423": [
        "minOperations(nums = [2, 2])",
        "minOperations(nums = [2, 2])",
        "minOperations(nums = [3, 1, 2])",
        "minOperations(nums = [3,3,1,4])",
        "minOperations(nums = [2, 4, 2, 4])",
        "minOperations(nums = [1, 2, 3, 3, 4, 5, 5, 5])",
        "minOperations(nums = [3,1,3,2,4,5])",
        "minOperations(nums = [3, 3, 1, 0])",
        "minOperations(nums = [4, 4, 4, 4, 2])",
        "minOperations(nums = [8, 4, 3, 4, 5, 2, 2, 5, 1, 6, 7, 2, 3, 1, 3, 9, 8])"
    ],
    "sample_476": [
        "minimumCoins(prices = [1,2])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1,1,1,1])",
        "minimumCoins(prices = [2,3,1])",
        "minimumCoins(prices = [4,2,1])",
        "minimumCoins(prices = [1, 2, 6, 5, 1])",
        "minimumCoins(prices = [1, 3, 5, 1])",
        "minimumCoins(prices = [1,2,5,10,25])",
        "minimumCoins(prices = [1, 1, 1, 2, 1, 2, 3])",
        "minimumCoins(prices = [4,2,5,6,1,2,2])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [3, 2, 1, 4, 5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1, 3, 5, 7, 9])",
        "minimumRightShifts(nums = [1, 2])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumRightShifts(nums = [1,2,3,4,4,5])",
        "minimumRightShifts(nums = [0, 1, 3, 0, 2])",
        "minimumRightShifts(nums = [2, 3, 4, 10, 0, 1])"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1])",
        "minimumRightShifts(nums = [1])",
        "minimumRightShifts(nums = [1,2,3])",
        "minimumRightShifts(nums = [7, 4, 9])",
        "minimumRightShifts(nums = [4, 2, 3, 1])",
        "minimumRightShifts(nums = [10, 9, 7, 1, 2, 8])",
        "minimumRightShifts(nums = [2, 1, 4, 5, 3, 1, 4])"
    ],
    "sample_167": [
        "isAcronym(words = [\"q\", \"w\", \"e\", \"r\"], s = \"qwer\")",
        "isAcronym(words = [\"Yet\", \"Another\", \"Word\"], s = \"YAWS\")",
        "isAcronym(words = [\"Cats\", \"Dogs\", \"Elephants\"], s = \"CE\")",
        "isAcronym(words = [\"Paris\", \"New York\", \"Las Vegas\"], s = \"PING\")",
        "isAcronym(words = [\"wow\", \"big\", \"internet\"], s = \"www\")",
        "isAcronym(words=[\"morning\", \"morning\"], s=\"M\")",
        "isAcronym(words=[\"university\", \"college\", \"school\"], s = \"UCS\")",
        "isAcronym(words = [\"danger\", \"code\", \"killer\"], s = \"DCK\")",
        "isAcronym(words = [\"ball\", \"apple\", \"toy\"], s = \"BAT\")",
        "isAcronym(words = [\"complicated\", \"words\", \"can\", \"yield\", \"acronyms\"], s = \"cwca\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [2,2,2,2], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [2,2,2,4,2], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [2, 2, 2, 1, 5, 2, 3, 7], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [2,4,5], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [2,2,2,3,4,3], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2,2,2,5,2,2,2], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [3,5,7,3,2], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [5,5,5,5,5], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [2,3,3,3,2,3,3,2], m = 2, k = 2)"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1,2],[3,4],[5,6],[7,8],[8,9]])",
        "numberOfPoints(nums = [[1,3],[3,6],[5,9]])",
        "numberOfPoints(nums = [[1,3],[3,5],[1,7]])",
        "numberOfPoints(nums = [[1,2],[2,4],[3,2]])",
        "numberOfPoints(nums = [[1, 5], [1, 3], [3, 4], [3, 5]])",
        "numberOfPoints(nums = [[0,3],[3,6],[7,9],[12,13],[14,17]])",
        "numberOfPoints(nums = [[1,10],[11,20],[30,40],[50,60]])",
        "numberOfPoints(nums = [[1, 5], [3, 3], [5, 5], [2, 7], [7, 8]])",
        "numberOfPoints(nums = [[1,5],[1,5],[3,4],[5,8],[1,10],[1,10],[2,3],[5,7],[1,9]])",
        "numberOfPoints(nums = [\n    [1,4],\n    [7, 9],\n    [3, 5],\n    [2, 8],\n    [1, 10],\n    [9, 12],\n    [2, 3],\n    [8, 11],\n])"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = ['easy-problem'], separator = '-')",
        "splitWordsBySeparator(words = ['easy', 'problem'], separator = 'asy')",
        "splitWordsBySeparator(words = [\"easy&problem\"], separator = \"&\")",
        "splitWordsBySeparator(words = ['easy', 'problem'], separator = '-')"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1,5],[2,3],[4,6],[7,8]])",
        "numberOfPoints(nums = [[0, 3], [1, 5], [2, 7], [4, 6]])",
        "numberOfPoints(nums = [[1,2],[1,3],[1,4],[2,5],[3,6]])",
        "numberOfPoints(nums = [[3, 6], [1, 2], [3, 4]])",
        "numberOfPoints(nums = [[0, 3], [0, 7], [1, 5], [1, 6], [2, 5], [2, 5], [3, 6]])",
        "numberOfPoints(nums = [[-1,-1],[0,2],[1,4],[0,3],[0,1],[1,2],[10,15]])",
        "numberOfPoints(nums = [[0, 1], [1, 5], [2, 5], [0, 5], [0, 10], [1, 10]])",
        "numberOfPoints(nums = [[0, 3], [4, 4], [1, 6], [5, 5], [3, 7], [5, 6], [3, 6]])",
        "numberOfPoints(nums = [[0, 3], [1, 10], [2, 1], [4, 7], [0, 1], [3, 6], [2, 4], [5, 9], [6, 8]])",
        "numberOfPoints(nums = [[0,5],[4,8],[7,9],[9,12],[12,18],[15,20],[21,23],[23,26]])"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3])",
        "countCompleteSubarrays(nums = [2,3,1,2,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,3,3])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = [\"one two\", \"three\", \"four five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one two\", \"three\", \"four five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one two\", \"three four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one,two', 'three,four,five', 'six'], separator = \",\")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = 'o')",
        "splitWordsBySeparator(words = [\"o\", \"ne\", \"t\", \"w\", \"o\", \"th\", \"r\", \"ee\", \"f\", \"o\", \"ur\", \"s\", \"ix\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three,,\", \",,four,five,,,\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"t\")",
        "splitWordsBySeparator(words = [\"one,two\", \",three\", \",four,\", \"five,six,\",\"\"], separator = \",\")"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [3, 3, 2, 1])",
        "maxIncreasingGroups(u = [3, 3, 2, 2, 1, 1])",
        "maxIncreasingGroups(u = [4, 5, 6, 7, 8])",
        "maxIncreasingGroups(u = [1, 3, 6, 7, 9])",
        "maxIncreasingGroups(u = [2, 1, 5, 2])",
        "maxIncreasingGroups(u = [3, 3, 2, 1, 3, 2, 1, 1, 1])",
        "maxIncreasingGroups(u = [0, 0, 0, 1, 2, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 2, 3, 3, 5, 5, 5, 5, 5, 5])",
        "maxIncreasingGroups(u = [1, 3, 1, 5, 7])",
        "maxIncreasingGroups(u = [2, 1, 3, 5, 7, 5, 4, 6])"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1,3,6,10,15], x = 3)",
        "minAbsoluteDifference(nums = [3, 4, 2, 1], x = 1)",
        "minAbsoluteDifference(nums = [4,1,2,3,4], x = 2)",
        "minAbsoluteDifference(nums = [1,3,4,7], x = 2)",
        "minAbsoluteDifference(nums = [3, 14, 10, 4, 20, 9], x = 3)",
        "minAbsoluteDifference(nums = [1,2,11,15], x = 4)",
        "minAbsoluteDifference(nums = [1, 5, 2, 0, 3, 2], x = 2)",
        "minAbsoluteDifference(nums = [2,5,1,2,4,5,1,2,5,1,2,4,5,1,2,5,1,2,4,5,1,2,5], x = 5)",
        "minAbsoluteDifference(nums = [24,12,1,4,33,11,23], x = 5)",
        "minAbsoluteDifference(nums = [1,11,21,4,6,9,14,19,26,11], x = 2)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 5, k = 0)",
        "countInterestingSubarrays(nums = [1, 3, 1, 4, 3, 3], modulo = 5, k = 0)",
        "countInterestingSubarrays(nums = [2, 2, 2], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 3, 1], modulo = 5, k = 0)",
        "countInterestingSubarrays(nums = [3, 1, 2, 7], modulo = 5, k = 0)",
        "countInterestingSubarrays(nums = [0,0,0,0,0], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 5, 9], modulo = 10, k = 0)",
        "countInterestingSubarrays(nums = [4, 1, 3, 5, 6], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [23, 33, 43, 53, 63], modulo = 4, k = 0)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 1000000000, 1], m = 1)",
        "canSplitArray(nums = [2, 3, 4, 5], m = 4)",
        "canSplitArray(nums = [2, 1, 2], m = 1)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 2)",
        "canSplitArray(nums = [1, 9, 10, 2, 3], m = 3)",
        "canSplitArray(nums = [1000000000, 999999999, 999999999], m = 1000000000)",
        "canSplitArray(nums = [4, 2, 5, 6, 7], m = 8)",
        "canSplitArray(nums = [2, 2, 4], m = 6)",
        "canSplitArray(nums = [12, 7, 15, 3], m = 10)",
        "canSplitArray(nums = [20, 9, 11, 1], m = 4)"
    ],
    "sample_169": [
        "isAcronym(words = [\"g\", \"o\", \"o\", \"g\", \"l\", \"e\"], s = \"GOOGLE\")",
        "isAcronym(words = [\"abc\", \"de\", \"fg\"], s = \"adf\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hwolrld\")",
        "isAcronym(words = [\"python\", \"java\", \"c++\"], s = \"pjc\")",
        "isAcronym(words = [\"Do\", \"Not\", \"Disturb\"], s = \"DND\")",
        "isAcronym(words = [\"cool\", \"lock\", \"lock\"], s = \"clock\")",
        "isAcronym(words = [\"Fat\", \"Cat\", \"Sat\"], s = \"FACS\")",
        "isAcronym(words = [\"RADIUM\", \"ACTINIUM\"], s = \"RA\")",
        "isAcronym(words = [\"Transformer\",\"Optimization\",\"Evaluation\"], s = \"TOE\")",
        "isAcronym(words = [\"example\", \"words\", \"for\", \"this\", \"question\"], s = \"EWFTHQ\")"
    ],
    "sample_121": [
        "minimumIndex(nums = [3,2,3])",
        "minimumIndex(nums = [3,1,2,4])",
        "minimumIndex(nums = [3,1,2,4])",
        "minimumIndex(nums = [3,2,5])",
        "minimumIndex(nums = [3,1,3,5,0])",
        "minimumIndex(nums = [3,2,5,2])",
        "minimumIndex(nums = [4, 3, 4, 6, 1])",
        "minimumIndex(nums = [3, 2, 5, 4, 1, 2, 4, 5])",
        "minimumIndex(nums = [1,4,4,4,2,2,2,3,4,4,4,4])",
        "minimumIndex(nums = [4,2,3,4,4,3,6,5,4,3,4,2])"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 3, offers = [[1,2,10], [2,3,20], [3,4,30]])",
        "maximizeTheProfit(n = 3, offers = [[1, 5, 2], [2, 7, 10], [3, 9, 7]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 10], [2, 3, 5], [1, 3, 0]])",
        "maximizeTheProfit(n = 2, offers = [[1,3,1], [2,5,2], [4,6,1]])",
        "maximizeTheProfit(n = 2, offers = [[1,2,1],[2,3,2],[3,4,1]])",
        "maximizeTheProfit(n = 3, offers = [[2,6,5],[1,3,3],[5,10,7]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 40], [3, 4, 50], [2, 4, 30]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 2], [2, 3, 10], [3, 4, 2], [4, 5, 3], [3, 5, 10]])",
        "maximizeTheProfit(n = 2, offers = [[5,10,10],[1,4,2],[3,6,5]])",
        "maximizeTheProfit(n = 10, offers = [[1,3,2],[2,6,3],[5,7,1],[1,8,0]])"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [0, 1, 2])",
        "maximumTripletValue(nums = [3, 4, 5])",
        "maximumTripletValue(nums = [1, 5, 10])",
        "maximumTripletValue(nums = [3, 1, 2, 5])",
        "maximumTripletValue(nums = [10, 9, 8, 5])",
        "maximumTripletValue(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])",
        "maximumTripletValue(nums = [0, -10, 0])",
        "maximumTripletValue(nums = [-10, -10, 10, -6, 9, 1, 3, 0, -5, 3])"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"R__L\")",
        "furthestDistanceFromOrigin(moves = \"R__L\")",
        "furthestDistanceFromOrigin(moves = \"__R__L_\")",
        "furthestDistanceFromOrigin(moves = \"LLRRR\")",
        "furthestDistanceFromOrigin(moves = \"R__RR__\")",
        "furthestDistanceFromOrigin(moves = \"LR__\")",
        "furthestDistanceFromOrigin(moves = \"__RLLR\")",
        "furthestDistanceFromOrigin(moves = \"R_L_R_R_L_\")",
        "furthestDistanceFromOrigin(moves = \"_L_L_R_R_R_R\")",
        "furthestDistanceFromOrigin(moves = \"__R__R_RR_RRRR\")"
    ],
    "sample_149": [
        "finalString(s = \"siting\")",
        "finalString(s = \"sat\")",
        "finalString(s = \"pitsing\")",
        "finalString(s = 'racecar')",
        "finalString(s = 'world')",
        "finalString(s = \"secret\")",
        "finalString(s = 'irisng')",
        "finalString(s = 'sihgnt')",
        "finalString(s = \"peimigrnt\")",
        "finalString(s = \"abcdrfunitevw\")"
    ],
    "sample_162": [
        "maxSum(nums = [10, 7, 8, 9])",
        "maxSum(nums = [80, 88])",
        "maxSum(nums = [10,20,30,40,50])",
        "maxSum(nums = [99, 9, 11])",
        "maxSum(nums = [49, 50, 51, 52, 53, 54, 55, 56, 57, 58])",
        "maxSum(nums = [83, 86, 95, 83, 97, 95, 93, 85, 92, 88])",
        "maxSum(nums = [88, 82, 84, 90, 99, 98])",
        "maxSum(nums = [70, 80, 100, 90, 20, 60])",
        "maxSum(nums = [42, 33, 85, 10, 99, 36, 100, 55])",
        "maxSum(nums = [98,91,20,37,41,13,79,47,7,28,90,43,30,83,25,94,27,97,59])"
    ],
    "sample_230": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2])",
        "countWays(nums = [2, 1, 1])",
        "countWays(nums = [1, 1, 0, 0])",
        "countWays(nums = [1, 2, 1, 3])",
        "countWays(nums = [2, 4, 7])",
        "countWays(nums = [2, 4, 7])",
        "countWays(nums = [2,2,1,1,2])",
        "countWays(nums = [5, 6])",
        "countWays(nums = [4, 5, 1, 3])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 0)",
        "minimumPossibleSum(n = 1, target = 0)",
        "minimumPossibleSum(n = 1, target = 0)",
        "minimumPossibleSum(n = 1, target = 0)",
        "minimumPossibleSum(n = 10, target = 10)",
        "minimumPossibleSum(n = 5, target = 20)",
        "minimumPossibleSum(n = 5, target = 28)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 3, offers = [[1,2,100],[2,3,200],[3,1,300]])",
        "maximizeTheProfit(N = 4, offers = [[0, 1, 2], [1, 2, 1], [2, 3, 1], [0, 3, 1]])",
        "maximizeTheProfit(N = 5, offers = [[1, 5, 1], [4, 5, 1], [3, 4, 1]])",
        "maximizeTheProfit(N = 3, offers = [[1, 1, 4], [2, 3, 5], [3, 2, 7]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 1], [2, 3, 2], [3, 4, 4], [2, 4, 3]])",
        "maximizeTheProfit(N = 5, offers = [[1,2,1],[2,3,2],[2,4,1],[3,4,1],[4,5,3]])",
        "maximizeTheProfit(N = 4, offers = [[1, 4, 1], [2, 4, 1], [4, 5, 1]])",
        "maximizeTheProfit(N = 10, offers = [[1,2,2],[3,5,1],[6,7,3],[8,9,1]])",
        "maximizeTheProfit(N = 20, offers = [[10,20,5],[15,25,5],[17,22,7],[18,23,6],[19,24,8]])",
        "maximizeTheProfit(N = 10, offers = [[4,10,100],[7,9,200],[4,3,100],[2,5,500]])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 5, offers = [[1, 5, 2], [2, 4, 10]])",
        "maximizeTheProfit(n = 4, offers = [[3, 4, 2]])",
        "maximizeTheProfit(n = 3, offers = [[2, 3, 5], [1, 2, 3]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 1], [2, 5, 3], [3, 4, 5]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 10], [3, 4, 5], [2, 3, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 5], [2, 3, 4], [2, 3, 10]])",
        "maximizeTheProfit(n = 3, offers = [[1, 1, 3], [1, 2, 5], [2, 2, 2], [2, 3, 1]])",
        "maximizeTheProfit(n = 5, offers = [[2, 1, 5], [3, 5, 2], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 5, 1], [5, 5, 1], [3, 5, 1], [4, 5, 1], [2, 5, 10]])",
        "maximizeTheProfit(n = 5, offers = [[4, 4, 6], [4, 4, 4], [3, 3, 7], [1, 4, 4], [2, 3, 5]])"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [5, 4, 3, 2], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 2, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 5, 4, 3, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [23, 12, 45, 1], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [100, 50, 10], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 15, 10, 5], target = 12)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 6, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 2, 3], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 5, 8, 2], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 13, 8, 15, 11], target = 13)"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9])",
        "countCompleteSubarrays(nums = [2, 3, 1, 2, 2, 3])",
        "countCompleteSubarrays(nums = [9,10,2,3,4,1,2,3,4])",
        "countCompleteSubarrays(nums = [5, 1, 3, 5, 2, 4, 1, 1, 3, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [3, 1, 3, 3, 2, 3, 2, 2, 2, 2])",
        "countCompleteSubarrays(nums = [9,5,7,3,6,3,8,5,4,5])",
        "countCompleteSubarrays(nums = [9, 5, 3, 3, 3, 9, 9, 3, 5, 9])",
        "countCompleteSubarrays(nums = [9,8,9,7,3,2,3,3,8,6])",
        "countCompleteSubarrays(nums = [9,1,1,7,5,9,11,9])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1,2,3])",
        "countWays(nums = [0, 1, 2])",
        "countWays(nums = [1, 3, 4, 6])",
        "countWays(nums = [1, 3, 2, 6])",
        "countWays(nums = [4, 2, 2, 1])",
        "countWays(nums = [1, 3, 4, 5, 6, 7])",
        "countWays(nums = [-4,-2,0,1,2,4])",
        "countWays(nums = [3, 3, 0, 3, 1])"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [1, 1, 1, 1, 1, 1, 1, 1])",
        "maxIncreasingGroups(usageLimits = [2, 3, 1])",
        "maxIncreasingGroups(usageLimits = [5, 3, 1, 4, 2])",
        "maxIncreasingGroups(usageLimits = [5, 2, 3, 3, 4])",
        "maxIncreasingGroups(usageLimits = [4, 7, 4, 2])",
        "maxIncreasingGroups(usageLimits = [4,2,6,7])",
        "maxIncreasingGroups(usageLimits = [1, 3, 1, 2, 1, 1, 1])",
        "maxIncreasingGroups(usageLimits = [3,3,4,4,8,8])",
        "maxIncreasingGroups(usageLimits = [3, 3, 1, 4, 1, 3, 3, 2])",
        "maxIncreasingGroups(usageLimits = [8, 3, 5, 7, 6, 4, 2, 1, 5, 3])"
    ],
    "sample_173": [
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 10)",
        "minimumSum(n=4, k=10)"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 2, 3], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [2,2,2,3], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [2,2,2,4,4,4], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [2,2,2,1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 1, 1, 1, 1], m = 1, k = 0)",
        "countInterestingSubarrays(nums = [1,2,1,2,3,4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [3, 4, 7, 1, 2, 1, 5], m = 5, k = 0)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 3])",
        "countCompleteSubarrays(nums = [3,5,4,2])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,3,2,3,1])",
        "countCompleteSubarrays(nums = [3, 1, 4, 1, 2, 5, 4, 5, 4, 2])",
        "countCompleteSubarrays(nums = [9, 1, 5, 2, 5, 3, 6, 7, 6, 8, 1, 3, 8, 3, 2, 3, 4, 5, 7, 6])"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1,2,2,2,1], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,2,1,2], k = 1)",
        "longestEqualSubarray(nums = [1,2,2,2,1,2,1,1,1], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1, 3, 3, 2], k = 2)",
        "longestEqualSubarray(nums = [5, 6, 7, 8, 9, 10], k = 1)",
        "longestEqualSubarray(nums = [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1], k = 3)",
        "longestEqualSubarray(nums = [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,3,3,3,1,2,3,3,3,4], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 1, 1, 1, 1, 1, 2], k = 1)"
    ],
    "sample_170": [
        "isAcronym(words = [\"computer\", \"science\", \"python\"], s = \"csp\")",
        "isAcronym(words = [\"Tesla\", \"is\", \"great\"], s = \"TIG\")",
        "isAcronym(words = [\"some\", \"words\"], s = \"sw\")",
        "isAcronym(words = [\"W\", \"O\", \"W\"], s = \"WOW\")",
        "isAcronym(words = [\"Train\", \"Truck\", \"Bus\"], s = \"TTB\")",
        "isAcronym(words = [\"given\", \"up\", \"in\"], s = \"guni\")",
        "isAcronym(words = [\"dairy\", \"eggs\", \"flour\"], s = \"DEA\")",
        "isAcronym(words = [\"St\", \"Peter\", \"s\", \"Chan\"], s = \"SPCSSC\")",
        "isAcronym(words = [\"Deadline\", \"Lose\", \"Everything\"], s = \"LED\")",
        "isAcronym(words = [\"nation\", \"alphabet\", \"zealand\"], s = \"nalz\")"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '011')",
        "maximumOddBinaryNumber(s = \"111\")",
        "maximumOddBinaryNumber(s = \"111\")",
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = '00001')",
        "maximumOddBinaryNumber(s = \"100011\")",
        "maximumOddBinaryNumber(s = \"1000001\")",
        "maximumOddBinaryNumber(s = \"11010101\")"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 3, 2])",
        "countWays(nums = [1, 2, 4, 5])",
        "countWays(nums = [1, 3, 3])",
        "countWays(nums = [2, 3, 5])",
        "countWays(nums = [4, 4, 4])",
        "countWays(nums = [3, 1, 2, 2])",
        "countWays(nums = [2,2,1])",
        "countWays(nums = [2,2,4,4])",
        "countWays(nums = [1, 2, 1, 3, 2, 1, 3])"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 10, offers = [[5,10,1],[1,2,9]])",
        "maximizeTheProfit(n = 4, offers = [[1,3,5],[1,2,2],[3,4,10]])",
        "maximizeTheProfit(n = 10, offers = [[2,5,100],[3,8,150]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,9],[2,3,7],[3,4,3],[4,5,1]])",
        "maximizeTheProfit(n = 10, offers = [[3, 10, 2], [2, 5, 10], [4, 8, 10]])",
        "maximizeTheProfit(n = 6, offers = [[1, 3, 2], [2, 4, 5], [3, 5, 10], [2, 6, 5]])",
        "maximizeTheProfit(n = 4, offers = [[3, 3, 2], [4, 4, 4], [4, 3, 2]])",
        "maximizeTheProfit(n = 5, offers = [[5, 1, 2], [1, 3, 1], [3, 4, 1], [4, 5, 3], [2, 3, 5]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 4], [1, 3, 5], [2, 4, 7], [0, 2, 1]])",
        "maximizeTheProfit(n = 10, offers = [[1,5,2], [3,8,1], [9,10,3], [3,4,3]])"
    ],
    "sample_122": [
        "minimumIndex(nums = [3,1,2,3,2])",
        "minimumIndex(nums = [3,1,3,5,4,3])",
        "minimumIndex(nums = [2,2,1,1,3,3])",
        "minimumIndex(nums = [4, 3, 3, 2, 4])",
        "minimumIndex(nums = [4,2,2,3,4])",
        "minimumIndex(nums = [4, 4, 4, 2, 4, 4, 4, 4, 4])",
        "minimumIndex(nums = [4, 4, 1, 1, 2, 2, 3])",
        "minimumIndex(nums = [1, 5, 2, 3, 4])",
        "minimumIndex(nums = [3,4,1,3,3,2,4])",
        "minimumIndex(nums = [4,3,4,4,4,4,4,3,4,4,4,4,4,3,4,4,4,4,4,3,4,4,4,4])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[4,5]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[4,5]])",
        "numberOfPoints(nums = [[1,2],[3,4],[5,6],[6,7],[7,8],[8,9],[2,3]])",
        "numberOfPoints(nums = [[0, 3], [3, 6], [7, 9], [9, 10]])",
        "numberOfPoints(nums = [[2,3],[4,6],[4,6]])",
        "numberOfPoints(nums = [[2,3],[4,100]])",
        "numberOfPoints(nums = [[0,1],[1,2],[2,3],[0,1],[0,3]])",
        "numberOfPoints(nums = [[1,2],[2,3],[2,3],[1,4],[6,8],[8,9],[8,9],[7,8]])",
        "numberOfPoints(nums = [[1,1],[1,2],[2,4],[3,4],[4,4],[4,5],[6,7],[8,8],[8,9],[9,9]])",
        "numberOfPoints(nums = [[0,2],[2,4],[3,5],[4,5],[6,9],[8,9],[10,11]])"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"apples_and_oranges\"], separator = \"_\")",
        "splitWordsBySeparator(words = [\"1,2,3\", \"4,5,6\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"applesauce\", \"juice\"], separator = \"u\")",
        "splitWordsBySeparator(words = [\"abc\", \"def\", \"ghi\"], separator = \"bcd\")",
        "splitWordsBySeparator(words = [\"apples,pears#oranges\", \"bananas\", \"blueberries\"], separator = \"#\")",
        "splitWordsBySeparator(words = [\"applesauce\", \"made\", \"with\", \"apples\"], separator = \"s\")",
        "splitWordsBySeparator(words = [\"banana\", \"apple\", \"orange\", \"kiwi\"], separator = \"na\")",
        "splitWordsBySeparator(words = [\"hello\", \"world\", \"mt\", \"r\"], separator = \"o\")",
        "splitWordsBySeparator(words = [\"john\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\"], separator = \"o\")",
        "splitWordsBySeparator(words = [\"blue\", \"red\", \"green\", \"yellow\", \"purple\"], separator = \"u\")"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 1, target = 0)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 4, target = 4)",
        "minimumPossibleSum(n = 2, target = -5)"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[4,5]])",
        "numberOfPoints(nums = [[1,3],[2,5],[5,7]])",
        "numberOfPoints(nums = [[0, 1], [1, 2], [1, 3], [0, 3], [3, 4]])",
        "numberOfPoints(nums = [[1,3],[3,6],[1,6],[1,5]])",
        "numberOfPoints(nums = [[0,3],[3,6],[1,10],[10,15]])",
        "numberOfPoints(nums = [[2, 5], [2, 3], [3, 6]])",
        "numberOfPoints(nums = [[1, 3], [1, 4], [2, 3], [4, 4], [2, 4], [4, 5], [2, 5]])",
        "numberOfPoints(nums = [[0, 1], [1, 2], [1, 3], [2, 4], [4, 5], [0, 3], [0, 5]])",
        "numberOfPoints(nums = [[0, 1], [1, 3], [3, 6], [5, 7], [7, 8], [8, 9], [3, 4], [2, 3]])",
        "numberOfPoints(nums = [[1, 1], [2, 5], [1, 4], [4, 7], [6, 10], [2, 4]])"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 3], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [5, 10, 15], m = 7, k = 0)",
        "countInterestingSubarrays(nums = [3, 5, 7, 9, 11], m = 7, k = 2)",
        "countInterestingSubarrays(nums = [0,1,0,2,0], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [2,3,2,3,3,2], m = 2, k = 0)"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8,9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9, 11], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [3, 1, 2, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 5, 7, 12, 49, 35, 20], k = 2)"
    ],
    "sample_203": [
        "minimumOperations(num = \"025\")",
        "minimumOperations(num = \"75\")",
        "minimumOperations(num = \"5025\")",
        "minimumOperations(num = \"075\")",
        "minimumOperations(num = \"2\")",
        "minimumOperations(num = \"9025\")",
        "minimumOperations(num = \"25025\")",
        "minimumOperations(num = \"010\")",
        "minimumOperations(num = \"220\")",
        "minimumOperations(num = \"400200\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 5, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,4], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 2, 2, 3], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [3, 3, 3, 3], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [3, 1, 7, 2, 6], modulo = 7, k = 3)",
        "countInterestingSubarrays(nums = [4,5,7,1,3,5,7], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 3, 3, 3, 2], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 1, 2, 2, 2], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 2, 2, 4, 4, 4, 7, 7, 4, 4, 2, 2, 2], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1,2,1,3,0,0,5,2,1,3,2,3,5], modulo = 10, k = 0)"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1,2,2,1,1,1,1,1], K = 2)",
        "longestEqualSubarray(A = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], K = 4)",
        "longestEqualSubarray(A = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
        "longestEqualSubarray(A = [1,2,3,3,3,2,1], K = 2)",
        "longestEqualSubarray(A = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], K = 4)",
        "longestEqualSubarray(A = [0,0,0,1,0,0,1,0,0,1,1,1,0,0,1], K = 2)",
        "longestEqualSubarray(A = [1,2,3,4,2,3,4,3,4,4,4], K = 3)",
        "longestEqualSubarray(A = [1,2,3,3,2,1,3,2,2,3,2,1,2], K = 2)",
        "longestEqualSubarray(A = [0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0], K = 3)",
        "longestEqualSubarray(A = [1,2,1,1,1,3,1,3,1,1,3,3,3,4,3,3,1,1,3,4,4], K = 2)"
    ],
    "sample_146": [
        "finalString(s = \"pintire\")",
        "finalString(s = \"this is a pointer\")",
        "finalString(s = 'tinneir')",
        "finalString(s = 'pintero')",
        "finalString(s = 'miptr')",
        "finalString(s = \"iontp\")",
        "finalString(s = \"rtnepoi\")",
        "finalString(s = \"xitotni\")",
        "finalString(s = \"ro[i]nter\")",
        "finalString(s = \"mi_tnopper\")"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [8, 5, 6, 9], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [100, 50, 10, 50], target = 75)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 5, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 8, 11], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [100, 50, 100, 100], target = 75)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 8, 7, 9, 5], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 8, 10, 11], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [240,100,80], target = 80)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 8, 6, 5, 12, 2], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 20, 13, 20], target = 10)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1,3],[3,6],[0,3],[2,5],[0,1]])",
        "numberOfPoints(nums = [[1,2],[1,3],[2,4],[4,5]])",
        "numberOfPoints(nums = [[1, 2], [1, 3], [1, 4], [4, 5]])",
        "numberOfPoints(nums = [[1,3],[3,6],[4,4],[0,5]])",
        "numberOfPoints(nums = [[1,2],[1,3],[2,5]])",
        "numberOfPoints(nums = [[1, 5], [3, 4], [7, 9], [2, 3]])",
        "numberOfPoints(nums = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,4],[4,6]])",
        "numberOfPoints(nums = [[1, 3], [1, 3], [2, 4], [4, 6]])",
        "numberOfPoints(nums = [[1,3],[3,6],[2,5],[9,12],[2,11]])",
        "numberOfPoints(nums = [[2, 5], [14, 14], [10, 15], [8, 11], [1, 15], [4, 5], [11, 12]])"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1])",
        "maxIncreasingGroups(A = [1])",
        "maxIncreasingGroups(A = [0])",
        "maxIncreasingGroups(A = [0, 0])",
        "maxIncreasingGroups(A = [2, 1, 2, 1, 2])",
        "maxIncreasingGroups(A = [2, 3, 4])",
        "maxIncreasingGroups(A = [10, 9, 2, 5, 3, 7, 101, 18])",
        "maxIncreasingGroups(A = [3,2,1,1])",
        "maxIncreasingGroups(A = [2, 5, 2, 6, 7, 4, 5, 2])",
        "maxIncreasingGroups(A = [2,3,3,3,2,1,4,5,6,7])"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 5, offers = [[1,2,3],[2,3,4]])",
        "maximizeTheProfit(n = 3, offers = [[3, 1, 1], [3, 3, 1], [2, 1, 2]])",
        "maximizeTheProfit(n = 3, offers = [[2, 1, 3], [3, 1, 3], [1, 1, 1]])",
        "maximizeTheProfit(n = 5, offers = [[3, 1, 300], [2, 5, 100], [4, 4, 50]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 100], [2, 3, 20], [3, 4, 50]])",
        "maximizeTheProfit(n = 5, offers = [[4, 2, 2], [5, 3, 2]])",
        "maximizeTheProfit(n=3, offers = [[1, 2, 4], [2, 3, 6], [3, 4, 8], [1, 3, 1]])",
        "maximizeTheProfit(n = 4, offers = [[2, 1, 5], [2, 2, 10], [3, 3, 15]])",
        "maximizeTheProfit(n = 10, offers = [[4,6,10],[5,7,15],[6,8,20],[4,10,15]])",
        "maximizeTheProfit(n = 4, offers = [[1,1,1],[2,2,3],[3,3,4],[4,4,5],[2,1,1]])"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"R__R_R\")",
        "furthestDistanceFromOrigin(moves = \"L_R_R_R_\")",
        "furthestDistanceFromOrigin(moves = 'L_R')",
        "furthestDistanceFromOrigin(moves = \"L__RR__R\")",
        "furthestDistanceFromOrigin(moves = \"R_R_RR_RR\")",
        "furthestDistanceFromOrigin(moves = \"RRR_RRRR_RRRRRR\")",
        "furthestDistanceFromOrigin(moves = \"R_R_RRR_RRRRRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LR_L_LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRL_LLRRRR_\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLRRRLLLLLRRRLRLLRRRLRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR"
    ],
    "sample_175": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 1, k = 2)",
        "minimumSum(n = 3, k = 9)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [1, 3]])",
        "numberOfPoints(nums = [[1, 2], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1,2],[1,4],[2,4],[4,4]])",
        "numberOfPoints(nums = [[0, 1], [2, 3], [2, 4]])",
        "numberOfPoints(nums = [[1, 3], [4, 4], [4, 5]])",
        "numberOfPoints(nums = [[1, 4], [2, 5], [1, 3], [2, 6]])",
        "numberOfPoints(nums = [[0,3],[4,6],[6,10],[11,13]])",
        "numberOfPoints(nums = [[4,4],[6,8],[9,13],[10,16]])",
        "numberOfPoints(nums = [[1,3],[3,6],[4,6],[8,11]])",
        "numberOfPoints(nums = [[2, 8], [8, 12], [5, 10], [4, 7]])"
    ],
    "sample_205": [
        "minimumOperations(num = \"0500\")",
        "minimumOperations(num = \"000000\")",
        "minimumOperations(num = \"999\")",
        "minimumOperations(num = \"00025\")",
        "minimumOperations(num = \"77\")",
        "minimumOperations(num = \"01250\")",
        "minimumOperations(num = \"25000\")",
        "minimumOperations(num = \"7205\")",
        "minimumOperations(num = \"000025750000\")",
        "minimumOperations(num = \"1000200\")"
    ],
    "sample_120": [
        "minimumIndex(nums = [2, 2, 3, 1])",
        "minimumIndex(nums = [2, 1, 2, 1, 1, 2, 2])",
        "minimumIndex(nums = [4, 5, 6, 7, 0, 1, 2, 1, 2])",
        "minimumIndex(nums = [0, 1, 2, 2])",
        "minimumIndex(nums = [2, 3, 0, 1])",
        "minimumIndex(nums = [5, 7, 5])",
        "minimumIndex(nums = [1, 2, 0, 3, 2, 0])",
        "minimumIndex(nums = [3, 1, 4, 3, 4, 4])",
        "minimumIndex(nums = [0, 2, 2, 2, 2, 3, 4])",
        "minimumIndex(nums = [2, 4, 7, 7, 4, 2, 4, 7, 2, 4, 4, 4, 7, 2, 4, 7])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"LRLRLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LLLRRRLRLL\")",
        "furthestDistanceFromOrigin(moves = \"L_RR__\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLRLR_\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLLRLR\")",
        "furthestDistanceFromOrigin(moves = \"L_RR__R_\")",
        "furthestDistanceFromOrigin(moves = \"LLLRLRLRLLRLRR\")",
        "furthestDistanceFromOrigin(moves = \"RRRLRL_____\")",
        "furthestDistanceFromOrigin(moves = \"LL_RRRRRRRRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLRLRLRRRRLRRLRL\")"
    ],
    "sample_161": [
        "maxSum(nums = [10, 20, 30])",
        "maxSum(nums = [10, 2, 3, 4])",
        "maxSum(nums = [33, 333, 3333, 33333, 333333])",
        "maxSum(nums = [2000, 2000])",
        "maxSum(nums = [-100000, -100000])",
        "maxSum(nums = [10, 20, 30, 40, 50, 40, 30, 20, 10])",
        "maxSum(nums = [12, 23, 45, 56, 67, 78])",
        "maxSum(nums = [1, 99, 8])",
        "maxSum(nums = [910, 2])",
        "maxSum(nums = [100, 23, 12, 34, 29, 90])"
    ],
    "sample_160": [
        "maxSum(nums = [])",
        "maxSum(nums = [3, 30, 34, 5, 9])",
        "maxSum(nums = [-100])",
        "maxSum(nums = [1,4,5,6])",
        "maxSum(nums = [100, 9, 99])",
        "maxSum(nums = [7, 3, 8, 1])",
        "maxSum(nums = [1000000, 2])",
        "maxSum(nums = [11,23,45,7,8])",
        "maxSum(nums = [-99,99,999,100,-100])",
        "maxSum(nums = [119,934,20,1251,1895,122,5478,1119,1797,1132])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = [\"one,two,three\", \"four,five,,six,\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two,three\", \"four,five,,six\"], separator = \",\")",
        "splitWordsBySeparator(words = ['one,two', 'three,four', 'five', 'six'], separator = ',')",
        "splitWordsBySeparator(words = ['one,two', 'three,four,five', 'six'], separator = ',')",
        "splitWordsBySeparator(words = ['one,two', 'three,four', 'five,six'], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three\", \"four,five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three,four\", \"five\", \",six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \",three\", \",four,five,six,\"], separator = \",\")",
        "splitWordsBySeparator(words=['one,two', 'three;four', 'five,six'], separator=\"[,;]\")",
        "splitWordsBySeparator(words = \"one,two;three.four-five:six\".split(\";\"), separator = \",\")"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 24, 6, 16, 8], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 8, 7, 6, 5], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 11, 13, 11], target = 11)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 8, 9], target = 12)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 8, 6, 1, 9], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 7, 8, 9], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [10,11,8,9,11,10], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 4, 10, 12, 16], target = 12)",
        "numberOfEmployeesWhoMetTarget(hours = [15, 4, 99, 65], target = 10)"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [50, 60, 80, 120], target = 100)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 3, 10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 0, 0], target = 24)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 3, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 9, 7], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 3, 7, 6], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 9, 6, 7], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 50, 70], target = 70)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 5, 4, 1, 1], target = 4)"
    ],
    "sample_171": [
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 1, k = 0)",
        "minimumSum(n = 10, k = 4)",
        "minimumSum(n = 10, k = 4)",
        "minimumSum(n = 3, k = 12)"
    ],
    "sample_159": [
        "maxSum(nums = [])",
        "maxSum(nums = [5,4,3,2,1])",
        "maxSum(nums = [100, 200])",
        "maxSum(nums = [2,2,4])",
        "maxSum(nums = [10, 10, 10])",
        "maxSum(nums = [10,21,9])",
        "maxSum(nums = [2,24,3])",
        "maxSum(nums = [-1000000000,-1000000000,-1000000000])",
        "maxSum(nums = [91,95,29])",
        "maxSum(nums=[53, 67, 98, 78, 12, 68, 93, 100, 99, 77])"
    ],
    "sample_157": [
        "canSplitArray(nums = [2, 1, 2, 5, 7, 3], m = 4)",
        "canSplitArray(nums = [1, 1, 1, 1], m = 2)",
        "canSplitArray(nums = [1, 2], m = 2)",
        "canSplitArray(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], m = 2)",
        "canSplitArray(nums = [2,3,5], m = 4)",
        "canSplitArray(nums = [5, 10, 10], m = 5)",
        "canSplitArray(nums = [3,1,5,4,2], m = 6)",
        "canSplitArray(nums = [3, 4, 5, 8], m = 5)",
        "canSplitArray(nums = [5,5,5,2], m = 5)",
        "canSplitArray(nums = [19, 58, 84], m = 100)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [], separator = \"\")",
        "splitWordsBySeparator(words = [], separator = \"a\")",
        "splitWordsBySeparator(words = [], separator = \"a\")",
        "splitWordsBySeparator(words = [], separator = \",\")",
        "splitWordsBySeparator(words = [], separator = \".\")",
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\"], separator = \" \")",
        "splitWordsBySeparator(words = [''], separator = ' ')",
        "splitWordsBySeparator(words = [\"abc\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"bee\", \"hive\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"123\", \"12345\", \"1234\"], separator = \"2\")"
    ],
    "sample_172": [
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 1, k = 3)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n=1, k=1)"
    ],
    "sample_228": [
        "countWays(nums = [1,2,4,5])",
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [0, 2, 4, 5])",
        "countWays(nums = [0, 0, 1, 3, 4])",
        "countWays(nums = [4,2,2,7])",
        "countWays(nums = [0,1,2,2,2,4])",
        "countWays(nums = [1, 0, 3, 4, 2])",
        "countWays(nums = [1,4,5,7,9,12])",
        "countWays(nums = [0, 3, 4, 5, 7, 10, 13, 14])"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = \"00\")",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = \"1111\")",
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = \"11000\")",
        "maximumOddBinaryNumber(s = \"011001\")",
        "maximumOddBinaryNumber(s = '100011')",
        "maximumOddBinaryNumber(s = \"1111000\")",
        "maximumOddBinaryNumber(s = \"00011101\")",
        "maximumOddBinaryNumber(s = \"1010001010000101\")"
    ],
    "sample_119": [
        "minimumIndex(nums = [3, 1, 3, 3, 2])",
        "minimumIndex(nums = [3, 4, 4, 5, 5, 5, 5])",
        "minimumIndex(nums = [1,2,2])",
        "minimumIndex(nums = [3, 1, 1, 3, 4, 3])",
        "minimumIndex(nums = [2, 2, 2, 4, 2])",
        "minimumIndex(nums = [1, 5, 4, 5, 5, 5, 5])",
        "minimumIndex(nums = [0,1,2,3,4,5,0])",
        "minimumIndex(nums = [3,2,5,2,1,2,4])",
        "minimumIndex(nums = [3, 5, 5, 1, 2, 2, 2])",
        "minimumIndex(nums = [0, 1, 2, 3, 0, 4, 4, 4, 0, 5, 5, 5, 0, 0, 0])"
    ],
    "sample_153": [
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [1,2,3], m = 2)",
        "canSplitArray(nums = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,",
        "canSplitArray(nums = [2,2,1,1,2,1,2], m = 3)",
        "canSplitArray(nums = [1,2,1,2,1,2,1,2,1,2], m = 2)",
        "canSplitArray(nums = [10, 15, 20, 25, 40], m = 30)",
        "canSplitArray(nums = [220,239,250,258,300,320,345,361], m = 351)",
        "canSplitArray(nums = [20, 89, 79, 69, 33, 21], m = 89)",
        "canSplitArray(nums = [29, 31, 45, 61, 63, 74, 87, 92, 99], m = 100)",
        "canSplitArray(nums = [11,20,4,16,32,3,8,13,22,16,7,6,1,3], m = 11)"
    ],
    "sample_147": [
        "finalString(s = \"sings\")",
        "finalString(s = \"sings\")",
        "finalString(s = \"singing\")",
        "finalString(s = \"singing\")",
        "finalString(s = 'thisng')",
        "finalString(s = \"this\")",
        "finalString(s = \"this\")",
        "finalString(s = \"thisngi\")",
        "finalString(s = \"satish\")",
        "finalString(s = \"sxingikq\")"
    ],
    "sample_174": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 10)",
        "minimumSum(n = 3, k = 13)",
        "minimumSum(n = 10, k = 50)"
    ],
    "sample_154": [
        "canSplitArray(nums = [7,2,5,10], m = 9)",
        "canSplitArray(nums = [1, 1, 1, 1], m = 2)",
        "canSplitArray(nums = [2,3,1,1,2], m = 2)",
        "canSplitArray(nums = [2, 1, 3], m = 5)",
        "canSplitArray(nums = [3, 2, 1, 1], m = 3)",
        "canSplitArray(nums = [4, 3, 2, 6, 3], m = 4)",
        "canSplitArray(nums = [1000000000000000, 1000000000000000], m = 1000000000000000)",
        "canSplitArray(nums = [3, 1, 2, 5, 4], m = 3)",
        "canSplitArray(nums = [3, 3, 4, 4], m = 5)",
        "canSplitArray(nums = [232,453,242,5324,234,234], m = 76)"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "countCompleteSubarrays(nums = [9, 4, 7, 1, 8])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 4])",
        "countCompleteSubarrays(nums = [3, 1, 2, 4, 3])",
        "countCompleteSubarrays(nums = [2, 1, 2, 6, 3, 5])",
        "countCompleteSubarrays(nums = [1,2,3,3,4,1])"
    ],
    "sample_150": [
        "finalString(s = \"string\")",
        "finalString(s = \"singing\")",
        "finalString(s = 'siting')",
        "finalString(s = 'siting')",
        "finalString(s = 'siting')",
        "finalString(s = 'kings')",
        "finalString(s = \"satir\")",
        "finalString(s = \"sirnig\")",
        "finalString(s = 'spirit')",
        "finalString(s = \"roses are red, violets are blue, ice cream is green, and so are you\")"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 1, target = 0)",
        "minimumPossibleSum(n = 1, target = 0)",
        "minimumPossibleSum(n = 1, target = 0)",
        "minimumPossibleSum(n = 3, target = 6)"
    ],
    "sample_176": [
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 2, k = 7)",
        "minimumSum(n = 2, k = 6)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 10, k = 17)"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [2,2,2,2], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1,2,1], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 1, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 6, k = 0)",
        "countInterestingSubarrays(nums = [5, 10, 15, 20], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [3, 1, 4], modulo = 6, k = 3)",
        "countInterestingSubarrays(nums = [3, 3, 1, 4], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums=[11, 12, 13, 14, 15], modulo=7, k=0)",
        "countInterestingSubarrays(nums = [7, 14, 4, 14, 30, 16, 6, 9, 9, 3, 30, 16, 6, 9, 9, 3], modulo = 7, k = 4)",
        "countInterestingSubarrays(nums = [5, 6, 8, 2, 5, 3, 9, 7, 9, 5, 1, 3, 8, 9, 7, 3, 5, 5, 9, 3, 7, 9, 9, 7, 5, 5, 6, 9, 9, 1, 6, 1, 9, 3, 6, 5, 4, 4, 0, 5, 8, 2, 2, 7, 0, 2, 0], modulo = 10, k = 7)"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 2, 4, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [2,4,5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024], k = 3)",
        "sumIndicesWithKSetBits(nums = [5, 8, 4, 3, 2, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [5, 3, 2, 6, 2, 4, 3, 3], k = 2)"
    ],
    "sample_151": [
        "finalString(s = 'this')",
        "finalString(s = \"pin\")",
        "finalString(s = \"rotator\")",
        "finalString(s = 'niting')",
        "finalString(s = 'this is good')",
        "finalString(s = \"sinistr\")",
        "finalString(s = 'itsntr')",
        "finalString(s = 'robot')",
        "finalString(s = \"noisii\")",
        "finalString(s = 'rkng')"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 4, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [2,3,1,5], k = 1)",
        "sumIndicesWithKSetBits(nums = [0,1,0], k = 2)"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [2, 5, 9])",
        "maxIncreasingGroups(usageLimits = [3, 4, 7, 8])",
        "maxIncreasingGroups(usageLimits = [10, 5, 20])",
        "maxIncreasingGroups(usageLimits = [8, 3, 6])",
        "maxIncreasingGroups(usageLimits = [1, 3, 4, 9, 12, 12])",
        "maxIncreasingGroups(usageLimits = [1,2,3,3,5,6,8])",
        "maxIncreasingGroups(usageLimits = [2, 3, 4, 9, 11, 12, 13])",
        "maxIncreasingGroups(usageLimits = [2, 2, 3, 1, 3, 1])",
        "maxIncreasingGroups(usageLimits = [1, 5, 2, 3, 4, 1, 1])",
        "maxIncreasingGroups(usageLimits = [2, 3, 1, 1, 3, 4, 5, 1, 6])"
    ],
    "sample_204": [
        "minimumOperations(s = \"02550\")",
        "minimumOperations(s = \"0050250\")",
        "minimumOperations(s = \"005025\")",
        "minimumOperations(s = \"007500\")",
        "minimumOperations(s = \"00255075\")",
        "minimumOperations(s = \"00255075\")",
        "minimumOperations(s = \"75025\")",
        "minimumOperations(s = \"105\")",
        "minimumOperations(s = \"050025\")",
        "minimumOperations(s = \"1010\")"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 8, 7, 5, 4], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 13, 7, 9], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 5, 10, 6], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 5, 11, 8, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 16, 11, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [24, 5, 11, 10, 3], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [24, 30, 40, 40, 60], target = 40)"
    ],
    "sample_148": [
        "finalString(s = \"pintire\")",
        "finalString(s = \"pointer\")",
        "finalString(s = \"intop\")",
        "finalString(s = \"ritop\")",
        "finalString(s = 'pinot')",
        "finalString(s = 'piton')",
        "finalString(s = 'pinterest')",
        "finalString(s = 'intopnter')",
        "finalString(s = \"poitin\")",
        "finalString(s = 'ponterini')"
    ],
    "sample_168": [
        "isAcronym(words = [\"abc\", \"def\", \"ghi\"], s = \"AD\")",
        "isAcronym(words = [\"complicated\", \"words\"], s = \"cw\")",
        "isAcronym(words = [\"Hello\", \"world\"], s = \"wow\")",
        "isAcronym(words = [\"abc\", \"aaa\"], s = \"aba\")",
        "isAcronym(words = [\"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\"], s = \"BFJOTLD\")",
        "isAcronym(words = [\"ex\", \"ex\", \"ex\", \"ex\"], s = \"xxxx\")",
        "isAcronym(words = [\"Easy\", \"Eat\", \"Evidence\"], s = \"E\")",
        "isAcronym(words = [\"Robot\", \"Electric\", \"Garbage\", \"Compost\", \"Machine\"], s = \"REGMC\")",
        "isAcronym(words = [\"Dice\", \"And\", \"Violin\", \"Is\", \"Cool\"], s = \"DIVC\")",
        "isAcronym(words = [\"Do\", \"I\", \"See\", \"Apple\", \"In\", \"The\", \"Tree\"], s = \"AITTA\")"
    ],
    "sample_201": [
        "minOperations(nums = [1, 2, 3], target = 5)",
        "minOperations(nums = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,",
        "minOperations(nums = [1, 1, 1, 2, 2, 4], target = 3)",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1], target = 3)",
        "minOperations(nums = [1,1,1,2,5,1,3], target = 8)",
        "minOperations(nums = [10, 2], target = 9)",
        "minOperations(nums = [5, 3, 3, 1, 5], target = 5)",
        "minOperations(nums = [1000, 100, 10, 1], target = 24)",
        "minOperations(nums = [100000,10000,1000,100,10], target = 8)",
        "minOperations(nums = [2, 7, 9, 14, 15, 27], target = 123)"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = '00101')",
        "maximumOddBinaryNumber(s = \"00101\")",
        "maximumOddBinaryNumber(s = \"011\")",
        "maximumOddBinaryNumber(s = \"0000\")",
        "maximumOddBinaryNumber(s = \"001101\")",
        "maximumOddBinaryNumber(s = '101011')",
        "maximumOddBinaryNumber(s = \"11111\")",
        "maximumOddBinaryNumber(s = \"00110011\")",
        "maximumOddBinaryNumber(s = '10100110')",
        "maximumOddBinaryNumber(s = '10111001001')"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '011')",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"011\")",
        "maximumOddBinaryNumber(s = \"01\")",
        "maximumOddBinaryNumber(s = '01001')",
        "maximumOddBinaryNumber(s = \"1010\")",
        "maximumOddBinaryNumber(s = \"11000\")",
        "maximumOddBinaryNumber(s = \"1001001101\")"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 4, target = 12)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 2, target = 6)",
        "minimumPossibleSum(n = 4, target = 13)",
        "minimumPossibleSum(n = 4, target = 14)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 15)"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LLARL\")",
        "furthestDistanceFromOrigin(moves = \"LRALAL\")",
        "furthestDistanceFromOrigin(moves = \"LRLR\")",
        "furthestDistanceFromOrigin(moves = \"LRL\")",
        "furthestDistanceFromOrigin(moves = \"RRRLLLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LRQ\")",
        "furthestDistanceFromOrigin(moves = \"RLRLRLRRR\")",
        "furthestDistanceFromOrigin(moves = \"RRRRLLLRLR\")",
        "furthestDistanceFromOrigin(moves = \"LRRRRLRLRR\")"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 1, target = 3)",
        "minimumPossibleSum(n = 1, target = 10**6 + 1)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 4, 8, 3], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 0, 0, 0, 0], target = 25)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 6, 7], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 12, 10, 10, 8], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 4, 4, 3, 1], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 100, 80, 120], target = 85)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 11, 13, 12, 11, 10, 12], target = 12)",
        "numberOfEmployeesWhoMetTarget(hours = [37, 41, 33, 47, 49, 39, 42, 40, 47, 37], target = 45)"
    ],
    "sample_231": [
        "countWays(nums = [1, 3, 4, 5])",
        "countWays(nums = [0, 3, 1])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [2, 4, 6])",
        "countWays(nums = [1,2,3,4])",
        "countWays(nums = [4, 3, 2])",
        "countWays(nums = [3,2,1,0])",
        "countWays(nums = [1, 2, 3, 7])",
        "countWays(nums = [1, 4, 5, 9])",
        "countWays(nums = [0, 1, 1, 3, 3])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"LLRRLL\")",
        "furthestDistanceFromOrigin(moves = \"LLMRRLL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLRLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LRRLRLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LR_L___L\")",
        "furthestDistanceFromOrigin(moves = \"LLLRLRLRRLLRR\")",
        "furthestDistanceFromOrigin(moves = \"_LRL_R_\")",
        "furthestDistanceFromOrigin(moves = \"R_R_L_L_R_L_R\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLRLRRRRLLRRLRLRLR\")"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 2, target = 6)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 1, target = 5)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 1, target = 6)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 4, target = 4)"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countCompleteSubarrays(nums = [1, 3, 2, 2, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 3, 2, 2, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 3, 2, 2, 2, 3])",
        "countCompleteSubarrays(nums = [2, 3, 1, 2, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 1, 3, 3, 5, 5, 7, 7])",
        "countCompleteSubarrays(nums = [3, 1, 3, 2, 6, 4, 5])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 4, 4, 4, 5, 5, 5])"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 2, 3], m = 3)",
        "canSplitArray(nums = [2,3,4], m = 5)",
        "canSplitArray(nums = [1, 2, 1, 2, 1, 2], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7, 8], m = 10)",
        "canSplitArray(nums = [2,3,4], m = 3)",
        "canSplitArray(nums = [5, 4, 3, 2, 5], m = 7)",
        "canSplitArray(nums = [5, 2, 3, 7], m = 6)",
        "canSplitArray(nums = [2,3,1,1,3,2,1,1], m = 3)",
        "canSplitArray(nums = [195, 129, 89, 184, 77, 27, 213, 88, 112], m = 187)",
        "canSplitArray(nums = [45, 92, 10, 15, 27, 93, 60, 59, 6, 5, 98, 21, 82, 16, 57, 79], m = 109)"
    ],
    "sample_200": [
        "minOperations(nums = [2, 3, 9], target = 8)",
        "minOperations(nums = [2, 3, 9], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], target = 12)",
        "minOperations(nums = [2,3,5,10], target = 100)",
        "minOperations(nums = [2, 5, 3], target = 5)",
        "minOperations(nums = [2, 3, 5, 10], target = 25)",
        "minOperations(nums = [4, 9, 12, 13], target = 20)",
        "minOperations(nums = [1,2,3,4,5,6,7], target = 1700)",
        "minOperations(nums = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91], target = 10000)",
        "minOperations(nums = [2, 3, 6, 8, 5, 1, 4, 11, 10], target = 27)"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "sumIndicesWithKSetBits(nums = [23, 42, 10, 21], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 4, 2, 10], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024], k = 3)",
        "sumIndicesWithKSetBits(nums = [3, 1, 2, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 1, 6, 5, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [5, 2, 7, 1, 7, 6], k = 2)"
    ],
    "sample_165": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"A\", \"B\", \"C\"], s = \"ABC\")",
        "isAcronym(words = [\"abc\", \"def\", \"ghi\"], s = \"adg\")",
        "isAcronym(words = [\"hi\", \"there\"], s = \"hte\")",
        "isAcronym(words = [\"foo\", \"bar\", \"baz\"], s = \"fbb\")",
        "isAcronym(words = [\"J\", \"o\", \"hn\"], s = \"Joh\")",
        "isAcronym(words = [\"cat\", \"in\", \"a\", \"box\"], s = \"CIAB\")",
        "isAcronym(words = [\"Mars\", \"Exploration\", \"Rover\", \"Alternative\", \"Search\"], s = \"MERAS\")",
        "isAcronym(words = [\"Morning\", \"Air\", \"Flight\"], s = \"MAF\")",
        "isAcronym(words = [\"USC\", \"CU\", \"Anonymous\"], s = \"USA\")"
    ],
    "sample_227": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [-1, 0, 1, 2])",
        "countWays(nums = [1, 3, 7, 9])",
        "countWays(nums = [-10, -10, -5, 0, 5, 10, 20])",
        "countWays(nums = [0, 2, 5, 9])",
        "countWays(nums = [-100, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countWays(nums = [-4, -1, 0, 3])",
        "countWays(nums = [-3,-2,-1,0,1,3,4])",
        "countWays(nums = [0, -4, 1, 2, 3])",
        "countWays(nums = [-10, -3, 0, 0, 1, 2, 5])"
    ],
    "sample_158": [
        "maxSum(nums = [100, 10])",
        "maxSum(nums = [-100])",
        "maxSum(nums = [1, 3, 3])",
        "maxSum(nums = [3, 7])",
        "maxSum(nums = [100, 99, 101])",
        "maxSum(nums = [99, 100, 1001])",
        "maxSum(nums = [100, 200, 100, 200])",
        "maxSum(nums = [2, 7, 4, 2, 1])",
        "maxSum(nums = [1, 12345, 678])",
        "maxSum(nums = [-8, 7, 5, 1])"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [2,2,2,1,2,2,1,2,2,2], k = 2)",
        "longestEqualSubarray(nums = [2, 2, 2, 1, 2, 2, 1, 2, 2, 2], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [0,0,0,0,0,0,0,0,0,0], k = 4)",
        "longestEqualSubarray(nums = [0,0,0,0,0,0], k = 5)",
        "longestEqualSubarray(nums = [1,2,2,1,1,1,1,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,4,5,6,7,8,1,2,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [3,4,3,4,3,3,4,3,4], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,3,2,1,1,1,2,2], k = 3)"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 3, offers = [[1, 1, 10], [2, 2, 10], [3, 3, 10]])",
        "maximizeTheProfit(n = 1, offers = [[0, 1, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 100], [3, 5, 250], [2, 5, 200]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 4, 15], [3, 5, 7], [4, 6, 12]])",
        "maximizeTheProfit(n = 4, offers = [[3, 5, 1], [2, 4, 4]])",
        "maximizeTheProfit(n = 2, offers = [[1, 0, 2], [2, 1, 3], [2, 0, 4]])",
        "maximizeTheProfit(n = 5, offers = [[1, 1, 1], [2, 5, 2], [3, 3, 4], [4, 2, 4]])",
        "maximizeTheProfit(n = 7, offers = [[0, 3, 10], [2, 5, 15], [5, 6, 20]])",
        "maximizeTheProfit(n = 10, offers = [[3, 7, 5], [4, 8, 10], [5, 9, 12], [6, 10, 15]])",
        "maximizeTheProfit(n = 10, offers = [[1, 2, 20], [1, 3, 30], [3, 4, 10], [2, 4, 20], [2, 5, 50], [1, 6, 10], [2, 6, 40], [1, 7, 20], [3, 7, 20], [5, 7, 30], [4, 8, 20], [6, 8, 40], [7, 9, 30]])"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(x = [3, 2, 1, 2])",
        "maxIncreasingGroups(x = [1, 2, 3, 5, 8, 9, 10, 11])",
        "maxIncreasingGroups(x = [1, 2, 4, 6, 8])",
        "maxIncreasingGroups(x = [3, 2, 1, 6, 0, 9])",
        "maxIncreasingGroups(x = [1, 2, 3, 5, 7, 8, 9, 10, 14, 15])",
        "maxIncreasingGroups(x = [1, 2, 5, 3, 7, 6, 8])",
        "maxIncreasingGroups(x = [8, 9, 10, 13, 14, 15])",
        "maxIncreasingGroups(x = [1, 2, 3, 5, 6, 7, 9, 11, 15])",
        "maxIncreasingGroups(x = [8, 9, 10, 2, 11, 1, 3, 4, 5])"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 4, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [2,3,1,5], k = 1)",
        "sumIndicesWithKSetBits(nums = [5, 2, 6, 2, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 4, 12, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [10, 4, 3, 8, 11], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 4, 4, 4, 2, 4, 8, 16], k = 4)",
        "sumIndicesWithKSetBits(nums = [1, 1, 4, 1, 4, 5, 4], k = 3)"
    ],
    "sample_207": [
        "minimumOperations(num = \"007\")",
        "minimumOperations(num = \"000\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"10000\")",
        "minimumOperations(num = \"5500\")",
        "minimumOperations(num = \"40\")",
        "minimumOperations(num = \"12000\")",
        "minimumOperations(num = \"7550\")",
        "minimumOperations(num = \"100500\")",
        "minimumOperations(num = \"2729\")"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"R2L3L\")",
        "furthestDistanceFromOrigin(moves = \"R2L3L2\")",
        "furthestDistanceFromOrigin(moves = \"R3L2\")",
        "furthestDistanceFromOrigin(moves = \"R2L3L3R\")",
        "furthestDistanceFromOrigin(moves = \"R2L3L3R\")",
        "furthestDistanceFromOrigin(moves = \"RLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LRRR\")",
        "furthestDistanceFromOrigin(moves = \"R1L2L2\")",
        "furthestDistanceFromOrigin(moves = \"LLLRLRLRR\")"
    ],
    "sample_206": [
        "minimumOperations(num = \"555\")",
        "minimumOperations(num = \"555\")",
        "minimumOperations(num = \"12345\")",
        "minimumOperations(num = \"175\")",
        "minimumOperations(num = \"18\")",
        "minimumOperations(num = \"575\")",
        "minimumOperations(num = \"00002575\")",
        "minimumOperations(num = \"102575\")",
        "minimumOperations(num = \"551\")",
        "minimumOperations(num = \"247\")"
    ],
    "sample_155": [
        "canSplitArray(nums = [7,2,5,10], m = 4)",
        "canSplitArray(nums = [7,2,5,10,8], m = 4)",
        "canSplitArray(nums = [7, 2, 5, 10], m = 4)",
        "canSplitArray(nums = [1,2,3,4,5,6,7,8,9,10], m = 3)",
        "canSplitArray(nums = [2,3,1,2,4,3], m = 5)",
        "canSplitArray(nums = [2,3,1,2,7,3,4,5,3,2,9,10,12], m = 4)",
        "canSplitArray(nums = [49, 24, 33], m = 6)",
        "canSplitArray(nums = [4, 7, 5, 2, 3], m = 7)",
        "canSplitArray(nums = [1,14,8,2,6,7,9,12,2,1,12], m = 5)",
        "canSplitArray(nums = [3,4,1,5,5,7,1,8,1,9,9,9], m = 10)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [2,3,1,2,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9])",
        "countCompleteSubarrays(nums = [2, 2, 3, 3, 4, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 3, 3, 2, 1, 2, 3])",
        "countCompleteSubarrays(nums = [9, 11, 1, 11, 7, 9, 2, 1])"
    ],
    "sample_202": [
        "minimumOperations(num = \"0250\")",
        "minimumOperations(num = \"001\")",
        "minimumOperations(num = \"00000000\")",
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"5025\")",
        "minimumOperations(num = \"0025750\")",
        "minimumOperations(num = \"01250\")",
        "minimumOperations(num = \"0050025\")",
        "minimumOperations(num = \"50200\")",
        "minimumOperations(num = \"02500750\")"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [\"a\", \"b\", \"c\"], b = \"\")",
        "splitWordsBySeparator(a = [\"\",\"\",\"\"], b = \" \")",
        "splitWordsBySeparator(a = [\"hello\", \"world\", \"byebye\"], b = \"ll\")",
        "splitWordsBySeparator(a = [\"bee\", \"honey\"], b = \"\")",
        "splitWordsBySeparator(a = [\"Hello\", \"World\", \"Python\", \"Tutorials\"], b = \"o\")",
        "splitWordsBySeparator(a = [\"mtx\", \"tt\", \"d\"], b = \"t\")"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8, 16], k = 2)",
        "sumIndicesWithKSetBits(nums = [2,3,4], k = 1)",
        "sumIndicesWithKSetBits(nums = [14, 7, 3, 12], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 4, 6, 8, 10], k = 2)"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '1000')",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = '10100')",
        "maximumOddBinaryNumber(s = '11000')",
        "maximumOddBinaryNumber(s = '11101')",
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s = '1001001')",
        "maximumOddBinaryNumber(s = \"0100000000\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [2,2,2,1,2,2,1,2,2,2], k = 1)",
        "longestEqualSubarray(nums = [0,1,1,0,0,1], k = 2)",
        "longestEqualSubarray(nums = [4,2,2,2,2,4], k = 1)",
        "longestEqualSubarray(nums = [4,3,4,3,4,4,4,3,4], k = 3)",
        "longestEqualSubarray(nums = [0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0], k = 4)",
        "longestEqualSubarray(nums = [0,1,0,2,0,2,0,3,0,4,0,0,0,0], k = 3)",
        "longestEqualSubarray(nums = [5,2,3,4,1,6,5,2,3,4,3,4], k = 2)",
        "longestEqualSubarray(nums = [4,5,1,3,2,7,3,4,9,10,3,3,4,5], k = 4)",
        "longestEqualSubarray(nums = [1,1,2,3,2,1,2,3,4,5,6,7,6,7,8,9,0], k = 10)"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [2, 2, 2, 1, 2, 2, 1, 2, 2, 2], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,4,5,6], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "longestEqualSubarray(nums = [1,2,2,3,3,2,2,1,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 0)",
        "longestEqualSubarray(nums = [0,1,2,3,4,5,1,2,3,4,5,6], k = 3)",
        "longestEqualSubarray(nums = [5, 6, 8, 9, 2, 4, 7, 1], k = 3)",
        "longestEqualSubarray(nums = [0, 1, 2, 3, 1, 0, 3, 2, 2], k = 1)",
        "longestEqualSubarray(nums = [2, 1, 2, 3, 4, 4, 4, 1, 4, 1, 4, 1, 4, 1, 2, 3, 4, 3, 4], k = 3)"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = \"0\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"011\")",
        "maximumOddBinaryNumber(s = \"0110\")",
        "maximumOddBinaryNumber(s = \"1000\")",
        "maximumOddBinaryNumber(s = \"1010101\")",
        "maximumOddBinaryNumber(s = \"100100\")",
        "maximumOddBinaryNumber(s = '11011')",
        "maximumOddBinaryNumber(s = \"001010\")",
        "maximumOddBinaryNumber(s = \"0010110\")"
    ],
    "sample_166": [
        "isAcronym(words = [\"Mars\", \"Earth\", \"Jupiter\"], s = \"MEJ\")",
        "isAcronym(words = [\"foo\", \"bar\", \"baz\"], s = \"fbb\")",
        "isAcronym(words = [\"Quick\", \"brown\", \"fox\"], s = \"QBF\")",
        "isAcronym(words = [\"deep\", \"learning\"], s = \"DL\")",
        "isAcronym(words = [\"cat\", \"in\", \"hat\"], s = \"ch\")",
        "isAcronym(words = [\"Pneumonoultramicroscopicsilicovolcanoconiosis\"], s = \"PNU\")",
        "isAcronym(words = [\"hello\", \"my\", \"name\", \"is\", \"Mike\"], s = \"HMMIM\")",
        "isAcronym(words = [\"saab\", \"audi\"], s = \"sa\")",
        "isAcronym(words = [\"Flour\", \"Sugar\", \"And\", \"Pepper\"], s = \"sap\")",
        "isAcronym(words = [\"attention\", \"to\", \"details\", \"and\", \"don\", \"t\", \"ignore\", \"the\", \"small\", \"stuff\"], s = \"atdandonotsis\")"
    ],
    "sample_163": [
        "maxSum(nums = [])",
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [10, 11, 12, 13, 14, 15])",
        "maxSum(nums = [1, 7, 2, 3, 4, 5])",
        "maxSum(nums = [-100, 11])",
        "maxSum(nums = [10, 1, 5, 5, 10])",
        "maxSum(nums = [33,11,33])",
        "maxSum(nums = [3,4,11,15])",
        "maxSum(nums = [2, 90, 101, 25])",
        "maxSum(nums = [-54, -57, 12, 46, -98, 29, -26, 67, 57, 54, -3, -32, 29, -51, -1, -18, 18])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [2, 4, 1, 3])",
        "semiOrderedPermutation(nums = [2,3,1,4])",
        "semiOrderedPermutation(nums = [2, 4, 3, 1])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1])",
        "semiOrderedPermutation(nums = [4, 3, 1, 2])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [4,2,2,2,4,4])",
        "continuousSubarrays(a = [4, 2, 1, 6])",
        "continuousSubarrays(a = [1, 0, 1, 1, 0])",
        "continuousSubarrays(a = [0, 2, 1, 2, 0])",
        "continuousSubarrays(a = [2, 1, 4, 5, 3])",
        "continuousSubarrays(a = [1,3,2,1,2,4])",
        "continuousSubarrays(a = [1,2,3,1,2,1,3])",
        "continuousSubarrays(a = [2,1,3,2,1,2,1,2,1,2])",
        "continuousSubarrays(a = [0,2,2,2,1,2,1])",
        "continuousSubarrays(a = [1, 2, 3, 3, 2, 2, 2, 3, 3, 3, 2, 2, 2, 4, 4, 4, 3, 3, 3])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [4, 2, 1, 6])",
        "continuousSubarrays(nums = [2, 1, 4, 3, 5, 6])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])",
        "continuousSubarrays(nums = [4, 2, 5, 3, 7, 6, 5, 2, 4, 4, 5])",
        "continuousSubarrays(nums = [1,3,1,2,4,3])",
        "continuousSubarrays(nums = [1, 2, 4, 7, 1, 3, 1, 2, 4, 3])",
        "continuousSubarrays(nums = [4, 3, 2, 1, 6, 7, 9])",
        "continuousSubarrays(nums = [3, 2, 2, 2, 4, 5, 1, 1, 1])",
        "continuousSubarrays(nums = [0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 1, 1])",
        "continuousSubarrays(nums = [1, 1, 0, 2, 2, 2, 3, 4, 4, 5, 5, 1, 1, 1, 1, 2, 2, 3, 3])"
    ],
    "sample_8": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 2, queries = [[1, 1], [0, 2], [1, 2]])",
        "colorTheArray(n = 4, queries = [[0,1],[1,2],[2,3],[3,4]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 1], [1, 0], [0, 0]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [2, 1], [1, 2]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,1],[4,2]])",
        "colorTheArray(n = 4, queries = [[3, 1], [2, 1], [1, 2], [0, 3]])"
    ],
    "sample_97": [
        "maximumJumps(nums = [3, 3, 3, 3, 3], target = 2)",
        "maximumJumps(nums = [3,2,3,1,2,4,2], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1,2,100,1], target = 2)",
        "maximumJumps(nums = [-1, 1], target = 2)",
        "maximumJumps(nums = [-3, -2, 0, 1, 2, 3, 4], target = 2)",
        "maximumJumps(nums = [-1,0,4,9,5,1], target = 6)",
        "maximumJumps(nums = [22,42,10,3,2,5], target = 5)",
        "maximumJumps(nums = [25,20,2,20,25,1], target = 5)",
        "maximumJumps(nums = [40,81,79,83,93,69,1,49,37,92,32,42,75,10,86,62,81,97,98,50], target = 92)"
    ],
    "sample_22": [
        "minLength(s = \"ABC\")",
        "minLength(s = \"ABC\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ADBCCD\")",
        "minLength(s = \"ABBCCCDDD\")",
        "minLength(s = \"ABCBDE\")",
        "minLength(s = \"ACACD\")",
        "minLength(s = \"AABCDCD\")",
        "minLength(s = \"EFCD\")",
        "minLength(s = \"AABDCCBBACD\")"
    ],
    "sample_7": [
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 2, queries = [[1,1],[1,2]])",
        "colorTheArray(n = 3, queries = [[1, 1], [1, 2], [1, 1]])",
        "colorTheArray(n=1, queries = [[1,1]])",
        "colorTheArray(n = 2, queries = [[1,1],[2,2]])",
        "colorTheArray(n = 4, queries = [[1,1],[1,2],[2,2]])",
        "colorTheArray(n = 1, queries = [[1,1],[1,2],[2,1]])",
        "colorTheArray(n = 3, queries = [[0,1],[1,2],[2,3],[2,2]])",
        "colorTheArray(n = 2, queries = [[1, 1], [2, 1], [2, 1]])",
        "colorTheArray(n = 2, queries = [[1, 1], [1, 2], [2, 2], [2, 1], [1, 1], [2, 2]])"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [2, 2], [1, 2], [3, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [2, 3], [3, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[1, 1], [1, 1], [0, 1], [0, 1], [0, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [2, 2], [1, 3], [2, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [4, 2], [5, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [0, 2], [0, 3], [0, 1], [1, 3]])",
        "colorTheArray(n = 3, queries = [[1, 1], [1, 2], [0, 2], [1, 1]])",
        "colorTheArray(n = 3, queries = [[0, 2], [1, 1], [1, 2], [2, 1], [2, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 3], [2, 3], [1, 1], [1, 2]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [1,2,3,4,5,6,7])",
        "semiOrderedPermutation(nums = [3,1,2,4,5])",
        "semiOrderedPermutation(nums = [1, 2, 4, 3])",
        "semiOrderedPermutation(nums = [2,3,1,6,4,5])",
        "semiOrderedPermutation(nums = [3, 1, 2, 5, 4])",
        "semiOrderedPermutation(nums = [1,4,2,5,3])",
        "semiOrderedPermutation(nums = [3,1,4,5,2])",
        "semiOrderedPermutation(nums = [3,1,4,5,2])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 7, 6])",
        "semiOrderedPermutation(nums = [3,1,7,4,2,8,5,6])"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 1, 3, 5, 2, 1, 4, 2, 3, 5, 1, 2, 3], threshold = 1)",
        "longestAlternatingSubarray(nums = [3, 1, 6, 4, 4, 2, 7], threshold = 4)",
        "longestAlternatingSubarray(nums = [5, 3, 4, 8, 10, 3, 4], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 5, 3, 2, 5, 4, 7, 8, 1, 3, 2], threshold = 4)",
        "longestAlternatingSubarray(nums = [6, 1, 7, 4, 1, 1, 3, 3, 6, 9], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 2, 4, 7, 3, 1, 6, 2, 10, 7], threshold = 6)",
        "longestAlternatingSubarray(nums = [3, 1, 5, 4, 2, 8, 1, 10, 3, 9], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 3, 3, 5, 2, 4, 1, 6, 4, 2, 3, 5, 3, 5, 1], threshold = 1)"
    ],
    "sample_33": [
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123000001')",
        "removeTrailingZeros(num = \"51230000000001\")",
        "removeTrailingZeros(num = \"5123000000\")",
        "removeTrailingZeros(num = \"512300000001\")",
        "removeTrailingZeros(num = '51230100000000')"
    ],
    "sample_50": [
        "smallestString(s = \"abaaa\")",
        "smallestString(s = \"aaabaa\")",
        "smallestString(s = \"abbbb\")",
        "smallestString(s = 'abab')",
        "smallestString(s = \"ababab\")",
        "smallestString(s = \"aaaaa\")",
        "smallestString(s = 'ababa')",
        "smallestString(s = \"abaca\")",
        "smallestString(s = \"abaaa\")",
        "smallestString(s = \"bbb\")"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 1])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 2])",
        "distinctDifferenceArray(nums = [2, 1, 3, 3, 5])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 2, 3])",
        "distinctDifferenceArray(nums = [5, 1, 3, 4, 2])"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 4, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 2, additionalTank = 3)",
        "distanceTraveled(mainTank = 10, additionalTank = 20)"
    ],
    "sample_118": [
        "minimumIndex(nums = [3, 4, 3, 6, 3, 4, 7])",
        "minimumIndex(nums = [4, 5, 6, 7, 0, 1, 2, 3, 4, 2, 2])",
        "minimumIndex(nums = [2, 3, 3, 2])",
        "minimumIndex(nums = [3, 4, 5, 1, 1])",
        "minimumIndex(nums = [8, 3, 1, 3, 2, 2, 2, 2])",
        "minimumIndex(nums = [5, 1, 3, 5, 4, 5, 6])",
        "minimumIndex(nums = [3, 3, 1, 5, 3, 3, 3])",
        "minimumIndex(nums = [4,3,1,4,2,2,4,2,4])",
        "minimumIndex(nums = [0,1,2,3,4,5,2,3,4,5])",
        "minimumIndex(nums = [8, 4, 8, 5, 5, 3, 9])"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [12, 21, 10])",
        "countBeautifulPairs(nums = [12, 15, 17, 28])",
        "countBeautifulPairs(nums = [22, 43, 32])",
        "countBeautifulPairs(nums = [7, 21, 3])",
        "countBeautifulPairs(nums = [12, 15, 90, 27])",
        "countBeautifulPairs(nums = [12, 21, 42, 32])",
        "countBeautifulPairs(nums = [12, 30, 25, 40])",
        "countBeautifulPairs(nums = [30, 12, 45, 20])",
        "countBeautifulPairs(nums = [12,24,17,29])",
        "countBeautifulPairs(nums = [5423, 8753, 328])"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '51230000')",
        "removeTrailingZeros(num = '51230000')",
        "removeTrailingZeros(num = '512301.0000000')"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"aaaaabbbbbcccc\")",
        "minimizedStringLength(s = \"babca\")",
        "minimizedStringLength(s = \"aaaaa\")",
        "minimizedStringLength(s = \"aaabaaa\")",
        "minimizedStringLength(s = \"aaaaaaaabc\")",
        "minimizedStringLength(s = \"abaaccb\")",
        "minimizedStringLength(s = \"awwb\")",
        "minimizedStringLength(s = \"aaabbbbccccccaaaaaa\")",
        "minimizedStringLength(s = \"aaaaabbbbbbbccccccccc\")",
        "minimizedStringLength(s = \"mbba\")"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 2, 3], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 9], k = 2)",
        "maximumBeauty(nums = [1,2,3,2,1,4,3,5], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7], k = 4)",
        "maximumBeauty(nums = [1, 4, 1, 3, 2], k = 2)",
        "maximumBeauty(nums = [2, 10, 4, 7], k = 2)",
        "maximumBeauty(nums = [3, 7, 2], k = 2)",
        "maximumBeauty(nums = [2, 4, 6, 8, 9], k = 3)",
        "maximumBeauty(nums = [4, 2, 1], k = 2)",
        "maximumBeauty(nums = [2, 11, 5, 15], k = 4)"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 4, num2 = 2)",
        "makeTheIntegerZero(num1 = 1, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 4)",
        "makeTheIntegerZero(num1 = 4, num2 = 6)",
        "makeTheIntegerZero(num1 = 20, num2 = 7)",
        "makeTheIntegerZero(num1 = 1024, num2 = 512)",
        "makeTheIntegerZero(num1 = 16, num2 = 10)",
        "makeTheIntegerZero(num1 = 250, num2 = 125)"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [3, 5, 6, 3])",
        "findValueOfPartition(nums = [3, 5, 6, 9, 7])",
        "findValueOfPartition(nums = [4, 5, 1, 10, 20, 30])",
        "findValueOfPartition(nums = [2, 3, 5, 1])",
        "findValueOfPartition(nums = [2, 3, 5, 1])",
        "findValueOfPartition(nums = [4, 6, 1, 0])",
        "findValueOfPartition(nums = [4, 8, 3, 5])",
        "findValueOfPartition(nums = [1, 3, 6, 8, 11])",
        "findValueOfPartition(nums = [1, 1, 2, 2, 3, 4, 5, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 5, 5, 5, 10, 20])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 3)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank=2, additionalTank=2)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [1,0,1,0,1,0])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1,0,1,0,1,0,0])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1])"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"leven\")",
        "makeSmallestPalindrome(s = \"nevene\")",
        "makeSmallestPalindrome(s = \"nevene\")",
        "makeSmallestPalindrome(s = \"venn\")",
        "makeSmallestPalindrome(s = \"evee\")",
        "makeSmallestPalindrome(s = \"neonven\")",
        "makeSmallestPalindrome(s = 'neetven')",
        "makeSmallestPalindrome(s = \"helloeven\")"
    ],
    "sample_110": [
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 5)",
        "checkArray(nums = [1, 0, 0, 2, 1], k = 3)",
        "checkArray(nums = [1, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [2, 1, 3, 1], k = 2)",
        "checkArray(nums = [3,2,1,5], k = 4)",
        "checkArray(nums = [1, 3, 0, 2, 2, 1], k = 2)",
        "checkArray(nums = [1, 5, 3, 2, 5, 5, 1], k = 2)",
        "checkArray(nums = [9, 2, 1, 8, 3, 6], k = 3)",
        "checkArray(nums = [98, 30, 94, 13, 86, 93, 30, 25, 33, 17, 48, 93, 96, 29, 98], k = 12)"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 0, 1])",
        "doesValidArrayExist(derived = [True, False, False])"
    ],
    "sample_54": [
        "smallestString(s = \"kddsbcda\")",
        "smallestString(s = 'kddsbcda')",
        "smallestString(s = 'kddsbcda')",
        "smallestString(s = 'kddsbcncd')",
        "smallestString(s = \"kddsbcncd\")",
        "smallestString(s = \"kddscncd\")",
        "smallestString(s = 'kddsbcca')",
        "smallestString(s = \"kkkkddsabcd\")",
        "smallestString(s = \"kdkk\")",
        "smallestString(s = \"kdeacbxbq\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [2, 1, 2, 2, 1, 2, 2])",
        "continuousSubarrays(A = [4, 2, 2, 0, 2, 2, 2, 0])",
        "continuousSubarrays(A = [1, 2, 2, 2, 2, 1, 1, 1])",
        "continuousSubarrays(A = [1, 3, 2, 1, 2, 1, 2, 1])",
        "continuousSubarrays(A = [1,1,2,2,2,3,3,3])",
        "continuousSubarrays(A = [1, 3, 2, 3, 2, 3, 3])",
        "continuousSubarrays(A = [1, 2, 3, 4, 0, 1, 2, 0])",
        "continuousSubarrays(A = [1, 2, 3, 4, 2, 1, 5, 4])",
        "continuousSubarrays(A = [2, 1, 3, 2, 3, 3, 3, 2, 2])",
        "continuousSubarrays(A = [4, 4, 1, 6, 4, 4, 4, 5, 4, 4, 4])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = \"bab\")",
        "makeSmallestPalindrome(s = 'abba')",
        "makeSmallestPalindrome(s = \"aabb\")",
        "makeSmallestPalindrome(s = 'bab')",
        "makeSmallestPalindrome(s = 'abbc')",
        "makeSmallestPalindrome(s = \"abbba\")",
        "makeSmallestPalindrome(s = \"abbba\")",
        "makeSmallestPalindrome(s = 'aaaa')",
        "makeSmallestPalindrome(s = \"opqabba\")",
        "makeSmallestPalindrome(s = \"BaAb\")"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [3,5,6,9])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 4, 5, 3])",
        "findValueOfPartition(nums = [-1, 0, 1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [-2147483648, -1, 0, 1, 2147483647])",
        "findValueOfPartition(nums = [2, 3, 1, 0, 4])",
        "findValueOfPartition(nums = [8, 11, 12, 14, 15])",
        "findValueOfPartition(nums = [1, 10, 3, 4, 2])",
        "findValueOfPartition(nums = [5, 3, 2, 4, 7, 1, 3, 7, 3, 9])",
        "findValueOfPartition(nums = [21, 4, 5, 1, 8, 14, 3, 20, 17, 11])"
    ],
    "sample_51": [
        "smallestString(s = \"kddsbcda\")",
        "smallestString(s = 'kddsbcncd')",
        "smallestString(s = 'kddscbcd')",
        "smallestString(s = 'kdecbncd')",
        "smallestString(s = \"kdbsbncd\")",
        "smallestString(s = \"kddsbacd\")",
        "smallestString(s = 'kdecbcd')",
        "smallestString(s = \"kcdsbd\")",
        "smallestString(s = \"kdefzbncd\")",
        "smallestString(s = \"abddxb\")"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6], k = 1)",
        "maximumBeauty(nums = [3,5,7,1], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 3, 4, 4, 1], k = 1)",
        "maximumBeauty(nums = [4, 4, 4, 4], k = 2)",
        "maximumBeauty(nums = [3, 4, 13, 7, 8, 5, 12, 9], k = 4)",
        "maximumBeauty(nums = [1,3,6,7,6,5,4], k = 1)",
        "maximumBeauty(nums = [4, 8, 7, 6, 10, 2, 9, 3], k = 3)",
        "maximumBeauty(nums = [3,10,6,8,2,5,1,7,4,9], k = 3)",
        "maximumBeauty(nums = [0, 10, 20, 40, 50, 110, 120, 140, 150, 160], k = 5)",
        "maximumBeauty(nums = [2,5,7,2,5,4,3,9,11,12,14,16,10,29,41], k = 6)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "checkArray(nums = [1, 1, 1], k = 1)",
        "checkArray(nums = [1, 2, 1, 2, 1, 2], k = 2)",
        "checkArray(nums = [3, 4, 3, 2, 1, 2], k = 2)",
        "checkArray(nums = [10, 2, 2, 3, 3], k = 2)",
        "checkArray(nums = [3, 3, 3, 1], k = 2)",
        "checkArray(nums = [0, 0, 0, 0, 0, 0], k = 2)",
        "checkArray(nums = [2, 4, 3, 1], k = 2)",
        "checkArray(nums = [2, 2, 2, 3, 4, 5, 5], k = 3)",
        "checkArray(nums = [5, 4, 5, 4, 3, 5, 5, 5, 4, 5], k = 4)"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 3)",
        "distanceTraveled(mainTank = 15, additionalTank = 1)",
        "distanceTraveled(mainTank = 15, additionalTank = 1)",
        "distanceTraveled(mainTank = 11, additionalTank = 2)",
        "distanceTraveled(mainTank = 7, additionalTank = 4)",
        "distanceTraveled(mainTank = 0, additionalTank = 3)"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3])",
        "distinctDifferenceArray(nums = [2, 1, 1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3])",
        "distinctDifferenceArray(nums = [3, 2, 5, 4, 6])",
        "distinctDifferenceArray(nums = [1, 3, 4, 2, 4])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [3, 1, 7, 0, 0, 4, 3])",
        "continuousSubarrays(A = [2, 1, 2, 1, 2, 1])",
        "continuousSubarrays(A = [1, 2, 2, 2, 3, 1])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])",
        "continuousSubarrays(A = [1, 0, 2, 1, 2])",
        "continuousSubarrays(A = [1, 2, 2, 1, 3, 4, 2, 1])",
        "continuousSubarrays(A = [4, 2, 2, 2, 4, 4, 4, 2, 4])",
        "continuousSubarrays(A = [4,5,1,3,2])",
        "continuousSubarrays(A = [0, 1, 2, 1, 2, 3, 4, 0])",
        "continuousSubarrays(A = [3, 4, 1, 2, 1, 2, 3, 1, 1, 2, 3, 3, 3, 3, 4, 5])"
    ],
    "sample_6": [
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n=1, queries = [[0,1]])",
        "colorTheArray(n=1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n=1, queries = [[0, 1]])",
        "colorTheArray(n = 2, queries = [[0,1],[1,1]])",
        "colorTheArray(n = 3, queries = [[0,1],[1,2],[2,1]])",
        "colorTheArray(n = 4, queries = [[1,1],[2,2]])"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 10, b = 2)",
        "makeTheIntegerZero(a = 7, b = 1)",
        "makeTheIntegerZero(a = 11, b = 2)",
        "makeTheIntegerZero(a = 3, b = 2)",
        "makeTheIntegerZero(a = 34, b = 2)",
        "makeTheIntegerZero(a = 32, b = 3)",
        "makeTheIntegerZero(a = 45, b = 2)",
        "makeTheIntegerZero(a = 30, b = 13)",
        "makeTheIntegerZero(a = 133, b = 3)",
        "makeTheIntegerZero(a = 255, b = 129)"
    ],
    "sample_100": [
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [3, 3, 3, 3, 3], target = 2)",
        "maximumJumps(nums = [3, 3, 3, 3, 3], target = 2)",
        "maximumJumps(nums = [3, 2, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [1, 4, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 2, 2, 3, 4], target = 2)",
        "maximumJumps(nums = [3, 2, 1, 1, 3], target = 2)",
        "maximumJumps(nums = [4, 2, 3, 0, 5, 10, 8], target = 4)",
        "maximumJumps(nums = [4, 3, 3, 2, 2, 1, 1, 3, 4, 5], target = 4)"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [0,1,2,3,4,5,6,7,8,9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 9], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [2,7,5,7,2,1,6,5], threshold = 10)",
        "longestAlternatingSubarray(nums = [2, 2, 3, 1, 2, 3], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 7, 5, 7, 2, 1, 4], threshold = 10)",
        "longestAlternatingSubarray(nums = [2, 3, 3, 2, 5, 5, 1, 3], threshold = 7)",
        "longestAlternatingSubarray(nums = [5, 1, 2, 3, 4, 4, 5], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,0,3,7,0,4,4,6,4,4,7,4,1,3], threshold = 5)"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 3, 2, 1], b = [2, 1, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5, 6], b = [0, 2, 3, 4, 5, 6])",
        "maxNonDecreasingLength(a = [4, 3, 5, 7, 8], b = [3, 4, 6, 7, 9])",
        "maxNonDecreasingLength(a = [1, 2, 1, 3, 4, 3], b = [6, 5, 4, 3, 2, 1])",
        "maxNonDecreasingLength(a = [5, 15, 25, 35, 45], b = [30, 20, 10, 40, 50])",
        "maxNonDecreasingLength(a = [2, 1, 4, 3, 6], b = [4, 3, 2, 5, 6])",
        "maxNonDecreasingLength(a = [1,2,3,3,4,5,6], b = [6,5,4,4,3,2,1])",
        "maxNonDecreasingLength(a = [3, 5, 1, 4, 2], b = [2, 1, 3, 5, 6])",
        "maxNonDecreasingLength(a = [0, 2, 1, 4, 3, 1, 2, 3, 4, 5], b = [5, 0, 4, 1, 2, 3, 0, 1, 2, 3])",
        "maxNonDecreasingLength(a = [2, 3, 7, 9, 2, 3, 11, 3, 1, 4, 12, 2, 1, 1], b = [1, 2, 2, 7, 2, 10, 2, 9, 4, 7, 12, 10, 3, 1])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,0])",
        "numberOfGoodSubarraySplits(nums = [1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,0,1,0,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums=[1,0,1,0,1,0,0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,0,1,0,1,1,0,0,0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0,1,0,0,1,0,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1,1,1,1,0,0,0,1,1,0,0,1,0,0,0,0,1,1,1,0,1,0,1,0,0,1,0,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,0,1,0,0,1,0,0,1,0,0,1,1,1,1,1,1,1,0,1,0,0,1,0,0,1,1,1,1,1,0,1,1,0,1,1,1,0,0,1,0,0,1,1,0,0,1,0,1,0,1,0,0,0,1,1,0,0,0,1,1,1,1,0,1,1,0,0,0,0,0,1,1,0,1,0,1,1,0,0,1,1,1,1,0,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,1,0,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,0,0,1,1,0,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 2)",
        "longestAlternatingSubarray(nums = [0,1,2,3,4,5], threshold = 1)",
        "longestAlternatingSubarray(nums = [3,5,2,1,4], threshold = 5)",
        "longestAlternatingSubarray(nums = [0,1,0,1,0,1,1], threshold = 1)",
        "longestAlternatingSubarray(nums = [0, 5, 3, 2, 8], threshold = 3)",
        "longestAlternatingSubarray(nums = [0,2,2,1,0,2,2,1], threshold = 1)",
        "longestAlternatingSubarray(nums = [8, 12, 11, 10, 8], threshold = 3)",
        "longestAlternatingSubarray(nums = [5, 2, 5, 1, 6], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 2, 3, 1, 4, 2, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [10, 5, 11, 14, 17, 18, 19], threshold = 2)"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 1, 1, 3, 3, 4, 4])",
        "findValueOfPartition(nums = [0, 9])",
        "findValueOfPartition(nums = [1, 1, 2])",
        "findValueOfPartition(nums = [1, 5])",
        "findValueOfPartition(nums = [1, 3, 2])",
        "findValueOfPartition(nums = [1, 2, 3, 10])",
        "findValueOfPartition(nums = [1, 1, 1, 5, 6, 6])",
        "findValueOfPartition(nums = [1, 1, 1, 3, 3, 3, 7, 7, 7, 7])",
        "findValueOfPartition(nums = [0, 1, 3, 4])",
        "findValueOfPartition(nums = [1, 0, 10, 12, 14])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = \"bab\")",
        "makeSmallestPalindrome(s = \"aabba\")",
        "makeSmallestPalindrome(s = 'bab')",
        "makeSmallestPalindrome(s = \"ba\")",
        "makeSmallestPalindrome(s = \"aabb\")",
        "makeSmallestPalindrome(s = 'abb')",
        "makeSmallestPalindrome(s = \"bab\")",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = 'aabcd')",
        "makeSmallestPalindrome(s = 'abc')"
    ],
    "sample_18": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABACD\")",
        "minLength(s = \"ABCABD\")",
        "minLength(s = \"ADCD\")",
        "minLength(s = \"ADABACD\")",
        "minLength(s = \"ABCABDCDC\")",
        "minLength(s = \"ADABCC\")",
        "minLength(s = \"ABDACDABD\")",
        "minLength(s = \"CDABBAACB\")",
        "minLength(s = \"ABCDEABCECDABC\")"
    ],
    "sample_99": [
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [2, 3, 5, 10, 11, 20], target = 4)",
        "maximumJumps(nums = [3,3,2,1,3,7], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], target = 10)",
        "maximumJumps(nums = [6, 3, 5, 10, 10, 11], target = 2)",
        "maximumJumps(nums = [-1,3,5,2,10,8], target = 4)",
        "maximumJumps(nums = [2, 1, 1, 1, 1, 1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [6, 4, 3, 7, 4, 6, 9], target = 3)",
        "maximumJumps(nums = [13, 3, 7, 20, 11, 14], target = 5)",
        "maximumJumps(nums = [-7, -10, 20, 50, 65, 69], target = 35)"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [2, 2], [1, 2], [3, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [2, 2], [3, 2], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [2, 3], [3, 2], [1, 3]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [2, 3], [3, 3], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,1],[2,2],[4,2]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,1],[2,3],[3,2],[1,4],[2,4]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 2], [3, 1], [2, 1], [3, 2]])",
        "colorTheArray(n = 3, queries = [[1,1],[2,2],[2,1],[3,3],[3,2]])",
        "colorTheArray(n = 4, queries = [[1, 1], [3, 2], [4, 1], [3, 2], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1,1],[1,1],[2,1],[2,2],[2,2],[2,1],[3,2],[4,1],[5,1]])"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 0, additionalTank = 1)",
        "distanceTraveled(mainTank = 0, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 6, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 7, additionalTank = 2)",
        "distanceTraveled(mainTank = 6, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [12, 21, 10])",
        "countBeautifulPairs(nums = [10, 20, 11, 2])",
        "countBeautifulPairs(nums = [12, 13, 23])",
        "countBeautifulPairs(nums = [22, 45, 1])",
        "countBeautifulPairs(nums = [12, 15, 18, 19])",
        "countBeautifulPairs(nums = [13, 27, 81])",
        "countBeautifulPairs(nums = [12, 30, 20, 15])",
        "countBeautifulPairs(nums = [12, 13, 21, 25])",
        "countBeautifulPairs(nums = [321, 21, 45, 78])",
        "countBeautifulPairs(nums = [211, 311, 42, 24])"
    ],
    "sample_56": [
        "minCost(A = [4, 2, 6], x = 2)",
        "minCost(A = [3, 2, 1], x = 3)",
        "minCost(A = [1,3,5,7,9], x = 3)",
        "minCost(A = [1, 10], x = 2)",
        "minCost(A = [3, 4, 1], x = 2)",
        "minCost(A = [5, 1, 2, 4], x = 2)",
        "minCost(A = [4,3,5], x = 2)",
        "minCost(A = [2, 5, 6, 4, 3], x = 2)",
        "minCost(A = [4, 4, 6, 1], x = 2)",
        "minCost(A = [3, 9, 10, 2, 3], x = 3)"
    ],
    "sample_98": [
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [3, 3, 3, 3, 3], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4], target = 2)",
        "maximumJumps(nums = [1, 4, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [2,3,5,10,11], target = 5)",
        "maximumJumps(nums = [1, 12, 10, 15, 20, 2, 10, 2], target = 5)",
        "maximumJumps(nums = [2,5,1,2,1,1,1,1,2], target = 1)",
        "maximumJumps(nums = [10, 5, 10, 20, 15], target = 15)",
        "maximumJumps(nums = [12, 24, 10, 36, 12, 20, 28, 39, 22, 29, 33], target = 4)",
        "maximumJumps(nums = [3,3,5,2,6,6,10,10,12,12,14], target = 3)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,0])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,3,4])",
        "numberOfGoodSubarraySplits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "numberOfGoodSubarraySplits(nums = [3,2,1,2,2,2])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,",
        "numberOfGoodSubarraySplits(nums = [2,2,2,2,2,2])",
        "numberOfGoodSubarraySplits(nums = [4,0,0,3,3,1,4])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 1, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 1, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 1])",
        "distinctDifferenceArray(nums = [1, 2, 1, 2, 3])",
        "distinctDifferenceArray(nums = [2, 1, 1, 2, 3, 3])",
        "distinctDifferenceArray(nums = [2, 1, 2, 3, 2])",
        "distinctDifferenceArray(nums = [1, 3, 2, 1, 2, 3, 3])",
        "distinctDifferenceArray(nums = [1, 3, 2, 1, 2, 3, 3])",
        "distinctDifferenceArray(nums = [3, 2, 2, 2, 4])",
        "distinctDifferenceArray(nums = [4, 3, 2, 1, 3, 5])"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [12, 13, 14, 15, 16, 17, 18, 19])",
        "countBeautifulPairs(nums = [13, 25, 36, 47, 58, 69])",
        "countBeautifulPairs(nums = [12, 15, 10, 30, 29, 20])",
        "countBeautifulPairs(nums = [10, 20, 21, 30, 31, 40])",
        "countBeautifulPairs(nums = [10, 21, 100, 1221, 32])",
        "countBeautifulPairs(nums = [12, 15, 27, 9, 30, 45])",
        "countBeautifulPairs(nums = [12, 21, 37, 43, 25])",
        "countBeautifulPairs(nums = [22, 27, 54, 89, 23, 103])",
        "countBeautifulPairs(nums = [42, 7, 4, 28, 2, 34, 65, 5, 87, 10])",
        "countBeautifulPairs(nums = [30, 21, 44, 39, 95, 14, 27, 73, 40, 43])"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"aaabcc\")",
        "minimizedStringLength(s = \"aaabbc\")",
        "minimizedStringLength(s = \"xyz\")",
        "minimizedStringLength(s = \"xyzxyz\")",
        "minimizedStringLength(s = \"abababc\")",
        "minimizedStringLength(s = \"abcbba\")",
        "minimizedStringLength(s = \"abbbbbc\")",
        "minimizedStringLength(s = \"mmp\")",
        "minimizedStringLength(s = \"xyabcdabcd\")"
    ],
    "sample_41": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"caaab\")",
        "minimumCost(s = \"abaacb\")",
        "minimumCost(s = \"CABABC\")",
        "minimumCost(s = \"abb\")",
        "minimumCost(s = \"abbac\")",
        "minimumCost(s = \"cbaacb\")",
        "minimumCost(s = \"abbbbbccdca\")"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 1])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 1])",
        "distinctDifferenceArray(nums = [1, 2, 2, 2, 3])",
        "distinctDifferenceArray(nums = [2, 1, 2, 2, 3])",
        "distinctDifferenceArray(nums = [0, 1, 0, 1, 1])",
        "distinctDifferenceArray(nums = [2,2,2,2,3])",
        "distinctDifferenceArray(nums = [2, 1, 3, 3, 2])",
        "distinctDifferenceArray(nums = [5, 5, 2, 3, 3])",
        "distinctDifferenceArray(nums = [1,1,2,3,3,3,3])",
        "distinctDifferenceArray(nums = [2, 5, 5, 1, 3, 4, 3])"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [2, 2, 2, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 2, 4, 8, 9])",
        "doesValidArrayExist(derived = [3, 6, 8, 12])",
        "doesValidArrayExist(derived = [1,0,3,4,5])",
        "doesValidArrayExist(derived = [1, 3, 0, 5, 4])",
        "doesValidArrayExist(derived = [1, 2, 0, 5, 3, 0, 6, 4])",
        "doesValidArrayExist(derived = [1,2,4,8,16,3,6,12,24,48,96,192,384])",
        "doesValidArrayExist(derived = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
        "doesValidArrayExist(derived = [3, 6, 5, 2, 1])"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [2, 2, 2, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 2, 1, 3, 5, 4])",
        "doesValidArrayExist(derived = [0, 2, 3, 4])",
        "doesValidArrayExist(derived = [0, 1, 0, 3, 0, 4])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [2, 1, 3, 6, 1, 5, 0, 2])",
        "doesValidArrayExist(derived = [2, 3, 4, 4, 2, 2, 3, 2, 2, 4])"
    ],
    "sample_52": [
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = \"kddsbcda\")",
        "smallestString(s = 'kddsbcncd')",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = \"abcd\")",
        "smallestString(s = \"kddsbfcd\")",
        "smallestString(s = \"kddsbcncd\")",
        "smallestString(s = 'kdedbncd')",
        "smallestString(s = \"kddsbncg\")"
    ],
    "sample_40": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abcac\")",
        "minimumCost(s = \"abcac\")",
        "minimumCost(s = \"abaacd\")",
        "minimumCost(s = \"abaacbaa\")",
        "minimumCost(s = \"acca\")",
        "minimumCost(s = \"abcadc\")",
        "minimumCost(s = \"abb\")",
        "minimumCost(s = \"BABA\")",
        "minimumCost(s = \"aaaaa\")"
    ],
    "sample_38": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abcac\")",
        "minimumCost(s = \"abaca\")",
        "minimumCost(s = \"abcbc\")",
        "minimumCost(s = \"cab\")",
        "minimumCost(s = \"ddee\")",
        "minimumCost(s = \"acaadcbbaca\")"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 2])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 2])",
        "distinctDifferenceArray(nums = [3, 2, 1, 3, 3])",
        "distinctDifferenceArray(nums = [2, 1, 3, 3, 2])",
        "distinctDifferenceArray(nums = [5, 5, 5, 3, 3])"
    ],
    "sample_53": [
        "smallestString(s = 'bbbac')",
        "smallestString(s = \"bac\")",
        "smallestString(s = \"bac\")",
        "smallestString(s = \"baaac\")",
        "smallestString(s = \"bbbac\")",
        "smallestString(s = \"baacb\")",
        "smallestString(s = 'baaz')",
        "smallestString(s = \"bzz\")",
        "smallestString(s = \"bzbccc\")",
        "smallestString(s = 'bbabcz')"
    ],
    "sample_109": [
        "checkArray(nums = [4, 2, 3, 3, 5], k = 2)",
        "checkArray(nums = [2, 2, 2, 2, 2], k = 2)",
        "checkArray(nums = [1, 3, 6, 7, 9], k = 3)",
        "checkArray(nums = [1,2,3], k = 1)",
        "checkArray(nums = [1, 2, 3, 1], k = 3)",
        "checkArray(nums = [2,5,1,2,5,1,2,5], k = 3)",
        "checkArray(nums = [3,4,3,0], k = 10)",
        "checkArray(nums = [14, 2, 4, 1, 1, 2], k = 3)",
        "checkArray(nums = [2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1",
        "checkArray(nums = [2, 7, 9, 3, 6, 10, 11], k = 3)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1, 3, 2, 5, 2], k = 3)",
        "maximumBeauty(nums = [1,3,5,7,9], k = 3)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 1)",
        "maximumBeauty(nums = [1,3,5,9], k = 3)",
        "maximumBeauty(nums = [1,10,3,4,7,2], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 5, 5, 5, 5, 7, 7], k = 2)",
        "maximumBeauty(nums = [5, 10, 6, 8, 7], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 5, 10, 16, 21], k = 5)",
        "maximumBeauty(nums = [3,10,5,2,4,1,3,5,2], k = 2)",
        "maximumBeauty(nums = [3, 7, 3, 4, 3, 4, 5, 7], k = 2)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 1, 2, 2, 3])",
        "distinctDifferenceArray(a = [1, 1, 2, 2, 3])",
        "distinctDifferenceArray(a = [1, 2, 2, 2, 3, 4])",
        "distinctDifferenceArray(a = [1, 1, 2, 2, 3, 3])",
        "distinctDifferenceArray(a = [5, 4, 3, 2, 1])",
        "distinctDifferenceArray(a = [1, 2, 3, 2, 2])",
        "distinctDifferenceArray(a = [0, 0, 0, 1, 1, 1])",
        "distinctDifferenceArray(a = [1, 1, 2, 2, 3, 3, 4, 5])",
        "distinctDifferenceArray(a = [5, 5, 2, 1, 3])",
        "distinctDifferenceArray(a = [1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5])"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = \"51230100\")",
        "removeTrailingZeros(a = \"5123010000\")",
        "removeTrailingZeros(a = \"5123010000\")",
        "removeTrailingZeros(a = \"512301000\")",
        "removeTrailingZeros(a = '51230000')",
        "removeTrailingZeros(a = '51230100000')",
        "removeTrailingZeros(a = '5123010000000')",
        "removeTrailingZeros(a = \"51230000000000001\")"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"nevenne\")",
        "makeSmallestPalindrome(s = \"nevene\")",
        "makeSmallestPalindrome(s = \"dneven\")",
        "makeSmallestPalindrome(s = \"uneven\")",
        "makeSmallestPalindrome(s = \"nevena\")"
    ],
    "sample_55": [
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = \"kddsbcncd\")",
        "smallestString(s = 'kddsbcncd')",
        "smallestString(s = \"kddscncd\")",
        "smallestString(s = \"kddscncd\")",
        "smallestString(s = 'kddscncd')",
        "smallestString(s = \"kddscbcd\")",
        "smallestString(s = \"kddsbzcd\")"
    ],
    "sample_35": [
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = \"512301000000\")",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = \"5123010000000\")"
    ],
    "sample_23": [
        "minLength(s = \"ABCDABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCDABCD\")",
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDACD\")",
        "minLength(s = \"ABCDECDAB\")",
        "minLength(s = \"ABC\")",
        "minLength(s = \"CAB\")",
        "minLength(s = \"ACDABACDABACDAB\")",
        "minLength(s = \"ACAAABBBACDDDDD\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = '51230000')",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = '5123000')",
        "removeTrailingZeros(num = \"512301000000\")"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 14, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 40, num2 = 5)",
        "makeTheIntegerZero(num1 = 45, num2 = 3)",
        "makeTheIntegerZero(num1 = 23, num2 = 3)",
        "makeTheIntegerZero(num1 = 42, num2 = 4)",
        "makeTheIntegerZero(num1 = 52, num2 = 3)"
    ],
    "sample_57": [
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 3, b = 1)",
        "distanceTraveled(a = 3, b = 1)",
        "distanceTraveled(a = 0, b = 2)",
        "distanceTraveled(a = 2, b = 0)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [1,2,3,1,2,3,1,2,3], t = 1)",
        "longestAlternatingSubarray(nums = [1,1,2,2,3,3], t = 1)",
        "longestAlternatingSubarray(nums = [1,0,0,0,1,0,1,1,1,0], t = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 2, 0, 0, 4, 4, 6, 6, 0], t = 6)",
        "longestAlternatingSubarray(nums = [2,2,3,4,5,6,2], t = 4)",
        "longestAlternatingSubarray(nums = [3,1,2,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], t = 2)",
        "longestAlternatingSubarray(nums = [5,6,8,9,11,1,2,3,4], t = 5)",
        "longestAlternatingSubarray(nums = [0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 2, 2, 1], t = 4)",
        "longestAlternatingSubarray(nums = [3,2,1,1,2,3,4,4,5,5,2,1,3,2,5], t = 5)",
        "longestAlternatingSubarray(nums = [2, 1, 5, 4, 3, 2, 5, 4, 2, 8, 4, 4, 3, 3, 3, 7, 6, 5, 4, 3, 3, 4], t = 2)"
    ],
    "sample_102": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [1, 3, 2, 2, 2, 2, 2], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7], target = 3)",
        "maximumJumps(nums = [3, 5, 1, 2, 2, 5, 1, 2, 3], target = 2)",
        "maximumJumps(nums = [1, 3, 2, 6, 1], target = 2)",
        "maximumJumps(nums = [5, 3, 4, 1, 2], target = 2)",
        "maximumJumps(nums = [2, 3, 3, 2, 4, 3, 7, 6], target = 3)",
        "maximumJumps(nums = [1, 4, 11, 13, 16, 2, 10, 3, 6], target = 3)",
        "maximumJumps(nums = [10, 33, 23, 32, 54, 11, 32], target = 20)",
        "maximumJumps(nums = [53, 77, 33, 3, 90, 4, 1, 11], target = 20)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123000')",
        "removeTrailingZeros(num = '51230000')",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = \"51230000\")"
    ],
    "sample_101": [
        "maximumJumps(nums = [3, 3, 3, 3, 3], target = 2)",
        "maximumJumps(nums = [3, 3, 3, 3, 3], target = 2)",
        "maximumJumps(nums = [100, -200, -200, 100], target = 0)",
        "maximumJumps(nums = [0, 1, 2, 3, 4], target = 3)",
        "maximumJumps(nums = [10, 12, 14, 16, 18], target = 1)",
        "maximumJumps(nums = [5, 13, 8, 12, 5, 8, 11, 12], target = 5)",
        "maximumJumps(nums = [1, 3, 2, 1, 2, 3, 3, 1, 1, 1, 2, 3], target = 2)",
        "maximumJumps(nums = [6, 5, 3, 4, 10, 4, 5, 9, 7], target = 3)",
        "maximumJumps(nums
        "maximumJumps(nums = [100,-1,44,28,32,100,20,10,5,0,-100], target = 20)"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1,1,1])",
        "doesValidArrayExist(derived = [1,0,1,1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [2, 1, 1, 2, 1])",
        "doesValidArrayExist(derived = [2, 3, 1, 2, 4])",
        "doesValidArrayExist(derived = [4, 6, 5, 4])",
        "doesValidArrayExist(derived = [4, 0, 2, 6, 7])",
        "doesValidArrayExist(derived = [2, 4, 6, 5, 2])",
        "doesValidArrayExist(derived = [2, 0, 3, 2, 0, 3, 1])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [2, 2, 1])",
        "numberOfGoodSubarraySplits(nums = [2,1,0,0,2,0])"
    ],
    "sample_19": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABC\")",
        "minLength(s = \"ABACDA\")",
        "minLength(s = \"CDCDA\")",
        "minLength(s = \"ABCABDCDD\")",
        "minLength(s = \"ABaABCDDD\")",
        "minLength(s = \"ABAABBCCDDCCDDE\")",
        "minLength(s = \"ABaCdEABabCDe\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"oddven\")",
        "makeSmallestPalindrome(s = 'leven')",
        "makeSmallestPalindrome(s = 'nevene')",
        "makeSmallestPalindrome(s = 'evenn')",
        "makeSmallestPalindrome(s = \"oddven\")",
        "makeSmallestPalindrome(s = \"openness\")",
        "makeSmallestPalindrome(s = \"nnenseve\")",
        "makeSmallestPalindrome(s = 'anve')"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [3, 2, 4, 5, 1])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [1,2,4,3])",
        "semiOrderedPermutation(nums = [2,3,4,5,6,7,8,1])",
        "semiOrderedPermutation(nums = [2, 1, 3, 5, 4, 6])",
        "semiOrderedPermutation(nums = [3, 1, 5, 2, 4])",
        "semiOrderedPermutation(nums = [1,3,5,2,4,6])",
        "semiOrderedPermutation(nums = [1, 3, 5, 2, 4, 6])",
        "semiOrderedPermutation(nums=[5,1,3,2,4])",
        "semiOrderedPermutation(nums = [5,3,4,2,6,1])"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [3,2,1,2,2])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [3,1,0,2,4,5])",
        "numberOfGoodSubarraySplits(nums = [3,1,0,2,4,3])",
        "numberOfGoodSubarraySplits(nums = [5,1,2,2,3,1,3,4,3,5])"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 1)",
        "maximumBeauty(nums = [1, 5, 1, 5, 2, 4], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 9, 11, 17], k = 2)",
        "maximumBeauty(nums = [3, 2, 4, 9, 1, 7, 8, 6], k = 2)",
        "maximumBeauty(nums = [8, 3, 5, 1, 10, 7], k = 2)",
        "maximumBeauty(nums = [3, 5, 6, 11, 14], k = 3)",
        "maximumBeauty(nums = [3,5,6,1,2,1], k = 3)",
        "maximumBeauty(nums = [5, 3, 8, 1, 4, 6], k = 2)",
        "maximumBeauty(nums = [-2,5,1,3,1,2,2], k = 1)"
    ],
    "sample_117": [
        "minimumIndex(nums = [3, 1])",
        "minimumIndex(nums = [3, 1, 3, 3, 2, 3])",
        "minimumIndex(nums = [3,2,3])",
        "minimumIndex(nums = [3,1,3,3,2,3])",
        "minimumIndex(nums = [3, 1, 3])",
        "minimumIndex(nums = [3,1,3,4,2])",
        "minimumIndex(nums = [3,1,2,3,1])",
        "minimumIndex(nums = [4, 5, 2, 2, 4])",
        "minimumIndex(nums = [1, 3, 5, 7, 9, 1])",
        "minimumIndex(nums = [4,3,2,3,4,6,5])"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 4)",
        "makeTheIntegerZero(num1 = 20, num2 = 4)",
        "makeTheIntegerZero(num1 = 16, num2 = 2)",
        "makeTheIntegerZero(num1 = 16, num2 = 5)",
        "makeTheIntegerZero(num1 = 21, num2 = 3)",
        "makeTheIntegerZero(num1 = 44, num2 = 2)"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [12, 21, 10])",
        "countBeautifulPairs(nums = [12,21,9,55])",
        "countBeautifulPairs(nums = [12,24,29,30,15])",
        "countBeautifulPairs(nums = [12,24,15,29,9])",
        "countBeautifulPairs(nums = [12, 15, 25, 31])",
        "countBeautifulPairs(nums = [40, 59, 78, 95])",
        "countBeautifulPairs(nums = [23,10,24,333,12,90])",
        "countBeautifulPairs(nums = [40,78,81,24,30,41,69,88,89,43])",
        "countBeautifulPairs(nums = [754, 924, 442, 919, 425, 110, 551])",
        "countBeautifulPairs(nums = [8079,5269,3221,2345,7098,4984])"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 17, num2 = 5)",
        "makeTheIntegerZero(num1 = 8, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 32, num2 = 5)",
        "makeTheIntegerZero(num1 = 20, num2 = 10)",
        "makeTheIntegerZero(num1 = 512, num2 = 256)"
    ],
    "sample_20": [
        "minLength(s = \"ABACDA\")",
        "minLength(s = \"ABACDA\")",
        "minLength(s = \"ABCABDCDC\")",
        "minLength(s = \"ABCDACDAB\")",
        "minLength(s = \"ABABCDABCDABCD\")",
        "minLength(s = \"EABACD\")",
        "minLength(s = \"ABABACABAD\")",
        "minLength(s = \"CADCBABCD\")",
        "minLength(s = \"CDABABAABBACD\")",
        "minLength(s = \"ABBCCDCDCCD\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "maximumBeauty(nums = [0,2,4,6,8], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 1)",
        "maximumBeauty(nums = [3,5,7,12], k = 2)",
        "maximumBeauty(nums = [1, 3, 4, 6], k = 2)",
        "maximumBeauty(nums = [3, 2, 5, 2, 4], k = 1)",
        "maximumBeauty(nums = [2, 4, 6, 5, 2], k = 3)",
        "maximumBeauty(nums = [4, 2, 4, 6], k = 1)",
        "maximumBeauty(nums = [1,3,5,7,9,9,13,15], k = 5)",
        "maximumBeauty(nums = [1, 11, 22, 33, 50, 52, 77, 101], k = 3)"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [12, 21, 10])",
        "countBeautifulPairs(nums = [12, 13, 23])",
        "countBeautifulPairs(nums = [24, 7, 11, 33])",
        "countBeautifulPairs(nums = [12, 21, 23, 32, 34])",
        "countBeautifulPairs(nums = [40,50,70,80,90])",
        "countBeautifulPairs(nums = [42, 7, 30, 39, 6, 24])",
        "countBeautifulPairs(nums = [15, 29, 2, 17, 43, 37])",
        "countBeautifulPairs(nums = [235, 188, 207])",
        "countBeautifulPairs(nums = [12,21,10,35,26,32,49,28,1])",
        "countBeautifulPairs(nums=[321,78,92,12,443,546])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 15, num2 = 5)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 1)",
        "makeTheIntegerZero(num1 = 30, num2 = 12)",
        "makeTheIntegerZero(num1 = 35, num2 = 5)",
        "makeTheIntegerZero(num1 = 37, num2 = 5)",
        "makeTheIntegerZero(num1 = 39, num2 = 5)",
        "makeTheIntegerZero(num1 = 47, num2 = 4)",
        "makeTheIntegerZero(num1 = 35, num2 = 12)",
        "makeTheIntegerZero(num1 = 55, num2 = 6)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"venn\")",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = 'nevene')",
        "makeSmallestPalindrome(s = \"venne\")",
        "makeSmallestPalindrome(s = 'idneven')",
        "makeSmallestPalindrome(s = \"openness\")",
        "makeSmallestPalindrome(s = 'nevlnve')",
        "makeSmallestPalindrome(s = 'we')"
    ],
    "sample_37": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abcb\")",
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"abcbcba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abcbac\")",
        "minimumCost(s = \"baaab\")",
        "minimumCost(s = \"abcdca\")",
        "minimumCost(s = \"aaacbcb\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,0])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,0])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [3,0,1,0,2])",
        "numberOfGoodSubarraySplits(nums=[0, 0, 1, 0, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [3,1,0,2,3,4,3,2,3,4,5,2,1,1,2,2,1,1])"
    ],
    "sample_105": [
        "checkArray(nums = [1, 2, 3, 4], k = 3)",
        "checkArray(nums = [2, 2, 2, 2, 2], k = 2)",
        "checkArray(nums = [5, 4, 3, 2, 1], k = 2)",
        "checkArray(nums = [3, 4, 3, 2, 1, 2], k = 3)",
        "checkArray(nums = [3, 3, 2, 1, 1], k = 3)",
        "checkArray(nums = [3, 4, 6, 1, 2], k = 3)",
        "checkArray(nums = [1,2,3,4,5,6], k = 4)",
        "checkArray(nums = [1, 10, -20, -5], k = 2)",
        "checkArray(nums = [10, -3, 4, 6, 10, 2, 3, -1, 0, 1], k = 4)",
        "checkArray(nums = [15, 22, 43, 12, 8, 25, 8, 14], k = 4)"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [3, 2, 4, 1])",
        "semiOrderedPermutation(nums = [4, 2, 1, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 5, 4])",
        "semiOrderedPermutation(nums = [4, 2, 3, 5, 1])",
        "semiOrderedPermutation(nums = [3, 1, 2, 5, 4])",
        "semiOrderedPermutation(nums = [2, 4, 1, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 8, 7])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 7, 6])",
        "semiOrderedPermutation(nums = [2, 1, 5, 3, 4])",
        "semiOrderedPermutation(nums = [5, 1, 3, 2, 6, 4])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 1, 1], k = 2)",
        "checkArray(nums = [1, 1, 1], k = 2)",
        "checkArray(nums = [1, 1, 1], k = 2)",
        "checkArray(nums = [2, 1, 3], k = 1)",
        "checkArray(nums = [1, 0, 0, 0, 0], k = 4)",
        "checkArray(nums = [0,1,0], k = 1)",
        "checkArray(nums = [1,2,3,4,5,6,7,8,9], k = 5)",
        "checkArray(nums = [1, 2, 1, 1, 2], k = 2)",
        "checkArray(nums = [1,0,0,0,0,0], k = 2)",
        "checkArray(nums = [1, 0, 3, 9, 8, 4, 2, 5, 6, 7, 1], k = 3)"
    ],
    "sample_39": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abca\")",
        "minimumCost(s = \"ceabaac\")",
        "minimumCost(s = \"fbfb\")",
        "minimumCost(s = \"abcbcbaa\")",
        "minimumCost(s = \"accccbb\")",
        "minimumCost(s = \"aaaaaaab\")"
    ],
    "sample_65": [
        "findValueOfPartition(a = [3, 5, 8, 7])",
        "findValueOfPartition(a = [1, 1, 2])",
        "findValueOfPartition(a = [1, 2, 5, 7, 9])",
        "findValueOfPartition(a = [3, 1, 2, 10])",
        "findValueOfPartition(a = [1, 1, 1, 1, 2, 2])",
        "findValueOfPartition(a = [3, 5, 6, 1])",
        "findValueOfPartition(a = [4, 3, 2, 1, 5, 6])",
        "findValueOfPartition(a = [9, 12, 1, 2, 3, 10])",
        "findValueOfPartition(a = [4, 5, 1, 10, 20, 30, 90])",
        "findValueOfPartition(a = [5, 10, 3, 1, 10, 5])"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 7, additionalTank = 1)",
        "distanceTraveled(mainTank = 9, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 6, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 3)",
        "distanceTraveled(mainTank = 25, additionalTank = 4)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1, 3, 2])",
        "doesValidArrayExist(derived = [1, 2, 3, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 2, 4, 1])",
        "doesValidArrayExist(derived = [1,0,3,2])",
        "doesValidArrayExist(derived = [0, 1, 1, 2])",
        "doesValidArrayExist(derived = [3, 2, 0, 4, 6, 1])",
        "doesValidArrayExist(derived = [3, 5, 1, 2])",
        "doesValidArrayExist(derived = [2,2,1,1,3,5])",
        "doesValidArrayExist(derived = [4, 4, 2, 8, 12, 15, 12, 4])"
    ],
    "sample_106": [
        "checkArray(nums = [1, 1, 1, 1], k = 1)",
        "checkArray(nums = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1], k = 2)",
        "checkArray(nums = [2, 7, 4], k = 3)",
        "checkArray(nums = [1, 0, 0, 3], k = 4)",
        "checkArray(nums = [0, 0, 1], k = 1)",
        "checkArray(nums = [4, 3, 2, 6, 3, 4], k = 2)",
        "checkArray(nums = [4, 1, 1, 1, 2], k = 2)",
        "checkArray(nums = [2,1,3,2,1,7,2,1,1,3,2,1,4,2,1,2,1], k = 2)",
        "checkArray(nums = [1, 5, 4, 3, 3, 7, 2, 6], k = 2)",
        "checkArray(nums = [5, 6, 2, 3, 10], k = 1)"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [1, 2, 3], threshold = 1)",
        "longestAlternatingSubarray(nums = [12,10,11], threshold = 12)",
        "longestAlternatingSubarray(nums = [0, 0, 1, 0, 1], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 1, 1, 0, 0, 1, 1, 0, 1], threshold = 1)",
        "longestAlternatingSubarray(nums = [2, 2, 1, 1, 2, 1, 2], threshold = 3)",
        "longestAlternatingSubarray(nums = [3,1,4,2,1,6], threshold = 5)",
        "longestAlternatingSubarray(nums = [4,1,2,5,3], threshold = 10)",
        "longestAlternatingSubarray(nums = [5,1,3,3,2,2,5,1,3], threshold = 6)",
        "longestAlternatingSubarray(nums = [1, 4, 6, 8, 10, 11, 12, 14, 15], threshold = 14)",
        "longestAlternatingSubarray(nums = [0,100,3,4,6,8,1,2], threshold = 50)"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [10, 20, 11, 2])",
        "countBeautifulPairs(nums = [20, 21, 4])",
        "countBeautifulPairs(nums = [12, 24, 29, 30])",
        "countBeautifulPairs(nums = [12,23,34,45,56])",
        "countBeautifulPairs(nums = [20, 21, 33])",
        "countBeautifulPairs(nums = [12, 21, 11, 4])",
        "countBeautifulPairs(nums = [33, 77])",
        "countBeautifulPairs(nums = [34,23,65,4])",
        "countBeautifulPairs(nums = [12, 34, 1, 50])",
        "countBeautifulPairs(nums = [12, 49, 20, 27, 25])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1,2,3,4], t = 2)",
        "longestAlternatingSubarray(nums = [3,5,2,1], t = 3)",
        "longestAlternatingSubarray(nums=[0,0,0], t=1)",
        "longestAlternatingSubarray(nums = [4,6,7,8], t = 7)",
        "longestAlternatingSubarray(nums = [1000000000,1000000000], t = 1000000000)",
        "longestAlternatingSubarray(nums = [2,3,4,9,2], t = 6)",
        "longestAlternatingSubarray(nums = [0, 10, 5, 7, 15], t = 10)",
        "longestAlternatingSubarray(nums = [12, 11, 9, 2, 2], t = 9)",
        "longestAlternatingSubarray(nums = [3, 1, 7, 2, 3, 2, 3, 4, 3, 7, 2, 1, 7, 2, 3, 5], t = 5)",
        "longestAlternatingSubarray(nums = [3,1,4,4,7,9,9,3,2,1,4,2,1,1], t = 3)"
    ],
    "sample_36": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abca\")",
        "minimumCost(s = \"caaab\")",
        "minimumCost(s = \"abac\")",
        "minimumCost(s = \"abccbc\")",
        "minimumCost(s = \"aaacbbb\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDECDAB\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDabcd\")",
        "minLength(s = \"ABCDA\")",
        "minLength(s = \"AABCD\")",
        "minLength(s = \"ABCDECDABCAA\")",
        "minLength(s = \"AABCDD\")",
        "minLength(s = \"ABACDACD\")",
        "minLength(s = \"ABCDBDACBCDABBD\")"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [3,0,0,2,0])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 0, 0, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,0,0,0,0,1,1,0,1,0,1,1])"
    ],
    "sample_9": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 1]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 1]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 1]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 0]])",
        "colorTheArray(n = 3, queries = [[0,1],[1,2],[2,3]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 4, queries = [[0,1],[3,2]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 2], [1, 3], [2, 3]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [2, 3], [0, 2], [2, 4], [1, 3], [2, 5]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 3, 2, 1], nums2 = [2, 2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2, 1], nums2 = [2, 1, 3, 3])",
        "maxNonDecreasingLength(nums1 = [1, 3, 5, 7], nums2 = [2, 4, 6, 8])",
        "maxNonDecreasingLength(nums1 = [1,2,3,4,5], nums2 = [6,5,4,3,2])",
        "maxNonDecreasingLength(nums1 = [3,2,5,4,1], nums2 = [2,5,1,3,4])",
        "maxNonDecreasingLength(nums1 = [1, 1, 1, 2, 2], nums2 = [1, 1, 2, 2, 3])",
        "maxNonDecreasingLength(nums1 = [2,1,3,1,2], nums2 = [2,1,3,2,2])",
        "maxNonDecreasingLength(nums1 = [10, 10, 8], nums2 = [10, 8, 10])",
        "maxNonDecreasingLength(nums1 = [4, 3, 5, 1, 2, 9], nums2 = [1, 3, 5, 1, 2, 9])",
        "maxNonDecreasingLength(nums1 = [10, 9, 2, 5, 3, 7, 101, 18], nums2 = [11, 22, 31, 40, 60, 91, 120])"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1,3,2,5,4], k = 3)",
        "maximumBeauty(nums = [0, 1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [2,4,6,4,3,1,1,3], k = 2)",
        "maximumBeauty(nums = [0, 2, 4, 6, 8, 10], k = 2)",
        "maximumBeauty(nums = [2, 4, 6, 4, 3, 2, 5, 1], k = 3)",
        "maximumBeauty(nums = [1,2,3,2,1,2,1,3,2], k = 1)",
        "maximumBeauty(nums = [0, 5, 7, 6, 4, 3], k = 2)",
        "maximumBeauty(nums = [4,9,4,2,6,1], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 3, 2, 2, 2, 4, 2], k = 2)",
        "maximumBeauty(nums = [0, 2, 4, 2, 3, 5, 5, 3, 0, 10, 9], k = 5)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1, 2])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [2, 0, 1])",
        "findValueOfPartition(nums = [2, 2, 3, 1])",
        "findValueOfPartition(nums = [1, 2, 4, 8, 16, 32])",
        "findValueOfPartition(nums = [0, 1, 2, 4, 10])",
        "findValueOfPartition(nums = [5,5,1,5,5])",
        "findValueOfPartition(nums = [2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1])",
        "findValueOfPartition(nums = [1,5,8,3,7,12,2])",
        "findValueOfPartition(nums = [10, 2, 13, 11, 4, 1, 7, 9, 6])"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [3,4,5,8])",
        "findValueOfPartition(nums = [1, 2, 3, 10])",
        "findValueOfPartition(nums = [8,10,9,12])",
        "findValueOfPartition(nums = [1,1,1,5,6,6])",
        "findValueOfPartition(nums = [1, 2, 5, 7, 10, 11])",
        "findValueOfPartition(nums = [1,1,5,6,7,10,11])",
        "findValueOfPartition(nums = [4,8,10,2,1])",
        "findValueOfPartition(nums = [1,2,3,4,6,7,8,12])",
        "findValueOfPartition(nums = [5,3,1,7,4,8])",
        "findValueOfPartition(nums = [41, 45, 36, 37, 28])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [4, 2, 1, 5, 3])",
        "semiOrderedPermutation(nums = [4, 2, 1, 3, 5])",
        "semiOrderedPermutation(nums = [4, 1, 3, 5, 2])",
        "semiOrderedPermutation(nums = [3, 5, 4, 1, 2])",
        "semiOrderedPermutation(nums = [5, 4, 2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 5, 4, 1, 3])",
        "semiOrderedPermutation(nums = [1, 3, 5, 6, 4, 2])",
        "semiOrderedPermutation(nums = [7, 1, 5, 3, 6, 2, 4])"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [3, 2, 4, 1])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "semiOrderedPermutation(nums = [3, 4, 1, 5, 2])",
        "semiOrderedPermutation(nums = [1,3,2,4,5])",
        "semiOrderedPermutation(nums = [1,3,2])"
    ]
}