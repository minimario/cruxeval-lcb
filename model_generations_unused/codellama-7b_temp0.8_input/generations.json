{
    "sample_48": [
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [3, 2, 1])",
        "semiOrderedPermutation(nums = [2, 4, 3, 1])",
        "semiOrderedPermutation(nums = [4, 1, 3, 2])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])",
        "semiOrderedPermutation(nums = [2, 1])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "semiOrderedPermutation(nums = [2, 5, 3, 1, 4])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1, 1, 1, 1, 1])",
        "continuousSubarrays(a = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1])",
        "continuousSubarrays(a = [1,1,2,2,3,3,1,1])",
        "continuousSubarrays(a = [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0])",
        "continuousSubarrays(a = [3,2,1,2,3,4,1,2,3])",
        "continuousSubarrays(a = [2, 3, 1, 3, 2, 1, 2, 3])",
        "continuousSubarrays(a = [0, 0, 1, 1, 2, 2, 2, 2, 0, 0, 1, 1, 2, 2, 2, 2, 0, 0, 1, 1, 2, 2, 2, 2])",
        "continuousSubarrays(a = [4, 2, 4, 4, 1, 2, 3, 4, 4, 2, 4])",
        "continuousSubarrays(a = [3, 1, 3, 3, 3, 2, 2, 2, 4, 4, 4, 4, 5, 5])",
        "continuousSubarrays(a = [1, 3, 5, 3, 5, 5, 5, 3, 5, 5, 5, 3, 5, 3, 3, 3])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [2, 2, 2, 2, 5, 5, 5, 8])",
        "continuousSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "continuousSubarrays(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2])",
        "continuousSubarrays(nums = [1,2,2,2,5,5,5,5])",
        "continuousSubarrays(nums = [1, 3, 2, 4, 2])",
        "continuousSubarrays(nums = [1, 2, 2, 2, 2, 5, 2])",
        "continuousSubarrays(nums = [1, 2, 3, 3, 2, 1, 1, 2, 3])",
        "continuousSubarrays(nums = [0, 1, 2, 4, 5, 3])",
        "continuousSubarrays(nums = [1, 1, 1, 2, 1, 2, 1, 3, 1])",
        "continuousSubarrays(nums = [1, 2, 2, 2, 3, 3, 3, 3, 2, 2, 1])"
    ],
    "sample_8": [
        "colorTheArray(n = 3, queries = [[1, 2]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [1, 0]])",
        "colorTheArray(n = 3, queries = [[0,1], [1,1], [2,1]])",
        "colorTheArray(n = 5, queries = [[3, 1], [4, 0], [2, 2], [1, 4], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1,2],[3,3],[4,4],[2,3],[1,4]])",
        "colorTheArray(n = 3, queries = [[1, 3], [2, 1], [3, 1], [1, 1], [2, 2]])",
        "colorTheArray(n = 5, queries = [[0, 2], [2, 2], [0, 2], [0, 1], [0, 1], [3, 3]])",
        "colorTheArray(n = 4, queries = [[1,2],[3,3],[0,1],[3,3],[0,0]])",
        "colorTheArray(n = 6, queries = [[0, 1], [1, 3], [0, 4], [3, 1], [4, 5], [2, 5]])",
        "colorTheArray(n = 4, queries = [[1, 1], [1, 2], [2, 3], [2, 4], [2, 2], [2, 4], [4, 3], [5, 5], [4, 4], [3, 1]])"
    ],
    "sample_97": [
        "maximumJumps(nums = [-1, 2, 1, -4], target = 1)",
        "maximumJumps(nums = [-10, -5, 0, 3, 7], target = 11)",
        "maximumJumps(nums=[1, 1, 1], target=3)",
        "maximumJumps(nums = [0,2,1,0], target = 2)",
        "maximumJumps(nums = [3,-2,0,1], target = 10)",
        "maximumJumps(nums = [-100000,-100000,-100000,0], target = 3)",
        "maximumJumps(nums = [50, 20, 10, 10, 50, 50, 50, 20], target = 50)",
        "maximumJumps(nums = [2, 5, 3, 1, 1, 6, 2, 9], target = 5)",
        "maximumJumps(nums = [6, 1, -2, 4, 0, 6], target = 4)",
        "maximumJumps(nums = [6, 4, 7, 2, 5, 3, 5, 6], target = 4)"
    ],
    "sample_22": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"CDAB\")",
        "minLength(s = \"AC\")",
        "minLength(s = \"ABDCD\")",
        "minLength(s = \"ACBDD\")",
        "minLength(s = \"AAABCCDDDD\")",
        "minLength(s = \"ABAABACD\")"
    ],
    "sample_7": [
        "colorTheArray(n = 3, queries = [[1, 2]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 3, queries = [[1, 2], [0, 1], [1, 0]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 4], [4, 5]])",
        "colorTheArray(n = 5, queries = [[1, 3], [3, 5], [4, 3], [2, 5]])",
        "colorTheArray(n = 4, queries = [[1, 3], [1, 3], [2, 4]])",
        "colorTheArray(n = 4, queries = [[1, 2], [0, 3], [0, 2], [1, 1]])",
        "colorTheArray(n = 5, queries = [[3,2],[4,3],[2,3],[1,2],[2,2],[4,1]])",
        "colorTheArray(n = 4, queries = [[1,1], [3,2], [2,3], [4,4], [2,4]])",
        "colorTheArray(n = 4, queries = [[1, 1], [1, 3], [2, 3], [3, 3], [3, 4], [2, 4], [1, 2], [3, 1], [2, 2], [3, 2]])"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 2], [4, 4], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 2], [4, 1], [5, 0]])",
        "colorTheArray(n = 5, queries = [[3,2],[1,1],[2,1],[4,1],[1,3]])",
        "colorTheArray(n = 5, queries = [[3,2],[1,3],[2,4],[4,2]])",
        "colorTheArray(n = 4, queries = [[1, 2], [2, 3], [1, 3], [2, 4], [1, 4]])",
        "colorTheArray(n = 5, queries = [[1,2],[2,2],[4,2],[5,1]])",
        "colorTheArray(n = 5, queries = [[3, 5], [1, 2], [2, 3], [2, 2], [1, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [4, 2], [1, 3], [2, 4], [3, 5]])",
        "colorTheArray(n = 5, queries = [[0, 1], [3, 1], [4, 1], [2, 0], [1, 2]])",
        "colorTheArray(n = 5, queries = [[1,1],[1,2],[2,1],[2,3],[3,2],[4,1]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6])",
        "semiOrderedPermutation(nums=[1,2,3,4,5])",
        "semiOrderedPermutation(nums=[1,2,3,4,5])",
        "semiOrderedPermutation(nums = [2,1,3,4,5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [4, 3, 1, 2])",
        "semiOrderedPermutation(nums = [5, 1, 3, 2, 4])",
        "semiOrderedPermutation(nums = [3,2,1,5,6,4])"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [10, 1, 2, 4, 7, 2], threshold = 5)",
        "longestAlternatingSubarray(nums = [4, 2, 5, 3], threshold = 4)",
        "longestAlternatingSubarray(nums = [4, 2, 5, 7], threshold = 4)",
        "longestAlternatingSubarray(nums = [3, 2, 6, 5, 0, 3], threshold = 4)",
        "longestAlternatingSubarray(nums = [5, 2, 4, 3], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 1, 3, 5, 2, 1], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 1, 3, 1, 1, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [5, 4, 1, 3, 2, 7], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 5, 7, 7, 1], threshold = 5)"
    ],
    "sample_33": [
        "removeTrailingZeros(num = '5123001')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = \"5123001\")",
        "removeTrailingZeros(num
        "removeTrailingZeros(num = \"512300\")",
        "removeTrailingZeros(num = '1230500')",
        "removeTrailingZeros(num = '1000.00')",
        "removeTrailingZeros(num = '51230000000000000001')",
        "removeTrailingZeros(num = '512301')"
    ],
    "sample_50": [
        "smallestString(s = 'aab')",
        "smallestString(s = 'baab')",
        "smallestString(s = 'aaab')",
        "smallestString(s = 'aaab')",
        "smallestString(s = \"aabab\")",
        "smallestString(s = 'baaa')",
        "smallestString(s = \"abaaab\")",
        "smallestString(s = 'ababbab')",
        "smallestString(s = \"aabbac\")",
        "smallestString(s = 'abc')"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [10, 5, 2, 7, 5])",
        "distinctDifferenceArray(nums = [-1, 3, -4, 2, 2])",
        "distinctDifferenceArray(nums = [1, 1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [2, 1, 5, 7, 2, 0, 5])",
        "distinctDifferenceArray(nums = [3, 2, 1, 5, 4])",
        "distinctDifferenceArray(nums = [1, 1, 2, 3, 3, 4, 5])",
        "distinctDifferenceArray(nums = [5, 2, 1, 2, 5, 2, 1, 5])",
        "distinctDifferenceArray(nums = [0, 0, 2, 2])",
        "distinctDifferenceArray(nums = [1, 3, -2, 5, 3, 6, 1, -2])",
        "distinctDifferenceArray(nums = [0, 1, 1, 2, 2, 4, 4])"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 10)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 1, additionalTank = 10)",
        "distanceTraveled(mainTank = 10, additionalTank = 20)",
        "distanceTraveled(mainTank = 15, additionalTank = 4)",
        "distanceTraveled(mainTank = 5, additionalTank = 20)"
    ],
    "sample_118": [
        "minimumIndex(nums = [1, 2, 3, 4, 1])",
        "minimumIndex(nums = [1, 0, 1, 0])",
        "minimumIndex(nums = [3, 4, 1])",
        "minimumIndex(nums = [1, 3, 3, 2, 1])",
        "minimumIndex(nums = [3, 4, 1])",
        "minimumIndex(nums = [1, 1, 1, 1, 1, 1])",
        "minimumIndex(nums = [4, 5, 6, 4, 5, 6])",
        "minimumIndex(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minimumIndex(nums = [5, 4, 5, 6, 5, 4, 5, 6])",
        "minimumIndex(nums = [100, 50, 20, 10])"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [2, 10, 20])",
        "countBeautifulPairs(nums = [12, 17, 21])",
        "countBeautifulPairs(nums = [101, 1101])",
        "countBeautifulPairs(nums = [12, 5, 3, 6, 10])",
        "countBeautifulPairs(nums = [156, 198])",
        "countBeautifulPairs(nums = [56, 33, 25])",
        "countBeautifulPairs(nums = [541, 432, 356])",
        "countBeautifulPairs(nums = [143, 26, 21, 4, 6])",
        "countBeautifulPairs(nums = [36, 20, 31, 17, 27, 24])",
        "countBeautifulPairs(nums = [2364, 5359, 4535])"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = '5123000000')",
        "removeTrailingZeros(num = '51230000')",
        "removeTrailingZeros(num = '10000')",
        "removeTrailingZeros(num = \"05123010000000000\")",
        "removeTrailingZeros(num = \"0000001010000005123010000000000000000\")",
        "removeTrailingZeros(num = \"123000\")"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"aba\")",
        "minimizedStringLength(s = \"abcde\")",
        "minimizedStringLength(s = \"aabcccccaaa\")",
        "minimizedStringLength(s = \"aaabbb\")",
        "minimizedStringLength(s = \"aaabb\")",
        "minimizedStringLength(s = \"aaabbc\")",
        "minimizedStringLength(s = \"aaabbbcccc\")",
        "minimizedStringLength(s = \"aaabbbbcccc\")",
        "minimizedStringLength(s = \"aaaabbbccd\")",
        "minimizedStringLength(s = \"abbccdddddd\")"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [10, 2, 5, 1, 8, 7], k = 2)",
        "maximumBeauty(nums = [1, 2, 4, 6], k = 1)",
        "maximumBeauty(nums = [4, 2, 5, 1, 3], k = 3)",
        "maximumBeauty(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 2)",
        "maximumBeauty(nums = [5,10,3,2,15], k = 2)",
        "maximumBeauty(nums = [3, 2, 3, 5, 6, 7, 2, 3, 8, 8], k = 3)",
        "maximumBeauty(nums = [0, 4, 6, 3, 2, 4, 2], k = 2)"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 4, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 100)",
        "makeTheIntegerZero(num1=2, num2=1)",
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 3, num2 = 6)",
        "makeTheIntegerZero(num1 = 11, num2 = 4)",
        "makeTheIntegerZero(num1 = 10, num2 = 15)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 100, num2 = 101)"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [3, 1, 2, 4, 3])",
        "findValueOfPartition(nums = [1, 4, 3, 2])",
        "findValueOfPartition(nums = [1, 2, 4, 7])",
        "findValueOfPartition(nums = [1, 2, 3, 9])",
        "findValueOfPartition(nums = [15, 5, 20, 10, 35, 15])",
        "findValueOfPartition(nums = [1, 1, 1, 1, 1])",
        "findValueOfPartition(nums = [4, 1, 6, 3])",
        "findValueOfPartition(nums = [10, 20, 30])",
        "findValueOfPartition(nums = [2, 2, 4, 6, 10, 14])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 100, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 3)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 0, 0, 1])",
        "doesValidArrayExist(derived = [1,1,0,0,1,1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 1, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1, 0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 0, 1, 0, 1, 1, 1])"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'neven')",
        "makeSmallestPalindrome(s = 'neven')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'eve')",
        "makeSmallestPalindrome(s = 'nodd')",
        "makeSmallestPalindrome(s = 'dav')"
    ],
    "sample_110": [
        "checkArray(nums = [1, 2, 3], k = 1)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "checkArray(nums = [1, 2, 1, 2, 1], k = 2)",
        "checkArray(nums = [10, 11, 12, 1], k = 2)",
        "checkArray(nums = [1, 0, 1, 0, 0, 1], k = 3)",
        "checkArray(nums = [5, 1, 5, 5, 1, 5, 5, 5], k = 4)",
        "checkArray(nums = [1, -2, 0, 3, -2], k = 3)",
        "checkArray(nums = [-5, -1, -3, -2, 0, 4, -1, 2, 3, 8], k = 2)"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 0, 1, 1, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 0, 0, 1, 1, 1])",
        "doesValidArrayExist(derived = [True, False, False, True, True, False, True, False])"
    ],
    "sample_54": [
        "smallestString(s = 'abac')",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = 'aaaa')",
        "smallestString(s = 'kddsbncda')",
        "smallestString(s = 'aabab')",
        "smallestString(s = 'kddsbncc')",
        "smallestString(s = 'abbc')",
        "smallestString(s = \"kkddsbncc\")",
        "smallestString(s = 'aacbaa')",
        "smallestString(s = 'abacdea')"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1, 1, 2, 3, 2, 1, 1])",
        "continuousSubarrays(A = [3, 4, 5, 6, 7, 3, 4, 5, 6, 7])",
        "continuousSubarrays(A = [0, 0, 1, 1, 1, 1, 0, 0])",
        "continuousSubarrays(A = [1, 2, 2, 2, 3, 4, 4, 1, 2])",
        "continuousSubarrays(A = [2, 1, 3, 3, 4, 1])",
        "continuousSubarrays(A = [1, 2, 4, 1, 6, 3])",
        "continuousSubarrays(A = [5, 5, 4, 4, 4, 5, 4, 4])",
        "continuousSubarrays(A = [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])",
        "continuousSubarrays(A = [4, 6, 10, 12, 8, 4])",
        "continuousSubarrays(A = [0, 2, 2, 1, 2, 0, 1, 3, 3, 0, 3, 0, 2])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = 'ab')",
        "makeSmallestPalindrome(s = 'abb')",
        "makeSmallestPalindrome(s = 'abb')",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = 'abbc')",
        "makeSmallestPalindrome(s = \"abab\")",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = 'abbac')",
        "makeSmallestPalindrome(s = 'aaaa')"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [5, 1, 3, 4, 2])",
        "findValueOfPartition(nums = [1, 1, 1])",
        "findValueOfPartition(nums = [1, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 1, 2, 1])",
        "findValueOfPartition(nums = [2, 4, 8, 10])",
        "findValueOfPartition(nums = [5, 3, 2, 6, 7, 4])",
        "findValueOfPartition(nums = [4, 8, 1, 3, 7, 9, 5])",
        "findValueOfPartition(nums = [3, 2, 5, 10, 20])"
    ],
    "sample_51": [
        "smallestString(s = 'abcd')",
        "smallestString(s = 'abd')",
        "smallestString(s = 'bac')",
        "smallestString(s = 'adbca')",
        "smallestString(s = 'ddsba')",
        "smallestString(s = 'acdb')",
        "smallestString(s = 'abcdac')",
        "smallestString(s = \"ababa\")",
        "smallestString(s = 'aab')",
        "smallestString(s = 'kdabcddsbc')"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "maximumBeauty(nums = [1, 5, 2, 4, 3], k = 1)",
        "maximumBeauty(nums = [1, 5, 2, 4, 3], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 4)",
        "maximumBeauty(nums = [2,1,4,5,3], k = 2)",
        "maximumBeauty(nums = [2, 5, 10, 8, 6], k = 3)",
        "maximumBeauty(nums = [4, 2, 5, 3, 8, 6, 7, 4, 10, 9], k = 2)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 1, 2, 3], k = 2)",
        "checkArray(nums = [10, 15, 3, 7], k = 2)",
        "checkArray(nums = [1, 2, 3, 1], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [10, 5, 2, 7], k = 2)",
        "checkArray(nums = [1, 2, 3], k = 3)",
        "checkArray(nums = [1, 1, 2, 1], k = 2)",
        "checkArray(nums = [4, 2, 2, 3, 4, 4], k = 3)",
        "checkArray(nums = [2, 1, 3, 3, 2, 1, 3, 3, 2, 1], k = 3)"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 10)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 4, additionalTank = 3)",
        "distanceTraveled(mainTank = 3, additionalTank = 4)",
        "distanceTraveled(mainTank = 15, additionalTank = 1)"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 4, 5])",
        "distinctDifferenceArray(nums = [2, 1, 5, 2, 3, 5])",
        "distinctDifferenceArray(nums = [2, 1, 1, 2, 3, 1])",
        "distinctDifferenceArray(nums = [10, 5, 2, 7, 5, 2, 4, 2])",
        "distinctDifferenceArray(nums = [2, -1, 4, 2, 3])",
        "distinctDifferenceArray(nums = [10, 5, 20, 10, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 3, 1, 2])",
        "distinctDifferenceArray(nums = [1, 4, 3, 3, 5, 1])",
        "distinctDifferenceArray(nums = [3, 3, 1, 3, 1, 1, 1, 1])",
        "distinctDifferenceArray(nums = [4, 3, 2, 1, 4, 1, 4, 3, 2])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [2, 2, 2, 2, 5, 5, 5, 8])",
        "continuousSubarrays(A = [2,2,2,2,5,5,5,8])",
        "continuousSubarrays(A = [1,1,2,2,3,3,3])",
        "continuousSubarrays(A = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2])",
        "continuousSubarrays(A = [1,2,3,1,1,1])",
        "continuousSubarrays(A = [1, 2, 2, 3, 3, 2, 2, 1])",
        "continuousSubarrays(A = [2, 2, 2, 2, 3, 3, 3, 2, 2, 2, 2])",
        "continuousSubarrays(A = [1, 1, 1, 1, 2, 2, 3, 4, 5])",
        "continuousSubarrays(A = [5, 2, 4, 6, 6, 6, 1, 3, 3, 3])",
        "continuousSubarrays(A = [1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6])"
    ],
    "sample_6": [
        "colorTheArray(n = 5, queries = [[1,2],[2,3],[4,5]])",
        "colorTheArray(n = 5, queries = [[3,2],[4,3],[2,2],[1,4],[2,1]])",
        "colorTheArray(n = 5, queries = [[1,0],[2,1],[3,1],[4,0],[4,2]])",
        "colorTheArray(n = 4, queries = [[1,0], [4,1], [3,0], [2,0]])",
        "colorTheArray(n = 6, queries = [[3,1],[4,1],[5,1],[2,0],[1,0],[4,1]])",
        "colorTheArray(n = 4, queries = [[1,1],[1,2],[1,3],[1,4],\n                                      [1,5],[2,5],[3,5],[4,5]])",
        "colorTheArray(n = 4, queries = [[1, 2], [2, 1], [0, 3], [3, 0], [1, 1], [0, 0]])",
        "colorTheArray(n = 5, queries = [[1, 3], [3, 4], [4, 4], [2, 2], [1, 1], [2, 3], [2, 3]])",
        "colorTheArray(n = 6, queries = [[1,2],[2,2],[3,3],[4,4],[5,4],[6,1]])",
        "colorTheArray(n = 10, queries = [[1,1], [1,0], [0,1], [0,0], [0,1], [1,0], [1,1]])"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 10, b = 4)",
        "makeTheIntegerZero(a = 1, b = 2)",
        "makeTheIntegerZero(a = 15, b = 8)",
        "makeTheIntegerZero(a = 12, b = 3)",
        "makeTheIntegerZero(a = 13, b = 4)",
        "makeTheIntegerZero(a = 17, b = 11)",
        "makeTheIntegerZero(a = 12, b = 18)",
        "makeTheIntegerZero(a = 39, b = 13)",
        "makeTheIntegerZero(a=45, b=15)",
        "makeTheIntegerZero(a = 1289, b = 585)"
    ],
    "sample_100": [
        "maximumJumps(nums = [100, -23, -23, 404, 100, 23, 23, 23, 3, 404], target = 1)",
        "maximumJumps(nums = [2, 5, 3, 1, 4], target = 3)",
        "maximumJumps(nums = [0, 1, 2, 3, 4], target = 1)",
        "maximumJumps(nums = [3, 3, 1, 0, 4], target = 2)",
        "maximumJumps(nums = [10, 5, 2, 1, 15, 20], target = 2)",
        "maximumJumps(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], target = 5)",
        "maximumJumps(nums = [3, 2, 5, 1, 1, 1], target = 4)",
        "maximumJumps(nums = [4, -1, 3], target = 3)",
        "maximumJumps(nums = [10, 9, 10, 9, 10, 9, 10], target = 7)",
        "maximumJumps(nums = [-4, -3, 1, 2, -1, 2, 1, -1, -1, -1], target = 3)"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [10, 1, 2, 4, 7, 2], threshold = 5)",
        "longestAlternatingSubarray(nums = [10,1,2,4,7,2], threshold = 5)",
        "longestAlternatingSubarray(nums = [7, 2, 4], threshold = 4)",
        "longestAlternatingSubarray(nums = [10, 5, 2, 7, 3], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 1, 1, 2, 1, 2, 2, 1, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [12, 1, 4, 6, 5, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 6, 2, 5, 6, 2, 5, 2], threshold = 3)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10, 22, 46, 68], threshold = 4)",
        "longestAlternatingSubarray(nums = [1,2,3,2,1,2,3,3,1,2,2], threshold = 3)",
        "longestAlternatingSubarray(nums=[10,10,10,10,10,2,3,2,2,10,2,3,2,2], threshold=3)"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [10, 5, 20], b = [5, 10, 3])",
        "maxNonDecreasingLength(a = [3, 2, 1], b = [4, 3, 1])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 6], b = [2, 4, 6, 8, 10])",
        "maxNonDecreasingLength(a = [2, 2, 3], b = [1, 2, 3])",
        "maxNonDecreasingLength(a = [1, 3, 4, 2], b = [1, 2, 1, 2])",
        "maxNonDecreasingLength(a = [1, 2, 3, 6], b = [1, 5, 2, 4, 6])",
        "maxNonDecreasingLength(a = [10, 20, 30, 20], b = [20, 30, 30, 30])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5, 7], b = [2, 4, 5, 1, 3, 6])",
        "maxNonDecreasingLength(a = [10, 12, 20, 30], b = [10, 15, 30, 50])",
        "maxNonDecreasingLength(a = [3, 4, 5, 7, 8], b = [5, 7, 9, 8, 10])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,0,0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 0, 0, 1, 0])"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [10, 1, 2, 4, 7, 2], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 4], threshold = 4)",
        "longestAlternatingSubarray(nums = [10, 11, 12, 13, 14, 15], threshold = 3)",
        "longestAlternatingSubarray(nums = [3, 2, 6, 4, 5, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 1, 4, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 10], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 1, 1, 1, 0, 0], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 1, 4, 3, 5, 7, 6, 8], threshold = 4)",
        "longestAlternatingSubarray(nums = [16, 13, 2, 4, 7, 10, 4, 9], threshold = 4)",
        "longestAlternatingSubarray(nums = [13, 10, 25, 35, 15, 6, 10, 5], threshold = 2)"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2])",
        "findValueOfPartition(nums = [1, 5, 11, 5])",
        "findValueOfPartition(nums = [2, 1])",
        "findValueOfPartition(nums = [1, 1, 1, 2, 2, 2])",
        "findValueOfPartition(nums = [5, 6, 7])",
        "findValueOfPartition(nums = [2, 4, 7, 1])",
        "findValueOfPartition(nums = [1, 4, 8, 3])",
        "findValueOfPartition(nums = [0, 5, 4, 1, 3])",
        "findValueOfPartition(nums = [1, 1, 4, 2, 1, 2, 1])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = 'abba')",
        "makeSmallestPalindrome(s = 'aba')",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = 'ab')",
        "makeSmallestPalindrome(s = 'ab')",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"aabb\")",
        "makeSmallestPalindrome(s = \"babb\")"
    ],
    "sample_18": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABBCD\")",
        "minLength(s = \"ABCDEFG\")",
        "minLength(s = \"CDABA\")",
        "minLength(s = \"ABABCDCDABABCDCD\")",
        "minLength(s = \"ABCBCD\")",
        "minLength(s = \"EABBCD\")",
        "minLength(s = \"AAACCCDDDD\")"
    ],
    "sample_99": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [-1,-2,-3,-4,-5], target = -1)",
        "maximumJumps(nums = [55, 30, 5, 4, 2], target = 20)",
        "maximumJumps(nums = [0, 0, 0, 1, 1], target = 1)",
        "maximumJumps(nums = [2, 1, 4, 7, 3, 2, 5], target = 5)",
        "maximumJumps(nums = [2, 4, 3, 1, 4, 4], target = 1)",
        "maximumJumps(nums = [-1, 2, -1, -4, -2, -4], target = -2)",
        "maximumJumps(nums = [10, 9, 100, 50, 60], target = 10)",
        "maximumJumps(nums = [23, -29, 55, -21, 45, 12], target = 10)"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[3, 2], [4, 3], [2, 3], [1, 1], [2, 4]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])",
        "colorTheArray(n = 5, queries = [[3, 2], [4, 2], [2, 3], [1, 4], [5, 4]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 3], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [1, 2], [2, 1], [2, 2], [2, 3]])",
        "colorTheArray(n = 4, queries = [[2, 1]])",
        "colorTheArray(n = 5, queries = [[2, 1], [2, 2], [3, 5], [4, 5], [2, 3]])",
        "colorTheArray(n = 5, queries = [[1,1], [2,2], [3,4], [4,1], [5,4]])",
        "colorTheArray(n=3, queries=[[1, 2], [2, 3], [4, 2], [3, 1]])"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 3)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank=1, additionalTank=2)",
        "distanceTraveled(mainTank = 3, additionalTank = 4)",
        "distanceTraveled(mainTank=10, additionalTank=1)",
        "distanceTraveled(mainTank=4, additionalTank=2)",
        "distanceTraveled(mainTank = 19, additionalTank = 1)",
        "distanceTraveled(mainTank=7, additionalTank=0)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [42, 11, 13, 31])",
        "countBeautifulPairs(nums = [13, 16, 17, 19, 20])",
        "countBeautifulPairs(nums = [12, 5, 7, 20, 10])",
        "countBeautifulPairs(nums = [14, 21, 3, 10, 5])",
        "countBeautifulPairs(nums = [3, 24, 12, 11, 25])",
        "countBeautifulPairs(nums = [23, 10, 6, 4])",
        "countBeautifulPairs(nums = [25, 30, 31, 21])",
        "countBeautifulPairs(nums = [11, 55, 5, 22])",
        "countBeautifulPairs(nums = [55, 92, 44, 27, 71])"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3, 4, 5], x = 4)",
        "minCost(A = [1, 3, 4, 2], x = 2)",
        "minCost(A = [1, 3, 2], x = 2)",
        "minCost(A = [3, 4, 1], x = 2)",
        "minCost(A = [1, 4, 2, 1, 7, 8, 3, 9, 6], x = 3)",
        "minCost(A = [10, 1, 1, 10], x = 2)",
        "minCost(A = [5, 4, 3, 2, 1], x = 1)",
        "minCost(A = [2, 4, 6, 2, 5, 3], x = 2)",
        "minCost(A = [1, 4, 5, 3, 1], x = 4)",
        "minCost(A = [1, 5, 3, 6, 7, 8, 2, 9], x = 4)"
    ],
    "sample_98": [
        "maximumJumps(nums = [10, 5, 2, 1, 7, 5], target = 5)",
        "maximumJumps(nums = [10, 5, 2, 1, 7, 5], target = 5)",
        "maximumJumps(nums = [10, 5, 2, 6], target = 3)",
        "maximumJumps(nums = [1,2,4,7], target = 4)",
        "maximumJumps(nums = [3, 5, 4, 2], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7], target = 7)",
        "maximumJumps(nums = [3, 4, 1], target = 2)",
        "maximumJumps(nums = [-10, 100, -100, 10], target = 20)",
        "maximumJumps(nums = [100, 1, 1000, 1000000000, 10], target = 999)",
        "maximumJumps(nums = [100, -23, -23, 40, 40, 40, -40, -40, 1, 2, 3, 4, 5, 6], target = 10)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [5, 5, 10, 100, 10, 5])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [5, 2, 1, 2, 3])",
        "numberOfGoodSubarraySplits(nums = [5, 3, 5, 3, 6, 7])",
        "numberOfGoodSubarraySplits(nums = [2, 3, 4, 1, 2, 1, 4, 1, 2, 1, 2, 1])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [-1, 3, -4, 2, 2])",
        "distinctDifferenceArray(nums = [1, -1, 1, -1, 1])",
        "distinctDifferenceArray(nums = [2, 1, 3, 1, 2, 4])",
        "distinctDifferenceArray(nums = [2, 2, 2, 2, 3, 5])",
        "distinctDifferenceArray(nums = [-1, 1, 5, 2, 3, 2])",
        "distinctDifferenceArray(nums = [2, 1, 5, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 1, 1, 3, 3, 3, 7, 7, 12, 12, 12, 17])",
        "distinctDifferenceArray(nums = [1, 2, 4, 4, 3, -2, 0])",
        "distinctDifferenceArray(nums = [-3, 1, 2, -1, 1, 2, 3, 3])",
        "distinctDifferenceArray(nums = [-6, -2, 2, 4, 2, 6])"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])",
        "countBeautifulPairs(nums = [2, 11, 3])",
        "countBeautifulPairs(nums = [4, 6, 15, 35])",
        "countBeautifulPairs(nums = [100, 205, 313, 421, 555])",
        "countBeautifulPairs(nums = [10, 2, 5, 1, 11, 14, 6, 8])",
        "countBeautifulPairs(nums = [11, 23, 39, 49, 58, 12, 28, 38, 48, 57, 13, 29, 39, 49, 57, 14, 25, 36, 47, 58])",
        "countBeautifulPairs(nums = [502, 602, 7, 36, 797, 706, 102, 977, 73, 877, 76])",
        "countBeautifulPairs(nums = [12, 22, 12, 3, 10, 4, 17, 2, 4, 8, 7, 14, 15, 18, 20, 1, 2, 9, 1, 16, 11, 5, 6, 3, 13, 19, 21, 16])",
        "countBeautifulPairs(nums = [11, 10, 3, 4, 22, 14, 25, 23, 17, 11, 14, 13, 17, 21, 23, 11, 24, 21, 11, 10, 12, 12, 9, 11, 26, 12, 10, 24, 22, 25, 16, 21, 19, 19, 15, 22, 12, 25, 22, 13, 14, 19, 10, 23, 17, 25, 17, 25, 18, 13, 21, 25, 16, 13, 22, 22, 11, 23, 14, 21, 19, 13, 21, 25, 14, 23, 12, 20, 26, 20, 24, 13, 19, 22, 18, 11, 25, 22, 20, 25, 22, 10, 19, 23, 21, 19, 22, 25, 12, 20, 22, 10, 22, 10, 22, 17, 25, 22, 20, 21, 21, 19, 16, 20, 22, 15, 20, 23, 13, 17, 13, 18, 20, 23, 15, 21, 14, 21, 22, 21, 11, 24, 23, 21, 24, 20, 23, 23, 19, 17, 15, 25, 17, 18, 23, 12, 19, 24, 19, 14, 22, 22, 21, 18,"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"abab\")",
        "minimizedStringLength(s = \"ba\")",
        "minimizedStringLength(s = \"ababc\")",
        "minimizedStringLength(s = \"aa\")",
        "minimizedStringLength(s = \"aaabbbb\")",
        "minimizedStringLength(s = \"abbca\")",
        "minimizedStringLength(s = \"aaabcccccaaa\")",
        "minimizedStringLength(s = \"abcdabcdabcd\")",
        "minimizedStringLength(s = \"aacb\")",
        "minimizedStringLength(s = \"fpsjbcbce\")"
    ],
    "sample_41": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaa\")",
        "minimumCost(s = \"abaa\")",
        "minimumCost(s = \"abaa\")",
        "minimumCost(s = \"abaa\")",
        "minimumCost(s = \"abaab\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abaaa\")"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 4, 3])",
        "distinctDifferenceArray(nums = [1, 2, 1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 3, 2, 2])",
        "distinctDifferenceArray(nums = [-1, 1, -1, 1, -1, 1])",
        "distinctDifferenceArray(nums = [1, 3, 4, 1])",
        "distinctDifferenceArray(nums = [1, 2, 2, 2, 3, 1])",
        "distinctDifferenceArray(nums = [1, -1, 1, -1, 1, -1, 1, 1])",
        "distinctDifferenceArray(nums = [2, 3, 1, 2, 2, 3, 1, 2, 2, 2])",
        "distinctDifferenceArray(nums = [2, 2, 3, 4, 6, 6, 6, 7, 7])",
        "distinctDifferenceArray(nums = [2, 4, 4, 2, 2, 1, 4, 4])"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [0, 1])",
        "doesValidArrayExist(derived = [0, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 4])",
        "doesValidArrayExist(derived = [1, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 1])",
        "doesValidArrayExist(derived = [2,1,3])",
        "doesValidArrayExist(derived = [0,1,1,1,1])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 2, 3, 5])"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [2, 1, 0, 4])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1])"
    ],
    "sample_52": [
        "smallestString(s = 'kddsbancd')",
        "smallestString(s = 'kddsbancd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'aaa')",
        "smallestString(s = 'aaaabbbbccccdddd')",
        "smallestString(s = 'akkkddsbcdd')",
        "smallestString(s = \"aacdddbbds\")",
        "smallestString(s = 'kkkkkkkbaaabcd')",
        "smallestString(s = 'kkccddddddaa')",
        "smallestString(s = 'jjehcba')"
    ],
    "sample_40": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaa\")",
        "minimumCost(s = \"abaa\")",
        "minimumCost(s = \"abaaa\")",
        "minimumCost(s = \"ABAB\")"
    ],
    "sample_38": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaa\")",
        "minimumCost(s = \"abaa\")",
        "minimumCost(s = \"abaab\")",
        "minimumCost(s = \"abaab\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"cabca\")",
        "minimumCost(s = \"ababcbacadefegdehijhklij\")",
        "minimumCost(s = \"aabbbcccbddcba\")"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3, 3])",
        "distinctDifferenceArray(nums = [3, 1, 4, 1, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 4])",
        "distinctDifferenceArray(nums = [5, 1, 3, 4, 6])",
        "distinctDifferenceArray(nums = [10, 20, 10, 20, 30, 10, 20])",
        "distinctDifferenceArray(nums = [-1, 2, 1, -4, -1])",
        "distinctDifferenceArray(nums = [2, 1, 1, 3, 5, 6, 2, 3])",
        "distinctDifferenceArray(nums = [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0])",
        "distinctDifferenceArray(nums = [-2, 0, 0, 0, 0, 0, 2])",
        "distinctDifferenceArray(nums = [-4, 2, 0, 4, 2, 0, -2])"
    ],
    "sample_53": [
        "smallestString(s = 'abc')",
        "smallestString(s = 'abac')",
        "smallestString(s = 'aab')",
        "smallestString(s = 'bbbaa')",
        "smallestString(s = 'bcaab')",
        "smallestString(s = 'dbbca')",
        "smallestString(s = \"aabbcc\")",
        "smallestString(s = 'cbb')",
        "smallestString(s = 'aaxaa')",
        "smallestString(s = \"fbcda\")"
    ],
    "sample_109": [
        "checkArray(nums = [1, 5, 3, 4, 2], k = 2)",
        "checkArray(nums = [10, 1, 2, 7, 6, 1, 5], k = 2)",
        "checkArray(nums = [1, 3, 5], k = 1)",
        "checkArray(nums = [1, 2, 3, 5], k = 3)",
        "checkArray(nums = [1,3,1,4,2], k = 2)",
        "checkArray(nums = [7,11,12,9,5,1,10], k = 2)",
        "checkArray(nums = [1, 1, 1, 2, 2, 2, 2], k = 3)",
        "checkArray(nums = [3, 4, 6, 7, 10], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 1, 4, 4, 1], k = 2)",
        "checkArray(nums = [10, 100, 200, 100, 50, 40, 20, 50], k = 3)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5,6], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1, 5, 2, 4, 3], k = 3)",
        "maximumBeauty(nums = [1,3,2,4,5], k = 2)",
        "maximumBeauty(nums = [1,2,3,4], k = 2)",
        "maximumBeauty(nums = [2, 3, 5, 7, 11], k = 1)",
        "maximumBeauty(nums = [4, 2, 7, 8, 3, 8], k = 1)",
        "maximumBeauty(nums = [1,2,5,5,8], k = 4)",
        "maximumBeauty(nums = [5, 3, 10, 1, 15, 7, 30], k = 3)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 3, 5, 7, 9])",
        "distinctDifferenceArray(a = [1, 2, 4, 3, 5])",
        "distinctDifferenceArray(a = [1,2,2,3,4,5])",
        "distinctDifferenceArray(a = [1, 2, 3, 3, 2])",
        "distinctDifferenceArray(a = [1, 1, 3, 3, 7])",
        "distinctDifferenceArray(a = [5, 1, 2, 7, 6])",
        "distinctDifferenceArray(a = [1, 1, 2, 3, 3, 3, 4, 7, 8, 8])",
        "distinctDifferenceArray(a = [1, 1, 4, 4, 5, 7, 8, 8, 9])",
        "distinctDifferenceArray(a = [4, 4, 1, 1, 3, 1, 4])",
        "distinctDifferenceArray(a = [-1, 3, -2, -3, 4, 1, 6, 5])"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '5123010')",
        "removeTrailingZeros(a = '5123010')",
        "removeTrailingZeros(a = '5123010')",
        "removeTrailingZeros(a = '5123010')",
        "removeTrailingZeros(a = '5123010')",
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '5123001')",
        "removeTrailingZeros(a = \"5123010\")",
        "removeTrailingZeros(a = '512301.00')",
        "removeTrailingZeros(a = '5123000000000001')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'neven')",
        "makeSmallestPalindrome(s = 'neven')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'eve')",
        "makeSmallestPalindrome(s = 'nnee')",
        "makeSmallestPalindrome(s = 'noven')",
        "makeSmallestPalindrome(s = 'dak')",
        "makeSmallestPalindrome(s = \"lol\")"
    ],
    "sample_55": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbancd')",
        "smallestString(s = 'kddsbcnd')",
        "smallestString(s = 'abda')",
        "smallestString(s = 'kddsbbcdd')",
        "smallestString(s = 'zb')",
        "smallestString(s = 'kddsabncde')",
        "smallestString(s = 'addsds')",
        "smallestString(s = 'abdsn')",
        "smallestString(s = 'cdds')"
    ],
    "sample_35": [
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010000000000')",
        "removeTrailingZeros(num = \"0000000012301\")",
        "removeTrailingZeros(num = '1000000005123010000000')"
    ],
    "sample_23": [
        "minLength(s = \"ABACD\")",
        "minLength(s = \"ABCDABCDABCDABCD\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABACDABACD\")",
        "minLength(s = \"AAABCD\")",
        "minLength(s = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")",
        "minLength(s = \"AAABBCDD\")",
        "minLength(s=\"ABCDCDCBAABCD\")",
        "minLength(s = \"AABBCDEED\")",
        "minLength(s=\"ABABABCDCDCBA\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '5123001')",
        "removeTrailingZeros(num = '512301.000')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"5123000\")",
        "removeTrailingZeros(num = '10000')",
        "removeTrailingZeros(num = \"000512301000\")",
        "removeTrailingZeros(num = \"1230000001\")",
        "removeTrailingZeros(num = '12001.00000')"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 3, num2 = 7)",
        "makeTheIntegerZero(num1 = 12, num2 = 7)",
        "makeTheIntegerZero(num1 = 6, num2 = 5)",
        "makeTheIntegerZero(num1 = 3, num2 = 9)",
        "makeTheIntegerZero(num1 = 3, num2 = 9)",
        "makeTheIntegerZero(num1 = 2, num2 = 7)",
        "makeTheIntegerZero(num1 = 18, num2 = 9)",
        "makeTheIntegerZero(num1=14, num2=5)",
        "makeTheIntegerZero(num1 = 19, num2 = 23)"
    ],
    "sample_57": [
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 1, b = 2)",
        "distanceTraveled(a = 1, b = 10)",
        "distanceTraveled(a = 1, b = 4)",
        "distanceTraveled(a = 2, b = 0)",
        "distanceTraveled(a = 6, b = 1)",
        "distanceTraveled(a = 6, b = 0)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [3,5,2,4,5], t = 2)",
        "longestAlternatingSubarray(nums = [2,1,4,5,3], t = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], t = 3)",
        "longestAlternatingSubarray(nums = [3,2,1,4,5,6,7], t = 3)",
        "longestAlternatingSubarray(nums = [1, 3, 2, 4, 5], t = 3)",
        "longestAlternatingSubarray(nums = [2,1,4,3,4,2], t = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 2, 5, 6, 7], t = 3)",
        "longestAlternatingSubarray(nums = [2,3,4,5,1,2,3], t = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 2, 4, 5, 3, 5, 6, 4], t = 3)",
        "longestAlternatingSubarray(nums = [3,5,7,11,15,17,20], t = 10)"
    ],
    "sample_102": [
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 3)",
        "maximumJumps(nums = [10, 5, 2, 1, 15], target = 3)",
        "maximumJumps(nums = [1, 2, 3], target = 10)",
        "maximumJumps(nums = [1, 100, 1, 100, 1, 100], target = 99)",
        "maximumJumps(nums = [-1000000, 1000000], target = 1)",
        "maximumJumps(nums = [2, 5, 2, 5, 2], target = 3)",
        "maximumJumps(nums = [100, 101, 102, 99, 98, 97], target = 10)",
        "maximumJumps(nums = [3, 0, 4, 0, 0, 4], target = 5)",
        "maximumJumps(nums = [-1, -2, -3, 1, 2, 3, 5], target = -2)",
        "maximumJumps(nums = [-5, -3, -3, 7, 10, 11, 11, -2, -1, -1], target = 3)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123001')",
        "removeTrailingZeros(num = '5123001')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '512300000001')",
        "removeTrailingZeros(num = \"512300\")",
        "removeTrailingZeros(num = \"0000512301\")",
        "removeTrailingZeros(num = '5123000000000000000010000')"
    ],
    "sample_101": [
        "maximumJumps(nums = [2, 5, 1, 3, 4, 7], target = 3)",
        "maximumJumps(nums = [-3, -2, -1, 1, 2, 3], target = 2)",
        "maximumJumps(nums = [1,1,1,1,1,1], target = 0)",
        "maximumJumps(nums = [0, 0, 1000], target = 1)",
        "maximumJumps(nums = [100, -100, 200, -100, 300], target = 3)",
        "maximumJumps(nums = [1, 4, 3, 3], target = 3)",
        "maximumJumps(nums = [-3, 2, -1, 3, -3], target = 4)",
        "maximumJumps(nums = [5, 2, 1, 3, 4, 0, 3, 3], target = 3)",
        "maximumJumps(nums = [100, -23, -23, 40, 40, -4, -4, -126, 127, 78, 78, 127], target = 100)",
        "maximumJumps(nums = [1, 4, 3, 6, 1, 2, 0, 7, 8, 1, 1, 3], target = 4)"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 1, 1])",
        "doesValidArrayExist(derived = [1,1,1])",
        "doesValidArrayExist(derived = [0, 0, 1, 1, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 0, 1])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 0, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 2, 3, 2, 2, 2, 2, 2, 2, 2])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0,"
    ],
    "sample_19": [
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = 'ABCDCD')",
        "minLength(s = \"ACDB\")",
        "minLength(s = 'ABCDABCDCD')",
        "minLength(s = \"ABABA\")",
        "minLength(s = \"ABABABABCDCDCDCDCDCD\")",
        "minLength(s = 'ABCDCDABABCDCD')",
        "minLength(s = \"ABCDEABC\")",
        "minLength(s = 'ABAACADAABBA')",
        "minLength(s = 'CABAAAC')"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'neven')",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = 'leven')",
        "makeSmallestPalindrome(s = 'deven')",
        "makeSmallestPalindrome(s = \"brown\")"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [1,3,2])",
        "semiOrderedPermutation(nums = [1,3,2])",
        "semiOrderedPermutation(nums = [1,2,3,4,5,6])",
        "semiOrderedPermutation(nums = [3, 1, 4, 2])",
        "semiOrderedPermutation(nums = [1,2,3,4])",
        "semiOrderedPermutation(nums = [3,1,4,2])",
        "semiOrderedPermutation(nums = [3, 1, 4, 5, 2])",
        "semiOrderedPermutation(nums = [2,1,3,1,2,1,1,1,1,3,1])"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1,1,1,3,3,2,2,2])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,3,3,2,2,2])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [3,1,1,3,5])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1])"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "maximumBeauty(nums = [1, 5, 3, 4, 2], k = 2)",
        "maximumBeauty(nums = [3,1,2,4], k = 2)",
        "maximumBeauty(nums = [2, 5, 3, 7], k = 2)",
        "maximumBeauty(nums = [4, 5, 8], k = 5)",
        "maximumBeauty(nums = [10, 20, 5, 15, 12, 25, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 2, 2, 2, 2, 2, 3, 4, 4, 4, 4, 5], k = 1)",
        "maximumBeauty(nums = [2, 6, 4, 8, 10, 7, 13, 5, 11, 9], k = 3)"
    ],
    "sample_117": [
        "minimumIndex(nums = [1, 1, 1, 2, 2, 3])",
        "minimumIndex(nums = [1, 2, 2, 3])",
        "minimumIndex(nums = [1, 2, 1, 2, 1, 2])",
        "minimumIndex(nums = [1, 1, 1, 1, 2, 2, 2, 2])",
        "minimumIndex(nums = [0, 1, 0, 1, 0])",
        "minimumIndex(nums = [1, 2, 2, 1, 2, 4])",
        "minimumIndex(nums = [1, 4, 4, 1, 2, 2])",
        "minimumIndex(nums = [1,1,2,1,1,3,1,1])",
        "minimumIndex(nums = [2, 5, 1, 3, 2, 1, 5, 2])",
        "minimumIndex(nums = [5, 2, 3, 1, 1, 5, 2, 3, 1])"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 4, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 1)",
        "makeTheIntegerZero(num1 = 7, num2 = 5)",
        "makeTheIntegerZero(num1 = 5, num2 = 4)",
        "makeTheIntegerZero(num1 = 11, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 7)",
        "makeTheIntegerZero(num1 = 2, num2 = 4)",
        "makeTheIntegerZero(num1 = 12, num2 = 6)",
        "makeTheIntegerZero(num1 = 11, num2 = 9)"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [12, 13, 14, 15, 16])",
        "countBeautifulPairs(nums = [1, 2, 3])",
        "countBeautifulPairs(nums = [12, 5, 7, 21])",
        "countBeautifulPairs(nums = [4, 2, 5, 3, 1])",
        "countBeautifulPairs(nums = [12, 56, 28])",
        "countBeautifulPairs(nums = [10, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countBeautifulPairs(nums = [16, 20, 15, 30, 40])",
        "countBeautifulPairs(nums = [35, 13, 4, 17, 21])",
        "countBeautifulPairs(nums = [11, 14, 42, 20, 2])",
        "countBeautifulPairs(nums = [57, 12, 24, 76, 91, 7, 47])"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 15, num2 = 1)",
        "makeTheIntegerZero(num1 = 28, num2 = 4)",
        "makeTheIntegerZero(num1 = 17, num2 = 11)",
        "makeTheIntegerZero(num1 = 2, num2 = 7)",
        "makeTheIntegerZero(num1 = 20, num2 = 16)",
        "makeTheIntegerZero(num1 = 34, num2 = 6)",
        "makeTheIntegerZero(num1 = 99, num2 = 10)",
        "makeTheIntegerZero(num1 = 133, num2 = 9)",
        "makeTheIntegerZero(num1=1024, num2=65)"
    ],
    "sample_20": [
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABACD\")",
        "minLength(s = \"ABBACD\")",
        "minLength(s = \"ABACADABRA\")",
        "minLength(s = \"ABABDCDCBA\")",
        "minLength(s = \"ACDAB\")",
        "minLength(s = \"ABACDACD\")",
        "minLength(s = \"AABAAABCDAA\")",
        "minLength(s = \"AADCBACBDD\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "maximumBeauty(nums = [1,2,3,4,5,6], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 7, 8, 10], k = 3)",
        "maximumBeauty(nums = [1,2,3,4,5,7], k = 1)",
        "maximumBeauty(nums = [0, 1, 2, 5, 6, 7, 8, 9], k = 2)",
        "maximumBeauty(nums = [0, 3, 5, 6, 8, 10], k = 3)",
        "maximumBeauty(nums = [1, 3, 10, 5, 7, 2], k = 4)",
        "maximumBeauty(nums = [0, 10, 15, 12, 14], k = 2)"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [4, 8, 15, 16])",
        "countBeautifulPairs(nums=[1, 2, 3, 4, 5, 6])",
        "countBeautifulPairs(nums = [6, 2, 3, 5])",
        "countBeautifulPairs(nums = [7, 6, 4, 2])",
        "countBeautifulPairs(nums = [5, 10, 15, 1, 2, 3])",
        "countBeautifulPairs(nums = [2,10,3,5,7,11,13])",
        "countBeautifulPairs(nums = [3,10,15,12,6])",
        "countBeautifulPairs(nums = [5, 17, 2, 1, 6, 43])",
        "countBeautifulPairs(nums=[25, 8, 36, 12, 77, 31, 44, 55, 20])",
        "countBeautifulPairs(nums = [13, 11, 2, 33, 22, 45])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 4, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 4)",
        "makeTheIntegerZero(num1 = 8, num2 = 5)",
        "makeTheIntegerZero(num1 = 8, num2 = 5)",
        "makeTheIntegerZero(num1 = 15, num2 = 12)",
        "makeTheIntegerZero(num1 = 20, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 11)",
        "makeTheIntegerZero(num1 = 21, num2 = 9)",
        "makeTheIntegerZero(num1 = 1001, num2 = 3)",
        "makeTheIntegerZero(num1 = 126, num2 = 25)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'neven')",
        "makeSmallestPalindrome(s = 'neven')",
        "makeSmallestPalindrome(s = 'neven')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'neve')",
        "makeSmallestPalindrome(s = 'five')"
    ],
    "sample_37": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"abcda\")",
        "minimumCost(s = \"ABCDE\")",
        "minimumCost(s = \"ABBABAB\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1,1,1,3,3,2,2,2])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,3,3,2,2,2])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,3,5])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [2, 1, 2, 1, 2, 1, 2, 1])",
        "numberOfGoodSubarraySplits(nums = [3,1,1,1,3,3,2,2,2,2])",
        "numberOfGoodSubarraySplits(nums=[1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [3, 1, 1, 3, 2, 1, 2, 1, 2, 1])",
        "numberOfGoodSubarraySplits(nums = [5,5,4,4,4,3,3,2])"
    ],
    "sample_105": [
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 4)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 4)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "checkArray(nums = [1, 1, 2, 1, 1], k = 3)",
        "checkArray(nums = [10, 11, 12], k = 3)",
        "checkArray(nums = [1, 4, 5, 8], k = 2)",
        "checkArray(nums = [2, 1, 5, 1, 2, 2, 2, 3], k = 3)",
        "checkArray(nums = [0, 0, 0, 0, 0, 1, 1, 0], k = 2)",
        "checkArray(nums = [12, 9, 8, 3, 2, 1, 4, 6, 8], k = 3)",
        "checkArray(nums = [1, 1, 1], k = 2)"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4])",
        "semiOrderedPermutation(nums = [1, 4, 3, 2])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation(nums = [2, 1, 5, 4, 3])",
        "semiOrderedPermutation(nums = [4, 5, 1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 10, 11])"
    ],
    "sample_108": [
        "checkArray(nums = [4, 2, 3], k = 1)",
        "checkArray(nums = [1, -1, 1, -1], k = 2)",
        "checkArray(nums = [5, 1, 5, 2, 5, 3, 4, 4], k = 3)",
        "checkArray(nums = [1, -2, 3, 1], k = 2)",
        "checkArray(nums = [10, 10], k = 1)",
        "checkArray(nums = [0, 1, 2, 3, 1], k = 2)",
        "checkArray(nums = [3, 1, 0, 4, 0], k = 2)",
        "checkArray(nums = [-11, -10, 1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "checkArray(nums = [3, 5, 8, 4, 3, 1, 1], k = 3)",
        "checkArray(nums = [4, 2, 1], k = 2)"
    ],
    "sample_39": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abaabaa\")",
        "minimumCost(s = \"aa\")"
    ],
    "sample_65": [
        "findValueOfPartition(a = [1, 3, 2])",
        "findValueOfPartition(a = [1, 3, 2])",
        "findValueOfPartition(a = [1, 2, 6])",
        "findValueOfPartition(a = [2, 1, 5, 3, 7])",
        "findValueOfPartition(a = [1, 3, 5, 4])",
        "findValueOfPartition(a = [1, 2, 3, 10, 11, 12])",
        "findValueOfPartition(a = [1, 3, 7, 9, 15])",
        "findValueOfPartition(a = [3, 1, 10, 1, 1])",
        "findValueOfPartition(a = [1, 4, 12])",
        "findValueOfPartition(a = [1, 10, 12, 15, 4, 5, 7, 13, 11, 8])"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 10)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 4, additionalTank = 2)",
        "distanceTraveled(mainTank = 4, additionalTank = 0)",
        "distanceTraveled(mainTank = 9, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 3)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 2, 4, 8, 16])",
        "doesValidArrayExist(derived = [1, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1,1,0,1])",
        "doesValidArrayExist(derived = [1, 2, 5, 3])",
        "doesValidArrayExist(derived = [4, 2, 1, 4, 2, 1])",
        "doesValidArrayExist(derived = [1, 3, 2, 2, 6, 1, 4, 4, 5, 3])"
    ],
    "sample_106": [
        "checkArray(nums = [5, 1, 3, 4, 7], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "checkArray(nums = [10, 12, 20], k = 2)",
        "checkArray(nums = [3, 2, 1, 1, 1], k = 2)",
        "checkArray(nums = [3, 2, 1, 4, 3], k = 1)",
        "checkArray(nums = [2,1,5,7], k = 3)",
        "checkArray(nums = [0, 1, 2, 3, 4, 5, 6], k = 1)",
        "checkArray(nums = [3, 5, 3, 4, 3, 5], k = 2)",
        "checkArray(nums = [1, 4, 4, 1, 3, 2], k = 2)",
        "checkArray(nums = [23, 45, 8, 15], k = 3)"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [5, 1, 3, 4, 2], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 4, 8, 6], threshold = 3)",
        "longestAlternatingSubarray(nums = [12, 17, 15, 13, 19], threshold = 3)",
        "longestAlternatingSubarray(nums = [2, 1, 4, 7, 10, 11], threshold = 5)",
        "longestAlternatingSubarray(nums = [1,1,2,2,3,3,4,4,5,5,6,6], threshold = 4)",
        "longestAlternatingSubarray(nums = [4, 2, 5, 3, 6, 1], threshold = 5)",
        "longestAlternatingSubarray(nums = [1,1,2,2,2,3,3,3,3], threshold = 3)",
        "longestAlternatingSubarray(nums = [4,6,5,5], threshold = 4)",
        "longestAlternatingSubarray(nums = [4, 6, 1, 5, 20, 3], threshold = 3)",
        "longestAlternatingSubarray(nums = [5, 4, 1, 2, 7, 5, 10, 3], threshold = 4)"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [1, 2, 1, 1])",
        "countBeautifulPairs(nums = [3, 2, 1, 4])",
        "countBeautifulPairs(nums = [10, 2, 3, 4, 5, 6])",
        "countBeautifulPairs(nums = [5, 2, 3, 7])",
        "countBeautifulPairs(nums = [2, 5, 7])",
        "countBeautifulPairs(nums = [1, 3, 2, 1])",
        "countBeautifulPairs(nums = [3, 2, 7, 6, 4])",
        "countBeautifulPairs(nums = [12, 5, 15, 1, 11, 10])",
        "countBeautifulPairs(nums = [2, 20, 70, 90])",
        "countBeautifulPairs(nums = [15, 8, 45, 6, 22])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [4, 2, 4, 5, 2, 1], t = 4)",
        "longestAlternatingSubarray(nums = [5, 1, 3, 4, 2], t = 4)",
        "longestAlternatingSubarray(nums = [1,3,2,6,7,5,4], t = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7], t = 3)",
        "longestAlternatingSubarray(nums = [10, 11, 12, 12, 11], t = 10)",
        "longestAlternatingSubarray(nums = [1, 3, 2, 3, 2, 4, 5, 4], t = 3)",
        "longestAlternatingSubarray(nums = [2,4,3,5,1,6], t = 4)",
        "longestAlternatingSubarray(nums = [2, 3, 5, 7], t = 1000000000)",
        "longestAlternatingSubarray(nums = [2, 1, 4, 3, 2, 1, 4, 3, 2, 1, 4, 3, 2, 1, 4, 3], t = 3)",
        "longestAlternatingSubarray(nums=[1,2,3,3,5,5,5,2], t=100)"
    ],
    "sample_36": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaab\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"baaca\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABACADABRA\")",
        "minLength(s = \"ABCDABCDABCDABCDABCD\")",
        "minLength(s = \"ABABABABCDCDCDCD\")",
        "minLength(s = \"AABACD\")",
        "minLength(s = \"ABCDCDABCD\")",
        "minLength(s = \"ABAAA\")",
        "minLength(s = \"AABBACCDDD\")",
        "minLength(s = \"AABAAAABBBBCDDDD\")"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 0, 1, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1,0,1,1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1,0,0,1,0,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_9": [
        "colorTheArray(n = 3, queries = [[1, 0], [2, 1], [3, 0]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5]])",
        "colorTheArray(n = 3, queries = [[0, 1], [0, 2], [2, 1]])",
        "colorTheArray(n = 5, queries = [[1, 0], [2, 1], [3, 2], [4, 0], [4, 3]])",
        "colorTheArray(n = 5, queries = [[1, 1], [4, 2], [2, 2], [3, 1]])",
        "colorTheArray(n = 4, queries = [[3, 2], [0, 2], [1, 1], [1, 0], [3, 1]])",
        "colorTheArray(n = 4, queries = [[0, 0], [0, 1], [1, 0], [1, 1], [2, 1], [3, 0]])",
        "colorTheArray(n = 5, queries = [[1, 3], [3, 2], [0, 5], [1, 1], [2, 4], [4, 1]])",
        "colorTheArray(n = 6, queries = [[1, 1], [1, 1], [2, 1], [2, 2], [2, 4], [4, 1], [4, 2], [4, 4]])",
        "colorTheArray(n = 4, queries = [[2, 1], [0, 3], [1, 0], [1, 1], [1, 2], [0, 0], [2, 2], [3, 1], [2, 3], [3, 3]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [1, 2, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4], nums2 = [3, 4, 5, 6])",
        "maxNonDecreasingLength(nums1 = [0, 1, 0, 1, 1], nums2 = [1, 0, 0, 1, 0])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [2, 3, 5])",
        "maxNonDecreasingLength(nums1 = [3, 5, 6, 7], nums2 = [2, 4, 5])",
        "maxNonDecreasingLength(nums1 = [3, 5, 2, 7], nums2 = [4, 6, 1, 4])",
        "maxNonDecreasingLength(nums1 = [100, 1, 1, 600], nums2 = [1, 101, 1])",
        "maxNonDecreasingLength(nums1 = [5, 8, 11, 16, 19], nums2 = [6, 9, 14, 18, 21])",
        "maxNonDecreasingLength(nums1 = [3, 7, 9, 6, 10, 4],\n                              nums2 = [4, 5, 8, 1, 0, 12])",
        "maxNonDecreasingLength(nums1 = [5, 7, 4, 10, 9, 7, 3, 4, 6], nums2 = [7, 1, 1, 1, 2, 1, 1, 2, 2])"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5,6], k = 3)",
        "maximumBeauty(nums = [3, 2, 1, 5, 6, 4], k = 2)",
        "maximumBeauty(nums = [4, 5, 1, 3], k = 2)",
        "maximumBeauty(nums = [2, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 2, 4, 3, 5, 2], k = 1)",
        "maximumBeauty(nums = [100, 200, 50, 4, 5, 2, 250], k = 2)",
        "maximumBeauty(nums = [10, 20, 30, 20, 25, 10], k = 20)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1,2,4])",
        "findValueOfPartition(nums = [1,2,3,5])",
        "findValueOfPartition(nums = [3, 5, 8])",
        "findValueOfPartition(nums = [1, 16, 8, 10, 14])",
        "findValueOfPartition(nums = [1,5,7,10])",
        "findValueOfPartition(nums = [4, 6, 8, 9, 10])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 1, 2, 3, 4])",
        "findValueOfPartition(nums = [3,2,2,1,1,1,1])",
        "findValueOfPartition(nums = [1, 4, 8, 10, 12, 13, 17, 20])"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1, 3, 2])",
        "findValueOfPartition(nums = [1,3,2,5])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1,5,10])",
        "findValueOfPartition(nums = [2,5,3,7])",
        "findValueOfPartition(nums = [7,1,5,4,6,3,2])",
        "findValueOfPartition(nums = [1,4,8,10,11])",
        "findValueOfPartition(nums = [10, 11, 12, 14, 15, 16])",
        "findValueOfPartition(nums = [0, 4, 2, 5, 3])",
        "findValueOfPartition(nums = [10, 12, 15, 17, 19, 23])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [4, 1, 3, 2])",
        "semiOrderedPermutation(nums = [0, 1, 2, 3, 4, 5, 6])",
        "semiOrderedPermutation(nums = [1, 4, 3])",
        "semiOrderedPermutation(nums = [5, 4, 1, 3, 2])",
        "semiOrderedPermutation(nums = [4, 3, 1, 2, 5])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4, 6, 5])",
        "semiOrderedPermutation(nums = [0, 0, 0, 1, 2])"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [1,2,3,4])",
        "semiOrderedPermutation(nums = [2, 1, 1])",
        "semiOrderedPermutation(nums = [1, 2, 3, 2, 1])",
        "semiOrderedPermutation(nums = [2, 1, 0])",
        "semiOrderedPermutation(nums = [4, 3, 1, 2])",
        "semiOrderedPermutation(nums = [1, 0, 1])",
        "semiOrderedPermutation(nums = [1,3,2,5])",
        "semiOrderedPermutation(nums = [1,3,4,1,2,1])"
    ],
    "sample_167": [
        "isAcronym(words = [\"HTML\", \"CSS\", \"JS\"], s = \"JS\")",
        "isAcronym(words = [\"USA\", \"United\", \"States\"], s = \"U.S.A.\")",
        "isAcronym(words = [\"Cool\", \"Guy\"], s = \"COOLGUY\")",
        "isAcronym(words = [\"Foo\", \"bar\", \"baz\"], s = \"fBb\")",
        "isAcronym(words = [\"USA\", \"Taiwan\", \"Russia\"], s = \"USA\")",
        "isAcronym(words=[\"USA\", \"SOC\"], s=\"SOUSA\")",
        "isAcronym(words = [\"Sales\", \"Management\", \"Organization\"], s = \"SMO\")",
        "isAcronym(words=[\"asd\", \"qwe\"], s=\"aq\")",
        "isAcronym(words = [\"POLICE\", \"FBI\"], s = \"POLICAFBI\")",
        "isAcronym(words = [\"Thomas\", \"Abraham\", \"Ferdinand\"], s = \"AFT\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 3, 3, 2, 2, 2, 1], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 2, 1, 2, 2, 1, 2, 2, 1], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,1,2,1,3,4,2,2], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 4, 5, 6, 1, 2, 3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 4, 5, 6, 3], m = 3, k = 2)",
        "countInterestingSubarrays(nums=[2, 6, 4, 6, 2], m=3, k=1)",
        "countInterestingSubarrays(nums=[1,2,4,2,4,2,2,4], m=2, k=2)",
        "countInterestingSubarrays(nums = [2,12,3,4,8,6,10], m = 3, k = 4)",
        "countInterestingSubarrays(nums=[4, 3, 6, 7, 4, 1, 9], m=5, k=3)",
        "countInterestingSubarrays(nums = [3, 5, 4, 2, 4, 1, 0, 2, 2, 5, 0], m = 3, k = 2)"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1, 4], [4, 5]])",
        "numberOfPoints(nums = [[1, 2], [1, 3], [1, 4]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[0, 1], [1, 2], [2, 3]])",
        "numberOfPoints(nums = [[1, 2], [1, 3], [4, 5]])",
        "numberOfPoints(nums = [[0,2],[3,100]])",
        "numberOfPoints(nums = [[0, 5], [6, 8]])",
        "numberOfPoints(nums = [[0,3], [2,4], [5,9]])",
        "numberOfPoints(nums = [[3, 3], [1, 1], [0, 4]])",
        "numberOfPoints(nums = [[5, 10], [3, 4], [2, 5], [1, 6], [8, 12]])"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = ['easy', 'problem'], separator = 'a')",
        "splitWordsBySeparator(words = ['easy problem'], separator = ' ')",
        "splitWordsBySeparator(words = ['easyproblem'], separator = 'problem')",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"easyas\", \"123\", \"456\", \"problem\"], separator = \"123\")",
        "splitWordsBySeparator(words = [\"hello_world\", \"now_is\", \"the_time\"], separator = \"_\")",
        "splitWordsBySeparator(words = ['a,b,c', 'd-e-f', 'g--h', 'i---j'], separator = '-')",
        "splitWordsBySeparator(words = [\"hello--world\", \"2-3\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\", \"code-wars\", \"simple-problems\"], separator = \"-\")"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 3], [1, 4], [2, 5], [3, 6]])",
        "numberOfPoints(nums = [[1, 4], [2, 5], [7, 9]])",
        "numberOfPoints(nums = [[1, 4], [2, 3]])",
        "numberOfPoints(nums = [[0,1],[1,2]])",
        "numberOfPoints(nums = [[3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1, 2], [4, 7]])",
        "numberOfPoints(nums = [[0, 1], [1, 1], [2, 2], [3, 4], [4, 5]])",
        "numberOfPoints(nums = [[1,4],[1,1]])",
        "numberOfPoints(nums = [[-5, 0], [2, 5], [3, 6]])",
        "numberOfPoints(nums = [[1, 5], [1, 5], [5, 8], [5, 8], [10, 13]])"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 4, 4])",
        "countCompleteSubarrays(nums = [1, 2, 2, 2])",
        "countCompleteSubarrays(nums = [2, 2, 2, 2, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 3, 4])",
        "countCompleteSubarrays(nums = [3, 1, 1, 2, 3])",
        "countCompleteSubarrays(nums = [3, 2, 1, 1, 3, 2, 3])",
        "countCompleteSubarrays(nums = [3, 5, 3, 2, 5, 3, 2, 4])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = '-')",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one', 'two', 'threefour', 'five', 'six'], separator = 'four')",
        "splitWordsBySeparator(words = ['one/two/three/four', 'five', 'six'], separator = '/')"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [6, 5, 4, 3, 2, 1])",
        "maxIncreasingGroups(u = [1, 5, 3, 6, 2])",
        "maxIncreasingGroups(u = [6, 2, 5, 3, 7, 10, 8])",
        "maxIncreasingGroups(u = [2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(u = [2, 5, 7, 1])",
        "maxIncreasingGroups(u = [4, 8, 1, 3, 6, 7])",
        "maxIncreasingGroups(u = [1, 1, 2, 2, 1, 1, 1, 1])",
        "maxIncreasingGroups(u = [1, 1, 1, 1, 3, 5, 7, 12])",
        "maxIncreasingGroups(u = [2, 10, 4, 5, 11, 10, 1])",
        "maxIncreasingGroups(u = [4, 4, 4, 4, 1, 2, 1, 3, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [10, 15, 3, 7], x = 2)",
        "minAbsoluteDifference(nums = [4, 2, 1, 3], x = 2)",
        "minAbsoluteDifference(nums = [5,10,15,20,25], x = 3)",
        "minAbsoluteDifference(nums = [4, 6, 10], x = 3)",
        "minAbsoluteDifference(nums = [0, 2, 5, 9], x = 2)",
        "minAbsoluteDifference(nums = [10,12,13,15], x = 3)",
        "minAbsoluteDifference(nums = [4, 4, 6, 6], x = 1)",
        "minAbsoluteDifference(nums=[1,2,5,10,11], x=4)",
        "minAbsoluteDifference(nums=[1,2,3,7,10,15],x=5)",
        "minAbsoluteDifference(nums = [5,10,12,21,22,23,30], x = 3)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [3, 1, 4, 1, 5, 9], modulo = 7, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 1, 2], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 3], modulo = 4, k = 3)",
        "countInterestingSubarrays(nums = [3, 1, 4, 1, 5, 9], modulo = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 1, 2, 2, 3, 3], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1, 1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 2, 3, 1, 4], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [0, 1, 2, 3, 2, 1], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [0, 1, 0, 2, 0, 3, 0], modulo = 4, k = 3)",
        "countInterestingSubarrays(nums = [4, 4, 2, 4, 1], modulo = 5, k = 3)"
    ],
    "sample_152": [
        "canSplitArray(nums = [3, 5, 8], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [5, 1, 3, 4, 7], m = 6)",
        "canSplitArray(nums = [1, 1, 2, 2, 5, 5], m = 4)",
        "canSplitArray(nums = [1000000000, 1000000000], m = 2)",
        "canSplitArray(nums = [3, 1], m = 4)",
        "canSplitArray(nums = [1, 3, 3, 2, 3], m = 6)",
        "canSplitArray(nums = [2, 2, 1, 1, 1, 1], m = 5)",
        "canSplitArray(nums = [10, 5, 1, 2, 3], m = 5)",
        "canSplitArray(nums = [5, 3, 8, 10, 6, 4], m = 12)"
    ],
    "sample_169": [
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"The\", \"International\", \"Olympic\", \"Committee\"], s = \"IOC\")",
        "isAcronym(words = [\"international\", \"geographical\", \"organization\"], s = \"ISO\")",
        "isAcronym(words = [\"For\", \"the\", \"greater\", \"good\"], s = \"FTG\")",
        "isAcronym(words = [\"FBI\", \"FDA\"], s = \"FDFA\")",
        "isAcronym(words = [\"Haskell\", \"Python\"], s = \"HSP\")",
        "isAcronym(words = [\"NY\", \"NJ\", \"CA\", \"LA\"], s = \"NLCA\")",
        "isAcronym(words = [\"NBA\", \"PBI\"], s = \"NBAPI\")",
        "isAcronym(words = [\"USA\", \"GB\", \"Apple\"], s = \"USAGBApple\")",
        "isAcronym(words = [\"Needle\",\"Hay\",\"Poker\",\"Trees\"], s = \"NHTP\")"
    ],
    "sample_121": [
        "minimumIndex(nums = [1, 1, 1, 1, 1, 1])",
        "minimumIndex(nums = [1,1,2,2,2,3,4])",
        "minimumIndex(nums = [0, 0, 1, 0, 0])",
        "minimumIndex(nums = [1,3,2,3])",
        "minimumIndex(nums = [1,3,2,1])",
        "minimumIndex(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",
        "minimumIndex(nums = [3, 2, 1, 2, 2])",
        "minimumIndex(nums = [1, 1, 2, 3, 5, 6, 7])",
        "minimumIndex(nums = [1, 2, 3, 1, 3, 2, 3, 3, 3])",
        "minimumIndex(nums=[1,2,1,3,2,1,4,3,2,1,5])"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 4, offers = [[1, 2, 1], [2, 3, 2], [3, 4, 3], [4, 5, 4]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 3, 5], [3, 4, 8], [4, 5, 7]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 10], [2, 3, 5], [3, 4, 8], [4, 5, 7]])",
        "maximizeTheProfit(n = 7, offers = [[1, 2, 1], [2, 3, 2], [3, 4, 3], [4, 5, 4], [5, 6, 5], [6, 7, 6], [7, 8, 7]])",
        "maximizeTheProfit(n = 6, offers = [[2, 1, 4], [5, 2, 3], [6, 1, 2]])",
        "maximizeTheProfit(n = 4, offers = [[2, 1, 5], [3, 2, 4], [4, 4, 3]])",
        "maximizeTheProfit(n = 5, offers = [[1, 5, 3], [2, 4, 4], [2, 5, 4]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 100], [2, 3, 200], [3, 4, 300], [1, 3, 500], [2, 4, 400]])",
        "maximizeTheProfit(n = 10, offers = [[2, 4, 6], [3, 4, 5], [6, 7, 4]])",
        "maximizeTheProfit(n = 100000, offers = [[10, 20, 100000], [500, 100, 3], [1000, 10, 4]])"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [-2, 0, 1, 3])",
        "maximumTripletValue(nums = [5, 2, 4, 1])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 3])",
        "maximumTripletValue(nums = [1, 2, 1, 3, 5, 10])",
        "maximumTripletValue(nums = [3, 0, 1, 10, -4, 7, 3])",
        "maximumTripletValue(nums = [2, 4, 1, 4, 5])",
        "maximumTripletValue(nums = [1, 2, -1, -4, -20])",
        "maximumTripletValue(nums = [1, 3, -5, -2, 4, 0])",
        "maximumTripletValue(nums = [1, 2, 1, -1, 1, 2, -1, -1, 1])",
        "maximumTripletValue(nums = [2, 5, 2, 5, 7, 3])"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LRL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLLRR\")",
        "furthestDistanceFromOrigin(moves = \"RLRRLLL\")",
        "furthestDistanceFromOrigin(moves = \"RRRRRRRR\")",
        "furthestDistanceFromOrigin(moves = \"RRLLLRRRLL\")",
        "furthestDistanceFromOrigin(moves = \"LDRRLRL\")",
        "furthestDistanceFromOrigin(moves = \"RRLLL_RRRRR_\")",
        "furthestDistanceFromOrigin(moves = 'UDDRR_U')"
    ],
    "sample_149": [
        "finalString(s = \"rtsng\")",
        "finalString(s = 'rtsng')",
        "finalString(s = \"abci\")",
        "finalString(s = \"banana\")",
        "finalString(s = \"rt\")",
        "finalString(s = \"cinema\")",
        "finalString(s = \"23\")",
        "finalString(s = \"hello world\")",
        "finalString(s = \"intrudru\")",
        "finalString(s = \"thequickbrownfoxjumpedoverthelazydog\")"
    ],
    "sample_162": [
        "maxSum(nums = [121, 234, 123, 456, 789])",
        "maxSum(nums = [135, 1, 2, 3, 4, 5])",
        "maxSum(nums = [345, 346, 347, 348, 349, 342, 343, 344, 341])",
        "maxSum(nums = [16, 34, 29, 51, 41, 66, 1, 100000])",
        "maxSum(nums = [-1, -100, 70, 21])",
        "maxSum(nums = [25, 42, 17, 6, 8, 14, 3, 1, 9])",
        "maxSum(nums = [5, 21, 6, 3, 12, 23, 7, 28, 9, 55])",
        "maxSum(nums = [966, 4234, 349, 816, 670, 2621])",
        "maxSum(nums = [12, 56, 32, 87, 12, 35, 26, 10, 5, 89, 12, 32, 57, 9])",
        "maxSum(nums = [-121, -107, -103, -102, -100, -94, -93, -92, -90, -88, -87, -84, -83, -82, -80, -78, -77, -76, -74, -73, -72, -71, -69, -67, -66, -64, -63, -62, -60, -59, -57, -56, -54, -53, -52, -51, -50, -49, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -29, -28, -27, -26, -25, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,"
    ],
    "sample_230": [
        "countWays(nums = [1, 1, 1])",
        "countWays(nums = [5, 4, 3, 2, 1])",
        "countWays(nums = [3, 1, 2, 2])",
        "countWays(nums = [1, 5, 3, 4])",
        "countWays(nums = [10, 5, 4])",
        "countWays(nums = [1, 2, 2, 1, 2])",
        "countWays(nums=[50, 20, 10])",
        "countWays(nums = [5, 4, 5, 3, 1])",
        "countWays(nums = [4, 2, 1, 6, 2])",
        "countWays(nums = [7, 10, 2, 15, 13])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n=1, target=1)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 5, target = 15)",
        "minimumPossibleSum(n = 2, target = 10)",
        "minimumPossibleSum(n = 5, target = 3)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 5, offers = [[2, 1, 4], [1, 2, 1], [2, 3, 2]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 1], [2, 4, 2], [3, 4, 1]])",
        "maximizeTheProfit(N = 4, offers = [[1, 2, 1], [2, 3, 2], [2, 4, 2], [4, 5, 4]])",
        "maximizeTheProfit(N=2, offers=[(1, 2, 1), (2, 3, 4)])",
        "maximizeTheProfit(N = 5, offers = [[1, 4, 2], [2, 5, 2], [4, 6, 3]])",
        "maximizeTheProfit(N=3, offers=[[1, 1, 1], [2, 1, 3], [3, 1, 4]])",
        "maximizeTheProfit(N = 6, offers = [[1, 2, 1], [1, 3, 2], [2, 4, 2], [3, 4, 3]])",
        "maximizeTheProfit(N = 5, offers = [[2, 1, 1], [4, 3, 4], [6, 4, 3]])",
        "maximizeTheProfit(N = 5, offers = [[1, 4, 3], [2, 3, 2], [3, 4, 1], [3, 5, 2], [4, 5, 1]])",
        "maximizeTheProfit(N = 3, offers = [[1, 3, 400], [2, 1, 200], [2, 3, 500], [3, 4, 800], [4, 5, 700]])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 6, offers = [[1, 2, 1], [2, 3, 2], [3, 4, 3], [4, 5, 4], [5, 6, 5]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 10], [2, 3, 20], [3, 4, 15], [4, 5, 40], [5, 6, 35]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 10], [2, 3, 20], [3, 4, 30], [4, 5, 40], [5, 6, 50]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 100], [2, 5, 20], [3, 4, 75], [4, 5, 150]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 1], [2, 3, 2], [3, 4, 3]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 10], [2, 3, 15], [3, 4, 20]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 4, 8]])",
        "maximizeTheProfit(n = 4, offers = [[1, 3, 100], [2, 4, 200], [2, 3, 200]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 10], [2, 3, 20], [3, 4, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [2, 3, 10], [2, 4, 4], [3, 4, 5]])"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [9, 7, 6, 7, 6, 8], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 6, 10, 3, 8], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 3, 2, 1], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 8], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 6, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 14, 15], target = 13)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4, 12], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 8, 5, 7, 8], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 9, 3, 8, 5], target = 7)"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "countCompleteSubarrays(nums = [2,1,2,1,2,1,2,1])",
        "countCompleteSubarrays(nums = [1,1,2,3,3,4])",
        "countCompleteSubarrays(nums = [1, 1, 2, 3, 3, 2, 1])",
        "countCompleteSubarrays(nums = [3, 3, 3, 3, 3, 3, 3, 3, 3])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,3,2,1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 3, 1, 1, 1, 3, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,6,5,5,4,3,2,1])",
        "countCompleteSubarrays(nums = [1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2])",
        "countCompleteSubarrays(nums = [0, 1, 2, 3, 3, 4, 5, 5, 4, 3, 2, 1, 0])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1,2,3])",
        "countWays(nums = [2, 3, 2])",
        "countWays(nums = [4, 1, 3])",
        "countWays(nums = [3, 1, 1, 1, 1])",
        "countWays(nums = [2, 2, 2, 4])",
        "countWays(nums = [1, 1, 2, 2, 4, 4, 4])"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(usageLimits = [3, 1, 4, 1, 5])",
        "maxIncreasingGroups(usageLimits = [3, 2, 1])",
        "maxIncreasingGroups(usageLimits = [3, 1, 2, 1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [3, 1, 3, 3, 2])",
        "maxIncreasingGroups(usageLimits = [0, 0, 0, 0, 0, 0, 0])",
        "maxIncreasingGroups(usageLimits = [2, 4, 5, 2, 1, 3])",
        "maxIncreasingGroups(usageLimits=[5, 1, 3, 3, 2])",
        "maxIncreasingGroups(usageLimits = [1, 5, 3, 5, 5, 6, 3, 1])",
        "maxIncreasingGroups(usageLimits = [3, 2, 3, 5, 4, 6, 3, 3, 2, 1, 4, 5, 1, 3, 1, 3, 6, 2, 2, 3, 5, 6, 4, 5, 4, 6, 4, 6, 5, 4, 5, 6, 5, 5, 4, 3, 5, 5, 6, 6, 5, 4, 3, 5, 5, 5, 5, 4, 3, 4, 6, 3, 5, 4, 6, 4, 5, 4, 6, 5, 5, 4, 5, 6, 6, 4, 4, 3, 5, 6, 6, 3, 3, 4, 5, 5, 5, 6, 4, 5, 4, 4, 5, 6, 5, 4, 3, 3, 4, 5, 4, 5, 6, 5, 6, 6, 3, 3, 5, 4, 3, 4, 3, 5, 6, 4, 6, 3, 5, 4, 4, 4, 3, 4, 6, 5, 5, 5, 3, 3, 4, 5, 5, 6, 6, 3, 4, 5, 5, 5, 5, 4, 3, 4, 5, 5, 4, 4, 6, 6, 5, 4, 5, 4, 5, 6, 4, 5, 4, 3, 4, 4, 4, 5, 5, 4, 5, 5, 4, 5, 6, 6, 4, 5, 6, 5, 5, 5, 5, 6, 5,"
    ],
    "sample_173": [
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 5, k = 4)",
        "minimumSum(n = 4, k = 10)",
        "minimumSum(n = 5, k = 9)",
        "minimumSum(n = 6, k = 5)",
        "minimumSum(n = 10, k = 5)",
        "minimumSum(n = 10, k = 20)"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 3], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 4, 1, 5, 4], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [2, 4, 3, 5, 2, 1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 1, 3, 3, 2, 2, 2], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [0, 1, 2, 2, 2, 0], m = 5, k = 1)",
        "countInterestingSubarrays(nums = [3, 1, 3, 1, 3, 2, 1], m = 4, k = 2)",
        "countInterestingSubarrays(nums = [3, 2, 3, 2, 3, 2, 3, 2, 3, 2], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [2, 4, 3, 6, 5, 8, 10, 1, 7, 9], m = 3, k = 1)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 1, 4, 2])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,1,2,2])",
        "countCompleteSubarrays(nums = [1,2,2,3,1,4,2])",
        "countCompleteSubarrays(nums = [3, 1, 4, 1, 5])",
        "countCompleteSubarrays(nums = [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 1, 2, 3, 1, 4, 5, 6, 7, 8])",
        "countCompleteSubarrays(nums = [2, 4, 4, 3, 3, 5, 5, 5])",
        "countCompleteSubarrays(nums = [9, 1, 1, 2, 4, 4, 4, 4, 9, 9])",
        "countCompleteSubarrays(nums = [1, 3, 3, 2, 4, 4, 1, 6, 6, 2, 5, 5])"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 1, 3], k = 2)",
        "longestEqualSubarray(nums = [4, 2, 4, 5, 2, 5, 2, 4], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3], k = 1)",
        "longestEqualSubarray(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], k = 1)",
        "longestEqualSubarray(nums = [1,2,2,3,3,3,3,4,4,4,4], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 1, 3, 4, 4, 4, 5, 1, 2, 1], k = 3)"
    ],
    "sample_170": [
        "isAcronym(words = [\"the\", \"quick\", \"brown\"], s = \"TQB\")",
        "isAcronym(words = [\"P\", \"Y\", \"T\", \"H\", \"O\", \"N\"], s = \"PythOn\")",
        "isAcronym(words = [\"HTML\", \"CSS\", \"JS\"], s = \"CSS\")",
        "isAcronym(words = [\"for\", \"the\", \"brown\"], s = \"forthebrown\")",
        "isAcronym(words = [\"Lo\", \"Go\", \"Hi\"], s = \"Gohi\")",
        "isAcronym(words = [\"IS\", \"FOR\", \"THE\", \"BETTER\"], s = \"ISFORTHEBETTER\")",
        "isAcronym(words = [\"international\", \"interest\", \"internationalization\"], s = \"i18n\")",
        "isAcronym(words = [\"FOR\", \"EVER\", \"YOU\"], s = \"FRY\")",
        "isAcronym(words = [\"FIFO\", \"LIFO\", \"TEST\"], s = \"FIFO\")",
        "isAcronym(words = [\"OCR\", \"SMP\", \"OTP\", \"OCR\"], s = \"OCSMPOTPOCR\")"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '1100')",
        "maximumOddBinaryNumber(s = '0011')",
        "maximumOddBinaryNumber(s = '0111')",
        "maximumOddBinaryNumber(s = '0010')",
        "maximumOddBinaryNumber(s = \"1001\")",
        "maximumOddBinaryNumber(s = \"10100\")",
        "maximumOddBinaryNumber(s = \"1011000\")",
        "maximumOddBinaryNumber(s = \"0011101\")",
        "maximumOddBinaryNumber(s = \"1100101101101011\")"
    ],
    "sample_226": [
        "countWays(nums = [1, 1, 2])",
        "countWays(nums = [1,2,3])",
        "countWays(nums = [1, 1, 1, 1])",
        "countWays(nums = [1, 1, 2, 2, 3, 3])",
        "countWays(nums = [1, 1, 1, 2, 2, 2])",
        "countWays(nums = [1, 2, 3, 4, 6])",
        "countWays(nums = [5, 5, 10, 10, 10, 15])",
        "countWays(nums = [10, 1, 2, 7, 5, 8, 2])",
        "countWays(nums = [1, 2, 3, 3, 3, 4, 6, 6, 7, 8, 9])",
        "countWays(nums = [1, 4, 7, 7, 8, 8])"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 6, offers = [[1, 2, 10], [2, 3, 20], [3, 4, 5]])",
        "maximizeTheProfit(n = 7, offers = [[1, 2, 10], [2, 4, 5], [3, 5, 15]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 5], [2, 3, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 3, 20], [1, 5, 5]])",
        "maximizeTheProfit(n = 7, offers = [[1, 2, 10], [2, 3, 20], [3, 4, 15]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 100], [2, 3, 200], [3, 4, 150], [4, 5, 300], [5, 6, 250]])",
        "maximizeTheProfit(n = 10, offers = [[1, 2, 5], [2, 3, 4], [5, 6, 9]])",
        "maximizeTheProfit(n = 8, offers = [[1, 2, 5], [2, 3, 10], [4, 5, 15], [6, 7, 20]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 10], [2, 3, 20], [3, 4, 15], [1, 1, 20], [5, 2, 50]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 3, 5], [4, 5, 1], [5, 6, 7], [3, 4, 6]])"
    ],
    "sample_122": [
        "minimumIndex(nums = [1, 2, 1])",
        "minimumIndex(nums = [1, 1, 2, 2])",
        "minimumIndex(nums = [1,1,1,1,3])",
        "minimumIndex(nums = [1, 1, 2, 2, 2, 2, 3, 3, 3, 3])",
        "minimumIndex(nums = [2, 2, 1, 1, 3])",
        "minimumIndex(nums = [2,2,1,2,3])",
        "minimumIndex(nums = [3,3,3,1,1,1,2,2,2])",
        "minimumIndex(nums = [1,2,2,2,2,2,2,2,2,2,2,2,2,3])",
        "minimumIndex(nums = [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 3, 4, 2, 1, 2])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1, 2], [3, 4]])",
        "numberOfPoints(nums = [[1,4],[2,5],[7,9]])",
        "numberOfPoints(nums = [[1,4], [4,5]])",
        "numberOfPoints(nums = [[3, 4], [1, 2]])",
        "numberOfPoints(nums = [[-2,-1],[1,2]])",
        "numberOfPoints(nums = [[3, 7], [4, 5]])",
        "numberOfPoints(nums = [[1, 2], [1, 3], [2, 3], [1, 4], [3, 4]])",
        "numberOfPoints(nums = [[1, 5], [4, 10], [8, 15]])",
        "numberOfPoints(nums = [[1,3],[5,8],[6,9]])",
        "numberOfPoints(nums = [[2,5], [3,4], [1,2]])"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"a.b\", \"c\", \"d.e.f\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"ab\", \"cd\", \"ef\"], separator = \"c\")",
        "splitWordsBySeparator(words = [\"hello, world\", \"hi\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"a\", \"ab\", \"abc\"], separator = \"bc\")",
        "splitWordsBySeparator(words = [\"a\",\"b\", \"c\", \"d\", \"e\", \"f\"], separator = \"c\")",
        "splitWordsBySeparator(words = [\"/n\", \"/n\", \"/n\"], separator = \"/n\")",
        "splitWordsBySeparator(words = [\"abc\", \"bcd\", \"efg\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"This is a test\",\"of split and join\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"banana\",\"apple\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"000000\", \"ab\", \"123\"], separator = \"12\")"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 4, target = 4)",
        "minimumPossibleSum(n = 1, target = 3)",
        "minimumPossibleSum(n = 4, target = 5)"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[0, 1], [1, 2]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [4, 6]])",
        "numberOfPoints(nums = [[1, 2], [4, 4], [1, 2]])",
        "numberOfPoints(nums = [[1, 2], [3, 6], [5, 5]])",
        "numberOfPoints(nums = [[-2, 2], [-1, 1], [1, 2], [2, 2], [3, 4], [4, 4], [5, 6]])",
        "numberOfPoints(nums = [[0,2], [2,4], [0,2], [0,1]])",
        "numberOfPoints(nums = [[1, 1], [2, 3], [4, 4], [0, 2], [3, 1], [4, 0]])",
        "numberOfPoints(nums = [[-1, 1], [-1, 0], [0, 1], [1, 1], [-1, -1], [1, 0], [1, 1]])"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 4, 1, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 4, 1, 5], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 4, 2, 2], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 4, 2, 4, 4], m = 5, k = 4)",
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 1, 3, 4], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [5, 5, 5, 5, 5], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 3, 4, 5, 6, 1, 1, 1], m = 5, k = 4)",
        "countInterestingSubarrays(nums = [1, 2, 4, 4, 3, 5, 6, 7, 4, 8], m = 4, k = 3)"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8, 16, 32, 64, 128], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 3, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [3,1,5,12,2,11], k = 3)",
        "sumIndicesWithKSetBits(nums = [0,1,0,1,1,2,0,1,1,1,2,2,2], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,3,5,0,1,4,6], k = 3)",
        "sumIndicesWithKSetBits(nums = [3, 5, 31, 3, 32], k = 2)"
    ],
    "sample_203": [
        "minimumOperations(num = \"123456\")",
        "minimumOperations(num = \"01234567890\")",
        "minimumOperations(num = \"312\")",
        "minimumOperations(num = \"1250025\")",
        "minimumOperations(num = \"4975\")",
        "minimumOperations(num = \"0421\")",
        "minimumOperations(num = \"01724\")",
        "minimumOperations(num = '000111')",
        "minimumOperations(num = \"112345777\")",
        "minimumOperations(num = \"00150000250075\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1, 1, 1, 1, 1], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 1, 1], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], modulo = 4, k = 3)",
        "countInterestingSubarrays(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5], modulo = 7, k = 3)",
        "countInterestingSubarrays(nums = [2, 5, 1, 3, 2], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5], modulo = 2, k = 3)",
        "countInterestingSubarrays(nums = [0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 5, 2, 1, 6], modulo = 12, k = 3)",
        "countInterestingSubarrays(nums = [1,1,1], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 1, 2, 2, 3, 4, 2, 1, 1, 3, 1, 3, 4, 5, 2, 1, 3, 4, 5, 6, 1, 1, 3, 2, 1, 2, 1, 1, 1, 4, 5, 2, 6, 3, 1, 2, 1, 4, 5, 6, 7, 1, 1, 3, 2, 1, 3, 2, 1, 1, 1, 2, 4, 5, 6, 7, 8, 1, 1, 2, 1, 4, 5, 6, 7, 8, 9, 1, 1, 1, 2, 1, 2, 3, 1, 2, 3, 4, 1, 1, 1, 1, 3, 1, 3, 2, 4, 1, 1, 1, 1, 4, 1, 2, 3, 4, 5, 1, 1, 1, 1, 5, 1, 2, 3, 4, 5, 6, 1, 1, 1, 1, 6, 1, 2, 3, 4, 5, 6, 7, 1, 1, 1, 1, 7, 1, 2, 3, 4, 5, 6, 7, 8, 1, 1, 1, 1, 8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 1, 1, 1, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 1, 1, 1, 10, 1, 1, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1, 1, 1, 1,"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1,2,1,3,1], K = 3)",
        "longestEqualSubarray(A = [0,0,0,0,0], K = 0)",
        "longestEqualSubarray(A = [1, 2, 2, 1, 2, 2], K = 2)",
        "longestEqualSubarray(A = [1,1,1,2,2,2,2,3,3], K = 3)",
        "longestEqualSubarray(A = [1,2,3,4,4,4,4,3,2,1], K = 3)",
        "longestEqualSubarray(A = [1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2], K = 4)",
        "longestEqualSubarray(A = [4, 6, 5, 4, 4, 1, 2, 3, 4], K = 2)",
        "longestEqualSubarray(A = [2, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1], K = 2)",
        "longestEqualSubarray(A = [3, 1, 4, 2, 5, 4, 1, 4, 1, 4], K = 2)",
        "longestEqualSubarray(A = [1,1,2,3,2,3,3,1,2], K = 1)"
    ],
    "sample_146": [
        "finalString(s = 'pinter')",
        "finalString(s = \"poiter\")",
        "finalString(s = 'poitner')",
        "finalString(s = \"pintri\")",
        "finalString(s = \"piet\")",
        "finalString(s = \"tinne\")",
        "finalString(s = \"nitnem\")",
        "finalString(s = 'mint')",
        "finalString(s = 'tecipnr')",
        "finalString(s = 'iqnsiwirdi')"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [9, 6, 7, 7, 6, 7], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 5, 3], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 7, 8, 5], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 6, 9, 3], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 6, 11, 15], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 8, 6, 4], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 3, 1, 5], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 6, 1, 9, 9], target = 11)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 6, 1, 3, 5, 6, 9, 8, 4, 2], target = 7)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 3], [4, 6]])",
        "numberOfPoints(nums = [[1, 6], [2, 4], [8, 10], [15, 18]])",
        "numberOfPoints(nums = [[1, 6], [2, 5]])",
        "numberOfPoints(nums = [[1, 1], [2, 3], [4, 5], [6, 7]])",
        "numberOfPoints(nums = [[1, 6], [2, 4], [7, 10]])",
        "numberOfPoints(nums = [[1, 4], [0, 0], [3, 4], [2, 2], [1, 1], [2, 3]])",
        "numberOfPoints(nums = [[1, 4], [0, 2], [3, 4], [2, 3], [1, 2], [0, 1], [0, 4]])",
        "numberOfPoints(nums = [[-5, 10], [-2, -5], [-4, -1], [10, 14]])",
        "numberOfPoints(nums = [[-5, 10], [-2, -5], [-4, -1], [10, 20]])",
        "numberOfPoints(nums = [[2, 4], [2, 5], [5, 6], [1, 3], [2, 3], [4, 6]])"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 2, 3, 4, 7, 10])",
        "maxIncreasingGroups(A = [1, 2, 1, 1])",
        "maxIncreasingGroups(A = [1, 10, 2, 9])",
        "maxIncreasingGroups(A = [6, 5, 4, 4])",
        "maxIncreasingGroups(A = [2, 2, 2, 1, 1])",
        "maxIncreasingGroups(A = [2, 1, 5, 3, 6])",
        "maxIncreasingGroups(A = [1, 4, 3, 5])",
        "maxIncreasingGroups(A = [1, 2, 1, 3, 4, 2, 3])",
        "maxIncreasingGroups(A = [2, 2, 1, 1, 2, 2, 1, 1, 2, 2])",
        "maxIncreasingGroups(A = [1, 2, 1, 1, 3, 1, 2, 1, 2, 1, 1])"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 4, offers = [[1,2,1], [2,3,2], [3,4,3]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 10], [2, 3, 5], [3, 4, 8]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 10], [2, 3, 5], [3, 4, 8]])",
        "maximizeTheProfit(n=4, offers=[(1, 3, 2), (2, 4, 3)])",
        "maximizeTheProfit(n=6,offers=[[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7]])",
        "maximizeTheProfit(n=4, offers=[[1,3,2],[2,3,3],[3,4,5]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,3],[3,5,8],[10,12,15]])",
        "maximizeTheProfit(n = 6, offers = [[1,5,4],[2,3,7]])",
        "maximizeTheProfit(n=2, offers=[[0,1,2],[1,2,5],[0,2,3],[1,3,4],[2,5,6]])",
        "maximizeTheProfit(n = 7, offers = [[1,2,2],[2,4,1],[3,1,1],[4,5,3]])"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"RLRRLLL\")",
        "furthestDistanceFromOrigin(moves = \"RLR\")",
        "furthestDistanceFromOrigin(moves = \"RLRRRLR\")",
        "furthestDistanceFromOrigin(moves = 'LRLRLRLL')",
        "furthestDistanceFromOrigin(moves = \"RLRLLLRRR\")",
        "furthestDistanceFromOrigin(moves = \"RRRLLLLRRLR\")",
        "furthestDistanceFromOrigin(moves = \"RRRLRLLRRLL\")",
        "furthestDistanceFromOrigin(moves = 'RRRRLLLL_')",
        "furthestDistanceFromOrigin(moves = \"RRRY_RRRLLLL\")",
        "furthestDistanceFromOrigin(moves = 'RLLLLLRRRLLRRRLLLLLLRRR')"
    ],
    "sample_175": [
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 4, k = 10)",
        "minimumSum(n = 4, k = 10)",
        "minimumSum(n = 4, k = 10)",
        "minimumSum(n = 4, k = 10)",
        "minimumSum(n = 4, k = 7)",
        "minimumSum(n = 4, k = 5)",
        "minimumSum(n = 5, k = 9)",
        "minimumSum(n = 3, k = 12)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,5],[2,3]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [2, 4]])",
        "numberOfPoints(nums = [[0, 2], [2, 4], [4, 6]])",
        "numberOfPoints(nums = [[3,5],[7,12]])",
        "numberOfPoints(nums = [[0,3],[2,6],[3,4],[6,9]])",
        "numberOfPoints(nums=[ [1,4], [2,6], [3,5] ])",
        "numberOfPoints(nums = [[1, 1], [1, 4], [2, 3], [4, 4]])",
        "numberOfPoints(nums=[[1, 5], [2, 3]])",
        "numberOfPoints(nums=[[0,0],[10,10],[0,10],[10,0]])",
        "numberOfPoints(nums = [[2, 3], [1, 4], [2, 2]])"
    ],
    "sample_205": [
        "minimumOperations(num = \"12345\")",
        "minimumOperations(num = \"125\")",
        "minimumOperations(num = \"0123456789\")",
        "minimumOperations(num = \"250075\")",
        "minimumOperations(num = \"0075\")",
        "minimumOperations(num = \"525075\")",
        "minimumOperations(num = \"3725\")",
        "minimumOperations(num = \"005275\")",
        "minimumOperations(num = \"1234501\")",
        "minimumOperations(num = \"001002\")"
    ],
    "sample_120": [
        "minimumIndex(nums = [1, 2, 1, 2, 1])",
        "minimumIndex(nums = [1, 2, 3, 1])",
        "minimumIndex(nums = [1, 2, 1, 2])",
        "minimumIndex(nums = [1, 2, 2, 2])",
        "minimumIndex(nums = [1, 2, 3, 4, 3, 2, 1])",
        "minimumIndex(nums = [1, 2, 2, 1, 2, 3])",
        "minimumIndex(nums = [2, 3, 3, 2, 2, 1])",
        "minimumIndex(nums = [3, 1, 5, 3, 2])",
        "minimumIndex(nums = [1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3])",
        "minimumIndex(nums = [1,1,3,4,3,3])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"RRRLLLL\")",
        "furthestDistanceFromOrigin(moves = \"LLLRR_\")",
        "furthestDistanceFromOrigin(moves = \"LLLL_\")",
        "furthestDistanceFromOrigin(moves = 'RLR_')",
        "furthestDistanceFromOrigin(moves = \"L_R_L_R_L_R_R\")",
        "furthestDistanceFromOrigin(moves = \"LRLRRRLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"RR_LRLRL\")",
        "furthestDistanceFromOrigin(moves = \"R_LLRR_\")",
        "furthestDistanceFromOrigin(moves = \"RRRLRRLLLLLLLLRRRRRR\")",
        "furthestDistanceFromOrigin(moves = \"R_R_L_R_L_L_L_R_L_R_L_L_L_R_L_R_R_R_R_R_R_L_L_L_R_L_L_L_L_L_R_R_L_R_R_R_R_L_R_L_L_L_R_R_L_R_L_L_L_L_R_R_L_L_L_R_R_R_L_R_R_R_L_R_L_L_L_L_R_R_R_R_L_R_L_L_R_L_L_R_R_R_L_L_L_L_R_L_R_L_L_R_L_L_R_L_L_R_R_R_R_R_R_L_L_R_L_L_L_R_L_L_L_R_R_R_R_R_R_R_R_R_R_R_L_L_R_L_R_L_R_R_R_R_R_R_L_L_L_R_R_R_L_R_L_L_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_L_L_R_L_L_R_L_R_R_R_L_R_R_R_L_R_L_L_L_R_R_L_R_R_R_L_R_L_L_L_R_R_L_R_R_R_R_R_R_L_R_L_L_R_L_R_R_R_R_R_R_R_R_R_L_L_R_R_R_R_R_R_R_R_R_R_R_R_R_L_R_L_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_L_L_R_L_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_L_L_R_L_L_L_R_R_L_L_L_R_L_L_L_R_L_L_L_R_R_L_R_R_R_R_R_R_R_L_"
    ],
    "sample_161": [
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [0, 3, 0])",
        "maxSum(nums = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6])",
        "maxSum(nums = [6, 1, 3, 4, 7])",
        "maxSum(nums = [-1, -2, 1, -10, 10])",
        "maxSum(nums = [342, 2, 66])",
        "maxSum(nums = [5, 2, 3, 6, 1, 1])",
        "maxSum(nums = [-3, 5, 2, 9, -1])",
        "maxSum(nums = [67, 12, 12, 73, 12])"
    ],
    "sample_160": [
        "maxSum(nums = [100, 200, 300])",
        "maxSum(nums = [101, 10, 1])",
        "maxSum(nums = [134, 234, 374, 4])",
        "maxSum(nums = [19, 20, 7, 21, 22, 9])",
        "maxSum(nums = [10101, 10111, 10121, 10131])",
        "maxSum(nums = [2, 3, 4, 5, 6, 7, 8])",
        "maxSum(nums = [123456, 12345, 2345, 456, 1234, 123, 12, 1])",
        "maxSum(nums = [713, 746, 780, 379, 388])",
        "maxSum(nums = [16, 2, 27, 6, 26, 23, 15, 29, 28, 25])",
        "maxSum(nums = [64, 4, 36, 26, 14, 5, 36, 8])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = [\"one-two-three-four-five-six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one,two,three,four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one_two_three_four_five_six\"], separator = \"_\")",
        "splitWordsBySeparator(words = ['one;two;three;four;five;six'], separator = ';')",
        "splitWordsBySeparator(words = [\"one_two_three_four_five_six\"], separator = '_')",
        "splitWordsBySeparator(words=['one-two-three', 'four-five-six'], separator='-')",
        "splitWordsBySeparator(words = [\"one,two,three\", \"four,five\", \"six,seven\"], separator = \",\")",
        "splitWordsBySeparator(words = ['1/one', '2/two', '3/three', '4/four', '5/five', '6/six'], separator = '/')",
        "splitWordsBySeparator(words = ['1, 2, 3, 4, 5, 6'], separator = ',')",
        "splitWordsBySeparator(words = [\"one:two::three:::four:five:six\"], separator = \":\")"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [9, 6, 7, 7, 6, 7], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 9, 12, 17], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 9], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours=[9, 7, 6, 7, 6, 8, 8, 7], target=8)",
        "numberOfEmployeesWhoMetTarget(hours = [10,20,10,30,20], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours=[70, 80, 100], target=80)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4, 15, 20, 21], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 6, 9, 9, 6, 9, 9, 5, 9], target = 8)"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 9, 7, 12], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [1,3,4,5], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 8, 9], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [8,8,6], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 9, 9, 8, 8], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 4, 2, 5, 1], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 9, 7, 15, 21], target = 17)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 50, 20], target = 50)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 4, 2, 1, 3, 5, 8, 4, 4, 1], target = 4)"
    ],
    "sample_171": [
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 4, k = 5)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 5, k = 5)",
        "minimumSum(n=3, k=5)",
        "minimumSum(n = 3, k = 11)",
        "minimumSum(n=4, k=7)"
    ],
    "sample_159": [
        "maxSum(nums = [0,0,0])",
        "maxSum(nums = [-10,-10,-10,-10])",
        "maxSum(nums = [-2,-1,3,4,5])",
        "maxSum(nums = [-100, 110])",
        "maxSum(nums = [-1,-1,-1,1,1,1,1,1])",
        "maxSum(nums = [-100,-100,-1,0])",
        "maxSum(nums = [12, 9, 4])",
        "maxSum(nums=[101, 3, -2])",
        "maxSum(nums = [9, 99, 10, 5, 4])",
        "maxSum(nums = [-1000, 90, 190, 1000])"
    ],
    "sample_157": [
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 20)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 20)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 20)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 20)",
        "canSplitArray(nums = [3, 5, 8], m = 10)",
        "canSplitArray(nums = [1, 1], m = 1)",
        "canSplitArray(nums = [3, 3, 5, 7], m = 12)",
        "canSplitArray(nums = [3, 3, 1, 1], m = 4)",
        "canSplitArray(nums = [4, 4, 6], m = 4)",
        "canSplitArray(nums = [1, 3, 4, 4, 9], m = 4)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"a,b,c\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"a-b\", \"c\", \"d-e\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"a,,b,c\", \"d,e\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"abc\", \"123\"], separator = \"_\")",
        "splitWordsBySeparator(words = [\"abc//xyz\"], separator = \"//\")",
        "splitWordsBySeparator(words = [\"a-b\", \"-cd\", \"--ef\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"a.b\", \"a..b\", \"a.b.\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"foo1 bar2\", \"foo3 bar4\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple-\", \"banana\", \"peach-\", \"plum\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"love-eater\", \"hit-the-road-jack\"], separator = \"-\")"
    ],
    "sample_172": [
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 4, k = 4)",
        "minimumSum(n=3, k=6)",
        "minimumSum(n = 5, k = 8)",
        "minimumSum(n = 5, k = 5)",
        "minimumSum(n = 5, k = 4)",
        "minimumSum(n=10, k=2)"
    ],
    "sample_228": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1,2,3])",
        "countWays(nums = [1,2,3,4,5])",
        "countWays(nums = [1,3,5,7])",
        "countWays(nums = [2,4,6,8])",
        "countWays(nums = [0,2,0,2,0])",
        "countWays(nums=[1,1,1,1])",
        "countWays(nums=[1, 5, 3])",
        "countWays(nums = [1,2,0,3,1,2,0,3])",
        "countWays(nums = [4, 5, 5, 3, 2, 1])"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '110')",
        "maximumOddBinaryNumber(s = '011')",
        "maximumOddBinaryNumber(s = '011')",
        "maximumOddBinaryNumber(s = '00')",
        "maximumOddBinaryNumber(s = '10101')",
        "maximumOddBinaryNumber(s = \"1100\")",
        "maximumOddBinaryNumber(s = '00111')",
        "maximumOddBinaryNumber(s = '11110')",
        "maximumOddBinaryNumber(s = '000000010')"
    ],
    "sample_119": [
        "minimumIndex(nums = [1, 1, 1, 1, 1])",
        "minimumIndex(nums = [1, 1, 2, 2])",
        "minimumIndex(nums = [5, 5, 5, 5])",
        "minimumIndex(nums = [3, 4, 5, 1, 3, 3])",
        "minimumIndex(nums = [1, 1, 2, 2, 1, 1, 3, 3])",
        "minimumIndex(nums = [2, 4, 2, 2, 4, 4, 2])",
        "minimumIndex(nums = [2, 3, 1, 3, 2, 1, 3])",
        "minimumIndex(nums = [1, 2, 2, 3, 4, 5, 6, 7])",
        "minimumIndex(nums = [0, 0, 0, 0, 1, 1, 0, 1])",
        "minimumIndex(nums = [1, 5, 3, 4, 3, 2, 5, 4])"
    ],
    "sample_153": [
        "canSplitArray(nums = [7,2,5,10,8], m = 20)",
        "canSplitArray(nums = [7,2,5,10,8], m = 20)",
        "canSplitArray(nums = [7,2,5,10,8], m = 20)",
        "canSplitArray(nums = [1, 1, 1, 1, 1], m = 3)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5,6,7], m = 9)",
        "canSplitArray(nums = [1,2,3,4,5,6,7], m = 6)",
        "canSplitArray(nums = [1, 2, 2, 3, 2], m = 4)",
        "canSplitArray(nums = [50,30,20,100], m = 5)",
        "canSplitArray(nums = [1,5,2,5,2,6,3,1], m = 15)"
    ],
    "sample_147": [
        "finalString(s = \"string\")",
        "finalString(s = \"ring\")",
        "finalString(s = \"tin\")",
        "finalString(s = \"right\")",
        "finalString(s = \"strings\")",
        "finalString(s = \"sit\")",
        "finalString(s = \"imtgdvs\")",
        "finalString(s = \"trnsgr\")",
        "finalString(s = \"pizza\")",
        "finalString(s = \"vgyfjjnfljgvjfvng\")"
    ],
    "sample_174": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 2, k = 6)",
        "minimumSum(n = 2, k = 6)",
        "minimumSum(n = 5, k = 1)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1,1,1], m = 3)",
        "canSplitArray(nums = [1,2,3], m = 3)",
        "canSplitArray(nums = [1, 1, 2, 2, 2], m = 3)",
        "canSplitArray(nums = [100, 100], m = 200)",
        "canSplitArray(nums = [3, 1, 1, 4, 2], m = 4)",
        "canSplitArray(nums = [1,1,1,4,1], m = 5)",
        "canSplitArray(nums=[2, 8, 5], m=10)",
        "canSplitArray(nums = [2,3,4,5,6,7], m = 2)",
        "canSplitArray(nums = [2, 5, 8, 10], m = 17)",
        "canSplitArray(nums=[7,3,4], m=7)"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1, 2, 2, 1, 1, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 2])",
        "countCompleteSubarrays(nums = [1, 1, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 2, 2, 1, 5])",
        "countCompleteSubarrays(nums = [1,2,1,2,1,3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 3, 3, 2, 2, 2])",
        "countCompleteSubarrays(nums = [1,2,2,1,3,3])",
        "countCompleteSubarrays(nums = [5,5,4,4,5])"
    ],
    "sample_150": [
        "finalString(s = \"sting\")",
        "finalString(s = 'rtsn')",
        "finalString(s = 'strignin')",
        "finalString(s = \"tryng\")",
        "finalString(s = \"routines\")",
        "finalString(s = \"riia\")",
        "finalString(s = 'bhg')",
        "finalString(s = \"sigir\")",
        "finalString(s = \"dubsi\")",
        "finalString(s = \"happyness\")"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 4, target = 1)",
        "minimumPossibleSum(n = 10, target = 10)",
        "minimumPossibleSum(n = 4, target = 7)",
        "minimumPossibleSum(n = 1, target = 0)",
        "minimumPossibleSum(n = 2, target = 5)"
    ],
    "sample_176": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 2)"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1, 2, 1, 2], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4, 5], modulo=6, k=2)",
        "countInterestingSubarrays(nums = [2, 2, 2, 2, 2, 2], modulo = 4, k = 2)",
        "countInterestingSubarrays(nums = [0,0,0,0,0], modulo = 4, k = 0)",
        "countInterestingSubarrays(nums=[1,2,1,1,1], modulo=2, k=0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 2], modulo = 100, k = 3)",
        "countInterestingSubarrays(nums = [4,3,2,3,4], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [2, 5, 1, 2, 5, 1], modulo = 4, k = 1)",
        "countInterestingSubarrays(nums=[1, 1, 1, 2, 1, 2, 2, 2], modulo=4, k=2)",
        "countInterestingSubarrays(nums = [3, 5, 10, 2], modulo = 5, k = 4)"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8, 16, 32, 64, 128], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 0, 0, 1, 0, 1, 1, 0], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 2], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 0], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,4,12], k = 3)",
        "sumIndicesWithKSetBits(nums = [12, 4, 2, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [12, 3, 5, 2, 6, 11], k = 3)"
    ],
    "sample_151": [
        "finalString(s = 'ring')",
        "finalString(s = \"ring\")",
        "finalString(s = 'tinsrg')",
        "finalString(s = \"ritgnas\")",
        "finalString(s = 'ababac')",
        "finalString(s = \"java\")",
        "finalString(s = \"tsihsih\")",
        "finalString(s = \"kysi\")",
        "finalString(s = \"ilovestriiiing\")",
        "finalString(s = \"traingsmo\")"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 0, 1, 0], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,1,0], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [3, 0, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [3, 8, 22, 30], k = 2)"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [10, 100, 1000])",
        "maxIncreasingGroups(usageLimits = [10, 30, 20, 40, 50])",
        "maxIncreasingGroups(usageLimits = [0, 1, 2, 3, 4, 5, 6, 7])",
        "maxIncreasingGroups(usageLimits = [10, 15, 20, 30, 40])",
        "maxIncreasingGroups(usageLimits = [1, 3, 2, 6, 1, 4, 5, 5])",
        "maxIncreasingGroups(usageLimits = [3, 6, 7, 9, 11, 13])",
        "maxIncreasingGroups(usageLimits = [2, 10, 10, 4])",
        "maxIncreasingGroups(usageLimits = [2, 4, 3, 5, 5, 5, 5, 7])",
        "maxIncreasingGroups(usageLimits = [10, 3, 1, 5, 12, 8, 11, 6])",
        "maxIncreasingGroups(usageLimits = [2, 6, 1, 8, 4, 3, 0, 6, 4, 5])"
    ],
    "sample_204": [
        "minimumOperations(s = \"00255075\")",
        "minimumOperations(s = \"0025507500\")",
        "minimumOperations(s = \"250075\")",
        "minimumOperations(s = \"0000255075000\")",
        "minimumOperations(s = \"002550755\")",
        "minimumOperations(s = \"50750025\")",
        "minimumOperations(s = \"1220025\")",
        "minimumOperations(s = \"01234001230\")",
        "minimumOperations(s = \"37525\")",
        "minimumOperations(s = \"0075002550750000\")"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [9, 6, 10], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 6, 7], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5,6,7,8,9,10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 61, 58, 61], target = 60)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10, 10, 10, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 8, 6], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 3, 5], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 8, 9, 10, 11, 12, 13, 14], target = 14)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 6, 7, 3, 7, 6], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [40, 37, 27, 43, 38, 50, 48], target = 40)"
    ],
    "sample_148": [
        "finalString(s = \"pinter\")",
        "finalString(s = \"point\")",
        "finalString(s = \"poiter\")",
        "finalString(s = 'pintor')",
        "finalString(s = 'pin')",
        "finalString(s = \"pintr\")",
        "finalString(s = \"rip\")",
        "finalString(s = \"ifni\")",
        "finalString(s = 'irrelevant')",
        "finalString(s = \"iptn\")"
    ],
    "sample_168": [
        "isAcronym(words = [\"USA\", \"NATO\"], s = \"UN\")",
        "isAcronym(words = [\"USA\", \"NSA\"], s = \"USSA\")",
        "isAcronym(words = [\"FBI\", \"CPU\"], s = \"FCBIPU\")",
        "isAcronym(words = [\"F\", \"i\", \"v\", \"e\"], s = \"FIVE\")",
        "isAcronym(words = [\"U.S.\", \"A\", \"S.O.S.\"], s = \"USA\")",
        "isAcronym(words = ['dog', 'deer', 'deal'], s = 'DEAL')",
        "isAcronym(words = [\"HTML\", \"CSS\", \"JavaScript\", \"PHP\", \"Python\"], s = \"HTMLCSSJavaScriptPHPPython\")",
        "isAcronym(words = ['Banana', 'Apple', 'Orange'], s = 'BANAO')",
        "isAcronym(words = [\"USA\", \"IQ\", \"KOR\", \"UAE\"], s = \"USAIKORUAE\")",
        "isAcronym(words = [\"Programming\",\"Puzzles\",\"And\",\"Games\"], s = \"PAG\")"
    ],
    "sample_201": [
        "minOperations(nums = [1, 2, 4, 8], target = 10)",
        "minOperations(nums=[1, 2, 3], target=1)",
        "minOperations(nums = [5, 3, 4, 7], target = 6)",
        "minOperations(nums = [2, 5], target = 10)",
        "minOperations(nums=[1,2,4,8], target=5)",
        "minOperations(nums=[2, 1, 3], target=6)",
        "minOperations(nums = [2, 3, 4, 6], target = 6)",
        "minOperations(nums = [1, 2, 1, 1, 2], target = 6)",
        "minOperations(nums = [60, 60, 60, 60, 60, 60, 60], target = 120)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 3)"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '1001')",
        "maximumOddBinaryNumber(s = '011')",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = '111')",
        "maximumOddBinaryNumber(s = \"01\")",
        "maximumOddBinaryNumber(s = '10110')"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = '1001')",
        "maximumOddBinaryNumber(s = '110')",
        "maximumOddBinaryNumber(s = '0011')",
        "maximumOddBinaryNumber(s = '10110')",
        "maximumOddBinaryNumber(s = '00111')",
        "maximumOddBinaryNumber(s = \"01001\")",
        "maximumOddBinaryNumber(s = \"01000\")",
        "maximumOddBinaryNumber(s = '10100010')",
        "maximumOddBinaryNumber(s = \"1011010\")",
        "maximumOddBinaryNumber(s = \"00110110\")"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 4, target = 8)",
        "minimumPossibleSum(n = 4, target = 15)",
        "minimumPossibleSum(n = 4, target = 18)",
        "minimumPossibleSum(n=5, target=10)"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRRLLLL\")",
        "furthestDistanceFromOrigin(moves = \"RL\")",
        "furthestDistanceFromOrigin(moves = \"RLR\")",
        "furthestDistanceFromOrigin(moves = \"RLRRLLL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLL\")"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n=1, target=1)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 3, target = 6)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10, 10, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 1, 1], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 37, 45], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8, 9], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [50, 100, 120], target = 100)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 2, 4], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 7, 3, 2, 5, 9], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [6, 1, 1, 6, 1, 6, 1, 1], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 7, 6, 10, 2, 8], target = 13)"
    ],
    "sample_231": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [3, 2, 1])",
        "countWays(nums = [1, 3, 5, 6])",
        "countWays(nums = [1,2,3,4,5,6])",
        "countWays(nums = [1, 1, 2, 2, 3])",
        "countWays(nums = [1,2,3,5])",
        "countWays(nums = [3,4,5,6])",
        "countWays(nums = [1,3,4,5,7,8])",
        "countWays(nums = [2, 1, 2, 3, 1, 4])",
        "countWays(nums = [0, 1, 2, 4, 5, 6, 8, 9, 11])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"RRRLLLL\")",
        "furthestDistanceFromOrigin(moves = \"RRRRLLLL\")",
        "furthestDistanceFromOrigin(moves = \"RLLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLLL_\")",
        "furthestDistanceFromOrigin(moves = \"RLRRRLL\")",
        "furthestDistanceFromOrigin(moves = 'RLR')",
        "furthestDistanceFromOrigin(moves = \"RRL_\")",
        "furthestDistanceFromOrigin(moves = \"RRRRLLLLDDDDD\")",
        "furthestDistanceFromOrigin(moves = 'U_LL_R')",
        "furthestDistanceFromOrigin(moves = \"RRLDRRLRLRLRLLLRDRRLLR\")"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 2, target = 6)",
        "minimumPossibleSum(n = 4, target = 6)",
        "minimumPossibleSum(n = 2, target = 7)",
        "minimumPossibleSum(n = 4, target = 12)",
        "minimumPossibleSum(n = 3, target = 12)",
        "minimumPossibleSum(n=4, target=7)",
        "minimumPossibleSum(n=3, target=14)",
        "minimumPossibleSum(n = 2, target = 2)"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,2,1,2,2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 1])",
        "countCompleteSubarrays(nums = [0, 1, 2, 2, 3, 0, 4, 2])",
        "countCompleteSubarrays(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0])",
        "countCompleteSubarrays(nums = [1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3,",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 4, 4, 4, 5, 6, 6, 6, 7, 7, 8])",
        "countCompleteSubarrays(nums = [0, 1, 1, 1, 2, 2, 3, 3, 3, 2])"
    ],
    "sample_156": [
        "canSplitArray(nums = [3, 5, 8], m = 10)",
        "canSplitArray(nums = [3, 5, 8], m = 10)",
        "canSplitArray(nums = [1, 1, 2, 2, 2], m = 4)",
        "canSplitArray(nums = [1,1,2,2], m = 4)",
        "canSplitArray(nums = [2, 3, 5, 6], m = 10)",
        "canSplitArray(nums = [3, 1, 1, 2, 2], m = 4)",
        "canSplitArray(nums = [1, 2, 4], m = 4)",
        "canSplitArray(nums = [1, 1, 3, 3], m = 6)",
        "canSplitArray(nums = [2, 5, 3, 7], m = 10)",
        "canSplitArray(nums = [2,3,4,5,11], m = 5)"
    ],
    "sample_200": [
        "minOperations(nums = [5, 3, 4, 7], target = 12)",
        "minOperations(nums = [1, 5, 11, 5], target = 10)",
        "minOperations(nums = [3, 4, 5], target = 10)",
        "minOperations(nums = [1,2,4], target = 5)",
        "minOperations(nums = [6, 3, 4, 1], target = 5)",
        "minOperations(nums = [1, 1000, 100], target = 102)",
        "minOperations(nums = [1, 1, 3, 1, 2], target = 10)",
        "minOperations(nums = [1, 5, 2, 6, 3, 4], target = 16)",
        "minOperations(nums = [10, 10, 10], target = 17)",
        "minOperations(nums = [14, 7, 5, 21, 11, 23, 21], target = 24)"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 1, 1, 0], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,1,1,1,1,1,1,1,1,1], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 0, 1, 4, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [12, 6, 9, 3, 8], k = 3)"
    ],
    "sample_165": [
        "isAcronym(words = [\"the\", \"quick\", \"brown\", \"fox\"], s = \"TQBF\")",
        "isAcronym(words = [\"i\", \"love\", \"python\"], s = \"ILPY\")",
        "isAcronym(words = [\"GEEKS\", \"FOR\", \"GEEKS\"], s = \"GEEKSFORGEEKS\")",
        "isAcronym(words = [\"USA\", \"UN\", \"FDA\"], s = \"FDA\")",
        "isAcronym(words = [\"i\", \"i\", \"i\", \"i\", \"i\", \"i\"], s = \"i\")",
        "isAcronym(words = [\"USA\", \"SOFIA\"], s = \"USA\")",
        "isAcronym(words = [\"NBA\", \"FOX\", \"ABC\"], s = \"FANBOYS\")",
        "isAcronym(words = [\"HTML\", \"CSS\", \"XML\"], s = \"XCS\")",
        "isAcronym(words = [\"Dog\", \"Cat\", \"Tiger\", \"Lion\"], s = \"DTL\")",
        "isAcronym(words = [\"for\", \"a\", \"fare\", \"the\", \"for\"], s = \"F.A.R.E.\")"
    ],
    "sample_227": [
        "countWays(nums = [0, 1, 2, 3, 4, 5])",
        "countWays(nums = [0, 1, 2, 3, 4, 5, 6])",
        "countWays(nums = [2, 1, 1, 3])",
        "countWays(nums = [1, 2, 3, 3, 4, 5, 5])",
        "countWays(nums = [2, 2, 3, 5, 5])",
        "countWays(nums = [3, 5, 10])",
        "countWays(nums = [3, 4, 5, 7, 8, 9, 10])",
        "countWays(nums = [1, 3, -1, 5, -3, 4])",
        "countWays(nums = [-0x3f3f3f3f, -0x3f3f3f3f, 0x3f3f3f3f, 10, 20, 20, 30, 30])",
        "countWays(nums = [0, 1, 1, 0, 1, 2, 3, 2, 1, 3, 2, 0, 0, 3, 2, 0])"
    ],
    "sample_158": [
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [12, 345, 2, 6, 7896])",
        "maxSum(nums = [1, 11])",
        "maxSum(nums = [14, 2, 85])",
        "maxSum(nums = [101, 20, 30, 40])",
        "maxSum(nums = [3, 9, 10, 4, 20])",
        "maxSum(nums = [13, 2, 3, 1, 5, 17])",
        "maxSum(nums = [19, 12, 21, 2, 3, 13])",
        "maxSum(nums = [12, 34, 56, 78, 90, 123, 321])"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1, 2, 1, 3, 4], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3, 3, 2, 2, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 3, 3, 3, 4, 3, 3], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 1, 3, 1], k = 3)",
        "longestEqualSubarray(nums = [0, 0, 0, 0, 0], k = 1)",
        "longestEqualSubarray(nums = [1, 1, 1, 1, 1, 2, 2], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,1,2,2,2,1,2,2], k = 3)",
        "longestEqualSubarray(nums = [2, 2, 2, 1, 2, 2, 2, 2, 1], k = 4)",
        "longestEqualSubarray(nums = [1,2,1,3,1,1,1,1,1,1], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3, 4, 1, 2, 4, 4, 1, 2, 3, 4], k = 5)"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 3, 20], [3, 4, 30], [4, 5, 40]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 1], [2, 3, 2], [3, 4, 3], [4, 5, 4]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 3, 20], [1, 5, 5]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 10], [2, 3, 20], [1, 6, 15]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 100], [1, 5, 20], [3, 4, 50]])",
        "maximizeTheProfit(n = 5, offers = [[3, 1, 2], [4, 2, 3]])",
        "maximizeTheProfit(n = 4, offers = [[1,2,10],[2,3,15]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 500], [2, 4, 200]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 5], [2, 4, 7], [3, 5, 9], [1, 2, 10]])",
        "maximizeTheProfit(n = 7, offers = [[1, 2, 50], [2, 3, 10], [5, 5, 25]])"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 3, 2, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 4, 7])",
        "maxIncreasingGroups(x = [3, 2, 1])",
        "maxIncreasingGroups(x = [1, 3, 7, 8, 10, 12])",
        "maxIncreasingGroups(x = [4, 4, 3, 2, 2])",
        "maxIncreasingGroups(x = [1, 5, 2, 14, 10])",
        "maxIncreasingGroups(x = [1, 2, 5, 10, 13])",
        "maxIncreasingGroups(x = [1, 5, 3, 7, 4, 10, 12])",
        "maxIncreasingGroups(x = [3, 5, 5, 5, 5, 6])",
        "maxIncreasingGroups(x = [1, 4, 5, 9, 10, 11, 15])"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 10, 5, 25, 2, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,3,5,6], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [3, 5, 2, 7], k = 3)",
        "sumIndicesWithKSetBits(nums = [4, 2, 5, 1, 6, 3, 7], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 1, 0, 1, 1], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 3, 1, 2, 0], k = 2)"
    ],
    "sample_207": [
        "minimumOperations(num = \"125\")",
        "minimumOperations(num = \"025\")",
        "minimumOperations(num = \"110\")",
        "minimumOperations(num = \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(num = \"507500\")",
        "minimumOperations(num = \"01250\")",
        "minimumOperations(num = \"25002\")",
        "minimumOperations(num = \"1203\")",
        "minimumOperations(num = \"01100001\")",
        "minimumOperations(num = \"5000200050007500025000\")"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"RRRLLL\")",
        "furthestDistanceFromOrigin(moves = \"RRRLL\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"RLL\")",
        "furthestDistanceFromOrigin(moves = \"RLL\")",
        "furthestDistanceFromOrigin(moves = \"RLRRLL\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves=\"RRLL\")",
        "furthestDistanceFromOrigin(moves=\"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRR\")"
    ],
    "sample_206": [
        "minimumOperations(num = \"0123456789\")",
        "minimumOperations(num = \"0123456789\")",
        "minimumOperations(num = \"13\")",
        "minimumOperations(num = \"35\")",
        "minimumOperations(num = \"235\")",
        "minimumOperations(num = \"675\")",
        "minimumOperations(num = \"10025\")",
        "minimumOperations(num = \"1750\")",
        "minimumOperations(num = \"2125075\")",
        "minimumOperations(num = \"3470502501\")"
    ],
    "sample_155": [
        "canSplitArray(nums = [7,2,5,10,8], m = 20)",
        "canSplitArray(nums = [7, 2, 5], m = 10)",
        "canSplitArray(nums = [1, 1, 1, 3], m = 2)",
        "canSplitArray(nums = [3, 1, 2, 1], m = 4)",
        "canSplitArray(nums = [1, 1, 1, 1, 1, 1], m = 2)",
        "canSplitArray(nums = [1, 2, 4], m = 5)",
        "canSplitArray(nums = [1, 3, 3, 2, 1], m = 5)",
        "canSplitArray(nums = [1, 3, 5, 11, 15], m = 15)",
        "canSplitArray(nums = [5, 1, 2, 1, 3], m = 8)",
        "canSplitArray(nums = [2, 4, 3, 5, 7, 1, 2, 4], m = 8)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 1, 4, 2])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 2, 1, 1, 3])",
        "countCompleteSubarrays(nums = [3, 1, 3, 3, 3])",
        "countCompleteSubarrays(nums = [2, 2, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1, 1, 1, 2, 3, 3, 3, 4, 4, 4])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 3, 2])",
        "countCompleteSubarrays(nums = [0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "countCompleteSubarrays(nums = [1, 1, 2, 1, 1, 3, 3, 2, 1, 2, 1])",
        "countCompleteSubarrays(nums = [0, 0, 1, 2, 1, 1, 3, 1, 2])"
    ],
    "sample_202": [
        "minimumOperations(num = \"012345\")",
        "minimumOperations(num = \"502500\")",
        "minimumOperations(num = \"2002\")",
        "minimumOperations(num = \"325\")",
        "minimumOperations(num = \"502575\")",
        "minimumOperations(num = \"1110111\")",
        "minimumOperations(num = \"75257\")",
        "minimumOperations(num = \"251525\")",
        "minimumOperations(num = \"2125007525\")",
        "minimumOperations(num = \"02570525507052550705255\")"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [\"a,b\", \"c\"], b = \",\")",
        "splitWordsBySeparator(a = [\"a\", \"b\", \"c d\"], b = \" \")",
        "splitWordsBySeparator(a = [\"The\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\"], b = \" \")",
        "splitWordsBySeparator(a = [\"a bc\", \"de f\"], b = \" \")",
        "splitWordsBySeparator(a = [\"a-a-a\", \"b-b-b\", \"c-c-c\"], b = \"-\")",
        "splitWordsBySeparator(a = [\"b,e\"], b = \",\")",
        "splitWordsBySeparator(a = [\"t\",\"e\",\"x\",\"t\",\" \"], b = \" \")",
        "splitWordsBySeparator(a = [\"hello\", \"world\"], b = \"o\")",
        "splitWordsBySeparator(a = [\"abd\",\"cd\"], b = \"b\")",
        "splitWordsBySeparator(a = [\"bax1\", \"bay1\", \"baz1\", \"bax2\", \"bay2\"], b = \"x\")"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8, 16, 32, 64, 128], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8, 16, 32, 64, 128], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 2, 5, 1, 6, 3, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], k = 2)",
        "sumIndicesWithKSetBits(nums = [10, 11, 12, 13], k = 3)",
        "sumIndicesWithKSetBits(nums = [2,6,3,10,8], k = 1)"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = '1100')",
        "maximumOddBinaryNumber(s = '1100')",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = '11')",
        "maximumOddBinaryNumber(s = '10111')",
        "maximumOddBinaryNumber(s = \"010\")",
        "maximumOddBinaryNumber(s = \"1100\")",
        "maximumOddBinaryNumber(s = \"000\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [4,2,4,5,2,5,4,2,4], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,1,2,1,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,2,1,3,4,5], k = 3)",
        "longestEqualSubarray(nums = [1,1,1,2,2,2,2,2,3,3,3,3,3,4,5,6,6,6], k = 3)"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 1, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 3, 4, 3], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 1, 3, 4, 7, 2, 5], k = 5)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 4, 2, 2], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 2, 2, 2, 1, 1, 1], k = 0)",
        "longestEqualSubarray(nums = [1, 2, 1, 3, 4, 5, 2, 2, 4, 2], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 3, 4, 2, 3, 5, 1, 6, 2], k = 4)"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '1010')",
        "maximumOddBinaryNumber(s = '0100')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '0011')",
        "maximumOddBinaryNumber(s = '10011')",
        "maximumOddBinaryNumber(s = '10111')",
        "maximumOddBinaryNumber(s = \"11\")",
        "maximumOddBinaryNumber(s = \"1011101\")"
    ],
    "sample_166": [
        "isAcronym(words = [\"the\", \"quick\", \"brown\", \"fox\"], s = \"TQBF\")",
        "isAcronym(words = [\"a\", \"b\", \"c\"], s = \"abc\")",
        "isAcronym(words = [\"",
        "isAcronym(words = [\"a\", \"b\", \"c\"], s = \"abc\")",
        "isAcronym(words = [\"NASA\"], s = \"SANA\")",
        "isAcronym(words = [\"Google\", \"Apple\", \"Facebook\"], s = \"GOAFB\")",
        "isAcronym(words = [\"google\", \"facebook\", \"amazon\"], s = \"GOOGLFB\")",
        "isAcronym(words = [\"W\",\"A\",\"F\",\"T\"], s = \"WAFFT\")",
        "isAcronym(words = [\"Lisp\", \"Al\", \"Lis\", \"P\"], s = \"Lisp\")",
        "isAcronym(words = [\"resume\", \"premium\", \"microphone\"], s = \"premium\")"
    ],
    "sample_163": [
        "maxSum(nums = [-1, 4, 2, 11, 2])",
        "maxSum(nums = [3, 9, 1])",
        "maxSum(nums = [91, 4, 64, 3, 5])",
        "maxSum(nums = [-1, 10, 2, 3, 4])",
        "maxSum(nums = [19, 29, 21, 31])",
        "maxSum(nums = [9, 8, 9, 10, 10])",
        "maxSum(nums = [4, 444, 4, 444])",
        "maxSum(nums = [99, 2, 100, 1000])",
        "maxSum(nums = [19, 2, 3, 2, 6, 3, 8, 12])",
        "maxSum(nums=[737, 816, 176, 103, 898])"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumRightShifts(nums = [1,2,3,4,5,6])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6])",
        "minimumRightShifts(nums = [2, 1])",
        "minimumRightShifts(nums = [3, 5, 1])",
        "minimumRightShifts(nums = [6, 4, 3, 2, 1])",
        "minimumRightShifts(nums = [4,3,4,3,4])",
        "minimumRightShifts(nums = [2, 1, 3, 5, 2, 1, 2, 1, 2, 1])",
        "minimumRightShifts(nums = [2, 1, 3, 3, 2, 4, 4])"
    ],
    "sample_453": [
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aabcccccaaa\")",
        "minChanges(s = \"ABAB\")",
        "minChanges(s = \"abcdef\")",
        "minChanges(s = \"aabcccccaa\")",
        "minChanges(s = \"abaaa\")",
        "minChanges(s = \"abccbde\")",
        "minChanges(s = \"ABBBCCDD\")",
        "minChanges(s = \"LONGLONG\")",
        "minChanges(s = \"ddaacce"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [10, 5, 2, 7], target = 12)",
        "lengthOfLongestSubsequence(nums = [10, 5, 2, 7, 5, 12, 3], target = 9)",
        "lengthOfLongestSubsequence(nums = [10, 5, 2, 7], target = 100)",
        "lengthOfLongestSubsequence(nums = [3, 5, 1, 2, 4, 1], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 1], target = 0)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6], target = 5)",
        "lengthOfLongestSubsequence(nums = [5, 3, 1, 4, 2, 7], target = 12)",
        "lengthOfLongestSubsequence(nums = [2, 4, 5, 6, 8, 9, 10, 12], target = 32)",
        "lengthOfLongestSubsequence(nums = [2, 3, 4, 2, 7, 2, 1, 4, 8, 3, 6, 4, 2, 3, 6, 6], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 2, 1], target = 4)"
    ],
    "sample_367": [
        "sortVowels(s = \"HYMP\")",
        "sortVowels(s = 'MyPhH')",
        "sortVowels(s = \"Phil\")",
        "sortVowels(s = 'HYmpg')",
        "sortVowels(s = \"aYbZcD\")",
        "sortVowels(s = \"elbow\")",
        "sortVowels(s = \"Azyl\")",
        "sortVowels(s = \"You are the best of the best of the best\")",
        "sortVowels(s = \"fry\")",
        "sortVowels(s = \"ZyxwasvqBernardP\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [10, 5, 2, 7, 5, 8, 7], target = 12)",
        "lengthOfLongestSubsequence(nums = [10,1,2,7,6,1,5], target = 8)",
        "lengthOfLongestSubsequence(nums = [10, 5, 2, 7, 5, 101, 2], target = 9)",
        "lengthOfLongestSubsequence(nums = [1,3,5,7], target = 12)",
        "lengthOfLongestSubsequence(nums = [10, 5, 2, 7, 5, 100, 200, 1, 0, 20], target = 200)",
        "lengthOfLongestSubsequence(nums = [5, 10, 3], target = 12)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 2, 5, 6], target = 100)",
        "lengthOfLongestSubsequence(nums = [3, 4, 6, 6, 9, 10], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7], target = 8)",
        "lengthOfLongestSubsequence(nums = [3, 4, 6, 7, 8, 8, 12, 15, 16, 17, 17], target = 15)"
    ],
    "sample_381": [
        "countPairs(nums = [10, 15, 3, 7], t = 17)",
        "countPairs(nums = [10, 15, 3, 7], t = 17)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 8)",
        "countPairs(nums = [1, 3, 5, 7, 9], t = 10)",
        "countPairs(nums = [1, 1, 2, 2, 3, 3], t = 3)",
        "countPairs(nums=[1,2,3,6], t=7)",
        "countPairs(nums = [3, 5, 7, 9, 11], t = 23)",
        "countPairs(nums = [1,2,2], t = 3)",
        "countPairs(nums = [1, 1, 3, 4, 2], t = 4)",
        "countPairs(nums = [1, 5, 4, 2, 3, 9], t = 8)"
    ],
    "sample_366": [
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(nums = [2, 1])",
        "isGood(nums = [1, 2, 3, 5, 6, 7, 10])",
        "isGood(nums = [1, 3, 5, 2, 6])",
        "isGood(nums = [1, 5, 2, 3, 7, 10, 8, 6, 9, 4])"
    ],
    "sample_369": [
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = 'YmpH')",
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s = \"Philip\")",
        "sortVowels(s = \"My name is lYmpH\")",
        "sortVowels(s = \"yLmP\")",
        "sortVowels(s = \"My Ph11\")",
        "sortVowels(s = \"apple\")"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [2, 4, 1, 3])",
        "minimumRightShifts(nums = [1, 1, 1, 1, 1])",
        "minimumRightShifts(nums = [0, 3, 2, 1])",
        "minimumRightShifts(nums = [1, 2, 3, 3, 3])",
        "minimumRightShifts(nums = [5, 3, 6, 1, 4])",
        "minimumRightShifts(nums = [1, 3, 5, 1, 6])",
        "minimumRightShifts(nums = [3, 1, 2, 1, 4])",
        "minimumRightShifts(nums = [1, 3, 5])",
        "minimumRightShifts(nums = [4, 3, 1, 1, 5])"
    ],
    "sample_448": [
        "minChanges(s = \"ab\")",
        "minChanges(s = \"ba\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"baab\")",
        "minChanges(s = \"AB\")",
        "minChanges(s = \"aabaa\")",
        "minChanges(s = \"xyyx\")",
        "minChanges(s = \"xyxyxyxy\")",
        "minChanges(s = \"nna\")"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"aba\", s2 = \"aba\")",
        "canBeEqual(s1 = \"aba\", s2 = \"bba\")",
        "canBeEqual(s1 = \"aba\", s2 = \"bac\")",
        "canBeEqual(s1 = \"12\", s2 = \"21\")",
        "canBeEqual(s1 = \"cbaebabacd\", s2 = \"abc\")",
        "canBeEqual(s1 = \"abaa\", s2 = \"cdcd\")",
        "canBeEqual(s1 = \"bcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"aaaab\", s2 = \"baaabb\")",
        "canBeEqual(s1 = \"aacd\", s2 = \"abbd\")"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6])",
        "minLengthAfterRemovals(nums = [2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6])",
        "minLengthAfterRemovals(nums = [5,5])",
        "minLengthAfterRemovals(nums = [0,1,0,1,1])",
        "minLengthAfterRemovals(nums = [2, 2, 1, 1, 2, 1])",
        "minLengthAfterRemovals(nums = [1,1,1,2,2,3,4])",
        "minLengthAfterRemovals(nums = [5, 4, 6, 4, 4])",
        "minLengthAfterRemovals(nums = [3, 2, 1, 1, 2, 1, 3, 3, 3, 2, 2, 1, 1])"
    ],
    "sample_361": [
        "isGood(a = [1, 2, 3, 1, 2])",
        "isGood(a = [1, 2, 3, 3, 2, 1])",
        "isGood(a = [1, 1, 1, 2, 1])",
        "isGood(a = [1, 2, 3, 1, 2, 3])",
        "isGood(a = [2, 0, 2])",
        "isGood(a = [1, 2, 2, 4, 3])",
        "isGood(a = [2, 0, 1, 1])",
        "isGood(a = [1, 2, 2, 2, 3, 3, 3])",
        "isGood(a = [4, 0, 4])",
        "isGood(a = [1, 2, 2, 3, 3, 4, 1, 1, 2, 2, 3, 3, 4, 1])"
    ],
    "sample_419": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1,2,3,4], k = 2)",
        "minOperations(nums = [1, 1, 1], k = 3)",
        "minOperations(nums = [1, 4, 2, 3, 5, 6], k = 3)",
        "minOperations(nums = [3, 2, 3, 2, 3], k = 3)",
        "minOperations(nums = [2,5,2,2,5], k = 3)",
        "minOperations(nums = [3, 5, 1, 2, 1, 5], k = 4)",
        "minOperations(nums = [5,3,2,2,3,1], k = 3)",
        "minOperations(nums = [4, 7, 2, 3, 1, 5], k = 1)",
        "minOperations(nums = [3,3,1,1,2,1,2,1,2], k = 2)"
    ],
    "sample_478": [
        "findMaximumLength(nums=[1,3,2])",
        "findMaximumLength(nums = [1, 3, 2, 1])",
        "findMaximumLength(nums = [1,3,-1,-3,5,3,6,7])",
        "findMaximumLength(nums = [0, 1, 2, 3, 4, 5])",
        "findMaximumLength(nums = [1, 3, 2, 4, 7])",
        "findMaximumLength(nums = [2, 1, 4, 3, 2, 1])",
        "findMaximumLength(nums = [1, 3, 2, 4, 1, 1])",
        "findMaximumLength(nums = [5,1,2,3,2])",
        "findMaximumLength(nums=[0,2,0,0,1,0,0])",
        "findMaximumLength(nums = [2,3,4,2,5,2,3,2])"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1, 2, 3, 0])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1, 5, 2, 11, 6])",
        "maxSubarrays(nums = [4, 3, 2, 1, 5])",
        "maxSubarrays(nums = [12, 17, 3, 15, 10, 13, 4, 16, 3, 5, 11])",
        "maxSubarrays(nums = [5, 7, 3, 9, 6])",
        "maxSubarrays(nums = [5, 3, 5, 7, 1])",
        "maxSubarrays(nums = [2, 1, 2, 3, 1, 0, 2, 1, 2])",
        "maxSubarrays(nums = [1, 5, 11, 15, 12, 20])",
        "maxSubarrays(nums = [4, 2, 1, 2, 0, 4, 4, 1, 1, 5])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgd\")",
        "canMakeSubsequence(str1 = \"a\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"aaz\", str2 = \"bcaaz\")",
        "canMakeSubsequence(str1 = \"abcda\", str2 = \"ace\")",
        "canMakeSubsequence(str1 = \"aba\", str2 = \"z\")",
        "canMakeSubsequence(str1 = \"zxy\", str2 = \"zxy\")",
        "canMakeSubsequence(str1 = \"abbcc\", str2 = \"bccac\")",
        "canMakeSubsequence(str1 = \"axcz\", str2 = \"axbcxz\")",
        "canMakeSubsequence(str1 = \"abdef\", str2 = \"aabde\")",
        "canMakeSubsequence(str1 = 'qzux', str2 = 'abcy')"
    ],
    "sample_402": [
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 3)",
        "maxSum(nums = [7, 2, 4], m = 1, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8], m = 4, k = 3)",
        "maxSum(nums = [1, 2, 2, 3], m = 3, k = 2)",
        "maxSum(nums = [1, 1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(nums = [0, 1, 2, 4], m = 2, k = 4)",
        "maxSum(nums = [1, 1, 4, 1, 1], m = 3, k = 1)",
        "maxSum(nums = [-2,-3,-1,5,3,4,0], m = 3, k = 4)",
        "maxSum(nums = [0, 2, 5, 3], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 2, 3, 1, 2, 3, 4, 3], m = 3, k = 5)"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"abc\", \"def\"], x = \"d\")",
        "findWordsContaining(words = [\"the\", \"quick\", \"brown\", \"fox\"], x = \"u\")",
        "findWordsContaining(words = [\"abc\", \"bcd\", \"pqr\"], x = \"a\")",
        "findWordsContaining(words = [\"abc\", \"xyy\", \"xyz\"], x = \"y\")",
        "findWordsContaining(words = [\"a\",\"b\",\"ab\"], x = \"ab\")",
        "findWordsContaining(words = [\"abc\", \"xbc\", \"abx\", \"xbcdef\", \"abcdef\"], x = \"bc\")",
        "findWordsContaining(words = [\"abcd\",\"xyz\",\"qwer\"], x = \"z\")",
        "findWordsContaining(words = [\"abc\", \"bc\", \"zep\"], x = \"b\")",
        "findWordsContaining(words = [\"apple\", \"key\", \"qqqqq\", \"ab\"], x = \"qqqqq\")",
        "findWordsContaining(words = [\"jabberwocky\", \"my\", \"tardis\", \"joke\", \"is\", \"what\", \"is\", \"wrong\"], x = \"is\")"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"a\", \"prev\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = ['prev', '1', '2', 'prev', 'prev', '1', 'prev'])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\",\"1\",\"2\",\"next\",\"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"10\", \"prev\", \"12\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"prev\", \"2\", \"next\", \"2\"])",
        "lastVisitedIntegers(words = [\"30\", \"1\", \"2\", \"prev\", \"prev\"])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 4)",
        "minOperations(nums = [1, 5, 3, 4, 2], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [1, 5, 1, 1, 6, 1], k = 3)",
        "minOperations(nums = [6, 2, 4, 3, 7, 10, 1], k = 4)",
        "minOperations(nums = [3, 1, 3, 4, 2, 5, 5], k = 4)",
        "minOperations(nums = [1, 2, 4, 3, 1], k = 2)",
        "minOperations(nums = [2, 3, 4, 3, 6, 2, 3], k = 3)",
        "minOperations(nums = [2, 1, 3, 2, 4, 1, 1, 1], k = 3)",
        "minOperations(nums = [1, 3, 2, 5, 4, 7, 6, 10, 8, 9], k = 3)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 2)",
        "minOperations(nums = [3, 2, 1], k = 2)",
        "minOperations(nums = [1, 2, 3, 1], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4], k = 2)",
        "minOperations(nums = [3,1,2,4,3], k = 1)",
        "minOperations(nums = [1, 5, 2, 3], k = 3)",
        "minOperations(nums = [1, 3, 4, 5, 6, 7, 9], k = 2)",
        "minOperations(nums = [1, 3, 5, 1, 4, 5], k = 4)",
        "minOperations(nums = [3, 5, 7, 2, 8, 10], k = 2)"
    ],
    "sample_375": [
        "minimumSeconds(nums = [3, 1, 2, 4])",
        "minimumSeconds(nums = [1, 2, 2])",
        "minimumSeconds(nums = [2,1,3,2])",
        "minimumSeconds(nums = [2, 4, 2, 4, 4, 2])",
        "minimumSeconds(nums = [1,2,3,4,3,2,1])",
        "minimumSeconds(nums = [4, 2, 1, 2, 6, 2, 3, 4])",
        "minimumSeconds(nums=[3, 3, 3])",
        "minimumSeconds(nums = [0,1,3,5,6,8,12])",
        "minimumSeconds(nums = [4, 1, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4])",
        "minimumSeconds(nums = [1, 2, 4, 3, 5, 6, 10, 9, 12])"
    ],
    "sample_383": [
        "countPairs(nums = [10, 15, 3, 7], target = 17)",
        "countPairs(nums = [10, 15, 3, 7], target = 17)",
        "countPairs(nums = [1, 1, 1, 1], target = 3)",
        "countPairs(nums = [1, 1, 1, 1], target = 3)",
        "countPairs(nums = [1, 5, 1, 1, 6], target = 10)",
        "countPairs(nums = [1, 5, 10, 20, 8], target = 17)",
        "countPairs(nums = [2, 1, 3], target = 5)",
        "countPairs(nums = [2, 3, 5], target = 8)",
        "countPairs(nums = [4, 6, 1, 4], target = 6)",
        "countPairs(nums = [2, 3, 5, 6, 10], target = 15)"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"mango\", \"apple\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"grapes\"], x = \"a\")",
        "findWordsContaining(words = [\"abc\", \"def\", \"ghi\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"abc\", \"xyz\", \"aba\"], x = \"a\")",
        "findWordsContaining(words = [\"ba\", \"ab\", \"a\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"honeycomb\", \"pie\"], x = \"a\")",
        "findWordsContaining(words = [\"xylophone\", \"banana\", \"anaconda\"], x = \"a\")",
        "findWordsContaining(words = [\"dog\", \"lol\", \"lolol\"], x = \"lol\")"
    ],
    "sample_372": [
        "sortVowels(s = \"lEOtcede\")",
        "sortVowels(s = \"lEOtcede\")",
        "sortVowels(s = 'loetcede')",
        "sortVowels(s = \"leetcode\")",
        "sortVowels(s = \"leetcode\")",
        "sortVowels(s = \"ordered\")",
        "sortVowels(s = \"leetcoded\")",
        "sortVowels(s = \"leetcoded\")",
        "sortVowels(s = \"seethe\")",
        "sortVowels(s = \"InTheEnd\")"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [4, 4, 4, 3, 3])",
        "minLengthAfterRemovals(nums = [2,2,3,3])",
        "minLengthAfterRemovals(nums = [4, 4, 6, 7])",
        "minLengthAfterRemovals(nums = [3,3,3,3,3,3,3])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 4])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 3, 2, 3, 2, 4])",
        "minLengthAfterRemovals(nums = [5, 5, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 3, 2, 3, 4, 2, 2, 2])"
    ],
    "sample_452": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"ababa\")",
        "minChanges(s = \"abb\")",
        "minChanges(s = \"",
        "minChanges(s = \"abababab\")",
        "minChanges(s = \"aaaabb\")",
        "minChanges(s = \"010110\")",
        "minChanges(s = \"aaccccaaa\")"
    ],
    "sample_385": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 9)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8], target = 10)",
        "countPairs(nums = [1,3,2,6], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 12)",
        "countPairs(nums = [1, 3, 1, 3, 1], target = 4)",
        "countPairs(nums = [1, 1, 2, 2, 2, 3, 3, 3, 4, 4], target = 4)",
        "countPairs(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18], target = 18)",
        "countPairs(nums = [3, 3, 1, 3, 3], target = 9)",
        "countPairs(nums = [10,12,1,2,3,4,5,6], target = 13)"
    ],
    "sample_427": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minOperations(nums = [1, 1, 1, 3, 3, 2, 2, 2])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6])",
        "minOperations(nums = [1, 3, 2, 6, 1, 4, 1, 4, 2])",
        "minOperations(nums = [2, 3, 2, 3, 2, 4])",
        "minOperations(nums = [1,1,2,2,2,2,3,4])",
        "minOperations(nums = [2, 4, 3, 4, 4])",
        "minOperations(nums = [1, 2, 3, 2, 2, 3, 3, 2, 2, 3, 2])"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1,1])",
        "minLengthAfterRemovals(nums = [1,1,1,3,3,2,2,2])",
        "minLengthAfterRemovals(nums = [2, 2, 3, 2])",
        "minLengthAfterRemovals(nums = [1,3,2])",
        "minLengthAfterRemovals(nums = [0, 0, 1])",
        "minLengthAfterRemovals(nums = [0, 0, 0, 1])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 2, 3, 3, 4])",
        "minLengthAfterRemovals(nums = [10, 10, 5, 5, 2, 2, 7, 7])"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 4])",
        "minimumCoins(prices = [1, 2, 1])",
        "minimumCoins(prices = [1, 3, 5, 6])",
        "minimumCoins(prices = [2, 5, 6, 1])",
        "minimumCoins(prices = [1, 5, 10, 25, 50, 100])",
        "minimumCoins(prices = [4, 2, 3, 2, 1])",
        "minimumCoins(prices = [2, 2, 2, 3, 7])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"abc\", \"",
        "findWordsContaining(words = [\"apple\", \"banana\", \"",
        "findWordsContaining(words = [\"abcde\", \"fghij\", \"klmno\", \"pqrst\", \"fguij\"], x = \"i\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"tomato\"], x = \"a\")",
        "findWordsContaining(words = [\"water\", \"bottle\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"abc\", \"xyz\", \"bca\"], x = \"bc\")",
        "findWordsContaining(words = [\"abc\", \"xyz\", \"qwe\"], x = \"x\")",
        "findWordsContaining(words = [\"elephant\", \"octopus\", \"monkey\", \"elephant\"], x = \"e\")",
        "findWordsContaining(words = [\"abcd\", \"bde\", \"abc\"], x = \"a\")",
        "findWordsContaining(words = [\"WoOd\",\"WOOd\",\"wood\"], x = \"oo\")"
    ],
    "sample_420": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [4, 5, 1, 2, 3], k = 2)",
        "minOperations(nums = [2, 3, 1, 4, 5], k = 2)",
        "minOperations(nums = [2, 2, 2, 2, 2], k = 3)",
        "minOperations(nums = [3, 4, 1, 2, 5, 6], k = 3)",
        "minOperations(nums = [4, 6, 3, 1], k = 3)",
        "minOperations(nums = [1, 5, 10, 15, 15], k = 3)",
        "minOperations(nums = [5, 5, 4, 4, 4, 3, 3, 3, 3, 3], k = 4)",
        "minOperations(nums = [13, 2, 11, 10, 4], k = 4)"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 4, 3])",
        "isGood(nums = [4, 3, 2, 1])",
        "isGood(nums = [1,2,3,4,5,6])",
        "isGood(nums = [1, 4, 2])",
        "isGood(nums = [2, 1, 3, 5])",
        "isGood(nums = [5, 3, 1, 2, 4])",
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [1,2,4])",
        "isGood(nums = [1, 2, 3, 4, 10, 6])"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [10, 5, 2, 6], target = 10)",
        "lengthOfLongestSubsequence(nums = [1], target = 1)",
        "lengthOfLongestSubsequence(nums = [1, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [10, 5, 2, 7], target = 12)",
        "lengthOfLongestSubsequence(nums = [5,1,3,4,7], target = 6)",
        "lengthOfLongestSubsequence(nums = [2, 3, 1, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 1, 1, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [2, 7, 9], target = 12)",
        "lengthOfLongestSubsequence(nums = [-3, 3, -1, 4, -2], target = 1)",
        "lengthOfLongestSubsequence(nums = [4,2,3,10,8,9,1,7], target = 100)"
    ],
    "sample_365": [
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1,2,3,4])",
        "isGood(nums = [1,2,3,4])",
        "isGood(nums = [3, 2, 1])",
        "isGood(nums = [1,2,1])",
        "isGood(nums = [1, 1, 1, 2, 3])",
        "isGood(nums = [4, 5, 1, 2, 3])",
        "isGood(nums = [3,4,2,3])",
        "isGood(nums = [0, 2, 4, 4])"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256])",
        "maxSubarrays(nums = [16, 5, 4, 8, 15, 13, 6, 1, 10])",
        "maxSubarrays(nums = [1, 2, 0, 2, 1])",
        "maxSubarrays(nums = [10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",
        "maxSubarrays(nums = [1, 2, 1, 1, 1, 1, 1, 1, 1, 2])",
        "maxSubarrays(nums = [1, 5, 3, 1, 1])",
        "maxSubarrays(nums = [10, 5, 2, 7, 5, 2, 4, 8, 9])",
        "maxSubarrays(nums = [3, 2, 1, 6, 7, 8, 9, 10, 11, 12])",
        "maxSubarrays(nums = [6, 1, 5, 4, 10, 3])",
        "maxSubarrays(nums = [1, 2, 3, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [10, 5, 2, 7, 5, 8, 7], target = 12)",
        "lengthOfLongestSubsequence(nums = [10, 5, 2, 7, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [10,1,2,7,5,8], target = 100)",
        "lengthOfLongestSubsequence(nums=[10,1,2,7,6,1,5], target=8)",
        "lengthOfLongestSubsequence(nums = [10, 5, 2, 7, 5, 100, 20], target = 82)",
        "lengthOfLongestSubsequence(nums = [-1, 5, 3, 4, 0], target = 8)",
        "lengthOfLongestSubsequence(nums=[1,3,5,7,9,11], target=15)",
        "lengthOfLongestSubsequence(nums=[10, 5, 2, 7, 5, 2, 4, 1, 7, 4], target=9)",
        "lengthOfLongestSubsequence(nums = [4,6,2,4,2,3,5], target = 10)",
        "lengthOfLongestSubsequence(nums=[1,2,1,3,5,1000], target=6)"
    ],
    "sample_450": [
        "minChanges(s = \"aabcc\")",
        "minChanges(s = \"aabcc\")",
        "minChanges(s = \"abcc\")",
        "minChanges(s = \"abccde\")",
        "minChanges(s = \"abbabaa\")",
        "minChanges(s = \"zzz\")",
        "minChanges(s = \"abcbabcbcbc\")",
        "minChanges(s = \"baabccbbab\")",
        "minChanges(s = \"aaabccccbb\")",
        "minChanges(s = \"RRL\")"
    ],
    "sample_463": [
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 10, limit = 10)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 10, limit = 4)",
        "distributeCandies(n=10, limit=2)",
        "distributeCandies(n = 11, limit = 4)"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 1])",
        "sumCounts(nums = [1, 1, 1, 2])",
        "sumCounts(nums = [1, 2, 2, 3, 3, 3])",
        "sumCounts(nums = [1, 2, 4, 5, 3])",
        "sumCounts(nums = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2])"
    ],
    "sample_449": [
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aabcc\")",
        "minChanges(s = \"aabcccccaaa\")",
        "minChanges(s = \"aaaaa\")",
        "minChanges(s = \"aabba\")",
        "minChanges(s = \"abcbdd\")",
        "minChanges(s = \"011101\")",
        "minChanges(s = \"AAAABBBBCCCC\")",
        "minChanges(s = \"mps\")"
    ],
    "sample_425": [
        "minOperations(nums = [1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minOperations(nums = [1, 2, 2, 3, 3])",
        "minOperations(nums = [1, 2, 3, 4])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])",
        "minOperations(nums = [1,1,2,2,3,3,3,4,4])",
        "minOperations(nums = [2, 2, 3, 4, 3, 3])",
        "minOperations(nums = [2,1,1,2,2,2])",
        "minOperations(nums = [2, 1, 3, 2, 1, 2, 1, 3, 2, 1, 3, 2, 1, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1,"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"abca\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"zazbz\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"xyz\", str2 = \"xzy\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"acd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bbac\")",
        "canMakeSubsequence(str1 = \"baa\", str2 = \"aaa\")",
        "canMakeSubsequence(str1 = \"m\", str2 = \"am\")",
        "canMakeSubsequence(str1 = \"zazazaz\", str2 = \"abac\")",
        "canMakeSubsequence(str1 = \"azbeez\", str2 = \"zbeezcc\")",
        "canMakeSubsequence(str1 = \"ahitiv\", str2 = \"hitaiv\")"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1, 2, 3, 4, 7, 8, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 7, 10])",
        "minimumSeconds(nums=[3, 2, 1])",
        "minimumSeconds(nums = [1, 3, 1, 2])",
        "minimumSeconds(nums = [1, 2, 2, 3, 4, 5])",
        "minimumSeconds(nums=[2, 3, 1, 1, 2])",
        "minimumSeconds(nums = [1, 1, 1, 2, 2, 2])",
        "minimumSeconds(nums = [3, 1, 5, 2])",
        "minimumSeconds(nums = [1,2,3,4,5,10,11,12,13,14])",
        "minimumSeconds(nums=[1,2,3,4,5])"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [10, 5, 2, 6], target = 10)",
        "lengthOfLongestSubsequence(nums = [10,1,2,7,5,8,7], target = 5)",
        "lengthOfLongestSubsequence(nums = [5,6,7,8], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,2,1], target = 10)",
        "lengthOfLongestSubsequence(nums = [2,4,5,7], target = 11)",
        "lengthOfLongestSubsequence(nums = [4, 1, 3], target = 2)",
        "lengthOfLongestSubsequence(nums = [2, 3, 4, 5, 7, 1, 8, 10], target = 12)",
        "lengthOfLongestSubsequence(nums = [7, 5, 5, 9, 1], target = 10)",
        "lengthOfLongestSubsequence(nums=[2,1,1,4,5,6,1,8,1], target=11)",
        "lengthOfLongestSubsequence(nums = [5, 2, 4, 1, 3, 5, 2, 1, 4, 5, 3, 4, 5, 3, 2, 5], target = 12)"
    ],
    "sample_370": [
        "sortVowels(s = \"lEOtcede\")",
        "sortVowels(s = 'letcode')",
        "sortVowels(s = \"LEOTCED\")",
        "sortVowels(s = \"leetcode\")",
        "sortVowels(s = \"leetcode\")",
        "sortVowels(s = \"Noticed\")",
        "sortVowels(s = \"EAOtced\")",
        "sortVowels(s = 'leotcede')",
        "sortVowels(s = \"Hellow world!\")",
        "sortVowels(s = \"bacacccdee\")"
    ],
    "sample_421": [
        "minOperations(nums = [1, 2, 3, 4], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "minOperations(nums = [3,1,3,4,2], k = 3)",
        "minOperations(nums = [1, 2, 3, 3], k = 3)",
        "minOperations(nums = [1, 1, 2, 2], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], k = 3)",
        "minOperations(nums = [1, 1, 1, 1, 2], k = 2)",
        "minOperations(nums = [5, 3, 1, 4, 2], k = 2)",
        "minOperations(nums = [1, 2, 3, 3], k = 4)",
        "minOperations(nums = [2, 5, 1, 3, 6], k = 2)"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1, 3, 5, 3])",
        "maxSubarrays(nums = [4, 2, 6, 5, 1, 3])",
        "maxSubarrays(nums = [11, 2, 4, 1, 8])",
        "maxSubarrays(nums = [-1, -2, 3, 3])",
        "maxSubarrays(nums = [2, 4, 4, 2, 4, 4, 2, 4])",
        "maxSubarrays(nums = [3, 10, 5, 2, 6, 4, 8, 2])",
        "maxSubarrays(nums = [100, 3, 5, 3, 1, 200])",
        "maxSubarrays(nums = [4, 16, 8, 4, 64, 32, 8])",
        "maxSubarrays(nums = [12, -12, 13, -16, 11, -2, 19])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[1, 3], [1, 4], [2, 4], [3, 1], [3, 2], [4, 1], [4, 2]], k = 1)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 3], [4, 5]], k = 1)",
        "countPairs(coordinates = [[1, 1], [3, 2], [5, 3], [4, 1], [2, 3], [1, 4]], k = 3)",
        "countPairs(coordinates = [[1, 2], [2, 3], [2, 4], [4, 5]], k = 2)",
        "countPairs(coordinates = [[1, 2], [2, 3], [3, 1], [1, 3], [2, 3]], k = 2)",
        "countPairs(coordinates = [[2, 4], [3, 5], [1, 7], [2, 5]], k = 3)",
        "countPairs(coordinates = [[5, 5], [-5, -5], [2, 5], [-2, -5], [1, 1], [-1, -1]], k = 2)",
        "countPairs(coordinates = [[2,4],[2,5],[4,5],[2,6],[5,6],[6,7],[2,7],[3,7],[4,7],[5,7],[5,8],[6,8],[6,9],[7,9],[8,9],[9,10]], k = 3)",
        "countPairs(coordinates = [[3, 4], [1, 2], [3, 1], [2, 2], [1, 1], [2, 4], [1, 4], [3, 2], [4, 2], [2, 3], [4, 1], [4, 4]], k = 1)"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [10, 5, 2, 3, 7, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [3, 5, 1, 2, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums=[10, 5, 2, 3, 7, 5], target=12)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6], target = 10)",
        "lengthOfLongestSubsequence(nums = [8, 1, 3, 4, 7], target = 10)",
        "lengthOfLongestSubsequence(nums = [10, 5, 2, 3, 7, 5, 6], target = 9)",
        "lengthOfLongestSubsequence(nums = [4, 4], target = 8)",
        "lengthOfLongestSubsequence(nums = [10, 5, 2, 7, 5, 12, 24, 1], target = 9)",
        "lengthOfLongestSubsequence(nums = [8, 7, 13, 25, 10], target = 10)"
    ],
    "sample_445": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1,2,2])",
        "sumCounts(nums = [1,1,2,2])",
        "sumCounts(nums = [1, 2, 2, 3, 3, 3])",
        "sumCounts(nums=[1,2,3,2])",
        "sumCounts(nums = [1,1,1,2,2,2,3])",
        "sumCounts(nums = [2,3,3,2])",
        "sumCounts(nums = [1, 1, 1, 2, 2, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 2, 2, 1, 1, 3])",
        "sumCounts(nums = [0, 1, 1, 1, 2, 3, 1])"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumBeautifulSubstrings(s = \"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "minimumBeautifulSubstrings(s = \"0123456789abcdef\")",
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(s = \"aaabbb\")",
        "minimumBeautifulSubstrings(s = \"a0b1c2\")",
        "minimumBeautifulSubstrings(s = \"010205\")",
        "minimumBeautifulSubstrings(s = \"5216852168521\")",
        "minimumBeautifulSubstrings(s = \"0100001001101110111010111110110111\")",
        "minimumBeautifulSubstrings(s = \"0011011001101110001101111011111110011101011110000011111000011011001101111011011010011111111011110110011101110110001100111011111010111101111011111110110110110011011000011101110011111011001111111101111110111100111111100110110111011110111001101111011110011011100111011100001110001001111001101110111100110111001101111000110110110011101100110000101011111111011111101100111101110011110001110110101111110001111011001111001111011100110101100111111111011011011011010111111100110110101110111011101110000110011011011100"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [2, 4, 6, 2, 5])",
        "maxSubarrays(nums = [1,0,1,0,1])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 0, 1, 0])",
        "maxSubarrays(nums = [3, 2, 1, 2, 3])",
        "maxSubarrays(nums = [1,0,0,1,0,1])",
        "maxSubarrays(nums = [2, 6, 4, 2, 4])",
        "maxSubarrays(nums = [1, 3, 2, 2])",
        "maxSubarrays(nums = [1, 3, -3, 3, 1])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1])"
    ],
    "sample_401": [
        "maxSum(nums = [1, 3, -1, -3, 5, 3, 6, 7], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3], m = 1, k = 2)",
        "maxSum(nums = [1, 2, 3], m = 3, k = 2)",
        "maxSum(nums = [1, 10, 10, 1], m = 2, k = 2)",
        "maxSum(nums = [3, 1, 4, 2, 2], m = 3, k = 2)",
        "maxSum(nums = [0, 0, 2, 1, 0, 0], m = 2, k = 3)",
        "maxSum(nums = [-10, -4, -3, 4, 7], m = 2, k = 3)",
        "maxSum(nums = [6, 5, 4, 3, 2, 1, 1, 1], m = 4, k = 2)",
        "maxSum(nums = [-5, -3, -2, 2, 4], m = 3, k = 4)",
        "maxSum(nums = [5, 6, 4, 7, 2, 1, 8, 9, 3, 4, 5, 10, 6, 15, 7, 15, 8, 10], m = 3, k = 4)"
    ],
    "sample_400": [
        "maxSum(A = [1, 1, 1, 1, 1, 1, 1], m = 2, k = 3)",
        "maxSum(A = [0, 0, 0, 0, 0, 0], m = 3, k = 1)",
        "maxSum(A = [1,2,1,2,6,7,5,1], m = 3, k = 3)",
        "maxSum(A = [1, 1, 2, 1, 1], m = 4, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 5, k = 2)",
        "maxSum(A = [1, -1, 2, 3, -2], m = 2, k = 4)",
        "maxSum(A = [2, 3, 6, 7, 10], m = 3, k = 2)",
        "maxSum(A = [1, 3, 2, 7, 6, 5, 4], m = 3, k = 2)",
        "maxSum(A = [3, 3, 1, 3, 4, 5, 1, 2, 4], m = 2, k = 3)",
        "maxSum(A = [-10, 11, -13, -14, -2, -3, 4, 5, 6, 7, -8], m = 3, k = 2)"
    ],
    "sample_363": [
        "isGood(nums = [1, 2, 2])",
        "isGood(nums = [4, 1, 3, 2])",
        "isGood(nums = [2, 4, 1, 3])",
        "isGood(nums = [4, 4, 4])",
        "isGood(nums = [1,1,2,2,4])",
        "isGood(nums = [2, 4, 4, 2, 4, 4])",
        "isGood(nums = [1,1,2,2,1])",
        "isGood(nums = [1,2,3,4,5,3,3,4,2,1])",
        "isGood(nums = [5, 3, 1, 2, 5, 2, 1, 1])",
        "isGood(nums = [3, 4, 3, 4, 5, 3, 4, 5, 6, 5, 4, 5, 5, 4, 5])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])",
        "minimumSeconds(nums = [1, 1, 1, 1, 1])",
        "minimumSeconds(nums = [2, 1, 1, 2, 1])",
        "minimumSeconds(nums = [1,2,3,4,5,6])",
        "minimumSeconds(nums = [1, 1, 2, 1, 1])",
        "minimumSeconds(nums = [3, 5, 1, 2, 1, 3])",
        "minimumSeconds(nums = [2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2])",
        "minimumSeconds(nums = [2, 4, 6, 2, 5, 6, 7, 9, 3, 8, 9, 10])",
        "minimumSeconds(nums = [2, 1, 4, 3, 1, 2, 2, 3, 4, 2, 3, 4, 3, 1, 2, 1, 4, 3, 1, 2, 1])"
    ],
    "sample_376": [
        "minimumSeconds(nums = [3, 2, 1, 2, 1, 7])",
        "minimumSeconds(nums = [1, 2, 3, 2])",
        "minimumSeconds(nums = [1,2,3,4,3,2,1])",
        "minimumSeconds(nums = [3, 1, 2, 2])",
        "minimumSeconds(nums = [5, 5, 4, 4, 3, 3, 2, 2, 1, 1])",
        "minimumSeconds(nums = [4, 1, 1, 4, 2, 3])",
        "minimumSeconds(nums = [1,1,2,3,4,5,6,7,8])",
        "minimumSeconds(nums = [3, 2, 3, 1, 1, 3])",
        "minimumSeconds(nums = [1, 4, 2, 1, 8, 3, 6, 4, 1])",
        "minimumSeconds(nums = [3, 2, 2, 3, 2, 3, 2, 2, 3])"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1,2,3,4])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 3])",
        "minLengthAfterRemovals(nums = [1,1,2,3])",
        "minLengthAfterRemovals(nums = [1,3,4,2,1,7])",
        "minLengthAfterRemovals(nums = [1,3,2,4])",
        "minLengthAfterRemovals(nums = [4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,",
        "minLengthAfterRemovals(nums = [3,3,3,3,3,2,2,2,2,1,1,1,1])",
        "minLengthAfterRemovals(nums=[1, 3, 2, 1, 1, 5])",
        "minLengthAfterRemovals(nums = [100, 2, 100, 4, 100, 2, 1])",
        "minLengthAfterRemovals(nums=[2, 3, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,"
    ],
    "sample_399": [
        "maxSum(nums = [1,2,3,2], m = 2, k = 3)",
        "maxSum(nums = [1, 4, 2, 1, 3, 4, 2, 3], m = 3, k = 3)",
        "maxSum(nums = [0, 0, 1, 0, 0, 0, 1], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5,1,2,3,4,5], m = 2, k = 3)",
        "maxSum(nums = [2,2,1,2], m = 3, k = 3)",
        "maxSum(nums = [1,3,2,5,5,4], m = 2, k = 3)",
        "maxSum(nums = [1,3,1,4,5,4], m = 3, k = 3)",
        "maxSum(nums = [1,2,1,1,1,2,1,1,2], m = 2, k = 2)",
        "maxSum(nums = [0,0,0,0,0,0,0,1000000], m = 4, k = 4)",
        "maxSum(nums = [7, 10, 1, 9, 100, 100, 100], m = 2, k = 3)"
    ],
    "sample_397": [
        "maxSum(nums = [10, -10, 10, -10, 10], m = 2, k = 2)",
        "maxSum(nums = [1, 1], m = 2, k = 2)",
        "maxSum(nums = [1,1,1,1,1], m = 1, k = 5)",
        "maxSum(nums = [1,1,1,1], m = 2, k = 3)",
        "maxSum(nums = [0, 1, 0, 0, 1, 1], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 1, 4, 5, 1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 2, 2, 5, 2, 3, 6, 7], m = 2, k = 4)",
        "maxSum(nums = [10, 1, 1, 6, 7], m = 3, k = 2)",
        "maxSum(nums = [-3, -2, 3, 0, 0, -1], m = 2, k = 4)",
        "maxSum(nums = [1, 2, 4, 5, 5, 4, 4, 5, 6, 7, 8], m = 3, k = 5)"
    ],
    "sample_364": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1,2,3])",
        "isGood(nums=[1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5,6,7,8,9])",
        "isGood(nums = [1, 5, 3])",
        "isGood(nums = [1, 4, 5])",
        "isGood(nums = [5, 4, 3, 2, 1, 0])",
        "isGood(nums = [3, 4, 2, 6, 7, 1])",
        "isGood(nums = [3, 5, 1, 2, 3, 6, 7])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 1, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 3, 3])",
        "minLengthAfterRemovals(nums = [0, 1, 1, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 4, 5, 6])",
        "minLengthAfterRemovals(nums = [0,0,0,1,1,1])",
        "minLengthAfterRemovals(nums = [3, 1, 3, 4, 2, 1])",
        "minLengthAfterRemovals(nums = [2,1,2,5,3,2,6])"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"flower\", \"flow\", \"flight\"], x = \"flow\")",
        "findWordsContaining(words = [\"apple\", \"banana\"], x = \"ana\")",
        "findWordsContaining(words = [\"this\", \"that\"], x = \"t\")",
        "findWordsContaining(words = [\"love\", \"leetcode\", \"apple\"], x = \"e\")",
        "findWordsContaining(words = [\"con\", \"cat\", \"dog\"], x = \"t\")",
        "findWordsContaining(words = [\"aardvark\", \"baboon\", \"bison\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"banana\", \"foobar\", \"hello\"], x = \"l\")",
        "findWordsContaining(words = [\"zombie\", \"pizza\", \"simsalabim\"], x = \"im\")",
        "findWordsContaining(words = [\"slic\", \"dice\", \"ice\"], x = \"s\")",
        "findWordsContaining(words = [\"apple\", \"bannana\", \"aardvark\", \"aragonite\"], x = \"an\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [3, 5, 8])",
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins(prices = [1, 3, 4, 5, 6, 7, 8])",
        "minimumCoins(prices = [3, 5, 10, 1])",
        "minimumCoins(prices = [1, 5, 10, 10, 21, 23])",
        "minimumCoins(prices = [3, 7, 12, 100])",
        "minimumCoins(prices = [1, 2, 10, 4, 20, 6, 100])",
        "minimumCoins(prices = [2, 1, 5, 7, 1, 9, 11, 6])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"0123456789\")",
        "minimumBeautifulSubstrings(s = \"0123456789\")",
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(s = \"0123456789\")",
        "minimumBeautifulSubstrings(s = \"0001100\")",
        "minimumBeautifulSubstrings(s = \"0000011111\")",
        "minimumBeautifulSubstrings(s = \"0101110010101\")",
        "minimumBeautifulSubstrings(s = \"01110111101111001\")",
        "minimumBeautifulSubstrings(s = \"a011570\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"acb\")",
        "canBeEqual(s1 = \"ab\", s2 = \"cb\")",
        "canBeEqual(s1 = \"aaa\", s2 = \"aba\")",
        "canBeEqual(s1 = \"aa\", s2 = \"cc\")",
        "canBeEqual(s1 = \"aba\", s2 = \"abd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bda\")",
        "canBeEqual(s1 = \"Aa\", s2 = \"Ba\")",
        "canBeEqual(s1 = \"kkkp\", s2 = \"pkkk\")",
        "canBeEqual(s1 = \"asdf\", s2 = \"zvcd\")"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bca\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"bdac\")",
        "canMakeSubsequence(str1 = \"abd\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"def\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abxabz\")",
        "canMakeSubsequence(str1 = \"aba\", str2 = \"zabz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"aacba\")",
        "canMakeSubsequence(str1 = \"acd\", str2 = \"aab\")",
        "canMakeSubsequence(str1 = \"abd\", str2 = \"abzzzzc\")"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 3, 3])",
        "minLengthAfterRemovals(nums = [2,2,2,2,2])",
        "minLengthAfterRemovals(nums = [1,2,3,2])",
        "minLengthAfterRemovals(nums = [2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [2, 3, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [5, 5, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [4, 1, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 2, 2, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [3, 5, 6, 5, 6, 3])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"aba\", s2 = \"baa\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"aa\", s2 = \"bb\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ca\")",
        "canBeEqual(s1 = \"abb\", s2 = \"bba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"caeb\")",
        "canBeEqual(s1 = \"hio\", s2 = \"oih\")",
        "canBeEqual(s1 = \"aba\", s2 = \"aba\")"
    ],
    "sample_382": [
        "countPairs(nums = [10, 15, 3, 7], target = 17)",
        "countPairs(nums = [10, 15, 3, 7], target = 17)",
        "countPairs(nums = [10, 15, 3, 7], target = 17)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6, 7], target = 9)",
        "countPairs(nums = [1, 1, 1, 1, 1, 1], target = 4)",
        "countPairs(nums = [3, 5, 2, 1], target = 10)",
        "countPairs(nums = [2, 4, 8, 9, 10], target = 18)",
        "countPairs(nums = [1, 5, 6, 2, 1, 9], target = 9)",
        "countPairs(nums = [5, 5, 7, 7, 7, 2, 3, 1, 1, 4], target = 10)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"abc\", s2 = \"ahbgdc\")",
        "canMakeSubsequence(s1 = \"a\", s2 = \"z\")",
        "canMakeSubsequence(s1 = \"aba\", s2 = \"baba\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"cab\")",
        "canMakeSubsequence(s1 = \"egg\", s2 = \"add\")",
        "canMakeSubsequence(s1 = \"zab\", s2 = \"zaab\")",
        "canMakeSubsequence(s1 = \"bz\", s2 = \"zaa\")",
        "canMakeSubsequence(s1 = \"xza\", s2 = \"xzab\")",
        "canMakeSubsequence(s1 = \"zaa\", s2 = \"zzbz\")",
        "canMakeSubsequence(s1 = \"xzfua\", s2 = \"axxuzfua\")"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"a\", \"b\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"a\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"push\", \"push\", \"1\", \"2\", \"push\", \"3\", \"pop\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"next\", \"next\", \"prev\", \"prev\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = ['1', '2', 'prev', 'prev', 'prev', 'prev'])",
        "lastVisitedIntegers(words = [\"next\", \"2\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"start\", \"0\", \"0\", \"0\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"1\", \"prev\", \"prev\", \"prev\", \"2\", \"1\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"push\", \"12\", \"push\", \"1\", \"push\", \"2\", \"push\", \"3\", \"1\", \"2\", \"push\", \"5\", \"pop\", \"1\", \"pop\", \"5\", \"push\", \"1\", \"push\", \"2\", \"pop\", \"pop\", \"pop\", \"pop\", \"pop\", \"pop\", \"pop\", \"pop\", \"pop\", \"pop\", \"pop\", \"pop\", \"pop\", \"pop\", \"pop\"])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6]], k = 1)",
        "countPairs(coordinates = [[1, 3], [1, 4], [2, 1], [2, 2], [2, 3], [2, 4], [3, 1], [4, 1], [4, 2], [4, 3]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [1, 0], [0, 1], [1, 2], [2, 1], [2, 0], [0, 2], [2, 2], [1, 3]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [1, -1], [2, 1]], k = 2)",
        "countPairs(coordinates = [[3, 1], [3, 2], [2, 1], [2, 2]], k = 1)",
        "countPairs(coordinates = [[4, 5], [2, 3], [1, 1], [4, 5], [2, 3], [1, 1]], k = 3)",
        "countPairs(coordinates = [[1, 1], [-1, 0], [0, -1], [0, 0], [1, 0], [1, 1], [-1, 1]], k = 3)",
        "countPairs(coordinates = [[3, 1], [4, 2], [4, 3], [3, 4], [2, 4], [2, 3], [1, 2], [0, 2], [0, 1], [1, 3]], k = 2)",
        "countPairs(coordinates = [[1, 1], [2, 2], [4, 2], [5, 3], [2, 3], [4, 4]], k = 3)",
        "countPairs(coordinates = [[1, 2], [2, 3], [1, 3], [2, 1], [1, 4], [1, 5], [5, 6], [6, 7], [6, 2], [3, 5], [4, 7]], k = 5)"
    ],
    "sample_451": [
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"ab\")",
        "minChanges(s = \"acb\")",
        "minChanges(s = \"aaba\")",
        "minChanges(s = \"",
        "minChanges(s = \"abcdd\")",
        "minChanges(s = \"aabcccc\")"
    ],
    "sample_461": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 12, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 11, limit = 4)",
        "distributeCandies(n = 9, limit = 4)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 12, limit = 6)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cabd\")",
        "canBeEqual(s1 = \"saw\", s2 = \"awes\")",
        "canBeEqual(s1 = \"420\", s2 = \"420\")",
        "canBeEqual(s1 = \"cabac\", s2 = \"acba\")",
        "canBeEqual(s1 = \"xaxx\", s2 = \"abcc\")"
    ],
    "sample_460": [
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 10, limit = 10)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 9, limit = 4)",
        "distributeCandies(n = 8, limit = 6)",
        "distributeCandies(n = 11, limit = 2)"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 10)",
        "accountBalanceAfterPurchase(p = 11)",
        "accountBalanceAfterPurchase(p = 99)",
        "accountBalanceAfterPurchase(p = 99)",
        "accountBalanceAfterPurchase(p = 99)",
        "accountBalanceAfterPurchase(p = 80)",
        "accountBalanceAfterPurchase(p = 110)",
        "accountBalanceAfterPurchase(p = 1000)",
        "accountBalanceAfterPurchase(p = 29)",
        "accountBalanceAfterPurchase(p = 245)"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 2, 2, 3, 3])",
        "sumCounts(nums = [2, 3, 4])",
        "sumCounts(nums = [0, 1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 3, 4, 1, 5, 9])",
        "sumCounts(nums = [0, 2, 4, 4])",
        "sumCounts(nums = [1, 3, 3, 4, 4, 4, 5])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1, 3, 2])",
        "minimumSeconds(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(A = [1, 2, 3, 4, 7])",
        "minimumSeconds(A = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "minimumSeconds(A = [3, 1, 2, 4, 5])",
        "minimumSeconds(A = [2, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])",
        "minimumSeconds(A = [1, 5, 3, 1, 4])",
        "minimumSeconds(A = [10, 5, 17, 4, 12, 11, 13, 7, 8, 5])"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ac\")",
        "canMakeSubsequence(str1 = \"azc\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ac\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"cab\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bbb\")",
        "canMakeSubsequence(str1 = \"zab\", str2 = \"zaabc\")",
        "canMakeSubsequence(str1 = \"ac\", str2 = \"b\")",
        "canMakeSubsequence(str1 = \"zaba\", str2 = \"abcz\")",
        "canMakeSubsequence(str1 = \"fgtxy\", str2 = \"fxgy\")"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 3, 2])",
        "minimumRightShifts(nums = [4, 3, 2, 1])",
        "minimumRightShifts(nums = [3, 1, 5])",
        "minimumRightShifts(nums = [3, 5, 2])",
        "minimumRightShifts(nums = [3, 5, 1, 2, 6])",
        "minimumRightShifts(nums = [9, 1, 1])",
        "minimumRightShifts(nums = [3, 5, 8, 100])",
        "minimumRightShifts(nums = [2, 3, 1, 3, 3])",
        "minimumRightShifts(nums = [99, 1, 2, 5, 3, 1])"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1,1,2,2], l = 2, r = 4)",
        "countSubMultisets(nums = [1,2,3,4], l = 2, r = 3)",
        "countSubMultisets(nums = [1, 2, 3, 1, 2], l = 2, r = 4)",
        "countSubMultisets(nums = [2, 3, 3], l = 2, r = 2)",
        "countSubMultisets(nums = [1,2,2,3,5,5,5], l = 3, r = 5)",
        "countSubMultisets(nums = [1, 2, 3], l = 4, r = 7)",
        "countSubMultisets(nums = [2, 3, 4, 5], l = 2, r = 4)",
        "countSubMultisets(nums = [1, 2, 2, 3, 2, 2], l = 4, r = 6)",
        "countSubMultisets(nums=[0,0,1,1,1,2,2,2,2,3,3,4], l=5, r=9)",
        "countSubMultisets(nums = [1,1,2,1,2,2,3,4,3,3,4,4,5], l = 2, r = 9)"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 5, 2, 3, 4])",
        "minimumCoins(prices = [3, 5, 2, 4])",
        "minimumCoins(prices = [1, 2, 5, 8, 9])",
        "minimumCoins(prices = [1, 4, 1, 2])",
        "minimumCoins(prices = [1, 4, 2, 7])",
        "minimumCoins(prices = [2, 5, 10, 15])",
        "minimumCoins(prices = [10, 10, 10, 10])",
        "minimumCoins(prices = [4, 3, 7, 5, 6, 2, 1, 3])",
        "minimumCoins(prices = [10, 14, 2, 25, 7])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 3, 5])",
        "minimumCoins(prices = [1, 2, 4])",
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins(prices = [4, 1, 2])",
        "minimumCoins(prices = [2, 3, 5])",
        "minimumCoins(prices = [2, 1, 3, 2])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6])",
        "minimumCoins(prices = [4, 2, 1, 3, 7])",
        "minimumCoins(prices = [2, 3, 5, 10, 3])",
        "minimumCoins(prices = [10, 8, 9, 15, 12, 10, 12, 8])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"a\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"a\", \"b\", \"c\", \"d\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"5\", \"prev\", \"5\", \"prev\", \"5\", \"prev\"])",
        "lastVisitedIntegers(words = [\"5\", \"prev\", \"4\", \"prev\", \"prev\", \"1\", \"1\"])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minOperations(nums = [1, 1, 1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 3])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minOperations(nums = [1, 2, 2, 2, 2, 3, 3])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 6])",
        "minOperations(nums = [1, 2, 1, 2, 1, 3, 1])",
        "minOperations(nums = [1, 1, 2, 1, 3, 4, 2])",
        "minOperations(nums = [0, 2, 4, 1, 3])",
        "minOperations(nums = [3, 3, 2, 2, 2, 1, 3, 2, 2, 3, 2, 1, 3, 2, 1])"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"p1\", \"v2\", \"p1\", \"v4\"])",
        "lastVisitedIntegers(words = [\"p1\", \"v7\", \"xyz\", \"p2\"])",
        "lastVisitedIntegers(words = [\"p2\", \"p1\", \"p0\"])",
        "lastVisitedIntegers(words = [\"p\", \"a\", \"a\", \"n\", \"a\"])",
        "lastVisitedIntegers(words = [\"p1\", \"v7\", \"xyz\", \"p2\", \"l4\"])",
        "lastVisitedIntegers(words = [\"p\", \"a\", \"a\", \"a\", \"p\", \"a\"])",
        "lastVisitedIntegers(words = [\"p\", \"a\", \"1\", \"p\", \"a\", \"1\"])",
        "lastVisitedIntegers(words = [\"p\", \"a\", \"a\", \"n\", \"a\", \"p\", \"p\"])",
        "lastVisitedIntegers(words = [\"a\", \"p1\", \"p2\", \"p3\", \"p4\", \"p2\", \"p1\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"2\", \"2\", \"poll\", \"poll\", \"push\", \"3\", \"4\", \"2\", \"poll\", \"poll\"])"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [3, 1, 5, 1, 5])",
        "minimumSeconds(nums = [1, 3, 1, 1, 5])",
        "minimumSeconds(nums = [3, 2, 2, 4, 5, 4, 5])",
        "minimumSeconds(nums = [5, 3, 4, 7, 2, 1, 9])",
        "minimumSeconds(nums = [3, 6, 7, 8, 10, 11, 15])",
        "minimumSeconds(nums = [1, 3, 2, 1, 4, 5, 2])",
        "minimumSeconds(nums = [1, 2, 2, 3, 5, 7, 11, 13, 13, 13, 17, 19])",
        "minimumSeconds(nums = [5,3,4,5,2,3,4,1,2])",
        "minimumSeconds(nums = [10, 1, 4, 10, 2, 4, 3, 2, 3, 5, 1, 4, 3, 2, 6, 2, 5, 1, 4, 3, 2, 5])"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"dog\", \"cat\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"pineapple\"], x = \"ana\")",
        "findWordsContaining(words = [\"ba\", \"na\", \"anana\"], x = \"a\")",
        "findWordsContaining(words = [\"abc\", \"xyz\", \"car\"], x = \"a\")",
        "findWordsContaining(words = [\"often\", \"never\", \"often\"], x = \"often\")",
        "findWordsContaining(words = [\"mango\", \"orange\", \"banana\", \"apple\", \"kiwi\"], x = \"an\")",
        "findWordsContaining(words = [\"aba\", \"baba\", \"ca\"], x = \"b\")",
        "findWordsContaining(words = [\"don\", \"banana\", \"apple\"], x = \"ana\")",
        "findWordsContaining(words = [\"w\", \"is\", \"this\", \"a\", \"test\", \"s\"], x = \"is\")",
        "findWordsContaining(words = [\"abc\", \"def\", \"ghi\", \"jkl\", \"abcde\", \"abcd\", \"abcdefghijkl\", \"abcde\"], x = \"abc\")"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 0])",
        "maxSubarrays(nums = [1, 1, 1, 0])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [0, 0, 0, 1, 0, 0])",
        "maxSubarrays(nums = [1, 0, 0, 0, 0, 1])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1, 2, 3, 0, 2, 3, 0, 2, 3, 4])",
        "maxSubarrays(nums = [2, 6, 4, 2, 4, 0, 0])",
        "maxSubarrays(nums = [2, 6, 9, 0])"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"next\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"4\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"1\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"52\", \"13\", \"prev\", \"4\", \"1\", \"prev\", \"2\", \"prev\", \"4\"])",
        "lastVisitedIntegers(words = [\"forward\", \"4\", \"3\", \"4\", \"3\", \"3\", \"prev\", \"prev\", \"prev\", \"prev\"])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3], target = 4)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 4, 1, 2], target = 4)",
        "countPairs(nums = [1, 4, 2, 5, 3], target = 10)",
        "countPairs(nums = [1, 1, 2, 2, 4, 4], target = 4)",
        "countPairs(nums = [1, 2, 3, 4, 10], target = 8)",
        "countPairs(nums = [1, 1, 3, 4, 5], target = 7)",
        "countPairs(nums = [2, 2, 1, 2], target = 4)",
        "countPairs(nums = [1, 4, 3, 4, 2], target = 8)",
        "countPairs(nums = [10, 11, 12], target = 30)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abab\", s2 = \"baab\")",
        "canBeEqual(s1 = \"cbaebabacd\", s2 = \"abcabcabc\")",
        "canBeEqual(s1 = \"1\", s2 = \"10\")",
        "canBeEqual(s1 = \"aabbcc\", s2 = \"aababcc\")",
        "canBeEqual(s1 = \"dabAcCaCBAc\", s2 = \"daBaCcaCBAc\")",
        "canBeEqual(s1 = \"1122\", s2 = \"1234\")",
        "canBeEqual(s1 = \"a\", s2 = \"a\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"push\", \"push\", \"push\", \"pop\", \"push\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"push\", \"3\", \"pop\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"prev\", \"4\", \"next\", \"3\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"next\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"next\",\"next\",\"prev\",\"prev\",\"prev\"])",
        "lastVisitedIntegers(words = [\"a\", \"b\", \"c\", \"a\", \"c\", \"a\", \"b\", \"c\"])",
        "lastVisitedIntegers(words = [\"prev\",\"next\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"next\", \"1\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"1\", \"1\", \"next\", \"1\"])"
    ],
    "sample_464": [
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n=10, limit=5)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 15, limit = 3)",
        "distributeCandies(n = 6, limit = 5)",
        "distributeCandies(n = 20, limit = 15)",
        "distributeCandies(n=1, limit=1)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [4, 3, 1, 2])",
        "minimumRightShifts(nums = [4, 2, 1, 3])",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [3, 5, 8, 1])",
        "minimumRightShifts(nums = [2, 4, 6, 8, 10])",
        "minimumRightShifts(nums = [100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumRightShifts(nums = [10, 1, 2, 3, 4, 10])",
        "minimumRightShifts(nums = [3, 1, 1, 2, 1, 1])",
        "minimumRightShifts(nums = [3, 5, 1, 1, 1, 4])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"banana\", \"apple\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"carrot\"], x = \"an\")",
        "findWordsContaining(words = [\"cat\", \"bat\", \"hat\"], x = \"at\")",
        "findWordsContaining(words = [\"abc\", \"xyz\", \"ab\"], x = \"a\")",
        "findWordsContaining(words = [\"Hello\", \"world\"], x = \"o\")",
        "findWordsContaining(words = [\"dog\", \"cat\", \"pig\"], x = \"a\")",
        "findWordsContaining(words = [\"pineapple\", \"banana\", \"mango\"], x = \"an\")",
        "findWordsContaining(words = [\"abc\", \"xyz\", \"vwx\"], x = \"v\")",
        "findWordsContaining(words = [\"al\", \"alm\", \"am\"], x = \"al\")",
        "findWordsContaining(words = [\"xyz\", \"zxy\", \"xxy\"], x = \"xy\")"
    ],
    "sample_398": [
        "maxSum(nums = [1, 1, 1, 1, 1], m = 2, k = 2)",
        "maxSum(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], m = 2, k = 3)",
        "maxSum(nums=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "maxSum(nums=[1, 1, 2, 3], m=2, k=2)",
        "maxSum(nums = [2, 1, 4, 3], m = 2, k = 4)",
        "maxSum(nums = [0, 0, 1, 0, 0, 0, 1, 0], m = 2, k = 4)",
        "maxSum(nums = [1, 5, 5, 10, 10], m = 3, k = 2)",
        "maxSum(nums = [5, 8, 7, 9, 2, 5, 8, 7, 9, 2, 5, 8, 7, 9], m = 3, k = 2)",
        "maxSum(nums = [5,1,2,4,0,0,2,5,1,2], m = 2, k = 6)",
        "maxSum(nums = [1, 2, 2, 2, 2, 2, 2, 2, 2, 2], m = 1, k = 2)"
    ],
    "sample_424": [
        "minOperations(nums = [1, 1, 2, 2, 3])",
        "minOperations(nums = [2,2,3,3,3])",
        "minOperations(nums = [1,1,2,2,3])",
        "minOperations(nums = [1,1,1,2,2,2,3,3,3])",
        "minOperations(nums = [1, 1, 1, 3, 3, 2, 2, 2])",
        "minOperations(nums = [1, 2, 3, 3, 3, 3, 4])",
        "minOperations(nums=[1,1,2,2,2,2])",
        "minOperations(nums = [3,2,1,1])",
        "minOperations(nums=[1,1,1,1,3,2])",
        "minOperations(nums = [3, 3, 3, 2, 2, 2, 4, 5])"
    ],
    "sample_417": [
        "minOperations(nums = [10, 15, 3, 7], k = 17)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 4)",
        "minOperations(nums = [5,1,3,4,7], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 1)",
        "minOperations(nums = [3, 1, 3, 4, 5, 3], k = 3)",
        "minOperations(nums = [11, 3, 7, 2], k = 11)",
        "minOperations(nums = [5, 6, 1, 5, 10], k = 3)",
        "minOperations(nums = [1, 5, 4, 2, 1, 1, 4, 2], k = 4)",
        "minOperations(nums = [3, 1, 1, 3, 3, 2, 1, 1, 2, 1, 1, 2], k = 2)"
    ],
    "sample_371": [
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = \"myph\")",
        "sortVowels(s = \"banana\")",
        "sortVowels(s = \"HYmpE\")",
        "sortVowels(s = 'LeaP')",
        "sortVowels(s = 'Ooph')",
        "sortVowels(s = \"Phyhymm\")",
        "sortVowels(s = \"ThE roSE iS a reD\")"
    ],
    "sample_465": [
        "distributeCandies(n = 7, limit = 5)",
        "distributeCandies(n = 7, limit = 5)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 6, limit = 10)",
        "distributeCandies(n=5, limit=3)",
        "distributeCandies(n = 4, limit = 5)"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 1, 1, 2, 2, 3])",
        "sumCounts(nums = [1, 1, 1, 2, 2, 3])",
        "sumCounts(nums = [1, 1, 2, 1])",
        "sumCounts(nums = [1, 1, 1, 2])",
        "sumCounts(nums = [4, 4, 4, 2])",
        "sumCounts(nums = [1, 2, 1, 2])"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 2, 3, 0])",
        "maxSubarrays(nums = [1, 0, 0, 1, 0])",
        "maxSubarrays(nums = [1, -2, 1, -2, 1])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0])",
        "maxSubarrays(nums = [1, 2, 0, 0, 3])",
        "maxSubarrays(nums = [-4, -3, -2, -1, -2, -3, -4, -5])",
        "maxSubarrays(nums = [5, 3, 9, 1])"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 2, 4])",
        "sumCounts(nums = [1, 1, 2, 2, 3])",
        "sumCounts(nums = [2, 2, 2])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [2, 3, 3])",
        "sumCounts(nums = [0, 0, 0])",
        "sumCounts(nums = [1, 2, 3, 3, 3])",
        "sumCounts(nums = [4, 4, 4, 5, 5])"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"edcba\")",
        "canBeEqual(s1 = \"bca\", s2 = \"abc\")",
        "canBeEqual(s1 = \"1221\", s2 = \"1122\")",
        "canBeEqual(s1 = \"ac\", s2 = \"bd\")",
        "canBeEqual(s1 = \"yza\", s2 = \"abz\")",
        "canBeEqual(s1 = \"dkdk\", s2 = \"cdcd\")"
    ],
    "sample_380": [
        "countPairs(nums = [1,2,3,4,5], target = 8)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums=[1,4,2,1,4], target=4)",
        "countPairs(nums = [1, 3, 5, 7, 9], target = 13)",
        "countPairs(nums=[1, 2, 3, 5], target=10)",
        "countPairs(nums = [10,15,2,6], target = 17)",
        "countPairs(nums = [1,2,2,2,5,5,8], target = 8)",
        "countPairs(nums=[1, 1, 2, 2, 5, 5], target=3)",
        "countPairs(nums=[5, 4, 3, 1], target=5)",
        "countPairs(nums = [1,2,5,8,9,10,13], target = 14)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 1, 2, 2])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [0, 1, 1])",
        "sumCounts(nums = [1, 3, 3])",
        "sumCounts(nums = [2, 2, 2, 2])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 2, 4, 2])",
        "sumCounts(nums = [1, 4, 4, 4, 6, 6, 6, 6])"
    ],
    "sample_368": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"LyMPh\")",
        "sortVowels(s = 'Ymph')",
        "sortVowels(s = \"MyPHiLm\")",
        "sortVowels(s = \"HimP\")",
        "sortVowels(s = \"MorpH\")",
        "sortVowels(s = \"HeLLo\")",
        "sortVowels(s = \"myPhilosophers\")",
        "sortVowels(s = \"coOLephAnTAnAm\")"
    ],
    "sample_462": [
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 10)",
        "distributeCandies(n = 10, limit = 10)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 10, limit = 1)",
        "distributeCandies(n=8, limit=2)"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 4, 8, 16])",
        "minimumCoins(prices = [1, 3, 5, 7, 9])",
        "minimumCoins(prices = [3, 5, 2, 10])",
        "minimumCoins(prices = [1, 2, 100])",
        "minimumCoins(prices = [4, 6, 5])",
        "minimumCoins(prices = [1, 5, 1, 1, 1, 10])",
        "minimumCoins(prices = [1, 2, 2, 1, 2, 5])",
        "minimumCoins(prices = [1, 1, 5, 2, 3, 10])"
    ],
    "sample_426": [
        "minOperations(nums = [1, 2, 3])",
        "minOperations(nums = [1, 2, 3, 2])",
        "minOperations(nums = [10, 11, 12])",
        "minOperations(nums = [100, 101, 102, 103, 104])",
        "minOperations(nums = [2, 3, 4, 7])",
        "minOperations(nums = [1, 1, 1, 3, 1, 2])",
        "minOperations(nums = [3, 2, 3, 2, 3, 2])",
        "minOperations(nums = [3, 2, 2, 3, 3, 4])",
        "minOperations(nums = [0, 2, 0, 3, 0, 0])",
        "minOperations(nums = [11, 5, 4, 1, 9, 4, 3, 7])"
    ],
    "sample_423": [
        "minOperations(nums = [1, 1, 1, 2])",
        "minOperations(nums = [1, 1, 1, 2])",
        "minOperations(nums = [1, 1, 1, 3, 3, 2, 2, 2])",
        "minOperations(nums = [2, 1, 2, 2])",
        "minOperations(nums = [5, 5, 10, 10, 10])",
        "minOperations(nums = [4, 1, 4, 1, 4, 1])",
        "minOperations(nums = [2, 1, 3])",
        "minOperations(nums = [1,2,3,4,3,2,3])",
        "minOperations(nums = [1, 1, 1, 1, 2, 3, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 3, 1, 2, 2, 2, 2, 3, 3, 3, 2, 3, 3, 3, 3, 3])"
    ],
    "sample_476": [
        "minimumCoins(prices = [1,2,3])",
        "minimumCoins(prices = [1,2,3,4,5])",
        "minimumCoins(prices = [1,2,3,4,5])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumCoins(prices = [1, 2, 4, 5])",
        "minimumCoins(prices = [2, 5, 7, 1, 4])",
        "minimumCoins(prices = [5, 7, 1, 1, 5])",
        "minimumCoins(prices = [1,5,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30])",
        "minimumCoins(prices = [1,3,1,10,20,60])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 3, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 3, 5, 2])",
        "minimumRightShifts(nums = [1, 2, 3, 2, 1])",
        "minimumRightShifts(nums = [3, 4, 1, 2])",
        "minimumRightShifts(nums = [3, 1, 2, 5])",
        "minimumRightShifts(nums = [3, 5, 1])",
        "minimumRightShifts(nums = [1000000000])",
        "minimumRightShifts(nums = [0, 1, 2, 3, 4, 5, 6, 7])"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumRightShifts(nums = [1, 1, 2])",
        "minimumRightShifts(nums = [4, 5, 1, 2, 3])",
        "minimumRightShifts(nums = [1, 3, 8, 12])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 6, 7, 8, 9])",
        "minimumRightShifts(nums = [1, 3, 5, 9, 10])",
        "minimumRightShifts(nums = [0, 2, 3, 5, 12])",
        "minimumRightShifts(nums = [1, 2, 10, 3, 2, 3, 4])",
        "minimumRightShifts(nums = [9, 2, 8, 7, 3, 5, 1, 4, 6, 0])",
        "minimumRightShifts(nums = [4, 1, 2, 6, 7, 8, 9, 10, 11, 14])"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"aba\", s3 = \"aca\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"baa\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"aba\", s3 = \"acd\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"mno\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"s\", s2 = \"a\", s3 = \"f\")",
        "findMinimumOperations(s1 = \"c\", s2 = \"x\", s3 = \"y\")",
        "findMinimumOperations(s1 = \"flake\", s2 = \"banana\", s3 = \"apple\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"abefc\", s3 = \"abefc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"hhi\", s2 = \"eeeeee\", s3 = \"llllll\")"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"baabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aa\")",
        "longestSemiRepetitiveSubstring(s = \"abcd\")",
        "longestSemiRepetitiveSubstring(s = \"abbba\")",
        "longestSemiRepetitiveSubstring(s = \"ba\")",
        "longestSemiRepetitiveSubstring(s = \"xyxyxy\")",
        "longestSemiRepetitiveSubstring(s = \"abcde\")",
        "longestSemiRepetitiveSubstring(s = \"eeeee\")",
        "longestSemiRepetitiveSubstring(s = \"abababababababababababababababab\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaaaabababa\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"baab\"])",
        "maximumNumberOfStringPairs(words = [\"leetcode\", \"leet\", \"code\"])",
        "maximumNumberOfStringPairs(words = [\"aaaa\",\"asas\",\"able\",\"ability\",\"actt\",\"actor\",\"access\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\",\"cdab\",\"ab\",\"cd\"])",
        "maximumNumberOfStringPairs(words = [\"geeksforgeeks\", \"geeksfor\", \"geeks\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"abcd\", \"caa\", \"cad\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"abcd\", \"abca\", \"abcd\", \"abba\"])"
    ],
    "sample_247": [
        "minOperations(s1 = \"ab\", s2 = \"ba\", x = 1)",
        "minOperations(s1 = \"xx\", s2 = \"xx\", x = 2)",
        "minOperations(s1 = \"aa\", s2 = \"ba\", x = 1)",
        "minOperations(s1 = \"abaa\", s2 = \"abab\", x = 1)",
        "minOperations(s1 = \"aba\", s2 = \"bbbbb\", x = 3)",
        "minOperations(s1 = \"ghi\", s2 = \"ghi\", x = 2)",
        "minOperations(s1 = \"aaaaaa\", s2 = \"bbbbbb\", x = 2)",
        "minOperations(s1 = \"chacha\", s2 = \"chacha\", x = 3)",
        "minOperations(s1 = \"zrkzpxg\", s2 = \"kpzpxrkz\", x = 3)",
        "minOperations(s1 = \"fkdhkzxcdlcbwgcyepvvqdsaa\", s2 = \"lcbwgcyepvvqdsaa\", x = 2)"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"hello\", \"world\", \"leetcode\"])",
        "maximumNumberOfStringPairs(words = [\"aba\",\"baa\",\"bab\"])",
        "maximumNumberOfStringPairs(words = [\"xx\", \"xy\", \"yx\", \"yy\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"abba\", \"abba\"])",
        "maximumNumberOfStringPairs(words = [\"aba\",\"baa\",\"bab\",\"aaab\",\"aaab\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"bca\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"bca\",\"cba\",\"dca\"])",
        "maximumNumberOfStringPairs(words = [\"egg\", \"ffg\", \"g\"])",
        "maximumNumberOfStringPairs(words = [\"bcc\", \"ccd\", \"caa\"])",
        "maximumNumberOfStringPairs(words = [\"gide\", \"algid\", \"dage\", \"agde\"])"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 1, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [2, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [2, 2, 6, 4, 4])",
        "minGroupsForValidAssignment(nums = [4, 3, 1, 2])",
        "minGroupsForValidAssignment(nums = [15, 5, 20, 10, 35, 15, 10])",
        "minGroupsForValidAssignment(nums = [2, 2, 1, 2, 1])",
        "minGroupsForValidAssignment(nums = [2,3,4,5])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 15, m = 5)",
        "differenceOfSums(n = 3, m = 5)",
        "differenceOfSums(n = 3, m = 4)",
        "differenceOfSums(n = 25, m = 5)",
        "differenceOfSums(n=4, m=2)",
        "differenceOfSums(n=7, m=3)"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"0111011\", k = 2)",
        "shortestBeautifulSubstring(s = \"011101\", k = 2)",
        "shortestBeautifulSubstring(s = \"0011\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110\", k = 2)",
        "shortestBeautifulSubstring(s = \"011010\", k = 2)",
        "shortestBeautifulSubstring(s = \"10011\", k = 2)",
        "shortestBeautifulSubstring(s = \"001110000111\", k = 2)",
        "shortestBeautifulSubstring(s = '101', k = 2)",
        "shortestBeautifulSubstring(s = '100011', k = 2)",
        "shortestBeautifulSubstring(s = '1100101111010001', k = 2)"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"cde\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"aab\", s3 = \"aab\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"def\")",
        "findMinimumOperations(s1 = \"frodo\", s2 = \"frodo\", s3 = \"frodo\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abc\", s3 = \"bc\")"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"abacab\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcdabcdabcd\")",
        "longestSemiRepetitiveSubstring(s = \"abcdabca\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaab\")",
        "longestSemiRepetitiveSubstring(s = \"abcbacb\")",
        "longestSemiRepetitiveSubstring(s = \"bbabcbc\")"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5])",
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3])",
        "minSum(nums1 = [2, 4, 6], nums2 = [5, 10, 15])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 0, 1])",
        "minSum(nums1 = [1, 1, 1, 1], nums2 = [1, 1, 1, 1, 1, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 4, 5, 6])",
        "minSum(nums1 = [4, 2, 1, 6], nums2 = [1, 1, 2, 1])",
        "minSum(nums1 = [1, 3, 1, 1, 4], nums2 = [0, 3, 0, 2, 0])",
        "minSum(nums1 = [1, 5, 3, 2, 4], nums2 = [4, 1, 1, 2, 7])"
    ],
    "sample_289": [
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"110100\")",
        "minimumSteps(s = \"010000001\")",
        "minimumSteps(s = \"100111001\")",
        "minimumSteps(s = \"00100100\")",
        "minimumSteps(s = \"1110110110\")",
        "minimumSteps(s = \"11011011111\")",
        "minimumSteps(s = \"001110000011111\")"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [0, 0, 0, 0])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [5, 1, 4, 2])",
        "maximumTripletValue(nums = [0, 1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 2, 4, 8, 9])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maximumTripletValue(nums = [3, 2, 5, 1, 100, 101])",
        "maximumTripletValue(nums = [-100, 4, 5, -4, 10, 40])"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"abcd\", k = 2)",
        "beautifulSubstrings(s = \"aaabbaaa\", k = 3)",
        "beautifulSubstrings(s = \"aaabbaaa\", k = 3)",
        "beautifulSubstrings(s = \"abcdee\", k = 2)",
        "beautifulSubstrings(s = \"ABC\", k = 2)",
        "beautifulSubstrings(s = \"ababababa\", k = 2)",
        "beautifulSubstrings(s = \"aaaaaaabcdef\", k = 3)",
        "beautifulSubstrings(s = \"ababacac\", k = 3)",
        "beautifulSubstrings(s = \"abababababababababab\", k = 15)",
        "beautifulSubstrings(s = \"ttfbww\", k = 2)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"cbaebabacd\")",
        "minimumBeautifulSubstrings(s = \"0123456789\")",
        "minimumBeautifulSubstrings(s = \"aaa\")",
        "minimumBeautifulSubstrings(s = \"aabbaa\")",
        "minimumBeautifulSubstrings(s = \"ababbc\")",
        "minimumBeautifulSubstrings(s = \"abaa\")",
        "minimumBeautifulSubstrings(s = \"bab\")",
        "minimumBeautifulSubstrings(s = \"babbbaaacabbbab\")",
        "minimumBeautifulSubstrings(s = \"35242451112311\")",
        "minimumBeautifulSubstrings(s = \"000111011111001011110111111011111011110111101111011110111111\")"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[0, 1], [1, 1]])",
        "matrixSum(a = [[1, 1], [0, 1]])",
        "matrixSum(a = [[0, 0], [0, 0]])",
        "matrixSum(a = [[1, 4, 7], [2, 5, 8], [3, 6, 9]])",
        "matrixSum(a = [[5, 6], [3, 9]])",
        "matrixSum(a = [[-1, -3, -6], [-2, -2, -4], [-3, -1, -4]])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2], nums2 = [3, 4])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [0, 1, 2], nums2 = [3, 4, 5])",
        "minSum(nums1 = [0, 1, 2], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [9, 8, 7])",
        "minSum(nums1 = [1, 0, 1], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 0, 1, 2])",
        "minSum(nums1 = [5, 3, 0], nums2 = [7, 9, 0])",
        "minSum(nums1 = [1, 3, 2, 0], nums2 = [4, 5, 6, 2])"
    ],
    "sample_282": [
        "minOperations(nums1 = [1, 5], nums2 = [10, 5])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 1, 4, 2])",
        "minOperations(nums1 = [3, 4, 5], nums2 = [4, 5, 6])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [5,4,3,2,1])",
        "minOperations(nums1 = [2, 4, 6], nums2 = [1, 4, 6])",
        "minOperations(nums1 = [1, 5, 11, 5], nums2 = [1, 3, 4, 3])",
        "minOperations(nums1 = [2, 3, 1], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 4, 2, 1, 0], nums2 = [5, 6, 3, 4, 0])",
        "minOperations(nums1 = [2, 4, 1, 3], nums2 = [1, 6, 3, 5])",
        "minOperations(nums1 = [2, 4, 4, 4, 4], nums2 = [3, 3, 3, 3])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [1,1,0,1,1])",
        "alternatingSubarray(nums = [4,2,4,5,4])",
        "alternatingSubarray(nums = [1, 3, 2, 3, 4, 2, 1])",
        "alternatingSubarray(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10])",
        "alternatingSubarray(nums = [1, 3, 4, 1, 5, 3, 4])",
        "alternatingSubarray(nums = [2, 1, 4, 1, 2, 1])",
        "alternatingSubarray(nums = [1, 3, 2, 3, 5, 0, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])",
        "alternatingSubarray(nums = [1, 3, 5, 7, 9, 11, 2, 4, 8, 12])",
        "alternatingSubarray(nums = [100,101,102,103,101,101,101,101,101,101])"
    ],
    "sample_315": [
        "buyChoco(prices = [1,2,3], money = 3)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [2, 1, 3], money = 6)",
        "buyChoco(prices = [1, 3, 2, 4], money = 7)",
        "buyChoco(prices = [5, 6, 3, 1, 2], money = 8)",
        "buyChoco(prices = [2, 1, 3, 4, 5], money = 7)",
        "buyChoco(prices=[1, 5, 3, 7], money=9)",
        "buyChoco(prices = [2, 5, 11], money = 7)",
        "buyChoco(prices = [2, 4, 6], money = 5)",
        "buyChoco(prices = [3, 5], money = 10)"
    ],
    "sample_302": [
        "countSeniors(details
        "countSeniors(details = [\"1980123112345678\", \"1970123112345678\"])",
        "countSeniors(details = [\"AB123456C\", \"BC123456D\", \"CD123456E\", \"DE123456F\", \"EF123456G\", \"FA123456H\"])",
        "countSeniors(details = [\"111-02-1234\", \"222-13-5678\", \"333-24-9101\", \"444-35-1234\"])",
        "countSeniors(details = [\"32122020\",\"10122019\",\"10122021\",\"12122019\",\"10122020\",\"10122021\",\"32122021\"])",
        "countSeniors(details = [\"010000199812461234\",\"010000197812461234\",\"010000199812461234\",\"010000199812461234\",\"010000197812461234\"])",
        "countSeniors(details = [\"12011998RK\",\"24011998AK\",\"12011997AK\",\"12011999RK\",\"24011998RK\",\"24011999AK\",\"24011997RK\"])",
        "countSeniors(details = [\"01-123-4567\", \"32-213-2567\", \"01-223-3567\", \"32-213-3567\", \"12-233-4567\", \"32-213-4567\"])",
        "countSeniors(details = [\"402302020215\",\"422001010010\",\"402202020212\"])",
        "countSeniors(details = [\"12122001N01131003\", \"03032002F04131001\", \"03032002F04131002\", \"12122001N01131002\"])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"ababab\", k = 3)",
        "beautifulSubstrings(s = \"abcd\", k = 1)",
        "beautifulSubstrings(s = \"abcd\", k = 4)",
        "beautifulSubstrings(s = 'abcd', k = 2)",
        "beautifulSubstrings(s = \"aeiouaoe\", k = 2)",
        "beautifulSubstrings(s = \"abacaba\", k = 3)",
        "beautifulSubstrings(s = \"xxxy\", k = 2)",
        "beautifulSubstrings(s = \"uareuou\", k = 2)",
        "beautifulSubstrings(s = \"abaeab\", k = 2)",
        "beautifulSubstrings(s = \"cabcd\", k = 2)"
    ],
    "sample_255": [
        "minimumSum(nums = [1,2,3])",
        "minimumSum(nums = [2,1,3,5])",
        "minimumSum(nums=[3,4,5])",
        "minimumSum(nums = [3,4,6,2])",
        "minimumSum(nums = [10, 5, 2, 7, 1, 8, 4])",
        "minimumSum(nums = [2, 1, 5, 0, 10, 8])",
        "minimumSum(nums=[10,3,5])",
        "minimumSum(nums = [9, 2, 4, 7])",
        "minimumSum(nums = [5, 11, 3, 7, 2])",
        "minimumSum(nums = [10,1,5,9,3,7])"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,3,4,4,5,6])",
        "minGroupsForValidAssignment(nums = [4, 1, 5, 3])",
        "minGroupsForValidAssignment(nums = [3,1,3,3,2,1,3,1])",
        "minGroupsForValidAssignment(nums = [11, 3, 7, 2, 5, 3])",
        "minGroupsForValidAssignment(nums = [10,10,9,9,8,8,8,7,7,7,6,6,6,5,5,5,4,4,4,3,3,3])",
        "minGroupsForValidAssignment(nums=[4, 1, 5, 2, 3, 7, 8, 6])",
        "minGroupsForValidAssignment(nums = [15,25,10,35,20,15,25,35])",
        "minGroupsForValidAssignment(nums = [100, 1, 5, 2, 7, 20, 15, 60, 80, 10, 12, 25, 45])"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [5, 1, 3, 4, 2])",
        "alternatingSubarray(nums = [5,1,3,4,2])",
        "alternatingSubarray(nums = [2,3,1,4,5])",
        "alternatingSubarray(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1])",
        "alternatingSubarray(nums = [1, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1,3,4,2,6,9])",
        "alternatingSubarray(nums=[10,11,12,13,1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1, 3, 2, 3, 5, 2, 2, 1])",
        "alternatingSubarray(nums = [100, 101, 102, 103, 104, 105, 102, 103, 104, 105, 106, 107])",
        "alternatingSubarray(nums = [1,2,4,2,5,7])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = \"0011\", k = 2)",
        "shortestBeautifulSubstring(s = '00001110010', k = 2)",
        "shortestBeautifulSubstring(s = '001110111011100010', k = 2)",
        "shortestBeautifulSubstring(s = '1001100110111001', k = 3)",
        "shortestBeautifulSubstring(s = '000111101', k = 4)",
        "shortestBeautifulSubstring(s = \"00011100010\", k = 3)",
        "shortestBeautifulSubstring(s = \"0111101001\", k = 3)",
        "shortestBeautifulSubstring(s = '01111101101001', k = 2)",
        "shortestBeautifulSubstring(s = '011001101001010', k = 3)",
        "shortestBeautifulSubstring(s = '0011101010111100111001', k = 3)"
    ],
    "sample_293": [
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"01001\")",
        "minimumSteps(s = \"111000\")",
        "minimumSteps(s = \"110001\")",
        "minimumSteps(s = \"0100111001\")",
        "minimumSteps(s = \"0101101\")",
        "minimumSteps(s = \"101011\")",
        "minimumSteps(s = \"001110101001010\")",
        "minimumSteps(s = \"01100000000110\")",
        "minimumSteps(s = \"1001011010000\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"aba\")",
        "longestSemiRepetitiveSubstring(s = \"abba\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"abaaab\")",
        "longestSemiRepetitiveSubstring(s = \"aababaab\")",
        "longestSemiRepetitiveSubstring(s = \"acba\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaabbbb\")",
        "longestSemiRepetitiveSubstring(s = \"sashimi\")"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1,2,2,4])",
        "minGroupsForValidAssignment(nums = [1, 3, 2])",
        "minGroupsForValidAssignment(nums = [3,2,1,1,1,2])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,2,3])",
        "minGroupsForValidAssignment(nums = [2,2,1,1,3])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 3, 1, 4, 3, 2, 4, 6])",
        "minGroupsForValidAssignment(nums = [1,3,2,2,1,4,1,4])",
        "minGroupsForValidAssignment(nums = [4, 6, 5, 5, 2, 1])",
        "minGroupsForValidAssignment(nums=[1, 2, 3, 4])"
    ],
    "sample_307": [
        "countSeniors(details = [\"T001\", \"F002\", \"T003\", \"F004\", \"T005\", \"F006\"])",
        "countSeniors(details = [\"1824\", \"1825\", \"1924\", \"1812\", \"1813\"])",
        "countSeniors(details = [\"5102181234567\", \"4301171234567\"])",
        "countSeniors(details = [\"48-06-2000\", \"52-11-1998\", \"60-01-1998\", \"61-02-2000\"])",
        "countSeniors(details = [\"1991-10-24\", \"1990-07-21\", \"2000-08-15\", \"2005-12-13\"])",
        "countSeniors(details = [\"19720201\", \"19880308\", \"19630704\", \"19541101\"])",
        "countSeniors(details = [\"30-23-1988\", \"32-26-1990\", \"62-4-1985\", \"61-12-2000\"])",
        "countSeniors(details = [\"19841130\", \"20100101\", \"19951223\", \"19781204\", \"20100101\"])",
        "countSeniors(details = [\"199906012034\", \"201511112233\", \"200101012345\"])",
        "countSeniors(details = [\"17402\", \"26212\", \"24182\", \"19703\", \"29135\", \"18437\", \"17122\", \"18703\"])"
    ],
    "sample_290": [
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"0000000\")",
        "minimumSteps(s = \"010101\")",
        "minimumSteps(s = \"01000\")",
        "minimumSteps(s = \"01110\")",
        "minimumSteps(s = \"0001000\")",
        "minimumSteps(s = \"10011100\")",
        "minimumSteps(s=\"00100100\")",
        "minimumSteps(s = \"11001011001011\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [3, 2, 2, 2, 2], moveFrom = [0, 0, 0, 1, 1], moveTo = [2, 2, 2, 2, 2])",
        "relocateMarbles(nums = [1, 2, 2, 2], moveFrom = [0, 1, 1, 1], moveTo = [2, 2, 2, 2])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveFrom = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveTo = [9, 9, 9, 9, 9, 9, 9, 9, 9, 9])",
        "relocateMarbles(nums = [1,1,2,2,2], moveFrom = [2,2,2], moveTo = [2,2,2])",
        "relocateMarbles(nums=[1, 2, 3, 4, 5, 6, 7], moveFrom=[1, 2, 3, 4], moveTo=[2, 4, 6])",
        "relocateMarbles(nums = [1,2,3,3,7], moveFrom = [0,0,0,1,2], moveTo = [4,4,4,3,2])",
        "relocateMarbles(nums=[1,2,2,3,3,3,5], moveFrom=[1,2,4,5], moveTo=[2,2,3])",
        "relocateMarbles(nums=[1,2,3,3,3,4,5,6],moveFrom=[3,3,3,3],moveTo=[1,2,4])",
        "relocateMarbles(nums = [2, 1, 2, 2, 2, 4, 3, 3, 3], moveFrom = [0, 0, 1, 1, 2, 2, 2, 2, 2], moveTo = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9], moveFrom = [8, 6, 4, 2, 7], moveTo = [6, 7, 4, 3, 8])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 3, 2, 3, 5, 0])",
        "alternatingSubarray(nums = [5, 1, 3, 4, 2])",
        "alternatingSubarray(nums = [3, 1, 3, 2, 4, 3])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 3])",
        "alternatingSubarray(nums = [1, 3, 2, 3, 4, 2])",
        "alternatingSubarray(nums = [1, 3, 5, 2, 4, 6])",
        "alternatingSubarray(nums = [1, 3, 2, 3, 4, 7, 5, 2])",
        "alternatingSubarray(nums = [5, 5, 10, 10, 20])",
        "alternatingSubarray(nums = [0, 0, 0, 0, 0])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 4, 5, 6, 7, 6, 6, 7])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"abab\", k = 2)",
        "beautifulSubstrings(s = \"beauteous\", k = 4)",
        "beautifulSubstrings(s = \"aba\", k = 2)",
        "beautifulSubstrings(s = \"aabbaa\", k = 3)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"aaaeiou\", k = 2)",
        "beautifulSubstrings(s = \"abbaacd\", k = 2)",
        "beautifulSubstrings(s = \"bac\", k = 2)",
        "beautifulSubstrings(s = 'baaabaaa', k = 3)",
        "beautifulSubstrings(s = \"alecbpzrdr\", k = 3)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [10, -10, 10, -10, 10])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [2, 7, 11, 15])",
        "maximumTripletValue(nums = [100, 200, 500])",
        "maximumTripletValue(nums = [5, 1, 3, 7, 2, 4, 8, 6])",
        "maximumTripletValue(nums = [-4, -3, -1, 0, 1, 2, 3])",
        "maximumTripletValue(nums = [10, 10, 5, 7])",
        "maximumTripletValue(nums = [5, 12, 16, 10, 4])",
        "maximumTripletValue(nums = [-10, 0, 10, 20, 30, 0, 40, 50, -10, 60])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"leetcode\", \"leet\", \"code\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"cdab\", \"adcb\", \"cbad\"])",
        "maximumNumberOfStringPairs(words = [\"alex\", \"loves\", \"leetcode\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"cdab\", \"cbad\", \"xyzz\", \"zzxy\", \"zzyx\"])",
        "maximumNumberOfStringPairs(words = [\"ababa\", \"ababa\", \"aba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"a\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"ababa\", \"ababa\", \"ababa\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"abca\", \"cd\", \"cd\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"cdab\", \"cbad\", \"xyyx\", \"abcde\", \"xyxx\"])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 6, m = 3)",
        "differenceOfSums(n = 7, m = 3)",
        "differenceOfSums(n = 4, m = 2)",
        "differenceOfSums(n = 7, m = 2)",
        "differenceOfSums(n = 23, m = 5)",
        "differenceOfSums(n = 100, m = 50)"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 3], money = 2)",
        "buyChoco(prices = [1, 2, 5], money = 4)",
        "buyChoco(prices = [2, 3, 5], money = 10)",
        "buyChoco(prices = [0, 1, 2], money = 2)",
        "buyChoco(prices = [1, 2, 3, 4], money = 10)",
        "buyChoco(prices = [3, 1, 1], money = 3)",
        "buyChoco(prices = [1, 3, 4], money = 10)",
        "buyChoco(prices = [5, 2, 10, 15], money = 17)",
        "buyChoco(prices = [2, 10, 5, 1, 6], money = 10)",
        "buyChoco(prices = [5, 10, 2, 3], money = 18)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\",\"cdab\",\"adcb\",\"cbad\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"dog\", \"cat\"])",
        "maximumNumberOfStringPairs(words = [\"foo\", \"bar\", \"foobar\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"dabb\", \"abcd\", \"dcba\", \"cdba\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"dog\", \"a\", \"abba\", \"abba\", \"dog\", \"a\"])",
        "maximumNumberOfStringPairs(words = [\"wl\", \"we\", \"go\", \"gn\", \"go\", \"gn\", \"we\", \"wl\"])",
        "maximumNumberOfStringPairs(words = [\"skateboard\", \"mobile\", \"mad\", \"dog\", \"cat\", \"chair\", \"balance\"])"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"aba\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"abaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aba\")",
        "longestSemiRepetitiveSubstring(s = \"aaaab\")",
        "longestSemiRepetitiveSubstring(s = \"aaa\")",
        "longestSemiRepetitiveSubstring(s = \"bb\")",
        "longestSemiRepetitiveSubstring(s = \"pwkewe\")",
        "longestSemiRepetitiveSubstring(s = \"bacbacbacb\")"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"dog\",\"cat\",\"apple\"])",
        "minimizeConcatenatedLength(words = [\"ec\", \"ca\", \"cb\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"bcd\", \"ace\"])",
        "minimizeConcatenatedLength(words=[\"aba\", \"ba\", \"cad\"])",
        "minimizeConcatenatedLength(words = [\"ha\", \"xx\", \"yy\"])",
        "minimizeConcatenatedLength(words = [\"aba\",\"baa\",\"cba\",\"ax\",\"bx\",\"cx\"])",
        "minimizeConcatenatedLength(words = [\"hint\",\"nor\"])",
        "minimizeConcatenatedLength(words = [\"xxyy\",\"axa\",\"axy\",\"axy\",\"xxz\",\"yaaax\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"cab\", \"caa\", \"ca\", \"d\"])",
        "minimizeConcatenatedLength(words = [\"shrub\", \"apple\", \"acorn\", \"shrew\", \"vixen\"])"
    ],
    "sample_323": [
        "isFascinating(n = 3)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 4)",
        "isFascinating(n = 1)",
        "isFascinating(n = 9)",
        "isFascinating(n = 12)",
        "isFascinating(n = 8)",
        "isFascinating(n = 18)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"abaaba\")",
        "longestSemiRepetitiveSubstring(s = \"baab\")",
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"aab\")",
        "longestSemiRepetitiveSubstring(s = \"abcd\")",
        "longestSemiRepetitiveSubstring(s = \"aababab\")",
        "longestSemiRepetitiveSubstring(s = \"aabaaab\")",
        "longestSemiRepetitiveSubstring(s = \"abbcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcbc\")",
        "longestSemiRepetitiveSubstring(s = \"aababcabc\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"123456789012\", \"123456789013\"])",
        "countSeniors(details = [\"1999-03-22\"])",
        "countSeniors(details = [\"00100000001\", \"00200000002\", \"00300000003\", \"00400000004\", \"00500000005\", \"00600000006\", \"00700000007\"])",
        "countSeniors(details = [\"P101204102019\", \"P101204102020\", \"P101204102021\", \"P101204102022\"])",
        "countSeniors(details = [\"SSA123456789\", \"SSA123456790\", \"SSA123456791\", \"SSA123456800\", \"SSA123456801\", \"SSA123456802\", \"SSA123456803\", \"SSA123456804\", \"SSA123456805\", \"SSA123456806\", \"SSA123456807\", \"SSA123456808\", \"SSA123456809\"])",
        "countSeniors(details = [\"19970621060\", \"19970721060\", \"19970821050\", \"19970821070\"])",
        "countSeniors(details = [\"5501199030345844\",\"5501199030345844\",\"5501199030345844\",\"5501199030345844\",\"5501199030345844\",\"5501199030345844\",\"5501199030345844\",\"5501199030345844\",\"5501199030345844\",\"5501199030345844\",\"5501199030345844\",\"5501199030345844\",\"5501199030345844\"])",
        "countSeniors(details = [\"170319450035445789\", \"170319450035445800\", \"170319450035445790\"])",
        "countSeniors(details = [\"1981-01-05\",\"1979-02-27\",\"1982-12-05\",\"1982-04-13\",\"1979-03-24\"])",
        "countSeniors(details = [\"1998-10-23\",\"1961-11-01\",\"1969-04-26\",\"1974-05-10\",\"1974-07-09\"])"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 6])",
        "minGroupsForValidAssignment(nums = [4, 4, 4, 3, 3])",
        "minGroupsForValidAssignment(nums = [5, 9])",
        "minGroupsForValidAssignment(nums = [3, 2, 2, 2, 5])",
        "minGroupsForValidAssignment(nums = [4, 3, 3, 1, 2])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,2,3,4])",
        "minGroupsForValidAssignment(nums = [20, 15, 3, 10])",
        "minGroupsForValidAssignment(nums = [12, 34, 67, 78, 90, 65])"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSum(nums = [1, 3, 2, 4, 3])",
        "minimumSum(nums = [3, 4, 1, 2, 5])",
        "minimumSum(nums = [2, 5, 10, 1, 3])",
        "minimumSum(nums = [-1, 2, 3, 100])",
        "minimumSum(nums = [1, 2, 3, 10, 4, 5, 6, 7, 8, 9])",
        "minimumSum(nums = [-1, 2, 2, -3, -4, 5])",
        "minimumSum(nums = [2, 4, 5, 7, 6, 3, 9])",
        "minimumSum(nums = [10, 5, 1, 3, 4, 6])"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"cc\", \"dd\", \"ee\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"cdab\", \"cbad\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"ec\", \"ed\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"a\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"cd\", \"dd\", \"aa\", \"bb\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\",\"cdab\",\"ab\",\"cd\"])",
        "maximumNumberOfStringPairs(words = [\"d",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ac\", \"cba\"])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = '0110', k = 2)",
        "shortestBeautifulSubstring(s = '11001', k = 2)",
        "shortestBeautifulSubstring(s = \"1001\", k = 3)",
        "shortestBeautifulSubstring(s = \"110111\", k = 3)",
        "shortestBeautifulSubstring(s = '01111111', k = 2)",
        "shortestBeautifulSubstring(s = '001011000010', k = 2)",
        "shortestBeautifulSubstring(s = '011011101010101', k = 2)",
        "shortestBeautifulSubstring(s = \"110110001\", k = 3)",
        "shortestBeautifulSubstring(s = '0011101110110001', k = 4)",
        "shortestBeautifulSubstring(s = '11110000111111', k = 3)"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [8, 3, 5, 1, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 8, 5, 3, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 5, 8, 3, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [3, 5, 1, 8, 9], limit = 4)",
        "lexicographicallySmallestArray(nums = [8, 3, 1, 5, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [5, 8, 3, 6, 9, 1], limit = 5)",
        "lexicographicallySmallestArray(nums = [2, 1, 5, 8, 9, 3, 10], limit = 2)",
        "lexicographicallySmallestArray(nums = [5, 2, 4, 8, 6, 9, 1, 3], limit = 2)",
        "lexicographicallySmallestArray(nums = [3, 1, 5, 8, 9, 1, 3, 2], limit = 1)"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(a = [[1], [2, 3]])",
        "matrixSum(a = [[1, 1], [2, 1], [3, 1]])",
        "matrixSum(a = [[2, 2, 2, 2], [2, 2, 2, 2], [2, 2, 2, 2]])",
        "matrixSum(a = [[2, 5, 1], [4, 8, 3], [1, 3, 2]])",
        "matrixSum(a = [[4, 2, 1, 1], [3, 2, 1, 2], [1, 3, 2, 2], [1, 1, 4, 1]])",
        "matrixSum(a = [[1, 4, 6, 4], [4, 3, 2, 6], [4, 5, 1, 6], [5, 4, 7, 3], [3, 4, 6, 2], [5, 2, 2, 1]])"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"abab\", k = 2)",
        "beautifulSubstrings(s = \"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "beautifulSubstrings(s = \"abac\", k = 4)",
        "beautifulSubstrings(s = \"ababcbacadefegdehijhklij\", k = 3)",
        "beautifulSubstrings(s = \"cac\", k = 10)",
        "beautifulSubstrings(s = \"abaaba\", k = 4)",
        "beautifulSubstrings(s = \"abcbdd\", k = 1000)",
        "beautifulSubstrings(s = \"abacbdabc\", k = 5)",
        "beautifulSubstrings(s = \"aeoiajkl\", k = 2)"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"aa\",\"bb\",\"cc\",\"dd\",\"ee\",\"ff\"])",
        "maximumNumberOfStringPairs(words = [\"leetcode\",\"loveleetcode\",\"leetcodeleetcode\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"abcd\", \"abca\", \"cab\", \"ab\", \"cad\"])",
        "maximumNumberOfStringPairs(words = [\"code\", \"edoc\", \"aaa\", \"aca\", \"baa\"])",
        "maximumNumberOfStringPairs(words = [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"])",
        "maximumNumberOfStringPairs(words = [\"coder\", \"leetcode\", \"red\", \"code\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"xyz\", \"123\", \"123456\"])"
    ],
    "sample_325": [
        "isFascinating(n = 9)",
        "isFascinating(n = 10)",
        "isFascinating(n = 8)",
        "isFascinating(n = 7)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 100)",
        "isFascinating(n = 11)",
        "isFascinating(n = 21)",
        "isFascinating(n = 101)",
        "isFascinating(n = 88)"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [0, 1, 2, 0])",
        "maximumTripletValue(nums = [1, 4, 2, 10, -8])",
        "maximumTripletValue(nums = [5, 1, 3, 7, 9])",
        "maximumTripletValue(nums = [2, 5, 1, 6, 4])",
        "maximumTripletValue(nums = [6, -3, 5, -2, 1])",
        "maximumTripletValue(nums = [20, 7, 11, 23, 15, 14, 27, 24, 2, 4, 9])"
    ],
    "sample_312": [
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2], [3,4]])",
        "matrixSum(nums = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])",
        "matrixSum(nums = [[1,2,3,4],[5,6,7,8],[9,10,11,12]])",
        "matrixSum(nums = [[1, 2, 3],[3, 2, 1]])",
        "matrixSum(nums = [[0, 1, 1, 2], [1, 0, 1, 2], [1, 1, 0, 1]])",
        "matrixSum(nums = [[-100, 100], [-100, 100], [-100, 100]])",
        "matrixSum(nums = [[2, 2, 3], [5, 4, 2], [6, 4, 3]])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3], b = [3, 2, 1])",
        "minOperations(a = [1, 2, 3, 4], b = [4, 3, 2, 1])",
        "minOperations(a = [1, 3, 5], b = [2, 4, 6])",
        "minOperations(a = [1, 2, 3], b = [1, 2, 3])",
        "minOperations(a = [1, 2], b = [2, 1])",
        "minOperations(a = [1, 2, 3], b = [1, 2, 4])",
        "minOperations(a = [1,2,3,4,5], b = [5,4,3,2,1])",
        "minOperations(a = [1, 3, 4], b = [1, 2, 3])",
        "minOperations(a = [1, 3, 5, 7], b = [1000, 1000, 1000, 1000])",
        "minOperations(a = [0, 0, 1, 0, 0], b = [1, 1, 1, 1, 1])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minOperations(nums1 = [2, 1, 1], nums2 = [1, 1, 2])",
        "minOperations(nums1 = [1, 5, 3, 4, 7], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [4, 2, 1, 3], nums2 = [1, 4, 3, 2])",
        "minOperations(nums1 = [3, 7, 1], nums2 = [2, 4, 6])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 3, 4, 5, 7])",
        "minOperations(nums1 = [2, 4, 1, 2, 5], nums2 = [5, 1, 3, 2, 1])",
        "minOperations(nums1 = [5, 3, 8, 1], nums2 = [10, 4, 6, 2])",
        "minOperations(nums1 = [2, 4, 1, 4, 1], nums2 = [5, 3, 5, 5, 2])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [0, 1, 2])",
        "maximumTripletValue(nums = [0, 0, 0, 0, 0, 0])",
        "maximumTripletValue(nums = [1, 2, 4, 8])",
        "maximumTripletValue(nums = [4, 2, 1])",
        "maximumTripletValue(nums = [1, 3, 2])",
        "maximumTripletValue(nums = [1, 2, 3, 5, 6, 2])",
        "maximumTripletValue(nums = [0, 2, -4, 1])",
        "maximumTripletValue(nums = [1, -1, 2, -4, 3, 2])",
        "maximumTripletValue(nums = [10, 0, 2, -1, -10])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"0110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110111001\", k = 2)",
        "shortestBeautifulSubstring(s = '00110011', k = 2)",
        "shortestBeautifulSubstring(s = '1001010', k = 2)",
        "shortestBeautifulSubstring(s = \"10011100\", k = 3)",
        "shortestBeautifulSubstring(s = '0100111001', k = 3)",
        "shortestBeautifulSubstring(s = \"011010\", k = 2)",
        "shortestBeautifulSubstring(s = '011010101000', k = 3)",
        "shortestBeautifulSubstring(s='011010', k=2)"
    ],
    "sample_256": [
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [2, 4, 6, 2, 5])",
        "minimumSum(nums = [4, 1, 3, 2])",
        "minimumSum(nums = [5, 2, 1, 4, 3])",
        "minimumSum(nums = [1, 5, 4, 3, 2])",
        "minimumSum(nums = [-3, 4, -1, 2, 1])",
        "minimumSum(nums = [3, 1, 5, 4, 10, 2])",
        "minimumSum(nums = [1, 5, 11, 5])",
        "minimumSum(nums = [10, 5, 13, 7, 11])",
        "minimumSum(nums = [100, 99, 200, 300, 400, 500])"
    ],
    "sample_291": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"1100\")",
        "minimumSteps(s = \"110101\")",
        "minimumSteps(s = '10101')",
        "minimumSteps(s = \"0111001\")",
        "minimumSteps(s = \"1101011\")",
        "minimumSteps(s = '10011')",
        "minimumSteps(s = \"01000100\")",
        "minimumSteps(s = \"101101101011\")",
        "minimumSteps(s = \"0101100101110001\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1, 3, 5], nums2 = [1, 4, 6])",
        "minOperations(nums1 = [1, 1, 1, 1, 1, 1], nums2 = [2, 2, 2, 2, 2, 2])",
        "minOperations(nums1 = [2, 1, 0], nums2 = [1, 0, 2])",
        "minOperations(nums1 = [1, 0, 2, 4], nums2 = [5, 6, 3, 7])",
        "minOperations(nums1 = [1, 2, 2, 1], nums2 = [0, 0, 1, 1])",
        "minOperations(nums1 = [3, 3, 3, 1, 1, 1, 2, 2, 2], nums2 = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "minOperations(nums1 = [4, 2, 1, 5], nums2 = [3, 1, 2, 3])",
        "minOperations(nums1 = [3, 5, 2, 1], nums2 = [5, 2, 3, 4])",
        "minOperations(nums1 = [2, 5, 3, 4, 1], nums2 = [2, 5, 3, 4, 1])",
        "minOperations(nums1 = [2, 1, 4, 3, 5, 7, 8], nums2 = [1, 5, 7, 8, 3, 4, 2])"
    ],
    "sample_277": [
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [1, 0, 0]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [\n    [1, 1, 0, 0],\n    [1, 1, 1, 0],\n    [0, 0, 1, 1],\n    [1, 0, 0, 0]\n])",
        "findChampion(grid = [[1, 0], [0, 0], [0, 1], [1, 1], [1, 1]])",
        "findChampion(grid = [\n    [1, 1, 1, 1],\n    [1, 1, 0, 0],\n    [1, 0, 1, 0],\n    [1, 1, 1, 1],\n])",
        "findChampion(grid = [[0, 1, 0, 0, 1], [0, 1, 1, 0, 0], [0, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 0, 0, 0]])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 20, m = 5)",
        "differenceOfSums(n = 7, m = 3)",
        "differenceOfSums(n = 7, m = 3)",
        "differenceOfSums(n = 7, m = 3)",
        "differenceOfSums(n = 4, m = 3)",
        "differenceOfSums(n = 20, m = 3)",
        "differenceOfSums(n = 6, m = 4)",
        "differenceOfSums(n = 100, m = 23)"
    ],
    "sample_292": [
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"011101\")",
        "minimumSteps(s = \"11101\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"111000\")",
        "minimumSteps(s = \"110101\")",
        "minimumSteps(s = \"111001\")",
        "minimumSteps(s = \"111111\")",
        "minimumSteps(s = \"10001\")",
        "minimumSteps(s = \"1011000\")"
    ],
    "sample_348": [
        "alternatingSubarray(nums = [1, 3, 2, 3, 5, 0])",
        "alternatingSubarray(nums = [1, 3, 2, 3, 5, 0])",
        "alternatingSubarray(nums = [1, 3, 2, 3, 5, 0])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [4, 2, 5, 3, 7])",
        "alternatingSubarray(nums = [10, 11, 12, 13, 14, 15])",
        "alternatingSubarray(nums = [1,3,4,1,5])",
        "alternatingSubarray(nums = [1, 2, 4, 5, 1])",
        "alternatingSubarray(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5])",
        "alternatingSubarray(nums = [2, 3, 1, 5, 1, 6, 8, 1, 10])"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2], moveFrom = [1, 2], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2, 3], moveTo = [3, 2, 1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [3, 3])",
        "relocateMarbles(nums = [1, 2, 2], moveFrom = [1, 2, 2], moveTo = [2, 2, 2])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 2], moveTo = [4, 0])",
        "relocateMarbles(nums = [2, 3, 4, 5, 7], moveFrom = [2, 3, 5], moveTo = [3, 5, 7])",
        "relocateMarbles(nums=[2, 1, 4, 6], moveFrom=[1, 2, 1, 4], moveTo=[3, 2, 3, 4])",
        "relocateMarbles(nums = [2, 5, 2, 4, 6, 5], moveFrom = [2, 5], moveTo = [2, 5])",
        "relocateMarbles(nums = [2, 4, 3, 2, 4, 1, 3, 2], moveFrom = [1, 2, 4], moveTo = [4, 2, 3])",
        "relocateMarbles(nums = [3, 2, 4, 1, 5], moveFrom = [5, 2, 1, 1, 5], moveTo = [1, 4, 3, 1, 3])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [5, 104, -3, 105])",
        "maximumTripletValue(nums = [0, 4, 3, 0])",
        "maximumTripletValue(nums = [3, 0, 0, 2, 0])",
        "maximumTripletValue(nums = [1, 4, 2, 10, 2, 3])",
        "maximumTripletValue(nums = [10, 5, 2, 7, 4])",
        "maximumTripletValue(nums = [-1000, 999, -1000, 999, -1000])",
        "maximumTripletValue(nums = [5, -2, 2, -2, 0])",
        "maximumTripletValue(nums = [2, 2, 4, 4, 4, 3, 3, 3, 3, 3, 3])",
        "maximumTripletValue(nums = [-7, -4, 12, 13, -16])"
    ],
    "sample_273": [
        "findChampion(grid = [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 1], [0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [1, 0, 0]])",
        "findChampion(grid = [[1, 1, 0], [0, 1, 1], [0, 0, 0]])",
        "findChampion(grid = [[1, 1, 0],\n                            [1, 0, 1],\n                            [0, 1, 1]])",
        "findChampion(grid = [[0, 0, 0, 0], [1, 1, 0, 1], [0, 0, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[0, 1, 2], [2, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[1,1,0,0,0],[1,1,0,0,0],[0,0,1,1,1],[0,0,1,1,1],[0,0,1,1,1]])",
        "findChampion(grid = [\n  [1, 0, 1],\n  [0, 1, 1],\n  [1, 1, 0],\n])"
    ],
    "sample_267": [
        "minSum(nums1 = [0, 1], nums2 = [1, 0])",
        "minSum(nums1 = [1, 3], nums2 = [2, 4])",
        "minSum(nums1 = [1, 1, 1, 1, 1, 1, 1], nums2 = [1, 1, 1, 1, 1, 1, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 1, 2])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [3, 4, 5])",
        "minSum(nums1 = [0, 4, 3], nums2 = [1, 2, 1])",
        "minSum(nums1 = [1, 3], nums2 = [3, 4])",
        "minSum(nums1 = [3, 0, 0], nums2 = [1, 2, 3])",
        "minSum(nums1 = [3, 5, 8], nums2 = [3, 7, 8, 9])",
        "minSum(nums1 = [5, 7, 6], nums2 = [3, 1, 9, 2])"
    ],
    "sample_294": [
        "minimumSteps(s = \"011101\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"011101\")",
        "minimumSteps(s = \"111101\")",
        "minimumSteps(s = \"111010\")",
        "minimumSteps(s = \"1111111111\")",
        "minimumSteps(s = \"011100\")",
        "minimumSteps(s = \"0100100100\")",
        "minimumSteps(s = \"110000000110000000\")"
    ],
    "sample_274": [
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 0, 0], [-1, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 2], [2, 1, 0], [1, 2, 0]])",
        "findChampion(grid = [[0, 0, 1], [-1, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[-1, 1, 0], [1, 1, 1], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [1, 1, 1, 0]])",
        "findChampion(grid = [[1, 2, -1], [3, 4, 5], [-1, -1, 1]])",
        "findChampion(grid = [[1, 0, -1], [-1, 1, 1], [0, 0, 1]])",
        "findChampion(grid = [[1,0,0,0,0,0,1],[1,0,1,0,1,0,1],[1,0,1,0,1,0,1],[1,0,0,0,0,0,1],[1,0,1,0,1,0,1],[1,0,1,0,1,0,1],[1,0,0,0,0,0,1]])"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 1, 3])",
        "minGroupsForValidAssignment(nums = [10, 20, 30, 40, 50])",
        "minGroupsForValidAssignment(nums = [3,4,6,11])",
        "minGroupsForValidAssignment(nums = [2,4,6,8,10,12])",
        "minGroupsForValidAssignment(nums = [6,5,4,3,2,1])",
        "minGroupsForValidAssignment(nums=[1,2,4,7,8])",
        "minGroupsForValidAssignment(nums = [1, 5, 10])",
        "minGroupsForValidAssignment(nums = [1, 3, 3, 3, 2, 1, 2])",
        "minGroupsForValidAssignment(nums = [2, 3, 2, 3, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [4, 11, 2, 11, 16, 11])"
    ],
    "sample_270": [
        "minSum(nums1 = [0, 0, 0], nums2 = [0, 0, 0])",
        "minSum(nums1 = [0, 0], nums2 = [1, 1])",
        "minSum(nums1 = [0,0], nums2 = [0])",
        "minSum(nums1 = [0, 0], nums2 = [2, 4])",
        "minSum(nums1 = [0, 1, 0, 2, 0], nums2 = [0, 0, 0, 0, 0])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [2, 2, 0, 2])",
        "minSum(nums1 = [0, 0, 1, 1, 1, 2], nums2 = [0, 0, 1, 1, 1, 2])",
        "minSum(nums1 = [3, 1, 2], nums2 = [3, 0, 0])",
        "minSum(nums1 = [2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 1, 2, 2, 0, 0, 0, 3, 3], nums2 = [3, 3, 1, 1, 0, 0, 0, 2, 2])"
    ],
    "sample_317": [
        "buyChoco(prices = [1,2,3,4], money = 7)",
        "buyChoco(prices = [1,2,3,4,5], money = 10)",
        "buyChoco(prices = [1,2,3,4], money = 10)",
        "buyChoco(prices = [5, 4, 3, 2, 1], money = 10)",
        "buyChoco(prices = [4, 1, 5], money = 8)",
        "buyChoco(prices = [2, 5, 7, 3], money = 10)",
        "buyChoco(prices=[3, 1, 1], money=2)",
        "buyChoco(prices = [10, 6, 7, 6, 8, 12], money = 25)",
        "buyChoco(prices = [3, 4, 5, 100], money = 8)",
        "buyChoco(prices = [2, 1, 3, 4, 5, 6, 7], money = 25)"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"abeced\", k = 2)",
        "beautifulSubstrings(s = \"bbaaac\", k = 3)",
        "beautifulSubstrings(s = \"ab\", k = 3)",
        "beautifulSubstrings(s = \"aeiouuaoeu\", k = 2)",
        "beautifulSubstrings(s = 'cbaebabacd', k = 4)",
        "beautifulSubstrings(s = 'aabcb', k = 3)",
        "beautifulSubstrings(s = \"beaeiou\", k = 3)",
        "beautifulSubstrings(s = \"beaubce\", k = 3)",
        "beautifulSubstrings(s = \"aaaeeiiiooooo\", k = 3)"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"abba\")",
        "longestSemiRepetitiveSubstring(s = \"aba\")",
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"baab\")",
        "longestSemiRepetitiveSubstring(s = \"aaabaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcd\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbb\")",
        "longestSemiRepetitiveSubstring(s = \"aaabb\")",
        "longestSemiRepetitiveSubstring(s = \"abababababababababababababababababababab\")",
        "longestSemiRepetitiveSubstring(s = \"123212321321\")"
    ],
    "sample_341": [
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 1, y = 1, z = 1)",
        "longestString(x = 3, y = 2, z = 4)",
        "longestString(x = 2, y = 5, z = 3)",
        "longestString(x = 10, y = 5, z = 2)",
        "longestString(x = 1, y = 3, z = 3)",
        "longestString(x = 2, y = 4, z = 8)",
        "longestString(x = 1, y = 4, z = 9)",
        "longestString(x = 6, y = 8, z = 3)"
    ],
    "sample_271": [
        "minSum(nums1 = [1,2,3], nums2 = [2,3,4])",
        "minSum(nums1 = [1, 1], nums2 = [1, 1, 1])",
        "minSum(nums1 = [1,2,3], nums2 = [0,4,5])",
        "minSum(nums1 = [0,1,1], nums2 = [1,0,1])",
        "minSum(nums1 = [3,2,1], nums2 = [4,5,6])",
        "minSum(nums1 = [2, 3, 2], nums2 = [1, 4, 1])",
        "minSum(nums1 = [2,3,4,5], nums2 = [1,7,9])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 0, 4, 5])",
        "minSum(nums1 = [2,5,1,1], nums2 = [2,5,1,1])",
        "minSum(nums1 = [2,1,3,1,1], nums2 = [4,1,2,0,2])"
    ],
    "sample_340": [
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 1, y = 2, z = 6)",
        "longestString(x = 2, y = 1, z = 4)",
        "longestString(x = 2, y = 3, z = 6)",
        "longestString(x = 2, y = 4, z = 5)",
        "longestString(x = 4, y = 2, z = 3)",
        "longestString(x = 1, y = 5, z = 3)",
        "longestString(x = 4, y = 6, z = 5)"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = '011101', k = 2)",
        "shortestBeautifulSubstring(s = \"00111\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110111\", k = 3)",
        "shortestBeautifulSubstring(s = '00111', k = 3)",
        "shortestBeautifulSubstring(s = \"01011\", k = 2)",
        "shortestBeautifulSubstring(s = \"21101\", k = 3)",
        "shortestBeautifulSubstring(s = \"2110111\", k = 3)",
        "shortestBeautifulSubstring(s = \"5312511\", k = 3)",
        "shortestBeautifulSubstring(s = \"122111121\", k = 3)",
        "shortestBeautifulSubstring(s = \"98765\", k = 111)"
    ],
    "sample_324": [
        "isFascinating(n = 0)",
        "isFascinating(n = 0)",
        "isFascinating(n = 2)",
        "isFascinating(n = 4)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 6)",
        "isFascinating(n = 10)",
        "isFascinating(n = 57)",
        "isFascinating(n = 433)",
        "isFascinating(n = 39700)"
    ],
    "sample_258": [
        "minimumSum(nums = [10, 5, 2, 7, 8, 7])",
        "minimumSum(nums = [1, 2, 4, 7])",
        "minimumSum(nums = [4, 3, 2, 1])",
        "minimumSum(nums = [4, 3, 2, 5, 1])",
        "minimumSum(nums = [2, 2, 2, 2, 2])",
        "minimumSum(nums = [4, 6, 2, 5, 9])",
        "minimumSum(nums = [3, 10, 1, 1, 2])",
        "minimumSum(nums = [4, 2, 3, 5, 6, 1])",
        "minimumSum(nums = [3, 5, 2, 1, 10])",
        "minimumSum(nums = [4, 2, 3, 6, 5, 1, 7, 2])"
    ],
    "sample_268": [
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [2, 3, 4, 5], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 1, 2, 4])",
        "minSum(nums1 = [1, 4, 4], nums2 = [0, 0, 0])",
        "minSum(nums1 = [4, 2], nums2 = [1, 1, 3])",
        "minSum(nums1 = [3, 4, 8], nums2 = [3, 8, 10])",
        "minSum(nums1 = [1,2,3,0,0,0], nums2 = [3,2,1,4,7])",
        "minSum(nums1 = [1, 3, 2, 5], nums2 = [6, 2, 0, 0, 4])",
        "minSum(nums1 = [1, 2, 3, 0, 9, 0], nums2 = [1, 3, 0, 0, 4, 0])",
        "minSum(nums1 = [1,2,3,1,1,2], nums2 = [2,1,3,2,3,4,2])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\")",
        "findMinimumOperations(s1 = \"cat\", s2 = \"dog\", s3 = \"hat\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"cde\", s3 = \"def\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"a\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"abc\", s3 = \"123\")",
        "findMinimumOperations(s1 = \"abcdef\", s2 = \"abcdef\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"bab\", s2 = \"abb\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abca\", s2 = \"abcb\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"CX\", s2 = \"XC\", s3 = \"XX\")",
        "findMinimumOperations(s1 = \"ace\", s2 = \"bdf\", s3 = \"gik\")"
    ],
    "sample_321": [
        "maxStrength(nums = [1, -2, 3, 4, -5, 6])",
        "maxStrength(nums = [2, -3, -1, 2])",
        "maxStrength(nums = [4, 2, -3, 4, -2])",
        "maxStrength(nums = [0, 10, -5, 2])",
        "maxStrength(nums = [3, 2, 1, 2, -3, 0])",
        "maxStrength(nums = [5, 6, -4, 8, -5])",
        "maxStrength(nums = [-2, -4, -5, 3, -2, 1, 6])",
        "maxStrength(nums = [2, -1, -1, 4, -1, 2, 1, 4, -2, 1])",
        "maxStrength(nums = [-5, 2, -7, 0, 3, 1, 1])",
        "maxStrength(nums = [-2, 0, -2, 4, -4, 4, 0, 4, -2, 2, 4, 0])"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1,2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2, 3], moveTo = [2, 1, 3])",
        "relocateMarbles(nums = [3, 2, 1], moveFrom = [2, 1], moveTo = [1, 2])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [0], moveTo = [4])",
        "relocateMarbles(nums = [1,2,3,4], moveFrom = [3], moveTo = [4])",
        "relocateMarbles(nums = [1, 2, 1, 2, 1], moveFrom = [1, 2], moveTo = [2, 1])",
        "relocateMarbles(nums = [2, 5, 4, 1, 3], moveFrom = [1, 4], moveTo = [3, 1])"
    ],
    "sample_357": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveFrom = [8, 10], moveTo = [6, 9])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 2, 3], moveTo = [9, 8, 7])",
        "relocateMarbles(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveFrom=[8, 10], moveTo=[5, 9])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveFrom = [2, 5, 8], moveTo = [4, 6, 9])",
        "relocateMarbles(nums = [5, 3, 1, 2, 6, 4], moveFrom = [3, 5, 1], moveTo = [6, 4, 2])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9, 10, 11, 12], moveFrom = [6, 9], moveTo = [5, 9])",
        "relocateMarbles(nums = [5, 3, 8, 9, 6, 1, 2], moveFrom = [8, 3], moveTo = [9, 1])",
        "relocateMarbles(nums = [9, 8, 5, 6, 7], moveFrom = [9, 5], moveTo = [4, 8])",
        "relocateMarbles(nums = [8, 6, 5, 3, 2, 4, 5, 6, 7, 8], moveFrom = [5, 5], moveTo = [6, 8])",
        "relocateMarbles(nums = [9, 6, 10, 11, 8, 7, 6, 12, 13, 14, 15, 2, 16, 17, 1, 18], moveFrom = [7, 17, 12], moveTo = [13, 10])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 5, 3], money = 8)",
        "buyChoco(prices = [1, 5, 3], money = 8)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 9)",
        "buyChoco(prices = [3, 2, 1], money = 10)",
        "buyChoco(prices = [3, 9, 2], money = 10)",
        "buyChoco(prices = [1, 3], money = 6)",
        "buyChoco(prices = [5, 10, 8, 7], money = 11)",
        "buyChoco(prices = [1,2,3,10], money = 18)",
        "buyChoco(prices = [1, 3, 2, 10, 4, 5, 10], money = 18)",
        "buyChoco(prices = [1,5,7,1,2,3,4], money = 6)"
    ],
    "sample_308": [
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2], [1, 2]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [3, 1, 2], [2, 3, 1]])",
        "matrixSum(nums = [[1, 2, 3], [3, 4, 5], [4, 5, 6], [5, 6, 7]])",
        "matrixSum(nums = [[0, 2], [4, 6]])",
        "matrixSum(nums = [[2, 6], [2, 4]])",
        "matrixSum(nums = [[3, 10], [5, 11], [2, 9]])",
        "matrixSum(nums = [[-5, 0, 5], [1, -5, 0]])",
        "matrixSum(nums = [[5, -1, 9], [3, 4, -2]])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2], money = 3)",
        "buyChoco(prices = [1,2,3], money = 1)",
        "buyChoco(prices = [1, 3], money = 1)",
        "buyChoco(prices = [2, 4], money = 5)",
        "buyChoco(prices = [2,5], money = 8)",
        "buyChoco(prices = [2, 5, 8], money = 9)",
        "buyChoco(prices = [1, 2, 100], money = 200)",
        "buyChoco(prices = [2, 10], money = 9)",
        "buyChoco(prices = [1,5,4,6], money = 10)"
    ],
    "sample_259": [
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [1,2,3,4,5,6,7])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [4, 2, 1, 3])",
        "minimumSum(nums = [10,5,2,7,8,7])",
        "minimumSum(nums = [5,3,6,1,2])",
        "minimumSum(nums = [20,30,10,20])",
        "minimumSum(nums = [100, 150, 10, 20])",
        "minimumSum(nums = [2,3,1,5,2,6,5,3])",
        "minimumSum(nums = [4,6,3,7,2,8,2,4,1,1,1,4,1,1,6,6,5,5,4,5,4,4,4,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [3, 1, 4, 2])",
        "alternatingSubarray(nums = [1, 2, 3, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 3, 4])",
        "alternatingSubarray(nums = [2, 3, 1, 5, 7])",
        "alternatingSubarray(nums = [3, 2, 1, 1, 4, 5, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 3, 4, 2, 2, 4, 5, 8, 7])",
        "alternatingSubarray(nums = [10, 11, 12, 0, 8, 7, 6, 5])",
        "alternatingSubarray(nums = [1, 4, 7, 10, 12, 15, 17, 21, 24, 27, 29, 32, 34, 37])"
    ],
    "sample_311": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])",
        "matrixSum(nums = [[1, 0, 0], [0, 0, 1], [0, 0, 0]])",
        "matrixSum(nums = [[0,1], [0,0]])",
        "matrixSum(nums = [[0, 0, 1],\n                         [0, 0, 0],\n                         [0, 0, 1]])",
        "matrixSum(nums = [[5, 1, 4, 2], [1, 1, 3, 3]])",
        "matrixSum(nums = [[0, 3, 5], [4, 6, 0], [1, 2, 9]])",
        "matrixSum(nums = [[3,3,3],[1,3,2],[3,3,3],[3,3,3]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 2], money = 4)",
        "buyChoco(a = [1, 3], money = 5)",
        "buyChoco(a = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(a = [1, 2, 3, 4], money = 5)",
        "buyChoco(a = [0, 1, 2], money = 5)",
        "buyChoco(a = [1, 1, 1, 1, 1], money = 2)",
        "buyChoco(a = [1, 3, 7], money = 11)",
        "buyChoco(a = [100, 50, 20, 10, 5], money = 100)",
        "buyChoco(a = [20, 10, 3, 5, 15], money = 24)",
        "buyChoco(a = [0, 0, 3, 10, 11, 12], money = 23)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [2, 4, 3])",
        "minGroupsForValidAssignment(nums = [1,2,3])",
        "minGroupsForValidAssignment(nums = [1, 1, 3, 2])",
        "minGroupsForValidAssignment(nums = [1, 3, 3, 2, 1, 4, 1])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5",
        "minGroupsForValidAssignment(nums = [2, 3, 4, 10, 12, 20])",
        "minGroupsForValidAssignment(nums = [2, 5, 4, 9, 8, 3, 6])",
        "minGroupsForValidAssignment(nums = [2, 4, 5, 6, 6, 6, 8, 8, 8, 11])",
        "minGroupsForValidAssignment(nums = [30, 25, 100, 50, 25, 25, 25, 25, 25])",
        "minGroupsForValidAssignment(nums = [6, 5, 7, 9, 5, 2, 3, 6, 4, 4, 7, 1, 3, 5, 8, 9, 5, 3, 6, 5, 7, 7, 6, 7, 1, 3, 9, 7, 2, 4, 5, 3, 5, 8, 2, 6, 7, 7, 2, 5, 4, 8, 4, 1, 5, 8, 4, 1, 8, 8, 5, 8, 4, 5, 7, 6, 4, 5, 6, 1, 6, 8, 5, 9, 8, 8, 2, 4, 7, 8, 5, 3, 9, 6, 4, 8, 5, 4, 5, 6, 9, 4, 5, 4, 7, 4, 4, 7, 9, 9, 4, 4, 7, 9, 4, 1, 5, 7, 7, 3, 7, 2, 8, 5, 4, 9, 6, 5, 4, 6, 8, 5, 7, 8, 4, 3, 7, 6, 3, 4, 9, 5, 4, 7, 3, 8, 8, 7, 5, 2, 8, 8, 3, 4, 7, 6, 3, 4, 5, 4, 4, 5, 9, 6, 2, 7, 5, 4, 3, 7, 5, 4, 4, 7, 6, 6, 8, 8, 7, 4, 7, 5, 7, 6, 5, 3, 7, 6, 8, 5, 5, 7, 9, 6, 4, 5, 4, 5, 7, 2, 9, 6, 5, 9, 4, 4, 3, 4"
    ],
    "sample_276": [
        "findChampion(grid = [[0, 1, 0], [1, 1, 0], [0, 1, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 1], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [0, 0, 1]])",
        "findChampion(grid = [[1, 1, 0], [0, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0],\n                            [0, 0, 1],\n                            [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 1, 0], [1, 0, 0, 1], [1, 1, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[0, 1, 1, 1], [1, 1, 1, 1], [1, 0, 0, 1], [0, 1, 1, 1]])",
        "findChampion(grid = [\n[1, 2, 3, 4],\n[1, 2, 1, 4],\n[1, 2, 1, 4],\n[1, 2, 1, 4]\n])",
        "findChampion(grid = [[1, 0, 1, 0, 1], [0, 0, 1, 0, 1], [1, 1, 0, 0, 0], [0, 1, 0, 0, 1], [1, 0, 0, 0, 1]])",
        "findChampion(grid = [[2, 0, 0, 2, 0], [0, 1, 0, 2, 0], [0, 0, 1, 0, 2], [2, 0, 0, 0, 1], [0, 0, 0, 1, 0]])"
    ],
    "sample_320": [
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [2, 4, 5, 3])",
        "maxStrength(nums = [2, 10, 3])",
        "maxStrength(nums = [1, 2, 3, 4, 5, 6, 7])",
        "maxStrength(nums = [2, 3, 10])",
        "maxStrength(nums = [1, 5, 2, 10])",
        "maxStrength(nums = [5, 8, 1, 4, 3])",
        "maxStrength(nums = [2, 3, 10, 8, 4, 1])",
        "maxStrength(nums = [2, 4, 5, 6, 3, 10, 9, 13, 11])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"zyx\", \"wvu\", \"tsr\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"abcd\"])",
        "minimizeConcatenatedLength(words = [\"ca\", \"bb\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"apple\"])",
        "minimizeConcatenatedLength(words = [\"brown\", \"the\", \"fox\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"ab\", \"cde\", \"bca\"])",
        "minimizeConcatenatedLength(words = [\"baa\", \"abcd\", \"abce\"])",
        "minimizeConcatenatedLength(words = [\"bb\",\"bb\",\"bbb\"])",
        "minimizeConcatenatedLength(words = [\"bh\", \"co\", \"ke\", \"u\"])",
        "minimizeConcatenatedLength(words = [\"co\", \"a\", \"b\", \"de\", \"bd\", \"cd\", \"e\"])"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"cd\", s3 = \"ef\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"ace\")",
        "findMinimumOperations(s1 = \"xxx\", s2 = \"xxx\", s3 = \"xxx\")",
        "findMinimumOperations(s1 = \"bac\", s2 = \"cab\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"bbb\", s3 = \"cdd\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"cd\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abaa\", s2 = \"bbaa\", s3 = \"cbaa\")",
        "findMinimumOperations(s1 = \"12121\", s2 = \"12122\", s3 = \"121221\")",
        "findMinimumOperations(s1 = \"babaca\", s2 = \"xyzabaca\", s3 = \"xyba\")"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [10, 1, 2, 4, 7, 2])",
        "alternatingSubarray(nums = [1, 3, 2, 3, 5, 0, 1, 4, 7])",
        "alternatingSubarray(nums = [1, 3, 2, 3, 5, 0, 1, 3])",
        "alternatingSubarray(nums = [1, 3, 4, 1, 2])",
        "alternatingSubarray(nums = [1, 11, 2, 10, 4, 5, 2, 1])",
        "alternatingSubarray(nums = [1, 3, 2, 3, 4, 1])",
        "alternatingSubarray(nums = [1, 3, 2, 3, 5, 6, 3, 2])",
        "alternatingSubarray(nums = [3, 2, 1, 1, 2, 1, 3])",
        "alternatingSubarray(nums = [3, 4, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [4, 2, 5, 7, 3, 8, 9, 5, 4, 6, 5, 6, 7, 8, 9, 3])"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0], [1, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 1, 0], [0, 1, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 2, 3], [3, 4, 5], [5, 6, 7]])",
        "findChampion(grid = [[0, 1, 2], [2, 0, 1], [1, 2, 0]])",
        "findChampion(grid = [\n    [1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1]\n])"
    ],
    "sample_304": [
        "countSeniors(details = [\"123456789018\", \"123456789019\", \"123456789012\"])",
        "countSeniors(details = [\"A12345678910\", \"A12345678911\", \"B12345678912\"])",
        "countSeniors(details = [\"987654321012345\", \"678901234567890\", \"123456789012345\"])",
        "countSeniors(details = [\"123456789112\", \"123456789213\", \"123456789314\", \"123456789415\", \"123456789516\", \"123456789617\", \"123456789718\", \"123456789819\"])",
        "countSeniors(details = [\"A01111111101\", \"A01111111102\", \"A01111111103\", \"A01111111104\", \"A01111111105\", \"A01111111106\", \"A01111111107\", \"A01111111108\", \"A01111111109\", \"A01111111110\", \"A01111111111\"])",
        "countSeniors(details = [\"Jane Doe\", \"John Doe\", \"Mike Doe\", \"Janet Doe\"])",
        "countSeniors(details = [\"123456789002\", \"123456789003\", \"123456789061\", \"123456789062\", \"123456789063\", \"123456789070\", \"123456789071\", \"123456789072\", \"123456789073\", \"123456789074\", \"123456789081\", \"123456789082\", \"123456789083\"])",
        "countSeniors(details = [\"H19640101\", \"M19640102\", \"M19640103\", \"H19650101\", \"F19650102\"])",
        "countSeniors(details = [\"Name1,03042019,M\", \"Name2,01021999,F\", \"Name3,03032010,M\", \"Name4,02012010,F\"])",
        "countSeniors(details = [\"A02579487P\",\"A02579487P\",\"A02607360E\"])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 2)",
        "beautifulSubstrings(s = \"abac\", k = 3)",
        "beautifulSubstrings(s = \"abacb\", k = 1)",
        "beautifulSubstrings(s = \"cabbac\", k = 2)",
        "beautifulSubstrings(s = \"aeeaouaoaueaa\", k = 2)",
        "beautifulSubstrings(s = \"aaaaahhhhh\", k = 2)",
        "beautifulSubstrings(s = \"aabcbc\", k = 1)",
        "beautifulSubstrings(s = \"aeiouuuuouuiou\", k = 3)",
        "beautifulSubstrings(s = \"abracadabra\", k = 2)"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"011101\", k = 2)",
        "shortestBeautifulSubstring(s = \"011101\", k = 2)",
        "shortestBeautifulSubstring(s = \"011101\", k = 2)",
        "shortestBeautifulSubstring(s = \"0111011\", k = 2)",
        "shortestBeautifulSubstring(s = \"011011\", k = 2)",
        "shortestBeautifulSubstring(s = '1101', k = 2)",
        "shortestBeautifulSubstring(s = \"01111111\", k = 3)",
        "shortestBeautifulSubstring(s = \"1110110\", k = 3)",
        "shortestBeautifulSubstring(s = '10011000', k = 3)",
        "shortestBeautifulSubstring(s = \"111100101110111111001\", k = 4)"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"ab\", \"abc\", \"cd\", \"def\", \"abcd\"])",
        "minimizeConcatenatedLength(words = [\"az\", \"ba\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"bcd\", \"cdx\"])",
        "minimizeConcatenatedLength(words = [\"xxyyxyxyxx\", \"xyyxyxyxx\"])",
        "minimizeConcatenatedLength(words = [\"b\", \"a\", \"a\", \"a\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"ba\", \"da\"])",
        "minimizeConcatenatedLength(words = [\"satoshi\", \"nakamoto\"])",
        "minimizeConcatenatedLength(words = [\"bbbab\", \"abaa\", \"aa\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"a\",\"b\",\"ba\",\"a\",\"b\",\"ba\",\"a\",\"b\"])",
        "minimizeConcatenatedLength(words = [\"xzxb\",\"tybt\",\"zxvb\"])"
    ],
    "sample_327": [
        "isFascinating(n = 4)",
        "isFascinating(n = 123)",
        "isFascinating(n = 13)",
        "isFascinating(n = 11)",
        "isFascinating(n = 4)",
        "isFascinating(n = 9)",
        "isFascinating(n = 29)",
        "isFascinating(n = 124)",
        "isFascinating(n = 900)",
        "isFascinating(n = 11102)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]])",
        "matrixSum(nums = [[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]])",
        "matrixSum(nums = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]])",
        "matrixSum(nums = [[2, 1]])",
        "matrixSum(nums = [[1,2,3],[2,3,4]])",
        "matrixSum(nums = [[2], [1, 1], [1, 1]])",
        "matrixSum(nums = [[1, 3, 4, 8, 9], [2, 6, 7, 10]])",
        "matrixSum(nums = [[3, 1, 2, 3], [8, 9, 12, 9], [2, 7, 6, 11], [10, 10, 9, 20], [1, 5, 7, 1]])"
    ],
    "sample_326": [
        "isFascinating(n = 123)",
        "isFascinating(n = 12)",
        "isFascinating(n = 7)",
        "isFascinating(n = 7)",
        "isFascinating(n = 100)",
        "isFascinating(n = 19)",
        "isFascinating(n = 145)",
        "isFascinating(n = 12345678)",
        "isFascinating(n = 252)",
        "isFascinating(n = 719)"
    ],
    "sample_275": [
        "findChampion(grid = [[1, 0, 0], [1, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[0, 0, 1], [1, 1, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 0, 1], [1, 1, 0], [0, 1, 0]])",
        "findChampion(grid = [[0, 0, 1], [0, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0, 0], [1, 0, 0, 0], [1, 1, 1, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[0, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]])",
        "findChampion(grid = [[0,0,0,0,1,0,0,0], [1,1,1,0,1,0,0,0], [0,0,0,0,1,0,0,0], [0,0,0,0,0,0,0,0], [1,1,1,1,1,1,1,1], [0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0]])",
        "findChampion(grid = [\n    [1, 2, 3, 0, 0],\n    [2, 0, 0, 0, 0],\n    [0, 0, 0, 1, 2],\n    [0, 0, 0, 1, 2],\n    [2, 0, 0, 0, 0]\n])"
    ],
    "sample_260": [
        "minimumSum(nums = [1, 2, 4, 8])",
        "minimumSum(nums = [1, 2, 4, 8])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [1, 2, 4, 7])",
        "minimumSum(nums = [5, 6, 7, 8, 1, 2])",
        "minimumSum(nums = [11, 4, 5, 2])",
        "minimumSum(nums = [10, 1, 7, 3, 19, 5, 16])",
        "minimumSum(nums = [10, 5, 11, 14, 19, 4])",
        "minimumSum(nums = [6, 8, 5, 4, 3, 5, 7, 9])"
    ],
    "sample_322": [
        "isFascinating(n = 123)",
        "isFascinating(n = 3)",
        "isFascinating(n = 14)",
        "isFascinating(n = 14)",
        "isFascinating(n = 18)",
        "isFascinating(n = 25)",
        "isFascinating(n = 198)",
        "isFascinating(n = 567)",
        "isFascinating(n = 3162)",
        "isFascinating(n = 773090330)"
    ],
    "sample_248": [
        "minOperations(s1 = \"011\", s2 = \"110\", x = 3)",
        "minOperations(s1 = \"101\", s2 = \"011\", x = 2)",
        "minOperations(s1 = \"00110\", s2 = \"10001\", x = 3)",
        "minOperations(s1 = \"0101010\", s2 = \"0101010\", x = 3)",
        "minOperations(s1 = \"01110\", s2 = \"11100\", x = 3)",
        "minOperations(s1 = \"111001\", s2 = \"111000\", x = 3)",
        "minOperations(s1 = \"1101000\", s2 = \"1010101\", x = 3)",
        "minOperations(s1 = \"001000\", s2 = \"100111\", x = 3)",
        "minOperations(s1 = '1111101', s2 = '1110111', x = 3)",
        "minOperations(s1 = \"0110111\", s2 = \"1010111\", x = 4)"
    ],
    "sample_342": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 2, z = 1)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 2, y = 1, z = 1)",
        "longestString(x = 3, y = 3, z = 1)",
        "longestString(x = 2, y = 2, z = 4)",
        "longestString(x = 4, y = 6, z = 8)",
        "longestString(x = 5, y = 3, z = 7)"
    ],
    "sample_354": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 3, 4], moveTo = [5, 6, 7])",
        "relocateMarbles(nums = [1, 5, 6, 8, 9], moveFrom = [1, 5], moveTo = [5, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [7, 8, 9], moveTo = [5, 6, 7])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 4, 6, 8], moveTo = [7, 1, 3, 5])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [3, 5], moveTo = [3, 8])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9, 10], moveFrom = [10, 8, 7], moveTo = [9, 6, 5])",
        "relocateMarbles(nums = [5, 6, 8, 9, 1, 2, 3], moveFrom = [5, 8, 3], moveTo = [9, 6, 2])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [3, 1, 2], moveTo = [5, 5, 5])",
        "relocateMarbles(nums = [4, 3, 2, 6, 5, 8, 1, 7], moveFrom = [8, 1], moveTo = [1, 8])",
        "relocateMarbles(nums = [1, 5, 8, 9, 11, 15], moveFrom = [1, 1, 1, 1, 1, 1], moveTo = [5, 8, 9, 11, 15, 1])"
    ],
    "sample_306": [
        "countSeniors(details = [\"abcdefghijkl\", \"abcdefghijklm\", \"abcdefghijklmn\"])",
        "countSeniors(details = [\"Senior1\", \"Senior2\", \"Senior3\", \"Senior4\"])",
        "countSeniors(details = [\"123456789101\", \"123456789101\", \"123456789101\", \"123456789101\", \"123456789110\"])",
        "countSeniors(details = [\"01-01-1999\", \"02-02-1998\", \"03-03-2000\"])",
        "countSeniors(details = [\"1996-05-13\", \"1989-04-01\", \"1990-05-21\", \"1974-09-12\"])",
        "countSeniors(details = [\"babby\", \"mamma\", \"paul\", \"robert\", \"angus\"])",
        "countSeniors(details = [\"19990101\", \"19780610\", \"19650226\", \"20030923\"])",
        "countSeniors(details = [\"091219920000\",\"121220000000\",\"010119950000\",\"231220000000\"])",
        "countSeniors(details = [\"9910109999\", \"8907048888\", \"9910101999\", \"9910101999\", \"8907041888\"])",
        "countSeniors(details = [\"aa010101955aa\", \"aa020201856aa\", \"aa030301878aa\", \"aa040401975aa\", \"aa050501952aa\", \"aa060601958aa\"])"
    ],
    "sample_303": [
        "countSeniors(details = [\"0123456789000\"])",
        "countSeniors(details = [\"S117224\", \"S117224\", \"S117224\", \"S117224\", \"S117224\"])",
        "countSeniors(details = [\"aa1288\", \"ba1221\", \"ca1970\"])",
        "countSeniors(details = [\"23-Senior-Developer\", \"39-Senior-Developer\", \"50-Senior-Developer\", \"20-Developer\", \"38-Developer\"])",
        "countSeniors(details = [\"Mike 1991\", \"Judy 1987\", \"Sue 1974\", \"Sarah 1996\"])",
        "countSeniors(details = [\"PBABC\", \"BBAGE\", \"PBAJG\", \"AGGED\"])",
        "countSeniors(details = [\"Jim:1961\",\"Jack:1987\",\"James:1991\",\"Jim:1986\",\"Bill:1960\"])",
        "countSeniors(details = [\"Sammy\", \"Rachel\", \"Sally\", \"Jeff\", \"Sandy\", \"Sarah\", \"Barry\", \"George\"])",
        "countSeniors(details = [\"E2321\", \"L2333\", \"K6433\", \"H3323\", \"W2343\"])",
        "countSeniors(details = [\"Prakash\", \"Jay\", \"Himanshu\", \"Jigar\", \"1820\", \"2340\", \"1960\", \"3210\"])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [6, 9], moveTo = [8, 5])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [3, 1], moveTo = [6, 4])",
        "relocateMarbles(nums = [8, 9, 6, 5, 3, 7], moveFrom = [3, 5], moveTo = [6, 8])",
        "relocateMarbles(nums = [4, 3, 1, 2], moveFrom = [3], moveTo = [2])",
        "relocateMarbles(nums = [1, 5, 6, 5, 8, 9], moveFrom = [1, 5, 6], moveTo = [4, 3, 2])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9, 1, 2, 3, 4], moveFrom = [2, 3, 1], moveTo = [4, 5, 3])",
        "relocateMarbles(nums = [1, 1, 4, 2, 7, 5, 3], moveFrom = [2, 3], moveTo = [5, 6])",
        "relocateMarbles(nums = [8, 5, 6, 9, 3, 1, 4], moveFrom = [5, 1], moveTo = [6, 8])",
        "relocateMarbles(nums = [1, 3, 5, 7, 9], moveFrom = [5, 7, 1], moveTo = [2, 3, 4])",
        "relocateMarbles(nums = [2, 3, 4, 10, 11, 12, 6, 7, 8, 9, 5], moveFrom = [1, 5], moveTo = [11, 8])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"bbb\", s3 = \"caa\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"xyz\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"b\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"aa\", s2 = \"ab\", s3 = \"aa\")",
        "findMinimumOperations(s1=\"xyxy\", s2=\"xyxy\", s3=\"xyxy\")",
        "findMinimumOperations(s1 = \"bbbb\", s2 = \"aaaa\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"aabc\", s3 = \"aabcd\")",
        "findMinimumOperations(s1 = \"aaaaaa\", s2 = \"aaaaaa\", s3 = \"aaaaaaaa\")",
        "findMinimumOperations(s1 = \"AABAA\", s2 = \"AAABA\", s3 = \"BAAAA\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"b\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"aaa\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"bab\", s2 = \"abb\", s3 = \"bac\")",
        "findMinimumOperations(s1 = \"mom\", s2 = \"dad\", s3 = \"pop\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"baa\", s3 = \"aba\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"edc\", s3 = \"cde\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"aaa\", s3 = \"aaaa\")",
        "findMinimumOperations(s1 = \"bana\", s2 = \"nanab\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"hey\", s2 = \"hello\", s3 = \"hello\")",
        "findMinimumOperations(s1 = \"hackerhacker\", s2 = \"hacker\", s3 = \"hackerrank\")"
    ]
}