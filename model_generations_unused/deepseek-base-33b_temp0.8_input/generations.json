{
    "sample_287": [
        "findMinimumOperations(s1 = \"\", s2 = \"\", s3 = \"\")",
        "findMinimumOperations(s1 = \"\", s2 = \"\", s3 = \"\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"bana\", s3 = \"ban\")",
        "findMinimumOperations(s1 = \"aa\", s2 = \"ba\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"efg\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"cdef\", s3 = \"abcdef\")",
        "findMinimumOperations(s1 = \"bbc\", s2 = \"abc\", s3 = \"abb\")",
        "findMinimumOperations(s1=\"ababa\", s2=\"ba\", s3=\"ababa\")"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"baaabbabbb\")",
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbaaa\")",
        "longestSemiRepetitiveSubstring(s = \"baaaba\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbb\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbbcc\")",
        "longestSemiRepetitiveSubstring(s = \"bbbbbb\")",
        "longestSemiRepetitiveSubstring(s = \"aabcde\")",
        "longestSemiRepetitiveSubstring(s = \"110000111\")",
        "longestSemiRepetitiveSubstring(s = \"acbbcda\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [])",
        "maximumNumberOfStringPairs(words = [])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"dc\", \"ll\", \"xx\"])",
        "maximumNumberOfStringPairs(words = [\"x\", \"y\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"oo\", \"oo\"])",
        "maximumNumberOfStringPairs(words = [\"ck\"])",
        "maximumNumberOfStringPairs(words=['aa','bb'])",
        "maximumNumberOfStringPairs(words = [\"no\", \"words\"])",
        "maximumNumberOfStringPairs(words = [\"bc\",\"da\",\"aa\",\"ac\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yx\", \"racecar\"])"
    ],
    "sample_247": [
        "minOperations(s1 = \"abcd\", s2 = \"bcdf\", x = 3)",
        "minOperations(s1 = \"a\", s2 = \"b\", x = 2)",
        "minOperations(s1 = \"abcd\", s2 = \"bcda\", x = 2)",
        "minOperations(s1 = \"0010\", s2 = \"0110\", x = 1)",
        "minOperations(s1 = \"aac\", s2 = \"aab\", x = 2)",
        "minOperations(s1 = \"11100\", s2 = \"10101\", x = 1)",
        "minOperations(s1 = \"abcde\", s2 = \"dcaeb\", x = 2)",
        "minOperations(s1 = \"100100\", s2 = \"110110\", x = 1)",
        "minOperations(s1 = \"xxyyzz\", s2 = \"zzyyxx\", x = 10)",
        "minOperations(s1 = \"aaaaa\", s2 = \"bcbcb\", x = 2)"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"lc\",\"cl\",\"gg\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"dc\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"gc\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"no\", \"leg\", \"so\", \"go\"])",
        "maximumNumberOfStringPairs(words = [\"xl\", \"xl\"])",
        "maximumNumberOfStringPairs(words = [\"b\",\"ab\",\"ba\"])",
        "maximumNumberOfStringPairs(words = [\"i\",\"i\",\"ii\",\"i\"])",
        "maximumNumberOfStringPairs(words = [\"nz\", \"lo\", \"zn\", \"ol\"])"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 1, 3])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 1, 3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minGroupsForValidAssignment(nums = [2,3,1,3,3,2])",
        "minGroupsForValidAssignment(nums = [2, 3, 1, 2, 3, 2])",
        "minGroupsForValidAssignment(nums = [4, 3, 4, 4, 4])",
        "minGroupsForValidAssignment(nums=[2,3,3,4,4,4,4,5,5,5,5,5,5,6,6,6,6,7,7,7,7,7,7,8,8,8,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 6, m = 3)",
        "differenceOfSums(n = 6, m = 2)",
        "differenceOfSums(n=15, m=5)"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"110011\", k = 2)",
        "shortestBeautifulSubstring(s = '000011', k = 2)",
        "shortestBeautifulSubstring(s = '1011101', k = 2)",
        "shortestBeautifulSubstring(s = \"000111\", k = 1)",
        "shortestBeautifulSubstring(s = '101111', k = 2)",
        "shortestBeautifulSubstring(s = \"00111001\", k = 2)",
        "shortestBeautifulSubstring(s = \"000000\", k = 2)",
        "shortestBeautifulSubstring(s = \"101001\", k = 3)",
        "shortestBeautifulSubstring(s = \"101000001\", k = 2)",
        "shortestBeautifulSubstring(s = '1001010011', k = 3)"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"cd\", s3 = \"ef\")",
        "findMinimumOperations(s1=\"a\", s2=\"b\", s3=\"c\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abcd\", s3 = \"abcde\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"aabc\", s3 = \"abbc\")",
        "findMinimumOperations(s1 = \"cde\", s2 = \"abe\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"sunday\", s2 = \"saturday\", s3 = \"sunny\")",
        "findMinimumOperations(s1=\"cat\", s2=\"moon\", s3=\"bate\")"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"baaabbabbb\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"abaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbbaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"11011101111\")",
        "longestSemiRepetitiveSubstring(s=\"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"111101111\")",
        "longestSemiRepetitiveSubstring(s = \"abcbaa\")",
        "longestSemiRepetitiveSubstring(s = \"bbabbbaabaa\")"
    ],
    "sample_272": [
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 1, 1])",
        "minSum(nums1=[1,2,3,4,5], nums2=[6,7,8,9,10])",
        "minSum(nums1 = [1, 3, 5], nums2 = [3, 5, 7])",
        "minSum(nums1 = [1, 2, 3, 0], nums2 = [3, 2, 1, 1])",
        "minSum(nums1 = [1, 3, 4, 4], nums2 = [2, 5, 0, 0])",
        "minSum(nums1 = [2, 1, 3], nums2 = [10, 5, 0])",
        "minSum(nums1 = [4, 6, 2], nums2 = [1, 3, 1])",
        "minSum(nums1 = [3, 6, 4], nums2 = [0, 0, 5])",
        "minSum(nums1 = [3, 6, 7, 10], nums2 = [1, 2, 10, 0])"
    ],
    "sample_289": [
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"1\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"0000000\")",
        "minimumSteps(s=\"0\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"00110\")"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [0])",
        "maximumTripletValue(nums = [0])",
        "maximumTripletValue(nums = [1, 2, 1])",
        "maximumTripletValue(nums = [2, 1, 2])",
        "maximumTripletValue(nums = [5,2,1,3,4])",
        "maximumTripletValue(nums = [-1, 0, -2, -3, -4])",
        "maximumTripletValue(nums = [4, 2, 3, 2, 3, 4, 6, 7, 8])"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aiueo\", k = 1)",
        "beautifulSubstrings(s = \"aaaaa\", k = 1)",
        "beautifulSubstrings(s = \"az\", k = 2)",
        "beautifulSubstrings(s = \"b\", k = 4)",
        "beautifulSubstrings(s=\"b\", k=2)",
        "beautifulSubstrings(s = \"aeiouuoiea\", k = 2)",
        "beautifulSubstrings(s = \"aaaa\", k = 3)",
        "beautifulSubstrings(s = \"aiueoaaiueo\", k = 1)",
        "beautifulSubstrings(s = \"aaiuueo\", k = 3)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1111101\")",
        "minimumBeautifulSubstrings(s = \"101101\")",
        "minimumBeautifulSubstrings(s = \"10110\")",
        "minimumBeautifulSubstrings(s = \"01011011\")",
        "minimumBeautifulSubstrings(s = \"01111\")",
        "minimumBeautifulSubstrings(s = \"0100000\")",
        "minimumBeautifulSubstrings(s = \"01101111010111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    ],
    "sample_313": [
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1], [2]])",
        "matrixSum(a = [[1, 1, 1], [1, 1, 1], [1, 1, 1]])",
        "matrixSum(a = [[1, 2, 3]])",
        "matrixSum(a = [[1,2], [3,4]])",
        "matrixSum(a=[[1, 1, 0], [1, 1, 1], [0, 1, 0], [0, 0, 1]])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2], nums2 = [2, 3])",
        "minSum(nums1 = [1,2,3], nums2 = [4,0,5])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [5, 6])",
        "minSum(nums1 = [0, 1, 2], nums2 = [2, 1, 0])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [3, 2, 1, 0])",
        "minSum(nums1 = [1,0,2], nums2 = [3,0,1])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [3, 4])",
        "minSum(nums1 = [5, 2, 3], nums2 = [1, 0, 4])",
        "minSum(nums1 = [5, 4, 3, 0], nums2 = [1, 0, 2, 0])"
    ],
    "sample_282": [
        "minOperations(nums1 = [1,1,1,1,1,1,1], nums2 = [6])",
        "minOperations(nums1 = [1, 2], nums2 = [2, 3])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 4, 6])",
        "minOperations(nums1 = [3, 5, 1, 2, 3], nums2 = [3, 6, 3, 3, 4])",
        "minOperations(nums1 = [2,10,6,4,8,1], nums2 = [3,7,1,6])",
        "minOperations(nums1 = [2,3], nums2 = [5,4])",
        "minOperations(nums1 = [2,2,4], nums2 = [3,3,5])",
        "minOperations(nums1 = [2, 3, 1, 5], nums2 = [4, 6, 7, 8])",
        "minOperations(nums1=[2,5,6], nums2=[1,2,10])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1,2,3,4,5,6])",
        "alternatingSubarray(nums = [1,2,1,2,1,2,1])",
        "alternatingSubarray(nums = [1,2,3,4,4,5,6,7])",
        "alternatingSubarray(nums = [3, 1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 1, 2, 3, 2, 2, 4, 4, 5])",
        "alternatingSubarray(nums = [5, 5, 6, 7, 7, 8, 8, 9, 9, 10])",
        "alternatingSubarray(nums = [3,1,2,3,4,2,1])",
        "alternatingSubarray(nums = [1,2,1,3,2,2,3,2,1,2,1])",
        "alternatingSubarray(nums = [2, 4, 5, 6, 6, 6, 8, 11])",
        "alternatingSubarray(nums = [4, 2, 5, 3, 6, 4, 3, 5, 3, 5, 6, 4])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 3], money = 1)",
        "buyChoco(prices = [3, 2, 1], money = 5)",
        "buyChoco(prices = [1, 2], money = 1)",
        "buyChoco(prices = [1,2,3], money = 4)",
        "buyChoco(prices = [1,2,3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 10)",
        "buyChoco(prices = [1, 3, 2], money = 5)",
        "buyChoco(prices = [1,2,3,4], money = 5)",
        "buyChoco(prices = [5, 3, 2], money = 10)",
        "buyChoco(prices = [10, 20], money = 30)"
    ],
    "sample_302": [
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors(details = [\"A12345678 20\", \"B12345678 21\", \"C12345678 22\", \"D12345678 23\", \"E12345678 61\", \"F12345678 62\", \"G12345678 63\", \"H12345678 64\", \"I12345678 65\", \"J12345678 66\"])",
        "countSeniors([\"111111111111\", \"121212121212\", \"123456789012\", \"999999999999\"])",
        "countSeniors(details = [\"Alice 20001019\", \"Bob 19600101\", \"Bill 19801231\", \"Alice 19990216\"])",
        "countSeniors(details = [\"john-43-male\", \"jill-22-female\", \"andy-61-male\", \"ann-52-female\", \"bob-30-male\", \"jim-56-male\"])",
        "countSeniors(details = [\"98080371251234,Kumiko,Kawaguchi,F,69\", \"98011011235345,Yui,Aragaki,F,11\", \"98081011235345,Toshiko,Tanaka,F,22\"])",
        "countSeniors(details = [\"4290310086,4,F\", \"9303331150,5,M\", \"5320598248,3,M\", \"4415026748,8,M\", \"2518479973,12,M\", \"1010852854,3,F\", \"7617407367,11,M\", \"8373842098,12,M\"])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 4)",
        "beautifulSubstrings(s = \"\", k = 3)",
        "beautifulSubstrings(s=\"aeiou\", k=1)",
        "beautifulSubstrings(s = \"abcac\", k = 2)",
        "beautifulSubstrings(s=\"aa\", k=2)",
        "beautifulSubstrings(s = \"banana\", k = 10)",
        "beautifulSubstrings(s = \"ee\", k = 4)",
        "beautifulSubstrings(s=\"beauty\", k=2)"
    ],
    "sample_255": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSum(nums = [1,1,1])",
        "minimumSum(nums = [3,4,1,2,5])",
        "minimumSum(nums = [2,3,1,5,4])",
        "minimumSum(nums = [2,5,4,2,4,9])",
        "minimumSum(nums = [2,5,1,6,3,4])",
        "minimumSum(nums = [4,5,1,6,3,2])",
        "minimumSum(nums = [3,3,4,4,5,5,6,6])",
        "minimumSum(nums = [1, 3, 3, 8, 5, 2, 2, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6])"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [2,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,1,2,2])",
        "minGroupsForValidAssignment(nums = [2,2,3,3,4,4])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [2,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [2,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [2,4,5])",
        "minGroupsForValidAssignment(nums = [1, 3, 3, 2])",
        "minGroupsForValidAssignment(nums = [2,2,2,2,2,2,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,4,5,2,10,1,2,1,1,1,2,1,2,2,2,1,4,1,1,1,2,1,1,2,1,1,1,1,1,2])"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [2, 1, 2])",
        "alternatingSubarray(nums = [1, 2, 3, 2, 3])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1,2,5,6,7])",
        "alternatingSubarray(nums=[1, 3, 5])",
        "alternatingSubarray(nums = [2,4,6,8,10,12,14,16,18])",
        "alternatingSubarray(nums = [1, 3, 5, 7, 4, 2, 1])",
        "alternatingSubarray(nums = [3, 2, 1, 2, 3, 4, 5, 4])",
        "alternatingSubarray(nums = [2, 6, 7, 8, 10, 11])",
        "alternatingSubarray(nums = [1,10,10,2,2,1])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = '1011', k = 2)",
        "shortestBeautifulSubstring(s = \"010110\", k = 2)",
        "shortestBeautifulSubstring(s = \"110011\", k = 2)",
        "shortestBeautifulSubstring(s='011', k=2)",
        "shortestBeautifulSubstring(s = '0101101', k = 2)",
        "shortestBeautifulSubstring(s = \"1001010\", k = 2)",
        "shortestBeautifulSubstring(s='0111101', k=2)",
        "shortestBeautifulSubstring(s = '01001110111', k = 3)",
        "shortestBeautifulSubstring(s = '1000011100', k = 1)",
        "shortestBeautifulSubstring(s = \"1110000111000111\", k = 2)"
    ],
    "sample_293": [
        "minimumSteps(s = \"01\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"01010\")",
        "minimumSteps(s = \"010101\")",
        "minimumSteps(s = \"01001\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"01100\")",
        "minimumSteps(s = \"111\")",
        "minimumSteps(s = \"0010001011\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"baaabbabbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcba\")",
        "longestSemiRepetitiveSubstring(s = \"aabbc\")",
        "longestSemiRepetitiveSubstring(s = \"aaaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabaabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaaac\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbaabb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabab\")",
        "longestSemiRepetitiveSubstring(s = \"abababbb\")",
        "longestSemiRepetitiveSubstring(s = \"xxyzxaabbb\")"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums=[3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums=[3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [2,2,1])",
        "minGroupsForValidAssignment(nums=[1,1,1,1,2,2,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [4,4,4,4,2,2,2,2])",
        "minGroupsForValidAssignment(nums=[1,3,2,2,3])",
        "minGroupsForValidAssignment(nums=[4, 4, 1])"
    ],
    "sample_307": [
        "countSeniors(details = [\"132790\", \"216830\", \"315491\"])",
        "countSeniors(details = [\"5388 Eva Doe\",\"81120 Jane Doe\",\"9838 Bill Doe\"])",
        "countSeniors(details = [\"12-12-2012,47\", \"05-05-1965,12\"])",
        "countSeniors(details = [\"1544782645254465\", \"1544782645254466\", \"1544782645254467\", \"1544782645254468\"])",
        "countSeniors(details = [\"38277290006\", \"38277290002\", \"38277290001\", \"38277290003\", \"38277290007\"])",
        "countSeniors(details = [\"Joe Smith: 20\",\"Jane Doe: 67\",\"Fred Jones: 89\",\"Jane Smith: 23\"])",
        "countSeniors(details = [\"1857579758\", \"1207877908\", \"7567896544\"])",
        "countSeniors(details = [\"651828362999\", \"618877292588\", \"792657372465\"])",
        "countSeniors(details = [\"86H792J\", \"40N708K\", \"33Y456J\", \"12T678K\", \"90G456Y\", \"33Y456H\", \"22N456P\"])",
        "countSeniors(details = [\"8000266485:40\", \"8000103898:35\", \"8000712341:62\", \"8000476471:56\", \"8000667770:50\", \"8000044093:65\", \"8000403837:36\"])"
    ],
    "sample_290": [
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"00\")",
        "minimumSteps(s=\"0\")",
        "minimumSteps(s = \"1\")",
        "minimumSteps(s = \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumSteps(s = \"01001\")",
        "minimumSteps(s = \"01010101\")",
        "minimumSteps(s = \"01001011\")",
        "minimumSteps(s = \"1000100\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,2,3], moveTo = [2,3,1])",
        "relocateMarbles(nums = [1, 1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1,1,3,3,3,4], moveFrom = [1,3,4], moveTo = [2,2,2])",
        "relocateMarbles(nums = [1,1,2,3], moveFrom = [1,3,2], moveTo = [2,1,3])",
        "relocateMarbles(nums = [1,2,2], moveFrom = [1,2], moveTo = [2,1])",
        "relocateMarbles(nums = [1, 1, 3], moveFrom = [1, 3, 2], moveTo = [2, 1, 3])",
        "relocateMarbles(nums = [2, 3, 2], moveFrom = [1, 1, 3], moveTo = [2, 3, 1])",
        "relocateMarbles(nums = [1,1,2,2,3,3], moveFrom = [1,2,1,2,1,2], moveTo = [2,3,2,3,2,3])",
        "relocateMarbles(nums=[2,3,4,2],moveFrom=[1,2,3,4],moveTo=[1,1,2,2])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1,2])",
        "alternatingSubarray(nums = [1, 2, 1, 3])",
        "alternatingSubarray(nums = [1, 3, 5, 3])",
        "alternatingSubarray(nums = [2, 6, 7])",
        "alternatingSubarray(nums = [1, 2, 4, 2, 1])",
        "alternatingSubarray(nums = [0, 2, 1, 3, 5])",
        "alternatingSubarray(nums = [3, 2, 1, 3, 4, 5, 5, 3])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiouua\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeiouua\", k = 3)",
        "beautifulSubstrings(s = \"aeioua\", k = 2)",
        "beautifulSubstrings(s = \"aeiouua\", k = 24)",
        "beautifulSubstrings(s = \"aeioou\", k = 4)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [0,1,2])",
        "maximumTripletValue(nums = [7, 1, 5, 4])",
        "maximumTripletValue(nums = [0,1,2,3])",
        "maximumTripletValue(nums = [0, 3, 1])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"])",
        "maximumNumberOfStringPairs(words = [\"lc\",\"cl\",\"gg\"])",
        "maximumNumberOfStringPairs(words = [\"lc\",\"cl\",\"gg\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ty\", \"yt\", \"lc\", \"cl\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\", \"bb\", \"bc\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"bc\",\"aa\",\"aa\",\"bc\",\"cc\"])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 6, m = 3)",
        "differenceOfSums(n = 10, m = 4)",
        "differenceOfSums(n = 6, m = 2)",
        "differenceOfSums(n = 5, m = 5)"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1,2,3], money = 3)",
        "buyChoco(prices = [5], money = 5)",
        "buyChoco(prices = [1, 1], money = 0)",
        "buyChoco(prices = [20, 10], money = 20)",
        "buyChoco(prices = [2, 1, 4, 3], money = 10)",
        "buyChoco(prices=[1, 1, 1, 1], money=2)",
        "buyChoco(prices=[5, 10], money=15)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"lc\",\"cl\",\"gg\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"cd\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"bb\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"bc\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ba\", \"ab\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"xy\", \"ba\", \"dc\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"ab\", \"cc\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ac\", \"ad\", \"dc\", \"ca\"])",
        "maximumNumberOfStringPairs(words = [\"xw\", \"cd\", \"co\", \"cd\"])"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"abbaba\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbb\")",
        "longestSemiRepetitiveSubstring(s = \"aabaaab\")",
        "longestSemiRepetitiveSubstring(s = \"bbbb\")",
        "longestSemiRepetitiveSubstring(s=\"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbbaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbb\")",
        "longestSemiRepetitiveSubstring(s=\"abaaab\")",
        "longestSemiRepetitiveSubstring(s = \"aababbc\")"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"aa\", \"ab\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ab\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"aaa\", \"aaa\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"bc\", \"cd\", \"de\"])",
        "minimizeConcatenatedLength(words = [\"b\",\"a\",\"n\",\"a\",\"n\",\"a\"])",
        "minimizeConcatenatedLength(words = [\"apple\", \"kiwi\", \"banana\", \"ananas\"])",
        "minimizeConcatenatedLength(words = [\"aa\",\"b\",\"a\",\"aa\"])",
        "minimizeConcatenatedLength([\"b\",\"a\"])",
        "minimizeConcatenatedLength(words = [\"joy\",\"girl\",\"world\"])",
        "minimizeConcatenatedLength(words = [\"aba\", \"bbc\", \"cdd\", \"acd\"])"
    ],
    "sample_323": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 4)",
        "isFascinating(n = 37)",
        "isFascinating(n = 45)",
        "isFascinating(n = 21)",
        "isFascinating(n = 324)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"abbaabba\")",
        "longestSemiRepetitiveSubstring(s = \"abbaaa\")",
        "longestSemiRepetitiveSubstring(s = \"ababba\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbabba\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbbb\")",
        "longestSemiRepetitiveSubstring(s = \"abaabbab\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbbbbcc\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaabaaaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"acbbbcdd\")"
    ],
    "sample_305": [
        "countSeniors(details = [])",
        "countSeniors(details = [])",
        "countSeniors(details = [])",
        "countSeniors(details = [])",
        "countSeniors(details = [])",
        "countSeniors(details = [])",
        "countSeniors(details = [])",
        "countSeniors(details=[])",
        "countSeniors(details = [\"P-93140-A0-B1-B5\", \"P-93140-A0-B2-A8\", \"P-93140-A0-B3-C5\"])",
        "countSeniors(details = [\"mq748960235ZAA47H8\",\"px832660135NA060243\",\"zy019482710IC91872\",\"pm778814153PS75206\",\"yb568011580VV19643\"])"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 1, 3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3,4,4])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [2,2,2,3,3,3,4,4,4])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3, 3, 3, 3, 3])"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [4, 3, 2, 5])",
        "minimumSum(nums = [1, 3, 1, 2, 4])",
        "minimumSum(nums = [3, 3, 2, 4, 2])",
        "minimumSum(nums = [6, 2, 3, 3, 1])",
        "minimumSum(nums = [4, 3, 5, 2, 4, 1])",
        "minimumSum(nums = [7,4,3,4])",
        "minimumSum(nums = [2,1,2,2,2,1])"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"lc\",\"cl\",\"gg\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"cd\",\"ab\",\"dc\",\"ba\",\"ab\"])",
        "maximumNumberOfStringPairs(words = [\"qc\", \"ca\"])",
        "maximumNumberOfStringPairs(words = [\"dm\", \"lc\", \"lc\", \"dl\", \"dm\"])",
        "maximumNumberOfStringPairs(words = [\"ni\", \"va\"])",
        "maximumNumberOfStringPairs(words = [\"ap\", \"pe\", \"pa\", \"pl\"])",
        "maximumNumberOfStringPairs(words = [\"sz\",\"jm\",\"cpt\",\"yt\",\"zlmel\",\"qp\",\"kj\",\"qx\",\"py\",\"q\",\"f\",\"ido\",\"zs\",\"ni\",\"kd\",\"uxb\",\"q\",\"af\",\"nf\",\"qh\",\"cw\",\"zlyl\"])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = \"1011\", k = 2)",
        "shortestBeautifulSubstring(s = \"10110\", k = 2)",
        "shortestBeautifulSubstring(s = '01011', k = 2)",
        "shortestBeautifulSubstring(s = \"01110\", k = 1)",
        "shortestBeautifulSubstring(s = '0111001', k = 3)",
        "shortestBeautifulSubstring(s = \"101100\", k = 3)",
        "shortestBeautifulSubstring(s = \"1011110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"01011011101\", k = 2)",
        "shortestBeautifulSubstring(s = \"110010111\", k = 3)",
        "shortestBeautifulSubstring(s = \"1100101010110\", k = 1)"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [5, 3, 1, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [5, 1, 3, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [3, 5, 1, 9, 8], limit = 2)",
        "lexicographicallySmallestArray(nums = [5, 8, 1, 9, 3], limit = 2)",
        "lexicographicallySmallestArray(nums = [5, 8, 1, 9, 3], limit = 3)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 9, 8], limit = 1)",
        "lexicographicallySmallestArray(nums = [3, 9, 8, 1, 5], limit = 3)",
        "lexicographicallySmallestArray(nums = [3, 9, 5, 8, 1], limit = 3)",
        "lexicographicallySmallestArray(nums = [2, 3, 9, 5, 8], limit = 5)",
        "lexicographicallySmallestArray(nums = [4, 6, 1, 8, 3], limit = 5)"
    ],
    "sample_310": [
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 1, 1], [1, 1, 1]])",
        "matrixSum(a = [[0]])",
        "matrixSum(a=[[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(a = [[0,1],[1,0]])",
        "matrixSum(a = [[2], [4], [1]])",
        "matrixSum(a = [[1, 2, 1], [0, 0, 3], [0, 0, 3]])"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 4)",
        "beautifulSubstrings(s=\"aeiou\", k=2)",
        "beautifulSubstrings(s = \"aab\", k = 2)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s=\"aeioua\", k=3)",
        "beautifulSubstrings(s = \"aeiaaiooouu\", k = 2)",
        "beautifulSubstrings(s = \"abcde\", k = 5)",
        "beautifulSubstrings(s = \"uaoc\", k = 2)"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"dc\", \"ll\", \"xx\"])",
        "maximumNumberOfStringPairs([\"ab\", \"ba\", \"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"cc\",\"ll\",\"xx\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"ab\", \"dc\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"oo\", \"ll\", \"lol\", \"lol\", \"ol\"])"
    ],
    "sample_325": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(192)",
        "isFascinating(n=192)",
        "isFascinating(n = 372)",
        "isFascinating(n = 1)",
        "isFascinating(100)",
        "isFascinating(123)",
        "isFascinating(n = 87)",
        "isFascinating(918273645)"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums=[1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 5, 3, 2])",
        "maximumTripletValue(nums = [2, 4, 6, 3])",
        "maximumTripletValue(nums = [3, 5, 8, 1, 4])",
        "maximumTripletValue(nums = [4, 3, 6, 2, 1, 5])",
        "maximumTripletValue(nums = [1, 3, 5, 2, 9, 7])",
        "maximumTripletValue(nums = [7, 6, 8, 11, 12, 5, 4])"
    ],
    "sample_312": [
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[7,2,1],[6,4,2],[6,5,3],[3,2,1]])",
        "matrixSum(nums = [[1,2,3], [4,5,6], [7,8,9]])",
        "matrixSum(nums = [[1], [2]])",
        "matrixSum(nums = [[1, 1, 1], [1, 1, 1]])",
        "matrixSum(nums=[[2,3,4],[5,6,7]])",
        "matrixSum(nums = [[1, 3, 4], [2, 5, 6], [3, 7, 8]])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3, 4], b = [2, 1, 4, 3])",
        "minOperations(a = [1,2,3], b = [4,5,6])",
        "minOperations(a = [1, 2, 3, 4], b = [2, 4, 3, 1])",
        "minOperations(a = [1, 2, 3, 4, 5], b = [2, 3, 4, 5, 6])",
        "minOperations(a = [2, 1, 3], b = [1, 2, 3])",
        "minOperations(a = [2, 3, 1], b = [1, 1, 1])",
        "minOperations(a = [4, 2, 5], b = [1, 4, 1])",
        "minOperations(a = [1, 3, 2, 4, 5], b = [3, 1, 5, 4, 2])",
        "minOperations(a = [1, 3, 2, 3, 4], b = [2, 3, 4, 4, 1])",
        "minOperations(a = [2, 10, 12, 1, 2], b = [5, 5, 5, 15, 15])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,3,5,4], nums2 = [1,2,3,7])",
        "minOperations(nums1 = [2,10,5,4,8], nums2 = [3,6,10,10,10])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 3, 3])",
        "minOperations(nums1 = [2, 1], nums2 = [3, 5])",
        "minOperations(nums1 = [2,1,5], nums2 = [4,2,6])",
        "minOperations(nums1 = [3,5,1,2,7,4], nums2 = [4,1,5,4,7,6])",
        "minOperations(nums1 = [2, 5, 3], nums2 = [1, 1, 1])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 1, 1, 1])",
        "maximumTripletValue(nums = [0, 2, 1])",
        "maximumTripletValue(nums = [0, 0, 0, 0, 0, 0])",
        "maximumTripletValue(nums = [0, 0, 1])",
        "maximumTripletValue(nums = [2, 3, 1, 0, 2])",
        "maximumTripletValue(nums = [4, 1, 3, 4, 1])",
        "maximumTripletValue(nums = [6, 4, 5, 0, 3])",
        "maximumTripletValue(nums = [2, 0, 1, 5])",
        "maximumTripletValue(nums = [5,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"1001\", k = 1)",
        "shortestBeautifulSubstring(s = \"0100\", k = 1)",
        "shortestBeautifulSubstring(s = \"10110011\", k = 4)",
        "shortestBeautifulSubstring(s = \"010111\", k = 4)",
        "shortestBeautifulSubstring(s=\"11111\", k=2)",
        "shortestBeautifulSubstring(s = \"1100110101\", k = 3)",
        "shortestBeautifulSubstring(s = \"000111110\", k = 2)",
        "shortestBeautifulSubstring(s = \"100110101\", k = 4)",
        "shortestBeautifulSubstring(s = \"00001011111111010001010000\", k = 9)",
        "shortestBeautifulSubstring(s = \"0101110101001010101001010000011001101010101110101010110101011101010101010100101010101010100101011101010101101010111010101010101001010101010101001010111010101011010101110101010101010010101010101010010101110101010110101011101010101010100101010101010010101110101010110101011101010101010100101010101010100101011101010101101010111010101010101001010101010101001010111010101011010101110101010101010010101010101010010101110101010110101011101010101010100101010101010100101011101010101101010111010101010101001010101010101001"
    ],
    "sample_256": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [1, 3, 2])",
        "minimumSum(nums = [2, 5, 1, 4, 8, 3])",
        "minimumSum(nums = [3, 1, 5, 2])",
        "minimumSum(nums = [3, 1, 5])",
        "minimumSum(nums = [6, 2, 4, 8, 10])",
        "minimumSum(nums = [5, 3, 2, 1, 5])",
        "minimumSum(nums = [1,1,2,3,1,4,3,5,1,1])"
    ],
    "sample_291": [
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"01\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"11111\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"01001\")",
        "minimumSteps(s = \"0110\")",
        "minimumSteps(s = \"111110\")",
        "minimumSteps(s = \"10100111001101\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1, 2, 3, 4, 5, 6], nums2 = [1, 1, 2, 2, 2, 2])",
        "minOperations(nums1 = [1, 2, 3, 4, 5, 6], nums2 = [1, 1, 2, 2, 2, 2])",
        "minOperations(nums1 = [1,1,1,1,1,1,1], nums2 = [6])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1=[1, 2], nums2=[1, 2])",
        "minOperations(nums1 = [3, 3, 8, 4], nums2 = [5, 6, 4, 10])",
        "minOperations(nums1 = [3,3,8,9,10], nums2 = [6,8,18,3,4])",
        "minOperations(nums1 = [3, 1, 5, 3, 5], nums2 = [2, 2, 4, 5, 3])"
    ],
    "sample_277": [
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[0,1,0],[1,0,0],[0,1,0]])",
        "findChampion(grid = [[1, 1, 0], [0, 0, 0], [1, 1, 1]])",
        "findChampion(grid = [[0,1], [1, 0]])",
        "findChampion(grid = [[1,1,0],[1,0,1],[0,0,1]])",
        "findChampion(grid = [[1,0,0,0], [0,0,0,0], [1,1,1,0], [1,1,1,0]])",
        "findChampion(grid = [[1,0,1,1], [1,0,0,0], [1,1,1,1], [1,1,1,1]])",
        "findChampion(grid = [[1,1,0,0],[0,0,0,1],[1,0,0,1],[0,0,1,0]])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 7, m = 3)",
        "differenceOfSums(n = 6, m = 2)",
        "differenceOfSums(n = 15, m = 4)",
        "differenceOfSums(n=10, m=2)",
        "differenceOfSums(n = 12, m = 4)"
    ],
    "sample_292": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"11011\")",
        "minimumSteps(s = \"00100\")",
        "minimumSteps(s = \"011\")",
        "minimumSteps(s = \"101110\")",
        "minimumSteps(s = \"010101101\")",
        "minimumSteps(s = \"01010101010\")",
        "minimumSteps(s = \"101100111\")"
    ],
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 1])",
        "alternatingSubarray(nums = [1, 3, 2])",
        "alternatingSubarray(nums = [2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [3, 2, 3, 4])",
        "alternatingSubarray(nums = [2, 3, 4, 3, 4, 2])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 3, 4, 4])",
        "alternatingSubarray(nums = [1, 3, 1, 2])"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 2])",
        "relocateMarbles(nums = [1,2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1,2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 1, 3, 3], moveFrom = [1, 3], moveTo = [2, 2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [3], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [2], moveTo = [3])",
        "relocateMarbles(nums = [1, 1, 1, 2], moveFrom = [1, 2, 3], moveTo = [2, 2, 2])",
        "relocateMarbles(nums = [1, 1, 1, 2, 3, 3, 4, 5, 6], moveFrom = [1, 1, 1, 1], moveTo = [2, 2, 3, 4])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [-1, -2, -3])",
        "maximumTripletValue(nums = [7, 1, 5, 4])",
        "maximumTripletValue(nums = [0,0,0])",
        "maximumTripletValue(nums = [0,0,0])",
        "maximumTripletValue(nums = [1, 3, 5])",
        "maximumTripletValue(nums = [1, 2, -3, 4])",
        "maximumTripletValue(nums = [3, 4, 2])",
        "maximumTripletValue(nums = [0, 2, 1, 3, 1])"
    ],
    "sample_273": [
        "findChampion(grid = [[0, 1, 0], [1, 1, 0], [0, 1, 0]])",
        "findChampion(grid = [[1,0,1], [0,1,0], [1,0,1]])",
        "findChampion(grid = [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[0,1,1],[1,1,1],[1,1,1]])",
        "findChampion(grid = [[0, 1, 0],\n                           [0, 0, 1],\n                           [1, 0, 0]])",
        "findChampion(grid = [[1,0,1],[1,0,0],[1,1,1]])",
        "findChampion(grid = [[-1, -1, -1], [0, 0, 0], [1, 1, 1]])",
        "findChampion(grid = [[1,0,0,0],[0,0,0,1],[0,1,0,0],[0,0,0,1]])",
        "findChampion(grid = [[0, 1, 0],\n[0, 1, 1],\n[0, 0, 0]])",
        "findChampion(grid = [[0, 1, 2, 3, 4], [1, 1, 2, 3, 4], [1, 1, 1, 3, 4], [1, 1, 1, 1, 4], [1, 1, 1, 1, 1]])"
    ],
    "sample_267": [
        "minSum(nums1 = [0, 1, 2], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3, 0], nums2 = [4, 5, 6])",
        "minSum(nums1 = [0], nums2 = [1, 1])",
        "minSum(nums1 = [1, 2], nums2 = [4, 5])",
        "minSum(nums1=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "minSum(nums1 = [1, 0, 1, 1, 1], nums2 = [1, 0, 1, 1, 1])",
        "minSum(nums1 = [3, 1, 2, 0], nums2 = [1, 1, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [5, 1, 2, 1])",
        "minSum(nums1 = [-1, -2, 2], nums2 = [-1, -3, 3])",
        "minSum(nums1=[-1,0,-2,1,2], nums2=[2,0,4,2,2])"
    ],
    "sample_294": [
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"1011\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"01110\")",
        "minimumSteps(s = \"10001\")",
        "minimumSteps(s = \"100111\")",
        "minimumSteps(s = \"010110101\")",
        "minimumSteps(s = \"0100101001\")",
        "minimumSteps(s = \"0010001001\")"
    ],
    "sample_274": [
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0,1,1],[1,0,0],[1,0,0]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 1], [0, 0, 1]])",
        "findChampion(grid = [[0,1,1], [1,0,1], [1,1,0]])",
        "findChampion(grid = [[0,0,0],[1,1,1],[1,1,1]])",
        "findChampion(grid = [[0, 0, 1], [1, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1,1,1],[1,0,1],[1,0,0]])",
        "findChampion(grid = [[1,1,0,1],[0,0,0,0],[1,1,0,1],[0,0,0,0]])",
        "findChampion(grid = [[1,0,1,1,0], [0,1,0,1,0], [0,1,1,0,0]])"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [2,1,3])",
        "minGroupsForValidAssignment(nums = [2,2,1,1,1,1,1])",
        "minGroupsForValidAssignment(nums = [5,5,5,5,5])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [2,4,6,8])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 3, 3, 3, 4, 4])",
        "minGroupsForValidAssignment(nums = [1,2,2,2,3,3,4,4,4,4])",
        "minGroupsForValidAssignment(nums = [1,3,2,4,3,6,1])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6])"
    ],
    "sample_270": [
        "minSum(nums1 = [1, 0], nums2 = [1])",
        "minSum(nums1 = [1, 1, 0], nums2 = [1, 1, 1])",
        "minSum(nums1 = [1,0], nums2 = [1,1])",
        "minSum(nums1 = [1, 0, 1], nums2 = [1, 1, 0])",
        "minSum(nums1 = [1, 0, 1], nums2 = [1, 1])",
        "minSum(nums1 = [0, 1, 1], nums2 = [1, 0, 1])",
        "minSum(nums1 = [2, 4], nums2 = [1, 0])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 0, 1])",
        "minSum(nums1 = [1, 2, 0], nums2 = [5, 6, 4])",
        "minSum(nums1=[1,2,3], nums2=[5,0,4])"
    ],
    "sample_317": [
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1,2,3], money = 4)",
        "buyChoco(prices = [1, 2], money = 3)",
        "buyChoco(prices = [1, 1, 2], money = 3)",
        "buyChoco(prices = [2, 2, 3], money = 3)",
        "buyChoco(prices = [2, 1, 5], money = 10)",
        "buyChoco(prices = [2, 5, 3], money = 10)",
        "buyChoco(prices=[1,2,3,2,1], money=2)",
        "buyChoco(prices=[2, 1, 1, 2], money=2)"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 4)",
        "beautifulSubstrings(s = \"a\", k = 1)",
        "beautifulSubstrings(s = \"\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 10)",
        "beautifulSubstrings(s = \"a\", k = 3)",
        "beautifulSubstrings(s = \"aaa\", k = 3)",
        "beautifulSubstrings(s = \"zxcvbnm\", k = 2)",
        "beautifulSubstrings(s = \"aaaeii\", k = 3)"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"baaabbabbb\")",
        "longestSemiRepetitiveSubstring(s = \"baaabbabbb\")",
        "longestSemiRepetitiveSubstring(s = \"abbaabba\")",
        "longestSemiRepetitiveSubstring(s = \"ababba\")",
        "longestSemiRepetitiveSubstring(s = \"aabaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abaaabbba\")",
        "longestSemiRepetitiveSubstring(s = \"dabbd\")",
        "longestSemiRepetitiveSubstring(s = \"aabaaabbbbbb\")",
        "longestSemiRepetitiveSubstring(s = \"bbbbcccaa\")",
        "longestSemiRepetitiveSubstring(s = \"zxcvbxxd\")"
    ],
    "sample_341": [
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(x = 3, y = 5, z = 1)",
        "longestString(x = 2, y = 5, z = 3)",
        "longestString(x = 3, y = 2, z = 3)",
        "longestString(x = 5, y = 2, z = 3)",
        "longestString(x = 5, y = 4, z = 3)",
        "longestString(x = 5, y = 4, z = 3)",
        "longestString(x = 5, y = 3, z = 4)",
        "longestString(x = 5, y = 6, z = 1)"
    ],
    "sample_271": [
        "minSum(nums1 = [1,2,3], nums2 = [2,3,4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1,2,3], nums2 = [2,2,3])",
        "minSum(nums1 = [1,2,3], nums2 = [1,2,1])",
        "minSum(nums1 = [1,2,3], nums2 = [5,2,1])",
        "minSum(nums1 = [1,1,1], nums2 = [2,2,1])",
        "minSum(nums1=[1,2,3], nums2=[1,3])",
        "minSum(nums1 = [1,2,1], nums2 = [4,2,3])",
        "minSum(nums1 = [1, 2, 0, 4], nums2 = [2, 3, 5, 0])",
        "minSum(nums1 = [2,5,6,1], nums2 = [1,2,4,1])"
    ],
    "sample_340": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 2)",
        "longestString(x = 1, y = 2, z = 2)",
        "longestString(x = 1, y = 2, z = 2)",
        "longestString(x = 1, y = 2, z = 2)",
        "longestString(x = 1, y = 3, z = 2)",
        "longestString(x = 0, y = 1, z = 1)",
        "longestString(x = 1, y = 3, z = 4)",
        "longestString(x = 5, y = 2, z = 1)"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"101110\", k = 2)",
        "shortestBeautifulSubstring(s = \"101111\", k = 3)",
        "shortestBeautifulSubstring(s = \"100110\", k = 3)",
        "shortestBeautifulSubstring(s = \"10101101\", k = 2)",
        "shortestBeautifulSubstring(s = '11011010', k = 2)",
        "shortestBeautifulSubstring(s = '000001111', k = 2)",
        "shortestBeautifulSubstring(s = '1110001100', k = 2)",
        "shortestBeautifulSubstring(s = '10010010100', k = 4)",
        "shortestBeautifulSubstring(s = \"0101010101010110101011\", k = 3)"
    ],
    "sample_324": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(n = 100)",
        "isFascinating(n = 1)",
        "isFascinating(n = 12)",
        "isFascinating(n = 267)"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4])",
        "minimumSum(nums = [3, 4, 5, 1, 2])",
        "minimumSum(nums = [4, 1, 8, 7])",
        "minimumSum(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumSum(nums = [2, 4, 6, 3])",
        "minimumSum(nums = [1,3,4,5,2])",
        "minimumSum(nums = [8, 4, 6, 10])",
        "minimumSum(nums = [2, 10, 3, 9])"
    ],
    "sample_268": [
        "minSum(nums1 = [1,2,3], nums2 = [0,1,0])",
        "minSum(nums1 = [1, 2, 0], nums2 = [2, 0, 1])",
        "minSum(nums1 = [1, 2, 1, 4], nums2 = [3, 6, 3, 2])",
        "minSum(nums1 = [3, 0, 1], nums2 = [2, 0, 5])",
        "minSum(nums1 = [2, 4], nums2 = [3, 1, 5])",
        "minSum(nums1 = [2, 0, 4], nums2 = [1, 3, 4])",
        "minSum(nums1 = [0, 0, 0, 1, 1, 2, 3], nums2 = [0, 0, 0, 1, 1, 2, 3])",
        "minSum(nums1 = [0,1,2,3], nums2 = [1,4,2,5])",
        "minSum(nums1=[1, 2, 3, 0, 3], nums2=[5, 4, 0, 4, 3])",
        "minSum(nums1 = [2,1,2,7,3,1], nums2 = [9,1,5,2,2,1])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"cd\", s3 = \"ef\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"a\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"bc\")",
        "findMinimumOperations(s1 = \"aaaa\", s2 = \"abcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"abcd\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"bc\", s2 = \"b\", s3 = \"bc\")",
        "findMinimumOperations(s1 = \"zx\", s2 = \"yw\", s3 = \"z\")",
        "findMinimumOperations(s1 = \"abcc\", s2 = \"aab\", s3 = \"acc\")",
        "findMinimumOperations(s1 = \"tel\", s2 = \"lol\", s3 = \"motel\")"
    ],
    "sample_321": [
        "maxStrength(nums = [2, -3, 1, 0, -5])",
        "maxStrength(nums = [2, -3, 1, 0, -5])",
        "maxStrength(nums = [2,-1,1,1])",
        "maxStrength(nums = [3, -1, 1, 2])",
        "maxStrength(nums = [-1, 2, -3, 4, -5])",
        "maxStrength(nums = [2, 3, 0, -4])",
        "maxStrength(nums=[2, -3, 1, -5])",
        "maxStrength(nums = [1, 3, 5, 7])",
        "maxStrength(nums = [-4, -3, 0, 1, 2, 3])",
        "maxStrength(nums = [3, -2, 6, 5, -7])"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [2], moveFrom = [2], moveTo = [3])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [3, 1])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums = [1,2], moveFrom = [1], moveTo = [3])",
        "relocateMarbles(nums = [3,1,2,4,5], moveFrom = [1,2,3], moveTo = [1,1,3])"
    ],
    "sample_357": [
        "relocateMarbles(nums = [5, 8, 9], moveFrom = [5, 8], moveTo = [6, 9])",
        "relocateMarbles(nums=[1,2,3,4], moveFrom=[1,3,2,4], moveTo=[2,1,3,4])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [2, 4], moveTo = [5, 6])",
        "relocateMarbles(nums=[1, 5, 6, 8], moveFrom=[1, 8, 9], moveTo=[5, 6, 9])",
        "relocateMarbles(nums = [3,5,6,8], moveFrom = [3,5,8], moveTo = [5,6,9])",
        "relocateMarbles(nums = [5, 8, 9, 5], moveFrom = [5, 5, 8], moveTo = [6, 6, 9])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7], moveFrom = [1,2,3,4,5,6,7], moveTo = [5,6,8,9])",
        "relocateMarbles(nums = [4, 1, 5, 8], moveFrom = [1, 5, 4], moveTo = [5, 4, 8])",
        "relocateMarbles(nums=[1,2,3,5,6], moveFrom=[2,1], moveTo=[1,5])",
        "relocateMarbles(nums=[4, 1, 8, 9, 5], moveFrom=[9, 5, 4], moveTo=[5, 9, 8])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 2, 3, 4], money = 10)",
        "buyChoco(prices = [1, 1, 1], money = 3)",
        "buyChoco(prices = [1], money = 0)",
        "buyChoco(prices = [5], money = 10)",
        "buyChoco(prices = [1, 1, 1, 1, 1], money = 10)",
        "buyChoco(prices = [4, 3, 2, 1], money = 10)",
        "buyChoco(prices = [4, 3, 2, 1], money = 1)",
        "buyChoco(prices = [5, 6], money = 10)",
        "buyChoco(prices = [2, 4, 6], money = 6)",
        "buyChoco(prices = [2, 3, 1, 7, 10], money = 12)"
    ],
    "sample_308": [
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[7, 2, 1], [6, 4, 2], [6, 5, 3], [3, 2, 1]])",
        "matrixSum([[1]])",
        "matrixSum(nums = [[1,1,1],[1,1,1],[1,1,1]])",
        "matrixSum(nums = [[1,2,3],[3,2,1]])",
        "matrixSum(nums = [[1,2,3,4,5]])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2], money = 1)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [2, 3], money = 5)",
        "buyChoco(prices = [1, 1], money = 0)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 5)",
        "buyChoco(prices = [2, 3], money = 2)",
        "buyChoco(prices = [4, 2, 1], money = 3)",
        "buyChoco(prices = [5, 1], money = 1)",
        "buyChoco(prices = [2, 2, 1], money = 5)"
    ],
    "sample_259": [
        "minimumSum(nums = [1,2,3])",
        "minimumSum(nums = [1,2,3])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,1,3])",
        "minimumSum(nums = [3,1,2])",
        "minimumSum(nums = [1,1,1,1])",
        "minimumSum(nums=[1,2,3])",
        "minimumSum(nums = [1, 2, 1, 3])",
        "minimumSum(nums = [1,2,3,1,2,3])",
        "minimumSum(nums = [1,3,1])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 3, 5, 7, 9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 3, 5, 7, 6, 4, 2])",
        "alternatingSubarray(nums = [1, 2, 3, 2, 1, 4])",
        "alternatingSubarray(nums = [2, 3, 4, 3, 4, 2, 1, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 3, 2, 1, 0, 0, -1, -2, -3])",
        "alternatingSubarray(nums = [1, 3, 5, 7, 1, 2, 4, 5, 6, 7, 8])"
    ],
    "sample_311": [
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum(nums = [[1,2,3],[4,5,6]])",
        "matrixSum(nums=[[1]])",
        "matrixSum(nums = [[1,2], [3,4]])",
        "matrixSum(nums=[[1, 2], [3, 4]])",
        "matrixSum(nums = [[1,2,3,4,5],[6,7,8,9,10]])",
        "matrixSum(nums = [[1, 3, 2, 5], [4, 2, 6, 1]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 2, 3], money = 3)",
        "buyChoco(a = [1, 2, 3], money = 6)",
        "buyChoco(a = [3, 2, 1], money = 5)",
        "buyChoco(a = [3, 2], money = 1)",
        "buyChoco(a = [1, 1, 2], money = 1)",
        "buyChoco(a = [1, 2, 5], money = 6)",
        "buyChoco(a = [10, 20], money = 10)",
        "buyChoco(a = [10, 5, 5], money = 15)",
        "buyChoco(a=[10, 20, 30], money=15)",
        "buyChoco(a = [0, 0, 0], money = 100)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [2, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "minGroupsForValidAssignment(nums = [2, 2, 3, 3, 4])",
        "minGroupsForValidAssignment(nums=[1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [2, 2, 1, 1, 1, 2])",
        "minGroupsForValidAssignment(nums = [2, 1, 3, 3, 3, 4, 4, 4, 4, 4])",
        "minGroupsForValidAssignment(nums = [2, 2, 1, 1, 3])",
        "minGroupsForValidAssignment(nums = [2, 1, 3, 3, 3, 4, 4, 4, 4, 2])",
        "minGroupsForValidAssignment(nums = [3, 2, 2, 3])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 2, 3, 5])"
    ],
    "sample_276": [
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 0, 1], [1, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [1, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[0, 0, 1], [1, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0, 1], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[1,0,0],[0,0,1],[1,1,0]])"
    ],
    "sample_320": [
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 4])",
        "maxStrength(nums = [1, 2, 4, 5])",
        "maxStrength(nums=[2, 3, 4, 5])",
        "maxStrength(nums = [1,2,3,4])",
        "maxStrength(nums = [3, 6, 4, 5])",
        "maxStrength(nums = [-10, -10, 5, 2])",
        "maxStrength(nums = [10, 2, 3])",
        "maxStrength(nums = [2, -1, 1, 1, 2, 3])",
        "maxStrength(nums = [-6, -4, -2, -3, -1])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"aaa\", \"c\", \"aba\"])",
        "minimizeConcatenatedLength(words = [\"aa\",\"ab\",\"bc\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ba\", \"aa\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ba\", \"ac\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ab\"])",
        "minimizeConcatenatedLength(words = [\"a\",\"b\",\"ba\"])",
        "minimizeConcatenatedLength(words = [\"aaa\", \"ab\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"bb\", \"aa\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cde\", \"f\"])",
        "minimizeConcatenatedLength(words = [\"aaa\", \"b\", \"bc\"])"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bca\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"apple\", s3 = \"grape\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"aaa\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"a\", s3 = \"acb\")",
        "findMinimumOperations(s1 = \"zzzzz\", s2 = \"zzzzzzz\", s3 = \"zzzzzzzzzz\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"aab\", s3 = \"baab\")",
        "findMinimumOperations(s1 = \"ABC\", s2 = \"BDC\", s3 = \"DBCA\")",
        "findMinimumOperations(s1 = \"jhjd\", s2 = \"jdhj\", s3 = \"jhdj\")",
        "findMinimumOperations(s1 = \"111011010\", s2 = \"011000111\", s3 = \"100101010\")"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 1, 4, 3, 6, 5])",
        "alternatingSubarray(nums = [1, 3, 2, 1, 4, 3])",
        "alternatingSubarray(nums = [1, 3, 4, 5, 7, 8, 10])",
        "alternatingSubarray(nums = [2, 5, 3, 7, 1, 8])",
        "alternatingSubarray(nums = [5, 2, 3, 7, 10])",
        "alternatingSubarray(nums = [2, 5, 6, 7, 8, 9, 2, 3, 4, 1])",
        "alternatingSubarray(nums = [2, 1, 2, 4, 3, 5, 8])",
        "alternatingSubarray(nums = [-1, 2, -1, 3, 4, -1, 5, -1, 6, -1, 7, -1])"
    ],
    "sample_278": [
        "findChampion(grid = [[0, 1], [0, 0]])",
        "findChampion(grid = [[0, 1], [0, 0]])",
        "findChampion(grid = [[1, 1, 1], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 1], [0, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0, 0, 0], [1, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 0, 1, 0], [1, 0, 0, 0], [0, 0, 0, 0], [0, 1, 0, 0]])",
        "findChampion(grid = [[1,0,0],[0,0,0],[0,0,1]])",
        "findChampion(grid = [[1, -1, 1], [1, 1, 1], [-1, 1, 1]])",
        "findChampion(grid = [[0, 0, 1, 1], [1, 0, 0, 1], [0, 0, 0, 0], [0, 1, 1, 0]])"
    ],
    "sample_304": [
        "countSeniors(details = [\"123456789123456\", \"123456789123465\", \"987654321987654\"])",
        "countSeniors(details = [\"123-45-6789, Joe Smith, 32\", \"987-65-4321, John Doe, 65\", \"234-56-7890, Jane Doe, 59\"])",
        "countSeniors(details = [\"65155160\",\"75586360\",\"53186561\",\"05125263\",\"58013261\",\"04266651\"])",
        "countSeniors(details = [\"9810201190000066\", \"9810201190000067\", \"9810201190000068\", \"9810201190000069\", \"9810201190000070\", \"9810201190000071\", \"9810201190000072\", \"9810201190000073\"])",
        "countSeniors(details = [\"Mike Stuart 14\", \"Louis Stuart 77\", \"Lillian Guillermo 62\", \"John Bender 84\", \"Curtis Bender 54\"])",
        "countSeniors(details = [\"2220012345061\",\"4450012345062\",\"3320012345063\",\"6670012345064\"])",
        "countSeniors(details = [\"R3456789000, John, 23, 1234567890\",\n\"R4567890000, Jack, 65, 1234567890\"])",
        "countSeniors(details = [\"Sarah Smith,55,F,12\", \"Jackie Chan,71,M,24\", \"Bobby Jones,65,M,32\"])",
        "countSeniors(details = [\"john21671996\", \"jack18671989\", \"jill12341981\", \"jack56782002\"])",
        "countSeniors(details=[\"Mr. Richard Harris, 67\", \"Mrs. Dylan Spencer, 21\", \"Ms. Margot Holloway, 66\", \"Ms. Joan Hart, 61\", \"Ms. Kaylee Wiggins, 60\"])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiouu\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s=\"aeiou\", k=2)"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"11011\", k = 2)",
        "shortestBeautifulSubstring(s = \"101110\", k = 2)",
        "shortestBeautifulSubstring(s = \"001101\", k = 3)",
        "shortestBeautifulSubstring(s = \"10011011\", k = 2)",
        "shortestBeautifulSubstring(s = '10011001', k = 2)",
        "shortestBeautifulSubstring(s = \"1011110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"1011100101\", k = 3)",
        "shortestBeautifulSubstring(s = \"1101100101\", k = 3)",
        "shortestBeautifulSubstring(s = \"0010111110101010\", k = 2)",
        "shortestBeautifulSubstring(s = \"1011101101100101100011\", k = 4)"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"aa\", \"ab\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"mq\", \"px\", \"zy\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"ab\", \"ab\"])",
        "minimizeConcatenatedLength(words = [\"a\",\"aa\",\"aaa\"])",
        "minimizeConcatenatedLength([\"aaa\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"ay\", \"by\"])",
        "minimizeConcatenatedLength(words = [\"r\", \"c\", \"t\"])",
        "minimizeConcatenatedLength(words = [\"nud\", \"ooh\"])",
        "minimizeConcatenatedLength(words = [\"zzkxxlwzd\", \"jm\", \"pbnjvcl\", \"oz\", \"kq\", \"uy\", \"lmx\", \"yq\"])"
    ],
    "sample_327": [
        "isFascinating(n = 192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(n = 123)",
        "isFascinating(100)",
        "isFascinating(267)",
        "isFascinating(147)",
        "isFascinating(145)",
        "isFascinating(n = 273456)",
        "isFascinating(n = 563)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1], [0]])",
        "matrixSum(nums = [[1],[1],[1]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1, 3], [2, 4]])",
        "matrixSum(nums = [[0, 1], [0, 5]])",
        "matrixSum(nums = [[1], [1], [1], [1], [1]])",
        "matrixSum(nums = [[1, 2, 3], [3, 2, 1], [2, 3, 1]])",
        "matrixSum(nums = [[3, 2, 1], [2, 1, 3], [1, 3, 2]])",
        "matrixSum(nums = [[3, 6], [7, 1]])"
    ],
    "sample_326": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)"
    ],
    "sample_275": [
        "findChampion(grid = [[0, 1, 1], [0, 0, 1], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 1], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[1, 1, 1], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 0, 1], [1, 0, 1], [0, 0, 0]])",
        "findChampion(grid = [[0,1,0],[1,0,1],[0,0,0]])",
        "findChampion(grid=[[1, 1, 1], [0, 1, 1], [0, 1, 1]])",
        "findChampion(grid = [[0, 1, 1, 1], [1, 0, 1, 1], [0, 0, 0, 0], [1, 0, 0, 0]])",
        "findChampion(grid = [[0, 1, 1, 1], [0, 0, 1, 1], [1, 0, 0, 0], [0, 0, 1, 0]])",
        "findChampion(grid = [[0, 1, 1, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0, 0], [1, 0, 0, 1], [1, 0, 0, 0], [0, 1, 0, 1]])"
    ],
    "sample_260": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1,2,3])",
        "minimumSum(nums = [2, 5, 3, 1, 7])",
        "minimumSum(nums = [3, 2, 5, 1, 2])",
        "minimumSum(nums = [3,2,1,0,4])",
        "minimumSum(nums = [2,4,1,2,7,8])",
        "minimumSum(nums = [6, 4, 8, 3])",
        "minimumSum(nums = [6, 2, 1, 5, 8, 3])",
        "minimumSum(nums = [7, 2, 6, 1, 3, 2, 6, 5])"
    ],
    "sample_322": [
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(100)",
        "isFascinating(n = 376)",
        "isFascinating(1)",
        "isFascinating(n = 45)",
        "isFascinating(n = 876)"
    ],
    "sample_248": [
        "minOperations(s1 = \"01\", s2 = \"10\", x = 1)",
        "minOperations(s1 = \"001\", s2 = \"011\", x = 2)",
        "minOperations(s1 = \"1010\", s2 = \"1010\", x = 1)",
        "minOperations(s1 = \"0011\", s2 = \"1111\", x = 1)",
        "minOperations(s1 = \"10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
        "minOperations(s1 = \"0011\", s2 = \"1010\", x = 3)",
        "minOperations(s1 = \"1011\", s2 = \"0111\", x = 2)",
        "minOperations(s1 = \"1010101\", s2 = \"0101011\", x = 2)",
        "minOperations(s1 = \"011000\", s2 = \"111110\", x = 5)",
        "minOperations(s1 = \"10100111\", s2 = \"11001110\", x = 1)"
    ],
    "sample_342": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 1, y = 2, z = 2)",
        "longestString(x = 1, y = 1, z = 1)",
        "longestString(x = 2, y = 2, z = 3)",
        "longestString(x = 3, y = 3, z = 1)",
        "longestString(x = 2, y = 1, z = 1)",
        "longestString(x = 3, y = 5, z = 1)",
        "longestString(x = 1, y = 1, z = 4)"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7, 8], moveTo = [9, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7, 8], moveTo = [9, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 8], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 7], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [6], moveTo = [5])",
        "relocateMarbles(nums = [5, 7, 8, 9], moveFrom = [5, 7, 8], moveTo = [6, 6, 8])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [6, 8, 5], moveTo = [8, 5, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [6, 8], moveTo = [7, 1])",
        "relocateMarbles(nums=[3, 4, 6, 8, 9], moveFrom=[4, 6], moveTo=[5, 5])",
        "relocateMarbles(nums = [6, 9, 5, 8], moveFrom = [6, 8], moveTo = [8, 5])"
    ],
    "sample_306": [
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"John is 25 years old\", \"Jane is 60 years old\", \"Jake is 61 years old\"])",
        "countSeniors(details = [\"Mike St.90\", \"Anna M.61\", \"Jimmy R.58\", \"Kelly T.79\"])",
        "countSeniors(details = [\"Janet 59\", \"Victor 65\", \"Roger 74\"])",
        "countSeniors(details = [\"c2-10-35\", \"s4-22-60\"])",
        "countSeniors(details = [\"Mike-27-LA\", \"Jimmy-40-NY\", \"David-55-MA\", \"Mary-22-LA\"])",
        "countSeniors(details = [\"Jacob Smith, 64\", \"Ann Mann, 70\", \"Aaron Freeman, 42\", \"Conan O'Brien, 57\"])",
        "countSeniors(details = [\"Name:Michael,Age:44,Location:New York\", \"Name:Sam,Age:23,Location:Los Angeles\", \"Name:Cassie,Age:67,Location:Chicago\", \"Name:Bobby,Age:18,Location:San Francisco\", \"Name:Arthur,Age:78,Location:Houston\"])",
        "countSeniors(details = [\"56084539278152,58\",\"71040419931232,72\",\"56084539278152,58\",\"37238963293894,18\",\"56084539278152,58\",\"56084539278152,58\",\"56084539278152,58\",\"56084539278152,58\",\"56084539278152,58\",\"56084539278152,58\"])"
    ],
    "sample_303": [
        "countSeniors(details = [\"ABC9876541234\", \"DEF6543211234\"])",
        "countSeniors([\"L15\", \"J23\", \"E70\"])",
        "countSeniors(details = [\"Raja,50,M\", \"Pooja,66,F\", \"Naveen,36,M\", \"Ajith,60,M\"])",
        "countSeniors(details = [\"r01g16\", \"p02g40\", \"s01g78\", \"q02g39\"])",
        "countSeniors(details=[\"Xavier,31,M\", \"Sakura,51,F\", \"Carlos,23,M\", \"Yui,76,F\"])",
        "countSeniors(details = [\"Gage,61\", \"Phil,58\", \"Katy,14\", \"Tifany,70\", \"Beverly,45\", \"Armando,58\", \"Natalya,17\", \"Patricia,69\", \"Addison,20\", \"Priscilla,30\"])",
        "countSeniors(details= [\"Bob: 69\", \"Eric: 70\", \"Alice: 50\", \"Mary: 65\", \"Joe: 59\", \"Billy: 62\"])",
        "countSeniors(details = [\"D2955\", \"R4562\", \"Y5624\", \"L5624\", \"J5624\", \"Z5624\"])",
        "countSeniors(details=[\"P267J9I-L\", \"BQ76TP49\", \"OS793LD9-L\", \"N669GA88\"])",
        "countSeniors(details = [\"SG19821113\", \"NK1901618\", \"JH1978407\", \"VY1997173\", \"UH1958653\"])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [6, 8, 9], moveFrom = [6, 8], moveTo = [5, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7, 8], moveTo = [9, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [5, 7], moveTo = [6, 8])",
        "relocateMarbles(nums = [5, 8, 9], moveFrom = [8, 9], moveTo = [6, 6])",
        "relocateMarbles(nums = [6, 8, 9], moveFrom = [6, 9], moveTo = [5, 6])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [6, 8], moveTo = [9, 7])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 3, 2], moveTo = [2, 1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 3], moveTo = [6, 8])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 6, 8], moveTo = [5, 6, 9])",
        "relocateMarbles(nums=[2, 3, 4], moveFrom=[2, 4], moveTo=[3, 4])"
    ],
    "sample_286": [
        "findMinimumOperations(s1=\"abc\", s2=\"abc\", s3=\"abc\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"aba\", s3 = \"aba\")",
        "findMinimumOperations(s1 = \"bcd\", s2 = \"bcd\", s3 = \"bcd\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abc\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"aba\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abcc\")",
        "findMinimumOperations(s1 = \"baba\", s2 = \"baba\", s3 = \"baba\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ac\", s3 = \"abac\")",
        "findMinimumOperations(s1=\"abc\", s2=\"aac\", s3=\"aba\")",
        "findMinimumOperations(s1 = \"acd\", s2 = \"bed\", s3 = \"abd\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abcdef\", s2 = \"abcdef\", s3 = \"abcdef\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcde\", s3 = \"abcdf\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"abcd\", s3 = \"abcde\")",
        "findMinimumOperations(s1 = \"xy\", s2 = \"xz\", s3 = \"xz\")",
        "findMinimumOperations(s1 = \"aaaa\", s2 = \"aaaaa\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"ananas\", s3 = \"nanabo\")",
        "findMinimumOperations(s1 = \"wzemmbt\", s2 = \"webmt\", s3 = \"wmbt\")"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1,2,3,4])",
        "minimumRightShifts(nums = [3,4,5,1,2])",
        "minimumRightShifts(nums = [1, 1, 1])",
        "minimumRightShifts(nums = [2, 3, 1])",
        "minimumRightShifts(nums = [0, 1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [4,5,1,2,3])",
        "minimumRightShifts(nums = [3, 1, 2, 0, 5])"
    ],
    "sample_453": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"bab\")",
        "minChanges(s = \"aaaa\")",
        "minChanges(s = \"abcdefg\")",
        "minChanges(s = \"aabbb\")",
        "minChanges(s = \"xxyyzz\")",
        "minChanges(s = \"AAAAAAAA\")"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 11)",
        "lengthOfLongestSubsequence(nums = [3, 5, 8, 13], target = 2)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1], target = 10)",
        "lengthOfLongestSubsequence(nums = [2, 2, 4], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], target = 12)",
        "lengthOfLongestSubsequence(nums = [5, 1, 2, 3, 4, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5, 7, 12], target = 17)",
        "lengthOfLongestSubsequence(nums = [5, 3, 10, 1], target = 15)",
        "lengthOfLongestSubsequence(nums=[1,3,5,8], target=5)"
    ],
    "sample_367": [
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"lYmPh\")",
        "sortVowels(s = \"lYmPh\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"YlmPh\")",
        "sortVowels(s = 'mYpHl')",
        "sortVowels(s = \"YmPlh\")",
        "sortVowels(s = 'HumpLy')"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 10)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5], target = 11)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 100)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9,10], target = 55)",
        "lengthOfLongestSubsequence(nums = [1, 2, 4, 5], target = 11)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5, 6], target = 11)",
        "lengthOfLongestSubsequence(nums = [2, 5, 7], target = 14)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5, 8], target = 7)"
    ],
    "sample_381": [
        "countPairs(nums = [2, 7, 11, 15], t = 10)",
        "countPairs(nums = [1,2,3,4,5], t = 7)",
        "countPairs(nums = [1, 2, 3], t = 4)",
        "countPairs(nums = [1, 2, 3], t = 4)",
        "countPairs(nums = [2,7,11,15], t = 10)",
        "countPairs(nums = [1, 2, 3], t = 5)",
        "countPairs(nums = [1,2,3], t = 3)",
        "countPairs(nums = [3, 1, 2, 4, 5], t = 7)",
        "countPairs(nums = [2, 1, 3, 2, 0], t = 3)",
        "countPairs(nums=[2,4,5,8,7,10], t=12)"
    ],
    "sample_366": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 3, 2])",
        "isGood(nums = [3, 1, 2])",
        "isGood([1, 2, 3])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isGood(nums = [3,2,1])",
        "isGood(nums = [2, 1, 5, 4, 3])"
    ],
    "sample_369": [
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmPh\")",
        "sortVowels(s = 'YmplH')",
        "sortVowels(s=\"YmplH\")",
        "sortVowels(s = \"YmlPh\")",
        "sortVowels(s = 'HYmpl')",
        "sortVowels(s=\"HYlmp\")",
        "sortVowels(s = 'lYmHp')"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [3, 4, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 1, 2, 5])",
        "minimumRightShifts(nums = [2, 3, 1, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 0])",
        "minimumRightShifts(nums = [4, 2, 1, 3])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6])",
        "minimumRightShifts(nums = [3, 2, 1, 5, 4])",
        "minimumRightShifts(nums = [5, 1, 3, 4, 2])",
        "minimumRightShifts(nums = [7, 5, 1, 2, 3, 4])",
        "minimumRightShifts(nums = [2, 2, 3, 4, 5])"
    ],
    "sample_448": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"banana\")",
        "minChanges(s = \"aaaa\")",
        "minChanges(s = \"ababba\")",
        "minChanges(s = \"abbcc\")",
        "minChanges(s = \"abbbbb\")",
        "minChanges(s = \"01011\")",
        "minChanges(s = \"aaabbbbbb\")"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"ggrr\", s2 = \"rggg\")",
        "canBeEqual(s1 = \"xy\", s2 = \"ab\")",
        "canBeEqual(s1 = \"xyz\", s2 = \"zzy\")",
        "canBeEqual(s1 = \"xyzt\", s2 = \"tzyx\")",
        "canBeEqual(s1 = \"a\", s2 = \"a\")",
        "canBeEqual(s1 = \"xyzc\", s2 = \"zxcy\")",
        "canBeEqual(s1 = \"aqzz\", s2 = \"qazq\")",
        "canBeEqual(s1 = \"kktb\", s2 = \"kkbt\")",
        "canBeEqual(s1 = \"anna\", s2 = \"anna\")"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [])",
        "minLengthAfterRemovals(nums = [1,2,3,4])",
        "minLengthAfterRemovals(nums = [2, 2, 2])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [0,0,0,0,0])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 4])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,5,5,5,5,5])",
        "minLengthAfterRemovals(nums = [3, 2, 3, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 3, 3, 4])",
        "minLengthAfterRemovals(nums = [3,1,3,2,2,3,3])"
    ],
    "sample_361": [
        "isGood(a = [2, 0, 1])",
        "isGood(a = [2, 0, 1])",
        "isGood(a = [1, 3, 2, 2])",
        "isGood(a = [1, 0, 2])",
        "isGood(a = [1, 1, 2, 2])",
        "isGood([3, 1, 2, 2])",
        "isGood([0, 1, 2, 3, 3])",
        "isGood(a = [2, 1, 3, 0])",
        "isGood(a = [4, 0, 3, 2, 1])",
        "isGood(a = [0, 3, 2, 1, 4, 1, 2])"
    ],
    "sample_419": [
        "minOperations(nums = [3,1,3,4,3], k = 6)",
        "minOperations(nums = [3,1,3,2,5], k = 3)",
        "minOperations(nums = [3,1,3,2,5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [3,1,3,1,3], k = 3)",
        "minOperations(nums=[3,1,5,2,4], k=4)",
        "minOperations(nums=[1,2,3,3,4], k=3)",
        "minOperations(nums = [2,3,1,1,4], k = 3)",
        "minOperations(nums=[2, 1, 4, 3], k=3)",
        "minOperations(nums = [2, 3, 4, 6, 7, 8], k = 10)"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1, 2, 3])",
        "findMaximumLength(nums = [1,2,3,4])",
        "findMaximumLength(nums = [1,1,0,1])",
        "findMaximumLength(nums = [1,1,1,1,1,1,1])",
        "findMaximumLength(nums = [2, 3, 1, 1, 4])",
        "findMaximumLength(nums=[1,-1,1,-1])",
        "findMaximumLength(nums = [3,1,3,2,5])",
        "findMaximumLength(nums = [3,1,2,7,4,4])",
        "findMaximumLength(nums = [3,2,1,5,2])",
        "findMaximumLength(nums = [1, -2, 4, 5, -1])"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1, 3, 5, 7])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "maxSubarrays(nums = [5, 4, 3, 2, 1])",
        "maxSubarrays(nums = [1, 2, 3, 3])",
        "maxSubarrays(nums = [1, 2, 4, 6, 8, 16])",
        "maxSubarrays(nums = [10, 2, 3, 4, 5])",
        "maxSubarrays(nums = [8, 1, 8, 1, 8])",
        "maxSubarrays(nums = [2, 3, 1, 6, 4, 6])",
        "maxSubarrays(nums = [1, 2, 3, 1, 2, 3, 3, 3, 2, 3, 3, 3])",
        "maxSubarrays(nums = [9, 8, 10, 1, 4, 7])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"cba\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"eidbaooo\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bca\")",
        "canMakeSubsequence(str1 = \"abz\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abcdefg\", str2 = \"hijk\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"abg\")",
        "canMakeSubsequence(str1 = \"aa\", str2 = \"\")",
        "canMakeSubsequence(str1 = \"abcdefgh\", str2 = \"zabcd\")",
        "canMakeSubsequence(str1 = \"deab\", str2 = \"abcd\")"
    ],
    "sample_402": [
        "maxSum(nums = [], m = 0, k = 0)",
        "maxSum(nums = [], m = 0, k = 0)",
        "maxSum(nums = [1,1,1,1,1,1,1,1], m = 1, k = 2)",
        "maxSum(nums = [2, 3, 4, 3], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7], m = 3, k = 3)",
        "maxSum(nums=[2,3,1,1,4], m=2, k=1)",
        "maxSum(nums = [2, 5, 1, 8, 2, 9, 1], m = 3, k = 4)",
        "maxSum(nums = [1, 3, 5, 6], m = 3, k = 4)",
        "maxSum(nums = [3, 1, 5, 2, 1, 2], m = 3, k = 3)",
        "maxSum(nums = [1,2,4,4,4,4,1,2,1,4], m = 3, k = 3)"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"b\")",
        "findWordsContaining(words = [], x = \"hello\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"p\")",
        "findWordsContaining(words = [\"one\", \"two\", \"three\"], x = \"z\")",
        "findWordsContaining(words = [\"banana\", \"orange\", \"apple\"], x = \"o\")",
        "findWordsContaining(words = [\"banana\", \"mango\", \"apple\"], x = \"o\")",
        "findWordsContaining(words = [\"c\", \"d\", \"e\"], x = \"a\")",
        "findWordsContaining(words = [\"dog\", \"cat\", \"man\"], x = \"x\")",
        "findWordsContaining(words = [\"cucumber\", \"banana\", \"potato\"], x = \"xyz\")",
        "findWordsContaining(words = [\"jqb\", \"zxv\", \"lkf\"], x = \"q\")"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"1\", \"3\", \"prev\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"5\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"4\", \"5\", \"prev\"])",
        "lastVisitedIntegers(words = [\"3\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words=['1', 'prev', '2', 'prev'])",
        "lastVisitedIntegers(words = [\"first\", \"2\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words=[\"prev\", \"3\", \"prev\", \"2\", \"prev\"])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 6)",
        "minOperations(nums = [1, 3, 4, 2, 5], k = 5)",
        "minOperations(nums = [2, 3, 5, 4, 1], k = 5)",
        "minOperations(nums = [3, 4, 5], k = 4)",
        "minOperations(nums = [5,3,1,4,2], k = 3)",
        "minOperations(nums = [2, 2, 3, 1, 2], k = 3)",
        "minOperations(nums = [1, 5, 2, 4, 3, 6], k = 5)",
        "minOperations(nums = [4,2,1,2,4,3,2,4], k = 4)",
        "minOperations(nums = [1, 4, 5, 7, 3, 2, 5, 6], k = 4)",
        "minOperations(nums = [3, 5, 1, 10, 8, 4, 1, 7, 2], k = 5)"
    ],
    "sample_418": [
        "minOperations(nums = [3,1,3,4,3], k = 6)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 4)",
        "minOperations(nums = [1, 2, 3, 4], k = 2)",
        "minOperations(nums = [1,2,3], k = 3)",
        "minOperations(nums = [4, 2, 3, 1, 4], k = 5)",
        "minOperations(nums = [1,2,3,4,1], k = 5)",
        "minOperations(nums = [1, 2, 4, 1, 2, 5], k = 5)",
        "minOperations(nums = [3, 5, 1, 2, 3], k = 5)",
        "minOperations(nums = [1,2,3,4,5,10,11], k = 5)",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3], k = 3)"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1,2,1,2])",
        "minimumSeconds(nums = [1, 2, 1])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1,2,3])",
        "minimumSeconds(nums=[1,2,1,2])",
        "minimumSeconds(nums = [1, 2, 1, 2, 1])",
        "minimumSeconds(nums = [0])",
        "minimumSeconds(nums = [1, 2, 1, 2, 1, 3, 3])",
        "minimumSeconds(nums = [1,2,3,1])",
        "minimumSeconds(nums=[1,2,1,2,1,3])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3], target = 4)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 8)",
        "countPairs(nums = [1, 2, 3, 4], target = 7)",
        "countPairs(nums = [2, 3, 4, 6], target = 8)",
        "countPairs(nums = [2, 1, 5, 3, 4], target = 6)",
        "countPairs(nums = [1, 4, 6, 3, 2], target = 5)",
        "countPairs(nums = [0,1,0,1,0,1], target = 2)",
        "countPairs(nums = [1, 1, 3, 5, 6, 7], target = 2)"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"pineapple\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"pineapple\"], x = \"app\")",
        "findWordsContaining(words = [\"cat\", \"banana\", \"car\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"banana\", \"kiwi\", \"orange\"], x = \"banana\")",
        "findWordsContaining(words = [\"aab\", \"bab\", \"abc\", \"bac\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"cat\", \"and\", \"pear\"], x = \"a\")"
    ],
    "sample_372": [
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = 'Leetcode')",
        "sortVowels(s = 'Leetcode')",
        "sortVowels(s = 'Leetcode')",
        "sortVowels(s = \"Leetcoded\")",
        "sortVowels(s = 'LeetcOde')"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [1, 2, 3])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [4, 4, 4, 4, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [4, 5, 5, 4])",
        "minLengthAfterRemovals(nums = [5, 2, 3, 5, 4, 1])"
    ],
    "sample_452": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"abb\")",
        "minChanges(s = \"ababba\")",
        "minChanges(s = \"1100\")",
        "minChanges(s = \"xyyx\")",
        "minChanges(s = \"xyy\")",
        "minChanges(s = \"nannan\")",
        "minChanges(s = \"cabad\")",
        "minChanges(s = \"mmmmmmmm\")"
    ],
    "sample_385": [
        "countPairs(nums = [1, 2, 3], target = 3)",
        "countPairs(nums = [1, 2, 3], target = 3)",
        "countPairs(nums = [1, 1, 2, 2, 3], target = 4)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 10)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 10)",
        "countPairs(nums = [2, 3, 5, 7], target = 8)",
        "countPairs(nums = [3,1,2,2,2,1,3], target = 4)",
        "countPairs(nums=[3, 1, 2, 4], target=5)",
        "countPairs(nums = [2, 3, 5, 7, 9], target = 10)",
        "countPairs(nums = [3, 1, 4, 2, 3, 2, 1, 2], target = 5)"
    ],
    "sample_427": [
        "minOperations(nums = [1, 2, 3, 4])",
        "minOperations(nums = [6,6,6,6])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3])",
        "minOperations(nums = [1, 2, 3, 4, 2])",
        "minOperations(nums = [3, 3, 3, 1, 2, 2, 2])",
        "minOperations(nums = [4, 4, 4, 4, 1, 1, 1, 1])",
        "minOperations(nums = [3,2,3,3,2,2,2])",
        "minOperations(nums = [3, 4, 4, 4, 5, 5, 6, 6, 6, 7, 8, 9, 9, 9])",
        "minOperations(nums = [2, 4, 5, 2, 3, 3, 2, 4, 4, 4, 4, 5])"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1, 2, 3])",
        "minLengthAfterRemovals(nums = [])",
        "minLengthAfterRemovals(nums = [1])",
        "minLengthAfterRemovals(nums = [1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4])",
        "minLengthAfterRemovals(nums = [1])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 3, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3])"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1,2,3])",
        "minimumCoins(prices = [1, 3, 2])",
        "minimumCoins(prices = [1, 3])",
        "minimumCoins(prices = [1, 2, 2, 2])",
        "minimumCoins(prices = [2, 1, 3, 2])",
        "minimumCoins(prices = [1, 2, 1, 3, 2])",
        "minimumCoins(prices = [1, 5, 8, 9, 10, 17, 17, 20])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\", \"kiwi\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"grape\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"blue\", \"green\", \"red\"], x = \"ue\")",
        "findWordsContaining(words = [\"can\", \"man\", \"pan\"], x = \"an\")",
        "findWordsContaining(words = [\"test\", \"example\", \"banana\"], x = \"na\")",
        "findWordsContaining(words = [\"hello\", \"apple\", \"pear\", \"grape\"], x = \"p\")",
        "findWordsContaining(words = [\"mq\", \"pq\", \"wxy\", \"zy\"], x = \"q\")",
        "findWordsContaining(words = [\"anaconda\", \"nasa\", \"space\", \"earth\"], x = \"a\")"
    ],
    "sample_420": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1, 2, 3], k = 3)",
        "minOperations(nums = [3,1,3,2,5,3], k = 3)",
        "minOperations(nums = [1, 2, 3, 4], k = 5)",
        "minOperations(nums = [1, 2, 3, 1, 2], k = 3)",
        "minOperations(nums = [2,3,1,5,4], k = 5)",
        "minOperations(nums = [4,3,6,16,8,2], k = 5)",
        "minOperations(nums = [1, 2, 3, 5, 7], k = 5)",
        "minOperations(nums = [4, 5, 1, 3, 2], k = 4)",
        "minOperations(nums = [4, 2, 2, 1, 1], k = 3)"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [2, 1, 3, 4])",
        "isGood(nums = [3, 2, 1])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [1,2,3])",
        "isGood(nums = [4, 2, 1, 3])",
        "isGood([2,1,3])",
        "isGood([1, 2, 3, 4, 5, 6, 7])",
        "isGood(nums=[1, 3, 2, 5, 4, 6, 7])"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [3, 7, 4, 6, 5], target = 16)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9,10], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1], target = 1)",
        "lengthOfLongestSubsequence(nums = [3,3,5,7], target = 10)",
        "lengthOfLongestSubsequence(nums = [3,7,10], target = 10)",
        "lengthOfLongestSubsequence(nums = [3, 5, 4, 7], target = 13)",
        "lengthOfLongestSubsequence(nums = [4, 2, 5], target = 6)",
        "lengthOfLongestSubsequence(nums = [7,10], target = 2)",
        "lengthOfLongestSubsequence(nums = [3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18,19,19,19,20,20,20,21,21,21,22,22,22,23,23,23,24,24,24,25,25,25,26,26,26,27,27,27,28,28,28,29,29,29,30,30,30,31,31,31,32,32,32,33,33,33,34,34,34,35,35,35,36,36,36,37,37,37,38,38,38,39,39,39,40,40,40,41,41,41,42,42,42,43,43,43,44,44,44,45,45,45,46,46,46,47,47,47,48,48,48,49,49,49,50,50,50,51,51,51,52,52,52,53,53,53,54,54,54,55,55,55,56,56,56,57,57,57,58,58,58,59,59,59,60,60,60,61,61,61,62,62,62,63,63,63,64,64,64,65,65,65,66,66,66,67,"
    ],
    "sample_365": [
        "isGood(nums = [1,3,3,2])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1,2,3,3])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums=[1,2,3,4,5])",
        "isGood(nums=[1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5,6,6,7])",
        "isGood(nums = [2, 1, 3, 3, 4, 4, 5, 6, 7])",
        "isGood(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "maxSubarrays(nums = [1, 0, 1, 0])",
        "maxSubarrays(nums = [13, 7, 2, 10, 17, 5])",
        "maxSubarrays(nums=[17, 12, 16, 20])",
        "maxSubarrays(nums = [2, 5, 7, 10, 13, 14, 15, 16, 19, 21, 22, 23, 26, 29, 30])",
        "maxSubarrays(nums = [2, 16, 32, 8, 1, 1])",
        "maxSubarrays(nums = [21, 2, 3, 12, 20, 13])",
        "maxSubarrays(nums = [4, 12, 5, 28, 7, 3, 6, 19, 10])",
        "maxSubarrays(nums = [10, 7, 7, 2, 15, 4, 4, 2, 10, 14, 5, 5, 14, 2, 7, 9, 8, 11, 6, 12, 11, 3, 6, 2, 4, 8, 3, 12, 20, 2, 13, 5, 9, 11, 1, 9, 2, 13, 3, 20, 11, 13, 20, 12, 13, 17, 9, 17, 1, 20, 5, 13, 11, 7, 2, 8, 4, 15, 19, 7, 1, 8, 3, 6, 18, 5, 1, 15, 13, 2, 15, 12, 16, 15, 14, 4, 1, 19, 8, 16, 12, 1, 17, 14, 7, 2, 6, 12, 14, 15, 11, 10, 15, 7, 12, 14, 14, 14, 17, 1, 3, 12, 13, 15, 12, 15, 8, 1, 10, 10, 3, 12, 12, 14, 1, 13, 12, 2, 15, 10, 15, 8, 13, 11, 16, 17, 10, 11, 8, 15, 15, 16, 18, 13, 12, 10, 17, 14, 17, 17, 14, 4, 16, 15, 12, 2, 16, 12, 15, 2, 12, 12, 3, 12, 12, 15"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1], target = 1)",
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 5)",
        "lengthOfLongestSubsequence(nums=[], target=10)",
        "lengthOfLongestSubsequence(nums = [1], target = 10)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5, 7], target = 1)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7], target = 1000)",
        "lengthOfLongestSubsequence(nums = [2,5,10], target = 20)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3, 4, 5, 6], target = 5)"
    ],
    "sample_450": [
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"baaabb\")",
        "minChanges(s = \"abbbbba\")",
        "minChanges(s=\"aaba\")",
        "minChanges(s = \"abbccdd\")",
        "minChanges(s=\"abccba\")",
        "minChanges(s = \"0010\")",
        "minChanges(s = \"aabccabba\")",
        "minChanges(s = \"abbabbbabbbababbabbbabbbababbabbbabbbababbabbbabbbabbbabbbabbabbbabbababbabbbabbbabbbabbbabbbabbbabbbabbababbabbbabbabbbabbbabbbabbbabbbabbbabbbabbbabbababbabbbabbbabbbabbbabbbabbbabbbabbabbbabbabbbabbbabbbabbbabbbabbbabbabbbabbbabbbabbbabbabbbabbbabbbabbbabbbabbbabbbabbabbbabbbabbbabbabbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbbabbb"
    ],
    "sample_463": [
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 6, limit = 4)",
        "distributeCandies(n = 8, limit = 3)",
        "distributeCandies(n = 11, limit = 2)",
        "distributeCandies(n = 13, limit = 4)",
        "distributeCandies(n=6, limit=5)"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1, 1, 2, 2])",
        "sumCounts(nums = [1, 2, 3, 1, 2])",
        "sumCounts(nums = [2, 1, 3, 4, 1, 5])"
    ],
    "sample_449": [
        "minChanges(s = \"\")",
        "minChanges(s = \"ab\")",
        "minChanges(s = \"aaa\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"abababab\")",
        "minChanges(s = \"aaabb\")",
        "minChanges(s = \"abcccd\")",
        "minChanges(s = \"abbabbabbabb\")",
        "minChanges(s = \"ssssssssssss\")",
        "minChanges(s = \"naba\")"
    ],
    "sample_425": [
        "minOperations(nums = [1, 2, 3])",
        "minOperations(nums = [1, 2, 3, 4])",
        "minOperations(nums = [1, 2, 3, 4])",
        "minOperations(nums = [1, 2, 3, 4])",
        "minOperations(nums = [4, 4, 4, 4])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [3,3,3,3,3,3,3,3,3,3,3,3,3])",
        "minOperations(nums = [1, 2, 2, 3, 4, 4])",
        "minOperations(nums = [2, 2, 3, 2, 2, 4])",
        "minOperations(nums = [1, 3, 2, 1, 2, 2, 1, 3, 4, 3, 4, 4])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"abz\", str2 = \"ba\")",
        "canMakeSubsequence(str1 = \"abz\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"xyz\", str2 = \"xzy\")",
        "canMakeSubsequence(str1 = \"zzz\", str2 = \"aa\")",
        "canMakeSubsequence(str1 = \"zaz\", str2 = \"zza\")",
        "canMakeSubsequence(str1 = \"xzy\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"aaab\", str2 = \"aaa\")",
        "canMakeSubsequence(str1 = \"xya\", str2 = \"ya\")",
        "canMakeSubsequence(str1 = \"abcdef\", str2 = \"acb\")",
        "canMakeSubsequence(str1 = \"abd\", str2 = \"zbc\")"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,2,3])",
        "minimumSeconds(nums = [1,2,3,4])",
        "minimumSeconds(nums = [1,2,3,4])",
        "minimumSeconds(nums = [1,2,3,3,3])",
        "minimumSeconds(nums = [0,1])",
        "minimumSeconds(nums = [1, 2, 1, 1, 2])",
        "minimumSeconds(nums = [2,1,3,3,2,3,3,3,1,3,2,2,3,1])",
        "minimumSeconds(nums = [0,1,2,2,2,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9])"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9,10], target = 100)",
        "lengthOfLongestSubsequence(nums = [], target = 12)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7], target = 100)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6], target = 7)",
        "lengthOfLongestSubsequence(nums = [4, 1, 2, 3], target = 1)",
        "lengthOfLongestSubsequence(nums = [4,1,2,3], target = 1)",
        "lengthOfLongestSubsequence(nums = [1,2,1,2], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 5, 7, 10, 11, 12, 14, 15], target = 10)",
        "lengthOfLongestSubsequence(nums = [2, 4, 1, 6, 8, 11, 16], target = 13)"
    ],
    "sample_370": [
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = 'Leetcode')",
        "sortVowels(s = 'leetcode')",
        "sortVowels(s = \"Let's try this\")",
        "sortVowels(s = 'Let us cde')",
        "sortVowels(s = \"Electric\")",
        "sortVowels(s = 'Let us cAll')",
        "sortVowels(s = 'leotcede')",
        "sortVowels(s = 'Let\\'s test this function.')"
    ],
    "sample_421": [
        "minOperations(nums = [1, 2, 3, 4], k = 4)",
        "minOperations(nums = [1, 2, 3, 4], k = 4)",
        "minOperations(nums = [1,2,3,4,5], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 8)",
        "minOperations(nums = [3, 1, 5, 4, 2], k = 5)",
        "minOperations(nums = [1,2,4,5,1], k = 5)",
        "minOperations(nums = [3,4,1,3,2,3,5,3], k = 3)",
        "minOperations(nums = [5, 2, 4, 1, 7, 5, 9, 10, 5], k = 10)",
        "minOperations(nums=[3,2,1,2], k=3)",
        "minOperations(nums = [1,3,4,3,2,5,7,1,3,2,6,8], k = 10)"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [13, 7, 2, 8, 3])",
        "maxSubarrays(nums = [3, 1, 5, 2, 8])",
        "maxSubarrays(nums = [1, 3, 5, 7, 9])",
        "maxSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "maxSubarrays(nums = [3,1,5,2,7,5])",
        "maxSubarrays(nums=[1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 3, 2, 1, 3])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [2, 3, 1, 6, 4, 7, 3, 1, 2])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[1, 1], [1, 2], [1, 3], [2, 1], [2, 2], [2, 3]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 3], [3, 4]], k = 3)",
        "countPairs(coordinates = [[1, 1], [0, 1], [1, 0], [0, 0]], k = 1)",
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]], k = 4)",
        "countPairs(coordinates = [[0,0],[0,1],[0,2],[0,3],[0,4],[1,0],[1,1],[1,2],[1,3],[1,4]], k = 1)",
        "countPairs(coordinates = [[2,2],[3,3],[4,4],[1,1],[5,5]], k = 1)",
        "countPairs(coordinates = [[1, 0], [2, 1], [0, 1], [1, 1], [1, 0]], k = 1)",
        "countPairs(coordinates = [[3,4], [3,3], [4,4], [4,3]], k = 2)",
        "countPairs(coordinates = [[1, 2], [3, 4], [2, 6], [5, 6], [7, 4]], k = 4)",
        "countPairs(coordinates = [[1, 0], [2, 3], [5, 4], [0, 1], [2, 1], [4, 5], [0, 3], [3, 3], [5, 1], [1, 2], [4, 1]], k = 3)"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [10, 1, 2, 7, 6, 1, 5], target = 8)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 15)",
        "lengthOfLongestSubsequence(nums = [], target = 100)",
        "lengthOfLongestSubsequence(nums = [2, 3], target = 1)",
        "lengthOfLongestSubsequence(nums=[1,2,3], target=6)",
        "lengthOfLongestSubsequence(nums = [2,3,5], target = 11)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3, 4], target=15)",
        "lengthOfLongestSubsequence(nums = [4,3,2,3,5,2,1], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 3, 6, 9, 12], target = 6)",
        "lengthOfLongestSubsequence(nums = [3, 4, 8, 11, 12], target = 12)"
    ],
    "sample_445": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1,2,1,2])",
        "sumCounts(nums = [1,2,1,2])",
        "sumCounts(nums = [3, 3, 3])",
        "sumCounts(nums = [1, 2, 2, 3, 3, 3])",
        "sumCounts(nums=[2, 3, 1])",
        "sumCounts([3,1,4,1,5])",
        "sumCounts(nums = [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4])"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"10111\")",
        "minimumBeautifulSubstrings(s = \"10110101\")",
        "minimumBeautifulSubstrings(s = \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s = \"111\")",
        "minimumBeautifulSubstrings(s = \"10110111\")",
        "minimumBeautifulSubstrings(s = \"111001111\")",
        "minimumBeautifulSubstrings(s = \"0101010101\")",
        "minimumBeautifulSubstrings(s = \"010011001\")"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 2, 3])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 3, 8, 48, 10])",
        "maxSubarrays(nums = [1,2,3,4])",
        "maxSubarrays(nums = [1,2,3,4,5,6,7])",
        "maxSubarrays(nums = [2, 3, 5])",
        "maxSubarrays(nums = [2, 1, 3, 4])",
        "maxSubarrays(nums = [2, 5, 6])",
        "maxSubarrays(nums = [4, 1, 0])",
        "maxSubarrays(nums = [6, 9, 2, 5, 7])"
    ],
    "sample_401": [
        "maxSum(nums = [], m = 0, k = 0)",
        "maxSum(nums = [], m = 0, k = 0)",
        "maxSum(nums = [], m = 0, k = 0)",
        "maxSum(nums = [], m = 1, k = 1)",
        "maxSum(nums = [1, 5, 4, 2, 9, 9, 9], m = 3, k = 4)",
        "maxSum(nums = [1, 2, 3], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3], m = 3, k = 1)",
        "maxSum(nums = [1, 1, 1, 7, 8, 9], m = 3, k = 4)",
        "maxSum(nums = [2,3,1,1,4], m = 3, k = 3)",
        "maxSum(nums = [0, 1, 1, 2], m = 2, k = 1)"
    ],
    "sample_400": [
        "maxSum(A = [], m = 1, k = 2)",
        "maxSum(A = [], m = 3, k = 4)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(A = [], m = 5, k = 2)",
        "maxSum(A = [0, 0, 0, 0, 0], m = 0, k = 0)",
        "maxSum(A = [1,1,1,1,1,1,1], m = 5, k = 2)",
        "maxSum(A = [3, 4, 2, 1], m = 4, k = 2)",
        "maxSum(A = [0, 1, 2, 3, 2, 1, 4], m = 3, k = 3)",
        "maxSum(A = [5, 6, 1, 5, 7, 5], m = 3, k = 3)",
        "maxSum(A = [2, 5, 8, 1, 2, 7, 3, 9, 8], m = 3, k = 3)"
    ],
    "sample_363": [
        "isGood(nums = [1, 3, 2])",
        "isGood(nums = [1, 3, 2, 2])",
        "isGood(nums = [1, 3, 3, 2])",
        "isGood([2, 1, 3])",
        "isGood(nums = [4, 3, 2, 1, 0])",
        "isGood(nums = [3, 3, 2, 1, 0])",
        "isGood(nums = [2, 1, 0, 3])",
        "isGood(nums = [1,3,3])",
        "isGood(nums = [3,4,2,1])",
        "isGood(nums = [1, 2, 3, 1, 3, 2])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1, 2, 1, 2])",
        "minimumSeconds(nums = [1, 2, 1, 2])",
        "minimumSeconds(nums = [1,2,1,2])",
        "minimumSeconds(nums = [1, 2, 3])",
        "minimumSeconds(nums = [1, 2, 1, 2, 1, 2])",
        "minimumSeconds(nums=[1, 2, 3, 1, 2, 3])",
        "minimumSeconds(nums = [1,2,1])",
        "minimumSeconds(nums = [1, 1, 2, 2, 2])",
        "minimumSeconds(nums = [0, 0, 1])",
        "minimumSeconds(nums = [20, 17, 13, 13, 17, 20])"
    ],
    "sample_376": [
        "minimumSeconds(nums = [1,2,1,2])",
        "minimumSeconds(nums = [1,2,1,2])",
        "minimumSeconds(nums = [1, 2, 1, 2])",
        "minimumSeconds(nums = [1, 2, 1])",
        "minimumSeconds(nums = [1,2,1])",
        "minimumSeconds(nums = [1,2,3,1,2,3])",
        "minimumSeconds(nums=[1,2,1,2,1,2])",
        "minimumSeconds(nums = [3, 3, 3, 3, 3])",
        "minimumSeconds(nums = [3,3,2,1,3,3])",
        "minimumSeconds(nums = [1,2,1,1,2,1,1,1])"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5])",
        "minLengthAfterRemovals(nums = [0])",
        "minLengthAfterRemovals(nums = [0])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4])",
        "minLengthAfterRemovals(nums = [1,1])",
        "minLengthAfterRemovals(nums = [5,5,4])",
        "minLengthAfterRemovals(nums = [1,2,1])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [2,2,3,1,1,1])"
    ],
    "sample_399": [
        "maxSum(nums = [], m = 0, k = 0)",
        "maxSum(nums = [], m = 0, k = 0)",
        "maxSum(nums = [], m = 1, k = 1)",
        "maxSum(nums = [], m = 1, k = 1)",
        "maxSum(nums = [], m = 1, k = 0)",
        "maxSum(nums = [1, 5, 4, 2, 9, 9, 9], m = 3, k = 3)",
        "maxSum(nums = [1,2,3], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4], m = 2, k = 2)",
        "maxSum(nums = [0,0,0], m = 0, k = 3)",
        "maxSum(nums = [3,5,3], m = 2, k = 2)"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(nums = [], m = 1, k = 2)",
        "maxSum(nums = [], m = 3, k = 2)",
        "maxSum(nums = [], m = 2, k = 5)",
        "maxSum(nums = [0, 0, 0], m = 2, k = 3)",
        "maxSum(nums = [0, 0, 0, 0], m = 1, k = 1)",
        "maxSum(nums = [0, 1, 2, 3, 4], m = 1, k = 1)",
        "maxSum(nums = [0,0,0,0,0], m = 1, k = 0)",
        "maxSum(nums = [1, 1, 1], m = 0, k = 1)",
        "maxSum(nums = [3, 1, 2, 1, 1, 1], m = 3, k = 3)"
    ],
    "sample_364": [
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1,2,3,5])",
        "isGood(nums = [2,3,4,5,1])",
        "isGood([1,3,2])",
        "isGood(nums = [1,3,2,4,5])",
        "isGood(nums = [3,2,1,4])",
        "isGood(nums = [3,2,1,5,4])",
        "isGood([1, 2, 3, 5])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 1])",
        "minLengthAfterRemovals(nums = [1, 1])",
        "minLengthAfterRemovals(nums = [1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6])",
        "minLengthAfterRemovals(nums = [1,2,3,4])",
        "minLengthAfterRemovals(nums = [2, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 1, 2, 1, 2, 1, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55])"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"o\")",
        "findWordsContaining(words = [\"banana\", \"apple\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"ab\", \"bc\", \"cd\"], x = \"b\")",
        "findWordsContaining(words = [\"abc\", \"def\", \"ghi\"], x = \"de\")",
        "findWordsContaining(words = [\"bana\", \"ana\"], x = \"ana\")",
        "findWordsContaining(words = [\"yes\", \"yes\", \"no\"], x = \"yes\")",
        "findWordsContaining(words = [\"asd\", \"qwe\", \"asd\"], x = \"as\")",
        "findWordsContaining(words = [\"hello\", \"hi\", \"banana\", \"bonjour\"], x = \"an\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [2, 1, 1, 2])",
        "minimumCoins(prices = [1, 3, 2, 3])",
        "minimumCoins(prices = [2,3,2])",
        "minimumCoins(prices = [1, 2, 1, 5])",
        "minimumCoins(prices = [3, 2, 1, 5])",
        "minimumCoins(prices = [2, 2, 2])",
        "minimumCoins(prices = [1, 3, 2, 1, 1, 4])",
        "minimumCoins(prices = [1, 1, 3, 4, 1, 1])",
        "minimumCoins(prices=[2,2,1,1,2,2])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"0\")",
        "minimumBeautifulSubstrings(s = \"00\")",
        "minimumBeautifulSubstrings(s = \"111111\")",
        "minimumBeautifulSubstrings(s = \"110\")",
        "minimumBeautifulSubstrings(s = \"1011011111\")",
        "minimumBeautifulSubstrings(s = \"1111001001\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acdb\")",
        "canBeEqual(s1 = \"xxyy\", s2 = \"yxyx\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdba\")",
        "canBeEqual(s1 = \"aabb\", s2 = \"baaa\")",
        "canBeEqual(s1 = \"abc\", s2 = \"dbc\")",
        "canBeEqual(s1 = \"qwwe\", s2 = \"qwwq\")",
        "canBeEqual(s1 = \"azaa\", s2 = \"zaaz\")",
        "canBeEqual(s1 = \"foob\", s2 = \"bafo\")",
        "canBeEqual(s1 = \"tall\", s2 = \"wald\")"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"ace\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bbb\")",
        "canMakeSubsequence(str1 = \"xyz\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"aceg\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"acd\", str2 = \"ace\")",
        "canMakeSubsequence(str1 = \"acd\", str2 = \"bd\")",
        "canMakeSubsequence(str1 = \"abcdefghij\", str2 = \"xac\")",
        "canMakeSubsequence(str1 = \"azzzzbzzz\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"gfhjq\", str2 = \"abc\")"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 2])",
        "minLengthAfterRemovals(nums = [2,2,3])",
        "minLengthAfterRemovals(nums = [3, 4, 5])",
        "minLengthAfterRemovals(nums = [2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [2, 2, 3, 4, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 3, 3, 4, 4, 5, 5, 5, 5])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"ggrr\", s2 = \"rrgg\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"xyzw\", s2 = \"wzyx\")",
        "canBeEqual(s1 = \"yx\", s2 = \"xy\")",
        "canBeEqual(s1 = \"xaxb\", s2 = \"abxx\")",
        "canBeEqual(s1 = \"gain\", s2 = \"king\")",
        "canBeEqual(s1 = \"raca\", s2 = \"car\")"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums=[1, 2, 3, 4, 5], target=7)",
        "countPairs(nums = [3, 2, 1, 4], target = 5)",
        "countPairs(nums = [2, 3, 5, 6], target = 7)",
        "countPairs(nums = [1, 3, 4, 5, 7, 10], target = 12)",
        "countPairs(nums = [1, 4, 3, 7], target = 5)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"abc\", s2 = \"bac\")",
        "canMakeSubsequence(s1=\"abc\", s2=\"abc\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"ba\")",
        "canMakeSubsequence(s1 = \"aba\", s2 = \"abc\")",
        "canMakeSubsequence(s1 = \"aaa\", s2 = \"aaz\")",
        "canMakeSubsequence(s1 = \"abcdefg\", s2 = \"abdfg\")",
        "canMakeSubsequence(s1=\"aba\", s2=\"ba\")",
        "canMakeSubsequence(s1 = \"abbz\", s2 = \"abbc\")",
        "canMakeSubsequence(s1 = \"abzca\", s2 = \"bc\")",
        "canMakeSubsequence(s1=\"abcdefghijklmnopqrstuvwxyz\", s2=\"acnoyz\")"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = ['1', '2', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['1', '2', 'prev', 'prev', '3'])",
        "lastVisitedIntegers(words = ['1', '2', 'prev', 'prev', '3'])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = ['1', 'prev', '2', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['1', '2', 'prev', '1', 'prev', 'prev'])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9]], k = 2)",
        "countPairs(coordinates = [[0,0],[0,1],[1,0],[1,1],[2,0],[2,1],[3,0],[3,1],[4,0],[4,1]], k = 1)",
        "countPairs(coordinates = [[1, 1], [1, 3], [2, 2], [2, 4], [3, 1], [3, 3], [4, 2], [4, 4], [5, 1], [5, 3]], k = 2)",
        "countPairs(coordinates = [[1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1]], k = 0)",
        "countPairs(coordinates = [[1, 2], [3, 4], [4, 5]], k = 1)",
        "countPairs(coordinates = [[1, 3], [1, 5], [3, 3], [3, 5], [5, 3], [5, 5]], k = 2)",
        "countPairs(coordinates = [[-1, -1], [-2, -1], [-3, -1]], k = 2)",
        "countPairs(coordinates = [[1, 1], [1, 2], [3, 2], [2, 2], [3, 3], [3, 4]], k = 1)",
        "countPairs(coordinates = [[-5, 0], [5, 0], [0, -5], [0, 5], [-5, -5], [-5, 5], [5, -5], [5, 5]], k = 10)",
        "countPairs(coordinates=[[2, 1], [4, 5], [2, 1], [1, 1]], k=2)"
    ],
    "sample_451": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"ababab\")",
        "minChanges(s = \"abcdef\")",
        "minChanges(s = \"aaaa\")",
        "minChanges(s = \"aaaabbbb\")",
        "minChanges(s = \"aabab\")",
        "minChanges(s = \"aaaaa\")",
        "minChanges(s = \"asdfasdf\")",
        "minChanges(s = \"changeme\")",
        "minChanges(s = \"aabababaa\")"
    ],
    "sample_461": [
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 9, limit = 3)",
        "distributeCandies(n = 4, limit = 1)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 9, limit = 4)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcad\")",
        "canBeEqual(s1 = \"xyzw\", s2 = \"wxyz\")",
        "canBeEqual(s1 = \"bana\", s2 = \"abna\")",
        "canBeEqual(s1 = \"ABCD\", s2 = \"ADCB\")",
        "canBeEqual(s1 = \"taco\", s2 = \"coat\")",
        "canBeEqual(s1 = \"bapx\", s2 = \"nana\")",
        "canBeEqual(s1 = \"wet\", s2 = \"wte\")"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 4, limit = 3)",
        "distributeCandies(n = 2, limit = 2)",
        "distributeCandies(n = 10, limit = 10)",
        "distributeCandies(n = 13, limit = 3)"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 95)",
        "accountBalanceAfterPurchase(p = 95)",
        "accountBalanceAfterPurchase(p = 95)",
        "accountBalanceAfterPurchase(p = 95)",
        "accountBalanceAfterPurchase(p = 100)",
        "accountBalanceAfterPurchase(p = 101)",
        "accountBalanceAfterPurchase(p = 110)",
        "accountBalanceAfterPurchase(p = 55)",
        "accountBalanceAfterPurchase(p = 5)",
        "accountBalanceAfterPurchase(p = 40)"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1,1,1])",
        "sumCounts(nums = [1, 2, 3, 1, 1])",
        "sumCounts(nums = [2, 2, 1, 3])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1,2,3,4,5])",
        "minimumSeconds(A = [1, 2, 3, 4])",
        "minimumSeconds(A = [1,2,3,4])",
        "minimumSeconds(A = [1,2,1,2,1,2])",
        "minimumSeconds(A = [1, 1, 2])",
        "minimumSeconds(A = [1,2,2,1])",
        "minimumSeconds(A = [1, 1, 1, 2, 2, 3])",
        "minimumSeconds(A = [1,1,1,2,2,3])",
        "minimumSeconds(A = [1, 3, 1, 1, 1, 1])",
        "minimumSeconds(A = [2,2,2,2,2,1,1,2,2,2])"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"cde\")",
        "canMakeSubsequence(str1 = \"abcdefghijklmnopqrstuvwxyz\", str2 = \"acegikmoqsuwy\")",
        "canMakeSubsequence(str1 = \"abcdefg\", str2 = \"hijklmn\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"af\")",
        "canMakeSubsequence(str1 = \"abcz\", str2 = \"abz\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"f\")",
        "canMakeSubsequence(str1 = \"acz\", str2 = \"aa\")",
        "canMakeSubsequence(str1=\"abcz\", str2=\"bdfg\")",
        "canMakeSubsequence(str1 = \"mrt\", str2 = \"rom\")"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [5, 4, 3, 2, 1])",
        "minimumRightShifts(nums = [1, 1, 1])",
        "minimumRightShifts(nums = [3,4,5,1,2])",
        "minimumRightShifts(nums = [4, 5, 1, 2, 3])",
        "minimumRightShifts(nums = [5, 5, 5])",
        "minimumRightShifts(nums = [4, 2, 3, 6, 1])"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1,2,3], l = 3, r = 5)",
        "countSubMultisets(nums = [1,2,3], l = 3, r = 5)",
        "countSubMultisets(nums = [1,2,3,4], l = 1, r = 12)",
        "countSubMultisets(nums = [3, 5, 6, 7], l = 6, r = 8)",
        "countSubMultisets(nums = [1, 2, 3, 4], l = 1, r = 5)",
        "countSubMultisets(nums = [0,0], l = 0, r = 0)",
        "countSubMultisets(nums = [1,2,3,4,5], l = 5, r = 5)",
        "countSubMultisets(nums=[1, 2, 3, 4], l = 1, r = 3)",
        "countSubMultisets(nums=[3,5,6,7], l=6, r=9)",
        "countSubMultisets(nums=[2, 1], l=0, r=3)"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1,2,3,4])",
        "minimumCoins(prices = [1, 1, 1, 1])",
        "minimumCoins(prices = [1, 1, 1, 1, 1])",
        "minimumCoins(prices = [2, 3, 1])",
        "minimumCoins(prices = [1,2,2])",
        "minimumCoins(prices = [1, 2, 1, 3, 2])",
        "minimumCoins(prices = [1,2,1,2,1,2,1,2])",
        "minimumCoins(prices = [1, 5, 3, 2, 1, 4])",
        "minimumCoins(prices = [1, 3, 2, 1, 4, 2, 2, 1, 1, 2])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 1, 1, 1])",
        "minimumCoins(prices = [1,2,3,4,5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumCoins(prices = [4, 3, 2, 1])",
        "minimumCoins(prices = [2, 3, 1, 2, 4, 2])",
        "minimumCoins(prices = [1, 1, 4, 1])",
        "minimumCoins(prices=[2,1,1,2])",
        "minimumCoins(prices = [2, 3, 2, 5, 4])",
        "minimumCoins(prices = [2, 4, 3, 4, 2])",
        "minimumCoins(prices = [2, 3, 4, 4, 3, 2, 2, 2, 2, 3])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", 1, 2, \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"3\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"4\", \"prev\", \"5\"])",
        "lastVisitedIntegers([\"1\", \"2\", \"prev\", \"1\", \"2\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [1, 2, 3, \"prev\", 2, 1])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"4\", \"prev\", \"6\"])",
        "lastVisitedIntegers(words=[\"prev\", \"2\", \"3\", \"4\", \"prev\"])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1,2,3,4,5,6])",
        "minOperations(nums = [1, 2, 3, 4])",
        "minOperations(nums = [1, 2, 3, 4])",
        "minOperations(nums = [1, 2, 3, 1, 1, 3])",
        "minOperations(nums=[1,2,3,4])",
        "minOperations(nums = [1, 1, 1, 2, 3, 2, 3, 2])",
        "minOperations(nums = [1, 1, 1, 2, 3, 4, 5, 5, 5, 6, 7])",
        "minOperations(nums = [1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 4, 4])",
        "minOperations(nums = [1, 3, 3, 1, 2, 2, 2, 3, 2, 1])"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"push\", \"push\", \"pop\", \"push\", \"pop\"])",
        "lastVisitedIntegers(words = [\"p\", \"p\", \"1\", \"2\"])",
        "lastVisitedIntegers(words = [\"p\", \"1\", \"2\", \"3\", \"p\", \"p\"])",
        "lastVisitedIntegers(words=[\"p\", \"1\", \"p\", \"2\", \"p\"])",
        "lastVisitedIntegers(words = [\"push\", \"push\", \"back\", \"push\", \"pop\"])",
        "lastVisitedIntegers([\"p\", \"p\", \"p\", \"3\", \"2\", \"1\"])",
        "lastVisitedIntegers(words = [\"p\", \"p\", \"p\", \"5\", \"p\", \"1\", \"2\"])",
        "lastVisitedIntegers(words = ['p', '2', 'p', '3', 'p', '5'])",
        "lastVisitedIntegers([\"p\", \"2\", \"4\", \"3\", \"p\", \"p\", \"p\"])",
        "lastVisitedIntegers(words = [\"push 5\", \"push 1\", \"pop\", \"push 2\", \"push 5\"])"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1, 2, 3])",
        "minimumSeconds(nums = [1,2,3,4])",
        "minimumSeconds(nums = [1, 2, 3, 1])",
        "minimumSeconds(nums = [1, 2, 3, 2, 1])",
        "minimumSeconds(nums = [1, 2, 1, 2, 1, 2])",
        "minimumSeconds(nums = [7,7,7,7,7,7])",
        "minimumSeconds(nums = [1,1,2,3,4,5,6])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "minimumSeconds(nums = [1,2,1,3,1,4,1,5,1,6,1,7,1,8,1,9,1,10,1])",
        "minimumSeconds(nums = [0,4,3,5,2,1,4,3,1])"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"carrot\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cat\", \"dog\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\", \"grape\", \"kiwi\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\", \"mango\"], x = \"na\")",
        "findWordsContaining(words = [\"the\", \"man\", \"ate\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"car\", \"cap\", \"bat\", \"dog\", \"soup\", \"zebra\"], x = \"a\")"
    ],
    "sample_431": [
        "maxSubarrays(nums = [0, 1, 2, 3])",
        "maxSubarrays(nums = [1, 2, 4, 6, 8, 12])",
        "maxSubarrays(nums = [1,0,2,3,4,5])",
        "maxSubarrays(nums = [1,2,4,7,8])",
        "maxSubarrays(nums = [3,1,3,2,2,3])",
        "maxSubarrays(nums = [2, 3, 5, 7, 10])",
        "maxSubarrays(nums = [3, 1, 5, 4, 2, 4, 8, 5])",
        "maxSubarrays(nums = [8, 4, 2, 1, 1, 2, 2, 4, 8])",
        "maxSubarrays(nums = [10, 2, 6, 1, 8, 12])",
        "maxSubarrays(nums = [100, 10, 2, 10, 10])"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"zero\", \"one\", \"two\", \"three\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"one\", \"two\", \"prev\", \"prev\", \"one\"])",
        "lastVisitedIntegers(words = [\"5\", \"prev\", \"prev\", \"2\"])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4], target = 4)",
        "countPairs(nums=[1, 2, 3, 4, 5], target=8)",
        "countPairs(nums = [1, 2, 4], target = 4)",
        "countPairs(nums = [2,3,4,1], target = 5)",
        "countPairs(nums = [2, 3, 5, 7, 1], target = 10)",
        "countPairs(nums = [2, 3, 7, 11, 15], target = 10)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"xy\", s2 = \"yx\")",
        "canBeEqual(s1 = \"xy\", s2 = \"yx\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"aab\", s2 = \"bba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ab\")",
        "canBeEqual(s1 = \"abab\", s2 = \"abab\")",
        "canBeEqual(s1 = \"egg\", s2 = \"add\")",
        "canBeEqual(s1 = \"abba\", s2 = \"aabb\")",
        "canBeEqual(s1 = \"12345\", s2 = \"12346\")",
        "canBeEqual(s1 = \"bcdf\", s2 = \"abce\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"4\", \"prev\"])",
        "lastVisitedIntegers(words = [\"5\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"5\", \"prev\", \"5\", \"3\", \"prev\", \"1\"])"
    ],
    "sample_464": [
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n=6, limit=2)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 1, 1])",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [3, 1, 2])",
        "minimumRightShifts(nums = [7, 9, 1, 2, 3, 4, 6, 5])",
        "minimumRightShifts(nums = [1, 3, 7, 5, 8, 2])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\"], x = \"a\")",
        "findWordsContaining(words = [\"orange\", \"apple\", \"pear\"], x = \"a\")",
        "findWordsContaining(words = [\"a\", \"bc\", \"de\", \"fgh\"], x = \"\")",
        "findWordsContaining(words = [\"cat\", \"rat\", \"mat\", \"sat\"], x = \"at\")",
        "findWordsContaining(words = [\"fox\", \"ox\"], x = \"o\")",
        "findWordsContaining(words = [\"an\", \"apple\", \"cat\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"abc\", \"xyz\", \"def\", \"ghi\", \"jkl\"], x = \"abc\")",
        "findWordsContaining(words = [\"hx\", \"hy\", \"hy\"], x = \"h\")"
    ],
    "sample_398": [
        "maxSum(nums = [], m = 0, k = 0)",
        "maxSum(nums = [], m = 2, k = 0)",
        "maxSum(nums = [2,3,3,2], m = 2, k = 3)",
        "maxSum(nums = [1, 1, 1], m = 2, k = 2)",
        "maxSum(nums = [1, 1, 1], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 1, k = 2)",
        "maxSum(nums = [0, 0, 0], m = 1, k = 3)",
        "maxSum(nums = [1, 1, 1, 1, 2], m = 2, k = 2)",
        "maxSum(nums = [4, 5, 6], m = 1, k = 2)",
        "maxSum(nums = [5,6,3,4,8,2,3], m = 3, k = 2)"
    ],
    "sample_424": [
        "minOperations(nums = [1,2,3,4,4,3,2,1])",
        "minOperations(nums = [1,2,3,4,4,3,2,1])",
        "minOperations(nums = [1,2,3,4,5])",
        "minOperations(nums = [2,2,3,3,2,4,4,4,4,4])",
        "minOperations(nums = [3,1,3,2,4,3])",
        "minOperations(nums = [1,1,1])",
        "minOperations(nums = [1, 5, 5, 5, 5])",
        "minOperations(nums = [1, 3, 1, 4, 3, 3])",
        "minOperations(nums = [2,1,3,5,2,1])",
        "minOperations(nums = [2,1,4,3,3,2,4,3,3,2,1,3,4,3,3,2,1,4,3,3,2])"
    ],
    "sample_417": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 6)",
        "minOperations(nums = [3,2,20,1,1,3], k = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 6)",
        "minOperations(nums = [1,2,3,4,5], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 11)",
        "minOperations(nums = [2, 1, 5, 2, 3, 2], k = 7)",
        "minOperations(nums = [1,2,4,5,5], k = 5)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17], k = 10)",
        "minOperations(nums=[1, 1, 1, 1, 1, 1, 1, 1], k=3)",
        "minOperations(nums=[2, 5, 6, 9, 10, 2, 3, 1], k=8)"
    ],
    "sample_371": [
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"HYmpl\")",
        "sortVowels(s = \"YmHlp\")",
        "sortVowels(s=\"YmplH\")",
        "sortVowels(s = 'myLPh')",
        "sortVowels(s = \"YmPlH\")",
        "sortVowels(s = 'YlmPh')"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 1, limit = 1)",
        "distributeCandies(n = 2, limit = 3)",
        "distributeCandies(n = 7, limit = 4)"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts([1, 2, 3])",
        "sumCounts(nums = [2, 3, 2])",
        "sumCounts(nums=[3, 2, 1])",
        "sumCounts(nums = [1, 2, 2, 3, 1, 2])",
        "sumCounts([3, 1, 1, 3, 3])",
        "sumCounts(nums = [1, 2, 3, 2, 3, 4, 4, 2])"
    ],
    "sample_429": [
        "maxSubarrays(nums = [13, 7, 2, 8, 3])",
        "maxSubarrays(nums = [3, 1, 5, 2, 7])",
        "maxSubarrays(nums = [0, 1, 2, 3, 4])",
        "maxSubarrays(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 0, 1, 1, 1, 0, 1])",
        "maxSubarrays(nums = [0, 1, 1, 1, 0, 0, 0])",
        "maxSubarrays(nums = [2, 3, 1, 4, 6, 7, 8, 9])",
        "maxSubarrays(nums = [3, 1, 3, 5, 0])",
        "maxSubarrays(nums = [1, 2, 4, 12, 3, 4, 8])",
        "maxSubarrays(nums = [2, 3, 1, 4, 2, 4, 2, 5, 2, 3, 4, 2, 2, 1, 2, 3, 4, 2, 2, 1, 2, 3, 4, 2, 2, 1, 2, 3, 4, 2, 2, 1, 2, 3, 4, 2, 2, 1, 2, 3, 4, 2, 2, 1, 2, 3, 4, 2, 2, 1, 2, 3, 4, 2, 2, 1, 2, 3, 4, 2, 2, 1, 2, 3, 4, 2, 2, 1, 2, 3, 4, 2, 2, 1, 2, 3, 4, 2, 2, 1, 2, 3, 4, 2, 2, 1, 2, 3, 4, 2, 2, 1, 2, 3, 4, 2, 2, 1, 2, 3, 4, 2, 2, 1, 2, 3, 4, 2, 2, 1, 2, 3, 4, 2, 2, 1, 2, 3, 4, 2, 2, 1, 2, 3, 4, 2, 2, 1, 2, 3, 4, 2, 2, 1, 2, 3, 4, 2, 2, 1, 2, 3, 4, 2, 2, 1, 2, 3, 4, 2, 2, 1, 2, 3, 4, 2, 2, 1, 2, 3, 4, 2, 2, 1, 2, 3, 4, 2, 2, 1, 2, 3, 4, 2, 2, 1, 2, 3, 4, 2, 2, 1, 2, 3, 4, 2"
    ],
    "sample_446": [
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 2, 1, 2])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [2, 1, 3])",
        "sumCounts(nums = [2, 1, 2])",
        "sumCounts(nums = [3, 2, 1])",
        "sumCounts(nums = [1, 2, 2, 4])",
        "sumCounts(nums = [2, 3, 3, 2])",
        "sumCounts([1,2,1,2])"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"xyz\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acbd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"abd\")",
        "canBeEqual(s1 = \"aaa\", s2 = \"bbb\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ab\")",
        "canBeEqual(s1 = \"xyl\", s2 = \"yxl\")",
        "canBeEqual(s1 = \"ozzj\", s2 = \"pqpz\")",
        "canBeEqual(s1 = \"cjijx\", s2 = \"gxqgj\")"
    ],
    "sample_380": [
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1,2,3], target = 3)",
        "countPairs(nums = [1, 2, 3], target = 5)",
        "countPairs(nums = [1,2,3,4,5], target = 10)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums=[2,7,11,15], target=10)",
        "countPairs(nums = [0, 2, 3, 4], target = 5)",
        "countPairs(nums = [2, 5, 4, 1, 3, 4, 2, 4, 5], target = 5)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1, 1, 2, 3])",
        "sumCounts(nums = [1, 2, 2, 1])",
        "sumCounts(nums = [1,2,2])"
    ],
    "sample_368": [
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"Hello\")",
        "sortVowels(s = \"Hympl\")",
        "sortVowels(s = 'lHmpY')",
        "sortVowels(s = \"mpHlY\")",
        "sortVowels(s = \"lmpHY\")",
        "sortVowels(s = \"HumpyL\")",
        "sortVowels(s = \"lEmOn\")",
        "sortVowels(s=\"HumpyL\")",
        "sortVowels(s=\"HmPlY\")"
    ],
    "sample_462": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 5)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 20, limit = 6)"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1,2,4,1])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7])",
        "minimumCoins(prices = [1, 2, 2, 1, 2])",
        "minimumCoins(prices = [1, 1, 1, 1, 100])",
        "minimumCoins(prices = [2, 3, 5])",
        "minimumCoins(prices = [3,4,2,1,3])",
        "minimumCoins(prices = [1,2,3,1,3,3,4])"
    ],
    "sample_426": [
        "minOperations(nums = [1, 2, 3])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [3, 3, 3, 3])",
        "minOperations(nums = [2,2,2])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 2, 2])",
        "minOperations(nums = [2, 2, 3, 3, 4, 4])",
        "minOperations(nums = [1, 1, 1, 2, 2, 3, 3])",
        "minOperations(nums = [2, 4, 4, 4, 6, 6])",
        "minOperations(nums = [4, 3, 1, 5, 4, 4, 4, 4, 4, 4, 4, 4])"
    ],
    "sample_423": [
        "minOperations(nums = [1, 2, 3])",
        "minOperations(nums = [1, 2, 3, 4, 5])",
        "minOperations(nums = [1, 2, 3, 4])",
        "minOperations(nums = [2, 2, 2])",
        "minOperations(nums = [1, 1])",
        "minOperations(nums = [1,2,3,4,4,3,2,1])",
        "minOperations(nums = [2, 2, 1])",
        "minOperations(nums = [3,3,3,3])",
        "minOperations(nums = [3, 2, 1])",
        "minOperations(nums = [1, 3, 3, 2, 2, 2])"
    ],
    "sample_476": [
        "minimumCoins(prices = [1,2,3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 1])",
        "minimumCoins(prices = [1,2,1])",
        "minimumCoins(prices = [1,1,1,1,1,1])",
        "minimumCoins(prices = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minimumCoins(prices = [2, 1])",
        "minimumCoins(prices = [1, 2, 2, 4, 5])",
        "minimumCoins(prices = [2, 5, 2, 3])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3,4,5,1,2])",
        "minimumRightShifts(nums = [2, 3, 1])",
        "minimumRightShifts(nums = [4, 2, 3, 1])",
        "minimumRightShifts(nums = [3, 1, 4, 2])",
        "minimumRightShifts(nums = [3, 2, 1, 3, 4])"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums=[1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6])",
        "minimumRightShifts(nums = [4, 3, 2, 1])",
        "minimumRightShifts(nums = [1, 3, 2])",
        "minimumRightShifts(nums = [1, 3, 2, 5, 4])",
        "minimumRightShifts(nums = [7, 8, 10, 6, 5])"
    ],
    "sample_167": [
        "isAcronym(words = [\"banana\"], s = \"b\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"banana\")",
        "isAcronym(words = [\"banana\", \"orange\", \"apple\"], s = \"boa\")",
        "isAcronym(words = [\"Apple\", \"Banana\"], s = \"AB\")",
        "isAcronym(words = [\"animal\", \"kingdom\"], s = \"ak\")",
        "isAcronym(words = [\"you\", \"are\", \"the\", \"best\"], s = \"yabt\")",
        "isAcronym(words = [\"Jupyter\", \"Notebook\"], s = \"JN\")",
        "isAcronym(words = [\"dog\", \"cow\", \"cat\"], s = \"dcc\")",
        "isAcronym(words=[\"fun\", \"games\"], s = \"fg\")",
        "isAcronym(words = [\"Van\", \"Gogh\"], s = \"vg\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [5,10,11,9,5], m = 5, k = 1)",
        "countInterestingSubarrays(nums=[3, 1, 4, 3, 2, 2, 4], m=2, k=3)",
        "countInterestingSubarrays(nums = [2, 1, 4, 5, 3, 9, 6], m = 3, k = 6)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 4, k = 3)",
        "countInterestingSubarrays(nums = [20,1,15,3,10,5,8], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 3, 1, 1, 4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9], m = 5, k = 3)",
        "countInterestingSubarrays(nums = [3,1,2,7,4,1,2,1,1,1,1], m = 5, k = 3)",
        "countInterestingSubarrays(nums = [4, 3, 2, 1, 1, 3, 2], m = 4, k = 1)"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[3, 10], [4, 16], [7, 19]])",
        "numberOfPoints(nums = [[1,3],[2,4]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 6]])",
        "numberOfPoints(nums = [[2,10],[3,5],[7,15]])",
        "numberOfPoints(nums = [[1,2], [3,4], [4,5]])",
        "numberOfPoints(nums = [[1,3], [2,4], [6,8], [10,12]])",
        "numberOfPoints(nums= [[1,10],[2,3],[5,8]])",
        "numberOfPoints(nums = [[1, 2], [2, 4], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1,5], [4,6], [10,12], [16,17], [20,21]])",
        "numberOfPoints(nums = [[0,3],[3,7],[1,6],[7,12],[12,25]])"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy,problem\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easy,problem\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easy, problem\"], separator = \",\")",
        "splitWordsBySeparator(words = ['easy,problem'], separator = \",\")",
        "splitWordsBySeparator(words = ['easy-problem'], separator = \"-\")",
        "splitWordsBySeparator(words = [\"e-a-s-y\", \"-p-r-o-b-l-e-m\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"e-z\", \"pr\", \"oblem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"The\", \"easy problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"the\", \"easy-to-solve\", \"problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = ['so_easy', 'p_roblem'], separator = '_')"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[3, 4], [4, 5], [5, 6]])",
        "numberOfPoints(nums = [[1,2], [3,4], [5,6], [7,8]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,5]])",
        "numberOfPoints(nums=[[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1,4],[2,3],[4,5]])",
        "numberOfPoints([[1, 2], [2, 3], [4, 5]])",
        "numberOfPoints(nums = [[1, 3], [3, 5], [6, 8]])",
        "numberOfPoints(nums=[[1, 3], [2, 4], [2, 3]])",
        "numberOfPoints(nums = [[1, 5], [1, 10], [3, 5]])"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [5,5,5,5])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [4,2,4])",
        "countCompleteSubarrays(nums = [4,2,4])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 4, 5, 3])",
        "countCompleteSubarrays(nums = [4,1,2,1,5,2,5,2,1])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = \" \")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = \" \")",
        "splitWordsBySeparator(words = [\"one,two\", \"three\", \"four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = \"\")",
        "splitWordsBySeparator(words=[\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator=\"e\")",
        "splitWordsBySeparator(words = [\"one/two/three/\", \"/four/five/\", \"six\"], separator = \"/\")",
        "splitWordsBySeparator(words = ['one-two', '-', 'three', '-', 'four-five', '-', 'six'], separator = '-')",
        "splitWordsBySeparator(words = [\"one\", \"\", \"\", \"two\", \"three\", \"\", \"four\", \"five\", \"\", \"six\", \"\"]\n                             separator = \"\")",
        "splitWordsBySeparator(words=[\"one\\n\", \"two\\n\\n\\n\", \"three\\n\\n\\n\\n\\n\", \"four\\n\\n\\n\\n\\n\\n\\n\", \"five\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\", \"six\"], separator=\"\\n\\n\")"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 1, 2, 2])",
        "maxIncreasingGroups(u = [1, 1, 3])",
        "maxIncreasingGroups(u = [1, 3, 1])",
        "maxIncreasingGroups(u = [2, 3, 4])",
        "maxIncreasingGroups(u = [0, 0, 1, 1])",
        "maxIncreasingGroups(u = [4, 1, 3, 2])",
        "maxIncreasingGroups(u = [1, 3, 2, 4, 5])",
        "maxIncreasingGroups(u = [2, 1, 3, 1, 2])",
        "maxIncreasingGroups(u = [1, 3, 1, 5, 7, 9, 11])",
        "maxIncreasingGroups(u = [2, 2, 4, 2, 2, 5, 4])"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1, 4, 8, 2], x = 3)",
        "minAbsoluteDifference(nums = [1,3,8,8,9], x = 4)",
        "minAbsoluteDifference(nums = [1, 2, 3, 4, 5], x = 1)",
        "minAbsoluteDifference(nums = [4, 10, 15, 24, 26], x = 3)",
        "minAbsoluteDifference(nums = [1, 3, 6, 9], x = 3)",
        "minAbsoluteDifference(nums = [1,5,6,7,8,10], x = 2)",
        "minAbsoluteDifference(nums = [4, 3, 6, 7, 10], x = 2)",
        "minAbsoluteDifference(nums = [1, 5, 9, 2, 6, 3], x = 2)",
        "minAbsoluteDifference(nums = [3, 9, 7, 12], x = 3)",
        "minAbsoluteDifference(nums = [1,3,8,2,6,2,2,2], x = 4)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [4,5,0,-2,-3,1], modulo = 5, k = 5)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 5], modulo = 7, k = 3)",
        "countInterestingSubarrays(nums = [1, 1, 2, 2, 3], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 3, 4, 6, 10], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 3, 4, 6, 2], modulo = 6, k = 2)",
        "countInterestingSubarrays(nums = [7, 8, 9, 4], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 3, 2, 1, 3, 5], modulo = 1, k = 1)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 5)",
        "canSplitArray(nums = [2, 2, 1], m = 4)",
        "canSplitArray(nums = [1,2,3], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 2)",
        "canSplitArray(nums = [1, 1, 2, 3, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 1)",
        "canSplitArray(nums = [1, 1, 1], m = 4)",
        "canSplitArray(nums = [2, 5, 6, 7, 8], m = 15)"
    ],
    "sample_169": [
        "isAcronym(words = [\"banana\", \"apple\", \"cat\"], s = \"bac\")",
        "isAcronym(words = [\"hot\", \"dog\"], s = \"hd\")",
        "isAcronym(words = [\"hey\", \"there\"], s = \"ht\")",
        "isAcronym(words = [\"Hello\", \"World\", \"!\"], s = \"HW\")",
        "isAcronym(words = [\"bob\", \"pizza\", \"zoo\"], s = \"bpz\")",
        "isAcronym(words = [\"Plain\", \"Old\", \"Java\", \"Object\"], s = \"POJO\")",
        "isAcronym(words = [\"moon\", \"morning\"], s = \"mm\")",
        "isAcronym(words=['scalable', 'system'], s='cs')",
        "isAcronym(words = [\"Katherine\", \"Penny\", \"Zoe\"], s = \"KPZ\")",
        "isAcronym(words = [\"because\", \"we\", \"make\", \"the\", \"perfect\", \"garden\"], s = \"bwmtpg\")"
    ],
    "sample_121": [
        "minimumIndex(nums = [1, 2, 3, 1])",
        "minimumIndex(nums = [1, 2, 2, 2, 1])",
        "minimumIndex(nums = [1,2,2,2,1])",
        "minimumIndex(nums = [1,2,1,2,1,2,1,1])",
        "minimumIndex(nums = [3,2,1,1,7])",
        "minimumIndex(nums = [1, 2, 1, 3, 1, 1, 1, 1, 1])",
        "minimumIndex(nums = [4, 3, 2, 1, 2])",
        "minimumIndex(nums = [1, 2, 3, 3, 1, 2, 3, 3])",
        "minimumIndex(nums = [1, 1, 3, 3, 3, 3, 3, 3, 3, 3])",
        "minimumIndex(nums = [1, 2, 3, 3, 3, 3, 3, 4, 5, 3])"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 4, offers = [[1,2,5],[3,4,5]])",
        "maximizeTheProfit(n = 1, offers = [[0, 3, 2]])",
        "maximizeTheProfit(n = 5, offers = [[0,2,3], [1,3,2], [1,2,8]])",
        "maximizeTheProfit(n = 3, offers = [[0, 2, 3], [2, 3, 5], [4, 5, 2]])",
        "maximizeTheProfit(n = 3, offers = [[0,0,1],[0,3,2],[1,1,1]])",
        "maximizeTheProfit(n = 3, offers = [[1, 4, 5], [3, 7, 5], [4, 10, 100]])",
        "maximizeTheProfit(n=4, offers=[[1,3,10],[2,4,11]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,5],[2,3,10],[1,4,10],[3,4,5]])",
        "maximizeTheProfit(n = 10, offers = [[0,2,5], [5,7,10], [0,10,10]])",
        "maximizeTheProfit(n = 4, offers = [[2, 3, 6], [1, 3, 5], [1, 2, 1], [3, 4, 1], [4, 4, 4]])"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [2, 1, 7])",
        "maximumTripletValue(nums = [1, 2, -3, 4])",
        "maximumTripletValue(nums = [2, 3, 4, 5])",
        "maximumTripletValue(nums=[1,2,-3])",
        "maximumTripletValue(nums = [1, 3, 2, 5, 4, 1])"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"LL_RR\")",
        "furthestDistanceFromOrigin(moves = \"R_L_\")",
        "furthestDistanceFromOrigin(moves = \"R_L_\")",
        "furthestDistanceFromOrigin(moves = \"RR_LL\")",
        "furthestDistanceFromOrigin(moves = \"R__L\")",
        "furthestDistanceFromOrigin(moves = \"L_R__L\")",
        "furthestDistanceFromOrigin(moves = \"LL__R\")",
        "furthestDistanceFromOrigin(moves = \"LLLL_RRRR\")",
        "furthestDistanceFromOrigin(moves = \"L_RL__RR\")",
        "furthestDistanceFromOrigin(moves = \"L_R__LLR\")"
    ],
    "sample_149": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s=\"string\")",
        "finalString(s = \"rtsni\")",
        "finalString(s = 'ritsng')",
        "finalString(s=\"string\")",
        "finalString(s = \"rngst\")",
        "finalString(s = \"iitrtsng\")"
    ],
    "sample_162": [
        "maxSum(nums = [51,71,17,24,42])",
        "maxSum(nums = [51,71,17,24,42])",
        "maxSum(nums = [51,71,17,24,42])",
        "maxSum(nums = [51,71,17,42])",
        "maxSum(nums = [51,71,17,24,42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 24, 42])",
        "maxSum(nums = [42, 33, 60])",
        "maxSum(nums = [34, 23, 1, 24, 75, 33, 54, 8])",
        "maxSum(nums = [23, 59, 48, 23, 12, 89, 38])"
    ],
    "sample_230": [
        "countWays(nums = [3, 2, 1])",
        "countWays(nums = [1, 1, 1])",
        "countWays(nums = [1,2,3,4,5])",
        "countWays(nums = [1, 2, 1])",
        "countWays(nums = [1, 2, 2])",
        "countWays(nums = [4, 4, 4, 4, 4])",
        "countWays(nums = [1,2,2,2])",
        "countWays(nums = [0,1,2,1,0])",
        "countWays(nums=[1,3,2,1,2,3])",
        "countWays(nums = [1, 1, 1, 3, 3, 3, 1, 1, 1])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n=1, target=2)",
        "minimumPossibleSum(n = 3, target = 6)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 4, offers = [[0, 2, 1], [1, 3, 2]])",
        "maximizeTheProfit(N = 3, offers = [[0, 1, 2], [1, 2, 3], [1, 3, 2]])",
        "maximizeTheProfit(N = 3, offers = [[0, 1, 2], [0, 2, 3], [1, 2, 2]])",
        "maximizeTheProfit(N = 3, offers = [[1, 3, 1], [2, 4, 1]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 2], [1, 3, 4], [2, 3, 3]])",
        "maximizeTheProfit(N = 2, offers = [(0, 0, 2), (1, 2, 3)])",
        "maximizeTheProfit(N = 5, offers = [(1, 2, 1), (2, 3, 1), (3, 4, 1), (4, 5, 1), (1, 3, 2), (2, 5, 2)])",
        "maximizeTheProfit(N = 5, offers = [[0,2,10], [1,4,10], [2,4,10], [3,4,10], [4,5,10]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 1], [1, 5, 2], [2, 4, 1], [2, 5, 3], [3, 4, 2]])",
        "maximizeTheProfit(N = 3, offers = [[0, 0, 2], [0, 0, 2], [1, 1, 1], [1, 2, 1]])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 5, offers = [[1, 4, 5], [3, 5, 10]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 1], [2, 3, 2], [1, 3, 3]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 5], [2, 5, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,3],[1,2,7],[4,5,3],[1,2,6]])",
        "maximizeTheProfit(n = 3, offers = [[0, 1, 4], [0, 2, 6]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 5], [1, 4, 5], [4, 5, 3]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 5], [0, 2, 10], [1, 4, 25]])",
        "maximizeTheProfit(n=4, offers=[[1, 2, 10], [2, 3, 15], [3, 4, 10]])",
        "maximizeTheProfit(n = 6, offers = [[0, 0, 5], [1, 3, 3], [3, 5, 10], [4, 5, 4]])",
        "maximizeTheProfit(n=10, offers=[[0, 1, 10], [3, 4, 20], [1, 4, 10], [5, 6, 15], [2, 5, 20]])"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [5, 1, 4, 2, 2], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 1, 4, 2, 2], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 1, 4, 2, 2], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 1, 4, 2, 2], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 2, 1], target = 0)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 4, 8], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 11, 12, 14], target = 0)"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [5,5,5,5])",
        "countCompleteSubarrays(nums = [5,5,5,5])",
        "countCompleteSubarrays(nums = [5, 5, 5, 5])",
        "countCompleteSubarrays(nums = [2,5,1,4,0])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1,2,3])",
        "countWays(nums = [1, 1, 2, 3])",
        "countWays(nums = [1, 2, 2, 3])",
        "countWays(nums = [4, 1, 3, 2])",
        "countWays(nums = [0, 3, 1])",
        "countWays([1, 2, 2])",
        "countWays(nums = [1, 1, 1, 3, 3])",
        "countWays([1,2,4,3])",
        "countWays(nums = [1, 3, 3, 2, 2, 2])"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [4, 1, 3])",
        "maxIncreasingGroups(usageLimits = [1, 5, 2, 3])",
        "maxIncreasingGroups(usageLimits = [2, 1, 1, 4])",
        "maxIncreasingGroups(usageLimits = [1, 1, 2, 2, 4])",
        "maxIncreasingGroups(usageLimits=[1,2,3,4,5,6,7,8])",
        "maxIncreasingGroups(usageLimits = [100, 200, 300, 100])",
        "maxIncreasingGroups(usageLimits = [10, 1, 2, 2, 3, 1, 7])",
        "maxIncreasingGroups(usageLimits = [2, 5, 3, 7, 10])",
        "maxIncreasingGroups(usageLimits = [2, 5, 6, 8, 4, 1, 5])"
    ],
    "sample_173": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 1, k = 3)",
        "minimumSum(n = 1, k = 1)"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [3, 1, 4, 3, 2, 2, 4], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 3, 1], m = 4, k = 1)",
        "countInterestingSubarrays(nums = [2, 1, 3], m = 5, k = 3)",
        "countInterestingSubarrays(nums = [2, 3, 1], m = 4, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7], m = 7, k = 3)",
        "countInterestingSubarrays(nums=[1,2,3,4,5,6], m=4, k=2)",
        "countInterestingSubarrays(nums = [2, 5, 3], m = 7, k = 3)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums=[5,5,5,5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [2, 5, 1, 4, 5, 2, 1, 1, 1, 1, 1, 2, 1, 5, 4, 2, 5])"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1,3,2,3,1,3], k = 3)",
        "longestEqualSubarray(nums = [1,3,2,3,1,3], k = 3)",
        "longestEqualSubarray(nums = [1,3,2,3,1,3], k = 3)",
        "longestEqualSubarray(nums = [1,3,2,3,1,3], k = 3)",
        "longestEqualSubarray(nums = [1, 3, 2, 3, 1, 3], k = 3)",
        "longestEqualSubarray(nums=[1, 1, 2, 2, 1, 1], k=2)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 0)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3,1], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 2, 1, 2, 4], k = 1)",
        "longestEqualSubarray(nums = [2, 3, 2, 3, 1, 2, 3, 3], k = 2)"
    ],
    "sample_170": [
        "isAcronym(words = [\"banana\"], s = \"b\")",
        "isAcronym(words = [\"happy\", \"frog\"], s = \"hf\")",
        "isAcronym(words = [\"red\", \"amber\", \"green\"], s = \"RAG\")",
        "isAcronym(words = [\"Fri\", \"day\"], s = \"FR\")",
        "isAcronym(words = [\"I\", \"Do\", \"Not\", \"Like\", \"It\"], s = \"IDNLI\")",
        "isAcronym(words = [\"John\", \"Doe\", \"Is\", \"Awesome\"], s = \"JDA\")",
        "isAcronym(words = [\"discovery\", \"flight\"], s = \"DF\")",
        "isAcronym(words = [\"Friends\", \"How\", \"I\"], s = \"FIH\")",
        "isAcronym(words = [\"Definitely\", \"Not\", \"Acronym\"], s = \"\")",
        "isAcronym(words = [\"Beginner\", \"level\"], s = \"Bl\")"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = '111000')",
        "maximumOddBinaryNumber(s = '11100')",
        "maximumOddBinaryNumber(s = '1011')",
        "maximumOddBinaryNumber(s = \"100\")",
        "maximumOddBinaryNumber(s='000')",
        "maximumOddBinaryNumber(s = '010101')",
        "maximumOddBinaryNumber(s = '0001000')",
        "maximumOddBinaryNumber(s = '010011')",
        "maximumOddBinaryNumber(s = \"0110010\")",
        "maximumOddBinaryNumber(s = \"1111011\")"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 3, 2])",
        "countWays(nums = [3, 2, 1])",
        "countWays([1, 2, 3, 4])",
        "countWays(nums = [2, 4, 3, 1])",
        "countWays(nums = [1, 2, 4, 6])",
        "countWays(nums = [1,3,2,5])",
        "countWays([2, 1, 3, 5, 4])",
        "countWays(nums = [3, 0, 1, 4, 2])",
        "countWays(nums = [1, 4, 1])"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 5, offers = [[0,0,1],[0,2,2],[1,3,2]])",
        "maximizeTheProfit(n = 5, offers = [[0,1,5],[2,3,10]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 5], [2, 2, 7], [3, 4, 10]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [0, 1, 7]])",
        "maximizeTheProfit(n = 3, offers = [[1,3,5], [2,5,5]])",
        "maximizeTheProfit(n = 10, offers = [[1,5,10],[2,7,7],[3,8,9]])",
        "maximizeTheProfit(n=4, offers=[[1,2,5],[1,2,2],[3,4,1]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 10], [1, 2, 7], [2, 3, 19], [3, 4, 10]])",
        "maximizeTheProfit(n = 10, offers = [[2, 7, 2], [2, 9, 5], [3, 6, 1], [5, 8, 3], [7, 9, 4]])",
        "maximizeTheProfit(n = 10, offers = [[5, 5, 5], [10, 10, 10], [1, 1, 1], [2, 3, 4], [4, 5, 6], [6, 7, 8]])"
    ],
    "sample_122": [
        "minimumIndex(nums=[1,2,2,2])",
        "minimumIndex(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex(nums = [1, 2, 3, 1, 2, 1])",
        "minimumIndex(nums = [1,2,2,2,2,3,3])",
        "minimumIndex(nums = [1,1,1,2,2,2,2])",
        "minimumIndex(nums = [1, 2, 3, 1, 1, 1, 1])",
        "minimumIndex(nums = [2, 3, 2, 3])",
        "minimumIndex(nums = [2, 2, 2, 2, 1, 1, 1])",
        "minimumIndex(nums = [2,1,1,1,2,1,1,1,1])",
        "minimumIndex(nums = [0,0,0,1,1,1,2,2,2,2,3,3,3,4,4,4,4,4])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1, 3], [2, 5]])",
        "numberOfPoints(nums = [[1, 5], [3, 1], [3, 7]])",
        "numberOfPoints(nums = [[1,4],[2,5],[3,6]])",
        "numberOfPoints(nums = [[3,4],[4,5],[2,9],[9,10]])",
        "numberOfPoints(nums = [[2, 4], [7, 10], [3, 6]])",
        "numberOfPoints(nums = [[1, 4], [2, 3], [5, 8]])",
        "numberOfPoints(nums = [[1,3], [3,6], [6,10]])",
        "numberOfPoints(nums = [[0,2], [2,3], [3,4]])",
        "numberOfPoints(nums = [[0, 20], [25, 30], [35, 50]])",
        "numberOfPoints(nums = [[2,6],[3,5],[4,5],[3,4],[3,4],[3,5],[4,5]])"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \",\")",
        "splitWordsBySeparator(words = [], separator = \"-\")",
        "splitWordsBySeparator(words = [], separator = \"#\")",
        "splitWordsBySeparator(words = [\"abc\"], separator = \"a\")",
        "splitWordsBySeparator(words=[\"\", \"\"], separator=\"a\")",
        "splitWordsBySeparator(words=[\"a-b\", \"c_d\", \"e\"], separator=\"-_\")",
        "splitWordsBySeparator(words = [\"abcd\", \"ef\", \"gh\", \"ijklmnopq\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"a\", \"aabb\", \"aabbbb\"], separator = \"aa\")",
        "splitWordsBySeparator(words = [\"cake\", \"donut\"], separator = \"n\")"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 5, target = 2)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n=3, target=4)",
        "minimumPossibleSum(n = 10, target = 100)"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 3], [2, 4]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[4,5]])",
        "numberOfPoints(nums = [[1, 1], [2, 3]])",
        "numberOfPoints(nums = [[3,3], [2,2], [1,1]])",
        "numberOfPoints(nums = [[3, 4], [2, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 3], [1, 2]])",
        "numberOfPoints(nums = [[1, 2], [2, 4], [2, 2]])",
        "numberOfPoints(nums = [[2, 4], [1, 2], [1, 5]])",
        "numberOfPoints(nums = [[1, 4], [4, 7], [1, 3]])",
        "numberOfPoints(nums=[[1,1],[2,2],[3,3]])"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [5, 10, 11, 9, 5], m = 5, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [3,1,2,5,4], m = 5, k = 1)",
        "countInterestingSubarrays(nums = [1, 3, 5, 2, 7, 4], m = 3, k = 1)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4, 5], m=4, k=1)",
        "countInterestingSubarrays(nums = [3, 1, 4, 3, 5], m = 5, k = 3)",
        "countInterestingSubarrays(nums = [7, 7, 7, 7, 7, 7], m = 7, k = 0)",
        "countInterestingSubarrays(nums = [2,3,1,2,3], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,2,2,3,2], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 6, 3, 10, 10, 10], m = 2, k = 1)"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8, 16], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 4, 8, 16], k = 1)",
        "sumIndicesWithKSetBits(nums = [3, 1, 2, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 4, 5, 8, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 0, 2, 3, 1], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 3, 2, 5, 11, 4, 17], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 2, 4, 1, 6, 10, 3, 13], k = 2)"
    ],
    "sample_203": [
        "minimumOperations(num = \"522\")",
        "minimumOperations(num = \"522\")",
        "minimumOperations(num = \"5225\")",
        "minimumOperations(num = \"5200\")",
        "minimumOperations(num = \"3020\")",
        "minimumOperations(num = \"522125\")",
        "minimumOperations(num = \"725\")",
        "minimumOperations(num = '025')",
        "minimumOperations(num = '000000')",
        "minimumOperations(num = '2233')"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 2, k = 2)",
        "countInterestingSubarrays(nums = [4, 5, 0, -2, -3, 1], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 6, k = 3)",
        "countInterestingSubarrays(nums=[1,2,3], modulo=3, k=2)",
        "countInterestingSubarrays(nums=[1,2,3,4], modulo=4, k=2)",
        "countInterestingSubarrays(nums = [2, 4, 6, 8], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 4, 2, 5, 4, 3], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [5,1,2,0,2,3,4,1], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums=[1,3,1,2,5,4,2], modulo=5, k=2)"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1,2,3,4], K = 0)",
        "longestEqualSubarray(A = [1,1,2,1,1,3], K = 2)",
        "longestEqualSubarray(A = [1,1,2,1,1,2,1], K = 2)",
        "longestEqualSubarray(A=[1, 3, 2, 1, 4, 1, 1], K=0)",
        "longestEqualSubarray(A=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], K=5)",
        "longestEqualSubarray(A = [1, 1, 2, 3, 2, 3], K = 2)",
        "longestEqualSubarray(A = [1, 1, 2, 2, 3, 3, 2], K = 1)",
        "longestEqualSubarray(A = [1,3,2,1,3,2,3], K = 3)",
        "longestEqualSubarray(A = [1,3,2,1,1,1,1,1,1,3,2,1], K = 1)",
        "longestEqualSubarray(A = [1,1,3,2,1,5,4,1,3,2,4,3], K = 2)"
    ],
    "sample_146": [
        "finalString(s = \"pointer\")",
        "finalString(s = \"pointer\")",
        "finalString(s = \"pinter\")",
        "finalString(s = 'pointer')",
        "finalString(s = 'pointer')",
        "finalString(s = 'pontier')",
        "finalString(s = 'pontier')",
        "finalString(s = 'nitrop')",
        "finalString(s = 'pionter')",
        "finalString(s = \"pintner\")"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 1, 4, 2, 2], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 1, 4, 2, 2], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 1, 4, 2, 2], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 1, 4, 2, 2], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0,1,2,3,4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [0,3,2,0], target = 2)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[1, 4], [2, 5]])",
        "numberOfPoints(nums = [[1, 2], [2, 4], [3, 4]])",
        "numberOfPoints(nums = [[0, 1], [1, 3], [2, 4]])",
        "numberOfPoints(nums=[[1, 4], [2, 3], [4, 6]])",
        "numberOfPoints(nums = [[1, 5], [1, 3], [2, 5]])",
        "numberOfPoints(nums = [[1, 4], [3, 5], [10, 12]])",
        "numberOfPoints(nums=[[2, 3], [3, 4], [2, 4]])",
        "numberOfPoints(nums = [[2, 2], [2, 1], [4, 5]])",
        "numberOfPoints(nums = [[2, 10], [4, 6], [1, 10], [3, 4]])"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 2, 3])",
        "maxIncreasingGroups(A = [1, 1, 2])",
        "maxIncreasingGroups(A = [1, 1, 2, 2, 3, 3])",
        "maxIncreasingGroups(A=[1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1,1,2,2])",
        "maxIncreasingGroups(A = [1, 3, 6])",
        "maxIncreasingGroups(A = [2, 3, 2])",
        "maxIncreasingGroups(A = [1, 5, 3, 6, 4])",
        "maxIncreasingGroups(A = [3,3,6,7])",
        "maxIncreasingGroups(A = [2, 3, 5, 5, 5, 6, 6, 6, 7, 7, 8])"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 4, offers = [[1, 2, 1], [3, 4, 2]])",
        "maximizeTheProfit(n = 4, offers = [[1,2,3],[2,2,5]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,10],[3,4,20],[4,5,30]])",
        "maximizeTheProfit(n = 3, offers = [[2, 1, 2], [1, 3, 3]])",
        "maximizeTheProfit(n=3, offers=[[0,1,3],[0,2,1],[2,3,1]])",
        "maximizeTheProfit(n=4, offers=[[1,2,3],[0,1,2],[1,3,5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 0, 2], [1, 2, 3], [3, 2, 3]])",
        "maximizeTheProfit(n = 7, offers = [[1, 2, 3], [2, 4, 2], [1, 5, 1], [1, 6, 2]])",
        "maximizeTheProfit(n = 4, offers = [[2, 3, 5], [1, 3, 6], [3, 4, 10]])",
        "maximizeTheProfit(n = 5, offers = [[0,1,3],[1,4,1],[0,2,2],[3,4,5],[4,5,2]])"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"L___R\")",
        "furthestDistanceFromOrigin(moves = \"L_RL__R\")",
        "furthestDistanceFromOrigin(moves = \"LL___RR\")",
        "furthestDistanceFromOrigin(moves = \"LL_RR\")",
        "furthestDistanceFromOrigin(moves = \"L_RL__RR\")",
        "furthestDistanceFromOrigin(moves = \"LRLRL__R_\")",
        "furthestDistanceFromOrigin(moves = \"LLL__RRR_L\")",
        "furthestDistanceFromOrigin(moves = \"_LR_LL\")",
        "furthestDistanceFromOrigin(moves = \"R__L__L__L\")",
        "furthestDistanceFromOrigin(moves = \"__LRR__RR___L\")"
    ],
    "sample_175": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 1, k = 2)",
        "minimumSum(n = 1, k = 2)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[2,4], [4,8]])",
        "numberOfPoints(nums = [[1,3],[4,6],[7,8]])",
        "numberOfPoints(nums = [[2,4], [4,8], [8,16]])",
        "numberOfPoints([[1,3], [2,4], [3,5]])",
        "numberOfPoints(nums = [[0,2], [1,4], [4,5]])",
        "numberOfPoints(nums = [[3,7],[4,4]])",
        "numberOfPoints(nums = [[2,4],[6,8],[7,11]])",
        "numberOfPoints([[1,3], [2,4], [6,8], [7,9], [10,12]])",
        "numberOfPoints(nums = [[2,3], [2,2], [2,4], [3,3], [5,5], [6,6], [6,7]])"
    ],
    "sample_205": [
        "minimumOperations(num = \"5200\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"0011\")",
        "minimumOperations(num = \"30200\")",
        "minimumOperations(num = \"3070\")",
        "minimumOperations(num = \"1000000000\")",
        "minimumOperations(num = \"30707\")",
        "minimumOperations(num = \"99\")",
        "minimumOperations(num = \"3000000\")",
        "minimumOperations(num = \"012\")"
    ],
    "sample_120": [
        "minimumIndex(nums = [1, 7, 3, 6, 5, 6])",
        "minimumIndex(nums = [1, 2, 3, 4, 5])",
        "minimumIndex(nums = [2, 3, 1, 4, 5])",
        "minimumIndex(nums = [2, 1, 3, 1, 1, 1, 4, 1])",
        "minimumIndex(nums = [1, 1, 1, 1, 1, 2])",
        "minimumIndex(nums = [1,2,3,1,1,3,1])",
        "minimumIndex(nums = [1,1,1,1,1,2,2,2,2,2])",
        "minimumIndex(nums = [1, 2, 3, 4, 4, 4, 4, 5, 5])",
        "minimumIndex(nums = [2, 2, 4, 5, 5, 1, 2])",
        "minimumIndex(nums = [1, 1, 3, 1, 1, 2, 3, 2, 2, 2, 2])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"L__R_L_\")",
        "furthestDistanceFromOrigin(moves = \"L__RR_L_\")",
        "furthestDistanceFromOrigin(moves = \"L_RL_L\")",
        "furthestDistanceFromOrigin(moves = \"LLR__R_\")",
        "furthestDistanceFromOrigin(moves = \"L___RR_LL\")",
        "furthestDistanceFromOrigin(moves = \"L_R_______\")",
        "furthestDistanceFromOrigin(moves = \"L_RLR\")",
        "furthestDistanceFromOrigin(moves = \"RL_L_R_\")",
        "furthestDistanceFromOrigin(moves = \"L___R_L___R_L___\")",
        "furthestDistanceFromOrigin(moves = \"L___RRRRR___\")"
    ],
    "sample_161": [
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51,71,17,42])",
        "maxSum(nums = [51,71,17,42])",
        "maxSum(nums = [51,71,17,42])",
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [10, 20])",
        "maxSum(nums = [1, 11, 22])",
        "maxSum(nums = [6, 8, 17, 25, 2])"
    ],
    "sample_160": [
        "maxSum(nums = [51,71,17,24,42])",
        "maxSum(nums = [51,71,17,42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [10, 12, 19, 14])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [68,8,100,84,8,12])",
        "maxSum(nums = [42, 33, 60])",
        "maxSum(nums = [68, 8, 100, 84, 8, 12])",
        "maxSum(nums = [10,11,22,21])",
        "maxSum(nums = [957,167,507,23,833,353,33,435,90,990])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = [\"one,two\", \"three\", \"four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two,three\", \"four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two,three\", \"four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three;four\", \"five six\"], separator = \"[,; ]\")",
        "splitWordsBySeparator(words = ['one,two,three', 'four', 'five,six'], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three.four\", \"five-six\"], separator = \"[,.]\")",
        "splitWordsBySeparator(words = [\"one, two, three\", \"four\", \"five, six\"], separator = ',')",
        "splitWordsBySeparator(words = [\"one, two\", \"three. four\", \"five,six\"], separator = \"[ ,.]\")",
        "splitWordsBySeparator(words=[\"one-two\", \"three/four\", \"five;six\"], separator=\"[-/;]\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three.four\", \"five:six\"], separator = \",:.=\")"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [5, 1, 4, 2, 2], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [5,1,4,2,2], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0,1,2,3,4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [0,1,2,3,4], target = 0)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 10, 6, 4, 8], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 0, 0], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours=[16,16,16], target=15)"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [5, 1, 4, 2, 2], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 1, 4, 2, 2], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 1, 4, 2, 2], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [], target = 0)",
        "numberOfEmployeesWhoMetTarget(hours=[5, 1, 4, 2, 2], target=6)",
        "numberOfEmployeesWhoMetTarget(hours = [], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4], target = 0)",
        "numberOfEmployeesWhoMetTarget(hours = [1], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours=[1,1,1], target=2)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5,5,4,3,2,1], target = 3)"
    ],
    "sample_171": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 4, k = 2)",
        "minimumSum(n=3, k=4)",
        "minimumSum(n = 4, k = 5)"
    ],
    "sample_159": [
        "maxSum(nums = [51,71,17,42])",
        "maxSum(nums = [51, 71, 17, 24, 42])",
        "maxSum(nums=[1,2,3,4,5])",
        "maxSum(nums= [51,71,17,42])",
        "maxSum(nums = [10, 34, 30, 5, 10, 50])",
        "maxSum(nums = [31,2,5])",
        "maxSum(nums=[22,33,44,55])",
        "maxSum(nums = [2,10,3,2,1,3])",
        "maxSum(nums = [12,34,55,23])",
        "maxSum(nums = [11, 34, 77, 55, 22, 99, 44])"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 6)",
        "canSplitArray(nums = [3, 2, 1], m = 5)",
        "canSplitArray(nums = [1, 1, 1], m = 2)",
        "canSplitArray(nums = [2, 1, 3], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 1)",
        "canSplitArray(nums = [2, 1, 2, 3], m = 5)",
        "canSplitArray(nums = [2, 1, 5, 6], m = 6)",
        "canSplitArray(nums = [5, 10, 15], m = 15)",
        "canSplitArray(nums = [2, 1, 2, 5, 7, 6, 5, 3, 5], m = 10)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [], separator = \",\")",
        "splitWordsBySeparator(words = [], separator = \",\")",
        "splitWordsBySeparator(words = [], separator = \"\")",
        "splitWordsBySeparator(words = [], separator = \"\")",
        "splitWordsBySeparator(words = [], separator = \"-\")",
        "splitWordsBySeparator(words = [], separator = \"-\")",
        "splitWordsBySeparator(words = [], separator = \"/\")",
        "splitWordsBySeparator(words = [], separator = \"foo\")",
        "splitWordsBySeparator(words = [\"aaa\", \"bbb\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"hello\"], separator = \" \")"
    ],
    "sample_172": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n=3, k=4)",
        "minimumSum(n=1, k=1)",
        "minimumSum(n = 4, k = 1)"
    ],
    "sample_228": [
        "countWays(nums = [0, 1, 2])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1,2,3,4])",
        "countWays(nums = [1, 2, 0])",
        "countWays(nums = [0,2,5])",
        "countWays(nums = [0,0,2])",
        "countWays(nums = [1,0,2,0,1])",
        "countWays(nums = [1,2,3,3])",
        "countWays(nums = [3,3,3,2,2,2,1,1,1])",
        "countWays(nums = [3,4,2,2,1])"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '0001')",
        "maximumOddBinaryNumber(s='000')",
        "maximumOddBinaryNumber(s = '00000')",
        "maximumOddBinaryNumber(s = \"00000\")",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = '1011')",
        "maximumOddBinaryNumber(s='111')"
    ],
    "sample_119": [
        "minimumIndex(nums = [1,2,2,2])",
        "minimumIndex(nums = [1, 2, 1, 2, 1, 2, 1, 2])",
        "minimumIndex(nums = [1, 1, 1, 2, 2, 2, 2])",
        "minimumIndex(nums = [1, 2, 2, 2, 1, 2, 2, 2])",
        "minimumIndex(nums = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,",
        "minimumIndex(nums = [1,2,2,2,2,2])",
        "minimumIndex(nums = [1, 1, 1, 2, 2, 2, 3])",
        "minimumIndex(nums = [0, 2, 1])",
        "minimumIndex(nums = [3, 2, 3, 2, 3, 3, 3, 3, 3])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 9, 9, 9])"
    ],
    "sample_153": [
        "canSplitArray(nums = [2, 2, 1], m = 4)",
        "canSplitArray(nums = [1,2,3], m = 3)",
        "canSplitArray(nums = [1,1,1,1], m = 4)",
        "canSplitArray(nums = [2, 1, 3], m = 5)",
        "canSplitArray(nums = [2, 1, 3], m = 5)",
        "canSplitArray(nums = [1, 1, 1], m = 2)",
        "canSplitArray(nums = [1,2,3], m = 1)",
        "canSplitArray(nums = [1,2,3,4], m = 6)",
        "canSplitArray(nums = [2,3,5,100], m = 3)",
        "canSplitArray(nums = [5,2,3,3,1,5], m = 3)"
    ],
    "sample_147": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s=\"string\")",
        "finalString(s = \"gntsr\")",
        "finalString(s = \"rintsg\")",
        "finalString(s = \"srtni\")"
    ],
    "sample_174": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1,2,3,4], m = 5)",
        "canSplitArray(nums = [1,1,1], m = 3)",
        "canSplitArray(nums = [1, 2, 3], m = 4)",
        "canSplitArray(nums = [2, 5, 10, 4], m = 7)",
        "canSplitArray(nums = [2, 3, 4, 5, 6], m = 5)",
        "canSplitArray(nums = [3,3,4,5], m = 10)",
        "canSplitArray(nums=[2,1,4], m=7)",
        "canSplitArray(nums=[1,1,2,2,2], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 3, 5, 10], m = 3)",
        "canSplitArray(nums = [2,1,5,1,9,6,7,2], m = 7)"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 2])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 2, 3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 3, 4])"
    ],
    "sample_150": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"sting\")",
        "finalString(s = \"sting\")",
        "finalString(s = \"starting\")",
        "finalString(s = 'sirting')",
        "finalString(s = \"its me\")",
        "finalString(s = 'the cat in a hat')"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 4, target = 4)",
        "minimumPossibleSum(n=3, target=6)",
        "minimumPossibleSum(n = 4, target = 11)"
    ],
    "sample_176": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n=2, k=3)",
        "minimumSum(n = 3, k = 1)"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [5, 10, 11, 9, 5], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [3, 1, 4, 3, 2, 2, 4], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [1,2,3,4], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums = [3, 1, 4, 3, 2, 2, 5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [3,1,4,1,5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [0, 1, 2, 3, 4], modulo = 2, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,4,5], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [3,4,1,2], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [3, 1, 4, 2, 5, 12, 34, 10], modulo = 4, k = 2)"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 4, 6, 8, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [2,4,6,8,10,12], k = 3)",
        "sumIndicesWithKSetBits(nums = [3, 4, 6, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [5, 4, 6, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 0, 1, 2, 3, 5], k = 3)"
    ],
    "sample_151": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = \"string\")",
        "finalString(s='string')",
        "finalString(s=\"string\")",
        "finalString(s = 'rstng')",
        "finalString(s = 'rstiang')"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 1], k = 1)",
        "sumIndicesWithKSetBits(nums=[1,2,3], k=1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 0, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 0, 1, 0, 1], k = 3)",
        "sumIndicesWithKSetBits(nums = [0,1,2], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 3, 5, 8, 13], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 0, 0, 0, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [5, 6, 8, 11, 15], k = 2)"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 2, 5, 6, 7, 10])",
        "maxIncreasingGroups(usageLimits = [1, 4, 1])",
        "maxIncreasingGroups(usageLimits = [2, 1, 3])",
        "maxIncreasingGroups(usageLimits = [3, 2, 2, 1, 1])",
        "maxIncreasingGroups(usageLimits = [3, 2, 2, 1, 5, 3, 2])",
        "maxIncreasingGroups(usageLimits = [1, 2, 1, 4, 5])",
        "maxIncreasingGroups(usageLimits = [2, 4, 1, 2, 5])",
        "maxIncreasingGroups(usageLimits = [4, 2, 1])",
        "maxIncreasingGroups(usageLimits=[2, 1, 3, 4])",
        "maxIncreasingGroups(usageLimits = [2, 3, 4, 1, 1, 5])"
    ],
    "sample_204": [
        "minimumOperations(s = \"525\")",
        "minimumOperations(s = \"0000\")",
        "minimumOperations(s = \"000\")",
        "minimumOperations(s = \"2520\")",
        "minimumOperations(s = \"0123\")",
        "minimumOperations(s = \"52225\")",
        "minimumOperations(s = \"122575\")",
        "minimumOperations(s='525')",
        "minimumOperations(s = \"725025075\")",
        "minimumOperations(s = \"525025750250000\")"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [0, 10, 6, 4, 8], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 10, 6, 4, 8, 10, 8], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 10, 6, 4, 8, 12], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 2, 3, 4, 8, 6], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 7, 5, 9, 6, 6, 5, 6], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours=[0, 100, 95, 75, 90], target=90)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 8, 12, 9, 8, 4], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 12, 4, 6], target = 8)"
    ],
    "sample_148": [
        "finalString(s = \"pointer\")",
        "finalString(s = \"pointer\")",
        "finalString(s = \"pointer\")",
        "finalString(s = \"pointer\")",
        "finalString(s = 'potter')",
        "finalString(s = \"inter\")",
        "finalString(s = \"nopter\")",
        "finalString(s = 'pintr')",
        "finalString(s = 'rintop')",
        "finalString(s = \"iiterptn\")"
    ],
    "sample_168": [
        "isAcronym(words = [\"banana\", \"apple\"], s = \"ba\")",
        "isAcronym(words = [\"nine\", \"chances\"], s = \"nc\")",
        "isAcronym(words = [\"an\", \"apple\", \"a\", \"day\", \"keeps\", \"the\", \"doctor\", \"away\"], s = \"ada\")",
        "isAcronym(words = [\"below\",\"the\",\"banana\"], s = \"btb\")",
        "isAcronym(words = [\"noun\", \"plural\", \"cat\"], s = \"np\")",
        "isAcronym(words = [\"why\", \"you\", \"do\", \"this\", \"to\", \"me\"], s = \"wydtm\")",
        "isAcronym(words = [\"happy\", \"out\"], s = \"h\")",
        "isAcronym(words = [\"banana\", \"yellow\", \"orange\"], s = \"yelba\")",
        "isAcronym(words = [\"I\", \"V\", \"E\", \"P\"], s = \"IVEP\")",
        "isAcronym(words = [\"banana\", \"gang\", \"loose\"], s = \"bglo\")"
    ],
    "sample_201": [
        "minOperations(nums = [1,5], target = 4)",
        "minOperations(nums = [1,5], target = 4)",
        "minOperations(nums = [1,5], target = 4)",
        "minOperations(nums = [3,2,2,4], target = 8)",
        "minOperations(nums = [1, 2, 3, 4], target = 12)",
        "minOperations(nums = [3, 2, 20, 5, 17], target = 8)",
        "minOperations(nums = [1, 2, 4, 8], target = 6)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 1)",
        "minOperations(nums = [2, 5], target = 6)",
        "minOperations(nums = [3, 6], target = 7)"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '0010')",
        "maximumOddBinaryNumber(s = \"011\")",
        "maximumOddBinaryNumber(s = '010010')",
        "maximumOddBinaryNumber(s = '000110')",
        "maximumOddBinaryNumber(s = \"0101010\")",
        "maximumOddBinaryNumber(s = '0011101')",
        "maximumOddBinaryNumber(s = '000101010')",
        "maximumOddBinaryNumber(s = \"1110011110\")"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = '0011')",
        "maximumOddBinaryNumber(s = \"111\")",
        "maximumOddBinaryNumber(s = \"00001\")",
        "maximumOddBinaryNumber(s = '000101')",
        "maximumOddBinaryNumber(s = \"01001\")",
        "maximumOddBinaryNumber(s='0101')",
        "maximumOddBinaryNumber(s = '000100010001')",
        "maximumOddBinaryNumber(s=\"01001101\")",
        "maximumOddBinaryNumber(s='1110100101')",
        "maximumOddBinaryNumber(s = '111101010001')"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 2, target = 7)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 4, target = 5)"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LARL\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRAA\")",
        "furthestDistanceFromOrigin(moves = \"LRA\")",
        "furthestDistanceFromOrigin(moves = \"LLLA\")",
        "furthestDistanceFromOrigin(moves = \"LARAL\")",
        "furthestDistanceFromOrigin(moves = \"LARRR\")",
        "furthestDistanceFromOrigin(moves = \"LARRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRAR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLLL\")"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 10, target = 5)",
        "minimumPossibleSum(n = 1, target = 1000)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [5, 1, 4, 2, 2], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 1, 4, 2, 2], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 0)",
        "numberOfEmployeesWhoMetTarget(hours=[5, 1, 4, 2, 2], target=6)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2,2,3,3,4,4,5,5,6,6], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [5,8,5], target = 5)"
    ],
    "sample_231": [
        "countWays(nums = [0, 1, 2])",
        "countWays(nums = [0, 1, 2])",
        "countWays(nums = [0, 2, 1])",
        "countWays(nums = [0, 1, 3])",
        "countWays(nums = [0, 1, 3])",
        "countWays(nums = [0, 1, 1])",
        "countWays(nums = [0, 2, 3, 1])",
        "countWays(nums = [0, 0, 1, 2])",
        "countWays(nums = [2, 1, 0, 3, 5])",
        "countWays(nums = [3, 1, 4, 5, 1, 0])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"L___RL__R_\")",
        "furthestDistanceFromOrigin(moves = \"L___R____L\")",
        "furthestDistanceFromOrigin(moves = \"R_R_LL\")",
        "furthestDistanceFromOrigin(moves = \"L_R_L___\")",
        "furthestDistanceFromOrigin(moves = \"LL__R_R\")",
        "furthestDistanceFromOrigin(moves = \"LLR_RLR\")",
        "furthestDistanceFromOrigin(moves = \"L_R____\")",
        "furthestDistanceFromOrigin(moves = \"L__RR___R\")",
        "furthestDistanceFromOrigin(moves = \"LLL__RRRRLLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRU_U_RRR\")"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 4, target = 7)"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [5,5,5,5])",
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [5, 5, 5, 5])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1,2,3,4])"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 2, 3], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 5)",
        "canSplitArray(nums = [1, 2, 1, 3], m = 5)",
        "canSplitArray(nums = [2, 3, 5, 7, 11], m = 12)",
        "canSplitArray(nums = [2, 3, 3, 3], m = 5)",
        "canSplitArray(nums = [1, 3, 5, 8, 9], m = 7)",
        "canSplitArray(nums = [1, 3, 4, 10], m = 7)",
        "canSplitArray(nums = [4, 2, 3, 7, 3], m = 6)",
        "canSplitArray(nums = [3, 6, 7, 1, 3], m = 10)"
    ],
    "sample_200": [
        "minOperations(nums = [1, 2], target = 3)",
        "minOperations(nums = [1, 2, 3], target = 3)",
        "minOperations(nums = [1, 2, 3, 4], target = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 12)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 12)",
        "minOperations(nums = [5, 2, 8], target = 6)",
        "minOperations(nums=[1, 2, 3, 4, 5, 6, 7], target=100)",
        "minOperations(nums = [4,2,4,1], target = 2)",
        "minOperations(nums = [5, 5, 1, 1, 1, 1], target = 5)",
        "minOperations(nums=[1, 1, 2, 2, 3, 3], target=14)"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8, 16, 32], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 7, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [3, 1, 6, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 4, 10, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 5, 2, 9, 4, 8, 7], k = 2)"
    ],
    "sample_165": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = ['banana', 'orange', 'apple'], s = 'boa')",
        "isAcronym(words = [\"abstraction\", \"polymorphism\"], s = \"ap\")",
        "isAcronym(words = [\"happy\", \"birthday\", \"to\", \"you\"], s = \"hbyt\")",
        "isAcronym(words = [\"banana\", \"analysis\"], s = \"baa\")",
        "isAcronym(words = [\"Nano\", \"Engineering\"], s = \"NE\")",
        "isAcronym(words = ['banana', 'finger'], s = 'bf')",
        "isAcronym(words = ['Keep', 'Coding', 'And', 'Learning'], s = 'KCAL')",
        "isAcronym(words = [\"banana\", \"anagram\", \"annagram\"], s = \"BAA\")",
        "isAcronym(words = ['Bat', 'Hand', 'Nap'], s = \"BHN\")"
    ],
    "sample_227": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [2, 4, 6])",
        "countWays(nums = [1, 0, 2, 3])",
        "countWays(nums = [1, 3, 4, 2, 5])",
        "countWays(nums = [0, 1, 3, 4])",
        "countWays(nums = [3, 2, 5, 1])",
        "countWays(nums = [2, 1, 4, 3, 5, 6])",
        "countWays(nums = [1, 2, 3, 4, 6, 8, 20])",
        "countWays([1,2,3,5,4,2])"
    ],
    "sample_158": [
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 24, 42])",
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [51,71,17,24,42])",
        "maxSum(nums = [10, 11, 12])",
        "maxSum(nums = [32, 33, 34, 35])",
        "maxSum(nums = [12, 44, 67])",
        "maxSum(nums = [1, 3, 34, 22, 45])"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1,3,2,3,1,3], k = 3)",
        "longestEqualSubarray(nums = [1,1,2,2,1,1], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 2, 2, 1, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 1, 1, 3], k = 1)",
        "longestEqualSubarray(nums = [1, 1, 3, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 2, 1, 2, 3, 3], k = 2)",
        "longestEqualSubarray(nums = [2, 2, 2, 3, 4, 5], k = 3)",
        "longestEqualSubarray(nums=[1, 1, 1, 2, 2, 1, 2, 1, 2], k=2)"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 3, offers = [[1, 1, 5], [1, 3, 6], [2, 2, 1]])",
        "maximizeTheProfit(n = 5, offers = [[0, 3, 5], [1, 4, 7]])",
        "maximizeTheProfit(n = 4, offers = [[0,1,2],[0,2,3],[1,3,5]])",
        "maximizeTheProfit(n = 4, offers = [[2, 3, 5], [1, 3, 2], [1, 1, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [1, 3, 4], [2, 5, 10]])",
        "maximizeTheProfit(n = 4, offers = [[2, 2, 1], [0, 1, 3], [1, 2, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [1, 3, 5], [1, 2, 6], [2, 3, 5]])",
        "maximizeTheProfit(n = 10, offers = [[2, 4, 6], [2, 6, 10], [4, 6, 10]])",
        "maximizeTheProfit(n = 10, offers = [[3, 10, 5], [2, 5, 1], [1, 4, 2], [4, 8, 3]])",
        "maximizeTheProfit(n = 10, offers = [[0,1,10], [3,4,0], [1,5,3], [3,6,1], [3,7,1], [5,6,3], [5,8,2], [8,9,1], [0,2,2], [1,3,2]])"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(x = [1, 1, 2, 2, 3, 3, 4, 4])",
        "maxIncreasingGroups(x = [4, 1, 3, 2, 5])",
        "maxIncreasingGroups(x = [1, 1, 2, 3, 3])",
        "maxIncreasingGroups(x = [3, 4, 1, 2, 5])",
        "maxIncreasingGroups(x = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3])",
        "maxIncreasingGroups(x = [3, 2, 1, 3])",
        "maxIncreasingGroups(x = [1, 1, 3, 4, 7, 10])",
        "maxIncreasingGroups(x = [4, 8, 3, 2, 4])"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 1)",
        "sumIndicesWithKSetBits(nums = [3, 1, 4, 1, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [7, 11, 13], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 0, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,4,8,16,32,64,128,256,512], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 7, 4, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 4, 6, 5, 7], k = 2)"
    ],
    "sample_207": [
        "minimumOperations(num = \"520\")",
        "minimumOperations(num = \"5200\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"250\")",
        "minimumOperations(num = \"250\")",
        "minimumOperations(num = \"2050\")",
        "minimumOperations(num = \"110\")",
        "minimumOperations(num = \"2100\")",
        "minimumOperations(num = '43250')",
        "minimumOperations(num = \"250025\")"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"LRL\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLR\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLR\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves=\"LRL\")",
        "furthestDistanceFromOrigin(moves=\"LRR\")",
        "furthestDistanceFromOrigin(moves = \"RRRLLL\")",
        "furthestDistanceFromOrigin(moves=\"LLL\")",
        "furthestDistanceFromOrigin(moves = \"RRRRLLLL\")"
    ],
    "sample_206": [
        "minimumOperations(num = \"2575\")",
        "minimumOperations(num = \"2022\")",
        "minimumOperations(num = \"5205\")",
        "minimumOperations(num = \"9999\")",
        "minimumOperations(num = \"800\")",
        "minimumOperations(num = \"34520\")",
        "minimumOperations(num = \"34\")",
        "minimumOperations(num = \"5002\")",
        "minimumOperations(num = \"777777\")",
        "minimumOperations(num = \"22\")"
    ],
    "sample_155": [
        "canSplitArray(nums = [2, 1, 3], m = 5)",
        "canSplitArray(nums = [2, 1, 3, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5], m = 6)",
        "canSplitArray(nums = [2, 3, 5, 1, 1], m = 5)",
        "canSplitArray(nums=[1, 1, 2], m=2)",
        "canSplitArray(nums = [2, 3, 3, 9], m = 10)",
        "canSplitArray(nums = [1,3,1,1,1], m = 4)",
        "canSplitArray(nums = [2, 1, 3, 2, 1, 5, 2, 1, 3], m = 4)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [5,5,5,5])",
        "countCompleteSubarrays(nums = [5, 5, 5, 5])",
        "countCompleteSubarrays(nums = [5, 5, 5, 5])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums=[5, 5, 5, 5])",
        "countCompleteSubarrays(nums=[1,2,3,3])",
        "countCompleteSubarrays(nums = [4, 5, 3, 4, 4, 5, 3, 5])",
        "countCompleteSubarrays(nums = [2, 3, 5, 4, 1, 5, 4, 3, 2])"
    ],
    "sample_202": [
        "minimumOperations(num = \"000000\")",
        "minimumOperations(num = \"00257550\")",
        "minimumOperations(num = \"00257550\")",
        "minimumOperations(num = \"001100\")",
        "minimumOperations(num = \"420\")",
        "minimumOperations(num = \"30701\")",
        "minimumOperations(num = \"10010110\")",
        "minimumOperations(num = \"001000000\")",
        "minimumOperations(num = \"172359\")",
        "minimumOperations(num = \"337702\")"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [], b = \",\")",
        "splitWordsBySeparator(a = [], b = \"\")",
        "splitWordsBySeparator(a = [], b = \"\")",
        "splitWordsBySeparator(a = [\"a\", \"b\"], b = \"c\")",
        "splitWordsBySeparator(a = [\"a,b\", \"c,d\"], b = \",\")",
        "splitWordsBySeparator(a = [\"a.b.c\"], b = \".\")",
        "splitWordsBySeparator(a = [\"banana\"], b = \"na\")",
        "splitWordsBySeparator(a=[\"michael\", \"jordan\"], b=\"an\")"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "sumIndicesWithKSetBits(nums = [2,3,4,5,6], k = 2)",
        "sumIndicesWithKSetBits(nums = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 4, 7, 2, 5, 8, 3, 6, 9], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,3,5,7,9,11], k = 1)",
        "sumIndicesWithKSetBits(nums=[1, 4, 7, 8], k=2)",
        "sumIndicesWithKSetBits(nums = [2,3,7,10,6], k = 2)",
        "sumIndicesWithKSetBits(nums = [5, 1, 2, 6, 3, 7, 9, 10], k = 3)"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '1011')",
        "maximumOddBinaryNumber(s = '1000')",
        "maximumOddBinaryNumber(s = '1000')",
        "maximumOddBinaryNumber(s = '10101')",
        "maximumOddBinaryNumber(s = '1110')",
        "maximumOddBinaryNumber(s = \"11001\")",
        "maximumOddBinaryNumber(s = '11011')",
        "maximumOddBinaryNumber(s = '00111010111111100010111')"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,3,2,3,1,3], k = 3)",
        "longestEqualSubarray(nums = [1,3,2,3,1,3], k = 3)",
        "longestEqualSubarray(nums = [1,3,2,3,1,3], k = 3)",
        "longestEqualSubarray(nums = [1, 3, 2, 3, 1, 3], k = 3)",
        "longestEqualSubarray(nums = [1, 3, 2, 3, 1, 3], k = 3)",
        "longestEqualSubarray(nums = [1,1,2,2,1,1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,1,1,1,1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 3, 3, 1, 1, 1, 1, 1], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 2, 2, 2, 2, 2, 3, 4, 5, 6, 6, 6, 6], k = 4)"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1,3,2,3,1,3], k = 3)",
        "longestEqualSubarray(nums = [1, 3, 2, 3, 1, 3], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,1], k = 0)",
        "longestEqualSubarray(nums = [1, 2, 3, 4], k = 0)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 2, 1, 2, 3], k = 1)",
        "longestEqualSubarray(nums = [1,1,2,1,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17], k = 5)",
        "longestEqualSubarray(nums=[1, 2, 1, 1, 1, 1, 2], k=3)",
        "longestEqualSubarray(nums = [1, 3, 2, 1, 4, 1, 1, 1, 1, 5, 1, 1, 2, 3, 2, 2], k = 1)"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = '0001')",
        "maximumOddBinaryNumber(s = \"0001\")",
        "maximumOddBinaryNumber(s = '0000')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = \"0111\")",
        "maximumOddBinaryNumber(s = \"101001\")",
        "maximumOddBinaryNumber(s = '111011')",
        "maximumOddBinaryNumber(s = \"1011011\")",
        "maximumOddBinaryNumber(s = \"00101111\")"
    ],
    "sample_166": [
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"boo\")",
        "isAcronym(words = [\"banana\", \"pineapple\", \"zucchini\"], s = \"baz\")",
        "isAcronym(words = [\"bad\", \"code\"], s = \"bc\")",
        "isAcronym(words = [\"banana\", \"application\", \"apocalypse\"], s = \"bap\")",
        "isAcronym(words = [\"banana\", \"manana\"], s = \"nana\")",
        "isAcronym(words = [\"banana\", \"batman\", \"apple\"], s = \"bnba\")",
        "isAcronym(words = [\"Lemon\", \"Lime\", \"Lies\"], s = \"LLL\")",
        "isAcronym(words = [\"happy\", \"monkey\", \"night\"], s = \"hn\")",
        "isAcronym(words = [\"I\", \"want\", \"to\", \"be\", \"a\", \"Coder\"], s = \"IWTBAAC\")",
        "isAcronym(words = [\"as\", \"ass\", \"as\", \"as\", \"as\"], s = \"bbbb\")"
    ],
    "sample_163": [
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51,71,17,42])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6])",
        "maxSum(nums = [10, 12, 13, 14, 15])",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [1,2,1,2])",
        "maxSum(nums = [4, 5, 6, 10])",
        "maxSum(nums = [11, 33, 22, 23, 44])",
        "maxSum(nums = [11, 20, 9, 16, 4, 5])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [2, 4, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [3, 2, 1])",
        "semiOrderedPermutation(nums = [3,1,2,4])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1,2,3,4,5])",
        "continuousSubarrays(a = [1, 2, 3, 5, 8])",
        "continuousSubarrays(a = [1, 3, 2, 2, 5, 2, 3, 7])",
        "continuousSubarrays(a = [1, 2, 2, 1])",
        "continuousSubarrays(a = [1, 3, 3, 4, 5])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6, 1, 2, 3, 4])",
        "continuousSubarrays(a = [2, 4, 5, 1, 3, 4, 6, 2, 6])",
        "continuousSubarrays(a = [4, 7, 4, 5, 7, 2, 5])",
        "continuousSubarrays(a = [4, 4, 3, 2, 2, 1, 1, 0, 0, 3, 3, 3])",
        "continuousSubarrays(a=[2, 4, 5, 4, 6, 7, 2, 2, 3, 2])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [1, 2, 3])",
        "continuousSubarrays(nums = [1, 2, 3])",
        "continuousSubarrays(nums = [1, 2, 3])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5])",
        "continuousSubarrays(nums = [1,2,3])",
        "continuousSubarrays(nums = [1, 2, 1, 2, 3])",
        "continuousSubarrays(nums = [1, 1, 2, 2, 3])",
        "continuousSubarrays(nums = [1, 2, 2, 4])",
        "continuousSubarrays(nums = [1, 3, 2, 5, 7, 4, 5])"
    ],
    "sample_8": [
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 3, queries = [[0, 2], [1, 2], [2, 1]])",
        "colorTheArray(n=1, queries=[[0,1]])",
        "colorTheArray(n = 3, queries = [[0, 2], [1, 2], [2, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [2, 1]])",
        "colorTheArray(n = 3, queries = [[0,2],[1,2],[2,1],[1,1],[0,1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [0, 2]])"
    ],
    "sample_97": [
        "maximumJumps(nums = [1,2,3], target = 3)",
        "maximumJumps(nums = [1, 2], target = 1)",
        "maximumJumps(nums = [1,2], target = 2)",
        "maximumJumps(nums = [1,2,3], target = 0)",
        "maximumJumps(nums = [1, 1], target = 2)",
        "maximumJumps(nums = [2,1,2,1,4], target = 2)",
        "maximumJumps(nums = [1,3,5,8,9,2,6,7,6,8,9], target = 5)",
        "maximumJumps(nums = [2, 4, 0, 1], target = 3)",
        "maximumJumps(nums = [10, -1, -1, -1, -1, -1, -1], target = 4)",
        "maximumJumps(nums = [1, 2, 0, 2, 0, 0], target = 1)"
    ],
    "sample_22": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABABCDCDABAB\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABABC\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABCDCD\")"
    ],
    "sample_7": [
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 5, queries = [])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 3, queries = [[0, 2], [1, 2], [1, 1], [1, 3], [0, 2]])",
        "colorTheArray(n=1, queries=[[0, 10]])"
    ],
    "sample_10": [
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0,2], [1,2], [3,1], [1,1], [2,1]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [3,1,2])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2,1,3])",
        "semiOrderedPermutation(nums = [3,2,1])",
        "semiOrderedPermutation(nums = [1,3,2])",
        "semiOrderedPermutation(nums = [4,2,3,1])",
        "semiOrderedPermutation(nums = [1,2,4,3,5])",
        "semiOrderedPermutation(nums = [1,3,5,2,4,6])",
        "semiOrderedPermutation(nums = [5,1,3,2,4])"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [2, 3, 4, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [3, 2, 5, 4], threshold = 5)",
        "longestAlternatingSubarray(nums = [3, 2, 5, 4], threshold = 5)",
        "longestAlternatingSubarray(nums = [3, 2, 5, 4], threshold = 5)",
        "longestAlternatingSubarray(nums = [3, 2, 5, 4], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 2, 4, 7], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 1, 1, 2, 3, 1, 1], threshold = 3)",
        "longestAlternatingSubarray(nums=[4, 4, 5, 2], threshold=3)",
        "longestAlternatingSubarray(nums = [3, 1, 7, 8, 3, 2, 4], threshold = 5)",
        "longestAlternatingSubarray(nums = [4,2,1,1,6,4,2,3,4], threshold = 4)"
    ],
    "sample_33": [
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"51230100000\")"
    ],
    "sample_50": [
        "smallestString(s = \"abaaa\")",
        "smallestString(s = \"baaaa\")",
        "smallestString(s = \"bbbbb\")",
        "smallestString(s = \"baab\")",
        "smallestString(s = 'abcde')",
        "smallestString(s = \"aaba\")",
        "smallestString(s = \"zabb\")",
        "smallestString(s='abbba')",
        "smallestString(s=\"abab\")",
        "smallestString(s=\"aaaaaa\")"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [5,3,1,2,3])"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)"
    ],
    "sample_118": [
        "minimumIndex(nums = [1,2,1,2,1,2,1])",
        "minimumIndex(nums = [3, 2, 3])",
        "minimumIndex(nums = [2, 1, 2, 2, 2])",
        "minimumIndex(nums = [1, 1, 2, 1, 1, 1])",
        "minimumIndex(nums = [2, 3, 2, 2, 2])",
        "minimumIndex(nums = [1, 7, 8, 1, 1, 1])",
        "minimumIndex(nums = [1, 2, 2, 2, 1, 2, 1, 1])",
        "minimumIndex(nums = [2, 3, 2, 2, 2, 2, 2, 2, 2])",
        "minimumIndex(nums = [2, 3, 1, 1, 1, 2, 1, 3, 1, 2, 2, 3])",
        "minimumIndex(nums = [2, 3, 4, 5, 5, 3, 2, 5, 3, 5, 3])"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [11, 21, 12, 6])",
        "countBeautifulPairs(nums = [2,5,1,4])",
        "countBeautifulPairs(nums = [21, 32, 63, 14])",
        "countBeautifulPairs(nums = [25, 1, 256, 8])",
        "countBeautifulPairs(nums = [55, 56, 57, 58])",
        "countBeautifulPairs(nums = [12, 23, 39, 43, 57])",
        "countBeautifulPairs(nums = [10, 12, 15, 17, 21])",
        "countBeautifulPairs(nums=[12, 15, 24, 31])",
        "countBeautifulPairs(nums = [1, 11, 3, 57])",
        "countBeautifulPairs(nums = [50, 56, 93])"
    ],
    "sample_30": [
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"51230100000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = '5123000000001')"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"leetcode\")",
        "minimizedStringLength(s = \"leetcode\")",
        "minimizedStringLength(s = \"aaabbc\")",
        "minimizedStringLength(s = \"aaabbb\")",
        "minimizedStringLength(s = \"bbacc\")",
        "minimizedStringLength(s = \"papaya\")",
        "minimizedStringLength(s = \"NBA\")"
    ],
    "sample_111": [
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums=[4,6,1,2], k=2)",
        "maximumBeauty(nums = [2, 1, 2, 4, 5], k = 2)",
        "maximumBeauty(nums = [3, 1, 9, 18, 20], k = 2)",
        "maximumBeauty(nums = [2, 2, 1, 2, 3, 3, 2, 2], k = 2)"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 3, num2 = 5)",
        "makeTheIntegerZero(num1 = 7, num2 = 3)",
        "makeTheIntegerZero(num1 = 7, num2 = 5)",
        "makeTheIntegerZero(num1 = 16, num2 = 4)",
        "makeTheIntegerZero(num1 = 4, num2 = 4)",
        "makeTheIntegerZero(num1 = 100, num2 = 4)",
        "makeTheIntegerZero(num1 = 21, num2 = 3)",
        "makeTheIntegerZero(num1 = 50, num2 = 2)",
        "makeTheIntegerZero(num1 = 33, num2 = 10)"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [3, 6, 1, 2, 5])",
        "findValueOfPartition(nums = [3,6,1,2,5])",
        "findValueOfPartition(nums = [3,6,1,2,5])",
        "findValueOfPartition(nums = [1,3,2,4])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [3, 6, 1, 9, 10])",
        "findValueOfPartition(nums = [2, 6, 4])",
        "findValueOfPartition([1, 3, 6])",
        "findValueOfPartition([4, 1, 5, 9, 10])",
        "findValueOfPartition(nums = [1, 2, 3, 10, 14])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [0, 0, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0])",
        "doesValidArrayExist(derived = [0,1,0,1,0,1,1,1,1,1])"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = 'neveroddoreven')",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = \"even\")"
    ],
    "sample_110": [
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1, 2, 3, 4], k = 3)",
        "checkArray(nums = [2, 3, 3, 2, 4], k = 1)",
        "checkArray(nums=[2, 3, 1, 1, 4], k=2)",
        "checkArray(nums = [2, 2, 2], k = 3)",
        "checkArray(nums = [1, 0, 2], k = 5)",
        "checkArray(nums = [5, 4, 3, 2], k = 2)",
        "checkArray(nums = [5, 1, 4], k = 3)",
        "checkArray(nums = [3, 2, 0, 3, 1, 3, 0, 2, 3], k = 3)"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived=[0, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "doesValidArrayExist(derived = [0,1,0,0,1,0,1])",
        "doesValidArrayExist(derived = [0, 0, 0, 1, 0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1,"
    ],
    "sample_54": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = 'kddsbncz')",
        "smallestString(s = 'kddsbncdz')",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = 'kddsbnca')",
        "smallestString(s = 'lmno')",
        "smallestString(s = \"lodz\")",
        "smallestString(s = \"abcdef\")",
        "smallestString(s = \"abcdz\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1, 2, 3, 4, 5])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3])",
        "continuousSubarrays(A = [1, 3, 2, 3, 4, 5])",
        "continuousSubarrays(A = [1, 3, 2, 4, 6, 2])",
        "continuousSubarrays(A = [5, 3, 7, 1, 8])",
        "continuousSubarrays(A = [1, 5, 3, 1, 5, 3, 1, 5, 3])",
        "continuousSubarrays(A = [1, 1, 1, 2, 2, 3, 1, 1, 1, 1])",
        "continuousSubarrays(A = [3, 2, 3, 1, 5, 1, 2])",
        "continuousSubarrays(A = [3, 1, 4, 5, 4, 2, 2, 4])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = 'aba')",
        "makeSmallestPalindrome(s = 'abb')",
        "makeSmallestPalindrome(s = \"bab\")",
        "makeSmallestPalindrome(s = \"aabb\")",
        "makeSmallestPalindrome(s = \"abca\")",
        "makeSmallestPalindrome(s = 'banana')",
        "makeSmallestPalindrome(s = \"abd\")",
        "makeSmallestPalindrome(s='bab')",
        "makeSmallestPalindrome(s = 'abzzz')",
        "makeSmallestPalindrome(s = 'aabcde')"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 3, 1])",
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 3, 6, 10, 15])",
        "findValueOfPartition(nums = [1,3,100,200,2,10])",
        "findValueOfPartition(nums = [1, 3, 100, 200, 400])",
        "findValueOfPartition(nums = [1, 3, 100, 200, 205])",
        "findValueOfPartition(nums = [2, 6, 4, 7])",
        "findValueOfPartition(nums = [2,1,3,5,6])",
        "findValueOfPartition(nums = [1, 4, 2, 12])",
        "findValueOfPartition(nums = [4, 1, 8, 5, 7])"
    ],
    "sample_51": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'jddsbncd')",
        "smallestString(s = 'abpcplea')",
        "smallestString(s=\"kddsbncd\")",
        "smallestString(s = 'jaam')",
        "smallestString(s=\"kkddsbncd\")",
        "smallestString(s = 'wxyzabcd')",
        "smallestString(s=\"xoyqzpc\")",
        "smallestString(s = 'lbhghgxz')"
    ],
    "sample_113": [
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [1, 5, 4, 2, 9, 9, 9], k = 3)",
        "maximumBeauty(nums = [1, 5, 4, 2, 9, 9, 9], k = 3)",
        "maximumBeauty(nums = [1, 5, 4, 2, 9, 9, 9], k = 3)",
        "maximumBeauty(nums = [1, 5, 4, 2, 9, 9, 9], k = 2)",
        "maximumBeauty(nums = [1,5,4,2,1], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 4)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1,2,3,4,5,6], k = 3)",
        "checkArray(nums = [1,2,3,4,5,6,7], k = 3)",
        "checkArray(nums = [1,2,2,1], k = 2)",
        "checkArray(nums = [3, 2, 1], k = 2)",
        "checkArray(nums=[1, 2, 3, 4, 5, 6], k=2)",
        "checkArray(nums = [1,2,1,1], k = 3)",
        "checkArray(nums = [1, 1, 2, 2, 2, 3], k = 3)",
        "checkArray(nums = [1, 3, 5, 4, 6], k = 2)",
        "checkArray(nums = [4, 1, 2, 5, 6], k = 3)"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 6, additionalTank = 1)",
        "distanceTraveled(mainTank=5, additionalTank=0)"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3,2,3,4,2])",
        "distinctDifferenceArray(nums = [3,2,3,4,2])",
        "distinctDifferenceArray(nums = [3,2,3,4,2])",
        "distinctDifferenceArray(nums = [3,2,3,4,2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [5, 3, 1, 2, 4])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1, 2, 3, 4, 5])",
        "continuousSubarrays(A = [1, 2, 1, 3, 4])",
        "continuousSubarrays(A = [1, 1, 2, 1, 2, 3])",
        "continuousSubarrays(A = [1,1,2,2,3,3,4])",
        "continuousSubarrays(A = [2,1,3,1,2,4])",
        "continuousSubarrays(A = [1, 2, 3, 4, 3, 2, 1, 3, 2, 1])",
        "continuousSubarrays(A = [2,4,2,4,2,4,2,4,2,4,2,4])",
        "continuousSubarrays(A = [1, 2, 3, 1, 1, 1, 2, 2, 2, 3])",
        "continuousSubarrays(A = [1, 3, 2, 2, 2, 1, 3, 2, 2, 3, 1])",
        "continuousSubarrays(A = [1, 5, 7, 6, 7, 8, 1, 9, 10])"
    ],
    "sample_6": [
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 3, queries = [[0,2],[1,2],[2,1],[1,1],[2,1]])",
        "colorTheArray(n = 2, queries = [[0,1]])",
        "colorTheArray(n = 2, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0, 100000]])"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 11, b = 2)",
        "makeTheIntegerZero(a = 5, b = 3)",
        "makeTheIntegerZero(a = 4, b = 2)",
        "makeTheIntegerZero(a = 17, b = 3)",
        "makeTheIntegerZero(a = 18, b = 5)",
        "makeTheIntegerZero(a=5, b=1)",
        "makeTheIntegerZero(a = 26, b = 1)",
        "makeTheIntegerZero(a=26, b=3)",
        "makeTheIntegerZero(a = 120, b = 4)"
    ],
    "sample_100": [
        "maximumJumps(nums = [10,13,12,14,15], target = 2)",
        "maximumJumps(nums = [1, 3, 6, 8, 12, 17], target = 3)",
        "maximumJumps(nums = [1, 3, 5, 7, 9], target = 2)",
        "maximumJumps(nums = [100,2], target = 1)",
        "maximumJumps(nums = [1, 3, 2, 5, 4, 1], target = 2)",
        "maximumJumps(nums = [1, 2, 5, 3, 2], target = 2)",
        "maximumJumps(nums = [2, 2, 0, 1, 4], target = 1)",
        "maximumJumps(nums = [2, 1, 3, 2, 4, 1, 2], target = 2)",
        "maximumJumps(nums = [2, 4, 2, 3, 4, 2, 2, 1], target = 2)",
        "maximumJumps(nums = [5,3,1,2,3,4,1,5], target = 3)"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [3,2,5,4], threshold = 5)",
        "longestAlternatingSubarray(nums = [3,2,5,4], threshold = 5)",
        "longestAlternatingSubarray(nums = [2,3,4,5], threshold = 4)",
        "longestAlternatingSubarray(nums = [2,3,4,5], threshold = 4)",
        "longestAlternatingSubarray(nums = [2,3,4,5], threshold = 4)",
        "longestAlternatingSubarray(nums = [3, 2, 5, 4], threshold = 5)",
        "longestAlternatingSubarray(nums = [3, 2, 5, 4], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5], threshold = 4)",
        "longestAlternatingSubarray(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], threshold=20)",
        "longestAlternatingSubarray(nums = [4, 5, 2, 5, 4, 1, 1, 2, 4], threshold = 2)"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 2, 1, 2, 1, 2], b = [2, 1, 2, 1, 2, 1])",
        "maxNonDecreasingLength(a = [1,2,3,4,5], b = [3,4,5,6,7])",
        "maxNonDecreasingLength(a = [1, 3, 1, 4], b = [2, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 2, 4], b = [3, 4, 2, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 100], b = [2, 3, 4, 5, 6])",
        "maxNonDecreasingLength(a = [1, 4, 5, 2, 3], b = [2, 5, 3, 1, 4])",
        "maxNonDecreasingLength(a = [1, 3, 2, 2, 3], b = [2, 1, 3, 3, 3])",
        "maxNonDecreasingLength(a = [1, 2, 3, 3, 5], b = [5, 3, 2, 1, 1])",
        "maxNonDecreasingLength(a = [1, 2, 2, 2], b = [4, 4, 2, 2])",
        "maxNonDecreasingLength(a = [4,2,4,5,2], b = [5,1,3,6,1])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums=[0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums=[1, 0, 1])"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [2,3,4,5], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [3,4,5,7,8], threshold = 4)",
        "longestAlternatingSubarray(nums = [3,2,5,4], threshold = 5)",
        "longestAlternatingSubarray(nums = [1,3,5,2,4,6], threshold = 1)",
        "longestAlternatingSubarray(nums = [3,5,7,9], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [3, 7, 2, 5, 4], threshold = 8)",
        "longestAlternatingSubarray(nums = [5,3,2,3,2,5], threshold = 4)"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [3,6,1,2,5])",
        "findValueOfPartition(nums = [1,3,2,4])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [3, 6, 10])",
        "findValueOfPartition(nums=[3, 6, 1, 2, 5])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 10])",
        "findValueOfPartition(nums = [1, 3, 2, 5, 2, 7])",
        "findValueOfPartition(nums = [1, 3, 4, 5, 10, 15])",
        "findValueOfPartition(nums = [5, 10, 1, 4, 6])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = 'baba')",
        "makeSmallestPalindrome(s = \"aabb\")",
        "makeSmallestPalindrome(s='abcd')",
        "makeSmallestPalindrome(s = \"abzy\")",
        "makeSmallestPalindrome(s = 'cbc')",
        "makeSmallestPalindrome(s=\"cda\")"
    ],
    "sample_18": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"AABCD\")",
        "minLength(s = \"AAABCDAB\")",
        "minLength(s = \"BADBADAB\")"
    ],
    "sample_99": [
        "maximumJumps(nums = [1,3,6,4,1,2], target = 2)",
        "maximumJumps(nums = [1,3,6,4,1,2], target = 2)",
        "maximumJumps(nums = [1,3,6,4,1,2], target = 2)",
        "maximumJumps(nums = [1,3,6,4,1,2], target = 2)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 0)",
        "maximumJumps(nums = [1,2,3,4,5,6,7,8,9,10,11], target = 1)",
        "maximumJumps(nums = [3, 3, 3, 3, 3], target = 2)",
        "maximumJumps(nums = [3, 2, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [5,5,6,4,1], target = 0)",
        "maximumJumps(nums = [5,2,1,1,1,2,3,1,1,4], target = 2)"
    ],
    "sample_11": [
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0,2], [1,2], [3,1], [1,1], [2,1]])"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3])",
        "countBeautifulPairs(nums = [11,21,12])",
        "countBeautifulPairs(nums = [2, 5, 11, 4])",
        "countBeautifulPairs(nums = [22, 44, 11, 33, 55])",
        "countBeautifulPairs(nums = [5, 7, 11, 12])",
        "countBeautifulPairs(nums = [21, 34, 65, 23, 11])",
        "countBeautifulPairs(nums=[21, 5, 10, 15, 22, 33])"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 3)",
        "minCost(A = [1, 2, 3], x = 3)",
        "minCost(A = [1, 2, 3], x = 4)",
        "minCost(A = [1, 2, 3, 4, 5], x = 5)",
        "minCost(A = [1, 2, 3], x = 10)",
        "minCost(A = [1, 5, 3, 2], x = 2)",
        "minCost(A = [2, 1, 3, 5, 4], x = 3)",
        "minCost(A = [5,2,4,3,4,3,5,2], x = 3)"
    ],
    "sample_98": [
        "maximumJumps(nums = [1,3,6,4,1,2], target = 2)",
        "maximumJumps(nums = [1,3,6,3,2,3,6,8,9,5], target = 5)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 3)",
        "maximumJumps(nums = [1,2,3,4,5], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 9, 2], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 8, 12, 20], target = 3)",
        "maximumJumps(nums = [1, 3, 1], target = 1)",
        "maximumJumps(nums = [1,1,1,1,1], target = 3)",
        "maximumJumps(nums = [1, 3, 5, 7, 10], target = 2)",
        "maximumJumps(nums = [1, 10, 20, 30], target = 10)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,0,1,0])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3,2,3,4,2])",
        "distinctDifferenceArray(nums = [3,2,3,4,2])",
        "distinctDifferenceArray(nums = [3,2,3,4,2])",
        "distinctDifferenceArray(nums = [3,2,3,4,2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 5])"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [11, 21, 12])",
        "countBeautifulPairs(nums = [2,5,1,4])",
        "countBeautifulPairs(nums = [11, 21, 12])",
        "countBeautifulPairs(nums = [31, 25, 72, 79, 74])",
        "countBeautifulPairs(nums = [31, 25, 72, 79, 74])",
        "countBeautifulPairs(nums = [1, 2, 5, 8])",
        "countBeautifulPairs(nums = [1,2,3,4,5])",
        "countBeautifulPairs(nums = [22, 41, 61, 62, 86, 86])",
        "countBeautifulPairs(nums = [23, 19, 21, 6, 9])"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"aabbc\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"abca\")",
        "minimizedStringLength(s = \"abccba\")",
        "minimizedStringLength(s = \"abaca\")",
        "minimizedStringLength(s = \"ababbc\")",
        "minimizedStringLength(s = \"aabbaccc\")",
        "minimizedStringLength(s = \"abbcaa\")"
    ],
    "sample_41": [
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"aabb\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"aaab\")",
        "minimumCost(s = \"bbaa\")",
        "minimumCost(s = \"baaab\")",
        "minimumCost(s = \"aa\")",
        "minimumCost(s = \"abbbbb\")",
        "minimumCost(s = \"candy\")"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1])"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1])",
        "doesValidArrayExist(derived=[1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 0])",
        "doesValidArrayExist(derived = [1,1,1,0])",
        "doesValidArrayExist(derived = [0, 1, 0, 0])",
        "doesValidArrayExist(derived = [0,1,1,1,0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])"
    ],
    "sample_52": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncz')",
        "smallestString(s = \"kddsbncx\")",
        "smallestString(s = 'kddsbnz')",
        "smallestString(s = \"kddzbncd\")",
        "smallestString(s = \"aaaaabpppqa\")",
        "smallestString(s = \"kkddsbnz\")",
        "smallestString(s = 'lcmcddh')",
        "smallestString(s = 'lddgbsa')"
    ],
    "sample_40": [
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abccbd\")",
        "minimumCost(s = \"abbba\")",
        "minimumCost(s = \"aaba\")",
        "minimumCost(s = \"101\")",
        "minimumCost(s = \"baaabb\")"
    ],
    "sample_38": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"aaab\")",
        "minimumCost(s = \"bbaa\")",
        "minimumCost(s = \"aaaa\")",
        "minimumCost(s = \"aabbaa\")",
        "minimumCost(s = \"abcdefg\")"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3,2,3,4,2])",
        "distinctDifferenceArray(nums = [3,2,3,4,2])",
        "distinctDifferenceArray(nums = [3,2,3,4,2])",
        "distinctDifferenceArray(nums = [1, 3, 1, 2, 5])",
        "distinctDifferenceArray(nums = [5, 4, 3, 5, 7])"
    ],
    "sample_53": [
        "smallestString(s = 'cbaab')",
        "smallestString(s = 'baabc')",
        "smallestString(s = 'baabcd')",
        "smallestString(s = \"aabbc\")",
        "smallestString(s = 'cbaa')",
        "smallestString(s = 'bzzzz')",
        "smallestString(s = \"babaa\")",
        "smallestString(s = \"babac\")",
        "smallestString(s = \"cabab\")",
        "smallestString(s = 'acaa')"
    ],
    "sample_109": [
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1, 2, 3], k = 2)",
        "checkArray(nums = [1,2,3], k = 3)",
        "checkArray(nums = [4, 2, 3, 1], k = 2)",
        "checkArray(nums = [1, 1, 1], k = 3)",
        "checkArray(nums = [2, 4, 5], k = 3)",
        "checkArray(nums = [2,3,3,4,2], k = 3)",
        "checkArray(nums=[2, 3, 2], k=4)",
        "checkArray(nums = [3,2,1,3,4,5], k = 3)",
        "checkArray(nums = [3, 1, 1, 1, 1, 1, 0], k = 3)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums=[1,5,4,6,2], k=1)",
        "maximumBeauty(nums=[9,9,1,5], k=4)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(a = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(a = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(a = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(a = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [5, 3, 1, 3, 2, 3])",
        "distinctDifferenceArray(a = [4, 3, 3, 5, 7])",
        "distinctDifferenceArray(a=[5, 3, 1, 2, 5])"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = \"51230100\")",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a='51230100')",
        "removeTrailingZeros(a = '51230100000')",
        "removeTrailingZeros(a = \"5123010000\")",
        "removeTrailingZeros(a = '51230001')",
        "removeTrailingZeros(a=\"5123000100\")"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = 'neveroddoreven')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'neven')",
        "makeSmallestPalindrome(s=\"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"nen\")",
        "makeSmallestPalindrome(s = \"naveen\")",
        "makeSmallestPalindrome(s = 'neve')",
        "makeSmallestPalindrome(s=\"nen\")"
    ],
    "sample_55": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = 'kddsbncz')",
        "smallestString(s = 'lazydog')",
        "smallestString(s = 'l')",
        "smallestString(s='kddsbncx')",
        "smallestString(s = 'labdac')",
        "smallestString(s=\"lodz\")",
        "smallestString(s = 'ldoezm')",
        "smallestString(s = 'kbefrdbac')"
    ],
    "sample_35": [
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"51230100000\")",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '51230100000000000000')",
        "removeTrailingZeros(num = '512301000000000000000000000000000000')"
    ],
    "sample_23": [
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABABCDCDABABCD\")",
        "minLength(s = \"ABCDABCDABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDAB\")",
        "minLength(s = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")",
        "minLength(s = \"ABABABCDCDCDCD\")",
        "minLength(s = \"ABABABABCDCDCD\")",
        "minLength(s = \"CBAABCBAAB\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '51230100000')"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 11, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 20, num2 = 3)",
        "makeTheIntegerZero(num1 = 7, num2 = 1)",
        "makeTheIntegerZero(num1 = 20, num2 = 5)",
        "makeTheIntegerZero(num1 = 6, num2 = 1)",
        "makeTheIntegerZero(num1 = 22, num2 = 3)",
        "makeTheIntegerZero(num1 = 53, num2 = 7)"
    ],
    "sample_57": [
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 1)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [3,2,5,4], t = 5)",
        "longestAlternatingSubarray(nums = [3,2,5,4], t = 4)",
        "longestAlternatingSubarray(nums = [3, 5, 7, 9], t = 9)",
        "longestAlternatingSubarray(nums=[1,2,3], t=4)",
        "longestAlternatingSubarray(nums = [1,1,2,4,6,7], t = 7)",
        "longestAlternatingSubarray(nums = [3,4,1,3,2], t = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 5, 7, 2], t = 2)",
        "longestAlternatingSubarray(nums = [1,3,6,2,8,9], t = 9)",
        "longestAlternatingSubarray(nums = [1,3,4,6,8,2,9,10], t = 7)",
        "longestAlternatingSubarray(nums = [1,3,6,11,12,13,2], t = 10)"
    ],
    "sample_102": [
        "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 2)",
        "maximumJumps(nums = [1, 2, 3], target = 1)",
        "maximumJumps(nums = [1, 3, 6, 2, 5, 4], target = 2)",
        "maximumJumps(nums = [0, 1], target = 0)",
        "maximumJumps(nums = [1, 3, 6, 7], target = 2)",
        "maximumJumps(nums = [1, 4, 1, 3, 1, 1], target = 2)",
        "maximumJumps(nums = [5], target = 10)",
        "maximumJumps(nums = [0, 10], target = 10)",
        "maximumJumps(nums = [3, 1, 4, 2], target = 4)",
        "maximumJumps(nums = [1, 4, 1, 3, 5], target = 2)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"51230100000\")",
        "removeTrailingZeros(num = \"512301000000\")",
        "removeTrailingZeros(num = \"512301000000\")"
    ],
    "sample_101": [
        "maximumJumps(nums = [1,3,6,4,1,2], target = 2)",
        "maximumJumps(nums = [1,3,6,4,1,2], target = 2)",
        "maximumJumps(nums = [1,3,6,4,1,2], target = 2)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 2)",
        "maximumJumps(nums=[1,3,6,4,1,2], target=2)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 1)",
        "maximumJumps(nums = [4,1,2,3,1,0,5], target = 3)",
        "maximumJumps(nums=[40,10,20,30,40], target=5)",
        "maximumJumps(nums = [3, 2, 1, 2, 4], target = 1)",
        "maximumJumps(nums=[1,1,2,2,3,3], target=1)"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [0, 0, 1])",
        "doesValidArrayExist(derived = [1,1,1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [1,1,1,1,1,1])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 0, 0])",
        "doesValidArrayExist(derived = [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1,0,1,1,1,0,0,0,1,1,0,1,0])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums=[1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0,0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums=[1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0])"
    ],
    "sample_19": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABABCDCDABAB\")",
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABABCDCDABCD\")",
        "minLength(s = \"BABAABCD\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"level\")",
        "makeSmallestPalindrome(s = 'level')"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4, 5])"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums=[1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,0])"
    ],
    "sample_116": [
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [1, 5, 4, 2, 9, 9, 9], k = 2)",
        "maximumBeauty(nums = [1, 1, 1, 1, 3], k = 1)"
    ],
    "sample_117": [
        "minimumIndex(nums = [1, 2, 2, 2])",
        "minimumIndex(nums = [1,2,2,2])",
        "minimumIndex(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "minimumIndex(nums = [1, 1, 1, 1, 1, 1])",
        "minimumIndex(nums = [1, 2, 1, 0])",
        "minimumIndex(nums = [1,2,3,4,5,6,7])",
        "minimumIndex(nums = [1, 1, 1, 2, 2, 3, 3, 3])",
        "minimumIndex(nums = [2, 2, 1, 1, 2, 2, 1, 1])",
        "minimumIndex(nums = [2, 5, 3, 1, 5, 2])",
        "minimumIndex(nums = [2, 2, 3, 4, 4, 4, 4, 2])"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 4)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 11, num2 = 2)",
        "makeTheIntegerZero(num1 = 6, num2 = 3)",
        "makeTheIntegerZero(num1 = 7, num2 = 5)",
        "makeTheIntegerZero(num1 = 2, num2 = 2)"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [11, 21, 12])",
        "countBeautifulPairs(nums = [11, 21, 12])",
        "countBeautifulPairs(nums = [2,5,1,4])",
        "countBeautifulPairs(nums = [2,5,1,4])",
        "countBeautifulPairs(nums=[2,5,1,4])",
        "countBeautifulPairs(nums = [3, 2, 5, 2, 7])"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 15, num2 = 4)",
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1=10, num2=3)",
        "makeTheIntegerZero(num1 = 24, num2 = 4)",
        "makeTheIntegerZero(num1 = 22, num2 = 1)",
        "makeTheIntegerZero(num1=14, num2=3)"
    ],
    "sample_20": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDABCDABCDABCDABCD\")",
        "minLength(s = \"ACBDCDAB\")",
        "minLength(s = \"AB\")",
        "minLength(s = \"ABFCDEABCD\")",
        "minLength(s = \"CBAABC\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [1, 5, 4, 2, 3], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "maximumBeauty(nums = [1, 4, 6], k = 3)",
        "maximumBeauty(nums = [3, 4, 5, 6, 7], k = 1)",
        "maximumBeauty(nums = [1, 5, 1, 2, 8, 3, 7, 4], k = 4)"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [2,5,1,4])",
        "countBeautifulPairs(nums = [2,5,1,4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [11,21,12])",
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(nums = [1,2,3,4])",
        "countBeautifulPairs(nums = [21, 10, 4])",
        "countBeautifulPairs(nums = [21, 20, 13])",
        "countBeautifulPairs(nums=[13, 31, 30])",
        "countBeautifulPairs(nums=[21, 33, 45, 51])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 1)",
        "makeTheIntegerZero(num1 = 20, num2 = 3)",
        "makeTheIntegerZero(num1 = 20, num2 = 5)",
        "makeTheIntegerZero(num1 = 13, num2 = 3)",
        "makeTheIntegerZero(num1 = 14, num2 = 2)",
        "makeTheIntegerZero(num1 = 34, num2 = 3)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = 'neveroddoreven')",
        "makeSmallestPalindrome(s = 'neveroddoreven')",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"nen\")",
        "makeSmallestPalindrome(s = 'noven')",
        "makeSmallestPalindrome(s = \"nevin\")"
    ],
    "sample_37": [
        "minimumCost(s = \"aabb\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"aaa\")",
        "minimumCost(s=\"aba\")",
        "minimumCost(s = \"abbab\")",
        "minimumCost(s = \"aabbaab\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,0])",
        "numberOfGoodSubarraySplits(nums = [1,1])",
        "numberOfGoodSubarraySplits(nums=[0,1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums=[1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 0, 1, 0, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,0,0,1,0,1,1,1,0,0,1,0,1,1,1,1,0,1,1,0,0,0])"
    ],
    "sample_105": [
        "checkArray(nums = [1, 2, 3, 4], k = 3)",
        "checkArray(nums = [1,2,3,4], k = 2)",
        "checkArray(nums = [1, 1, 2], k = 3)",
        "checkArray(nums=[2,2,2,2,2,2], k=3)",
        "checkArray(nums = [1,2,2,3,1,4], k = 2)",
        "checkArray(nums = [3, 2, 4, 1, 2, 3, 5], k = 3)",
        "checkArray(nums = [2, 2, 3, 5, 3, 2], k = 5)",
        "checkArray(nums = [2, 3, 3, 2, 4, 5], k = 6)",
        "checkArray(nums = [1, 2, 3, 4, 10, -1], k = 4)",
        "checkArray(nums = [5, 8, 2, 4, 5, 1, 6], k = 3)"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [3,1,2])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [1, 3, 4, 2, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [1, 5, 4, 3, 2])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1,2,3,4], k = 2)",
        "checkArray(nums=[2, 3, 1, 1, 4], k=2)",
        "checkArray(nums = [3, 0, 1, 2, 0], k = 3)",
        "checkArray(nums = [4, 1, 2, 4], k = 2)",
        "checkArray(nums = [2,1,2,1,2], k = 2)",
        "checkArray(nums=[1,2,3,3,2,1], k=3)",
        "checkArray(nums = [2, 3, 5, 4, 1, 0, 0, 0, 0, 0], k = 3)",
        "checkArray(nums=[1,3,2,1,2,1,2], k = 3)",
        "checkArray(nums = [1, 4, 5, 2, 5, 0, 3, 4, 4, 0], k = 3)"
    ],
    "sample_39": [
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abccbd\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"baa\")",
        "minimumCost(s = \"abca\")",
        "minimumCost(s = \"abca\")",
        "minimumCost(s = \"aabbaa\")",
        "minimumCost(s = \"0100\")",
        "minimumCost(s = \"aabbbaa\")"
    ],
    "sample_65": [
        "findValueOfPartition(a = [1, 3, 2, 4])",
        "findValueOfPartition(a = [1, 5, 3, 2])",
        "findValueOfPartition(a = [1, 4, 7])",
        "findValueOfPartition(a = [2, 4, 1, 8])",
        "findValueOfPartition(a = [3, 1, 9, 7, 2])",
        "findValueOfPartition(a = [2, 2, 1])",
        "findValueOfPartition(a = [3, 5, 1, 9, 7])",
        "findValueOfPartition(a = [2, 6, 1, 7, 3])",
        "findValueOfPartition(a = [1, 5, 3, 6, 7, 2])",
        "findValueOfPartition(a = [4, 2, 7, 5, 6, 10, 9])"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1,1,0])",
        "doesValidArrayExist(derived = [1, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 0])",
        "doesValidArrayExist(derived = [0, 0, 1, 1, 1, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0])"
    ],
    "sample_106": [
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1, 2, 1, 0, 1], k = 3)",
        "checkArray(nums = [1, 2, 1, 0, 0, 0, 1], k = 4)",
        "checkArray(nums = [1,0,0,1,0,1], k = 2)",
        "checkArray(nums = [1, 0, 1, 1, 0], k = 3)",
        "checkArray(nums=[1, 0, 1], k=2)",
        "checkArray(nums=[1,0,0,1], k=1)",
        "checkArray(nums=[2,1,1,0,1], k=2)",
        "checkArray(nums = [1,0,2,3,0,1,2], k = 3)",
        "checkArray(nums = [4, 7, 8, 1, 3], k = 4)"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [2, 3, 4, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3], threshold = 4)",
        "longestAlternatingSubarray(nums = [1,2,3], threshold = 100)",
        "longestAlternatingSubarray(nums=[3,4,5,6], threshold=4)",
        "longestAlternatingSubarray(nums=[4, 5, 1, 2, 3], threshold=4)",
        "longestAlternatingSubarray(nums = [1, 5, 8], threshold = 6)",
        "longestAlternatingSubarray(nums = [3, 5, 4, 7, 1], threshold = 4)",
        "longestAlternatingSubarray(nums = [3, 9, 2], threshold = 11)"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [11, 21, 12])",
        "countBeautifulPairs(nums = [11, 21, 12])",
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(nums=[2, 5, 1, 4])",
        "countBeautifulPairs(nums = [42, 56, 14])",
        "countBeautifulPairs(nums = [22, 44, 66, 88])",
        "countBeautifulPairs(nums = [35, 1, 17, 38, 39])",
        "countBeautifulPairs(nums = [2, 3, 5, 7, 11, 13])",
        "countBeautifulPairs(nums = [23,45,67,32,89])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], t = 5)",
        "longestAlternatingSubarray(nums = [1,3,5,7], t = 4)",
        "longestAlternatingSubarray(nums = [3, 4, 5], t = 5)",
        "longestAlternatingSubarray(nums=[1,2,3,4], t=0)",
        "longestAlternatingSubarray(nums = [10, 1, 2, 3, 4], t = 10)",
        "longestAlternatingSubarray(nums = [3,1], t = 4)",
        "longestAlternatingSubarray(nums = [4,8,5,7,6], t = 4)",
        "longestAlternatingSubarray(nums = [2, 1, 1, 3, 5], t = 5)",
        "longestAlternatingSubarray(nums=[2, 4, 1], t=6)",
        "longestAlternatingSubarray(nums = [1,3,5,6,8,5,13,7,21,9], t = 10)"
    ],
    "sample_36": [
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abccbd\")",
        "minimumCost(s = \"baa\")",
        "minimumCost(s = \"bba\")",
        "minimumCost(s = \"aaabb\")",
        "minimumCost(s = \"1011\")",
        "minimumCost(s = \"011101\")"
    ],
    "sample_21": [
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABCDABCDABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDAB\")",
        "minLength(s = \"ABCDABCDAB\")",
        "minLength(s = \"ABABACDCD\")",
        "minLength(s = \"ABCDABCABCABCD\")",
        "minLength(s = \"ABABABABABABABABABABABAB\")",
        "minLength(s = \"ABCDAABBCC\")",
        "minLength(s = \"ABCDBCCABCD\")",
        "minLength(s = \"CCBABBAACCC\")"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums=[1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,0,0])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,0,0,0,1,0,1,0,0,1,1])"
    ],
    "sample_9": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 2, queries = [[0, 1]])",
        "colorTheArray(n = 2, queries = [[0, 2], [1, 1]])",
        "colorTheArray(n = 3, queries = [[0, 2], [1, 2], [2, 2]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 3, 2, 1], nums2 = [2, 2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2, 1], nums2 = [2, 2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2], nums2 = [2, 3])",
        "maxNonDecreasingLength(nums1 = [1, 3], nums2 = [2, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [1, 3, 3])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [4, 4, 5])",
        "maxNonDecreasingLength(nums1 = [2, 2, 2, 2], nums2 = [1, 1, 1, 1])",
        "maxNonDecreasingLength(nums1 = [2,4,5,4], nums2 = [1,2,3,7])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 2, 4])",
        "maxNonDecreasingLength(nums1=[4, 6, 5], nums2=[2, 1, 4])"
    ],
    "sample_115": [
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [1, 5, 4, 2, 3], k = 1)",
        "maximumBeauty(nums = [1,5,4,2,3], k = 2)",
        "maximumBeauty(nums = [1, 5, 4, 6, 2], k = 1)",
        "maximumBeauty(nums = [1, 5, 5, 2, 6], k = 3)",
        "maximumBeauty(nums = [1,2,3,4,5,6], k = 2)",
        "maximumBeauty(nums = [1, 5, 7, 9, 10], k = 4)",
        "maximumBeauty(nums = [1, 5, 3, 7, 8, 9], k = 4)",
        "maximumBeauty(nums = [1,5,5,2,8,1,1,1,5], k = 3)",
        "maximumBeauty(nums = [5, 20, 1, 19, 3, 5, 15], k = 2)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [3,6,1])",
        "findValueOfPartition(nums = [1,3,100,200,201,202])",
        "findValueOfPartition(nums = [3,6,7,1])",
        "findValueOfPartition(nums = [1,2,3,4])",
        "findValueOfPartition(nums=[1,3,1])",
        "findValueOfPartition(nums = [2, 1, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 5, 7, 11])",
        "findValueOfPartition(nums = [2, 7, 5, 9, 8])",
        "findValueOfPartition(nums = [4, 1, 8, 10, 3, 7, 14, 9])",
        "findValueOfPartition(nums=[4,2,4,4,4,6,4,6,4])"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1,3,2,4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [3,6,9,1])",
        "findValueOfPartition(nums = [3, 6, 1])",
        "findValueOfPartition(nums = [2,1,3,4])",
        "findValueOfPartition(nums = [1,3,4,5])",
        "findValueOfPartition(nums = [1,3,2,4,7,5])",
        "findValueOfPartition(nums = [2, 1, 3, 4, 5])",
        "findValueOfPartition(nums = [10,2,3,4,5])",
        "findValueOfPartition(nums = [3,6,10,7,9,1])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])",
        "semiOrderedPermutation(nums = [1, 3, 4, 2, 5])"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2,4,1,3])",
        "semiOrderedPermutation(nums = [3,1,2])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])",
        "semiOrderedPermutation(nums = [3,2,1])",
        "semiOrderedPermutation(nums = [1,2,5,3,4])"
    ]
}