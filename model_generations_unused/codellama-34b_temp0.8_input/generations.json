{
    "sample_167": [
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"multi\", \"dimensional\", \"programming\"], s = \"mdp\")",
        "isAcronym(words = [\"qwerty\", \"uiop\", \"asdf\"], s = \"qwuasdf\")",
        "isAcronym(words = [\"bark\", \"bark\", \"bite\"], s = \"bark\")",
        "isAcronym(words = [\"C\", \"s\"], s = \"S\")",
        "isAcronym(words=[\"university\", \"of\", \"toronto\"], s = \"UoT\")",
        "isAcronym(words = [\"Paradise\", \"Hotel\", \"and\", \"Casino\"], s = \"PHPC\")",
        "isAcronym(words = [\"ball\", \"paddle\", \"bat\"], s = \"bob\")",
        "isAcronym(words=[\"asdasd\", \"asd\", \"d\"], s=\"ASDD\")",
        "isAcronym(words = [\"wine\", \"ham\", \"and\", \"cheese\"], s = \"wineham\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums=[1, 2, 3, 4, 5], m=2, k=0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [0, 1, 2, 3, 4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 2, 1, 2, 3], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [9,3,9,3,9], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1,3,2,2,1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [0,1,2,0,0,0,1,2,0,1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,3,1,2,1,3,3,1,2,1,3], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [3, 5, 1, 1, 7, 3, 4], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [2,3,4,5,5,3,4,4,2,5,4,4,3], m = 2, k = 1)"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1,5],[2,3],[7,9]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4]])",
        "numberOfPoints(nums = [[1,3],[2,4],[1,5]])",
        "numberOfPoints(nums = [[1,3], [2,4], [1,3]])",
        "numberOfPoints(nums = [[1,4], [3,5], [6,9]])",
        "numberOfPoints(nums = [[2, 7], [8, 10]])",
        "numberOfPoints(nums = [[0, 3], [4, 8], [5, 7]])",
        "numberOfPoints(nums = [[1,3], [2,6], [3,6], [4,6]])",
        "numberOfPoints(nums = [[1,2], [1,3], [2,2], [1,4]])",
        "numberOfPoints(nums = [[1,3],[3,4],[5,8],[10,14],[15,17],[18,20]])"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = ['easy-problem'], separator = '-')",
        "splitWordsBySeparator(words = [\"easy problem\"], separator = \" \")",
        "splitWordsBySeparator(words = ['easy-problem'], separator = \"-\")",
        "splitWordsBySeparator(words=[\"easy_problem\"], separator=\"_\")",
        "splitWordsBySeparator(words = ['This', 'is', 'an', 'easy', 'problem'], separator = ' ')"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 5], [1, 5], [3, 4]])",
        "numberOfPoints(nums = [[1, 4], [3, 4], [1, 2]])",
        "numberOfPoints(nums = [[1, 3], [3, 6]])",
        "numberOfPoints(nums = [[1, 4], [2, 5], [3, 6], [4, 7]])",
        "numberOfPoints(nums = [[1, 2], [1, 3], [3, 5]])",
        "numberOfPoints(nums = [[0, 2], [0, 2], [1, 2]])",
        "numberOfPoints(nums = [[0, 1], [0, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1,3], [3,4], [5,7], [6,9]])",
        "numberOfPoints(nums = [[0,10],[1,11],[2,12],[3,13],[4,14],[5,15],[6,16]])",
        "numberOfPoints(nums = [[0, 1], [3, 4], [7, 8], [4, 5], [9, 10]])"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2])",
        "countCompleteSubarrays(nums = [1,2,1,2,1])",
        "countCompleteSubarrays(nums = [1, 1, 2, 1, 3, 2])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one two\", \"three\", \"four five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one,two,three', 'four,five,six'], separator = ',')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = \",\")",
        "splitWordsBySeparator(words = ['one two', 'three four five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one two\", \"three\", \"four five six\"], separator = ' ')",
        "splitWordsBySeparator(words=['one', 'two,three', 'four,five,six'], separator = ',')"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 1, 2, 3])",
        "maxIncreasingGroups(u = [1, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 5])",
        "maxIncreasingGroups(u = [1, 2, 4, 7])",
        "maxIncreasingGroups(u = [1, 2, 2, 3, 4, 4])",
        "maxIncreasingGroups(u = [1,2,5])",
        "maxIncreasingGroups(u = [5, 4, 3, 2, 1, 2])",
        "maxIncreasingGroups(u = [1, 3, 3, 3, 5, 8, 10, 12, 19])",
        "maxIncreasingGroups(u = [1, 3, 5, 6, 8, 4, 4, 4])",
        "maxIncreasingGroups(u = [0,1,1,0,0,0,1,0,0,1])"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [4,2,1,3], x = 1)",
        "minAbsoluteDifference(nums = [1,3,6,10,15], x = 2)",
        "minAbsoluteDifference(nums=[3, 8, -10, 23, 19, -4, -14, 27], x=3)",
        "minAbsoluteDifference(nums = [1,1,3,3], x = 2)",
        "minAbsoluteDifference(nums = [3,8,1,3], x = 3)",
        "minAbsoluteDifference(nums = [5,11,9], x = 2)",
        "minAbsoluteDifference(nums = [1, 7, 5, 2, 3, 6], x = 3)",
        "minAbsoluteDifference(nums = [1,3,5,7,8,20], x = 2)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [0, 1, 2, 3], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 0, 0, 0, 1, 0, 0, 1], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [2, 7, 2, 2, 1, 2, 4], modulo = 4, k = 1)",
        "countInterestingSubarrays(nums=[0, 2, 1, 4, 6, 7, 0], modulo=2, k=0)",
        "countInterestingSubarrays(nums = [2, 3, 4, 2, 5, 6, 4, 8, 0, 7, 9], modulo = 5, k = 0)"
    ],
    "sample_152": [
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 2)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 15)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 6)",
        "canSplitArray(nums = [1,2,3,4,5], m = 3)",
        "canSplitArray(nums = [1, 2, 3], m = 0)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 11)",
        "canSplitArray(nums = [1,2,3], m = 3)",
        "canSplitArray(nums = [2,1,2,1,2], m = 5)",
        "canSplitArray(nums = [3,2,1,4], m = 4)",
        "canSplitArray(nums = [10, 3, 5, 6, 7, 1], m = 10)"
    ],
    "sample_169": [
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"QBF\")",
        "isAcronym(words = [\"abc\", \"xyz\"], s = \"ax\")",
        "isAcronym(words = [\"x\", \"y\", \"z\"], s = \"xyz\")",
        "isAcronym(words=[\"Ruby\", \"on\", \"Rails\"], s=\"ROR\")",
        "isAcronym(words = [\"Air\", \"Bus\", \"Car\"], s = \"ABC\")",
        "isAcronym(words = [\"What\", \"is\", \"your\", \"name\"], s = \"WHYN\")",
        "isAcronym(words = [\"turbo\", \"boost\", \"free\"], s = \"TBF\")",
        "isAcronym(words = [\"Kh\",\"ar\",\"az\",\"a\"], s = \"KAZA\")"
    ],
    "sample_121": [
        "minimumIndex(nums = [3,1,2,3])",
        "minimumIndex(nums = [3,1,2,3])",
        "minimumIndex(nums = [3,1,2,3])",
        "minimumIndex(nums = [3,1,2,3])",
        "minimumIndex(nums = [3,4,5,1,2])",
        "minimumIndex(nums = [3, 1, 2, 1, 3])",
        "minimumIndex(nums = [3, 4, 4, 2, 3, 1, 3, 3])",
        "minimumIndex(nums = [3,2,1,2,3,4])",
        "minimumIndex(nums = [2, 1, 5, 2, 4, 6, 7, 3, 4])",
        "minimumIndex(nums = [2, 2, 4, 2, 4, 1, 3, 4, 2, 5])"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 3, offers = [[1, 2, 10], [2, 3, 20], [3, 4, 5]])",
        "maximizeTheProfit(n = 1, offers = [[1, 2, 9], [2, 3, 8]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 1], [2, 3, 1]])",
        "maximizeTheProfit(n = 4, offers = [[1, 4, 10], [3, 5, 2]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 7], [2, 3, 2], [3, 4, 1]])",
        "maximizeTheProfit(n = 4, offers = [[1, 3, 2], [2, 4, 5], [0, 2, 10], [3, 4, 20]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,5],[2,4,1],[3,5,2],[4,5,3]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 1], [2, 4, 1], [2, 4, 2], [4, 5, 3]])",
        "maximizeTheProfit(n = 3, offers = [[1, 5, 8], [2, 7, 2], [3, 5, 3]])",
        "maximizeTheProfit(n = 10, offers = [[0, 5, 1], [2, 6, 3], [3, 9, 5], [5, 8, 2], [6, 10, 4]])"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [])",
        "maximumTripletValue(nums = [1, 0, 0])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6])",
        "maximumTripletValue(nums = [1, -1, -1])",
        "maximumTripletValue(nums = [1, -1, 2, -2, 3, -3])",
        "maximumTripletValue(nums = [10000000, 1, 10000000])"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"LL__RR\")",
        "furthestDistanceFromOrigin(moves = \"LLL_RRR\")",
        "furthestDistanceFromOrigin(moves = \"R__R_L\")",
        "furthestDistanceFromOrigin(moves = \"R__L_L_\")",
        "furthestDistanceFromOrigin(moves = \"RRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LRL_LRL\")",
        "furthestDistanceFromOrigin(moves = \"LLR__RR\")",
        "furthestDistanceFromOrigin(moves = \"R__LLRR\")",
        "furthestDistanceFromOrigin(moves = \"_____L____R____\")",
        "furthestDistanceFromOrigin(moves = \"RL__L_R\")"
    ],
    "sample_149": [
        "finalString(s = \"string\")",
        "finalString(s = \"sting\")",
        "finalString(s = \"singing\")",
        "finalString(s = \"strigni\")",
        "finalString(s = \"rsting\")",
        "finalString(s = \"tinsign\")",
        "finalString(s = 'pir')",
        "finalString(s = \"sprinting\")",
        "finalString(s = \"This is a simple test\")",
        "finalString(s = \"nriring\")"
    ],
    "sample_162": [
        "maxSum(nums = [12, 345, 6, 78, 9])",
        "maxSum(nums = [321, 432, 543, 654, 765, 876, 987])",
        "maxSum(nums = [98, 88])",
        "maxSum(nums = [7, 29, 49, 88])",
        "maxSum(nums = [95, 91, 88, 89, 88])",
        "maxSum(nums = [29, 86, 71, 71])",
        "maxSum(nums = [72, 93, 55, 39, 81, 42])",
        "maxSum(nums = [20, 9, 18, 55, 92])",
        "maxSum(nums = [28, 10, 6, 3, 17, 11, 9, 27])",
        "maxSum(nums = [22, 90, 73, 23, 8, 32, 43, 87, 11, 4])"
    ],
    "sample_230": [
        "countWays(nums = [1, 2])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 1])",
        "countWays(nums = [1, 1])",
        "countWays(nums = [2, 4])",
        "countWays(nums = [5, 4, 3])",
        "countWays(nums=[2, 3, 4])",
        "countWays(nums=[-1, 0, 1])",
        "countWays(nums = [2, 1, 3, 3])",
        "countWays(nums=[2,2,1,1,1])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 10, target = 10)",
        "minimumPossibleSum(n=2, target=1)",
        "minimumPossibleSum(n = 5, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 2, offers = [[1, 2, 2], [2, 3, 4]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 50], [2, 3, 30]])",
        "maximizeTheProfit(N = 3, offers = [[0, 0, 1], [1, 1, 1], [1, 2, 1]])",
        "maximizeTheProfit(N = 3, offers = [[0, 1, 2], [0, 2, 5]])",
        "maximizeTheProfit(N = 4, offers = [[2, 4, 1], [1, 3, 1], [3, 4, 1]])",
        "maximizeTheProfit(N = 3, offers = [[0, 1, 1], [0, 3, 1], [1, 2, 1]])",
        "maximizeTheProfit(N = 4, offers = [[0, 1, 10], [1, 2, 15], [2, 4, 20]])",
        "maximizeTheProfit(N = 5, offers = [[0, 1, 1], [1, 3, 2], [3, 4, 4]])",
        "maximizeTheProfit(N = 5, offers = [[2, 3, 2], [3, 5, 2], [4, 5, 2]])",
        "maximizeTheProfit(N = 10, offers = [[1, 10, 1], [1, 3, 2], [3, 5, 3], [3, 7, 4], [5, 10, 5]])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 1, offers = [[1, 1, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 5, 10], [1, 4, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 2], [1, 2, 4], [2, 2, 1]])",
        "maximizeTheProfit(n = 6, offers = [[1, 6, 7], [2, 5, 6], [3, 4, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 2], [1, 5, 4], [2, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 4, 8], [2, 3, 12], [1, 3, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 4], [2, 4, 4], [2, 5, 6], [4, 5, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 4, 3], [2, 4, 6], [4, 4, 10], [3, 5, 9]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 8], [1, 4, 7], [2, 4, 1], [0, 2, 7], [2, 3, 8]])",
        "maximizeTheProfit(n = 10, offers = [[1, 10, 5], [2, 10, 2], [4, 10, 4], [6, 10, 2], [3, 8, 3], [6, 8, 5], [7, 8, 5], [3, 9, 4]])"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 60)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 14], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 5, 9], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [8,10,12], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 1, 4, 3], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4, 12], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [54, 56, 37, 21, 51], target = 60)",
        "numberOfEmployeesWhoMetTarget(hours = [21, 37, 42, 21, 28, 18, 29, 22], target = 30)"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,4])",
        "countCompleteSubarrays(nums = [1,1,2,2,3,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,1,2,2,3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 1, 1])",
        "countCompleteSubarrays(nums = [2,2,2,2,2,2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 4, 5, 3, 1])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 3, 5])",
        "countWays(nums = [0, 0, 1])",
        "countWays(nums = [-1, 2, 1])",
        "countWays(nums = [0, 1, 2, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])",
        "countWays(nums = [3, 4, 6, 7])",
        "countWays(nums = [2, 0, 2, 0])"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [2, 3, 5, 4])",
        "maxIncreasingGroups(usageLimits = [3, 3, 3, 3, 3, 3, 3, 3])",
        "maxIncreasingGroups(usageLimits = [8, 2, 1])",
        "maxIncreasingGroups(usageLimits = [10, 2, 10, 2, 10])",
        "maxIncreasingGroups(usageLimits = [5, 1, 3, 5, 3])",
        "maxIncreasingGroups(usageLimits = [5, 15, 10, 5, 5])",
        "maxIncreasingGroups(usageLimits = [2, 2, 1, 4, 4, 4, 3, 3, 3])",
        "maxIncreasingGroups(usageLimits = [1, 2, 1, 1, 3, 5, 8])",
        "maxIncreasingGroups(usageLimits = [10, 8, 5, 7, 3, 6, 2, 4, 1, 9])",
        "maxIncreasingGroups(usageLimits = [1, 5, 2, 6, 5, 8, 3, 9, 10, 11])"
    ],
    "sample_173": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 2, k = 6)"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 2, 3], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 2], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [3, 2, 1], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 1, 1, 1, 1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 6, 4, 2], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [2,2,2,3,3], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [4,5,1,3,2], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2,4,5,3,1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [3, 3, 2, 2, 2, 3, 3, 2], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [3,2,4,5,3,3], m = 2, k = 1)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [2,1,2,1,2])",
        "countCompleteSubarrays(nums = [1,2,3,4,1,2,3,4,1,2])",
        "countCompleteSubarrays(nums = [1, 1, 2, 1])",
        "countCompleteSubarrays(nums = [1,1,2,2,3,1,1,2,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 4, 3, 2, 1, 5])",
        "countCompleteSubarrays(nums = [2, 1, 2, 1, 4, 2, 1, 3, 2, 1])",
        "countCompleteSubarrays(nums = [5, 1, 5, 2, 1, 4, 6, 1, 6])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 3, 4, 3, 2, 4, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 4, 1, 5, 4, 1, 3, 4, 1, 2, 2, 1, 3, 4, 1, 5, 4, 1])"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1,1,1,1,1], k = 0)",
        "longestEqualSubarray(nums = [1,1,1,1,1], k = 1)",
        "longestEqualSubarray(nums = [1, 1, 1, 1, 1], k = 1)",
        "longestEqualSubarray(nums = [1,1,1,1,1,1], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,4,3,2,1,1,3], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 1, 3], k = 3)",
        "longestEqualSubarray(nums = [5,1,2,3,3], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 1, 2, 3, 2, 2], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,1,1,1,1,2,3,1,1,1,1,2,1,1,1,1], k = 1)",
        "longestEqualSubarray(nums = [5, 6, 5, 5, 4, 4, 3, 4, 2, 3, 4], k = 1)"
    ],
    "sample_170": [
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"QBF\")",
        "isAcronym(words = [\"banana\", \"orange\"], s = \"bo\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hEW\")",
        "isAcronym(words = [\"this\", \"is\", \"not\", \"a\", \"acronym\"], s = \"TINA\")",
        "isAcronym(words = [\"Deep\", \"Learning\"], s = \"DG\")",
        "isAcronym(words = [\"rabbit\", \"bear\"], s = \"rabbear\")",
        "isAcronym(words = [\"Sports\", \"News\"], s = \"sports\")",
        "isAcronym(words = [\"Elephant\", \"Shark\", \"Leopard\"], s = \"ESL\")",
        "isAcronym(words = [\"pancake\", \"mixer\", \"juicer\", \"extractor\"], s = \"PMJE\")",
        "isAcronym(words = [\"Music\", \"Harmony\", \"Rhythm\", \"Melody\"], s = \"HM\")"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '100')",
        "maximumOddBinaryNumber(s = '100')",
        "maximumOddBinaryNumber(s = '1100')",
        "maximumOddBinaryNumber(s = '0100')",
        "maximumOddBinaryNumber(s = '11000')",
        "maximumOddBinaryNumber(s = '0111')",
        "maximumOddBinaryNumber(s = \"00111\")",
        "maximumOddBinaryNumber(s = '10010010001000')"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 3, 4, 5])",
        "countWays(nums = [1, 1, 2, 3])",
        "countWays(nums = [3, 2, 1])",
        "countWays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countWays(nums = [3, 3, 5])",
        "countWays(nums = [3, 1, 3, 3])",
        "countWays(nums = [4, 1, 5, 7])"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 4, offers = [[1, 2, 5], [2, 3, 7], [3, 4, 9]])",
        "maximizeTheProfit(n = 5, offers = [[1, 4, 6], [3, 4, 8]])",
        "maximizeTheProfit(n = 3, offers = [[2, 2, 6], [1, 2, 2]])",
        "maximizeTheProfit(n = 7, offers = [[2, 4, 1], [3, 6, 2]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 2], [2, 3, 5], [1, 1, 2]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 1], [3, 4, 1], [3, 5, 1], [4, 5, 1]])",
        "maximizeTheProfit(n = 5, offers = [[0, 4, 2], [1, 3, 3], [2, 4, 4]])",
        "maximizeTheProfit(n = 10, offers = [[1, 2, 10], [6, 7, 1], [8, 9, 2]])",
        "maximizeTheProfit(n = 7, offers = [[2, 3, 4], [1, 3, 1], [2, 2, 5]])",
        "maximizeTheProfit(n = 4, offers = [[3, 1, 9], [2, 1, 2], [1, 1, 1], [1, 2, 1], [2, 3, 1]])"
    ],
    "sample_122": [
        "minimumIndex(nums = [1, 1, 2, 2])",
        "minimumIndex(nums = [3,3,2,1,3])",
        "minimumIndex(nums = [3,3,1,2])",
        "minimumIndex(nums = [1, 1, 0, 0])",
        "minimumIndex(nums = [2, 1, 2, 2, 1])",
        "minimumIndex(nums = [2,1,1,1,2])",
        "minimumIndex(nums = [2,0,2,1,2])",
        "minimumIndex(nums = [2,0,2,2])",
        "minimumIndex(nums = [1,2,2,2,4,5,6,6,6,6,7,8])",
        "minimumIndex(nums = [4,1,3,5,6,5,3])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1,5], [2,3], [5,5]])",
        "numberOfPoints(nums = [[1, 5], [3, 6]])",
        "numberOfPoints(nums = [[0,1],[1,2],[2,3],[3,4],[4,5]])",
        "numberOfPoints(nums = [[1, 2], [4, 7], [6, 7]])",
        "numberOfPoints(nums = [[1, 3], [2, 6], [3, 10], [15, 20], [16, 20]])",
        "numberOfPoints(nums = [[0, 10], [1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1,3], [3,4], [4,6], [7,9]])",
        "numberOfPoints(nums = [(1, 2), (2, 3), (2, 4), (4, 4), (4, 5)])",
        "numberOfPoints(nums = [[3, 3], [3, 4], [6, 8], [5, 7], [8, 8]])",
        "numberOfPoints(nums = [[50, 53], [90, 99], [60, 63]])"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \"\")",
        "splitWordsBySeparator(words = [\"\"], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \"|\")",
        "splitWordsBySeparator(words = [\"banana\"], separator = \"a\")",
        "splitWordsBySeparator(words = [], separator = \"abc\")",
        "splitWordsBySeparator(words = [\"\", \"ab\", \"c\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"app\", \"le\"], separator = \"p\")",
        "splitWordsBySeparator(words = [\"abacus\", \"banana\"], separator = \"abc\")",
        "splitWordsBySeparator(words = [\"ca,fe,babe\"], separator = \",\")"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 1, target = 0)",
        "minimumPossibleSum(n = 0, target = 1)",
        "minimumPossibleSum(n = 0, target = 1)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 10, target = 15)"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 4], [2, 3]])",
        "numberOfPoints(nums = [[1, 2], [2, 4], [2, 3]])",
        "numberOfPoints(nums = [[1, 4], [3, 4], [1, 3]])",
        "numberOfPoints(nums = [[1,3],[1,4],[2,4],[3,4]])",
        "numberOfPoints(nums = [[1,2], [3,4], [4,6]])",
        "numberOfPoints(nums = [[1, 3], [4, 7], [0, 10]])",
        "numberOfPoints(nums = [[3, 3], [2, 4], [4, 5]])",
        "numberOfPoints(nums = [[1,3],[1,5],[2,3],[2,4],[2,6],[3,4],[3,5]])",
        "numberOfPoints(nums = [[0, 4], [2, 3], [1, 4], [5, 5]])",
        "numberOfPoints(nums = [[2,3],[2,5],[3,4],[4,5],[5,6]])"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 3], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 1, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 1], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,2,1], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [2, 1, 1, 2], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [5,1,3,4,2], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [3, 1, 4, 1, 5, 9, 2], m = 10, k = 0)",
        "countInterestingSubarrays(nums = [3,2,3,3,2,1], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [2, 4, 3, 5, 4, 1, 3, 6], m = 6, k = 4)"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], k = 3)",
        "sumIndicesWithKSetBits(nums = [0,1,2,3,4,5,6,7,8,9,10,11,12,13], k = 1)",
        "sumIndicesWithKSetBits(nums = [5, 1, 2, 8, 4, 3, 2, 7, 4, 1, 1, 1, 2, 5, 8, 10], k = 2)"
    ],
    "sample_203": [
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"025\")",
        "minimumOperations(num = \"1234\")",
        "minimumOperations(num = \"88\")",
        "minimumOperations(num = \"1025\")",
        "minimumOperations(num = \"250\")",
        "minimumOperations(num = \"000000000000\")",
        "minimumOperations(num = \"515\")",
        "minimumOperations(num = \"000500250000\")",
        "minimumOperations(num = '33225577')"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 1], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1,2,0], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [2,2,1], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6], modulo = 10, k = 1)",
        "countInterestingSubarrays(nums = [3, 1, 4, 1, 5], modulo = 1, k = 0)",
        "countInterestingSubarrays(nums = [1, 0, 1, 1, 1], modulo = 1, k = 0)",
        "countInterestingSubarrays(nums = [2, 4, 3, 1, 2, 5], modulo = 4, k = 1)"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1,1,1,1,1], K = 0)",
        "longestEqualSubarray(A = [1,2,3,4,5,6,7,8,9,10], K = 1)",
        "longestEqualSubarray(A = [1,2,3,1,2,3,1,2,3], K = 2)",
        "longestEqualSubarray(A = [2, 2, 2, 3, 3, 3, 2, 2, 2], K = 3)",
        "longestEqualSubarray(A = [2, 2, 1, 1, 3, 3, 2], K = 2)",
        "longestEqualSubarray(A = [2,2,2,3,3,4,5,5,5,6,6,6], K = 1)",
        "longestEqualSubarray(A = [2, 1, 2, 2, 3, 4, 3, 4, 4], K = 1)",
        "longestEqualSubarray(A = [1, 2, 3, 2, 2, 2, 1, 1, 2, 3, 2, 2, 2, 1, 1, 2, 3, 2, 2, 2], K = 2)",
        "longestEqualSubarray(A = [1,2,2,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,5,5,5], K = 3)",
        "longestEqualSubarray(A = [4, 0, 5, 5, 1, 3, 3, 7, 1, 0], K = 2)"
    ],
    "sample_146": [
        "finalString(s = 'pintre')",
        "finalString(s = \"terpino\")",
        "finalString(s = 'opintr')",
        "finalString(s = 'retipperon')",
        "finalString(s = \"notterpo\")",
        "finalString(s = 'toin')",
        "finalString(s = 'iinroter')",
        "finalString(s = \"ritne\")",
        "finalString(s = 'Tinet')",
        "finalString(s = \"unutnvqrnqnvqn\")"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40], target = 35)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 21], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 5, 1, 6], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 30, 35, 40], target = 34)",
        "numberOfEmployeesWhoMetTarget(hours = [24, 18, 12, 6, 30], target = 18)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 12, 7, 2], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [22, 24, 35, 44], target = 24)",
        "numberOfEmployeesWhoMetTarget(hours = [11, 13, 14, 15, 11, 19], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [60, 35, 65, 50, 70], target = 55)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[0,1],[2,3],[4,5]])",
        "numberOfPoints(nums = [[1, 3], [1, 4], [2, 3]])",
        "numberOfPoints(nums = [[1, 2], [2, 5], [3, 4]])",
        "numberOfPoints(nums = [[3, 4], [1, 3]])",
        "numberOfPoints(nums = [[1,2],[2,4],[1,2]])",
        "numberOfPoints(nums = [[1,3],[1,5],[3,4],[4,5]])",
        "numberOfPoints(nums = [[2, 3], [2, 4], [5, 7]])",
        "numberOfPoints(nums = [[1, 5], [1, 5], [3, 5], [2, 4]])",
        "numberOfPoints(nums = [[0, 1], [1, 1], [2, 2], [3, 3], [4, 4]])",
        "numberOfPoints(nums = [[1,2], [1,5], [1,5]])"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1])",
        "maxIncreasingGroups(A = [1])",
        "maxIncreasingGroups(A = [1, 1, 1])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [2])",
        "maxIncreasingGroups(A = [1, 1, 1, 1, 1])",
        "maxIncreasingGroups(A = [5, 4, 3, 2])",
        "maxIncreasingGroups
        "maxIncreasingGroups(A = [3, 2, 2, 1, 2, 4])",
        "maxIncreasingGroups(A = [5, 10, 12, 11])"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 100], [2, 3, 100], [3, 5, 100]])",
        "maximizeTheProfit(n = 4, offers = [[1,3,1],[3,4,2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 4, 15], [3, 5, 20]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 4, 5], [3, 5, 6]])",
        "maximizeTheProfit(n = 3, offers = [[1,2,4],[3,3,2]])",
        "maximizeTheProfit(n = 4, offers = [[1,2,2],[2,4,1],[3,4,3]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 100], [2, 3, 100], [2, 4, 100], [1, 3, 100]])",
        "maximizeTheProfit(n=4, offers=[ [4, 2, 1], [2, 1, 3], [3, 1, 2] ])",
        "maximizeTheProfit(n = 7, offers = [[3,2,10], [1,5,2]])",
        "maximizeTheProfit(n = 7, offers = [[2,2,1],[2,6,2],[3,5,3],[1,3,1]])"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"LL_R\")",
        "furthestDistanceFromOrigin(moves = \"L_R_L_R\")",
        "furthestDistanceFromOrigin(moves = \"L_____R\")",
        "furthestDistanceFromOrigin(moves = \"LR_R\")",
        "furthestDistanceFromOrigin(moves = \"R_R_L_L_R\")",
        "furthestDistanceFromOrigin(moves = \"RR_RR_\")",
        "furthestDistanceFromOrigin(moves = \"L_L_RR_\")",
        "furthestDistanceFromOrigin(moves = \"R_R_R_L_L_L_L_L_\")",
        "furthestDistanceFromOrigin(moves = 'L__R__R')",
        "furthestDistanceFromOrigin(moves = \"LLRRRRRRRRRRRRRRR\")"
    ],
    "sample_175": [
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 7)",
        "minimumSum(n=1, k=3)"
    ],
    "sample_217": [
        "numberOfPoints(nums=[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]])",
        "numberOfPoints(nums = [[1,5],[2,3],[7,9],[4,7]])",
        "numberOfPoints(nums=[[1, 3], [2, 6], [3, 4]])",
        "numberOfPoints(nums = [[2,3], [3,4], [5,6]])",
        "numberOfPoints(nums = [[1,2],[3,3],[4,4],[5,7]])",
        "numberOfPoints(nums = [(1,5),(2,3),(3,4),(4,6)])",
        "numberOfPoints(nums = [[0,5],[1,2],[3,5],[4,5]])",
        "numberOfPoints(nums = [[1,2],[2,5],[3,7],[4,7],[7,10]])",
        "numberOfPoints(nums = [[2,2],[1,5],[1,2],[2,2],[2,5]])",
        "numberOfPoints(nums = [[3, 4], [7, 11], [2, 8], [11, 12]])"
    ],
    "sample_205": [
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"001\")",
        "minimumOperations(num = \"011\")",
        "minimumOperations(num = \"11011\")",
        "minimumOperations(num = \"55\")",
        "minimumOperations(num = \"1024\")",
        "minimumOperations(num = \"012250\")",
        "minimumOperations(num = \"055555\")",
        "minimumOperations(num = \"0001201201\")"
    ],
    "sample_120": [
        "minimumIndex(nums = [3, 4, 5, 1, 2, 0])",
        "minimumIndex(nums = [3, 4, 5, 1, 2, 3])",
        "minimumIndex(nums = [3,4,5,1,2])",
        "minimumIndex(nums = [3, 3, 3, 1, 1])",
        "minimumIndex(nums = [2,3,0,1,2,5,3])",
        "minimumIndex(nums = [2, 4, 5, 1, 3, 1, 4])",
        "minimumIndex(nums = [4, 1, 3, 2, 7, 6, 4, 4])",
        "minimumIndex(nums = [2, 1, 0, 0, 1, 1, 0, 2, 1, 1])",
        "minimumIndex(nums = [1, 3, 5, 4, 4, 2, 0, 1, 1, 3])",
        "minimumIndex(nums = [1, 2, 0, 0, 0, 0, 2, 3, 3, 3, 3])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"LRLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLRLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"L_R_R_R_R\")",
        "furthestDistanceFromOrigin(moves = \"R_R_L_L_\")",
        "furthestDistanceFromOrigin(moves = \"L_RRRRRRR_\")",
        "furthestDistanceFromOrigin(moves = \"L__RRRR\")",
        "furthestDistanceFromOrigin(moves = \"R__RR__RR\")",
        "furthestDistanceFromOrigin(moves = \"LRL______RRRL\")",
        "furthestDistanceFromOrigin(moves = \"RRLRR_RR_R_\")",
        "furthestDistanceFromOrigin(moves = \"RRR_LLL_RRRRRRRRRRRRRRRRR\")"
    ],
    "sample_161": [
        "maxSum(nums = [])",
        "maxSum(nums = [])",
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [-1, -2, -3])",
        "maxSum(nums = [1, 1, 1])",
        "maxSum(nums = [1, 1, 1])",
        "maxSum(nums = [0,0,0,0,0,0])",
        "maxSum(nums = [9999])",
        "maxSum(nums = [1000000000000000000, -1000000000000000000])"
    ],
    "sample_160": [
        "maxSum(nums = [])",
        "maxSum(nums = [])",
        "maxSum(nums = [])",
        "maxSum(nums = [])",
        "maxSum(nums = [])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [-1, -2, -3, -4, -5, -6])",
        "maxSum(nums = [9, 8, 8])",
        "maxSum(nums = [-1, -2, 3, -4, 5])",
        "maxSum(nums = [31,30,11,22,15])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = [\"one-two\", \"three-four\", \"five-six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one,two,three\", \"four,five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one-two-three\", \"four-five-six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three,four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one-two-three\", \"four-five\", \"six\"], separator = \"-\")",
        "splitWordsBySeparator(words = ['one_two_three', 'four_five', 'six'], separator = '_')",
        "splitWordsBySeparator(words = [\"one,two\", \"three,four\", \"five;six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one.two\", \"three\", \"four\", \"five.six\"], separator = '.')",
        "splitWordsBySeparator(words = ['one.two,three.four', 'five,six'], separator = ',')",
        "splitWordsBySeparator(words = [\"one, two\", \"three four, five,six\"], separator = \", \")"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 14], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 5, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [1,1,1,2,2], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 8, 8], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [200, 240, 180], target = 210)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 1, 12], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [5,4,4,3,5,7], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours= [12,32,15,54,89,65], target=56)"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 8], target = 11)",
        "numberOfEmployeesWhoMetTarget(hours=[1,2,3,4,5,6,7,8,9], target=10)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 10, 11], target = 11)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 4, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 40], target = 45)",
        "numberOfEmployeesWhoMetTarget(hours=[99,99,99,99], target=100)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 10, 50, 30, 40], target = 60)",
        "numberOfEmployeesWhoMetTarget(hours = [25, 24, 25, 22, 17], target = 18)",
        "numberOfEmployeesWhoMetTarget(hours = [32, 28, 14, 42, 16, 36], target = 30)"
    ],
    "sample_171": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 1, k = 2)",
        "minimumSum(n = 1, k = 3)",
        "minimumSum(n = 1, k = 1)",
        "minimumSum(n = 3, k = 10)"
    ],
    "sample_159": [
        "maxSum(nums = [])",
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums=[1])",
        "maxSum(nums=[1, 2, 3])",
        "maxSum(nums = [123,123])",
        "maxSum(nums = [9,1])",
        "maxSum(nums = [1, 1, 1, 1, 1])",
        "maxSum(nums = [10,10,10])",
        "maxSum(nums = [5, 6, 7])",
        "maxSum(nums = [-1, -10, 2])"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 2, 3, 4], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 6)",
        "canSplitArray(nums = [7, 2, 5], m = 4)",
        "canSplitArray(nums = [7,2,5,10,8], m = 10)",
        "canSplitArray(nums = [1, 1, 2], m = 2)",
        "canSplitArray(nums = [2, 2, 4], m = 4)",
        "canSplitArray(nums = [2, 1, 1, 2], m = 4)",
        "canSplitArray(nums = [3, 1, 2], m = 2)",
        "canSplitArray(nums = [5, 1, 3, 2], m = 6)",
        "canSplitArray(nums = [3, 5, 4], m = 8)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [], separator = \"\")",
        "splitWordsBySeparator(words = [], separator = \"\")",
        "splitWordsBySeparator(words = [\"\"], separator = \"a\")",
        "splitWordsBySeparator(words = [], separator = \".\")",
        "splitWordsBySeparator(words = [\"\", \"\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"\", \"\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"\", \"a\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"|\", \"|\", \"|\", \"|\"], separator = \"|\")",
        "splitWordsBySeparator(words = [\"100\", \"200\", \"300\"], separator = \"0\")",
        "splitWordsBySeparator(words = [\"hello world\", \"hello world\", \"hi\"], separator = \"\")"
    ],
    "sample_172": [
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 1, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 1, k = 3)",
        "minimumSum(n = 1, k = 3)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n=2, k=1)"
    ],
    "sample_228": [
        "countWays(nums = [1,2,4])",
        "countWays(nums = [1,3,5])",
        "countWays(nums = [1,3,4])",
        "countWays(nums = [1,2,2])",
        "countWays(nums = [1, 2, 3, 4, 5, 6])",
        "countWays(nums = [1,1,1,2,3])",
        "countWays(nums = [1,2,4,5,7,10])",
        "countWays(nums = [1, 3, 3, 6])",
        "countWays(nums = [0,0,1,1,3,3,4,5,5,5])",
        "countWays(nums = [0, 3, 2, 2, 2, 3, 2, 2, 3])"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '00')",
        "maximumOddBinaryNumber(s = '01')",
        "maximumOddBinaryNumber(s = '110')",
        "maximumOddBinaryNumber(s = '10')",
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = '00010')",
        "maximumOddBinaryNumber(s = \"10110\")"
    ],
    "sample_119": [
        "minimumIndex(nums = [3,4,5,1,2,0])",
        "minimumIndex(nums = [3,1,2,3,3])",
        "minimumIndex(nums = [3, 4, 5, 1, 2, 6, 7])",
        "minimumIndex(nums = [2, 3, 3, 1, 3])",
        "minimumIndex(nums = [7,7,7,7,7,7,7])",
        "minimumIndex(nums = [1, 2, 2, 3, 4, 5])",
        "minimumIndex(nums = [1,1,2,2,3,3,4])",
        "minimumIndex(nums = [0, 1, 2, 0, 1, 2, 3])",
        "minimumIndex(nums = [3,2,0,1,4,7])",
        "minimumIndex(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1])"
    ],
    "sample_153": [
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [1,2,3,4,5,6,7], m = 10)",
        "canSplitArray(nums = [1, 1, 1], m = 2)",
        "canSplitArray(nums = [1,2,3,3,4,4,5], m = 1)",
        "canSplitArray(nums = [2,3,1,1], m = 4)",
        "canSplitArray(nums = [2,1,1,2,1,2], m = 2)",
        "canSplitArray(nums = [1, 2, 3, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "canSplitArray(nums = [12, 12, 12, 12, 12, 12, 12], m = 14)",
        "canSplitArray(nums = [20,14,10,17,4,12,15], m = 10)"
    ],
    "sample_147": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = 'string')",
        "finalString(s = \"string\")",
        "finalString(s = \"singing\")",
        "finalString(s = 'sitting')",
        "finalString(s = 'rightst')",
        "finalString(s = \"girtsgnin\")",
        "finalString(s = \"it is a test\")"
    ],
    "sample_174": [
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 1, k = 2)",
        "minimumSum(n = 4, k = 5)",
        "minimumSum(n = 3, k = 20)",
        "minimumSum(n=3, k=3)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 12)",
        "canSplitArray(nums = [1, 1, 1, 1, 1], m = 4)",
        "canSplitArray(nums = [2,3,1,3], m = 5)",
        "canSplitArray(nums = [2, 3, 3, 4, 6], m = 7)",
        "canSplitArray(nums = [10, 20, 50], m = 80)",
        "canSplitArray(nums = [2,4,2,5,8], m = 8)",
        "canSplitArray(nums = [1, 10, 5, 2, 5, 4, 5], m = 20)",
        "canSplitArray(nums = [10, 5, 7, 8, 2, 12, 3, 9, 15, 11, 14], m = 15)"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1,2,3,4])",
        "countCompleteSubarrays(nums = [1,2,3,4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [2, 2, 3, 3, 3])",
        "countCompleteSubarrays(nums = [2,2,2,1,2,2,2,1,2,2,2])",
        "countCompleteSubarrays(nums = [2,3,3,2,3,2,2,3,2])"
    ],
    "sample_150": [
        "finalString(s = \"string\")",
        "finalString(s = 'singing')",
        "finalString(s = 'sitting')",
        "finalString(s = \"spring\")",
        "finalString(s = 'sting')",
        "finalString(s = 'stirng')",
        "finalString(s = 'Spring')",
        "finalString(s = \"sitnigni\")",
        "finalString(s = 'signir')",
        "finalString(s = \"hastiNg\")"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 100, target = 1)",
        "minimumPossibleSum(n = 10, target = 12)"
    ],
    "sample_176": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n=2, k=2)",
        "minimumSum(n=3, k=8)"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 10, k = 5)",
        "countInterestingSubarrays(nums = [3,1,4,1,5,9], modulo = 4, k = 0)",
        "countInterestingSubarrays(nums=[1, 2, 3], modulo=4, k=2)",
        "countInterestingSubarrays(nums = [1,2,3,3,3], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums=[1, 2, 3, 1, 2, 3], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 1, 4, 2], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums=[3, 3, 1, 2], modulo=3, k=1)",
        "countInterestingSubarrays(nums = [5, 1, 2, 0, 3], modulo = 4, k = 0)",
        "countInterestingSubarrays(nums = [1,3,3,4,1,3], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [100, 1, 1], modulo = 100, k = 99)"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 1)",
        "sumIndicesWithKSetBits(nums = [2,3,4,5,6,7,8], k = 3)",
        "sumIndicesWithKSetBits(nums = [0,1,3,5,7,9], k = 3)",
        "sumIndicesWithKSetBits(nums = [5, 3, 3, 1, 3], k = 2)"
    ],
    "sample_151": [
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = \"string\")",
        "finalString(s = 'singing')",
        "finalString(s = 'singing')",
        "finalString(s = \"sting\")",
        "finalString(s = \"sit\")",
        "finalString(s = \"thisis\")",
        "finalString(s = \"snigat\")"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [1], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 0], k = 1)",
        "sumIndicesWithKSetBits(nums = [2], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8], k = 1)",
        "sumIndicesWithKSetBits(nums = [3, 2, 1], k = 2)"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [2, 3, 4])",
        "maxIncreasingGroups(usageLimits = [2, 4, 5])",
        "maxIncreasingGroups(usageLimits = [3, 1, 2, 4])",
        "maxIncreasingGroups(usageLimits = [1, 3, 4, 2])",
        "maxIncreasingGroups(usageLimits = [5, 10, 10])",
        "maxIncreasingGroups(usageLimits = [2, 2, 2, 2, 2, 2, 2, 2, 2])",
        "maxIncreasingGroups(usageLimits = [1, 2, 2, 2, 2, 2, 2])",
        "maxIncreasingGroups(usageLimits = [1, 3, 5, 2, 4, 6])",
        "maxIncreasingGroups(usageLimits = [1, 1, 1, 2, 100])",
        "maxIncreasingGroups(usageLimits = [1, 3, 7, 4, 10, 1])"
    ],
    "sample_204": [
        "minimumOperations(s = \"00\")",
        "minimumOperations(s = \"0000\")",
        "minimumOperations(s = \"0025\")",
        "minimumOperations(s = \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(s = \"001100\")",
        "minimumOperations(s = \"00225\")",
        "minimumOperations(s = \"050000\")",
        "minimumOperations(s = \"0002500250\")",
        "minimumOperations(s = '7550250')",
        "minimumOperations(s = '707725000755025500752550')"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 10, 12], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 12, 16, 20], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 15, 19, 20], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 2, 1, 6], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 24, 8, 16, 32, 16, 40], target = 16)",
        "numberOfEmployeesWhoMetTarget(hours = [40, 45, 50, 20, 55], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 7, 8, 4, 5, 3], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 20, 8, 19, 16], target = 16)",
        "numberOfEmployeesWhoMetTarget(hours = [54, 3, 92, 80, 53, 64, 86, 20], target = 70)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 13, 14, 10, 13, 10, 9, 12, 12, 13, 11, 12, 13, 13, 12, 12, 14, 14], target = 13)"
    ],
    "sample_148": [
        "finalString(s = 'pointer')",
        "finalString(s = 'pointer')",
        "finalString(s = \"pointer\")",
        "finalString(s = \"piter\")",
        "finalString(s = 'pintor')",
        "finalString(s = \"tinier\")",
        "finalString(s = 'interesting')",
        "finalString(s = \"poniter\")",
        "finalString(s = \"interpolation\")",
        "finalString(s = \"interpret\")"
    ],
    "sample_168": [
        "isAcronym(words = ['quick', 'brown', 'fox'], s = 'QBF')",
        "isAcronym(words = [\"apple\", \"banana\"], s = \"banana\")",
        "isAcronym(words = [\"qwer\", \"asdf\", \"zxcv\"], s = \"qaz\")",
        "isAcronym(words = [\"one\", \"two\", \"three\"], s = \"onw\")",
        "isAcronym(words = [\"ab\", \"de\"], s = \"ad\")",
        "isAcronym(words = [\"To\", \"be\", \"or\", \"not\", \"to\", \"be\"], s = \"be\")",
        "isAcronym(words = [\"nuclear\", \"fusion\"], s = \"nuf\")",
        "isAcronym(words = [\"queue\", \"front\", \"back\"], s = \"qfb\")",
        "isAcronym(words = [\"this\", \"is\", \"a\", \"string\"], s = \"TIIS\")",
        "isAcronym(words = ['team', 'of', 'us'], s = 'tou')"
    ],
    "sample_201": [
        "minOperations(nums = [1, 1, 1, 1, 1], target = 11)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 11)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 11)",
        "minOperations(nums = [1,1,1], target = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 1)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32], target = 33)",
        "minOperations(nums = [1,2,3,4,5,6,7], target = 21)",
        "minOperations(nums = [1, 3, 11], target = 17)",
        "minOperations(nums=[3, 2, 4], target=10)",
        "minOperations(nums=[3,3,2,5,2,4,1],target=9)"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '10')",
        "maximumOddBinaryNumber(s = \"01\")",
        "maximumOddBinaryNumber(s = \"0001\")",
        "maximumOddBinaryNumber(s = '00010')",
        "maximumOddBinaryNumber(s = '01000')",
        "maximumOddBinaryNumber(s = \"00010\")",
        "maximumOddBinaryNumber(s = '100010')",
        "maximumOddBinaryNumber(s = \"011010\")"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s='001')",
        "maximumOddBinaryNumber(s = '10000')",
        "maximumOddBinaryNumber(s='110')",
        "maximumOddBinaryNumber(s = '11111')",
        "maximumOddBinaryNumber(s = \"1100\")",
        "maximumOddBinaryNumber(s = '00110011')",
        "maximumOddBinaryNumber(s = \"011000\")",
        "maximumOddBinaryNumber(s
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 2, target = 10)",
        "minimumPossibleSum(n = 1, target = 8)",
        "minimumPossibleSum(n = 2, target = 9)"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LRRL\")",
        "furthestDistanceFromOrigin(moves = \"LLLRA\")",
        "furthestDistanceFromOrigin(moves = \"LLRA\")",
        "furthestDistanceFromOrigin(moves = \"LLRLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LRLALALR\")",
        "furthestDistanceFromOrigin(moves = 'RRRRLLLLL')",
        "furthestDistanceFromOrigin(moves = \"LLRRLLRLRLRRL\")",
        "furthestDistanceFromOrigin(moves = \"LLLRAAARRRRRL\")",
        "furthestDistanceFromOrigin(moves = \"RRRAALARRLR\")",
        "furthestDistanceFromOrigin(moves = \"LRALRRRLRRLRA\")"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n=1, target=1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n=2, target=1)",
        "minimumPossibleSum(n = 10, target = 100)",
        "minimumPossibleSum(n = 10, target = 1)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [], target = 12)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 8], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 14, 10], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 15], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 10], target = 100)",
        "numberOfEmployeesWhoMetTarget(hours = [26, 28, 20], target = 28)",
        "numberOfEmployeesWhoMetTarget(hours = [37, 35, 34], target = 34)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 10, 5, 10, 20, 20, 10, 20], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 4, 6, 8, 2, 8, 2, 10], target = 7)"
    ],
    "sample_231": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1,2,3])",
        "countWays(nums = [1,2])",
        "countWays(nums = [0, 2, 3])",
        "countWays(nums = [1,2,3,4])",
        "countWays(nums = [3, 1, 2])",
        "countWays(nums = [2, 3, 4, 5])",
        "countWays(nums = [0, 0])",
        "countWays(nums = [0, 3, 5, 7])",
        "countWays(nums = [-1, 1, 0, 2, 3])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"L_R_R_L_L\")",
        "furthestDistanceFromOrigin(moves = \"LLR_____R\")",
        "furthestDistanceFromOrigin(moves = \"RRRRRR__LLLL\")",
        "furthestDistanceFromOrigin(moves = \"LLLUURRR\")",
        "furthestDistanceFromOrigin(moves = \"RLLLRLRRLRL\")",
        "furthestDistanceFromOrigin(moves = \"RRRRRRR__LLLLLLLLLLLLLLLLLLL\")",
        "furthestDistanceFromOrigin(moves = \"_R_RR__RRR\")",
        "furthestDistanceFromOrigin(moves = \"RRLLLRUUUURRRRR\")",
        "furthestDistanceFromOrigin(moves = 'L____R____L____R____L____R____L____R')",
        "furthestDistanceFromOrigin(moves = 'LLRRRRR__LLRRRRR__')"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 1, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n=1, target=4)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 1, target = 5)",
        "minimumPossibleSum(n = 2, target = 10)",
        "minimumPossibleSum(n=0, target=4)",
        "minimumPossibleSum(n = 3, target = 15)"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 1, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [4,5,2,3,5,2,1,3])"
    ],
    "sample_156": [
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 18)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 6)",
        "canSplitArray(nums = [1, 1], m = 2)",
        "canSplitArray(nums = [1, 2, 3, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1,2,3,4,5], m = 4)",
        "canSplitArray(nums = [3, 3, 6, 5], m = 9)",
        "canSplitArray(nums = [2, 2, 1, 2, 3, 2], m = 4)",
        "canSplitArray(nums = [3, 4, 6, 10], m = 11)",
        "canSplitArray(nums = [2, 2, 1, 1, 2, 2, 1, 2, 1], m = 5)"
    ],
    "sample_200": [
        "minOperations(nums = [1,1,1,1,1], target = 11)",
        "minOperations(nums = [1,1,1,1,1,1,1,1,1,1], target = 11)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 10)",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], target = 11)",
        "minOperations(nums = [1, 2, 3], target = 6)",
        "minOperations(nums = [1, 3], target = 0)",
        "minOperations(nums = [4, 1], target = 10)",
        "minOperations(nums = [3, 4, 2], target = 4)",
        "minOperations(nums = [88, 88, 88], target = 12)",
        "minOperations(nums = [2,2,2,2,2,2,2], target = 100000000)"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 1)",
        "sumIndicesWithKSetBits(nums = [5, 1, 3, 4, 2], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8, 16], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [5, 5, 5, 5, 5, 5, 5, 5], k = 3)"
    ],
    "sample_165": [
        "isAcronym(words = [\"bat\", \"man\"], s = \"BM\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\", \"jumps\"], s = \"QBFJ\")",
        "isAcronym(words = [\"apple\", \"banana\", \"carrot\"], s = \"ABC\")",
        "isAcronym(words = [\"Microsoft\", \"Corporation\"], s = \"MC\")",
        "isAcronym(words = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"indigo\", \"violet\"], s = \"ROYGBIV\")",
        "isAcronym(words = [\"apple\", \"banana\", \"orange\"], s = \"abc\")",
        "isAcronym(words = [\"program\", \"analysis\", \"and\", \"computer\", \"science\"], s = \"PACS\")",
        "isAcronym(words = [\"Oxford\", \"University\"], s = \"OxU\")",
        "isAcronym(words = [\"bingo\", \"bingo\"], s = \"BBI\")",
        "isAcronym(words = [\"mobile\", \"portable\", \"keyboard\", \"computer\", \"magic\"], s = \"MPKC\")"
    ],
    "sample_227": [
        "countWays(nums = [-1, 0, 2, 3])",
        "countWays(nums = [1, 3, 5, 6])",
        "countWays(nums = [1, 3, 4, 2])",
        "countWays(nums = [2, 3, 5, 7])",
        "countWays(nums = [2, 1, 1, 1])",
        "countWays(nums = [-2, -1, 0, 2, 4])",
        "countWays(nums = [1, 2, 10, 3])",
        "countWays(nums = [-3, -2, -1, 2, 3, 4])",
        "countWays(nums = [1, -1, -1, 1, 2])",
        "countWays(nums = [1, 0, 3, 6, 4, 8, 9])"
    ],
    "sample_158": [
        "maxSum(nums = [])",
        "maxSum(nums = [])",
        "maxSum(nums = [])",
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [-1, -2, -3, -4, -5])",
        "maxSum(nums = [0, 9])",
        "maxSum(nums = [12,12,12,12])",
        "maxSum(nums = [9, 9, 1, 1, 2, 2])",
        "maxSum(nums = [21, 23, 5, 13, 45, 5, 66, 1, 4])"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1,1,1,1,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [3,2,1,2,1,2], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,3,1], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 1, 1, 1], k = 1)",
        "longestEqualSubarray(nums = [1,2,2,3,2,4,2], k = 3)",
        "longestEqualSubarray(nums = [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,1,1,1,2], k = 1)",
        "longestEqualSubarray(nums = [9, 9, 4, 9], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,3,2,2,3,2,3,2,3], k = 1)"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 3, offers = [[1, 2, 10], [2, 3, 15]])",
        "maximizeTheProfit(n = 4, offers = [[1, 3, 4], [2, 2, 3], [3, 1, 6]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [1, 5, 5], [3, 4, 2]])",
        "maximizeTheProfit(n = 4, offers = [[1, 3, 1], [4, 4, 1], [3, 3, 1]])",
        "maximizeTheProfit(n = 10, offers = [[1, 4, 2], [1, 8, 4], [2, 10, 3]])",
        "maximizeTheProfit(n = 4, offers = [[3, 1, 10], [1, 2, 4], [1, 1, 10]])",
        "maximizeTheProfit(n = 5, offers = [(1, 3, 3), (2, 3, 5), (2, 3, 5), (4, 5, 5)])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [1, 4, 5], [3, 4, 5], [2, 4, 5], [1, 4, 10]])",
        "maximizeTheProfit(n = 10, offers = [(1, 3, 3), (2, 8, 4), (4, 5, 1), (7, 8, 3), (8, 10, 2)])",
        "maximizeTheProfit(n = 10, offers = [[1, 5, 3], [6, 4, 2], [2, 8, 4], [1, 3, 6], [5, 5, 1], [3, 2, 7]])"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "maxIncreasingGroups(x = [1, 2, 4, 5, 7])",
        "maxIncreasingGroups(x = [1, 3, 5, 4, 2])",
        "maxIncreasingGroups(x = [1, 1, 2, 3, 4, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 5, 8, 10])",
        "maxIncreasingGroups(x = [10,11,12])",
        "maxIncreasingGroups(x = [5,1,4,3,2,6])",
        "maxIncreasingGroups(x = [1, 2, 2, 1, 2, 2, 3])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 4, 5, 6, 7, 7, 7, 8, 9])",
        "maxIncreasingGroups(x = [3, 7, 1, 5, 9, 8, 10, 15])"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 2, 5, 2], k = 1)"
    ],
    "sample_207": [
        "minimumOperations(num = \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(num = \"120\")",
        "minimumOperations(num = \"0001\")",
        "minimumOperations(num = \"10000\")",
        "minimumOperations(num = \"1020\")",
        "minimumOperations(num = \"5555\")",
        "minimumOperations(num = \"307\")",
        "minimumOperations(num = \"717\")",
        "minimumOperations(num = \"1110110\")",
        "minimumOperations(num = \"101010100\")"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"RLLL\")",
        "furthestDistanceFromOrigin(moves = \"RLRL\")",
        "furthestDistanceFromOrigin(moves = \"RLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRL\")",
        "furthestDistanceFromOrigin(moves=\"LR\")",
        "furthestDistanceFromOrigin(moves = \"RRRLRR\")",
        "furthestDistanceFromOrigin(moves=\"RLRLRLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LLLLL\")",
        "furthestDistanceFromOrigin(moves=\"LLLUURDD\")"
    ],
    "sample_206": [
        "minimumOperations(num = \"75\")",
        "minimumOperations(num = \"1111\")",
        "minimumOperations(num = \"432\")",
        "minimumOperations(num = \"007\")",
        "minimumOperations(num = \"055\")",
        "minimumOperations(num = \"4003\")",
        "minimumOperations(num = \"5273\")",
        "minimumOperations(num = \"2777777\")",
        "minimumOperations(num = \"25231\")",
        "minimumOperations(num = \"88002250\")"
    ],
    "sample_155": [
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [7,2,5,10,8], m = 10)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 12)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 12)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 10)",
        "canSplitArray(nums = [2,3,4,5], m = 5)",
        "canSplitArray(nums = [1,2,3,3,4,5], m = 2)",
        "canSplitArray(nums = [5, 3, 2, 1, 1], m = 3)",
        "canSplitArray(nums = [20, 7, 35, 18, 11], m = 36)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,1,2,1,1,3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4])"
    ],
    "sample_202": [
        "minimumOperations(num = \"50\")",
        "minimumOperations(num = \"0000000\")",
        "minimumOperations(num = \"0000000\")",
        "minimumOperations(num = \"2222\")",
        "minimumOperations(num = \"002500\")",
        "minimumOperations(num
        "minimumOperations(num = \"255000\")",
        "minimumOperations(num = \"990099\")",
        "minimumOperations(num = \"01203\")",
        "minimumOperations(num = \"0100011\")"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [], b = \"\")",
        "splitWordsBySeparator(a = [], b = \"a\")",
        "splitWordsBySeparator(a = [\"\", \"\"], b = \",\")",
        "splitWordsBySeparator(a = [\"\"], b = \"#\")",
        "splitWordsBySeparator(a = [], b = \"b\")",
        "splitWordsBySeparator(a = [\"\"], b = \"!\")",
        "splitWordsBySeparator(a = [\" \"], b = \" \")",
        "splitWordsBySeparator(a = [\"\", \"\"] , b = \" \")",
        "splitWordsBySeparator(a = [\"H\",\"e\",\"l\",\"l\",\"o\",\" \",\"w\",\"o\",\"r\",\"l\",\"d\"], b = \" \")",
        "splitWordsBySeparator(a = [\"Hello world!\", \"The quick brown fox\"], b = \" \")"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3], k = 2)"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = \"1010\")",
        "maximumOddBinaryNumber(s = '111')",
        "maximumOddBinaryNumber(s = '100')",
        "maximumOddBinaryNumber(s = \"0110\")",
        "maximumOddBinaryNumber(s = \"0011\")",
        "maximumOddBinaryNumber(s = \"1011\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,2,3,2,2,2], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,1], k = 1)",
        "longestEqualSubarray(nums = [1,2,1,2,1,2], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,3,4], k = 2)",
        "longestEqualSubarray(nums = [0,1,0,2], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,4,5,6,7,8,9], k = 3)",
        "longestEqualSubarray(nums = [1,2,2,3,3,3,3,2,2], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,2,3,2,3,2,3,2,1], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,1,1,1,3,3,1,1,3,3,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,3,1,1,2,2,3,1,2], k = 2)"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,2,2,3,2], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10], k = 5)",
        "longestEqualSubarray(nums = [0,1,2,0,0], k = 2)",
        "longestEqualSubarray(nums = [0, 0, 1, 1, 0], k = 1)",
        "longestEqualSubarray(nums = [1,3,1,1,2,1], k = 1)",
        "longestEqualSubarray(nums = [1,2,2,2,3,3,3,4,4,4,4,5], k = 3)",
        "longestEqualSubarray(nums = [1,1,1,3,4,4,4,3,3,3], k = 0)",
        "longestEqualSubarray(nums = [4, 8, 3, 2, 1, 2, 3, 5, 7, 6, 4, 5], k = 1)",
        "longestEqualSubarray(nums = [1,2,2,3,3,3,3,1,4,5,6,3,2,3,1,2,2], k = 1)"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '0')",
        "maximumOddBinaryNumber(s = '0')",
        "maximumOddBinaryNumber(s = \"00\")",
        "maximumOddBinaryNumber(s = '1011')",
        "maximumOddBinaryNumber(s = '100101')",
        "maximumOddBinaryNumber(s = '1111111')",
        "maximumOddBinaryNumber(s = '010010101')",
        "maximumOddBinaryNumber(s = \"10111101001011\")"
    ],
    "sample_166": [
        "isAcronym(words = [\"the\", \"quick\", \"brown\", \"fox\"], s = \"TQBF\")",
        "isAcronym(words = [\"apple\", \"banana\", \"orange\"], s = \"Banana\")",
        "isAcronym(words = [\"Mario\", \"Bros\"], s = \"MB\")",
        "isAcronym(words = [\"effective\", \"java\"], s = \"fje\")",
        "isAcronym(words = [\"Bigger\", \"Better\", \"Faster\", \"Stronger\"], s = \"BBFS\")",
        "isAcronym(words = [\"data\", \"sets\", \"are\", \"fun\"], s = \"DSA\")",
        "isAcronym(words = [\"Miracle\", \"Max\", \"Salt\", \"Shaker\"], s = \"MMS\")",
        "isAcronym(words = [\"Google\", \"Cloud\", \"Computing\"], s = \"gCC\")",
        "isAcronym(words = [\"example\", \"test\", \"file\"], s = \"etf\")",
        "isAcronym(words = [\"college\", \"food\", \"economy\"], s = \"coffee\")"
    ],
    "sample_163": [
        "maxSum(nums = [])",
        "maxSum(nums = [])",
        "maxSum(nums = [])",
        "maxSum(nums = [0])",
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [0, 0])",
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums = [0,0,0,0])",
        "maxSum(nums = [2, 3, 5])",
        "maxSum(nums = [0, -1, 0])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [2, 1])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1])",
        "semiOrderedPermutation(nums = [2, 4, 3, 1])",
        "semiOrderedPermutation(nums = [4, 3, 1, 2])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [4,2,2,6,2])",
        "continuousSubarrays(a = [1, 2, 1, 2, 3])",
        "continuousSubarrays(a = [2,1,3,4,1,2,3])",
        "continuousSubarrays(a = [2, 1, 4, 3, 1, 3])",
        "continuousSubarrays(a = [1,3,2,1,2,3,1,2,3,2,1,2])",
        "continuousSubarrays(a = [0,2,2,2,1,2,1,2,1,2])",
        "continuousSubarrays(a = [1, 2, 3, 0, 0, 2, 3, 4, 0])",
        "continuousSubarrays(a = [3, 0, 1, 1, 3, 2, 2])",
        "continuousSubarrays(a = [0, 2, 1, 3, 4, 5, 2, 3, 4, 6, 7, 8, 9, 10, 11])",
        "continuousSubarrays(a = [4,3,5,5,1,1,4,3,5,5,2])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [4, 2, 2, 6, 4])",
        "continuousSubarrays(nums = [4, 2, 2, 6, 4])",
        "continuousSubarrays(nums = [4,2,2,6,4])",
        "continuousSubarrays(nums = [2, 6, 3, 4, 5, 1])",
        "continuousSubarrays(nums = [1,3,2,1,2])",
        "continuousSubarrays(nums = [2, 3, 5, 1, 2, 1])",
        "continuousSubarrays(nums = [3, 1, 2, 2, 3, 4, 5])",
        "continuousSubarrays(nums = [1,2,3,5,6,7,1,3])",
        "continuousSubarrays(nums = [1, 2, 3, 3, 3, 3, 2, 2, 4])",
        "continuousSubarrays(nums = [3, 3, 4, 5, 5, 6, 10, 12, 13])"
    ],
    "sample_8": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 2, queries = [[1, 1]])",
        "colorTheArray(n = 2, queries = [[1, 2], [0, 3]])",
        "colorTheArray(n = 4, queries = [[1, 2], [3, 2], [2, 1], [2, 2]])",
        "colorTheArray(n = 3, queries = [[1,1], [0,1], [2,2]])"
    ],
    "sample_97": [
        "maximumJumps(nums = [1,1,1,1,1], target = 3)",
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [1,2,3,4,5], target = 0)",
        "maximumJumps(nums = [2,1,1,4,3,7], target = 3)",
        "maximumJumps(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,",
        "maximumJumps(nums = [1,4,2,10,3,1,0,2,4,3,7], target = 3)",
        "maximumJumps(nums = [1,3,1,1,4,1,1,3,1,1], target = 1)",
        "maximumJumps(nums = [7, 2, 2, 6], target = 4)",
        "maximumJumps(nums = [1,-1,4,-3,4], target = 4)",
        "maximumJumps(nums = [-1,-2,1,2,3,-1,1,2], target = 3)"
    ],
    "sample_22": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABACD\")",
        "minLength(s = \"ABC\")",
        "minLength(s = \"AC\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABABACD\")",
        "minLength(s = \"CBCCBA\")"
    ],
    "sample_7": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 2, queries = [[1, 1]])",
        "colorTheArray(n = 1, queries = [[1, 1]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 1]])",
        "colorTheArray(n=1, queries=[[]])",
        "colorTheArray(n = 3, queries = [[0,1],[1,2],[2,1]])",
        "colorTheArray(n=10, queries=[[]])"
    ],
    "sample_10": [
        "colorTheArray(n = 3, queries = [[0, 1], [1, 1], [2, 1], [0, 2], [1, 2]])",
        "colorTheArray(n = 4, queries = [[0, 1], [1, 1], [2, 1], [3, 1], [1, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 1], [2, 1], [2, 2], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [1, 2], [2, 2], [1, 1], [2, 1]])",
        "colorTheArray(n=5, queries=[[0, 1], [1, 1], [2, 1], [2, 0], [3, 1]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [2, 3], [1, 3]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 1], [3, 2], [2, 2], [2, 3]])",
        "colorTheArray(n = 5, queries = [[1, 1], [1, 1], [3, 1], [4, 1], [3, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [4, 1], [0, 2], [1, 2], [2, 3]])",
        "colorTheArray(n = 3, queries = [[0,1],[0,2],[0,1],[1,1],[1,2],[1,1]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [1,3,2,4])",
        "semiOrderedPermutation(nums = [1,4,2,3])",
        "semiOrderedPermutation(nums = [1,2,3,4,5,6])",
        "semiOrderedPermutation(nums = [2,3,4,1])",
        "semiOrderedPermutation(nums = [3,2,4,1])",
        "semiOrderedPermutation(nums = [2,1,3])",
        "semiOrderedPermutation(nums = [1,4,2,5,3])",
        "semiOrderedPermutation(nums=[1,2,3,4])",
        "semiOrderedPermutation(nums = [4,2,5,3,1])",
        "semiOrderedPermutation(nums=[5, 4, 3, 2, 1])"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [5,1,3,4,2], threshold = 1)",
        "longestAlternatingSubarray(nums = [0, 0, 2, 2], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 5, 3, 7], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 1, 3, 5, 1], threshold = 1)",
        "longestAlternatingSubarray(nums = [10, 50, 20, 40, 60], threshold = 40)",
        "longestAlternatingSubarray(nums = [1, 2, 10, 4, 5], threshold = 6)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 99], threshold = 6)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 6, 6, 6, 4, 2, 4, 4], threshold = 5)",
        "longestAlternatingSubarray(nums = [10, 1, 20, 5, 4, 15, 3, 10], threshold = 9)"
    ],
    "sample_33": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = '5123000001')",
        "removeTrailingZeros(num = '512301000000000')",
        "removeTrailingZeros(num = '5123001')",
        "removeTrailingZeros(num = \"512301000000000\")"
    ],
    "sample_50": [
        "smallestString(s = \"ababab\")",
        "smallestString(s = \"ababa\")",
        "smallestString(s = \"ababa\")",
        "smallestString(s = \"abab\")",
        "smallestString(s = \"abaaab\")",
        "smallestString(s = 'abacab')",
        "smallestString(s = \"ababba\")",
        "smallestString(s = \"aaaab\")",
        "smallestString(s = 'abcaab')",
        "smallestString(s = \"aaabab\")"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 1, 3])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 3, 2])",
        "distinctDifferenceArray(nums = [1, 2, 2, 1, 3, 1])",
        "distinctDifferenceArray(nums = [4, 4, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 5, 6, 7, 7, 8, 9])"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 3, additionalTank = 10)",
        "distanceTraveled(mainTank = 20, additionalTank = 20)"
    ],
    "sample_118": [
        "minimumIndex(nums = [3, 4, 5, 1, 2, 3])",
        "minimumIndex(nums = [2, 2, 2, 1, 1, 1])",
        "minimumIndex(nums = [3,2,1])",
        "minimumIndex(nums = [1, 1, 1, 1, 1, 1, 2])",
        "minimumIndex(nums = [1, 3, 5, 2, 2, 2, 4, 2])",
        "minimumIndex(nums = [4, 4, 4, 4, 4])",
        "minimumIndex(nums = [4, 2, 1, 5, 3])",
        "minimumIndex(nums = [1, 3, 0, 0, 1])",
        "minimumIndex(nums = [3,3,2,1,2,2])",
        "minimumIndex(nums = [1, 2, 3, 4, 4, 3, 4])"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 34, 56])",
        "countBeautifulPairs(nums = [12, 23])",
        "countBeautifulPairs(nums = [12, 34])",
        "countBeautifulPairs(nums = [10, 12])",
        "countBeautifulPairs(nums = [22, 45, 78])",
        "countBeautifulPairs(nums = [12, 28, 496])",
        "countBeautifulPairs(nums = [\"34\", \"12\"])",
        "countBeautifulPairs(nums = [\"42\", \"114\"])",
        "countBeautifulPairs(nums = [51, 69, 87, 319, 40, 320, 19, 181, 299, 100])"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = '512301000000000')",
        "removeTrailingZeros(num = '5123000')"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"aaabb\")",
        "minimizedStringLength(s = \"aabbb\")",
        "minimizedStringLength(s = \"aaaaa\")",
        "minimizedStringLength(s = \"aaabccddd\")",
        "minimizedStringLength(s = \"abaac\")",
        "minimizedStringLength(s = \"Hello\")",
        "minimizedStringLength(s = \"aabbcccd\")",
        "minimizedStringLength(s = \"aaaaaabbbcc\")",
        "minimizedStringLength(s = \"bbaaba\")",
        "minimizedStringLength(s = \"tourism\")"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 4)",
        "maximumBeauty(nums = [3, 1, 5, 2, 6], k = 3)",
        "maximumBeauty(nums = [1, 2, 4, 5, 8], k = 4)",
        "maximumBeauty(nums = [1, 4, 5, 8, 9], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5,10], k = 1)",
        "maximumBeauty(nums = [5, 2, 1, 7], k = 2)",
        "maximumBeauty(nums = [0, 1, 2, 4, 5, 8, 11], k = 4)",
        "maximumBeauty(nums = [1,3,4,1,1,1,4], k = 1)",
        "maximumBeauty(nums = [1, 1, 2, 3, 6, 5, 7], k = 1)"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 2, num2 = 1)",
        "makeTheIntegerZero(num1 = 2, num2 = 1)",
        "makeTheIntegerZero(num1 = 1, num2 = 2)",
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 8, num2 = 2)",
        "makeTheIntegerZero(num1 = 1, num2 = 0)",
        "makeTheIntegerZero(num1 = 13, num2 = 3)",
        "makeTheIntegerZero(num1 = 100, num2 = 20)",
        "makeTheIntegerZero(num1 = 1000000000, num2 = 2)",
        "makeTheIntegerZero(num1 = 55, num2 = 20)"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 2, 4])",
        "findValueOfPartition(nums = [0, 1, 3])",
        "findValueOfPartition(nums = [1, 3, 2, 1])",
        "findValueOfPartition(nums = [2, 1, 3, 0, 4])",
        "findValueOfPartition(nums = [1, 3, 100, 101])",
        "findValueOfPartition(nums = [2,3,4,5,6,7,8,9,10])",
        "findValueOfPartition(nums = [0, 1, 3, 6, 8, 10])",
        "findValueOfPartition(nums = [0, 2, 4, 8, 10])",
        "findValueOfPartition(nums = [3, 1, 0, 9, 8, 2])",
        "findValueOfPartition(nums = [1, 1, 3, 7, 8, 9, 9, 9, 9])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 0, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 0, 0])",
        "doesValidArrayExist(derived = [1,0,0,0,0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1, 0, 0, 1, 1])"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'enven')",
        "makeSmallestPalindrome(s = \"neeven\")",
        "makeSmallestPalindrome(s = \"evan\")",
        "makeSmallestPalindrome(s = \"nevn\")",
        "makeSmallestPalindrome(s = \"Neven\")",
        "makeSmallestPalindrome(s = \"uneven\")",
        "makeSmallestPalindrome(s = \"leve\")"
    ],
    "sample_110": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [2, 3, 4, 5], k = 1)",
        "checkArray(nums = [0, 1, 0, 0, 1], k = 2)",
        "checkArray(nums = [1,2,3,4,1], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 1)",
        "checkArray(nums = [2, 1, 4, 0], k = 2)",
        "checkArray(nums = [2, 3, 5, 2], k = 2)",
        "checkArray(nums = [2, 2, 4, 3, 4], k = 2)",
        "checkArray(nums = [1, 0, 2, 3, 0, 5], k = 3)",
        "checkArray(nums = [42, 29, 24, 67, 22, 15, 12, 19, 98], k = 10)"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 1, 0, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,"
    ],
    "sample_54": [
        "smallestString(s = 'kddsbndd')",
        "smallestString(s = 'kddsbndd')",
        "smallestString(s = \"kddsbndd\")",
        "smallestString(s = 'kddsbncde')",
        "smallestString(s = \"kddsbncde\")",
        "smallestString(s = 'kddsbncda')",
        "smallestString(s = \"kddsbbcd\")",
        "smallestString(s = 'kddsbbcd')",
        "smallestString(s = \"kdeeebndd\")",
        "smallestString(s = \"kddeeefncd\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1, 2, 3])",
        "continuousSubarrays(A = [2,1,3,4,1])",
        "continuousSubarrays(A = [0, 1, 2, 3, 0, 1, 2, 3])",
        "continuousSubarrays(A = [2,1,2,1,2,3,4,5,2,3,4,5])",
        "continuousSubarrays(A = [1, 2, 3, 3, 1, 4])",
        "continuousSubarrays(A = [1,2,1,3,2,2,3])",
        "continuousSubarrays(A = [2,1,1,2,1,2,2,1,2])",
        "continuousSubarrays(A = [2, 2, 2, 2, 2, 1, 1, 2, 2])",
        "continuousSubarrays(A = [2, 2, 2, 3, 3, 1, 2, 2, 2, 2, 1, 2, 3])",
        "continuousSubarrays(A = [2,2,3,1,3,2,3,1,4,3,2])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = 'aabb')",
        "makeSmallestPalindrome(s = \"abccba\")",
        "makeSmallestPalindrome(s = 'ba')",
        "makeSmallestPalindrome(s = \"abb\")",
        "makeSmallestPalindrome(s = 'baab')",
        "makeSmallestPalindrome(s = 'az')",
        "makeSmallestPalindrome(s = \"aabccb\")"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 2])",
        "findValueOfPartition(nums = [1, 5, 10])",
        "findValueOfPartition(nums = [1, 5, 2])",
        "findValueOfPartition(nums = [4, 1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 6, 10])",
        "findValueOfPartition(nums = [2, 3, 10, 4])",
        "findValueOfPartition(nums = [2, 3, 5, 7, 11, 13])",
        "findValueOfPartition(nums = [1, 5, 6, 19])",
        "findValueOfPartition(nums = [5, 6, 7, 9, 10, 13, 16])"
    ],
    "sample_51": [
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = \"kddsbcnce\")",
        "smallestString(s = \"kddsbcnd\")",
        "smallestString(s = \"kddsbacd\")",
        "smallestString(s = \"kddsbncf\")",
        "smallestString(s = \"kddsbncf\")",
        "smallestString(s = \"kddsbnecd\")",
        "smallestString(s = 'kddsbhcd')",
        "smallestString(s = 'kddscbce')",
        "smallestString(s = \"kddsbnc\"+\"e\")"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "maximumBeauty(nums = [3,1,5,2,1], k = 1)",
        "maximumBeauty(nums = [2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5], k = 1)",
        "maximumBeauty(nums = [1, 5, 2, 3, 7, 6, 4, 8, 9, 10], k = 3)",
        "maximumBeauty(nums = [0, 3, 2, 6, 5, 8, 9, 10], k = 1)",
        "maximumBeauty(nums = [5, 1, 10, 5, 7, 8], k = 3)",
        "maximumBeauty(nums = [1,100,3,100,4,100,100,2,100], k = 1)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 1, 2, 3], k = 2)",
        "checkArray(nums = [0, 1, 2, 3, 4], k = 3)",
        "checkArray(nums = [4, 1, 2, 3], k = 2)",
        "checkArray(nums = [1, 2, 1, 3, 4], k = 1)",
        "checkArray(nums = [1, 3, 1, 1], k = 2)",
        "checkArray(nums = [1, 2, 3, 1, 2, 4], k = 2)",
        "checkArray(nums = [1, 1, 1, 1, 1, 2, 3], k = 3)",
        "checkArray(nums = [2, 1, 1, 2, 3, 2], k = 3)",
        "checkArray(nums = [1, 3, 5, 1, 2, 1], k = 3)",
        "checkArray(nums = [1, 2, 4, 7, 11, 13, 16, 17, 19], k = 3)"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 7, additionalTank = 2)",
        "distanceTraveled(mainTank = 3, additionalTank = 3)",
        "distanceTraveled(mainTank = 1, additionalTank = 4)",
        "distanceTraveled(mainTank = 15, additionalTank = 4)"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 2])",
        "distinctDifferenceArray(nums = [1, 1, 1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 1, 2])",
        "distinctDifferenceArray(nums = [1, 1, 2, 3, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 1, 1, 2, 1, 1])",
        "distinctDifferenceArray(nums = [5, 1, 2, 2, 2])",
        "distinctDifferenceArray(nums = [2,2,3,5])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "continuousSubarrays(A = [1, 2, 3, 2, 2, 3])",
        "continuousSubarrays(A = [1,2,3,4,5,6,7,8])",
        "continuousSubarrays(A = [1, 2, 3, 2, 2, 1, 2])",
        "continuousSubarrays(A = [1,2,3,2,3,3])",
        "continuousSubarrays(A = [1,2,1,2,3,4,2,1,2,3])",
        "continuousSubarrays(A = [2, 1, 4, 3, 3, 3])",
        "continuousSubarrays(A = [3,2,1,2,3,1,2,1,2,2])",
        "continuousSubarrays(A = [1,1,1,1,2,2,1,1,1,1,2,2,2,2,2,2])",
        "continuousSubarrays(A = [3,3,2,3,2,2,3,4,1,1,4,4,1])"
    ],
    "sample_6": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 2, queries = [[0, 1]])",
        "colorTheArray(n = 2, queries = [[0,1],[1,1]])",
        "colorTheArray(n = 3, queries = [[1,1]])",
        "colorTheArray(n=3, queries=[[0,1]])",
        "colorTheArray(n = 2, queries = [[0,1],[1,2]])",
        "colorTheArray(n = 3, queries = [[1,2],[1,1]])"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 5, b = 2)",
        "makeTheIntegerZero(a = 4, b = 2)",
        "makeTheIntegerZero(a = 6, b = 3)",
        "makeTheIntegerZero(a = 123, b = 5)",
        "makeTheIntegerZero(a = 31, b = 17)",
        "makeTheIntegerZero(a = 10000, b = 100)",
        "makeTheIntegerZero(a = 41, b = 5)",
        "makeTheIntegerZero(a = 40, b = 16)",
        "makeTheIntegerZero(a=20, b=10)",
        "makeTheIntegerZero(a = 269, b = 3)"
    ],
    "sample_100": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [1, 2, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [1,2,3,4,5], target = 2)",
        "maximumJumps(nums = [3, 3, 4, 2], target = 1)",
        "maximumJumps(nums = [3, 4, 2, 3, 3, 0, 1, 2], target = 1)",
        "maximumJumps(nums = [3, 3, 0, 3, 3], target = 2)",
        "maximumJumps(nums = [5, 1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [3,4,0,2,3,1], target = 2)",
        "maximumJumps(nums = [5, 1, 2, 1, 2, 3, 3, 4], target = 1)",
        "maximumJumps(nums = [1,2,3,2,4,1,1,5], target = 2)"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2",
        "longestAlternatingSubarray(nums = [5,4,3,2,1], threshold = 4)",
        "longestAlternatingSubarray(nums = [4,2,4,5,4], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,1,1,2,1,1,1,1,1,1], threshold = 1)",
        "longestAlternatingSubarray(nums = [1,5,2,2,5,1], threshold = 3)",
        "longestAlternatingSubarray(nums = [10,9,8,7,6,5,4,3,2,1], threshold = 20)",
        "longestAlternatingSubarray(nums = [2,3,4,3,1,2,4,2,1], threshold = 2)",
        "longestAlternatingSubarray(nums = [0,1,2,3,4,4,2,1,2,3], threshold = 2)",
        "longestAlternatingSubarray(nums = [0,2,4,5,7,11,1,3,8,9,10,12], threshold = 11)",
        "longestAlternatingSubarray(nums = [4, 3, 9, 5, 9, 6, 5, 4, 3, 9, 7, 9, 3, 4, 3], threshold = 7)"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [3, 1, 2, 4])",
        "maxNonDecreasingLength(a = [5, 4, 3, 2, 1], b = [4, 2, 1, 3, 2])",
        "maxNonDecreasingLength(a = [3, 1, 2, 3, 4], b = [1, 2, 2, 3, 5])",
        "maxNonDecreasingLength(a = [1, 2, 3, 2, 5], b = [2, 2, 2, 3, 5])",
        "maxNonDecreasingLength(a = [5, 6, 2, 1], b = [3, 4, 8, 9])",
        "maxNonDecreasingLength(a = [1, 7, 9, 0], b = [3, 1, 2, 5])",
        "maxNonDecreasingLength(a = [1, 3, 4, 6, 7, 9, 11], b = [2, 3, 5, 8, 9, 10, 11])",
        "maxNonDecreasingLength(a = [5, 3, 2, 1, 2, 3, 4], b = [3, 1, 4, 2, 5, 3, 2])",
        "maxNonDecreasingLength(a = [10, 8, 6, 7, 5, 6], b = [2, 6, 3, 4, 1, 5])",
        "maxNonDecreasingLength(a = [1, 3, 6, 9, 15, 17, 18], b = [5, 12, 14, 20, 23, 32, 33])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [1])",
        "numberOfGoodSubarraySplits(nums = [1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0])",
        "numberOfGoodSubarraySplits(nums = [1, 0])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,0])",
        "numberOfGoodSubarraySplits(nums=[1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,0])",
        "numberOfGoodSubarraySplits(nums=[1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,1])"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [2, 1, 4, 3], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 1, 1, 1, 1], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 5, 2, 1, 4, 7], threshold = 6)",
        "longestAlternatingSubarray(nums = [2,3,4], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 2, 0], threshold = 2)",
        "longestAlternatingSubarray(nums = [4, 2, 7], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 1, 5, 1], threshold = 0)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 2, 1, 1, 1, 1], threshold = 3)",
        "longestAlternatingSubarray(nums = [8,10,2,9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 0, 1, 0, 0, 1, 0, 0, 0, 1], threshold = 1)"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 10])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 2, 2])",
        "findValueOfPartition(nums = [1, 2, 2])",
        "findValueOfPartition(nums = [1, 3, 5])",
        "findValueOfPartition(nums = [1, 3])",
        "findValueOfPartition(nums = [1, 2, 10])",
        "findValueOfPartition(nums = [1, 3, 7, 8])",
        "findValueOfPartition(nums = [1, 2, 2, 1, 2])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = \"aab\")",
        "makeSmallestPalindrome(s = \"aab\")",
        "makeSmallestPalindrome(s = 'abab')",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = 'aab')",
        "makeSmallestPalindrome(s = 'abc')",
        "makeSmallestPalindrome(s = 'ab')",
        "makeSmallestPalindrome(s = \"abcdcba\")",
        "makeSmallestPalindrome(s = \"abb\")",
        "makeSmallestPalindrome(s = \"baab\")"
    ],
    "sample_18": [
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABCCCD\")",
        "minLength(s = \"AEBCDF\")",
        "minLength(s = \"BACDBDCD\")",
        "minLength(s = \"ABABCACDC\")",
        "minLength(s
        "minLength(s = \"AABABBAABAABCD\")"
    ],
    "sample_99": [
        "maximumJumps(nums = [2, 1, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [5, 1, 3, 4, 2], target = 3)",
        "maximumJumps(nums = [3,2,1,0,4], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6], target = 1)",
        "maximumJumps(nums = [3,2,0,1,2], target = 2)",
        "maximumJumps(nums = [1, 4, 2, 1, 6, 7], target = 3)",
        "maximumJumps(nums = [1000000, 1000000], target = 1)",
        "maximumJumps(nums = [4, 3, 2, 0, 0, 1], target = 2)",
        "maximumJumps(nums = [5, 1, 3, 2, 2, 2, 1, 0, 1], target = 3)"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [4, 1], [4, 2]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 1], [2, 1], [4, 1], [4, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [0, 2], [2, 2]])",
        "colorTheArray(n = 5, queries = [[1,1],[3,1],[4,2],[2,2],[3,2]])",
        "colorTheArray(n = 5, queries = [[1, 2], [1, 3], [0, 4], [1, 2], [0, 4]])",
        "colorTheArray(n = 5, queries = [[1, 1], [1, 0], [4, 0], [2, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[1,1],[2,1],[3,2],[1,2],[3,3]])",
        "colorTheArray(n=5, queries=[[1,1],[3,2],[2,2],[1,2],[4,1]])",
        "colorTheArray(n=5, queries=[[3,1],[3,2],[1,3],[2,4],[1,3]])",
        "colorTheArray(n = 5, queries = [[1,1],[3,3],[4,4],[5,4],[2,4],[5,3],[4,3],[2,1]])"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank=1, additionalTank=0)",
        "distanceTraveled(mainTank=1, additionalTank=0)",
        "distanceTraveled(mainTank=1, additionalTank=0)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank=3, additionalTank=0)",
        "distanceTraveled(mainTank = 4, additionalTank = 2)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [12, 20])",
        "countBeautifulPairs(nums = [123, 345])",
        "countBeautifulPairs(nums = [42, 24])",
        "countBeautifulPairs(nums = [22, 23, 44, 66])",
        "countBeautifulPairs(nums = [12, 28, 6, 2])",
        "countBeautifulPairs(nums = [12, 34, 11, 22])",
        "countBeautifulPairs(nums = [12, 45, 21])",
        "countBeautifulPairs(nums = [12, 28, 6, 496])",
        "countBeautifulPairs(nums = [12, 28, 6, 4, 90])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60, 72, 84, 96, 128])"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 3)",
        "minCost(A = [2, 3, 4], x = 2)",
        "minCost(A = [1, 1, 2], x = 3)",
        "minCost(A=[1,2,3], x=2)",
        "minCost(A=[1, 2, 3], x=3)",
        "minCost(A = [2, 1, 5], x = 2)",
        "minCost(A = [5, 1, 3, 2], x = 2)",
        "minCost(A = [3, 5, 1, 4, 2], x = 2)",
        "minCost(A = [2, 3, 5, 1, 4], x = 5)"
    ],
    "sample_98": [
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [2,3,1,1,4], target = 1)",
        "maximumJumps(nums = [1, 1], target = 0)",
        "maximumJumps(nums = [3, 2, 1, 2, 3], target = 2)",
        "maximumJumps(nums = [100, 101, 105], target = 3)",
        "maximumJumps(nums = [6, 1, 9], target = 6)",
        "maximumJumps(nums = [2, 1, 1, 1, 2, 1, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [4,1,3,2,10,7], target = 3)",
        "maximumJumps(nums = [1,2,4,7,9,12,17,21], target = 5)",
        "maximumJumps(nums = [3, 0, 0, 0, 0, 0, 0, 1, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 1, 1, 1, 0, 1, 0])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [3, 1, 2, 1, 5])",
        "distinctDifferenceArray(nums = [2,1,1,2,3,2,3])",
        "distinctDifferenceArray(nums = [2, 1, 4, 3, 1])",
        "distinctDifferenceArray(nums = [2, 1, 2, 1, 3, 3, 3])",
        "distinctDifferenceArray(nums = [-3, -2, 0, 1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [2, 1, 5, 5, 1])",
        "distinctDifferenceArray(nums = [4, 1, 1, 6, 1, 1])",
        "distinctDifferenceArray(nums = [9, 1, 2, 3, 2, 1, 3, 9])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 5, 4, 6, 4, 8, 8])",
        "distinctDifferenceArray(nums = [9, 1, 2, 3, 6, 5, 1, 4, 7, 8, 9])"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [12, 34, 56, 78, 91])",
        "countBeautifulPairs(nums = [10, 20, 30, 50, 80])",
        "countBeautifulPairs(nums = [22, 23, 33, 34, 35])",
        "countBeautifulPairs(nums = [42, 21, 33, 55, 66])",
        "countBeautifulPairs(nums = [22,23,24,43,44,45,65,67,88,89])",
        "countBeautifulPairs(nums = [22, 12, 4, 44, 55])",
        "countBeautifulPairs(nums = [10, 20, 4, 25, 16, 20, 50])",
        "countBeautifulPairs(nums = [90, 57, 60, 24, 72, 95, 52])",
        "countBeautifulPairs(nums = [111221, 11221, 1211211, 12121, 222222222222222222222222])",
        "countBeautifulPairs(nums = [12, 20, 16, 29, 19, 25, 50, 10, 5, 28, 26])"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"aabcc\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"aabbbc\")",
        "minimizedStringLength(s = \"aabbbcc\")",
        "minimizedStringLength(s = \"cab\")",
        "minimizedStringLength(s = \"aaaabbbccc\")",
        "minimizedStringLength(s = \"xyyzzz\")",
        "minimizedStringLength(s = \"aabccdeeef\")",
        "minimizedStringLength(s = \"baaabaaac\")",
        "minimizedStringLength(s = \"aaaaaaabbbbbbbbbcc\")"
    ],
    "sample_41": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aaab\")",
        "minimumCost(s = \"aaaaa\")",
        "minimumCost(s = \"AABBB\")",
        "minimumCost(s = \"acccbbb\")",
        "minimumCost(s = \"zaaa\")"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 1])",
        "distinctDifferenceArray(nums = [2, 1, 1, 3, 2])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 5])",
        "distinctDifferenceArray(nums = [3, 3, 3, 2, 2])",
        "distinctDifferenceArray(nums = [2, 3, 1, 1, 3])",
        "distinctDifferenceArray(nums = [4, 3, 3, 2, 3])",
        "distinctDifferenceArray(nums = [6, 7, 4, 6, 2])",
        "distinctDifferenceArray(nums = [5,5,1,5,1,1,2,1])"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 2, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 3])",
        "doesValidArrayExist(derived = [1, 0, 0, 0, 1])",
        "doesValidArrayExist(derived = [2, 3])",
        "doesValidArrayExist(derived = [1, 2, 3, 5, 4])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [2, 4, 1, 6, 5])",
        "doesValidArrayExist(derived = [1, 2, 1, 3, 1, 2, 1, 4])"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0])",
        "doesValidArrayExist(derived = [0, 1, 2, 1])",
        "doesValidArrayExist(derived = [0,1,1,0,1])",
        "doesValidArrayExist(derived = [0, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 3, 2, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 2, 1, 2])",
        "doesValidArrayExist(derived = [0, 1, 2, 2, 1])",
        "doesValidArrayExist(derived = [1, 2, 4, 8, 16, 0])"
    ],
    "sample_52": [
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = 'kddsbdcd')",
        "smallestString(s = 'kddebnce')",
        "smallestString(s = \"kdeebncd\")",
        "smallestString(s = 'kdebncd')",
        "smallestString(s = 'kdebsbcd')",
        "smallestString(s = 'kddscbdc')",
        "smallestString(s = \"kkkddsbnce\")",
        "smallestString(s = \"kddsdndd\")"
    ],
    "sample_40": [
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"aaba\")",
        "minimumCost(s = \"aaabbb\")",
        "minimumCost(s = \"abcabc\")",
        "minimumCost(s = \"ABBA\")",
        "minimumCost(s = \"cdc\")",
        "minimumCost(s = \"zz\")",
        "minimumCost(s = \"xxyyxy\")"
    ],
    "sample_38": [
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abcb\")",
        "minimumCost(s = \"abcdba\")",
        "minimumCost(s = \"abbbb\")",
        "minimumCost(s = \"caabb\")",
        "minimumCost(s = \"AAAABBBB\")",
        "minimumCost(s = \"abcdab\")",
        "minimumCost(s = \"abaabbba\")",
        "minimumCost(s = \"eabdaccc\")"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 2])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 1])",
        "distinctDifferenceArray(nums = [1, 2, 1, 1, 3])",
        "distinctDifferenceArray(nums = [2, 1, 3, 1, 2])",
        "distinctDifferenceArray(nums = [2, 2, 1, 3, 3, 3])",
        "distinctDifferenceArray(nums = [2, 3, 4, 2, 3])"
    ],
    "sample_53": [
        "smallestString(s = 'bac')",
        "smallestString(s = 'bazz')",
        "smallestString(s = \"bac\")",
        "smallestString(s = 'bbbb')",
        "smallestString(s = 'bazzz')",
        "smallestString(s = 'baaad')",
        "smallestString(s = 'zzzzz')",
        "smallestString(s = \"baadc\")",
        "smallestString(s = 'bbca')",
        "smallestString(s = \"bccbb\")"
    ],
    "sample_109": [
        "checkArray(nums = [1, 2, 3, 4], k = 1)",
        "checkArray(nums = [1], k = 0)",
        "checkArray(nums = [1,1,1,1,1], k = 1)",
        "checkArray(nums = [1, 3, 5, 7], k = 2)",
        "checkArray(nums = [1, 3, 2, 1, 2], k = 2)",
        "checkArray(nums = [2,5,1,1], k = 2)",
        "checkArray(nums = [5, -1, 2, 1], k = 3)",
        "checkArray(nums = [4, 1, 2, 4, 6, 1], k = 3)",
        "checkArray(nums = [3, 3, 2, 1, 1, 2, 2, 3, 2, 3, 3], k = 2)",
        "checkArray(nums = [3,2,1,4,5,2,2,2,1,1,1,1,2,2], k = 1)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7,8], k = 1)",
        "maximumBeauty(nums = [1,3,2,6,5,4], k = 1)",
        "maximumBeauty(nums = [1,3,5,7,9,11], k = 5)",
        "maximumBeauty(nums = [0, 2, 4, 6, 7], k = 2)",
        "maximumBeauty(nums = [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "maximumBeauty(nums = [1, 3, 3, 4, 5, 8, 9], k = 3)",
        "maximumBeauty(nums = [1, 2, 4, 6, 5, 10], k = 3)",
        "maximumBeauty(nums = [1, 3, 1, 4, 3, 5, 7, 3, 9], k = 3)",
        "maximumBeauty(nums=[1000000000, 1000000000, 1, 2, 4, 8, 16, 32, 64, 128], k=1000000000)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 1, 2])",
        "distinctDifferenceArray(a = [1, 1, 1, 2, 3])",
        "distinctDifferenceArray(a = [1, 2, 3, 2, 5])",
        "distinctDifferenceArray(a = [1, 1, 2, 1, 2, 3])",
        "distinctDifferenceArray(a = [2, 2, 4, 5, 6])",
        "distinctDifferenceArray(a = [2, 3, 5, 2, 3, 5, 2, 3, 5])",
        "distinctDifferenceArray(a = [1,2,2,3,1,2,4])",
        "distinctDifferenceArray(a = [1, 1, 3, 2, 2, 3, 4, 1])",
        "distinctDifferenceArray(a = [1, 1, 2, 3, 3, 3, 2, 2, 2, 2, 5])"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = \"51230100\")",
        "removeTrailingZeros(a = '51230000')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = 'nevenn')",
        "makeSmallestPalindrome(s = 'nevenn')",
        "makeSmallestPalindrome(s = 'evenn')",
        "makeSmallestPalindrome(s = 'venen')",
        "makeSmallestPalindrome(s = 'venen')",
        "makeSmallestPalindrome(s = \"venn\")",
        "makeSmallestPalindrome(s = 'vee')",
        "makeSmallestPalindrome(s = \"nveo\")"
    ],
    "sample_55": [
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = 'kddebncd')",
        "smallestString(s = 'kddsbncf')",
        "smallestString(s = \"kddebncd\")",
        "smallestString(s = 'kddsbcnce')",
        "smallestString(s = 'kddsbndc')",
        "smallestString(s = \"kddsbdnd\")",
        "smallestString(s = \"kddsbdnd\")",
        "smallestString(s = 'kdeabncd')"
    ],
    "sample_35": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = '5123010000000')",
        "removeTrailingZeros(num = \"512301000000000000000000000\")"
    ],
    "sample_23": [
        "minLength(s = \"ABCDABCDAB\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s=\"ABCDABCDAB\")",
        "minLength(s = \"ABCDCDCDABCDCDCD\")",
        "minLength(s = \"AAAAAAAAABCDCDCD\")",
        "minLength(s = \"AAACDDABCD\")",
        "minLength(s=\"AAABABCDDDCCCD\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = '5123010000000')"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 6, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 4)",
        "makeTheIntegerZero(num1 = 6, num2 = 4)",
        "makeTheIntegerZero(num1 = 24, num2 = 5)",
        "makeTheIntegerZero(num1 = 3, num2 = 1)",
        "makeTheIntegerZero(num1 = 21, num2 = 4)",
        "makeTheIntegerZero(num1 = 21, num2 = 4)",
        "makeTheIntegerZero(num1 = 30, num2 = 11)",
        "makeTheIntegerZero(num1 = 51, num2 = 10)",
        "makeTheIntegerZero(num1 = 12345678, num2 = 131072)"
    ],
    "sample_57": [
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 3, b = 1)",
        "distanceTraveled(a = 5, b = 1)",
        "distanceTraveled(a = 4, b = 1)",
        "distanceTraveled(a = 1, b = 2)",
        "distanceTraveled(a = 6, b = 1)",
        "distanceTraveled(a = 3, b = 0)",
        "distanceTraveled(a=2, b=4)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [2, 2, 2, 2, 2], t = 2)",
        "longestAlternatingSubarray(nums = [1,1,2,2], t = 2)",
        "longestAlternatingSubarray(nums = [5,2,6,3,9], t = 5)",
        "longestAlternatingSubarray(nums = [0,1,1,0,1], t = 1)",
        "longestAlternatingSubarray(nums = [0,2,1,3], t = 3)",
        "longestAlternatingSubarray(nums = [2,3,5], t = 6)",
        "longestAlternatingSubarray(nums = [0, 2, 1, 2], t = 2)",
        "longestAlternatingSubarray(nums = [4,5,6,7,8], t = 7)",
        "longestAlternatingSubarray(nums = [1,5,7,9,2,3], t = 5)",
        "longestAlternatingSubarray(nums = [2,3,5,6,2,3,5,6,2,3], t = 2)"
    ],
    "sample_102": [
        "maximumJumps(nums = [1, 2, 3], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4], target = 1)",
        "maximumJumps(nums = [0], target = 0)",
        "maximumJumps(nums = [1, 2, 1, 1], target = 2)",
        "maximumJumps(nums = [3, 4, 5, 1, 2], target = 2)",
        "maximumJumps(nums = [10, 13, 12, 15, 16, 8], target = 3)",
        "maximumJumps(nums = [1,1,2,1,1,2], target = 0)",
        "maximumJumps(nums = [1, 4, 2, 100, 102, 103, 104, 105], target = 0)",
        "maximumJumps(nums = [2, 4, 3, 0, 0, 0], target = 3)",
        "maximumJumps(nums = [5, 4, 1, 3, 2, 3, 5, 7, 1, 2, 6, 3, 5, 3, 4, 8, 2, 4, 2], target = 2)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = '51230100000000')",
        "removeTrailingZeros(num = '51230100000000000000')"
    ],
    "sample_101": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [2, 1, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 4)",
        "maximumJumps(nums = [1,1,1,1,1], target = 0)",
        "maximumJumps(nums = [1, 2, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [1, 2, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [3,2,1,0,1], target = 1)",
        "maximumJumps(nums = [2, 4, 2, 1], target = 0)",
        "maximumJumps(nums = [1, 5, 2, 1, 1, 4, 4, 1, 2], target = 3)",
        "maximumJumps(nums = [2, 0, 5, 1, 3], target = 2)"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [1, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1,1,1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0,1,0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1, 0, 0])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 1, 0, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 1, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,0,1,1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,1,1,0,0,1,1,0])"
    ],
    "sample_19": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"CDAB\")",
        "minLength(s = \"CDAB\")",
        "minLength(s = \"ABC\")",
        "minLength(s = \"ABCDA\")",
        "minLength(s = \"ABCDA\")",
        "minLength(s = \"CDABAC\")",
        "minLength(s = \"ACACD\")",
        "minLength(s = \"ABBABABCDCD\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = 'neen')",
        "makeSmallestPalindrome(s = \"nven\")",
        "makeSmallestPalindrome(s = \"venne\")",
        "makeSmallestPalindrome(s = \"nvene\")",
        "makeSmallestPalindrome(s = \"neeven\")",
        "makeSmallestPalindrome(s = 'evens')",
        "makeSmallestPalindrome(s = \"beev\")"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [2,1,3])",
        "semiOrderedPermutation(nums = [2,1,3])",
        "semiOrderedPermutation(nums = [2,1,3])",
        "semiOrderedPermutation(nums = [2,1,3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [5, 3, 1, 4, 2])",
        "semiOrderedPermutation(nums=[5, 4, 1, 3, 2])"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,1,0])",
        "numberOfGoodSubarraySplits(nums=[1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,1,0,0,0])",
        "numberOfGoodSubarraySplits(nums = [1, 2, 1, 2, 3, 4, 1, 1, 1, 2, 3])",
        "numberOfGoodSubarraySplits(nums=[3,4,5,6,5,4])"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1,2,3,4,5,6,7,8], k = 3)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9, 11, 13, 15], k = 2)",
        "maximumBeauty(nums = [3, 1, 2, 4, 5], k = 1)",
        "maximumBeauty(nums = [1,3,5,7], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 3, 4, 5, 5, 6, 7, 8], k = 2)",
        "maximumBeauty(nums = [3,4,5,8,9,10,11,12], k = 1)",
        "maximumBeauty(nums = [0, 2, 4, 1, 2], k = 2)",
        "maximumBeauty(nums = [2, 3, 7, 10, 13, 14, 17], k = 2)",
        "maximumBeauty(nums = [2, 1, 6, 5, 3, 9, 7, 8], k = 1)"
    ],
    "sample_117": [
        "minimumIndex(nums = [3, 4, 5, 1, 2, 2])",
        "minimumIndex(nums = [1, 1, 2, 2, 3])",
        "minimumIndex(nums = [1, 2, 3, 3, 4, 5])",
        "minimumIndex(nums = [3,4,5,1,2,2,2,2])",
        "minimumIndex(nums = [1, 2, 3, 3, 3, 4, 5])",
        "minimumIndex(nums = [0, 1, 1, 1, 0, 1, 1, 0, 0])",
        "minimumIndex(nums = [4, 3, 4, 3, 5, 1])",
        "minimumIndex(nums = [2, 3, 3, 5, 3, 2, 2, 2, 4, 2])",
        "minimumIndex(nums = [4, 5, 1, 5, 1, 1, 4, 2, 2])",
        "minimumIndex(nums = [4, 5, 4, 2, 5, 2, 6, 2])"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 8, num2 = 4)",
        "makeTheIntegerZero(num1 = 100, num2 = 1)",
        "makeTheIntegerZero(num1 = 10, num2 = 6)",
        "makeTheIntegerZero(num1 = 23, num2 = 5)",
        "makeTheIntegerZero(num1 = 27, num2 = 5)",
        "makeTheIntegerZero(num1 = 84, num2 = 1)",
        "makeTheIntegerZero(num1 = 783, num2 = 111)"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [12, 23, 34, 45])",
        "countBeautifulPairs(nums = [12, 28, 6, 8])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60])",
        "countBeautifulPairs(nums = [22, 45, 33])",
        "countBeautifulPairs(nums = [12, 13])",
        "countBeautifulPairs(nums = [12, 24, 48])",
        "countBeautifulPairs(nums = [420, 234])",
        "countBeautifulPairs(nums = [12,28,36,410,13])",
        "countBeautifulPairs(nums = [12, 32, 15])",
        "countBeautifulPairs(nums = [12, 49, 23, 45, 78, 99, 34])"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 17, num2 = 5)",
        "makeTheIntegerZero(num1 = 2, num2 = 1)",
        "makeTheIntegerZero(num1 = 25, num2 = 5)",
        "makeTheIntegerZero(num1 = 34, num2 = 2)",
        "makeTheIntegerZero(num1 = 101, num2 = 10)",
        "makeTheIntegerZero(num1 = 35, num2 = 13)",
        "makeTheIntegerZero(num1 = 103, num2 = 5)",
        "makeTheIntegerZero(num1 = 127, num2 = 6)",
        "makeTheIntegerZero(num1 = 456, num2 = 173)"
    ],
    "sample_20": [
        "minLength(s = \"ABCDABCDAB\")",
        "minLength(s = \"ABCDA\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABABABCD\")",
        "minLength(s = \"ABCDCDAB\")",
        "minLength(s = \"AABCDAB\")",
        "minLength(s = \"ABCDCDAC\")",
        "minLength(s = \"ABBCDD\")",
        "minLength(s = \"CDABABABABCD\")",
        "minLength(s = \"ACDCDADC\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "maximumBeauty(nums = [1,3,2,4,5], k = 1)",
        "maximumBeauty(nums = [3, 1, 7], k = 2)",
        "maximumBeauty(nums = [1, 4, 6, 7], k = 2)",
        "maximumBeauty(nums = [1, 2, 4, 3], k = 1)",
        "maximumBeauty(nums = [1, 2, 4, 3, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 9, 10], k = 4)",
        "maximumBeauty(nums = [0, 0, 1, 2, 3, 50], k = 4)",
        "maximumBeauty(nums = [1, 3, 2, 5, 5, 6, 1], k = 4)",
        "maximumBeauty(nums = [1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7, 8, 9], k = 1)"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56])",
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 34, 46, 68])",
        "countBeautifulPairs(nums = [420, 204])",
        "countBeautifulPairs(nums = [12,28])",
        "countBeautifulPairs(nums=[12, 25, 37])",
        "countBeautifulPairs(nums = [12, 45, 87, 98])",
        "countBeautifulPairs(nums = [32, 45, 12, 65, 12])",
        "countBeautifulPairs(nums = [33,34,121,123,555,666])",
        "countBeautifulPairs(nums = [12,24,35,11,24,65,13])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 100, num2 = 5)",
        "makeTheIntegerZero(num1 = 19, num2 = 4)",
        "makeTheIntegerZero(num1 = 21, num2 = 2)",
        "makeTheIntegerZero(num1 = 25, num2 = 2)",
        "makeTheIntegerZero(num1 = 23, num2 = 10)",
        "makeTheIntegerZero(num1 = 21, num2 = 10)",
        "makeTheIntegerZero(num1 = 57, num2 = 3)",
        "makeTheIntegerZero(num1 = 52, num2 = 3)",
        "makeTheIntegerZero(num1 = 120, num2 = 15)",
        "makeTheIntegerZero(num1 = 93, num2 = 67)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'noon')",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = 'oneven')",
        "makeSmallestPalindrome(s = \"nven\")",
        "makeSmallestPalindrome(s = 'evene')",
        "makeSmallestPalindrome(s = \"vene\")",
        "makeSmallestPalindrome(s = \"xevn\")",
        "makeSmallestPalindrome(s = \"enveo\")",
        "makeSmallestPalindrome(s = \"yegnev\")"
    ],
    "sample_37": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"abaab\")",
        "minimumCost(s = \"aabba\")",
        "minimumCost(s = \"aabcc\")",
        "minimumCost(s = \"abcbda\")",
        "minimumCost(s = \"aabcbc\")",
        "minimumCost(s = \"cdababcbc\")",
        "minimumCost(s = \"abaabaaab\")",
        "minimumCost(s = \"xbxxa\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums=[1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums=[1,1])",
        "numberOfGoodSubarraySplits(nums=[1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 1, 0, 0])"
    ],
    "sample_105": [
        "checkArray(nums = [1], k = 1)",
        "checkArray(nums = [1,2,3,4,5,6,7], k = 3)",
        "checkArray(nums = [0, 1, 2], k = 2)",
        "checkArray(nums = [2, 1, 2, 1, 2, 1], k = 3)",
        "checkArray(nums = [1, 0, 1], k = 2)",
        "checkArray(nums = [4, 0, 0, 0, 0], k = 4)",
        "checkArray(nums = [0, 10, 20, 30, 40, 50], k = 3)",
        "checkArray(nums = [2,2,2,2,2,2,2,2,2,2,2,2], k = 4)",
        "checkArray(nums = [2,-1,4,-2,2], k = 3)",
        "checkArray(nums = [3,2,3,2,3], k = 3)"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [4, 3, 2, 1])",
        "semiOrderedPermutation(nums = [3, 2, 4, 1])",
        "semiOrderedPermutation(nums = [3, 5, 1, 4, 2])",
        "semiOrderedPermutation(nums = [4,2,3,1])",
        "semiOrderedPermutation(nums = [1, 3, 2, 6, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 5, 6, 1])",
        "semiOrderedPermutation(nums = [1,2,3,4,5,6,7,8,9,10])",
        "semiOrderedPermutation(nums = [4, 5, 2, 3, 1])"
    ],
    "sample_108": [
        "checkArray(nums = [1], k = 1)",
        "checkArray(nums = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1], k = 3)",
        "checkArray(nums = [100, 200, 300], k = 1)",
        "checkArray(nums = [0,1,0,1], k = 2)",
        "checkArray(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], k = 4)",
        "checkArray(nums = [2, -1, 1, 1, 1], k = 2)",
        "checkArray(nums = [1000000001, -1000000000], k = 1)",
        "checkArray(nums = [4, 1, 2, 2, 2], k = 4)",
        "checkArray(nums = [1, 2, 3, 3, 4, 3, 4, 5, 6], k = 2)",
        "checkArray(nums = [0, 4, 5, 0, 0, 9, 1, 4, 8, 3], k = 3)"
    ],
    "sample_39": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"abccb\")",
        "minimumCost(s = \"ABABABA\")",
        "minimumCost(s = \"ABCABC\")",
        "minimumCost(s = \"dabacc\")",
        "minimumCost(s = \"wbtzfzp\")"
    ],
    "sample_65": [
        "findValueOfPartition(a = [1, 2, 3, 4, 10])",
        "findValueOfPartition(a = [1, 2, 5, 3])",
        "findValueOfPartition(a = [1, 3, 4, 7])",
        "findValueOfPartition(a = [1, 5, 2, 3, 4])",
        "findValueOfPartition(a = [1, 5, 4, 2, 3])",
        "findValueOfPartition(a = [2, 6, 1, 4])",
        "findValueOfPartition(a = [1, 3, 10, 20])",
        "findValueOfPartition(a = [1, 2, 4, 8, 3])",
        "findValueOfPartition(a = [1, 2, 2, 3, 3, 3, 3, 3])",
        "findValueOfPartition(a = [5, 10, 15, 50, 20, 100, 80])"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 6, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 0, additionalTank = 1)",
        "distanceTraveled(mainTank = 0, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 2])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 0, 0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0,1,0,1,1,0,1,0,0,0,1,1,0,1])"
    ],
    "sample_106": [
        "checkArray(nums = [1], k = 0)",
        "checkArray(nums = [1, 1, 1], k = 1)",
        "checkArray(nums = [2, 2, 2, 2, 2], k = 2)",
        "checkArray(nums = [3, 1], k = 1)",
        "checkArray(nums = [2,1,2,1], k = 2)",
        "checkArray(nums = [3, 2, 2, 3, 1], k = 2)",
        "checkArray(nums = [3, 0, -2, 1, 2], k = 4)",
        "checkArray(nums = [2, 1, 5, 4, 2, 3, 1, 2], k = 2)",
        "checkArray(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1], k = 12)",
        "checkArray(nums = [5,2,3,4,2,1,1,3,2], k = 5)"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 1, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [0,1,2,3], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 2], threshold = 3)",
        "longestAlternatingSubarray(nums = [2,1,4], threshold = 5)",
        "longestAlternatingSubarray(nums = [3, 1, 5, 4, 2], threshold = 6)",
        "longestAlternatingSubarray(nums = [3, 2, 5, 2, 1], threshold = 2)",
        "longestAlternatingSubarray(nums = [0,1,1,0,1,1,1], threshold = 1)",
        "longestAlternatingSubarray(nums = [4,5,5], threshold = 5)",
        "longestAlternatingSubarray(nums = [4,5,6,7,3,2,1,0], threshold = 8)"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 23, 34])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [110, 111])",
        "countBeautifulPairs(nums = [12, 28, 36, 15])",
        "countBeautifulPairs(nums = [12, 24, 15, 21])",
        "countBeautifulPairs(nums = [113, 223, 132, 211])",
        "countBeautifulPairs(nums = [13, 5, 15, 4, 8, 2, 12, 9])",
        "countBeautifulPairs(nums = [5, 40, 23, 987, 23, 34, 45, 67])",
        "countBeautifulPairs(nums = [12, 66, 56, 99, 100, 26, 23, 84, 42, 31, 22, 61])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1], t = 1)",
        "longestAlternatingSubarray(nums = [1,2,3,4], t = 4)",
        "longestAlternatingSubarray(nums=[1,2,3], t=2)",
        "longestAlternatingSubarray(nums = [0,1,2,3], t = 3)",
        "longestAlternatingSubarray(nums = [0, 1, 2], t = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 200)",
        "longestAlternatingSubarray(nums = [3,4,3,4], t = 2)",
        "longestAlternatingSubarray(nums=[2,1,2,2,1], t=10)",
        "longestAlternatingSubarray(nums = [5,10,15,5,20], t = 20)",
        "longestAlternatingSubarray(nums = [1, 1, 2, 2, 1, 1, 2, 1, 2, 3], t = 2)"
    ],
    "sample_36": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"aaba\")",
        "minimumCost(s = \"abcac\")",
        "minimumCost(s = \"caaa\")",
        "minimumCost(s = \"zzaz\")",
        "minimumCost(s = \"caabac\")",
        "minimumCost(s = \"ACAC\")",
        "minimumCost(s = \"AABBBABBBB\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDABCDAB\")",
        "minLength(s = \"ABCDCDABAB\")",
        "minLength(s = \"ABABCDEABCD\")",
        "minLength(s = \"AAABCCDDD\")",
        "minLength(s = \"abcdCD\")",
        "minLength(s = \"ABACABCDA\")",
        "minLength(s = \"ABABACDABACDABACD\")",
        "minLength(s = \"ABACDABCDABACAB\")"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1])"
    ],
    "sample_9": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 1], [2, 1]])",
        "colorTheArray(n=2, queries=[[0, 1], [1, 1]])",
        "colorTheArray(n = 2, queries = [[1, 1], [0, 0]])",
        "colorTheArray(n=0, queries=[])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 0], [2, 0], [3, 0]])",
        "colorTheArray(n=3, queries=[[1, 2], [0, 2], [1, 1], [2, 2]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 2, 1], nums2 = [1, 1, 2])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [3, 4, 5])",
        "maxNonDecreasingLength(nums1 = [3, 4, 5], nums2 = [1, 2, 3])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 2, 4], nums2 = [2, 3, 4, 5, 6])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 2, 1, 4], nums2 = [1, 4, 2, 3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [2, 1, 5, 7, 8], nums2 = [2, 7, 5, 1, 8])",
        "maxNonDecreasingLength(nums1 = [3, 3, 1, 2], nums2 = [1, 3, 2])",
        "maxNonDecreasingLength(nums1 = [2, 5, 1, 7], nums2 = [2, 5, 7, 2])",
        "maxNonDecreasingLength(nums1 = [1, 7, 5, 5, 6, 7, 8], nums2 = [5, 7, 7, 9, 8, 7, 5])",
        "maxNonDecreasingLength(nums1 = [5, 4, 5, 3, 1, 3, 2, 1, 2, 3], nums2 = [5, 4, 5, 5, 5, 3, 2, 1, 2, 3])"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1,2,3,4,5], k = 2)",
        "maximumBeauty(nums = [1,2,3], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 1)",
        "maximumBeauty(nums = [1, 3, 2, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 4)",
        "maximumBeauty(nums = [4, 5, 6, 7], k = 2)",
        "maximumBeauty(nums = [1, 1, 1, 1, 1, 1, 1, 1], k = 0)",
        "maximumBeauty(nums = [1, 1, 3, 3, 5, 5, 5, 7, 9], k = 3)",
        "maximumBeauty(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5], k = 2)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1, 2])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1,2])",
        "findValueOfPartition(nums = [0,1])",
        "findValueOfPartition(nums = [1, 10])",
        "findValueOfPartition(nums = [1, 2, 2, 3])",
        "findValueOfPartition(nums = [1,2,2,3])",
        "findValueOfPartition(nums = [3, 3])",
        "findValueOfPartition(nums = [1, 2, 2, 3, 3])",
        "findValueOfPartition(nums = [1, 1000])"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1, 3, 5])",
        "findValueOfPartition(nums = [1, 3, 4, 5, 7])",
        "findValueOfPartition(nums = [1,2,2])",
        "findValueOfPartition(nums = [1,3,4,6,7])",
        "findValueOfPartition(nums = [3, 6, 8, 10])",
        "findValueOfPartition(nums = [2, 4, 5, 7, 9])",
        "findValueOfPartition(nums = [10, 11, 10])",
        "findValueOfPartition(nums = [1,1,5])",
        "findValueOfPartition(nums = [10, 2, 1])",
        "findValueOfPartition(nums = [4,5,8,9,12,17,19])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 4, 2, 3])",
        "semiOrderedPermutation(nums = [2, 4, 3, 1])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1])",
        "semiOrderedPermutation(nums = [1, 3, 2, 5, 4])",
        "semiOrderedPermutation(nums = [2,3,1,4])",
        "semiOrderedPermutation(nums = [5, 2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [4, 2, 3, 1, 5, 6, 7])"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [1, 2, 4, 3])",
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [3, 2, 4, 1])",
        "semiOrderedPermutation(nums = [4, 2, 3, 1])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [4, 2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4])",
        "semiOrderedPermutation(nums = [3, 2, 5, 4, 1])",
        "semiOrderedPermutation(nums = [4, 3, 1, 5, 2])",
        "semiOrderedPermutation(nums = [3,2,1,4,5,6])"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"efgh\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"a\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"xyz\", s3 = \"zxy\")",
        "findMinimumOperations(s1 = \"qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq",
        "findMinimumOperations(s1 = \"apple\", s2 = \"aple\", s3 = \"aple\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"aecd\", s3 = \"abdd\")",
        "findMinimumOperations(s1 = \"qwe\", s2 = \"rty\", s3 = \"uio\")",
        "findMinimumOperations(s1 = \"qw\", s2 = \"qw\", s3 = \"qwr\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"zzz\", s3 = \"zxz\")",
        "findMinimumOperations(s1 = \"beetroot\", s2 = \"potato\", s3 = \"potato\")"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"abaaba\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbbb\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabcbc\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbaaa\")",
        "longestSemiRepetitiveSubstring(s = \"bbaaa\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [])",
        "maximumNumberOfStringPairs(words = [])",
        "maximumNumberOfStringPairs(words = [\"a\"])",
        "maximumNumberOfStringPairs(words = [\"\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"xyxy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"banana\",\"anana\",\"nanan\"])",
        "maximumNumberOfStringPairs(words = [\"c\",\"a\",\"b\",\"a\"])",
        "maximumNumberOfStringPairs(words = [\"\", \"abcd\", \"dcba\", \"abcd\", \"dcba\"])",
        "maximumNumberOfStringPairs(words = [\"cocoa\", \"coconut\", \"coat\"])"
    ],
    "sample_247": [
        "minOperations(s1 = \"ab\", s2 = \"bc\", x = 1)",
        "minOperations(s1 = \"aaa\", s2 = \"bbb\", x = 1)",
        "minOperations(s1 = \"aab\", s2 = \"bbb\", x = 1)",
        "minOperations(s1 = \"cde\", s2 = \"abc\", x = 4)",
        "minOperations(s1 = \"abca\", s2 = \"abc\", x = 2)",
        "minOperations(s1 = \"bx\", s2 = \"ax\", x = 1)",
        "minOperations(s1 = \"xyxyxyxyxy\", s2 = \"xzxzxzxzxz\", x = 2)",
        "minOperations(s1 = \"abaab\", s2 = \"abbba\", x = 3)",
        "minOperations(s1 = \"abcbddb\", s2 = \"abcbddb\", x = 2)",
        "minOperations(s1 = \"zqpy\", s2 = \"rrcx\", x = 4)"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\",\"dcba\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"aba\",\"cdc\",\"eae\"])",
        "maximumNumberOfStringPairs(words = [\"mom\", \"dad\", \"dad\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"cbb\", \"bcb\"])",
        "maximumNumberOfStringPairs(words = [\"amazing\", \"azinga\", \"mazin\"])"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minGroupsForValidAssignment(nums = [3,3,2,2,1,1])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 3, 4, 4, 5, 5])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 1])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8])",
        "minGroupsForValidAssignment(nums = [3, 2, 3, 4, 1, 2, 3])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 1, 3, 4, 4])"
    ],
    "sample_246": [
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 3, m = 5)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 4, m = 3)",
        "differenceOfSums(n = 6, m = 3)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n=5, m=2)"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"11011000\", k = 3)",
        "shortestBeautifulSubstring(s = '1110111', k = 2)",
        "shortestBeautifulSubstring(s = \"001101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"00010111\", k = 2)",
        "shortestBeautifulSubstring(s = \"1000101111\", k = 2)",
        "shortestBeautifulSubstring(s = \"10111010111111101\", k = 3)",
        "shortestBeautifulSubstring(s = '1001101011', k = 4)",
        "shortestBeautifulSubstring(s = \"1010100011011\", k = 3)",
        "shortestBeautifulSubstring(s = \"111000110100111\", k = 2)",
        "shortestBeautifulSubstring(s = \"101110000000000011110001\", k = 3)"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"x\", s2 = \"y\", s3 = \"z\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"ca\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"adc\", s3 = \"aec\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"anana\", s3 = \"nana\")",
        "findMinimumOperations(s1 = \"foobar\", s2 = \"barbaz\", s3 = \"foobaz\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"caa\", s3 = \"daa\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"bab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"cdef\", s3 = \"efg\")",
        "findMinimumOperations(s1 = \"baa\", s2 = \"ab\", s3 = \"bbb\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"ananaban\", s3 = \"banana\")"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"cabca\")",
        "longestSemiRepetitiveSubstring(s = \"aaac\")",
        "longestSemiRepetitiveSubstring(s = \"bbbaba\")",
        "longestSemiRepetitiveSubstring(s = \"aabcddd\")",
        "longestSemiRepetitiveSubstring(s = \"bacabcba\")"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2], nums2 = [2, 3, 4])",
        "minSum(nums1 = [0, 0, 1], nums2 = [0, 2, 2])",
        "minSum(nums1 = [0, 1, 2], nums2 = [2, 3])",
        "minSum(nums1 = [1, 0, 2], nums2 = [3, 4, 1])",
        "minSum(nums1 = [1, 2], nums2 = [3, 0, 5])",
        "minSum(nums1 = [10, 1, 0], nums2 = [2, 0])",
        "minSum(nums1 = [3, 0, 1, 0], nums2 = [3, 0, 1, 2])",
        "minSum(nums1 = [2, 6, 9, 3], nums2 = [4, 7, 5, 1])"
    ],
    "sample_289": [
        "minimumSteps(s = \"1\")",
        "minimumSteps(s = \"1\")",
        "minimumSteps(s = \"1\")",
        "minimumSteps(s
        "minimumSteps(s = \"1011\")",
        "minimumSteps(s = \"100\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"0110011\")",
        "minimumSteps(s = \"100001000\")",
        "minimumSteps(s = \"01111011110111101111011110\")"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [1])",
        "maximumTripletValue(nums = [1, 0, 1])",
        "maximumTripletValue(nums = [-1, -1, -1])",
        "maximumTripletValue(nums = [1,2,1])",
        "maximumTripletValue(nums = [4, 1, 3])",
        "maximumTripletValue(nums = [-5, -1, 0, 1, 1])",
        "maximumTripletValue(nums = [-5, 2, 3, 7, -6])"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"abcd\", k = 1)",
        "beautifulSubstrings(s = \"abc\", k = 1)",
        "beautifulSubstrings(s = \"ab\", k = 2)",
        "beautifulSubstrings(s = \"aaaaaaa\", k = 1)",
        "beautifulSubstrings(s = \"abaab\", k = 2)",
        "beautifulSubstrings(s = \"chokudai\", k = 13)",
        "beautifulSubstrings(s = \"caio\", k = 4)",
        "beautifulSubstrings(s = \"aixu\", k = 2)",
        "beautifulSubstrings(s = \"P\", k = 3)",
        "beautifulSubstrings(s = \"kywhbqeigb\", k = 1)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"a\")",
        "minimumBeautifulSubstrings(s = \"01234\")",
        "minimumBeautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "minimumBeautifulSubstrings(s = \"abcdefg\")",
        "minimumBeautifulSubstrings(s = \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumBeautifulSubstrings(s = \"z\")",
        "minimumBeautifulSubstrings(s = \"aaaaa\")",
        "minimumBeautifulSubstrings(s = \"h\")",
        "minimumBeautifulSubstrings(s = \"bcdefg\")",
        "minimumBeautifulSubstrings(s = \"bbaaac\")"
    ],
    "sample_313": [
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[0], [1]])",
        "matrixSum(a = [[0, 1], [1, 0]])",
        "matrixSum(a = [[0, 0], [0, 0]])",
        "matrixSum(a = [[1], [1]])",
        "matrixSum(a = [[1], [2]])",
        "matrixSum(a = [[1, 0], [0, 1]])",
        "matrixSum(a = [[1, 0], [0, 1]])",
        "matrixSum(a = [[-1, 1], [1, 0]])"
    ],
    "sample_269": [
        "minSum(nums1 = [0, 1], nums2 = [2, 3])",
        "minSum(nums1 = [0, 0, 0], nums2 = [1, 2])",
        "minSum(nums1 = [2, 2, 2], nums2 = [1, 1, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 2, 0])",
        "minSum(nums1 = [1, 0, 3], nums2 = [2, 1, 0])",
        "minSum(nums1 = [1, 2, 4], nums2 = [1, 2])",
        "minSum(nums1 = [1, 1, 0, 2, 1], nums2 = [1, 1, 1, 1, 1])",
        "minSum(nums1 = [1, 0, 2, 1], nums2 = [0, 0, 1, 1])",
        "minSum(nums1 = [1, 2, 3, 1, 2], nums2 = [0, 0, 0, 0])",
        "minSum(nums1 = [1, 1, 2, 0, 3], nums2 = [1, 2, 0, 0, 3])"
    ],
    "sample_282": [
        "minOperations(nums1 = [1, 1, 1], nums2 = [2, 2])",
        "minOperations(nums1 = [1, 3, 2], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 1, 1], nums2 = [2, 2, 3])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minOperations(nums1 = [1,2], nums2 = [3,1])",
        "minOperations(nums1 = [1,3,1,2], nums2 = [1,2,3,1])",
        "minOperations(nums1 = [2,2,1,2], nums2 = [2,1,2,3])",
        "minOperations(nums1 = [7, 4, 6], nums2 = [6, 3, 6])",
        "minOperations(nums1 = [3, 4, 5, 9], nums2 = [5, 6, 10])",
        "minOperations(nums1 = [5, 10, 15, 20, 25], nums2 = [20, 21, 25, 30, 35])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2, 1, 2])",
        "alternatingSubarray(nums = [2, 1, 2, 1, 2, 1])",
        "alternatingSubarray(nums = [1,2,3,3,3,2,1])",
        "alternatingSubarray(nums = [1,2,1,1,3])",
        "alternatingSubarray(nums = [3, 1, 2, 1, 4])",
        "alternatingSubarray(nums = [1,2,3,2,1,2,3,4,1,2,3])",
        "alternatingSubarray(nums = [1, 2, 2, 2, 2, 1, 2, 2, 2])",
        "alternatingSubarray(nums = [1,1,1,2,2,2,2,1,1,1,1,1])",
        "alternatingSubarray(nums = [4,3,5,2,3,4,5,2,3,4])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2], money = 3)",
        "buyChoco(prices = [1, 2], money = 3)",
        "buyChoco(prices = [3, 1, 2], money = 6)",
        "buyChoco(prices = [1,2,3], money = 2)",
        "buyChoco(prices = [3, 4, 5], money = 6)",
        "buyChoco(prices = [1, 4, 2], money = 7)",
        "buyChoco(prices = [2, 3, 4, 100], money = 5)",
        "buyChoco(prices = [10, 40], money = 50)",
        "buyChoco(prices = [25, 20, 30], money = 50)",
        "buyChoco(prices = [6, 6, 3, 9], money = 15)"
    ],
    "sample_302": [
        "countSeniors(details = [\"Mike, 30\", \"Jane, 33\", \"Bob, 80\"])",
        "countSeniors(details = [\"123456789012345\", \"60000101234567\", \"70000101234567\"])",
        "countSeniors(details = ['AB123456X001234567', 'AB123456C101234567'])",
        "countSeniors(details = [\"Dhruv Ramakrishna\", \"2000\", \"Nandini\", \"2001\"])",
        "countSeniors(details = [\"Batman,33\", \"Bruce,32\", \"Wayne,63\", \"Clarke,23\", \"Kent,65\"])",
        "countSeniors(details = [\"Roshan30\", \"Yu20\", \"Pranav60\", \"Akshay30\"])",
        "countSeniors(details = [\"Sarah 1988\", \"Susan 2004\", \"Jacob 1966\", \"Helen 1999\"])",
        "countSeniors(details = [\"Mr. John Doe 12/22/1992 2\", \"Mr. Jane Doe 05/16/1964 2\"])",
        "countSeniors(details = ['18091998-07-04', '18091998-10-24', '18091998-06-02', '18091998-06-02'])",
        "countSeniors(details = [\"2009-10-23 00:00:00 19 45 23 1250.00\", \"2009-10-23 00:00:00 20 45 23 1250.00\"])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"a\", k = 1)",
        "beautifulSubstrings(s = \"abcd\", k = 2)",
        "beautifulSubstrings(s = \"abcdef\", k = 5)",
        "beautifulSubstrings(s = \"abcb\", k = 4)",
        "beautifulSubstrings(s = \"abccb\", k = 2)",
        "beautifulSubstrings(s = \"abbcdaef\", k = 3)",
        "beautifulSubstrings(s = \"gibberish\", k = 1)",
        "beautifulSubstrings(s = \"asdff\", k = 4)",
        "beautifulSubstrings(s = \"lfjgnkjgngjkfgnkfgnkkjg\", k = 2)"
    ],
    "sample_255": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4])",
        "minimumSum(nums = [1,2,4,8])",
        "minimumSum(nums = [1, 4, 2])",
        "minimumSum(nums = [1, 6, 4, 5])",
        "minimumSum(nums = [8, 6, 4, 2, 1])",
        "minimumSum(nums=[2, 5, 3, 1, 6, 4, 7])",
        "minimumSum(nums = [20,30,10,10,60,80])",
        "minimumSum(nums = [11,2,5,7,9,6,10])",
        "minimumSum(nums = [9,7,5,1,3,4,10,15])"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,2,2,3,3])",
        "minGroupsForValidAssignment(nums=[1,3,1,2])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,15,16,17,18,19,20])",
        "minGroupsForValidAssignment(nums = [10,8,10,10,8])",
        "minGroupsForValidAssignment(nums = [3,3,2,1,3,3,1])",
        "minGroupsForValidAssignment(nums = [3,3,2,1,1,2,3,2,3])",
        "minGroupsForValidAssignment(nums = [80, 100, 120, 140, 160, 180])",
        "minGroupsForValidAssignment(nums = [2, 4, 4, 1, 1, 4, 3, 2])",
        "minGroupsForValidAssignment(nums = [1, 3, 6, 7, 4, 3, 4, 6, 1])",
        "minGroupsForValidAssignment(nums = [12, 22, 26, 27, 30, 13])"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1, 17, 5, 10, 13, 15, 10, 5, 16, 8])",
        "alternatingSubarray(nums=[1,2,3,1,2])",
        "alternatingSubarray(nums = [4,2,3,5,1])",
        "alternatingSubarray(nums = [2,1,3,5,6,4])",
        "alternatingSubarray(nums = [5,3,6,4,2])",
        "alternatingSubarray(nums=[0,1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums=[3,2,4,5])",
        "alternatingSubarray(nums = [1,3,2,5,3,7,8,9,10])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = \"1101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1011101\", k = 3)",
        "shortestBeautifulSubstring(s = \"0110100\", k = 2)",
        "shortestBeautifulSubstring(s = \"10110101\", k = 2)",
        "shortestBeautifulSubstring(s = '101010101', k = 2)",
        "shortestBeautifulSubstring(s = \"0000000001111111\", k = 2)",
        "shortestBeautifulSubstring(s = \"10111101111011111000100\", k = 3)",
        "shortestBeautifulSubstring(s = \"10101000101010101000001\", k = 4)",
        "shortestBeautifulSubstring(s = \"011011011001010110110100010111010100100110011011000010000101011001100010100010101011011010000000011001010101001110110011011101110111101100000101001101011010110111010101101111010101111010101110110101011001100011000111101110110110111100111100011011011011101101011011001111111001101111001111101100000011111011010110101101110010011000111101111010110111101110011100100101000011010101010001011110011000100001011010101110010110010110100011101010000011110110100011101001100011011001110000000010011111001101110110000110011101001010111100101000101100010101",
        "shortestBeautifulSubstring(s
    ],
    "sample_293": [
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"01010\")",
        "minimumSteps(s = \"00100\")",
        "minimumSteps(s
        "minimumSteps(s = \"00101\")",
        "minimumSteps(s = \"10010\")",
        "minimumSteps(s = \"010001000\")",
        "minimumSteps(s = \"00100000000000000000\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abba\")",
        "longestSemiRepetitiveSubstring(s = \"abbba\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaab\")",
        "longestSemiRepetitiveSubstring(s = \"12341234\")",
        "longestSemiRepetitiveSubstring(s = \"mamam\")",
        "longestSemiRepetitiveSubstring(s = \"abcaaabbb\")",
        "longestSemiRepetitiveSubstring(s = \"bbbabbbabbbb\")",
        "longestSemiRepetitiveSubstring(s = \"acbaccb\")"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,3])",
        "minGroupsForValidAssignment(nums = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [9,3,9,3,9,7,9])",
        "minGroupsForValidAssignment(nums = [3,1,1,3,2,1,2,1,4,4,4])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 4, 6, 6, 6, 7, 7])",
        "minGroupsForValidAssignment(nums = [2,4,4,5,5,7,10,12,16,18])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 1, 1, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9])",
        "minGroupsForValidAssignment(nums = [2,1,1,3,4,3,2,1,1,4,4,1,2,2,3,1])"
    ],
    "sample_307": [
        "countSeniors(details = [\"19801234\", \"19891234\", \"19901234\"])",
        "countSeniors(details = [\"Ram, 21, 9911111111\", \"Shyam, 61, 9911111112\"])",
        "countSeniors(details = [\"01/03/2000\", \"13/02/1995\"])",
        "countSeniors(details = [\"Brian, 20, 80\", \"Jenny, 21, 59\"])",
        "countSeniors(details = [\"000123John Smith\", \"000234Jane Doe\", \"000345Rick Astley\", \"000456Michael Jordan\"])",
        "countSeniors(details = [\"Sara 19 61\", \"Jacob 17 80\"])",
        "countSeniors(details = [\"4455-5666-7788\", \"7788-9988-6699\"])",
        "countSeniors(details = [\"John Doe 01/01/2010 40\", \"Mary Smith 12/12/2020 59\", \"Jack Woolf 11/11/1969 61\"])",
        "countSeniors(details = [\"70141234\", \"48132342\", \"60123334\", \"38122345\"])",
        "countSeniors(details = [\"19790115\", \"20010522\", \"19930901\", \"19970427\", \"20010522\", \"19950427\", \"19970427\"])"
    ],
    "sample_290": [
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"010010\")",
        "minimumSteps(s = \"01234\")",
        "minimumSteps(s = \"0123\")",
        "minimumSteps(s=\"00000000000000\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,2], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums = [1,2,3,4], moveFrom = [1,2], moveTo = [2,1])",
        "relocateMarbles(nums = [1,2], moveFrom = [1], moveTo = [1])",
        "relocateMarbles(nums=[1,2], moveFrom=[0,0], moveTo=[0,1])",
        "relocateMarbles(nums=[1,2,3], moveFrom=[0], moveTo=[1])",
        "relocateMarbles(nums=[1,2,3,4], moveFrom=[1,2,3,4], moveTo=[2,1,4,3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 1, 3], moveTo = [3, 3, 3])",
        "relocateMarbles(nums = [1,1,2,3,4,5], moveFrom = [1,1,2], moveTo = [1,1,2])",
        "relocateMarbles(nums = [1, 2, 3, 1, 4, 2], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [0, 1, 2, 4, 7, 8, 11], moveFrom = [1, 7, 8], moveTo = [4, 11, 11])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [4, 2, 5, 7])",
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [4,2,5,7])",
        "alternatingSubarray(nums = [0, 1, 1, 0])",
        "alternatingSubarray(nums = [1, 2, 1, 2])",
        "alternatingSubarray(nums = [1, 2, 3, 1, 2, 3])",
        "alternatingSubarray(nums = [3, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 1, 2, 3, 4])",
        "alternatingSubarray(nums = [1,2,3,4,3,2])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"abcdef\", k = 3)",
        "beautifulSubstrings(s = \"beautiful\", k = 10)",
        "beautifulSubstrings(s = \"baby\", k = 2)",
        "beautifulSubstrings(s = \"abaeiou\", k = 3)",
        "beautifulSubstrings(s = \"panama\", k = 3)",
        "beautifulSubstrings(s = \"eeeae\", k = 3)",
        "beautifulSubstrings(s = \"babcia\", k = 1)",
        "beautifulSubstrings(s = \"Melissa\", k = 11)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [0,0,0])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [1,2,3,4])",
        "maximumTripletValue(nums = [0, -1, 1, -2, 2])",
        "maximumTripletValue(nums = [10, 5, 3, 1])",
        "maximumTripletValue(nums = [-4,-2,-1,0,1,2,4])",
        "maximumTripletValue(nums = [3,1,1,3])",
        "maximumTripletValue(nums = [2,3,4,1,5,1])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"xyxy\", \"yxyx\"])",
        "maximumNumberOfStringPairs(words = ['ab', 'cd', 'dc'])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"aba\", \"aa\", \"baa\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"b\", \"x\", \"y\"])",
        "maximumNumberOfStringPairs(words=[\"aab\",\"aba\",\"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"cat\", \"cog\", \"dog\", \"goc\"])",
        "maximumNumberOfStringPairs(words = ['abcd', 'cdef', 'dcba', 'fedc'])",
        "maximumNumberOfStringPairs(words=['ab', 'ab', 'ba', 'ba', 'mn', 'mn', 'nb', 'nb'])"
    ],
    "sample_245": [
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 3, m = 5)",
        "differenceOfSums(n = 3, m = 5)",
        "differenceOfSums(n = 3, m = 5)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 6, m = 2)",
        "differenceOfSums(n = 6, m = 2)",
        "differenceOfSums(n = 3, m = 2)",
        "differenceOfSums(n = 12, m = 5)",
        "differenceOfSums(n = 13, m = 5)"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2], money = 3)",
        "buyChoco(prices = [10, 20, 30, 40], money = 30)",
        "buyChoco(prices = [1, 1, 1], money = 2)",
        "buyChoco(prices = [5, 6, 7], money = 13)",
        "buyChoco(prices = [1, 1, 1, 1, 1], money = 3)",
        "buyChoco(prices = [10, 9], money = 19)",
        "buyChoco(prices = [5, 10, 20, 50], money = 35)",
        "buyChoco(prices = [10, 5, 3, 4, 20], money = 20)",
        "buyChoco(prices = [4, 5, 2, 6, 3, 9, 7, 2, 5, 8], money = 10)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"aba\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"abab\"])",
        "maximumNumberOfStringPairs(words = [\"pa\", \"ap\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"cba\",\"def\",\"fed\"])",
        "maximumNumberOfStringPairs(words=[\"cat\", \"act\", \"tap\", \"pata\"])",
        "maximumNumberOfStringPairs(words = [\"deer\",\"reed\",\"rider\",\"ride\"])",
        "maximumNumberOfStringPairs(words = [\"hank\", \"lank\", \"bank\"])"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"aabccbb\")",
        "longestSemiRepetitiveSubstring(s = \"abbaabba\")",
        "longestSemiRepetitiveSubstring(s = \"aabbba\")",
        "longestSemiRepetitiveSubstring(s = \"ababbb\")",
        "longestSemiRepetitiveSubstring(s = \"bbabba\")",
        "longestSemiRepetitiveSubstring(s = \"123345677\")",
        "longestSemiRepetitiveSubstring(s = \"heeellooooo\")",
        "longestSemiRepetitiveSubstring(s = \"tweets\")"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"a\",\"b\",\"c\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"banana\", \"dog\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"banana\", \"dog\", \"nana\"])",
        "minimizeConcatenatedLength(words = [\"aba\",\"a\",\"b\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"ba\",\"ab\",\"ab\"])",
        "minimizeConcatenatedLength(words = [\"aaa\", \"bbb\", \"aba\"])",
        "minimizeConcatenatedLength(words = [\"cat\",\"dog\",\"bat\",\"man\",\"rat\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"bc\",\"cd\",\"ef\",\"ab\"])",
        "minimizeConcatenatedLength(words = [\"apple\", \"banana\", \"pap\"])"
    ],
    "sample_323": [
        "isFascinating(n = 1)",
        "isFascinating(n = 123)",
        "isFascinating(n = 10)",
        "isFascinating(n = 11)",
        "isFascinating(n = 4)",
        "isFascinating(n = 111)",
        "isFascinating(n = 12345)",
        "isFascinating(n=5)",
        "isFascinating(n=9)",
        "isFascinating(n = 197)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"abacaba\")",
        "longestSemiRepetitiveSubstring(s = \"abcdcba\")",
        "longestSemiRepetitiveSubstring(s = \"aaa\")",
        "longestSemiRepetitiveSubstring(s = \"bananas\")",
        "longestSemiRepetitiveSubstring(s = \"aabaabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaab\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaba\")",
        "longestSemiRepetitiveSubstring(s = \"anana\")",
        "longestSemiRepetitiveSubstring(s = \"aabccbbaab\")"
    ],
    "sample_305": [
        "countSeniors(details = [])",
        "countSeniors(details = [\"000000000000\"])",
        "countSeniors(details = [\"098765432190\", \"123456789012\", \"234567890123\"])",
        "countSeniors(details=[\"Jane Doe\", \"1947\"])",
        "countSeniors(details = [\"ABCD,24,M\", \"EFGH,45,M\", \"IJKL,18,F\"])",
        "countSeniors(details = [\"Shreyas\", \"Mumbai\", \"29\", \"1999\"])",
        "countSeniors(details = [\"Kiran\", \"25\", \"1188\"])",
        "countSeniors(details=[\"1990-04-12\",\"2001-06-07\",\"1989-11-16\"])",
        "countSeniors(details=[\"Maria 23 45\", \"Jos\u00e9 19 97\", \"Felipe 56 23\"])",
        "countSeniors(details=['Tony Stark', '1999-03-29', '1234567890', 'tony@stark.com', 'Male', '185', '80', '160', 'Single', 'King of New York', '500000'])"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [1,2,3,3,4,4,5,6])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "minGroupsForValidAssignment(nums = [3, 3, 2, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 2, 3])",
        "minGroupsForValidAssignment(nums = [2, 4, 3, 3, 5, 2, 1, 1])",
        "minGroupsForValidAssignment(nums = [3, 4, 5, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [4, 4, 4, 2, 2, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [30,10,20,10,10])",
        "minGroupsForValidAssignment(nums = [4,5,3,2,1,6,7])",
        "minGroupsForValidAssignment(nums = [7, 14, 1, 3, 2, 6, 5, 13, 10, 12])"
    ],
    "sample_257": [
        "minimumSum(nums = [])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6, 10])",
        "minimumSum(nums = [3, 4, 3, 3, 4])",
        "minimumSum(nums = [3, 4, 2, 3, 3])",
        "minimumSum(nums = [8, 1, 4, 6])",
        "minimumSum(nums = [2, 1, 2, 5, 1, 3])",
        "minimumSum(nums = [3, 2, 7, 4, 2, 9, 8])",
        "minimumSum(nums = [2, 4, 6, 8, 2, 10, 2, 4])",
        "minimumSum(nums = [3, 2, 7, 2, 9, 4, 5])"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"a\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"b\"])",
        "maximumNumberOfStringPairs(words = [\"dog\", \"god\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yz\", \"zx\"])",
        "maximumNumberOfStringPairs(words = [\"tap\", \"cat\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"army\", \"mary\"])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = \"10101\", k = 2)",
        "shortestBeautifulSubstring(s = \"011101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101111\", k = 2)",
        "shortestBeautifulSubstring(s = \"10111100\", k = 2)",
        "shortestBeautifulSubstring(s = \"01100100\", k = 2)",
        "shortestBeautifulSubstring(s = \"1001011110\", k = 3)",
        "shortestBeautifulSubstring(s = '01001001001', k = 2)",
        "shortestBeautifulSubstring(s = \"01010101101001010\", k = 3)",
        "shortestBeautifulSubstring(s = \"000110110001010011000110001010\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110000010001011010101000101110010100110001001000100111101000001110001000110111000110111000110111000110011110011000111000011010011011100011001011100010110111000100101011000110110101101100011011100011011100010111000100100101110001101101011000100010000011001111000100001111001101110001111110111011100010010111000100100101110001001010110001101101011011000110111000110111000101110001001001011100010010101100011011010110001101110001101110001011100011001111000100010000011001111000100001111001101110001111110111011100010"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [5, 9, 8, 3, 1], limit = 2)",
        "lexicographicallySmallestArray(nums = [10, 8, 5, 9, 3], limit = 2)",
        "lexicographicallySmallestArray(nums = [8, 5, 9, 1, 3], limit = 6)",
        "lexicographicallySmallestArray(nums = [9, 1, 3, 8, 5], limit = 3)",
        "lexicographicallySmallestArray(nums = [1, 9, 3, 8, 5], limit = 10)",
        "lexicographicallySmallestArray(nums = [9, 8, 3, 1, 5], limit = 10)",
        "lexicographicallySmallestArray(nums = [2, 5, 3, 9, 1, 8], limit = 1)",
        "lexicographicallySmallestArray(nums = [100, 200, 300, 10, 20, 30], limit = 100)",
        "lexicographicallySmallestArray(nums = [1, 10, 100, 9, 11], limit = 3)",
        "lexicographicallySmallestArray(nums = [10, 3, 5, 8, 9, 12, 3], limit = 11)"
    ],
    "sample_310": [
        "matrixSum(a = [[0, 1], [1, 0]])",
        "matrixSum(a = [[0, 1], [1, 2]])",
        "matrixSum(a = [[0, 0], [1, 0]])",
        "matrixSum(a = [[-1, -2], [-3, -4]])",
        "matrixSum(a = [[0, 1], [2, 1]])",
        "matrixSum(a = [[1, 0], [1, 0]])",
        "matrixSum(a = [[1, 0], [2, 3]])",
        "matrixSum(a = [[1, 2, 3], [0, 0, 0]])",
        "matrixSum(a = [[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]])",
        "matrixSum(a = [[-1,-2,-3], [-4,-5,-6], [-7,-8,-9]])"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"abccba\", k = 3)",
        "beautifulSubstrings(s = \"abcdaf\", k = 3)",
        "beautifulSubstrings(s = \"abcdaebcd\", k = 2)",
        "beautifulSubstrings(s = \"qwqe\", k = 3)",
        "beautifulSubstrings(s = \"xyyyzz\", k = 3)",
        "beautifulSubstrings(s = \"caacdab\", k = 4)",
        "beautifulSubstrings(s = \"abahegagibag\", k = 2)",
        "beautifulSubstrings(s = \"IiOoIi\", k = 4)",
        "beautifulSubstrings(s = \"lgojuudkfut\", k = 2)"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"b\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"ab\", \"bb\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"nba\", \"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"ana\", \"anana\", \"banana\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"aba\", \"b\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"poop\", \"poop\", \"nope\"])",
        "maximumNumberOfStringPairs(words = [\"par\", \"arp\", \"a\", \"rrp\"])",
        "maximumNumberOfStringPairs(words = [\"dddd\",\"eeee\",\"cccc\",\"dddd\",\"cccc\"])",
        "maximumNumberOfStringPairs(words = [\"hello\", \"love\", \"hate\", \"code\", \"too\"])"
    ],
    "sample_325": [
        "isFascinating(n = 1234)",
        "isFascinating(n = 12345)",
        "isFascinating(n = 5)",
        "isFascinating(n = 3)",
        "isFascinating(n = 100)",
        "isFascinating(n = 375)",
        "isFascinating(n = 46)",
        "isFascinating(n = 567)",
        "isFascinating(n = 371)",
        "isFascinating(n = 7468)"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 3, 2])",
        "maximumTripletValue(nums = [5, 4, 3, 2, 1])",
        "maximumTripletValue(nums = [1, 0, -1, 0])",
        "maximumTripletValue(nums = [2, 1, -1, 4])",
        "maximumTripletValue(nums = [-10, -20, 10, 20, 30])",
        "maximumTripletValue(nums = [1, 3, -2, 10])",
        "maximumTripletValue(nums = [-3, 4, -1, 2])"
    ],
    "sample_312": [
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1,2,3], [4,5,6], [7,8,9]])",
        "matrixSum(nums = [[1, 1], [1, 1]])",
        "matrixSum(nums = [[1,0,0], [0,0,1], [1,1,1]])",
        "matrixSum(nums = [[2, 2, 2], [2, 2, 2], [2, 2, 2]])",
        "matrixSum(nums = [[0,0,1,1],[1,1,2,2]])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3], b = [2, 1, 3])",
        "minOperations(a = [1, 2, 3, 4], b = [5, 6, 7, 8])",
        "minOperations(a = [1, 2, 5], b = [3, 4, 6])",
        "minOperations(a = [1, 2, 0], b = [2, 1, 0])",
        "minOperations(a = [1, 2, 0], b = [2, 1, 1])",
        "minOperations(a = [1, 1, 2], b = [2, 2, 2])",
        "minOperations(a = [5, 3, 2, 4, 1], b = [1, 3, 2, 4, 5])",
        "minOperations(a = [1, 2, 1, 2], b = [1, 1, 2, 3])",
        "minOperations(a = [5, 4, 1], b = [7, 3, 2])",
        "minOperations(a = [5, 5, 6, 7], b = [1, 5, 2, 8])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1, 1, 1], nums2 = [2, 2, 2])",
        "minOperations(nums1 = [1,1,1], nums2 = [2,2,2])",
        "minOperations(nums1 = [1,1,1], nums2 = [2,2,2])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "minOperations(nums1 = [1,2], nums2 = [2,1])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minOperations(nums1 = [1,1,2], nums2 = [2,2,1])",
        "minOperations(nums1 = [2,2,2,2], nums2 = [2,2,2,2])",
        "minOperations(nums1 = [3,2,4], nums2 = [3,2,4])",
        "minOperations(nums1 = [3, 1, 1, 2, 3], nums2 = [3, 2, 1, 2, 3])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [3, 1, 2])",
        "maximumTripletValue(nums = [1, 1, 1, 1, 1, 1])",
        "maximumTripletValue(nums = [1, 4, 3, 2])",
        "maximumTripletValue(nums = [-2, -1, 2])",
        "maximumTripletValue(nums = [-1, 1, 0, -3, 2])",
        "maximumTripletValue(nums = [1, -1, 2, -2])",
        "maximumTripletValue(nums = [-2, -2, 1, 1])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"10110110\", k = 3)",
        "shortestBeautifulSubstring(s = '110', k = 2)",
        "shortestBeautifulSubstring(s = '1001', k = 2)",
        "shortestBeautifulSubstring(s = '1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s = \"10000\", k = 3)",
        "shortestBeautifulSubstring(s = \"101011111\", k = 5)",
        "shortestBeautifulSubstring(s = \"010111011001\", k = 5)",
        "shortestBeautifulSubstring(s = \"1001110111010\", k = 3)",
        "shortestBeautifulSubstring(s = \"00000000001010101010101\", k = 4)",
        "shortestBeautifulSubstring(s = '1110110110001101101111101011110101100010110101000101001000101010111111101101101011011010101111111111111111111110110110101011010111111111110110110110110110101111111111111111111101101101101101101011111111111111111111011011010110101111111111110110110110110110101111111111111111111101101101011010111111111111011011011011011010111111111111111111111011011011011011010111111111111111111111110110110101101011111111111101101101101101101011111111111111111111111101101101011010111111111111011011011011011010111111111111111111"
    ],
    "sample_256": [
        "minimumSum(nums = [8, 1, 7, 3, 2])",
        "minimumSum(nums = [3,5,7,2,6])",
        "minimumSum(nums = [5, 4, 2, 1, 8, 3])",
        "minimumSum(nums = [1,5,2,3,5,7])",
        "minimumSum(nums = [2, 4, 5, 7, 8, 12, 14])",
        "minimumSum(nums = [6,7,9,6,1,3])",
        "minimumSum(nums = [1, 3, 9, 5, 3, 3, 1, 3])",
        "minimumSum(nums = [1, 5, 10, 2, 17, 12, 0])",
        "minimumSum(nums = [4, 2, 5, 4, 2, 4, 5, 3, 4, 1, 5])",
        "minimumSum(nums = [9, 9, 3, 10, 2, 3, 4, 10, 3, 5, 2, 5, 4, 3])"
    ],
    "sample_291": [
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s
        "minimumSteps(s = \"10011\")",
        "minimumSteps(s = \"0001\")",
        "minimumSteps(s = \"10101010\")",
        "minimumSteps(s = \"1011101\")",
        "minimumSteps(s = \"010101010101010\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1, 2], nums2 = [2, 1])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [4, 3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [2, 3, 1, 4])",
        "minOperations(nums1 = [1, 1], nums2 = [0, 0])",
        "minOperations(nums1 = [1, 1, 2], nums2 = [1, 2, 1])",
        "minOperations(nums1 = [1, 1, 3], nums2 = [4, 4, 2])",
        "minOperations(nums1 = [1, 3, 2, 4], nums2 = [3, 1, 4, 2])",
        "minOperations(nums1 = [3,4,5,6], nums2 = [2,3,4,5])",
        "minOperations(nums1 = [4, 1, 3], nums2 = [2, 1, 1])",
        "minOperations(nums1 = [3, 5, 1], nums2 = [4, 2, 1])"
    ],
    "sample_277": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])",
        "findChampion(grid = [[1, 1, 1], [1, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [1, 0, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 0]])",
        "findChampion(grid = [[2, 0, 0], [0, 1, 2], [2, 0, 0]])",
        "findChampion(grid = [[0,1,0,0], [1,0,0,0], [0,0,0,0], [1,1,0,0]])",
        "findChampion(grid = [[1,0,0,0,1],[1,1,1,1,1],[0,0,1,0,0],[0,0,1,0,0]])",
        "findChampion(grid = [[2,0,0,2],[0,1,1,0],[0,0,2,0],[2,0,0,2]])"
    ],
    "sample_244": [
        "differenceOfSums(n = 3, m = 5)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 6, m = 3)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n = 20, m = 3)",
        "differenceOfSums(n = 20, m = 4)",
        "differenceOfSums(n = 30, m = 5)",
        "differenceOfSums(n = 13, m = 3)"
    ],
    "sample_292": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"01001\")",
        "minimumSteps(s = \"011\")",
        "minimumSteps(s = \"01010101\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"110111\")",
        "minimumSteps(s = \"000111\")",
        "minimumSteps(s = \"010101001\")",
        "minimumSteps(s = \"1111101\")"
    ],
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 3])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 3, 2, 4, 3])",
        "alternatingSubarray(nums = [1, 4, 3])",
        "alternatingSubarray(nums = [1, 3, 3, 3])",
        "alternatingSubarray(nums = [4, 1, 4, 2])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 1, 3, 5])",
        "alternatingSubarray(nums = [4, 2, 2, 5, 1])",
        "alternatingSubarray(nums = [4, 3, 5, 2, 3, 5, 2, 3, 5])"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [2], moveFrom = [1], moveTo = [3])",
        "relocateMarbles(nums = [1, 2], moveFrom = [], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [3, 1])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [1])",
        "relocateMarbles(nums = [1,2], moveFrom = [1,1], moveTo = [2,2])",
        "relocateMarbles(nums = [1, 2, 4], moveFrom = [1, 4], moveTo = [2, 3])",
        "relocateMarbles(nums = [0, 1, 2], moveFrom = [0, 2], moveTo = [1, 2])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 2, 3], moveTo = [4, 2, 1])",
        "relocateMarbles(nums = [2, 4, 6, 7, 9, 10, 11, 12, 15],\nmoveFrom = [11, 11, 6, 9, 2, 12, 15, 11, 4],\nmoveTo = [11, 10, 6, 9, 2, 12, 15, 11, 4])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [0,0,0])",
        "maximumTripletValue(nums = [0, 0, 0, 0])",
        "maximumTripletValue(nums = [1, 1, 1, 1, 1])",
        "maximumTripletValue(nums = [5, 5, 5])",
        "maximumTripletValue(nums = [2, 1, 5])",
        "maximumTripletValue(nums = [1, -2, 0, 3, -5])"
    ],
    "sample_273": [
        "findChampion(grid = [[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [1, 1, 1], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 1], [0, 1, 1], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 0], [1, 1, 0]])",
        "findChampion(grid = [[0, 0, 0, 1], [1, 0, 0, 1], [0, 1, 1, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[0, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 1, 0, 1]])",
        "findChampion(grid = [[0, 0, 1, 1, 0, 1], [1, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 1], [1, 1, 1, 0, 1, 1], [0, 1, 1, 1, 1, 1]])"
    ],
    "sample_267": [
        "minSum(nums1 = [1, 2, 3], nums2 = [-1, -2, -3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [2], nums2 = [2, 0])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [0, 0, 0])",
        "minSum(nums1 = [2], nums2 = [1, 1, 1])",
        "minSum(nums1 = [1, 1, 2, 2], nums2 = [2, 2, 3, 3])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [0, -1, -2, -3, -4])",
        "minSum(nums1 = [1,2,3], nums2 = [-3,-4,-5])",
        "minSum(nums1 = [1, 1, 1, 2, 1, 1, 1], nums2 = [-1, -1, -1, -1, -1])",
        "minSum(nums1 = [1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], nums2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_294": [
        "minimumSteps(s = \"10010\")",
        "minimumSteps(s = \"1000\")",
        "minimumSteps(s = \"110101\")",
        "minimumSteps(s = \"100010\")",
        "minimumSteps(s = \"1111111\")",
        "minimumSteps(s = '001')",
        "minimumSteps(s = \"0101111101\")",
        "minimumSteps(s = \"001101000\")",
        "minimumSteps(s = \"0010111110000100\")",
        "minimumSteps(s = \"0000000000001000110001100011000\")"
    ],
    "sample_274": [
        "findChampion(grid = [[1, 0, 0], [0, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[1, -1, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 0, 0], [1, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[1, 1, 0], [0, 1, -1], [1, 1, 1]])",
        "findChampion(grid = [[1, -1, 0], [0, 1, 0], [0, -1, -1]])",
        "findChampion(grid = [[1, 2, 0], [2, 1, 1], [0, 0, 1]])",
        "findChampion(grid = [[1, 1, 0], [-1, -1, -1], [1, 1, 1]])",
        "findChampion(grid = [[1, -1, 1], [0, -1, -1], [1, -1, -1]])",
        "findChampion(grid = [[1,1,0,0], [0,0,0,1], [1,0,0,0]])",
        "findChampion(grid = [[2, 1, 1, 0, 2], [0, 0, 0, 0, 0], [0, 1, 1, 0, 0], [1, 0, 0, 0, 2], [0, 0, 0, 0, 0]])"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,6,7])",
        "minGroupsForValidAssignment(nums = [5,6,7,8,9,10,11,12])",
        "minGroupsForValidAssignment(nums = [12,12,2,2])",
        "minGroupsForValidAssignment(nums = [13,13,13,14,15,15,15,16,16,17])",
        "minGroupsForValidAssignment(nums = [2, 2, 5, 3, 4, 4, 3])",
        "minGroupsForValidAssignment(nums = [11,2,3,11,11,2,4,5])",
        "minGroupsForValidAssignment(nums = [9,7,1,5,4,4,1,3,3,8,8,7,8,5,6,5,3,6,6,4,4,3,8,4,1,2,9,6,8,5,7,7,4,3,4,4,9,1,2,4,3,5,9,5,9,8,1,7,2,9,6,6,6,7,6,2,7,5,6,3,7,9,7,1,5,3,4,4,5,6,3,2,1,7,8,8,4,4,3,1,8,6,4,1,2,4,8,3,1,9,5,2,6,9,6,5,7,4,7,4,2,3,1,1,1,4,7,2,2,6,3,7,7,1,5,7,3,5,9,6,9,3,7,5,1,6,5,4,1,8,2,8,6,7,4,3,8,6,2,9,9,4,7,8,9,6,4,3,7,8,3,1,3,2,1,2,1,4,8,1,8,5,7,2,4,6,1,1,8,2,7,9,7,8,5,1,1,8,3,5,7,7,7,5,8,6,4,1,8,4,7,9,5,2,3,5,2,1,6,3,7,3,1,2,9,4,6,6,6,1,9,9,8,6,1,7,4,5,5,4,1,6,9,2,7,3,9,2,2,5,2,5,5,5,1,2,5,5,8,8,5,6,5,7,9,1,7,2,4,1,2,7,8,2,6,8,5,9,6,2,"
    ],
    "sample_270": [
        "minSum(nums1 = [0], nums2 = [1])",
        "minSum(nums1 = [1], nums2 = [2])",
        "minSum(nums1 = [1], nums2 = [2])",
        "minSum(nums1 = [1, 1], nums2 = [2, 0])",
        "minSum(nums1 = [0,0,0], nums2 = [0,0,0])",
        "minSum(nums1 = [2, 4, 3], nums2 = [1, 5, 0])",
        "minSum(nums1 = [1, 0], nums2 = [1, 1, 1, 1, 1])",
        "minSum(nums1 = [0, 2, 0, 0], nums2 = [0, 2, 0, 0])",
        "minSum(nums1 = [1, 3, 5], nums2 = [2, 7, 10])",
        "minSum(nums1 = [2, 1, 4], nums2 = [3, 4, 5])"
    ],
    "sample_317": [
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 4)",
        "buyChoco(prices = [1,2,3], money = 6)",
        "buyChoco(prices = [2,3,4,5], money = 5)",
        "buyChoco(prices = [1,2,3,4,5], money = 3)",
        "buyChoco(prices = [4, 2, 6], money = 7)",
        "buyChoco(prices = [1,2,3,4,5,6,7,8,9], money = 4)",
        "buyChoco(prices = [2,3,4,5,6,7,8,9], money = 10)",
        "buyChoco(prices = [3,4,7,10], money = 10)",
        "buyChoco(prices = [5, 4, 6, 2], money = 8)",
        "buyChoco(prices = [20, 3, 4, 1], money = 25)"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"a\", k = 1)",
        "beautifulSubstrings(s = \"bcd\", k = 2)",
        "beautifulSubstrings(s = \"asdf\", k = 1)",
        "beautifulSubstrings(s = \"code\", k = 2)",
        "beautifulSubstrings(s = \"aaaa\", k = 3)",
        "beautifulSubstrings(s = \"aab\", k = 3)",
        "beautifulSubstrings(s = \"lol\", k = 4)",
        "beautifulSubstrings(s = \"abcded\", k = 5)",
        "beautifulSubstrings(s = \"ghfg\", k = 3)",
        "beautifulSubstrings(s = \"iEAaEaioWee\", k = 1)"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"ababababab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcbc\")",
        "longestSemiRepetitiveSubstring(s = \"ababbaba\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcd\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbab\")",
        "longestSemiRepetitiveSubstring(s = \"abcdxabcdy\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbbbcc\")",
        "longestSemiRepetitiveSubstring(s = \"lololo\")",
        "longestSemiRepetitiveSubstring(s = \"abcbbbde\")",
        "longestSemiRepetitiveSubstring(s = \"eacbed\")"
    ],
    "sample_341": [
        "longestString(x = 4, y = 5, z = 6)",
        "longestString(x = 1, y = 3, z = 10)",
        "longestString(x = 1, y = 2, z = 1)",
        "longestString(x = 10, y = 5, z = 3)",
        "longestString(x = 4, y = 2, z = 10)",
        "longestString(x = 6, y = 7, z = 2)",
        "longestString(x = 2, y = 4, z = 2)",
        "longestString(x = 10, y = 3, z = 2)",
        "longestString(x = 8, y = 9, z = 3)",
        "longestString(x = 10, y = 10, z = 0)"
    ],
    "sample_271": [
        "minSum(nums1 = [1,2,3,4], nums2 = [2,3,4,5])",
        "minSum(nums1 = [1,2,3,4], nums2 = [3,4,5,6])",
        "minSum(nums1 = [1, 1, 1, 1, 1, 1], nums2 = [1, 1, 1, 1, 1])",
        "minSum(nums1 = [3,0,3], nums2 = [3,0,3])",
        "minSum(nums1=[1,1,1,0], nums2=[1,0,1,1])",
        "minSum(nums1 = [2, 3, 5, 7], nums2 = [1, 0, 1, 1])",
        "minSum(nums1 = [0,0,1,2,1], nums2 = [1,0,2,1,2])",
        "minSum(nums1 = [1,2,3,0,2], nums2 = [2,0,1,1,3])",
        "minSum(nums1 = [1, 3, 1, 4, 1], nums2 = [0, 2, 1, 0, 0])",
        "minSum(nums1 = [1, 4, 2, 3, 0], nums2 = [2, 1, 0, 5, 3])"
    ],
    "sample_340": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 3, y = 4, z = 1)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 4, y = 5, z = 1)",
        "longestString(x = 4, y = 5, z = 1)",
        "longestString(x = 2, y = 5, z = 3)",
        "longestString(x = 1, y = 3, z = 5)"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = '1011101', k = 3)",
        "shortestBeautifulSubstring(s = '123123', k = 3)",
        "shortestBeautifulSubstring(s = \"1010011\", k = 3)",
        "shortestBeautifulSubstring(s = '111011000', k = 3)",
        "shortestBeautifulSubstring(s = \"0110110110110\", k = 3)",
        "shortestBeautifulSubstring(s = \"000000111111111111111111\", k = 2)",
        "shortestBeautifulSubstring(s = \"000101110000010001\", k = 3)",
        "shortestBeautifulSubstring(s = \"101001001010111110\", k = 4)",
        "shortestBeautifulSubstring(s = \"5454610\", k = 2)",
        "shortestBeautifulSubstring(s = '2252232225222235222232222522223', k = 3)"
    ],
    "sample_324": [
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1234)",
        "isFascinating(n = 12)",
        "isFascinating(n = 10)",
        "isFascinating(n = 9)",
        "isFascinating(n = 121)",
        "isFascinating(n = 21)",
        "isFascinating(n = 126)",
        "isFascinating(n = 39)"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 7])",
        "minimumSum(nums = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSum(nums = [5, 4, 3, 1])",
        "minimumSum(nums = [1, 5, 2, 4, 8])",
        "minimumSum(nums = [4, 3, 5, 1, 9])",
        "minimumSum(nums = [1, 2, 3, 4, 4, 4, 4, 4])",
        "minimumSum(nums = [1, 2, 3, 5, 1, 2, 3, 4])",
        "minimumSum(nums = [4, 6, 1, 7, 8, 9])",
        "minimumSum(nums = [4, 10, 10, 1, 2])",
        "minimumSum(nums = [2, 3, 5, 7, 11, 20, 28])"
    ],
    "sample_268": [
        "minSum(nums1 = [1, 2], nums2 = [3, 4])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [0, 0, 0, 0])",
        "minSum(nums1 = [1, 0, 1, 1, 0], nums2 = [1, 1, 0, 1, 1])",
        "minSum(nums1 = [1, 2, 0, 1], nums2 = [3, 4, 0, 2])",
        "minSum(nums1 = [1,2,3,0,0,0], nums2 = [1,2,3])",
        "minSum(nums1 = [1, 1, 1, 1, 1], nums2 = [1, 1, 1, 0, 1])",
        "minSum(nums1 = [1,2,3], nums2 = [5,0,0])",
        "minSum(nums1 = [5, 0, 1], nums2 = [5, 0, 1])",
        "minSum(nums1 = [1, 3, 5, 7], nums2 = [0, 2, 4, 6])",
        "minSum(nums1 = [1, 2, 4, 1, 6, 0], nums2 = [3, 0, 0, 0, 0, 0])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"a\", s3 = \"b\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"efgh\")",
        "findMinimumOperations(s1 = \"geeksforgeeks\", s2 = \"geeks\", s3 = \"geeksforgeeks\")",
        "findMinimumOperations(s1 = \"ABC\", s2 = \"DEF\", s3 = \"GHI\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"apple\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"q\", s2 = \"w\", s3 = \"q\")",
        "findMinimumOperations(s1 = \"ban\", s2 = \"ana\", s3 = \"pana\")",
        "findMinimumOperations(s1 = \"te\", s2 = \"ac\", s3 = \"ac\")"
    ],
    "sample_321": [
        "maxStrength(nums = [4, 2, 3])",
        "maxStrength(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxStrength(nums = [2, 3, -2, 4, -3])",
        "maxStrength(nums = [4, 2, 3, -5, -1, -8])",
        "maxStrength(nums = [4, 1, 2, 3, -1, -2])",
        "maxStrength(nums = [2, 3, 5, -4, 2])",
        "maxStrength(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -11, -12, -13, -14, -15, -16])",
        "maxStrength(nums = [1, 2, -3, 4, -2, 5, 6])",
        "maxStrength(nums = [-10, 20, 0, -10, -10])",
        "maxStrength(nums = [8, -1, -1, -1, 4, -1, -1, 2, 12])"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [2], moveTo = [3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [2], moveTo = [5])",
        "relocateMarbles(nums = [1,2,3,4], moveFrom = [4, 1, 3], moveTo = [2, 3, 4])"
    ],
    "sample_357": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3, 5, 7], moveTo = [9, 7, 5, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 8, 9], moveFrom = [1, 2, 3, 4], moveTo = [7, 8, 9, 10])",
        "relocateMarbles(nums = [5,6,8,9], moveFrom = [6,8], moveTo = [9,5])",
        "relocateMarbles(nums = [2, 4, 5, 6, 8, 9], moveFrom = [2, 5], moveTo = [5, 2])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9,10], moveFrom = [2,3,4], moveTo = [4,5,6])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9], moveFrom = [5,7], moveTo = [4,6])",
        "relocateMarbles(nums = [5, 4, 8, 6, 3, 9], moveFrom = [3, 4], moveTo = [9, 8])",
        "relocateMarbles(nums = [8, 9, 4, 5, 6], moveFrom = [4, 5], moveTo = [6, 5])",
        "relocateMarbles(nums = [3, 2, 5, 8, 6, 1, 4, 7, 9], moveFrom = [8, 9], moveTo = [7, 8])",
        "relocateMarbles(nums = [3, 2, 5, 1, 8, 6, 4, 7, 9], moveFrom = [1, 4, 3, 7, 4, 7, 6, 8, 4], moveTo = [7, 4, 8, 4, 1, 3, 5, 4, 8])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 2, 3], money = 10)",
        "buyChoco(prices = [1, 2, 3], money = 10)",
        "buyChoco(prices = [1, 2], money = 2)",
        "buyChoco(prices = [100, 200], money = 300)",
        "buyChoco(prices = [1, 4, 5, 3, 2], money = 9)",
        "buyChoco(prices = [1, 1, 1, 1], money = 1)",
        "buyChoco(prices = [12, 5, 7, 9], money = 20)",
        "buyChoco(prices = [10, 5, 15], money = 10)",
        "buyChoco(prices=[10, 20, 30, 40], money=60)",
        "buyChoco(prices = [6, 9, 3, 5, 1, 2], money = 12)"
    ],
    "sample_308": [
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[-1]])",
        "matrixSum(nums = [[1, 1, 1], [2, 2, 2], [3, 3, 3]])",
        "matrixSum(nums = [[-1, -1], [-1, -1]])",
        "matrixSum(nums = [[1, 2], [1, 2]])",
        "matrixSum(nums = [[1, 1, 0], [0, 1, 1]])",
        "matrixSum(nums = [[2, 2], [1, 1]])",
        "matrixSum(nums = [[0, 2, 4], [1, 3, 5]])",
        "matrixSum(nums=[[1,2,3,4],[5,6,7,8]])",
        "matrixSum(nums = [[0, 0, 0, 0, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0]])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2], money = 3)",
        "buyChoco(prices = [1, 2], money = 1)",
        "buyChoco(prices = [1, 2], money = 2)",
        "buyChoco(prices = [1, 2, 3], money = 10)",
        "buyChoco(prices = [1,2,3], money = 10)",
        "buyChoco(prices = [10, 10, 20], money = 20)",
        "buyChoco(prices = [400, 200, 300], money = 500)",
        "buyChoco(prices = [30, 50, 20], money = 60)",
        "buyChoco(prices = [11, 6, 12, 10, 14, 18], money = 30)",
        "buyChoco(prices = [100, 50, 60, 20, 40, 20, 100], money = 110)"
    ],
    "sample_259": [
        "minimumSum(nums = [1,2,3])",
        "minimumSum(nums = [2,2,2,2,2])",
        "minimumSum(nums = [2,2,2,2,2])",
        "minimumSum(nums = [1, 1, 1])",
        "minimumSum(nums = [4,3,2,1,0])",
        "minimumSum(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1])",
        "minimumSum(nums = [8, 1, 6, 2, 5, 4, 8, 1, 6])",
        "minimumSum(nums = [5,3,4,8])",
        "minimumSum(nums = [2, 3, 7, 2, 4, 6])",
        "minimumSum(nums = [5, 10, 11])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1,17,5,10,13,15,10,5,16,8])",
        "alternatingSubarray(nums = [1, 5, 3, 4, 2])",
        "alternatingSubarray(nums = [2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [5, 3, 2, 4, 1])",
        "alternatingSubarray(nums = [4, 2, 5, 3, 10, 7, 2])",
        "alternatingSubarray(nums = [4,2,5,3,3,1])",
        "alternatingSubarray(nums = [1, 3, 2, 3, 4, 3, 2])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 2, 1])",
        "alternatingSubarray(nums = [4,2,5,3,8,1,9,4,3,4])",
        "alternatingSubarray(nums = [8, 5, 4, 3, 7, 9, 3, 10, 11, 12, 10, 6, 6, 10])"
    ],
    "sample_311": [
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[0]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1, 2], [3, 0]])",
        "matrixSum(nums = [[0, 1], [1, 2]])",
        "matrixSum(nums = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "matrixSum(nums = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "matrixSum(nums = [[1, 1], [0, 1]])",
        "matrixSum(nums = [[0, 1, 0], [2, 0, 3]])",
        "matrixSum(nums = [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 1, 0], [0, 1, 0, 0], [1, 0, 0, 0]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 2], money = 3)",
        "buyChoco(a = [2, 3], money = 5)",
        "buyChoco(a = [4, 5], money = 9)",
        "buyChoco(a = [20, 20], money = 40)",
        "buyChoco(a = [100, 1], money = 101)",
        "buyChoco(a = [1, 5], money = 5)",
        "buyChoco(a = [1, 2, 4, 5], money = 5)",
        "buyChoco(a = [10, 10, 10, 10, 10], money = 25)",
        "buyChoco(a = [5, 2, 1], money = 4)",
        "buyChoco(a = [2, 3, 6, 7], money = 5)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [2, 2, 1])",
        "minGroupsForValidAssignment(nums = [5, 10, 3])",
        "minGroupsForValidAssignment(nums = [3, 5, 6, 4])",
        "minGroupsForValidAssignment(nums = [3, 1, 1, 3, 4, 4, 4])",
        "minGroupsForValidAssignment(nums = [3,4,1,2,2,3])",
        "minGroupsForValidAssignment(nums = [4, 7, 6, 10])",
        "minGroupsForValidAssignment(nums = [20, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])",
        "minGroupsForValidAssignment(nums = [2, 3, 1, 2, 1, 3, 3, 2, 4, 5, 3])",
        "minGroupsForValidAssignment(nums = [10,9,9,5,8,5,10,5])",
        "minGroupsForValidAssignment(nums = [111, 5, 4, 8, 9, 6, 10])"
    ],
    "sample_276": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[1, 1, 0], [0, 1, 1], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [0, 0, 0]])",
        "findChampion(grid = [[-1, 0, 0], [0, 1, 0], [0, 0, -1]])",
        "findChampion(grid = [[0, 1, 0, 1], [0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 1, 0]])",
        "findChampion(grid = [[0, 1, 0],\n                           [1, 0, 0],\n                           [1, 0, 1]])"
    ],
    "sample_320": [
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1,2,3,4,5])",
        "maxStrength(nums = [2, 3, 5, 4])",
        "maxStrength(nums = [2, 3, 5, 10])",
        "maxStrength(nums = [1,2,3,4])",
        "maxStrength(nums = [1, 10, 5])",
        "maxStrength(nums = [4, 5, 6, 7, 8, 9])",
        "maxStrength(nums = [10, 5, 2, 4, 1, 6])",
        "maxStrength(nums = [2, 5, 1, 6, 3])",
        "maxStrength(nums = [3, 1, 1, 2, 1, 1, 1])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"mouse\"])",
        "minimizeConcatenatedLength(words = [\"b\", \"an\", \"ana\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"aa\", \"aaaa\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"defg\", \"h\", \"ij\"])",
        "minimizeConcatenatedLength(words = [\"cake\", \"is\", \"lie\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"mat\", \"sat\", \"bat\"])",
        "minimizeConcatenatedLength(words = [\"ac\", \"bd\", \"cd\", \"ef\"])",
        "minimizeConcatenatedLength(words = [\"bbba\", \"aaab\", \"cccc\"])",
        "minimizeConcatenatedLength(words = [\"g\", \"o\", \"e\", \"n\", \"d\", \"s\"])"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"cd\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"cd\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"b\", s2 = \"b\", s3 = \"b\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"efgh\", s3 = \"lmno\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"cdef\", s3 = \"acef\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"na\")",
        "findMinimumOperations(s1 = \"abcbx\", s2 = \"ab\", s3 = \"bcbx\")"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [1, 17, 5, 10, 13, 15, 10, 5, 16, 8])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [2, 1, 5, 4, 3])",
        "alternatingSubarray(nums = [1, 2, 3, 2, 4, 1])",
        "alternatingSubarray(nums = [1,2,3,4,5,4,3,2,1,2,3,4,5,6])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 3, 2])",
        "alternatingSubarray(nums = [4, 2, 5, 3, 6, 5])"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])",
        "findChampion(grid = [[1, 0], [0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 1, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 0, 1], [1, 1, 1], [1, 0, 0]])",
        "findChampion(grid = [[0,1,1,0], [0,0,1,0], [0,0,1,1], [1,0,0,0]])"
    ],
    "sample_304": [
        "countSeniors(details = [\"7001010000000\", \"7001010000000\", \"7001010000000\", \"7001010000000\"])",
        "countSeniors(details = [\"011019911231\",\"011019911231\",\"011019911231\"])",
        "countSeniors(details = [\"10009000\", \"11112000\"])",
        "countSeniors(details = [\"200202029000000\", \"200401019000000\"])",
        "countSeniors(details = [\"200101112010\", \"200101012012\", \"200101012020\"])",
        "countSeniors(details = [\"112345671900\", \"112345671945\", \"112345671950\", \"112345671923\"])",
        "countSeniors(details = [\"John,Doe,123456789,11/22/1980\", \"Jane,Doe,987654321,12/30/1990\"])",
        "countSeniors(details = [\"Virgil, 36\", \"Kiara, 55\", \"Joshua, 44\"])",
        "countSeniors(details = [\"9993341234\", \"1122334441\", \"9873345678\"])",
        "countSeniors(details = ['3061006145035', '45061006145035'])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"abcdae\", k = 2)",
        "beautifulSubstrings(s = \"abacada\", k = 3)",
        "beautifulSubstrings(s = \"lalala\", k = 3)",
        "beautifulSubstrings(s = \"abcdaf\", k = 2)",
        "beautifulSubstrings(s = \"heeello\", k = 2)",
        "beautifulSubstrings(s = \"voila\", k = 3)",
        "beautifulSubstrings(s = \"asdfaqwertyuiop\", k = 2)",
        "beautifulSubstrings(s = \"balakrishnan\", k = 2)",
        "beautifulSubstrings(s = \"eeaeeiouaaaee\", k = 2)",
        "beautifulSubstrings(s = \"cdcdcdcdcdaeioaei\", k = 2)"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = '1101', k = 2)",
        "shortestBeautifulSubstring(s = \"10110110\", k = 3)",
        "shortestBeautifulSubstring(s = \"01010101\", k = 2)",
        "shortestBeautifulSubstring(s = '1101001', k = 2)",
        "shortestBeautifulSubstring(s = \"101110111\", k = 2)",
        "shortestBeautifulSubstring(s = '1001111', k = 3)",
        "shortestBeautifulSubstring(s = '01000111', k = 3)",
        "shortestBeautifulSubstring(s = '1010010010100101', k = 1)",
        "shortestBeautifulSubstring(s = \"0010010011111001\", k = 3)",
        "shortestBeautifulSubstring(s = \"11001101100010001000101\", k = 3)"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"cd\"])",
        "minimizeConcatenatedLength(words=[\"abc\", \"def\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"cc\", \"d\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"ca\", \"ab\"])",
        "minimizeConcatenatedLength(words = [\"bba\", \"abb\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"bb\", \"cc\"])",
        "minimizeConcatenatedLength(words = [\"aba\", \"a\", \"ab\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"t\", \"ty\", \"tyy\"])",
        "minimizeConcatenatedLength(words = [\"up\", \"set\", \"not\", \"seem\", \"big\"])"
    ],
    "sample_327": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 9)",
        "isFascinating(n=123456789)",
        "isFascinating(n = 123456)",
        "isFascinating(n = 36)",
        "isFascinating(n = 55)",
        "isFascinating(n = 815)",
        "isFascinating(n = 560)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1], [2]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[0]])",
        "matrixSum(nums = [[1, 1]])",
        "matrixSum(nums = [[1], [2], [1]])",
        "matrixSum(nums = [[1], [3], [2]])",
        "matrixSum(nums = [[-1, 2], [-1, -1]])",
        "matrixSum(nums = [[4, 5, 1], [2, 3, 1]])"
    ],
    "sample_326": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 1234)",
        "isFascinating(n=123)",
        "isFascinating(n = 1)",
        "isFascinating(n = 12345)",
        "isFascinating(n = 27)"
    ],
    "sample_275": [
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 0], [0, 0]])",
        "findChampion(grid = [[1,0],[1,1]])",
        "findChampion(grid = [[1, 1, 0], [1, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[0,1,0],[0,0,0],[1,0,1]])"
    ],
    "sample_260": [
        "minimumSum(nums = [1, 4, 3, 2])",
        "minimumSum(nums = [3, 4, 5, 1, 2])",
        "minimumSum(nums = [1, 3, 5, 2])",
        "minimumSum(nums = [2, 4, 7, 1, 5, 3])",
        "minimumSum(nums = [4, 2, 1, 7])",
        "minimumSum(nums = [1,2,4,5,3])",
        "minimumSum(nums = [12, 5, 7, 20])",
        "minimumSum(nums = [3, 4, 2, 9, 5])",
        "minimumSum(nums = [2,3,4,5,1,7,6,8,9])",
        "minimumSum(nums = [5, 2, 6, 3, 9, 8, 7])"
    ],
    "sample_322": [
        "isFascinating(n = 123)",
        "isFascinating(n = 10)",
        "isFascinating(n = 12345)",
        "isFascinating(n = 125)",
        "isFascinating(n = 25)",
        "isFascinating(n = 199)",
        "isFascinating(n = 151)",
        "isFascinating(n = 243)",
        "isFascinating(n = 3456789)",
        "isFascinating(n = 8682088)"
    ],
    "sample_248": [
        "minOperations(s1 = \"00\", s2 = \"01\", x = 1)",
        "minOperations(s1 = \"1101\", s2 = \"1110\", x = 1)",
        "minOperations(s1 = \"1001\", s2 = \"1001\", x = 2)",
        "minOperations(s1 = \"11\", s2 = \"00\", x = 3)",
        "minOperations(s1 = \"11000\", s2 = \"11100\", x = 1)",
        "minOperations(s1 = \"10\", s2 = \"01\", x = 10)",
        "minOperations(s1 = \"11110\", s2 = \"11111\", x = 1)",
        "minOperations(s1 = \"1110\", s2 = \"1111\", x = 5)",
        "minOperations(s1 = \"101010\", s2 = \"111001\", x = 3)",
        "minOperations(s1 = \"00001\", s2 = \"11100\", x = 4)"
    ],
    "sample_342": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 3, y = 3, z = 3)",
        "longestString(x = 3, y = 3, z = 3)",
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(x = 2, y = 2, z = 1)",
        "longestString(x = 4, y = 4, z = 0)",
        "longestString(x = 5, y = 5, z = 0)",
        "longestString(x = 3, y = 2, z = 3)",
        "longestString(x = 5, y = 1, z = 0)"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [8], moveTo = [10])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 2], moveTo = [4, 5])",
        "relocateMarbles(nums = [5, 7, 9], moveFrom = [7, 9], moveTo = [7, 9])",
        "relocateMarbles(nums = [5, 8, 6, 9], moveFrom = [6, 5], moveTo = [7, 4])",
        "relocateMarbles(nums = [4, 5, 6, 7, 8, 9], moveFrom = [4, 5, 6, 7, 8, 9], moveTo = [1, 2, 3, 4, 5, 6])",
        "relocateMarbles(nums = [5, 5, 6, 8, 9], moveFrom = [5, 6], moveTo = [4, 7])",
        "relocateMarbles(nums = [2, 3, 5, 8], moveFrom = [2, 5], moveTo = [5, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveFrom = [5, 7], moveTo = [9, 11])",
        "relocateMarbles(nums = [1, 2, 4, 6, 8], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [3, 5, 6, 7, 8, 9], moveFrom = [1, 3, 7], moveTo = [7, 3, 1])"
    ],
    "sample_306": [
        "countSeniors(details = [\"Bob, 24\", \"Alice, 78\", \"Eve, 54\"])",
        "countSeniors(details = [\"Tom, 35\", \"Jerry, 48\", \"Butch, 21\"])",
        "countSeniors(details = [\"Barry, 20\", \"Drew, 75\", \"Bart, 40\"])",
        "countSeniors(details = [\"A001, John, 22\", \"A002, Mary, 23\", \"A003, David, 64\", \"A004, Susan, 61\"])",
        "countSeniors(details = [\"John/35/Male\", \"Adam/41/Male\", \"Jenny/19/Female\"])",
        "countSeniors(details = [\"Gerald, 32\", \"Mary, 75\", \"Mike, 55\", \"Karen, 23\"])",
        "countSeniors(details = [\"Victor, 21, M\", \"Al, 40, F\", \"Kara, 69, F\"])",
        "countSeniors(details = [\"Olaf, aged 12\", \"Liv, aged 58\", \"Mark, aged 30\"])",
        "countSeniors(details = [\"Margaret 47 1234-1234\", \"Samuel 25 1111-1111\", \"Jessica 13 1234-1234\", \"Francis 45 1111-1111\"])",
        "countSeniors(details = [\"s001, Ong, Yi, M, 3236985258\", \"s002, Ng, Teng, M, 3396582153\", \"s003, Lee, Xiang, F, 2345678901\", \"s004, Lim, Jia, F, 2134567890\", \"s005, Chua, Cai, M, 3569874123\"])"
    ],
    "sample_303": [
        "countSeniors(details = [\"Dave,20,Male\", \"Jane,40,Female\", \"Mary,60,Female\"])",
        "countSeniors(details=[\"Mike, 25\", \"Sarah, 42\", \"Mary, 65\"])",
        "countSeniors(details = [\"Lebron, 42\", \"Kobe, 34\", \"Charles, 41\"])",
        "countSeniors(details = [\"56-2003\", \"45-1980\", \"65-1950\", \"35-2000\"])",
        "countSeniors(details = ['Alice,19', 'Bob,20', 'Charlie,56', 'Debbie,32', 'Eddie,70', 'Fred,54'])",
        "countSeniors(details = [\"John Smyth, 23\", \"Jane Doe, 56\", \"William Shakespeare, 35\", \"Oliver Queen, 84\"])",
        "countSeniors(details = [\"Mary 22\", \"John 67\", \"Harry 35\", \"Berry 70\", \"Larry 21\"])",
        "countSeniors(details = [\"Maya, 2017, 75\", \"Ruth, 2017, 64\", \"Tim, 2018, 59\", \"Bob, 2016, 72\"])",
        "countSeniors(details = [\"Trevor LeBlanc, 44, has a masters degree\", \"Sandra Mcdonald, 72, is a retired teacher\", \"John Smith, 33, is a programmer\"])",
        "countSeniors(details = [\"Mary McDonald 82\", \"Robert Willis 18\", \"Anne Smith 70\", \"David Adams 21\", \"Gillian Adams 60\", \"Nick Williams 65\", \"Nancy Baker 27\"])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7, 8], moveTo = [9, 5])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 9], moveTo = [6, 8])",
        "relocateMarbles(nums = [5, 8, 6, 9], moveFrom = [6, 8], moveTo = [7, 9])",
        "relocateMarbles(nums = [4, 5, 6, 7, 8], moveFrom = [4, 6], moveTo = [6, 4])",
        "relocateMarbles(nums = [3, 4, 5, 6, 8, 9], moveFrom = [3, 9], moveTo = [4, 6])",
        "relocateMarbles(nums = [5, 8, 9, 1], moveFrom = [1, 8], moveTo = [6, 5])",
        "relocateMarbles(nums = [3, 4, 7, 8], moveFrom = [7, 8], moveTo = [5, 6])",
        "relocateMarbles(nums = [1, 2, 5, 6, 9], moveFrom = [1, 2], moveTo = [8, 7])",
        "relocateMarbles(nums = [1, 2, 5, 9, 6, 8, 4, 3, 7], moveFrom = [1, 2, 5, 9], moveTo = [2, 5, 9, 1])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abx\", s2 = \"aby\", s3 = \"abz\")",
        "findMinimumOperations(s1 = \"b\", s2 = \"a\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"abb\", s3 = \"bab\")",
        "findMinimumOperations(s1 = \"xy\", s2 = \"yx\", s3 = \"z\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"acb\", s3 = \"abb\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"apple\", s3 = \"butter\")",
        "findMinimumOperations(s1 = \"b\", s2 = \"ab\", s3 = \"baa\")",
        "findMinimumOperations(s1 = \"fga\", s2 = \"bda\", s3 = \"gd\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"cat\", s2 = \"cats\", s3 = \"dog\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"aca\", s3 = \"ada\")",
        "findMinimumOperations(s1 = \"geeksforgeeks\", s2 = \"geeksfor\", s3 = \"geeks\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abc\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"foobar\", s2 = \"foo\", s3 = \"bar\")",
        "findMinimumOperations(s1 = \"geeksforgeeks\", s2 = \"or\", s3 = \"geeksquiz\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"acb\", s3 = \"abbc\")",
        "findMinimumOperations(s1 = \"ABCDE\", s2 = \"AB\", s3 = \"DE\")",
        "findMinimumOperations(s1 = \"dabadd\", s2 = \"ab\", s3 = \"cd\")"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [0, 1, 2])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1,2,3])",
        "minimumRightShifts(nums = [3, 4, 1, 2])",
        "minimumRightShifts(nums = [3,2,1])",
        "minimumRightShifts(nums = [2, 1, 3, 5, 4, 7, 6])",
        "minimumRightShifts(nums = [2,4,6,8,10])"
    ],
    "sample_453": [
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"aaba\")",
        "minChanges(s = \"aaba\")",
        "minChanges(s = \"bab\")",
        "minChanges(s = \"abbaa\")",
        "minChanges(s = \"zzz\")",
        "minChanges(s = \"codewars\")",
        "minChanges(s = \"acda\")"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7, 9], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 3, 2], target = 4)",
        "lengthOfLongestSubsequence(nums = [3, 2, 5, 7, 8, 9], target = 12)",
        "lengthOfLongestSubsequence(nums = [5, 2, 6, 1, 11], target = 17)",
        "lengthOfLongestSubsequence(nums = [2, 3, 1, 6, 3, 4, 5, 7], target = 5)",
        "lengthOfLongestSubsequence(nums = [100, 1, 99, 101, 100, 99, 1, 99, 99, 1, 99], target = 200)",
        "lengthOfLongestSubsequence(nums = [100,99,99,97,97,94,94,94,93,92,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,"
    ],
    "sample_367": [
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = 'Hylmp')",
        "sortVowels(s = \"HumplY\")",
        "sortVowels(s = \"Hlymp\")",
        "sortVowels(s = 'pLymph')",
        "sortVowels(s = \"Hpyl\")",
        "sortVowels(s = \"mLPy\")",
        "sortVowels(s = \"yLmph\")",
        "sortVowels(s = \"HYplem\")",
        "sortVowels(s = \"pmyUln\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 1)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 1)",
        "lengthOfLongestSubsequence(nums = [100, 4, 200, 1, 3, 2], target = 7)",
        "lengthOfLongestSubsequence(nums = [3, 34, 4, 12, 5, 2], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 11)",
        "lengthOfLongestSubsequence(nums = [3,5,7,8,10], target = 15)",
        "lengthOfLongestSubsequence(nums = [5,6,7,8], target = 99)",
        "lengthOfLongestSubsequence(nums = [1, 2, 1, 4], target = 10)"
    ],
    "sample_381": [
        "countPairs(nums = [1, 2, 3], t = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 5)",
        "countPairs(nums = [1,2,3,4], t = 10)",
        "countPairs(nums = [1,2,3,4], t = 4)",
        "countPairs(nums = [1,2,3,4,5], t = 7)",
        "countPairs(nums=[1,2,3,4], t=4)",
        "countPairs(nums = [1,3,4,2], t = 6)",
        "countPairs(nums = [2,3,4,1], t = 5)",
        "countPairs(nums=[-1,1,2,3,3], t=3)",
        "countPairs(nums = [3, 4, 5, 1, 2, 3, 4], t = 10)"
    ],
    "sample_366": [
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_369": [
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = 'Lymph')",
        "sortVowels(s = \"lYmPh\")",
        "sortVowels(s = \"LympH\")",
        "sortVowels(s = \"lYmph\")",
        "sortVowels(s = \"lHYmP\")",
        "sortVowels(s = \"HmlPY\")",
        "sortVowels(s = \"plymhu\")"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [1, 3, 2])",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [2, 1, 3])",
        "minimumRightShifts(nums = [4, 1, 3, 2])",
        "minimumRightShifts(nums = [1, 3, 4, 5, 2])",
        "minimumRightShifts(nums = [1, 4, 3])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4, 8, 9])",
        "minimumRightShifts(nums = [1, 3, 2, 2, 1, 0, 2, 0])",
        "minimumRightShifts(nums = [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1])"
    ],
    "sample_448": [
        "minChanges(s = \"aba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"banana\")",
        "minChanges(s = \"abcab\")",
        "minChanges(s = \"aaa\")",
        "minChanges(s = \"aabc\")",
        "minChanges(s = \"baba\")",
        "minChanges(s = \"aabcaa\")"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"1234\", s2 = \"4132\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abce\")",
        "canBeEqual(s1 = \"baba\", s2 = \"abab\")",
        "canBeEqual(s1 = \"dcba\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"xyab\", s2 = \"axby\")",
        "canBeEqual(s1 = \"aBcD\", s2 = \"DaBc\")"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1,1,2,2,3])",
        "minLengthAfterRemovals(nums = [3,1,3,3,2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1,1,2,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [3, 2, 2])",
        "minLengthAfterRemovals(nums = [5, 5, 4, 4, 4, 3, 3, 3, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 3, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1,1,2,3,3,3,3,4,5,5,5,5])",
        "minLengthAfterRemovals(nums = [2, 1, 1, 2, 3, 3, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9])"
    ],
    "sample_361": [
        "isGood(a = [1, 2, 2])",
        "isGood(a = [1, 2, 2, 3])",
        "isGood(a = [0, 0])",
        "isGood(a = [0, 0])",
        "isGood(a = [1, 0, 1])",
        "isGood(a = [1, 2, 3, 4, 3, 2])",
        "isGood(a = [1, 2, 2, 2, 4])",
        "isGood(a = [1, 1, 2, 1, 2])",
        "isGood(a = [0, 1, 0, 1, 2, 3, 2, 3])",
        "isGood(a = [0, 2, 0, 1, 3, 4, 3, 4])"
    ],
    "sample_419": [
        "minOperations(nums = [1,2,3,4,5], k = 2)",
        "minOperations(nums = [1,2,3,4,5,6,7], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9], k = 3)",
        "minOperations(nums = [5,1,3,4,2], k = 2)",
        "minOperations(nums = [1,1,2,2,3,3,3,3], k = 2)",
        "minOperations(nums = [1, 1, 3, 3, 5, 8], k = 3)",
        "minOperations(nums = [3, 1, 3, 4, 3], k = 2)",
        "minOperations(nums = [2, 1, 5, 1, 3, 2, 2], k = 3)",
        "minOperations(nums = [141,1,1,1,1,1,1,141], k = 3)",
        "minOperations(nums=[1,1,2,2,3,3,3,3,3,3,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10"
    ],
    "sample_478": [
        "findMaximumLength(nums = [0, 1])",
        "findMaximumLength(nums = [3, 1, 2, 4, 3])",
        "findMaximumLength(nums = [-2,2])",
        "findMaximumLength(nums = [1,2,4])",
        "findMaximumLength(nums = [2, 1, 1])",
        "findMaximumLength(nums = [-1, 3, 2, 1])",
        "findMaximumLength(nums = [2,3,4,4,5])",
        "findMaximumLength(nums = [1, 2, 1, 3, 1, 4, 1, 5, 1])",
        "findMaximumLength(nums = [0, 1, 0, 1, 1, 0, 1, 1, 0])",
        "findMaximumLength(nums = [-1, 2, -3, 4, -5, 6, 7, -8])"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [3, 1, 2, 4])",
        "maxSubarrays(nums = [1, -2, -3, -4, 5])",
        "maxSubarrays(nums = [1, 2, 2, 2])",
        "maxSubarrays(nums = [1, 2, 3, 1, 5, 6])",
        "maxSubarrays(nums = [2, 2, 1, 0, 2])",
        "maxSubarrays(nums = [-1, -2, -1, 2, 2, -2, 2])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"a\", str2 = \"a\")",
        "canMakeSubsequence(str1 = \"xz\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xzy\")",
        "canMakeSubsequence(str1 = \"bcd\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"acd\", str2 = \"cab\")",
        "canMakeSubsequence(str1 = \"abcdefg\", str2 = \"acefg\")",
        "canMakeSubsequence(str1 = \"zbc\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"xvy\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"dap\", str2 = \"tap\")",
        "canMakeSubsequence(str1 = \"kppbpy\", str2 = \"lpppny\")"
    ],
    "sample_402": [
        "maxSum(nums = [1], m = 1, k = 1)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 4, k = 1)",
        "maxSum(nums = [3, 2, 1, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 1, 1, 1, 1, 1, 1, 1], m = 5, k = 3)",
        "maxSum(nums = [0,1,0,0,1,1,0], m = 2, k = 3)",
        "maxSum(nums = [1, 3, 5, 1, 3, 4], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 1, 3, 1, 2, 2, 3, 1, 1], m = 2, k = 3)",
        "maxSum(nums = [3, 2, 4, 2, 1, 2, 4], m = 1, k = 3)",
        "maxSum(nums = [3, 7, 2, 6, 5, 4, 1], m = 3, k = 5)"
    ],
    "sample_470": [
        "findWordsContaining(words = [], x = \"b\")",
        "findWordsContaining(words = [\"dog\", \"cat\", \"rabbit\"], x = \"a\")",
        "findWordsContaining(words = [\"a\"], x = \"c\")",
        "findWordsContaining(words = [\"dog\", \"cat\", \"snake\"], x = \"e\")",
        "findWordsContaining(words = [\"cat\", \"bird\", \"dog\"], x = \"fish\")",
        "findWordsContaining(words = [\"cherry\", \"apple\", \"banana\"], x = \"pear\")",
        "findWordsContaining(words = [\"book\", \"cat\", \"dog\", \"frog\"], x = \"b\")",
        "findWordsContaining(words = [\"ar\", \"b\", \"cr\", \"b\"], x = \"b\")",
        "findWordsContaining(words = [\"flying\", \"mouse\", \"house\"], x = \"?\")",
        "findWordsContaining(words = [\"zzz\", \"xxy\", \"aaaa\"], x = \"g\")"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"4\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"3\", \"prev\", \"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"4\", \"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = ['prev', 'prev', '3', '4', '5', 'prev'])",
        "lastVisitedIntegers(words=[\"4\", \"3\", \"2\", \"next\", \"next\", \"prev\", \"next\", \"1\"])"
    ],
    "sample_422": [
        "minOperations(nums = [1,2,3,4,5,6,7,8,9], k = 5)",
        "minOperations(nums = [3,1,3,4,3], k = 2)",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 3, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 1, 2, 2], k = 3)",
        "minOperations(nums = [2, 1, 5, 2, 1, 3], k = 2)",
        "minOperations(nums = [5,5,4,6,3,3,3,3], k = 3)",
        "minOperations(nums = [2, 1, 5, 6, 4, 3], k = 2)",
        "minOperations(nums = [5, 2, 4, 7, 6, 1, 3, 9, 8], k = 4)",
        "minOperations(nums = [2, 5, 6, 3, 4, 6, 7, 11, 12, 2], k = 5)",
        "minOperations(nums = [14,2,1,8,15,7,10,4,13,11,12], k = 15)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 3, 3], k = 3)",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], k = 3)",
        "minOperations(nums = [1, 1, 2, 2, 2, 2, 2], k = 3)",
        "minOperations(nums = [4, 1, 2, 1], k = 2)",
        "minOperations(nums = [2, 5, 1, 3, 2, 1, 2], k = 2)",
        "minOperations(nums = [4, 1, 6, 2, 1, 3], k = 3)",
        "minOperations(nums = [2, 1, 3, 3, 3, 4, 5, 2, 7, 8, 9, 1], k = 2)",
        "minOperations(nums = [0, 2, 3, 0, 5, 7, 8, 9, 9, 9], k = 2)"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSeconds(nums = [0, 1, 2, 3])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1,1,1])",
        "minimumSeconds(nums = [2, 1, 5, 3, 4])",
        "minimumSeconds(nums = [2, 2, 1])",
        "minimumSeconds(nums = [2, 1, 3, 2, 4, 3])",
        "minimumSeconds(nums = [1,1,2,1,2])",
        "minimumSeconds(nums = [2, 1, 3, 5, 4, 0])",
        "minimumSeconds(nums = [0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 1, 2, 2], target = 4)",
        "countPairs(nums = [1, 2, 3], target = 5)",
        "countPairs(nums = [1, 1, 2, 2, 2, 3], target = 5)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1, 1, 1, 1], target = 3)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 4)",
        "countPairs(nums = [1, 2, 3, 1], target = 6)",
        "countPairs(nums = [2, 3, 4, 5, 6], target = 6)"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cat\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"mango\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"pear\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"sand\", \"water\", \"waves\"], x = \"wa\")",
        "findWordsContaining(words = [\"bar\", \"beta\", \"alpha\"], x = \"a\")",
        "findWordsContaining(words = [\"axa\", \"bxb\", \"cxc\", \"d\", \"exf\"], x = \"x\")",
        "findWordsContaining(words = [\"hola\", \"que\", \"tal\", \"bien\", \"estas\"], x = \"e\")",
        "findWordsContaining(words = [\"abs\", \"absent\", \"abacus\"], x = \"s\")",
        "findWordsContaining(words = [\"qwe\", \"qwert\", \"qweerty\"], x = \"qw\")",
        "findWordsContaining(words = [\"Tom\", \"Niki\", \"John\", \"Mari\"], x = \"i\")"
    ],
    "sample_372": [
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = \"let's code\")",
        "sortVowels(s = \"Let's code!\")",
        "sortVowels(s = \"letcode\")",
        "sortVowels(s = \"Lectoed\")",
        "sortVowels(s = 'Lectio')",
        "sortVowels(s = \"tElle\")",
        "sortVowels(s = \"LeTOcede\")",
        "sortVowels(s = \"LeTOcede\")",
        "sortVowels(s = \"cLeOdte\")"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6])",
        "minLengthAfterRemovals(nums = [1, 2, 1])",
        "minLengthAfterRemovals(nums = [1,2,3,4])",
        "minLengthAfterRemovals(nums = [3,1,3,4,1])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 1])",
        "minLengthAfterRemovals(nums = [3, 1, 3])",
        "minLengthAfterRemovals(nums = [1,2,3,3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [3,1,3,3,5,5,5])",
        "minLengthAfterRemovals(nums = [6, 2, 3, 3, 2, 2, 7, 8, 5, 6, 2, 2, 6, 5, 5, 8, 5])"
    ],
    "sample_452": [
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"banana\")",
        "minChanges(s = \"abaa\")",
        "minChanges(s = \"abcb\")",
        "minChanges(s = \"aabaa\")",
        "minChanges(s = \"xyxy\")",
        "minChanges(s = \"ABCD\")",
        "minChanges(s = \"xyzab\")",
        "minChanges(s = \"bacbd\")"
    ],
    "sample_385": [
        "countPairs(nums = [1,2,3,4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4], target = 10)",
        "countPairs(nums = [1, 1, 2, 3], target = 3)",
        "countPairs(nums = [3,2,4], target = 6)",
        "countPairs(nums = [2, 3, 4, 5], target = 5)",
        "countPairs(nums = [2, 1, 3, 3], target = 6)",
        "countPairs(nums = [1, 5, 10, 50], target = 100)",
        "countPairs(nums = [2, 1, 10, 4, 9, 7], target = 12)"
    ],
    "sample_427": [
        "minOperations(nums = [1,1,2,2,3,3,4,4,5,5])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])",
        "minOperations(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2])",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minOperations(nums = [3,3,3,4,5])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 2, 2])",
        "minOperations(nums = [4, 4, 10])",
        "minOperations(nums = [2, 3, 2, 2, 1, 3])",
        "minOperations(nums = [1, 3, 3, 1, 2, 4, 4, 4, 4])",
        "minOperations(nums = [1,2,3,3,4,5,6,6,7,8,9,0,1,1,1,2,1])"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1, 1, 3, 3, 5, 5, 7, 7])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 3, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [0, 0, 0, 0, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [0, 1, 1, 0, 1, 1, 0, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,",
        "minLengthAfterRemovals(nums = [4, 1, 1, 1, 3, 4, 2])"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2, 1])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 3, 5])",
        "minimumCoins(prices = [1, 3])",
        "minimumCoins(prices = [1, 1, 1, 2])",
        "minimumCoins(prices = [1, 2, 1, 1, 3])",
        "minimumCoins(prices = [3,2,1])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"abc\", \"def\", \"abcdef\", \"ghi\"], x = \"abc\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"pear\", \"ananas\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"new\", \"world\"], x = \"w\")",
        "findWordsContaining(words = [\"abcd\", \"xz\", \"efg\"], x = \"x\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"mouse\", \"hippo\"], x = \"m\")",
        "findWordsContaining(words = [\"babble\", \"door\", \"apple\", \"orange\"], x = \"o\")",
        "findWordsContaining(words = [\"Mango\", \"Apple\", \"Pear\", \"Grapes\"], x = \"a\")",
        "findWordsContaining(words = [\"Bulbasaur\", \"Charmander\", \"Squirtle\", \"Blastoise\", \"Pikachu\"], x = \"u\")",
        "findWordsContaining(words = [\"ac\", \"banana\", \"bomb\", \"corn\"], x = \"an\")",
        "findWordsContaining(words = [\"ABCD\", \"CDED\", \"DYA\"], x = \"D\")"
    ],
    "sample_420": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 2)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 4)",
        "minOperations(nums = [1, 5, 11, 5], k = 2)",
        "minOperations(nums = [1,2,3,1,2], k = 2)",
        "minOperations(nums = [1, 2, 4, 1, 2], k = 2)",
        "minOperations(nums = [1, 1, 2, 3, 3, 3, 4], k = 2)",
        "minOperations(nums = [10, 11, 13, 5, 2, 1, 1, 1], k = 3)"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 4, 5])",
        "isGood(nums = [1, 2, 3, 5, 4])",
        "isGood(nums = [0, 1, 2, 4])",
        "isGood(nums = [1,2,3,4,5,7])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 4, 3])",
        "isGood(nums = [1, 4, 2])",
        "isGood(nums = [0, 2, 3, 4, 6])",
        "isGood(nums = [2, 3, 4, 6, 7])",
        "isGood(nums = [2,3,4,5,1,6,7])"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [], target = 0)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 2)",
        "lengthOfLongestSubsequence(nums = [1, 1, 2, 3], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8], target = 0)",
        "lengthOfLongestSubsequence(nums = [3, 4, 1], target = 2)",
        "lengthOfLongestSubsequence(nums = [1,2,4,3,5], target = 6)",
        "lengthOfLongestSubsequence(nums = [2,1,3,3,4,5,6,7,8,9,10], target = 11)",
        "lengthOfLongestSubsequence(nums = [5,6,2,9], target = 12)"
    ],
    "sample_365": [
        "isGood(nums = [1, 2, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 7])",
        "isGood(nums = [0, 2, 3])",
        "isGood(nums = [1,2,3,4,5,6,7])",
        "isGood(nums = [0, 2, 1])",
        "isGood(nums = [1,2,4,5,6,7])",
        "isGood(nums = [1, 2, 3, 4, 5, 5, 6])",
        "isGood(nums = [3,2,4,1])",
        "isGood(nums = [0, 1, 3, 2, 2])",
        "isGood(nums = [2,4,3,1,0,6])"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "maxSubarrays(nums = [1, 2, 3, 1])",
        "maxSubarrays(nums = [0, 0, 1, 1])",
        "maxSubarrays(nums = [2, 1, 2, 0, 1])",
        "maxSubarrays(nums = [1, 2, 3, 1, 4, 5, 6])",
        "maxSubarrays(nums = [1, 1, 0, 0, 1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1, 1, 2, 1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [11110111, 00001111, 01111101, 11010111])"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [1], target = 0)",
        "lengthOfLongestSubsequence(nums = [1], target = 0)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,2], target = 7)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 1)",
        "lengthOfLongestSubsequence(nums = [3, 2], target = 2)",
        "lengthOfLongestSubsequence(nums = [1,10,10,1], target = 20)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], target = 9)",
        "lengthOfLongestSubsequence(nums = [4, 2, 3, 3, 1, 5], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 5, 3, 3, 5, 6, 8, 5, 6, 2, 7], target = 10)"
    ],
    "sample_450": [
        "minChanges(s = \"abca\")",
        "minChanges(s = \"aabbba\")",
        "minChanges(s = \"aaabaa\")",
        "minChanges(s = \"abccb\")",
        "minChanges(s = \"aaac\")",
        "minChanges(s = \"AAABBAABB\")",
        "minChanges(s = \"1001010\")",
        "minChanges(s = \"BBBBAABAA\")",
        "minChanges(s = \"BBabB\")",
        "minChanges(s = \"RQRRRRRQRRQ\")"
    ],
    "sample_463": [
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 10, limit = 4)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 9, limit = 5)",
        "distributeCandies(n=5, limit=2)",
        "distributeCandies(n = 11, limit = 5)",
        "distributeCandies(n=7, limit=2)",
        "distributeCandies(n=3, limit=10)"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [2, 2, 2])",
        "sumCounts(nums = [1, 1, 3])",
        "sumCounts(nums = [0, 0])",
        "sumCounts(nums = [1, 2, 2, 1])",
        "sumCounts(nums = [1, 1, 1, 2])",
        "sumCounts(nums = [1, 1, 2, 2])",
        "sumCounts(nums = [3, 5, 4])"
    ],
    "sample_449": [
        "minChanges(s = \"aaaa\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aabaabaa\")",
        "minChanges(s = \"ababababababab\")",
        "minChanges(s = \"asddsdf\")"
    ],
    "sample_425": [
        "minOperations(nums = [1, 1, 2, 2, 3, 3])",
        "minOperations(nums = [1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 2, 3, 4])",
        "minOperations(nums = [1, 1, 1, 2])",
        "minOperations(nums = [1, 1, 2, 3])",
        "minOperations(nums = [1,1,1])",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9])",
        "minOperations(nums = [3, 3, 3, 3, 3, 3, 3])",
        "minOperations(nums = [1,2,3,4,5,6,7,8])",
        "minOperations(nums = [3, 3, 1, 1, 1, 1, 1, 3, 3])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"a\", str2 = \"c\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"zb\")",
        "canMakeSubsequence(str1 = \"acb\", str2 = \"bac\")",
        "canMakeSubsequence(str1 = \"aabb\", str2 = \"abab\")",
        "canMakeSubsequence(str1 = \"abcdefghijklmnopqrstuvwxyz\", str2 = \"cba\")",
        "canMakeSubsequence(str1 = \"b\", str2 = \"aaaa\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"bdca\")",
        "canMakeSubsequence(str1 = \"cab\", str2 = \"zaab\")",
        "canMakeSubsequence(str1 = \"aay\", str2 = \"bza\")",
        "canMakeSubsequence(str1 = \"zabaz\", str2 = \"zbzza\")"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,1,1,1,1])",
        "minimumSeconds(nums = [0, 1, 2])",
        "minimumSeconds(nums = [1,2,3,1])",
        "minimumSeconds(nums=[2,1,3])",
        "minimumSeconds(nums = [0, 2, 1, 5, 3])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 1, 1, 1, 1, 1])",
        "minimumSeconds(nums = [3, 2, 1, 4, 5, 2])",
        "minimumSeconds(nums = [3,5,7,4,2,8,9,6,1,1,1,1,1,1])"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 1)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 0)",
        "lengthOfLongestSubsequence(nums = [5,6,7,8], target = 4)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 1], target = 0)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], target = 100)",
        "lengthOfLongestSubsequence(nums = [2, 1, 4, 3, 1, 7], target = 10)",
        "lengthOfLongestSubsequence(nums = [9,3,2,1,4,5,3,6,1,2,3,1,2,3,1,2], target = 7)"
    ],
    "sample_370": [
        "sortVowels(s = \"let's code\")",
        "sortVowels(s = \"let's code\")",
        "sortVowels(s = \"lOtcedE\")",
        "sortVowels(s = \"Let's Code!\")",
        "sortVowels(s = \"Lettuce\")",
        "sortVowels(s = \"loTeCde\")",
        "sortVowels(s=\"elocated\")",
        "sortVowels(s = 'codetest')",
        "sortVowels(s = 'tLeEcDo')",
        "sortVowels(s = 'tEdcoeL')"
    ],
    "sample_421": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 1, 4, 2, 3], k = 5)",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 3, 4, 5], k = 3)",
        "minOperations(nums = [2, 1, 5, 2, 3], k = 4)",
        "minOperations(nums = [2,2,3,3,3,4,4,5,5], k = 2)",
        "minOperations(nums = [1,3,2,4,1], k = 2)",
        "minOperations(nums = [3, 4, 5, 1, 2], k = 3)",
        "minOperations(nums = [2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5], k = 2)",
        "minOperations(nums = [4, 1, 3, 3, 3, 2], k = 2)",
        "minOperations(nums = [5, 2, 3, 7, 1, 4, 4, 1, 1, 4], k = 5)"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [3,1,5,4,2])",
        "maxSubarrays(nums = [1,1,0,1])",
        "maxSubarrays(nums = [1, 3, 5, 7, 9, 11, 13, 15])",
        "maxSubarrays(nums = [3, 1, 5, 6, 4, 2])",
        "maxSubarrays(nums = [1, 2, 1, 2, 1])",
        "maxSubarrays(nums = [0, 1, 3, 2, 5, 4, 7, 6])",
        "maxSubarrays(nums = [1, 2, 2, 0, 1, 2, 0])",
        "maxSubarrays(nums = [3, 1, 2, 4, 1, 3, 1])",
        "maxSubarrays(nums = [7, 3, 2, 6, 5, 4, 3, 1])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[1, 1], [2, 2], [1, 2], [2, 1], [3, 3]], k = 2)",
        "countPairs(coordinates = [[1, 1], [2, 2], [1, 2], [2, 1], [3, 3]], k = 1)",
        "countPairs(coordinates = [[1, 1], [2, 1], [1, 2], [2, 2], [1, 3], [2, 3]], k = 1)",
        "countPairs(coordinates = [(0, 0), (1, 0), (0, 1), (1, 1), (3, 1)], k = 1)",
        "countPairs(coordinates = [[1, 2], [1, 3], [1, 3], [3, 2]], k = 1)",
        "countPairs(coordinates = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14]], k = 12)",
        "countPairs(coordinates = [(1, 2), (2, 3), (1, 3), (3, 2), (3, 1), (2, 1), (3, 3), (2, 2), (1, 1), (1, 1)], k = 2)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3], [1, 1], [4, 4], [1, 1], [2, 2], [5, 5], [1, 1], [2, 2]], k = 1)",
        "countPairs(coordinates = [[1, 2], [3, 4], [2, 1], [4, 3], [1, 1], [3, 3], [2, 3], [4, 1], [3, 2], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [1, 2], [3, 3], [5, 5], [2, 2], [2, 0], [3, 2]], k = 4)"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [3, 34, 4, 12, 5, 2], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 2)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 1], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8], target = 4)",
        "lengthOfLongestSubsequence(nums = [4, 3, 2, 3, 5, 2, 1], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 1, 1], target = 7)",
        "lengthOfLongestSubsequence(nums = [5, 4, 1, 3, 5, 6, 10], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 3, 2, 6, 4, 7, 5, 8, 1, 11], target = 100)"
    ],
    "sample_445": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums=[1,1,1])",
        "sumCounts(nums = [1,2,2])",
        "sumCounts(nums = [1,2,1,3])",
        "sumCounts(nums = [1, 2, 2, 1, 2])",
        "sumCounts(nums = [1,2,2,3,2])",
        "sumCounts(nums = [3,2,3,1,1,1])"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "minimumBeautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "minimumBeautifulSubstrings(s = \"ff\")",
        "minimumBeautifulSubstrings(s
        "minimumBeautifulSubstrings(s = \"abccdddefg\")",
        "minimumBeautifulSubstrings(s = \"ggvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv",
        "minimumBeautifulSubstrings(s = \"cdbza\")",
        "minimumBeautifulSubstrings(s = \"qrjxxjfvxxaiynbyy\")"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3])",
        "maxSubarrays(nums = [0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1,1,1,1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 1, 0, 1, 1])",
        "maxSubarrays(nums = [0, 1, 0, 1, 1, 0, 1, 0])",
        "maxSubarrays(nums = [2, 1, -3, -4, 2])",
        "maxSubarrays(nums = [0,1,1,0,0,1,1,0])",
        "maxSubarrays(nums = [1, 2, 2, 1, 4, 4])"
    ],
    "sample_401": [
        "maxSum(nums = [1, 2, 3], m = 2, k = 1)",
        "maxSum(nums = [1, 2, 3], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 3)",
        "maxSum(nums = [2, 1, 5, 1, 3, 2], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 5, k = 3)",
        "maxSum(nums = [0,0,0], m = 2, k = 1)",
        "maxSum(nums = [1, 2, 3, 1, 1, 2], m = 3, k = 3)",
        "maxSum(nums = [1, 0, 0, 0, 0], m = 3, k = 3)",
        "maxSum(nums = [2, 1, 2, 3], m = 3, k = 3)",
        "maxSum(nums = [3, 4, 3, 5, 6, 8, 5, 3, 1, 2, 3, 3, 5, 7, 8, 2, 3, 4, 1, 3], m = 10, k = 5)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "maxSum(A = [1,2,3,4], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 1, 3], m = 2, k = 2)",
        "maxSum(A = [1, 2, 1, 2, 1, 2], m = 3, k = 3)",
        "maxSum(A = [1, 1, 1, 1, 1, 1], m = 4, k = 4)",
        "maxSum(A = [2, 1, 4, 3], m = 2, k = 1)",
        "maxSum(A = [1, 1, 2, 3, 2, 1], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5], m = 2, k = 4)"
    ],
    "sample_363": [
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [1,2,3])",
        "isGood(nums = [1,2,3])",
        "isGood(nums = [1, 2, 3, 4, 5, 4, 2])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4, 5, 6, 7])",
        "minimumSeconds(nums = [0, 2, 1])",
        "minimumSeconds(nums = [1, 2, 1, 2, 1, 2, 1, 2])",
        "minimumSeconds(nums = [1, 3, 4, 2, 5])",
        "minimumSeconds(nums = [0, 0, 0, 0, 0, 1, 1, 1, 1, 1])",
        "minimumSeconds(nums = [0, 1, 0, 2, 3])",
        "minimumSeconds(nums = [1, 3, 1, 1, 3, 1, 1, 3])",
        "minimumSeconds(nums = [2, 5, 3, 7, 1, 9, 4, 6])"
    ],
    "sample_376": [
        "minimumSeconds(nums = [0])",
        "minimumSeconds(nums = [0, 0, 0, 0])",
        "minimumSeconds(nums = [0, 1, 2])",
        "minimumSeconds(nums = [0, 1, 0])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4, 5, 6, 7])",
        "minimumSeconds(nums = [1,0,0,1,0,1])",
        "minimumSeconds(nums = [3,3,3,3])",
        "minimumSeconds(nums = [1, 2, 3, 1, 1, 1, 1])",
        "minimumSeconds(nums = [4, 1, 1, 1, 2])",
        "minimumSeconds(nums = [5, 2, 4, 0])"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1,2,3,4,5])",
        "minLengthAfterRemovals(nums = [1,1,2])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [2,2,3,3,3,4])",
        "minLengthAfterRemovals(nums = [2,2,3,3,3,4])",
        "minLengthAfterRemovals(nums = [2, 3, 3, 3, 5, 5, 5, 2])",
        "minLengthAfterRemovals(nums = [1,1,1,1,2,2,3])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 3, 3, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 1, 2, 1])"
    ],
    "sample_399": [
        "maxSum(nums = [], m = 5, k = 3)",
        "maxSum(nums = [0, 0], m = 1, k = 1)",
        "maxSum(nums = [1,2,3], m = 1, k = 10)",
        "maxSum(nums = [1, 2], m = 2, k = 3)",
        "maxSum(nums = [2, 4, -2, -3], m = 3, k = 2)",
        "maxSum(nums = [-1,0,0,0,0], m = 2, k = 3)",
        "maxSum(nums = [-2, 1, 2, -3], m = 1, k = 1)",
        "maxSum(nums = [5, -4, -3, 4, 6], m = 3, k = 3)",
        "maxSum(nums = [5,2,1,3,4,4,4], m = 2, k = 3)",
        "maxSum(nums = [-5, 2, -6, 0, 3, 5, 6, -7], m = 4, k = 3)"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2, 3], m = 2, k = 1)",
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 1, k = 3)",
        "maxSum(nums = [1, 2, 3, 4], m = 3, k = 1)",
        "maxSum(nums = [0, 1, 2, 3], m = 1, k = 2)",
        "maxSum(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], m = 1, k = 10)",
        "maxSum(nums = [1,2,3,4,1,2,3], m = 4, k = 2)",
        "maxSum(nums = [1,2,3,4,1,2,3,4,1,2,3,4], m = 5, k = 6)",
        "maxSum(nums = [2, 3, 7, 2, 1], m = 1, k = 3)",
        "maxSum(nums = [1, 3, 1, 1, 4, 5, 2, 4, 4], m = 2, k = 2)"
    ],
    "sample_364": [
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1,2,3,4])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [0,1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5,6,7,8,9])",
        "isGood(nums = [3, 4, 0, 1, 2])",
        "isGood(nums = [2, 1, 0, 4])",
        "isGood(nums = [2,5,6,7])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1])",
        "minLengthAfterRemovals(nums = [1,1,1])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [3,3])",
        "minLengthAfterRemovals(nums = [2, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 3, 4, 4])",
        "minLengthAfterRemovals(nums = [1,2,3,3,2,2,1,1])",
        "minLengthAfterRemovals(nums = [5, 6, 8, 5, 6, 8])"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"banana\", \"apple\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"o\")",
        "findWordsContaining(words = [\"banana\", \"ananas\"], x = \"ana\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"mouse\"], x = \"o\")",
        "findWordsContaining(words = [\"coding\", \"is\", \"fun\"], x = \"i\")",
        "findWordsContaining(words = [\"banana\", \"biscuit\"], x = \"an\")",
        "findWordsContaining(words = [\"zero\", \"one\"], x = \"e\")",
        "findWordsContaining(words = [\"she\", \"sells\", \"sea\", \"shells\"], x = \"she\")",
        "findWordsContaining(words = [\"a\", \"banana\", \"c\", \"d\"], x = \"a\")",
        "findWordsContaining(words = [\"go\", \"bingo\"], x = \"o\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 1, 1, 1])",
        "minimumCoins(prices = [2, 3, 4, 5])",
        "minimumCoins(prices = [2, 3, 5])",
        "minimumCoins(prices = [5, 1, 2, 3])",
        "minimumCoins(prices = [1, 2, 1, 3, 1, 2])",
        "minimumCoins(prices = [3, 2, 1, 2, 3])",
        "minimumCoins(prices = [3, 1, 1, 3])",
        "minimumCoins(prices = [1, 2, 3, 4, 3])",
        "minimumCoins(prices = [1, 2, 5, 1, 2, 1, 10])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"a\")",
        "minimumBeautifulSubstrings(s = \"1\")",
        "minimumBeautifulSubstrings(s = \"11\")",
        "minimumBeautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "minimumBeautifulSubstrings(s = \"10111\")",
        "minimumBeautifulSubstrings(s = \"1110\")",
        "minimumBeautifulSubstrings(s = \"bbbb\")",
        "minimumBeautifulSubstrings(s = \"baaa\")",
        "minimumBeautifulSubstrings(s = \"0010010001\")",
        "minimumBeautifulSubstrings(s = \"abcabcabcaabcabcabc\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"aba\", s2 = \"bbb\")",
        "canBeEqual(s1 = \"aba\", s2 = \"abb\")",
        "canBeEqual(s1 = \"cba\", s2 = \"abc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"ebcd\")",
        "canBeEqual(s1 = \"aac\", s2 = \"bcb\")",
        "canBeEqual(s1 = \"aacbb\", s2 = \"ccdd\")",
        "canBeEqual(s1 = \"coda\", s2 = \"doce\")",
        "canBeEqual(s1 = \"axx\", s2 = \"bxx\")"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"adc\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"aba\")",
        "canMakeSubsequence(str1 = \"aba\", str2 = \"aaa\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"aabc\")",
        "canMakeSubsequence(str1 = \"xy\", str2 = \"xza\")",
        "canMakeSubsequence(str1 = \"aac\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abx\", str2 = \"axz\")",
        "canMakeSubsequence(str1 = \"azz\", str2 = \"abz\")",
        "canMakeSubsequence(str1 = \"ae\", str2 = \"jklm\")"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [2, 2, 3, 3, 3, 1, 1, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 4, 5, 5, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 3, 3, 3, 2, 1])",
        "minLengthAfterRemovals(nums = [0,1,1,0,0,1,1,0,0,0,0,1,1,0,0])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"aba\", s2 = \"baa\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cab\")",
        "canBeEqual(s1 = \"egg\", s2 = \"add\")",
        "canBeEqual(s1 = \"xyzt\", s2 = \"zxyt\")",
        "canBeEqual(s1 = \"xyyz\", s2 = \"zyxx\")"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3], target = 4)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 7)",
        "countPairs(nums = [0, 1, 2, 3], target = 4)",
        "countPairs(nums = [1,2,2,3], target = 4)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], target = 20)",
        "countPairs(nums = [2, 5, 8, 13], target = 10)",
        "countPairs(nums = [2, 2, 4, 4, 6, 8, 10], target = 6)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"za\", s2 = \"banana\")",
        "canMakeSubsequence(s1 = \"aaa\", s2 = \"azza\")",
        "canMakeSubsequence(s1 = \"zyx\", s2 = \"axb\")",
        "canMakeSubsequence(s1 = \"zz\", s2 = \"a\")",
        "canMakeSubsequence(s1 = \"aabbb\", s2 = \"ab\")",
        "canMakeSubsequence(s1 = \"banana\", s2 = \"bas\")",
        "canMakeSubsequence(s1 = \"bq\", s2 = \"aba\")",
        "canMakeSubsequence(s1=\"razor\", s2=\"army\")",
        "canMakeSubsequence(s1 = \"yh\", s2 = \"abz\")",
        "canMakeSubsequence(s1 = \"banana\", s2 = \"azzabann\")"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"3\", \"4\", \"5\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"5\", \"prev\", \"3\", \"7\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"5\",\"1\",\"2\",\"prev\",\"prev\",\"prev\"])",
        "lastVisitedIntegers(words = [\"9\", \"prev\", \"3\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"3\",\"3\",\"prev\",\"5\",\"prev\",\"prev\",\"prev\"])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1], [2, 2], [2, 3], [3, 2], [3, 3]], k = 1)",
        "countPairs(coordinates = [[0, 0], [0, 1], [0, 1], [1, 0], [1, 0], [1, 1], [1, 1]], k = 1)",
        "countPairs(coordinates = [(0, 0), (1, 1), (1, 0), (2, 1)], k = 1)",
        "countPairs(coordinates = [[1, 3], [3, 2], [2, 1]], k = 1)",
        "countPairs(coordinates = [(0, 0), (0, 1), (2, 2), (1, 1)], k = 2)",
        "countPairs(coordinates = [[0, 1], [1, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 1], [4, 2], [4, 3]], k = 4)",
        "countPairs(coordinates = [(0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (2, 0), (2, 1), (2, 2), (3, 3)], k = 3)",
        "countPairs(coordinates = [[0, 0], [0, 0], [1, 1], [1, 1], [1, 2], [3, 2], [3, 3], [3, 3], [3, 3], [5, 5]], k = 2)",
        "countPairs(coordinates = [(1, 2), (2, 1), (3, 1), (4, 2), (5, 2), (5, 2), (5, 2), (5, 2), (5, 2), (6, 2)], k = 1)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 1], [4, 2], [2, 4], [4, 4], [5, 2], [4, 3], [1, 3], [5, 4]], k = 2)"
    ],
    "sample_451": [
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aabbcc\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"abcaa\")",
        "minChanges(s = \"aaccaa\")",
        "minChanges(s = \"aaabbbbbbbb\")",
        "minChanges(s = \"bcddcb\")"
    ],
    "sample_461": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 4, limit = 1)",
        "distributeCandies(n = 11, limit = 3)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 12, limit = 4)",
        "distributeCandies(n = 10, limit = 4)",
        "distributeCandies(n = 13, limit = 4)",
        "distributeCandies(n = 100, limit = 5)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcad\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cbda\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"aacb\", s2 = \"ccab\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"ebcda\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"cabde\")",
        "canBeEqual(s1 = \"cab\", s2 = \"bca\")",
        "canBeEqual(s1 = \"1024\", s2 = \"4120\")"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 2, limit = 1)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 3, limit = 5)",
        "distributeCandies(n = 4, limit = 3)",
        "distributeCandies(n = 6, limit = 5)"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 95)",
        "accountBalanceAfterPurchase(p = 94)",
        "accountBalanceAfterPurchase(p = 11)",
        "accountBalanceAfterPurchase(p = 10)",
        "accountBalanceAfterPurchase(p = 105)",
        "accountBalanceAfterPurchase(p = 35)",
        "accountBalanceAfterPurchase(p = 101)",
        "accountBalanceAfterPurchase(p = 56)",
        "accountBalanceAfterPurchase(p = 53)",
        "accountBalanceAfterPurchase(p = 36)"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1, 1])",
        "sumCounts(nums = [1,1,1])",
        "sumCounts(nums = [1,2])",
        "sumCounts(nums = [1, 2, 1, 2])",
        "sumCounts(nums = [1,1,2,2])"
    ],
    "sample_378": [
        "minimumSeconds(A = [0])",
        "minimumSeconds(A = [])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3])",
        "minimumSeconds(A = [1, 2, 4, 5])",
        "minimumSeconds(A = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])",
        "minimumSeconds(A = [4,1,5,2,6,3])",
        "minimumSeconds(A = [4, 2, 5, 3, 1, 7, 8, 9])",
        "minimumSeconds(A = [5, 1, 4, 3, 2, 5, 5])"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"a\", str2 = \"b\")",
        "canMakeSubsequence(str1 = \"a\", str2 = \"b\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ace\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"cxyz\")",
        "canMakeSubsequence(str1 = \"zab\", str2 = \"baa\")",
        "canMakeSubsequence(str1 = \"hello\", str2 = \"lol\")",
        "canMakeSubsequence(str1 = \"bdd\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"hijkl\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"cab\", str2 = \"xabz\")",
        "canMakeSubsequence(str1 = \"awka\", str2 = \"kk\")"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 0, 1])",
        "minimumRightShifts(nums = [1, 1])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumRightShifts(nums = [1, 3, 2, 0])",
        "minimumRightShifts(nums = [1, 0, 0, 1])",
        "minimumRightShifts(nums = [5, 2, 4, 3, 1])",
        "minimumRightShifts(nums = [2, 3, 1, 6, 7])",
        "minimumRightShifts(nums = [3, 1, 3])",
        "minimumRightShifts(nums = [3, 6, 5, 4, 8, 10, 9, 7])"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1], l = 0, r = 1)",
        "countSubMultisets(nums = [1], l = 0, r = 1)",
        "countSubMultisets(nums = [1], l = 1, r = 2)",
        "countSubMultisets(nums = [0], l = 0, r = 0)",
        "countSubMultisets(nums = [1], l = 1, r = 3)",
        "countSubMultisets(nums = [1,1,1,1], l = 0, r = 1)",
        "countSubMultisets(nums = [1,1,1], l = 4, r = 5)",
        "countSubMultisets(nums = [2,3], l = 5, r = 6)",
        "countSubMultisets(nums = [2,3,4], l = 1, r = 6)",
        "countSubMultisets(nums = [0,0,1,1,1], l = 1, r = 3)"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [2, 2, 2, 3])",
        "minimumCoins(prices = [2, 2, 3, 3, 5])",
        "minimumCoins(prices = [2, 4, 5, 6, 2])",
        "minimumCoins(prices = [1, 2, 3, 2, 1, 3, 3])",
        "minimumCoins(prices = [2, 2, 2, 3, 2, 3])",
        "minimumCoins(prices = [3, 5, 1, 8, 2, 5])",
        "minimumCoins(prices = [2, 3, 1, 5, 2, 3, 1, 3])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [3, 5, 7])",
        "minimumCoins(prices = [3, 2, 1, 2])",
        "minimumCoins(prices = [2, 2, 1, 1, 2, 3])",
        "minimumCoins(prices = [1, 2, 4, 5, 3])",
        "minimumCoins(prices = [100, 2, 5, 1, 25, 10])",
        "minimumCoins(prices = [3, 5, 6, 1, 2, 9, 2])",
        "minimumCoins(prices = [70, 69, 59, 78, 59, 48])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"prev\", \"1\"])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 1, 2, 2, 3, 3])",
        "minOperations(nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,",
        "minOperations(nums = [3, 3, 3, 3, 3, 3, 3])",
        "minOperations(nums = [1, 2, 2, 1])",
        "minOperations(nums = [3, 3, 3, 2, 2, 1])",
        "minOperations(nums = [1, 1, 2, 3, 3, 3, 4, 4, 5, 5, 5, 5])",
        "minOperations(nums = [1, 1, 2, 2, 2, 2, 1, 1])",
        "minOperations(nums = [1, 2, 3, 4, 4, 4, 1, 1, 1])",
        "minOperations(nums = [1, 3, 3, 2, 2, 1, 1])",
        "minOperations(nums = [5, 1, 3, 4, 3, 5, 5, 5, 5, 4, 5, 5, 3, 3, 5, 5, 4, 4, 4, 5, 4, 5])"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"pop\", \"push\", \"2\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"2\", \"push\", \"1\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"pop\", \"push\", \"3\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"push\", \"3\", \"pop\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words=[\"push 1\", \"push 2\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = ['push', 'pop', 'push', 'push', 'pop', 'push'])",
        "lastVisitedIntegers(words = [\"p\", \"p\", \"p\", \"a\", \"b\", \"c\", \"p\", \"a\"])"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [2, 1, 2, 1, 2])",
        "minimumSeconds(nums = [1,2,1])",
        "minimumSeconds(nums = [1, 0, 0, 0, 1])",
        "minimumSeconds(nums = [2, 3, 4, 1])",
        "minimumSeconds(nums = [1,1,1,0,0])",
        "minimumSeconds(nums = [2,2,3,5,5])",
        "minimumSeconds(nums = [1, 3, 2, 1, 2, 1, 4, 1])",
        "minimumSeconds(nums = [4, 2, 2, 3, 2, 2, 3, 2])",
        "minimumSeconds(nums = [2,3,3,2,2,2,3,2,3,3,3,2,3,3,3,3,2,2,3,2,3,3,2,2,2,2,3,3,2,2,3,3,2,3,3,2,3,3,3,3,3,2,3,3,2,2,2,2,2,3,3,3,2,3,2,3,2,3,2,2,3,2,3,2,3,3,2,2,3,3,3,2,2,3,3,2,3,2,3,3,3,3,3,2,3,3,2,3,3,3,3,2,2,2,3,3,3,3,2,2,2,3,3,3,2,2,2,2,3,2,3,2,3,3,3,3,2,2,3,2,2,2,2,2,3,3,2,3,2,2,3,3,3,2,3,2,2,2,3,3,3,3,3,2,3,2,3,2,3,2,2,2,2,3,3,2,2,2,2,3,3,3,3,2,2,2,2,3,3,2,2,2,2,3,2,2,3,3,2,3,3,3,2,2,2,3,3,3,2,3,2,3,3,2,2,3,2,2,3,3,2,2,3,2,3,3,2,2,3,3,3,2,3,3,2,3,3,2,3,3,3,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"abcd\", \"efgh\", \"ijkl\"], x = \"i\")",
        "findWordsContaining(words = [\"dog\", \"cat\", \"mouse\", \"elephant\"], x = \"at\")",
        "findWordsContaining(words = [\"hola\", \"que\", \"tal\"], x = \"la\")",
        "findWordsContaining(words = [\"boo\", \"bar\", \"foo\"], x = \"o\")",
        "findWordsContaining(words = [\"happy\", \"new\", \"year\", \"old\"], x = \"e\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\", \"pineapple\", \"blueberry\"], x = \"ana\")",
        "findWordsContaining(words = [\"beautiful\", \"person\", \"universe\"], x = \"u\")",
        "findWordsContaining(words = [\"a\", \"bra\", \"brac\", \"bracad\"], x = \"rac\")",
        "findWordsContaining(words = [\"depression\", \"repress\", \"abracadabra\"], x = \"s\")",
        "findWordsContaining(words = [\"vault\", \"beer\", \"aroma\", \"almost\"], x = \"al\")"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 0, 1, 1])",
        "maxSubarrays(nums = [1, 0, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 0, 1, 0, 0, 1])",
        "maxSubarrays(nums = [1, 2, 3, 0, 0])",
        "maxSubarrays(nums = [1, 1, 0, 0, 1, 0, 1, 1, 1])"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"next\", \"next\", \"next\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"9\", \"12\", \"prev\"])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 10)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 9)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6, 7], target = 10)",
        "countPairs(nums = [0, 3, 6, 2, 7], target = 7)",
        "countPairs(nums = [3, 5, 2, 2, 2, 1], target = 4)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"abcc\", s2 = \"bcca\")",
        "canBeEqual(s1 = \"abac\", s2 = \"zzzz\")",
        "canBeEqual(s1 = \"even\", s2 = \"odd\")",
        "canBeEqual(s1 = \"cccc\", s2 = \"dddd\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"next\", \"next\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"next\", \"next\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words=[\"1\", \"prev\", \"2\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"2\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"5\", \"3\", \"prev\", \"4\", \"prev\"])"
    ],
    "sample_464": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 4, limit = 3)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n=5, limit=5)",
        "distributeCandies(n = 10, limit = 6)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 3, 2])",
        "minimumRightShifts(nums = [0, 1, 2, 3])",
        "minimumRightShifts(nums = [1, 1, 2])",
        "minimumRightShifts(nums = [1, 3, 0, 2, 5])",
        "minimumRightShifts(nums = [1, 3, 5, 6, 7, 9])",
        "minimumRightShifts(nums = [3, 6, 1, 0])",
        "minimumRightShifts(nums = [1, 5, 6, 7, 8])",
        "minimumRightShifts(nums = [1, 3, 4, 5, 2, 6, 7, 8])",
        "minimumRightShifts(nums = [5, 3, 7, 8])",
        "minimumRightShifts(nums = [0, 1, 2, 5, 6, 3, 4, 7, 8])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"pineapple\"], x = \"ana\")",
        "findWordsContaining(words = [\"apple\", \"banana\"], x = \"n\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"abcd\", \"efgh\", \"ijkl\"], x = \"g\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"pig\"], x = \"at\")",
        "findWordsContaining(words=[\"a\", \"b\", \"c\"], x=\"a\")",
        "findWordsContaining(words = [\"chocolate\", \"strawberry\"], x = \"c\")",
        "findWordsContaining(words = [\"we\", \"are\", \"feeling\", \"sad\"], x = \"e\")"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "maxSum(nums = [1, 1, 1, 1, 1], m = 2, k = 3)",
        "maxSum(nums = [1,2], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3], m = 2, k = 10)",
        "maxSum(nums = [2, 2, 2], m = 2, k = 1)",
        "maxSum(nums = [2,1,3,2], m = 2, k = 2)",
        "maxSum(nums = [50, 20, 10, 10], m = 1, k = 2)",
        "maxSum(nums = [4,1,3,7,2,5,4,1,3,7,2,1], m = 3, k = 2)",
        "maxSum(nums = [3, 6, 1, 2, 2, 5, 6, 3, 2, 6, 3, 1, 1, 3, 1, 1, 1, 3, 1, 1], m = 2, k = 8)"
    ],
    "sample_424": [
        "minOperations(nums = [1,1,2,2,3])",
        "minOperations(nums = [3,3,3,3])",
        "minOperations(nums = [1,3,3,3,2,1])",
        "minOperations(nums = [1,2,3,4,5,6,7,8])",
        "minOperations(nums = [1, 1, 2, 2, 3, 3])",
        "minOperations(nums = [1,1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6])",
        "minOperations(nums = [1,3,3,3,2,1,2,1])",
        "minOperations(nums = [1,2,1,2,3])",
        "minOperations(nums = [1,1,2,2,3,3,3,3,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6])",
        "minOperations(nums = [1,2,3,4,5,3,3,4,3,3,4,4,4,4,4])"
    ],
    "sample_417": [
        "minOperations(nums = [1, 1, 4, 2, 3], k = 4)",
        "minOperations(nums = [1,2,3,4,5], k = 2)",
        "minOperations(nums = [1,2,3,4,5,6], k = 3)",
        "minOperations(nums = [1, 3, 5, 4, 2], k = 2)",
        "minOperations(nums = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 4)",
        "minOperations(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], k = 8)",
        "minOperations(nums = [5, 5, 5, 5, 2, 1, 1, 1, 1, 1], k = 3)",
        "minOperations(nums = [9, 4, 3, 2, 1, 1, 1, 1, 1, 1], k = 1)",
        "minOperations(nums = [5, 2, 3, 1, 1, 5, 3, 2, 4], k = 2)",
        "minOperations(nums = [1,1,2,2,3,3,3,3,3,3,4,4,4,5,5,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 9)"
    ],
    "sample_371": [
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"lYmph\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = 'Lymph')",
        "sortVowels(s = \"lyMph\")",
        "sortVowels(s = \"Humpl\")",
        "sortVowels(s = \"HYmlP\")"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 1, limit = 2)",
        "distributeCandies(n = 4, limit = 3)",
        "distributeCandies(n = 1, limit = 10)",
        "distributeCandies(n = 1, limit = 10)",
        "distributeCandies(n=6, limit=1)"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [3, 1, 2])",
        "sumCounts(nums = [3, 3, 1])",
        "sumCounts(nums = [3, 5, 4, 2])"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 2, 3, 0, 4, 5, 6])",
        "maxSubarrays(nums = [1, 0, 0, 1, 0, 1, 1])",
        "maxSubarrays(nums = [0, 1, 1, 0, 1, 1])",
        "maxSubarrays(nums = [1, 2, 3, 0, 0])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [0, 1, 1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 2, 3, 4, 0, 0, 5, 6])"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1])",
        "sumCounts(nums = [2, 2])",
        "sumCounts(nums = [2, 2, 3])",
        "sumCounts(nums = [2, 3, 2])",
        "sumCounts(nums = [2, 3, 1])",
        "sumCounts(nums = [1, 2, 2, 1])"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"aa\", s2 = \"bb\")",
        "canBeEqual(s1 = \"aaa\", s2 = \"bbb\")",
        "canBeEqual(s1 = \"aba\", s2 = \"bab\")",
        "canBeEqual(s1 = \"123\", s2 = \"312\")",
        "canBeEqual(s1 = \"xxyy\", s2 = \"yyxx\")",
        "canBeEqual(s1 = \"aabbaa\", s2 = \"bbbbbb\")",
        "canBeEqual(s1 = \"test\", s2 = \"ttes\")",
        "canBeEqual(s1 = \"efg\", s2 = \"fgh\")",
        "canBeEqual(s1 = \"AXXB\", s2 = \"AXBB\")"
    ],
    "sample_380": [
        "countPairs(nums = [1,2,3,4], target = 6)",
        "countPairs(nums = [1,2,3,4], target = 6)",
        "countPairs(nums = [1,2,3,4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 5)",
        "countPairs(nums = [1, 1, 1, 1, 1], target = 2)",
        "countPairs(nums = [1, 2, 3, 4], target = 7)",
        "countPairs(nums = [1, 3, 7, 9], target = 12)",
        "countPairs(nums = [1,3,3,4,7], target = 6)",
        "countPairs(nums = [1, 3, 6, 4, 2], target = 7)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [0, 1, 1])",
        "sumCounts(nums = [0,1,0])"
    ],
    "sample_368": [
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = 'lymph')",
        "sortVowels(s = \"lYmPH\")",
        "sortVowels(s = \"Hylmp\")",
        "sortVowels(s = \"HYlmp\")",
        "sortVowels(s = \"lymPH\")",
        "sortVowels(s = \"lmYhP\")",
        "sortVowels(s = \"HElly\")"
    ],
    "sample_462": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 10, limit = 4)",
        "distributeCandies(n = 10, limit = 4)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 12, limit = 6)"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 4, 2, 3])",
        "minimumCoins(prices = [1, 2, 1, 2, 1, 2])",
        "minimumCoins(prices = [1, 5, 1, 1, 6, 1])",
        "minimumCoins(prices = [1, 1, 2, 1, 3])",
        "minimumCoins(prices = [1,2,1,2,1,2])",
        "minimumCoins(prices = [1, 5, 8, 9, 10])",
        "minimumCoins(prices = [3,2,3,5])",
        "minimumCoins(prices = [2, 1, 4, 2, 6, 2])",
        "minimumCoins(prices=[1, 3, 7, 11, 15])",
        "minimumCoins(prices = [4, 2, 1, 4, 6, 1, 7])"
    ],
    "sample_426": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minOperations(nums = [3,1,4,1])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minOperations(nums = [3, 2])",
        "minOperations(nums = [5,1,3,4,2])",
        "minOperations(nums = [2,2,3,3,3,3])",
        "minOperations(nums = [1,1,3,3,3,4,4,4,4,5,5,5,5,5,5,5])",
        "minOperations(nums = [2, 3, 3, 2, 2, 5, 2])",
        "minOperations(nums = [2, 3, 3, 2, 2, 4, 3, 3])",
        "minOperations(nums = [7,2,12,4,9,4,8,3,4,6,4,5,7,7,2,7,4,5,8,7,2,5,7,2,4,6,4,6,8,7,2,9,7,8,3,12,6,12,5,7,7,7,5,8,6,4,8,8,4,7,9,5,2,3,6,2,3,6,3,7,3,12,4,8,4,9,5,4,5,6,7,4,6,5,7,7,9,12,12,7,7,8,12,5,2,7,2,6,5,8,7,12,2,8,12,4,5,6,5,7,9,12,2,4,9,7,8,5,12,6,8,5,9,4,4,4,6,12,6,4,7,5,7,12,7,5,6,8,5,4,8,9,9,4,9,4,8,7,7,12,5,2,12,2,4,4,8,5,7,8,8,12,12,6,9,6,4,9,7,8,4,4,5,2,2,4,5,8,6,7,5,2,6,7,6,4,12,5,5,6,12,7,12,8,8,12,7,7,2,9,7,8,3,12,6,12,5,7,7,7,5,8,6,4,8,8,4,7,9,5,2,3,6,2,3,6,3,7,3,12,4,8,4,9,5,4,5,6,7,4,6,5,7,7,9,12,12,7,7,8,12,5,2,7,2,6,5,8,7,12,2,8,12,4,5,6,5,7,9"
    ],
    "sample_423": [
        "minOperations(nums = [1, 2, 3])",
        "minOperations(nums = [1, 2, 3, 4])",
        "minOperations(nums = [1, 2, 3, 4])",
        "minOperations(nums = [1,1,2,2,2])",
        "minOperations(nums = [2, 2, 2, 3, 3])",
        "minOperations(nums = [1, 2, 1, 2, 1, 2, 2])",
        "minOperations(nums = [3,3,3,3,2,2,1])",
        "minOperations(nums = [2, 4, 4, 1, 2, 2, 3])",
        "minOperations(nums = [2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5])",
        "minOperations(nums = [2, 3, 5, 2, 5, 1, 2, 2, 1, 5, 5])"
    ],
    "sample_476": [
        "minimumCoins(prices = [1,2,5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1,2,3,4,5])",
        "minimumCoins(prices = [1,2,3,2])",
        "minimumCoins(prices = [5, 3, 1])",
        "minimumCoins(prices = [4, 2, 6, 8])",
        "minimumCoins(prices = [1,5,6,4,7])",
        "minimumCoins(prices = [10, 20, 5, 25])",
        "minimumCoins(prices = [25,50,10,25,50])",
        "minimumCoins(prices=[2,1,2,4,6,1])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [0,1,2])",
        "minimumRightShifts(nums = [1,2,3,4,5,6,7,8])",
        "minimumRightShifts(nums = [0,1,2,3,4,5,6,7,8,9])",
        "minimumRightShifts(nums = [3, 1, 2])",
        "minimumRightShifts(nums = [2,1,3,6,4,5])",
        "minimumRightShifts(nums = [1, 1, 1, 0, 1])",
        "minimumRightShifts(nums = [3, 4, 1, 7, 2])"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [1,2,3,4,5,6])",
        "minimumRightShifts(nums = [0, 1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [2, 1, 4, 3])",
        "minimumRightShifts(nums = [0, 0])",
        "minimumRightShifts(nums = [2, 0, 1, 5, 3, 10])"
    ]
}