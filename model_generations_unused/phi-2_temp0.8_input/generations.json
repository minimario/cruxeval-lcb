{
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts(nums = [6, 7, 1, 2, 3, 4])",
        "minimumRightShifts(nums = [5, 6, 7, 8, 9, 10, 1, 2, 3, 4])",
        "minimumRightShifts(nums = [2,3,1,5,4])",
        "minimumRightShifts(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumRightShifts(nums = [4, 2, 5, 1])"
    ],
    "sample_453": [
        "minChanges(s = \"abab\")",
        "minChanges(\"aab\")",
        "minChanges(s = \"aabb\")",
        "minChanges(\"ababa\")",
        "minChanges(s = \"babab\")",
        "minChanges(s = \"baaaab\")",
        "minChanges(s = \"aaaa\")",
        "minChanges(s = \"bbab\")",
        "minChanges(\"aaabbba\")",
        "minChanges(\"aac\")"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 6)",
        "lengthOfLongestSubsequence(nums = [10, 9, 2, 5, 3, 7, 101, 18], target = 17)",
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 5)",
        "lengthOfLongestSubsequence(nums = [3, 2, 2, 3], target = 6)",
        "lengthOfLongestSubsequence(nums = [2, 3, 1, 2, 4, 3], target = 7)",
        "lengthOfLongestSubsequence(nums = [4, 1, 2, 3], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 1, 1, 1], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 4, 6, 7], target = 9)",
        "lengthOfLongestSubsequence(nums = [2, 4, 7, 3, 9], target = 7)"
    ],
    "sample_367": [
        "sortVowels(\"lYmpH\")",
        "sortVowels(\"lYmpH\")",
        "sortVowels(\"Hello World\")",
        "sortVowels(s = \"ympH\")",
        "sortVowels(s = 'the quick brown fox jumps over the lazy dog')",
        "sortVowels(s = \"hello world\")",
        "sortVowels(\"aHympH\")",
        "sortVowels(s = 'My Name is Michael')",
        "sortVowels(s = \"giraffe\")",
        "sortVowels(s = \"mYmpHpHiLlO\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 3, 7, 11, 15], target = 9)",
        "lengthOfLongestSubsequence(nums = [3, 4, -1, 2], target = 6)",
        "lengthOfLongestSubsequence(nums = [3,4,5,1,2], target = 7)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9,10], target = 24)",
        "lengthOfLongestSubsequence(nums = [4, 5, 6, 7, 8], target = 0)",
        "lengthOfLongestSubsequence(nums = [3,1,5,2,4], target = 5)",
        "lengthOfLongestSubsequence(nums = [9,4,7,3,8,6], target = 2)",
        "lengthOfLongestSubsequence(nums = [1,2,4,2,4,8,7,2,3], target = 6)"
    ],
    "sample_381": [
        "countPairs(nums = [1,2,3], t = 4)",
        "countPairs(nums = [1,2,3,4,5], t = 5)",
        "countPairs(nums = [1, 2, 3, 4], t = 6)",
        "countPairs(nums = [1, 2, 3, 4], t = 6)",
        "countPairs(nums = [1,1,2,2], t = 3)",
        "countPairs(nums = [1,5,3,4,2], t = 7)",
        "countPairs(nums = [1,4,2,3,5], t = 5)",
        "countPairs([1, 2, 3, 4, 5, 6], 7)",
        "countPairs(nums = [-3, -1, 0, 1, 3], t = 2)",
        "countPairs(nums = [1, 3, -4, 5, 2], t = 0)"
    ],
    "sample_366": [
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3])",
        "isGood([3, 1, 2])",
        "isGood(nums = [2, 3, 1, 4, 5])"
    ],
    "sample_369": [
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = 'Hello World')",
        "sortVowels(s = \"hello world\")",
        "sortVowels(s = 'LyxmpH')",
        "sortVowels(s = 'Hello, world!')",
        "sortVowels(s = \"ymph\")",
        "sortVowels(s = \"myHello\")",
        "sortVowels(s = \"haloYmpH\")",
        "sortVowels(s = \"Lazy Pythonistas\")"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3,4,5,1,2])",
        "minimumRightShifts(nums = [3,4,5,1,2])",
        "minimumRightShifts(nums = [2,1,2])",
        "minimumRightShifts(nums = [0,1,0])",
        "minimumRightShifts(nums = [4, 5, 6, 7, 8, 1, 2])"
    ],
    "sample_448": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abcd\")",
        "minChanges(\"ab\")",
        "minChanges(\"aab\")",
        "minChanges(s = \"abb\")",
        "minChanges(s = \"aabba\")",
        "minChanges(s = \"eee\")",
        "minChanges(s = \"abcccab\")",
        "minChanges(\"pink\")"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"ba\", s2 = \"na\")",
        "canBeEqual(s1 = \"ba\", s2 = \"na\")",
        "canBeEqual(s1 = \"baa\", s2 = \"nana\")",
        "canBeEqual(s1 = \"bac\", s2 = \"bca\")",
        "canBeEqual(s1 = \"baaa\", s2 = \"baa\")",
        "canBeEqual(s1 = \"banana\", s2 = \"bnaaan\")",
        "canBeEqual(s1 = \"baaab\", s2 = \"baabb\")",
        "canBeEqual(s1 = \"bcab\", s2 = \"bcaa\")"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1,2,2,3,1])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [2, 2, 3, 3, 4])",
        "minLengthAfterRemovals(nums = [1,1,1,1])",
        "minLengthAfterRemovals(nums = [2,2,2,2,2,2,2])",
        "minLengthAfterRemovals(nums = [2,3,2,3,2,3])",
        "minLengthAfterRemovals(nums = [0, 1, 1, 2, 2, 2, 3, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [2,2,2,3,3,3,3,4,4,4,4])",
        "minLengthAfterRemovals(nums = [3,3,3,1,1,1,1,2,2,2,2])",
        "minLengthAfterRemovals(nums = [1,1,3,2,3,4])"
    ],
    "sample_361": [
        "isGood(a = [1, 2, 3, 1, 2, 3])",
        "isGood(a = [1,2,3,4,5,6])",
        "isGood(a = [1, 2, 3, 2, 4])",
        "isGood(a = [1, 2, 3, 2, 4])",
        "isGood(a = [1, 2, 3, 4, 1, 2])",
        "isGood(a = [2, 1, 3, 2, 1])",
        "isGood([1,2,3,4,4])",
        "isGood(a = [1, 2, 2, 3, 5, 6])",
        "isGood(a = [3, 5, 1, 6])",
        "isGood([2, 4, 2, 2, 4, 1, 1, 4, 2])"
    ],
    "sample_419": [
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [4,3,2,1], k = 2)",
        "minOperations(nums = [3,1,2,4], k = 2)",
        "minOperations(nums = [1,1,1,1], k = 3)",
        "minOperations(nums = [2,3,3,5,6], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13], k = 4)",
        "minOperations(nums = [3, 4, 9, 5, 6], k = 3)",
        "minOperations(nums = [3, 2, 3, 9], k = 2)"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1,2,3,4,5])",
        "findMaximumLength(nums = [1,3,1])",
        "findMaximumLength(nums = [1,3,4,2])",
        "findMaximumLength(nums = [0,1,2])",
        "findMaximumLength(nums = [0,0,0])",
        "findMaximumLength(nums = [0, 1, 0, 3, 2, 3])",
        "findMaximumLength(nums = [2,2,2,2,2,2])",
        "findMaximumLength(nums = [0, 1, 0, 1, 1, 0])",
        "findMaximumLength([3,1,3])",
        "findMaximumLength([1,0,0,1,1,1])"
    ],
    "sample_433": [
        "maxSubarrays(nums = [2, 4, 8])",
        "maxSubarrays(nums = [1, 2, 3])",
        "maxSubarrays(nums = [1, 1, 1])",
        "maxSubarrays(nums = [4,2,2,4])",
        "maxSubarrays(nums = [2, 4, 8, 6])",
        "maxSubarrays(nums = [3, 7, 5, 2])",
        "maxSubarrays(nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "maxSubarrays([1,2,3,4,8,16,32])",
        "maxSubarrays([2, 2, 2, 1, 1, 1, 2, 2, 2])",
        "maxSubarrays(nums = [2, 5, 1, 2, 5, 3, 2])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"ba\", str2 = \"banana\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bac\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abbc\")",
        "canMakeSubsequence(\"aba\", \"abc\")",
        "canMakeSubsequence(str1 = \"abd\", str2 = \"bca\")",
        "canMakeSubsequence(str1 = \"zaz\", str2 = \"abcd\")",
        "canMakeSubsequence(\"asdfasd\", \"asdfasd\")",
        "canMakeSubsequence(str1 = \"apple\", str2 = \"a\")",
        "canMakeSubsequence(\"z\", \"zoo\")",
        "canMakeSubsequence(\"a\", \"bcd\")"
    ],
    "sample_402": [
        "maxSum(nums = [1, 2, 3, 1], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 1, 2, 1, 2, 1, 2], m = 3, k = 4)",
        "maxSum([1, 2, 1], 2, 1)",
        "maxSum([2, 1, 5, 2, 3, 2], 2, 2)",
        "maxSum([1, 2, 3, 4, 5, 6, 7, 8, 9], 3, 5)",
        "maxSum(nums = [4,2,3,1,2], m = 2, k = 4)",
        "maxSum(nums = [0, 1, 2, 2, 3, 2], m = 2, k = 3)",
        "maxSum(nums = [3, 3, 2, 4, 2], m = 3, k = 2)",
        "maxSum(nums = [3, 2, -1, 6, 7], m = 3, k = 2)",
        "maxSum([3, 2, 1, 4, 2], 4, 2)"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"b\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"na\")",
        "findWordsContaining(words = [\"the\", \"quick\", \"brown\", \"fox\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"bird\"], x = \"fish\")",
        "findWordsContaining(words = [\"apple\", \"pear\", \"banana\", \"peach\"], x = \"ea\")",
        "findWordsContaining(words = [\"abc\", \"ab\", \"a\", \"b\"], x = \"c\")",
        "findWordsContaining(words = [\"apple\", \"pear\", \"banana\", \"pineapple\", \"peach\"], x = \"an\")",
        "findWordsContaining(words = [\"Hello\", \"World\", \"Hello World\", \"Hello\", \"World\"], x = \"Hello\")"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = ['prev', 'prev', 'next', 'next', 'next', 'prev'])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"3\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = ['prev', 'next', 'next', 'prev', 'next', 'next', 'prev'])",
        "lastVisitedIntegers(words = [\"prev\", \"one\", \"two\", \"prev\", \"three\", \"one\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"next\", \"1\", \"next\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"1\", \"prev\", \"1\", \"1\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"hello\", \"prev\", \"world\", \"prev\", \"prev\", \"prev\", \"goodbye\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"next\", \"2\", \"prev\", \"3\", \"prev\", \"1\", \"prev\", \"4\", \"2\"])",
        "lastVisitedIntegers(words = [\"visit\", \"prev\", \"prev\", \"prev\", \"visit\", \"visit\", \"prev\", \"prev\", \"visit\", \"prev\", \"prev\", \"prev\", \"visit\"])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4], k = 2)",
        "minOperations(nums = [1, 2, 1], k = 2)",
        "minOperations(nums = [1, 3, 2, 3, 4], k = 3)",
        "minOperations(nums = [3, 3, 3, 3], k = 3)",
        "minOperations(nums = [1, 3, 6, 10], k = 4)",
        "minOperations(nums = [4, 5, 0, 3, 2], k = 4)",
        "minOperations(nums = [1, 4, 4, 5], k = 5)",
        "minOperations(nums = [4, 2, 6, 5, 3, 1], k = 4)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1,2,3,4,5], k = 2)",
        "minOperations(nums = [1, 2, 1, 2], k = 2)",
        "minOperations(nums = [1, 2, 3, 5], k = 2)",
        "minOperations(nums = [1,2,4], k = 3)",
        "minOperations(nums = [2, 1, 2, 4], k = 2)",
        "minOperations(nums = [2, 5, 2, 5, 2, 5], k = 2)",
        "minOperations(nums = [4, 3, 2, 3, 5, 2, 3, 1], k = 3)",
        "minOperations(nums = [5, 2, 3, 4, 7], k = 1)",
        "minOperations([10, 12, 2, 3], 2)"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1,4,2,3])",
        "minimumSeconds(nums = [1, 2, 3, 1])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7])",
        "minimumSeconds(nums = [1,3,1,3])",
        "minimumSeconds(nums = [1,3,6,4,1])",
        "minimumSeconds(nums = [1,3,3,1])",
        "minimumSeconds(nums = [0, 1, 0, 0, 1, 0, 1])",
        "minimumSeconds(nums = [9,3,1,4,2])",
        "minimumSeconds(nums = [7, 1, 5, 8, 6, 1])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 1, 2, 2, 3, 3], target = 4)",
        "countPairs(nums = [2,7,11,15], target = 9)",
        "countPairs(nums = [1, 4, 2], target = 5)",
        "countPairs([-1, 0, 1, 2, -1, -4], 3)",
        "countPairs(nums = [2, 3, 1, 1, 2], target = 4)",
        "countPairs(nums = [1, 4, 6, 7], target = 8)",
        "countPairs(nums = [1, 2, -3, 4, -1, -2], target = 0)",
        "countPairs(nums = [10, 5, 7], target = 15)",
        "countPairs(nums = [3, 5, 2, -1], target = 5)",
        "countPairs(nums = [4, 2, 3, 0, 1], target = 4)"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"banana\", \"mango\", \"apple\"], x = \"an\")",
        "findWordsContaining(words = [\"ba\", \"nana\"], x = \"n\")",
        "findWordsContaining(words = [\"ba\", \"banana\", \"nana\"], x = \"n\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"hi\", \"there\"], x = \"e\")",
        "findWordsContaining(words = [\"Hello\", \"Hello\", \"World\"], x = \"o\")",
        "findWordsContaining(words = [\"abc\", \"ghi\", \"jkl\"], x = \"i\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"haha\", \"bye\"], x = \"l\")",
        "findWordsContaining(words = [\"I\", \"am\", \"learning\", \"to\", \"programming\"], x = \"am\")",
        "findWordsContaining(words = [\"ab\", \"ba\", \"ac\", \"bc\", \"abcd\"], x = \"a\")",
        "findWordsContaining(words = [\"kangaroo\", \"rhinoceros\", \"wallaby\", \"koala\"], x = \"ko\")"
    ],
    "sample_372": [
        "sortVowels(s = \"Hello World!\")",
        "sortVowels(s = \"lEtcede\")",
        "sortVowels(s = 'lovely')",
        "sortVowels(s = \"apple\")",
        "sortVowels(s = \"Hello World\")",
        "sortVowels(s = \"tecoedL\")",
        "sortVowels(s = 'Lorem ipsum dolor sit amet')",
        "sortVowels(\"Hello world\")",
        "sortVowels(s = \"aegib\")",
        "sortVowels(s = 'looooopiiiinnnnnddd')"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [1, 2, 2])",
        "minLengthAfterRemovals(nums = [1,1,2])",
        "minLengthAfterRemovals(nums = [2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [3, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [2, 3, 3])",
        "minLengthAfterRemovals(nums = [2,2,3,3,4,4,5,5])",
        "minLengthAfterRemovals(nums = [2,2,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 3, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [4,2,2,3,1,2])",
        "minLengthAfterRemovals(nums = [2,3,1,2,5,2,3,5])"
    ],
    "sample_452": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abcb\")",
        "minChanges(s = \"baa\")",
        "minChanges(s = \"abcde\")",
        "minChanges(\"bab\")",
        "minChanges(s = \"azxxzy\")",
        "minChanges(s = \"aaba\")",
        "minChanges(\"abacddcab\")"
    ],
    "sample_385": [
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [2,7,11,15], target = 9)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 5)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs([1,2,3,4], 6)",
        "countPairs([1,2,3],4)",
        "countPairs(nums = [4,5,6,7], target = 10)",
        "countPairs(nums = [1,3,4,5,6], target = 5)",
        "countPairs([3, 1, 2, 1, 2], 4)"
    ],
    "sample_427": [
        "minOperations(nums = [1,2,3])",
        "minOperations(nums = [1, 2])",
        "minOperations(nums = [1, 2, 2, 3])",
        "minOperations(nums = [1, 2, 2, 3])",
        "minOperations(nums = [3, 3, 3])",
        "minOperations([2, 3, 3])",
        "minOperations(nums = [2, 3, 3, 3, 4, 4, 5])",
        "minOperations(nums = [2, 3, 6, 8])",
        "minOperations([6, 3, 6])",
        "minOperations(nums = [2, 1, 3, 2, 3, 1, 3, 2])"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1,1,2])",
        "minLengthAfterRemovals(nums = [1, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1])",
        "minLengthAfterRemovals(nums = [2,2,3,3,4])",
        "minLengthAfterRemovals(nums = [2, 2, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [2,2,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [3, 4, 3, 5, 4, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 6, 7, 7, 7, 7, 8, 8, 9])"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50])",
        "minimumCoins(prices = [1,5,10,25])",
        "minimumCoins(prices = [1, 5, 10, 25, 100])",
        "minimumCoins(prices = [7, 1, 5, 8, 4])",
        "minimumCoins(prices = [3, 1, 4, 1, 5])",
        "minimumCoins(prices = [10, 25, 35, 84, 120])",
        "minimumCoins(prices = [8, 4, 6, 10])",
        "minimumCoins(prices = [2, 1, 5, 100, 20, 10, 50, 10, 5])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"grapes\"], x = \"ap\")",
        "findWordsContaining(words = [\"bana\", \"banana\", \"mango\"], x = \"ana\")",
        "findWordsContaining(words = [\"python\", \"java\", \"c++\", \"ruby\"], x = \"p\")",
        "findWordsContaining(words = [\"bar\", \"foo\", \"fizz\"], x = \"o\")",
        "findWordsContaining(words = [\"car\", \"school\", \"cat\"], x = \"s\")",
        "findWordsContaining(words = [\"bun\", \"cat\", \"hat\", \"dog\"])"
    ],
    "sample_420": [
        "minOperations(nums = [1, 2, 3, 4], k = 2)",
        "minOperations(nums = [3, 2, 2, 3], k = 3)",
        "minOperations(nums = [1,2,1], k = 1)",
        "minOperations(nums = [5, 4, 3, 2, 1], k = 2)",
        "minOperations(nums = [4, 2, 3], k = 4)",
        "minOperations(nums = [3, 1, 3, 2, 2], k = 2)",
        "minOperations(nums = [7, 2, 3, 4, 6], k = 3)",
        "minOperations(nums = [4, 2, 3, 10, 3, 7], k = 4)",
        "minOperations([4,3,2,7,1], 3)",
        "minOperations(nums = [2, 3, 4, 5, 1, 2, 1], k = 3)"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [3, 1, 2])",
        "isGood(nums = [1, 2, 2])",
        "isGood(nums = [0, 2, 1])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7])",
        "isGood(nums = [0, 1, 2, 4, 3])",
        "isGood(nums = [2,3,4,5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood(nums = [4, 1, 5, 2, 3])"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [10, 9, 2, 5, 3, 7, 101, 18], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 5)",
        "lengthOfLongestSubsequence(nums = [2, 7, 11, 15], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 3, 2, 2, 3, 1], target = 3)",
        "lengthOfLongestSubsequence(nums = [2, 3, 1, 2, 4, 2], target = 3)",
        "lengthOfLongestSubsequence(nums = [-2, -1, 1, 2, 3], target = 0)",
        "lengthOfLongestSubsequence(nums = [2, 3, 4, 5, 1], target = 4)",
        "lengthOfLongestSubsequence(nums = [2, 3, 1, 4, 2], target = 6)",
        "lengthOfLongestSubsequence(nums = [4, 3, 5, 4, 3, 5, 6, 5, 7], target = 7)"
    ],
    "sample_365": [
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1,2,3,4])",
        "isGood(nums = [1,2,3,4,5,6,7,8,9,10])",
        "isGood(nums = [2, 3, 1, 2])",
        "isGood(nums = [2, 3, 4, 4])",
        "isGood([2,3,4,5,6])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3])",
        "isGood([1,2,3,4])"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1,0,1])",
        "maxSubarrays(nums = [1, 0, 0, 1])",
        "maxSubarrays(nums = [1, 0, 0, 1, 0, 0, 1])",
        "maxSubarrays(nums = [0, 1])",
        "maxSubarrays(nums = [1, 2, 1, 2])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 0, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 0, 1, 1, 1])",
        "maxSubarrays(nums = [3, 2, 2, 3, 1, 3, 3])",
        "maxSubarrays(nums = [3,5,9,10,3,5,9,10])"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [2,3,1,2,4,3], target = 6)",
        "lengthOfLongestSubsequence(nums = [10,9,2,5,3,7,101,18], target = 8)",
        "lengthOfLongestSubsequence(nums = [2, 3, 4, 5, 6], target = 10)",
        "lengthOfLongestSubsequence(nums = [2,3,4,5,6], target = 6)",
        "lengthOfLongestSubsequence(nums = [2,3,4], target = 8)",
        "lengthOfLongestSubsequence(nums = [1, 3, 7, 11, 15], target = 9)",
        "lengthOfLongestSubsequence(nums = [1,3,5,6], target = 9)",
        "lengthOfLongestSubsequence(nums = [10,2,5,1,12], target = 11)",
        "lengthOfLongestSubsequence(nums = [4,3,2,7,8,2,3,1], target = 9)",
        "lengthOfLongestSubsequence(nums = [1,2,3,1,2,1], target = 4)"
    ],
    "sample_450": [
        "minChanges(s = \"aabb\")",
        "minChanges(\"abccba\")",
        "minChanges(s = \"abb\")",
        "minChanges(s = \"aaaaaa\")",
        "minChanges(s = \"aa\")",
        "minChanges(s = \"aabbbb\")",
        "minChanges(s = \"abcabcabcabc\")",
        "minChanges(\"azxxzy\")",
        "minChanges(s = \"ggggg\")",
        "minChanges(s = \"a\")"
    ],
    "sample_463": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 8, limit = 3)",
        "distributeCandies(n = 9, limit = 3)",
        "distributeCandies(n = 9, limit = 5)"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1,2,2,3])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1,3,2])",
        "sumCounts(nums = [0, 1, 2])",
        "sumCounts(nums = [1,1,2])",
        "sumCounts([2,3])"
    ],
    "sample_449": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"ab\")",
        "minChanges(s = \"\")",
        "minChanges(s = \"baaa\")",
        "minChanges(s = \"baab\")",
        "minChanges(s = \"ababa\")",
        "minChanges(s = \"aaabbcc\")",
        "minChanges(\"\")",
        "minChanges(s = \"hello\")",
        "minChanges(\"abcabc\")"
    ],
    "sample_425": [
        "minOperations(nums = [1, 2, 3])",
        "minOperations(nums = [1, 1, 2])",
        "minOperations(nums = [1, 2, 3, 4])",
        "minOperations(nums = [2, 3, 2])",
        "minOperations(nums = [1, 1, 1, 2, 2])",
        "minOperations(nums = [1, 3, 1, 3])",
        "minOperations(nums = [2, 3, 3, 2, 4])",
        "minOperations(nums = [4, 3, 2, 3, 4, 4])",
        "minOperations(nums = [2, 1, 2, 1, 3])",
        "minOperations(nums = [3, 4, 2, 3, 2, 3, 4, 2, 3])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"bat\", str2 = \"tab\")",
        "canMakeSubsequence(str1 = \"abz\", str2 = \"baz\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"acdb\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"adz\")",
        "canMakeSubsequence(\"zzz\", \"bbaa\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"aaaaaaaaaa\")",
        "canMakeSubsequence(\"za\", \"zoo\")",
        "canMakeSubsequence(\"xax\", \"aaz\")",
        "canMakeSubsequence(\"x\", \"ax\")",
        "canMakeSubsequence(\"\", \"abc\")"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1,2,3,4])",
        "minimumSeconds(nums = [1,1,2,2,3,3])",
        "minimumSeconds(nums = [1,2,2])",
        "minimumSeconds(nums = [1,2,2])",
        "minimumSeconds(nums = [1,1,2,2,1,1])",
        "minimumSeconds(nums = [1,1,3,3,3,4,2,2])",
        "minimumSeconds(nums = [5,1,3,5])",
        "minimumSeconds([4,5,1,2,6])",
        "minimumSeconds(nums = [1,3,5,2,3,5,7,7,9])",
        "minimumSeconds([1,4,4,4,7,7,9,11,11,11,11])"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 9)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 4)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9,10], target = 10)",
        "lengthOfLongestSubsequence(nums = [3,4,5,1,2], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,3,-1,-3,5,3,6,7], target = 0)",
        "lengthOfLongestSubsequence(nums = [2,4,3,1,5], target = 7)",
        "lengthOfLongestSubsequence(nums = [1,3,5,8,4,9,6], target = 10)",
        "lengthOfLongestSubsequence(nums = [3,4,0,3,2,4], target = 7)",
        "lengthOfLongestSubsequence(nums = [0,5,1,1,1,1,0,0], target = 1)",
        "lengthOfLongestSubsequence(nums = [9,4,9,5,2,6,3], target = 9)"
    ],
    "sample_370": [
        "sortVowels(s = \"Hello World\")",
        "sortVowels(s = \"hello world\")",
        "sortVowels(s = \"hello world\")",
        "sortVowels(s = \"lEoTcede\")",
        "sortVowels(s = \"hello\")",
        "sortVowels(\"banana\")",
        "sortVowels(s = \"hello\")",
        "sortVowels(s = \"hello\")",
        "sortVowels(s = \"lESoCedE\")",
        "sortVowels(s = \"bEAvEncaS\")"
    ],
    "sample_421": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 4)",
        "minOperations([1, 2, 3, 4, 5], 3)",
        "minOperations(nums = [1,2,3,4,5,6], k = 4)",
        "minOperations(nums = [1, 2, 2, 1], k = 3)",
        "minOperations(nums = [2, 4, 3, 5, 1], k = 2)",
        "minOperations(nums = [4, 2, 3, 1, 4], k = 3)",
        "minOperations(nums = [1,1,2,2,2], k = 3)",
        "minOperations(nums = [1, 4, 2, 3, 4], k = 3)",
        "minOperations([2, 5, 8, 1, 2], 3)",
        "minOperations(nums = [4, 2, 1, 1, 2, 7], k = 2)"
    ],
    "sample_430": [
        "maxSubarrays(nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 1, 0, 0, 1])",
        "maxSubarrays(nums = [0,1,1,0,1,1])",
        "maxSubarrays(nums = [1,0,0,1])",
        "maxSubarrays(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",
        "maxSubarrays(nums = [4, 4, 4, 4, 4, 4])",
        "maxSubarrays([0,1,1,0,1,1,1,0])",
        "maxSubarrays([2, -4, 5, 3, -5])",
        "maxSubarrays(nums = [2, 4, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 3], [1, 2]], k = 2)",
        "countPairs(coordinates = [[0,0],[0,1],[0,2],[1,0],[1,1],[1,2],[2,0],[2,1],[2,2]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 3], [1, 2], [4, 5]], k = 2)",
        "countPairs(coordinates = [[-1, 1], [0, -1], [1, 1], [1, 0]], k = 2)",
        "countPairs(coordinates = [[0,0], [1,0], [1,1], [1,2], [0,2], [2,0], [2,1], [2,2]], k = 2)",
        "countPairs(coordinates = [[-2, -1], [3, 4], [5, -3], [-2, 4]], k = 1)",
        "countPairs(coordinates = [[1, 2], [1, 1], [2, 3], [1, 2], [1, 1], [3, 2]], k = 1)",
        "countPairs(coordinates = [[1, 1], [2, 1], [1, 2], [2, 2], [3, 2], [2, 3], [2, 4], [2, 5], [3, 5], [3, 4], [4, 5], [4, 4], [5, 4], [5, 3], [5, 2], [5, 1], [4, 1], [3, 1], [2, 1], [1, 1]], k = 3)",
        "countPairs(coordinates = [[0,0],[1,0],[0,1],[1,1],[2,2],[2,1],[2,0],[1,1],[1,2],[2,0],[0,2],[0,3],[1,2],[2,3],[3,3]], k = 2)"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [2, 3, 1, 2, 4, 3], target = 6)",
        "lengthOfLongestSubsequence(nums = [2, 3, 1, 2, 4, 3], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [2, 3, 1, 2, 4, 3], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 2, 7, 1, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [2, 3, 1, 3, 4, 2], target = 7)",
        "lengthOfLongestSubsequence(nums = [2, 3, 4, 7, 11, 15], target = 9)",
        "lengthOfLongestSubsequence(nums = [3, 4, -1, -2, 1, 3], target = 6)",
        "lengthOfLongestSubsequence(nums = [4, 2, 6, 7, 9, 6, 1], target = 16)"
    ],
    "sample_445": [
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1,2])",
        "sumCounts(nums = [1,2,2])",
        "sumCounts([1,2,2])",
        "sumCounts(nums = [0, 1, 2])",
        "sumCounts([1,1,1])",
        "sumCounts(nums = [3,3,4,3])"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(\"aab\")",
        "minimumBeautifulSubstrings(s = \"bababab\")",
        "minimumBeautifulSubstrings(\"ababab\")",
        "minimumBeautifulSubstrings(\"abcabc\")",
        "minimumBeautifulSubstrings(\"ababcbba\")",
        "minimumBeautifulSubstrings(\"ababcaab\")",
        "minimumBeautifulSubstrings(s = \"110100\")",
        "minimumBeautifulSubstrings(\"babana\")",
        "minimumBeautifulSubstrings(s = \"abacbaabababcba\")",
        "minimumBeautifulSubstrings(\"abc\")"
    ],
    "sample_432": [
        "maxSubarrays(nums = [0, 1, 1, 0])",
        "maxSubarrays(nums = [2, 4, 8])",
        "maxSubarrays(nums = [2,3,4])",
        "maxSubarrays(nums = [1,2,1])",
        "maxSubarrays(nums = [1, 1, 0, 0])",
        "maxSubarrays(nums = [1, 0, 1, 1])",
        "maxSubarrays(nums = [1, 2, 1, 0])",
        "maxSubarrays(nums = [2, 1, 2, 4, 5])",
        "maxSubarrays(nums = [1, 3, 5, 2, 4, 3])",
        "maxSubarrays([-2, -4, -2])"
    ],
    "sample_401": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(nums = [1,2,1], m = 2, k = 1)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 2, k = 3)",
        "maxSum(nums = [1, 3, -1, -3, 5, 3, 6, 7], m = 3, k = 5)",
        "maxSum(nums = [0, 1, -1, -2, 2], m = 2, k = 2)",
        "maxSum(nums = [1, -1, 1, -2, 1], m = 3, k = 2)",
        "maxSum(nums = [0,0,0,1,1,1,2,2,2], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,2,4,3], m = 3, k = 3)",
        "maxSum(nums = [5,2,3,4,0], m = 2, k = 1)",
        "maxSum(nums = [4, 2, 1, 9, 4, 3, 2], m = 3, k = 2)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(A = [1,2,3,4,5], m = 2, k = 2)",
        "maxSum(A = [1,2,3,4,5], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3], m = 2, k = 2)",
        "maxSum(A = [1, 2, 3, 2, 1, 5], m = 3, k = 2)",
        "maxSum(A = [1,3,2,5,4], m = 2, k = 2)",
        "maxSum(A = [1, 3, 2, 2, 2, 1, 5, 6], m = 3, k = 2)",
        "maxSum(A = [4,2,3,4,3,2,4,3], m = 2, k = 3)",
        "maxSum(A = [3, 4, 3, 2, 4, 3], m = 2, k = 4)",
        "maxSum(A = [3, 6, -1, -4, -3, 8, 7, 2, 6, -1], m = 4, k = 2)"
    ],
    "sample_363": [
        "isGood(nums = [1, 2, 2])",
        "isGood(nums = [2, 1, 2])",
        "isGood(nums = [2, 3, 2])",
        "isGood(nums = [1, 2, 3, 4, 4, 3, 2, 1])",
        "isGood([1, 1, 2, 3])",
        "isGood(nums = [3, 1, 3, 1])",
        "isGood(nums = [4, 2, 3, 3, 1])",
        "isGood(nums = [4, 5, 2, 3])",
        "isGood(nums = [1, 2, 3, 1, 1, 3])",
        "isGood(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSeconds(nums = [1,2,3])",
        "minimumSeconds(nums = [1, 2, 2, 3, 1])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,2,3,4,5,6])",
        "minimumSeconds(nums = [1, 2, 3, 4, 0])",
        "minimumSeconds(nums = [1, 3, 6, 4, 1, 2])",
        "minimumSeconds(nums = [4, 6, 6])",
        "minimumSeconds(nums = [7, 1, 5, 3, 3])",
        "minimumSeconds(nums = [1, 5, 3, 3, 5, 1])"
    ],
    "sample_376": [
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1,0])",
        "minimumSeconds(nums = [1, 4, 2, 3])",
        "minimumSeconds(nums = [1,1,2,2,3,3])",
        "minimumSeconds(nums = [3, 6, 9])",
        "minimumSeconds(nums = [1, 3])",
        "minimumSeconds(nums = [2, 3, 5, 6, 7])",
        "minimumSeconds(nums = [2, 6, 3, 3, 1, 6])"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1, 2, 3])",
        "minLengthAfterRemovals(nums = [1,2,3,4])",
        "minLengthAfterRemovals(nums = [3,2,3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 1])",
        "minLengthAfterRemovals(nums = [2,3,3])",
        "minLengthAfterRemovals(nums = [2,3,2,4,2])",
        "minLengthAfterRemovals(nums = [3,2,3,4,2])",
        "minLengthAfterRemovals(nums = [2, 1, 2, 6, 4, 2, 2, 5])",
        "minLengthAfterRemovals([5,2,3,3,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,"
    ],
    "sample_399": [
        "maxSum(nums = [1,2,3], m = 2, k = 2)",
        "maxSum(nums = [1,2,3], m = 2, k = 2)",
        "maxSum(nums = [2,2,3,2], m = 3, k = 2)",
        "maxSum([3, 2, 2, 3], 1, 2)",
        "maxSum(nums = [1,2,1,4,4,3], m = 4, k = 3)",
        "maxSum(nums = [4,2,3,1,1,2], m = 2, k = 2)",
        "maxSum([2, 1, 3, 2, 2, 1], 2, 2)",
        "maxSum(nums = [1,3,5,4,7,7,8], m = 3, k = 4)",
        "maxSum([1, 2, 3, 1, 2, 1, 2, 3], 2, 4)",
        "maxSum(nums = [4,1,7,5,5,2], m = 2, k = 4)"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2, 1], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 1], m = 2, k = 2)",
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3], m = 2, k = 2)",
        "maxSum(nums = [1, 1, 2, 2, 2], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 1, 1, 4], m = 2, k = 2)",
        "maxSum(nums = [1,2,1,2,3,4], m = 3, k = 5)",
        "maxSum(nums = [2,2,1,1,2], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,1,4,2], m = 3, k = 2)",
        "maxSum(nums = [2,2,1,1,2,2], m = 2, k = 3)"
    ],
    "sample_364": [
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3])",
        "isGood(nums = [1,2,3,4,5,6])",
        "isGood([1,2,3,4,5])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [3,4,5,1,2])",
        "isGood(nums = [5,1,2,3,4])",
        "isGood([1,2,3,4,5,6,7,8])",
        "isGood([2, 3, 1, 5])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1,1,2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 1, 4, 2])",
        "minLengthAfterRemovals(nums = [2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 3, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [2, 2, 3, 3, 4, 4, 5, 5])",
        "minLengthAfterRemovals(nums = [1,2,3,4,1,2,3,4,1,2,3,4])",
        "minLengthAfterRemovals(nums = [1, 2, 1, 3, 4, 1, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 3, 1, 4, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 1, 1, 2, 3, 2, 2, 2, 2])"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"hi\"], x = \"o\")",
        "findWordsContaining(words = [\"mq\", \"px\", \"zy\", \"ba\", \"nana\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"banana\", \"orange\"], x = \"na\")",
        "findWordsContaining(words = [\"ab\", \"abcd\", \"ab\"])",
        "findWordsContaining(words = [\"banana\", \"apple\", \"pear\", \"kiwi\", \"mango\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"hello\", \"bye\", \"world\"], x = \"e\")",
        "findWordsContaining(words = [\"banana\", \"pym\", \"py\"])",
        "findWordsContaining(words = [\"Mango\", \"Orange\", \"Peach\", \"Apple\"], x = \"a\")",
        "findWordsContaining(words = [\"B\", \"Ba\", \"Na\", \"nana\", \"anana\"], x = \"a\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 5, 11, 5])",
        "minimumCoins(prices = [1, 3, 4])",
        "minimumCoins(prices = [1, 5, 8, 9, 10, 17, 17, 20])",
        "minimumCoins(prices = [10, 5, 8, 7])",
        "minimumCoins([1, 5, 11, 9])",
        "minimumCoins(prices = [1, 7, 5, 10, 8, 9])",
        "minimumCoins(prices = [8, 4, 2, 1, 2])",
        "minimumCoins(prices = [3, 1, 4, 3])",
        "minimumCoins(prices = [10, 5, 1, 3, 7, 9])",
        "minimumCoins(prices = [3, 1, 5, 8, 9, 10, 17, 12, 14, 15])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(s = \"abcde\")",
        "minimumBeautifulSubstrings(s = \"ababa\")",
        "minimumBeautifulSubstrings(s = \"abcba\")",
        "minimumBeautifulSubstrings(s = \"banana\")",
        "minimumBeautifulSubstrings(s = \"abcabc\")",
        "minimumBeautifulSubstrings(s = \"abcda\")",
        "minimumBeautifulSubstrings(s = \"bcab\")",
        "minimumBeautifulSubstrings(s = \"ababbbc\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"ba\", s2 = \"na\")",
        "canBeEqual(s1 = \"ba\", s2 = \"na\")",
        "canBeEqual(\"abcd\", \"dcba\")",
        "canBeEqual(s1 = \"aba\", s2 = \"bba\")",
        "canBeEqual(s1 = \"baa\", s2 = \"banana\")",
        "canBeEqual(s1 = \"aab\", s2 = \"abb\")",
        "canBeEqual(s1 = \"aba\", s2 = \"aab\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nbana\")",
        "canBeEqual(s1 = \"aeb\", s2 = \"bad\")",
        "canBeEqual(\"sab\", \"bab\")"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"ab\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"abcde\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"aabbc\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"cab\")",
        "canMakeSubsequence(str1 = \"bca\", str2 = \"abc\")",
        "canMakeSubsequence(\"ab\", \"cab\")",
        "canMakeSubsequence(str1 = \"mq\", str2 = \"mqy\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"abxz\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"efgh\")",
        "canMakeSubsequence(str1 = \"ax\" , str2 = \"zx\")"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1, 1, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 2])",
        "minLengthAfterRemovals(nums = [3, 2, 3])",
        "minLengthAfterRemovals(nums = [1,2])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [2,2,2,3,3])",
        "minLengthAfterRemovals(nums = [2, 3, 2, 1, 2])",
        "minLengthAfterRemovals(nums = [4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [2, 3, 4, 3, 2, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 1, 2, 3, 4, 2])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abc\", s2 = \"acb\")",
        "canBeEqual(s1 = \"bab\", s2 = \"bba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dbca\")",
        "canBeEqual(s1 = \"abba\", s2 = \"baba\")",
        "canBeEqual(s1 = \"anana\", s2 = \"nabana\")",
        "canBeEqual(\"banana\", \"banana\")",
        "canBeEqual(s1 = \"banana\", s2 = \"naana\")",
        "canBeEqual(s1 = \"cab\", s2 = \"bad\")",
        "canBeEqual(s1 = \"caa\", s2 = \"caa\")",
        "canBeEqual(s1 = \"a1b2c3\", s2 = \"a1b2c3\")"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3], target = 3)",
        "countPairs(nums = [1, 2, 3], target = 5)",
        "countPairs(nums = [1, 1, 2, 3], target = 2)",
        "countPairs(nums = [4, 2, 1, 3], target = 4)",
        "countPairs(nums = [1, 3, 4, 6], target = 6)",
        "countPairs(nums = [3, 2, 1, 4], target = 6)",
        "countPairs(nums = [1,3,1], target = 4)",
        "countPairs(nums = [1, 4, 6, 8], target = 5)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"abc\", s2 = \"a\")",
        "canMakeSubsequence(s1 = \"ab\", s2 = \"bca\")",
        "canMakeSubsequence(\"baa\", \"nana\")",
        "canMakeSubsequence(s1 = \"baa\", s2 = \"na\")",
        "canMakeSubsequence(s1 = \"abcd\", s2 = \"abcf\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"d\")",
        "canMakeSubsequence(\"abab\", \"ab\")",
        "canMakeSubsequence(s1 = \"a\", s2 = \"b\")",
        "canMakeSubsequence(\"pqa\", \"zabcd\")",
        "canMakeSubsequence(\"szce\", \"szce\")"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"prev\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"a\", \"prev\", \"1\", \"prev\", \"2\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = ['prev', 'prev', 'prev', 'next', 'next', 'next', 'prev', 'next'])",
        "lastVisitedIntegers(words = [\"i\", \"love\", \"leetcode\", \"i\", \"love\", \"leetcode\", \"i\", \"love\", \"leetcode\"])",
        "lastVisitedIntegers(words = ['prev', 'x', 'x', 'prev', 'prev', 'prev'])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3]], k = 1)",
        "countPairs(coordinates = [[1, 2], [3, 4]], k = 2)",
        "countPairs(coordinates = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 2], [2, 0], [2, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0,0], [0,1], [1,0], [1,1]], k = 1)",
        "countPairs([[1, 1], [2, 2], [3, 3]], 2)",
        "countPairs(coordinates = [[1, 1], [2, 2], [1, 2], [2, 1]], k = 0)",
        "countPairs(coordinates = [[0, 0], [0, 1], [0, 2], [0, 3], [1, 1], [1, 2], [1, 3], [2, 2], [2, 3], [3, 3]], k = 3)",
        "countPairs([[1, 2], [2, 1], [3, 4], [3, 4]], 2)",
        "countPairs(coordinates = [[2, 3], [3, 4], [0, 2]], k = 2)",
        "countPairs(coordinates = [[2, 3], [5, 1], [4, 3], [1, 2]], k = 1)"
    ],
    "sample_451": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abcd\")",
        "minChanges(\"abab\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"baa\")",
        "minChanges(\"aba\")",
        "minChanges(s = \"aabbcc\")",
        "minChanges(s = \"baba\")",
        "minChanges(s = \"leetcode\")",
        "minChanges(s = \"abcabc\")"
    ],
    "sample_461": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 4, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 6, limit = 1)",
        "distributeCandies(n = 1, limit = 1)"
    ],
    "sample_391": [
        "canBeEqual(\"abcd\", \"dcba\")",
        "canBeEqual(s1 = \"apple\", s2 = \"elppa\")",
        "canBeEqual(s1 = \"aab\", s2 = \"bbaa\")",
        "canBeEqual(\"abc\", \"cab\")",
        "canBeEqual(s1 = \"baa\", s2 = \"abab\")",
        "canBeEqual(\"baan\", \"baan\")",
        "canBeEqual(s1 = \"bab\", s2 = \"ban\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(\"qwerty\", \"qwerty\")",
        "canBeEqual(s1 = \"pax\", s2 = \"pnax\")"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 2, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 9, limit = 3)"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 25)",
        "accountBalanceAfterPurchase(p = 9)",
        "accountBalanceAfterPurchase(p = 9)",
        "accountBalanceAfterPurchase(p = 50)",
        "accountBalanceAfterPurchase(p = 35)",
        "accountBalanceAfterPurchase(p = 35)",
        "accountBalanceAfterPurchase(p = 7)",
        "accountBalanceAfterPurchase(p = 75)",
        "accountBalanceAfterPurchase(p = 26)",
        "accountBalanceAfterPurchase(p = 39)"
    ],
    "sample_444": [
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 3, 2])",
        "sumCounts(nums = [2, 2, 2])",
        "sumCounts([1, 1, 2])",
        "sumCounts([1,2,3,4,5])",
        "sumCounts(nums = [0, 1, 2, 3, 4, 5])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1,3,2])",
        "minimumSeconds(A = [1,5,9])",
        "minimumSeconds(A = [1, 2, 1])",
        "minimumSeconds(A = [1,3,6,7])",
        "minimumSeconds(A = [0, 1])",
        "minimumSeconds(A = [0, 0])",
        "minimumSeconds(A = [0,1,3])",
        "minimumSeconds(A = [0,1,2,4,7])",
        "minimumSeconds(A = [1,3,7,2,3,7])",
        "minimumSeconds(A = [1,3,4,2,2,3])"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"ba\", str2 = \"ana\")",
        "canMakeSubsequence(str1=\"ba\", str2=\"nana\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"bcde\")",
        "canMakeSubsequence(str1 = \"b\", str2 = \"nana\")",
        "canMakeSubsequence(str1 = \"ba\", str2 = \"banana\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"cdef\")",
        "canMakeSubsequence(str1=\"ba\", str2=\"ba\")",
        "canMakeSubsequence(str1 = \"qp\", str2 = \"banana\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"cba\")"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts([1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [0, 1, 2])",
        "minimumRightShifts(nums = [2, 1, 4, 3, 5])",
        "minimumRightShifts(nums = [8, 1, 2, 3, 4])",
        "minimumRightShifts(nums = [0,1,2,3,4])",
        "minimumRightShifts(nums = [2, 1, 4, 7, 3, 5])"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1, 2, 3], l = 1, r = 2)",
        "countSubMultisets(nums = [1,1,2,2,2], l = 0, r = 3)",
        "countSubMultisets(nums = [1,2,3], l = 3, r = 3)",
        "countSubMultisets(nums = [2, 2], l = 1, r = 4)",
        "countSubMultisets(nums = [4,4,4,4,4,4], l = 1, r = 5)",
        "countSubMultisets(nums = [1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2",
        "countSubMultisets(nums = [1,1,1,1,1,1,1,1,1,1,1,1], l = 4, r = 11)",
        "countSubMultisets(nums = [1,1,2,2,3,3,4,5,5], l = 2, r = 5)",
        "countSubMultisets(nums = [2,3,1,3,4], l = 2, r = 3)",
        "countSubMultisets(nums = [1,2,1,1,2,3,2,4,3,5], l = 3, r = 7)"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 3, 4])",
        "minimumCoins(prices = [10, 25, 35, 84])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50])",
        "minimumCoins(prices = [10, 15, 3, 7])",
        "minimumCoins(prices = [3, 5, 2, 10])",
        "minimumCoins(prices = [10, 40, 100, 2000, 5000])",
        "minimumCoins(prices = [8, 4, 12, 1, 1])",
        "minimumCoins([10, 5, 5, 100, 100, 50, 10, 50, 20, 20, 10, 10])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins(prices = [1, 5, 8])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [2, 5, 8])",
        "minimumCoins(prices = [3, 1, 4, 2])",
        "minimumCoins(prices = [2, 3, 1, 5, 4])",
        "minimumCoins(prices = [8, 1, 5, 10, 20])",
        "minimumCoins(prices = [4, 5, 3, 6, 7])",
        "minimumCoins(prices = [10, 20, 5, 35, 100, 1, 2])",
        "minimumCoins(prices = [1, 10, 5, 100, 40, 20, 1])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"a\", \"b\", \"c\", \"prev\", \"b\", \"a\"])",
        "lastVisitedIntegers(words = [\"last\", \"visited\", \"integers\", \"1\", \"2\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"1\", \"2\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"3\", \"prev\", \"4\", \"prev\", \"5\"])",
        "lastVisitedIntegers(words = [\"a\", \"b\", \"c\", \"d\", \"prev\", \"e\", \"f\", \"prev\", \"g\", \"h\", \"i\", \"j\", \"prev\", \"k\", \"l\", \"m\", \"n\", \"o\", \"prev\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"prev\"])",
        "lastVisitedIntegers(words = [\"go\", \"prev\", \"a\", \"b\", \"a\"])",
        "lastVisitedIntegers(words = [\"a\", \"1\", \"b\", \"3\", \"b\", \"2\", \"a\"])",
        "lastVisitedIntegers(words = [\"pre\", \"set\", \"none\", \"prev\", \"next\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"look\", \"this\", \"and\", \"remember\", \"prev\", \"prev\", \"prev\", \"prev\", \"and\", \"this\", \"prev\"])",
        "lastVisitedIntegers(words = [\"hello\", \"my\", \"name\", \"is\", \"Bob\", \"hello\", \"world\", \"prev\", \"my\", \"name\", \"is\", \"John\", \"prev\", \"my\", \"name\", \"is\", \"Mary\", \"prev\"])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 2, 2])",
        "minOperations(nums = [1, 1, 1, 1, 2, 2])",
        "minOperations(nums = [1, 3, 2, 3])",
        "minOperations(nums = [1,2,1,1])",
        "minOperations(nums = [2, 1, 2, 1, 2, 1])",
        "minOperations(nums = [4, 4, 5])",
        "minOperations(nums = [3, 4, 2, 4])",
        "minOperations([2, 2, 1, 3, 3])",
        "minOperations(nums = [3, 4, 2, 2, 2, 5])",
        "minOperations(nums = [2, 2, 2, 1, 3, 3, 3, 1])"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"apple\", \"banana\", \"pear\"])",
        "lastVisitedIntegers(words = [\"b\", \"a\", \"n\", \"a\", \"n\", \"a\"])",
        "lastVisitedIntegers(words = [\"a\", \"b\", \"p\", \"p\"])",
        "lastVisitedIntegers(words = [\"one\", \"two\", \"three\", \"four\"])",
        "lastVisitedIntegers(words = [\"hello\", \"p\", \"my\", \"world\"])",
        "lastVisitedIntegers(words = [\"hello\", \"p\", \"q\", \"r\"])",
        "lastVisitedIntegers(words = [\"p2\", \"p3\", \"p4\", \"n4\", \"n5\", \"n6\"])",
        "lastVisitedIntegers(words = [\"pig\", \"apple\", \"dog\", \"pig\", \"apple\"])",
        "lastVisitedIntegers(words = [\"a\", \"p\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\"])",
        "lastVisitedIntegers(words = [\"love\", \"pets\", \"least\", \"elephant\", \"we\", \"love\"])"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1,2,3])",
        "minimumSeconds(nums = [1,2,3,4])",
        "minimumSeconds(nums = [1, 2, 3])",
        "minimumSeconds(nums = [1,3,3])",
        "minimumSeconds(nums = [3, 1, 2, 4, 3])",
        "minimumSeconds(nums = [1, 2, 1, 3, 4, 3])",
        "minimumSeconds(nums = [0,0,0,0,1,1,1,1])",
        "minimumSeconds(nums = [1, 6, 3, 4])",
        "minimumSeconds(nums = [5, 1, 2, 5, 2])",
        "minimumSeconds(nums = [1, 4, 4, 4, 2, 4, 4, 3])"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"mango\"], x = \"an\")",
        "findWordsContaining(words = [\"mq\", \"px\", \"zy\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"pear\", \"apple\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"mango\", \"pear\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"ba\", \"nana\", \"kaka\"], x = \"ana\")"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1])",
        "maxSubarrays(nums = [0, 1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 0, 1])",
        "maxSubarrays(nums = [1, 0, 0, 1, 0, 0, 1])",
        "maxSubarrays(nums = [2, 4, 6, 8, 10])",
        "maxSubarrays(nums = [1,0,0,0,0])",
        "maxSubarrays(nums = [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1])",
        "maxSubarrays([1, 2, 3])"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"prev\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"one\", \"prev\", \"two\", \"prev\", \"three\", \"prev\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"a\", \"b\", \"c\", \"d\", \"e\"])",
        "lastVisitedIntegers(words = [\"hello\", \"prev\", \"prev\", \"world\"])",
        "lastVisitedIntegers(words = [\"prev\", \"add\", \"add\", \"add\", \"prev\"])",
        "lastVisitedIntegers(words = [\"asas\", \"poiuytrewq\", \"asas\"])",
        "lastVisitedIntegers(words = [\"start\", \"0\", \"2\", \"next\", \"prev\", \"3\", \"0\", \"prev\", \"2\"])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [2, 7, 11, 15], target = 9)",
        "countPairs(nums = [1, 2, 3, 4], target = 4)",
        "countPairs(nums = [1, 2, 3, 4], target = 4)",
        "countPairs(nums = [2, 3, 4], target = 5)",
        "countPairs(nums = [1, 5, 2, 3], target = 6)",
        "countPairs(nums = [-1, 0, 1, 2], target = 1)",
        "countPairs([1, 1, 2, 3, 4], 4)",
        "countPairs(nums = [3, 1, 2, 1, 3], target = 4)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bacd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abccba\", s2 = \"abcabc\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(\"abc\", \"acb\")",
        "canBeEqual(\"aba\", \"baa\")",
        "canBeEqual(s1 = \"aabbcc\", s2 = \"aabbc\")",
        "canBeEqual(\"aabb\", \"bbaa\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"3\", \"prev\", \"4\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"next\", \"prev\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"next\", \"prev\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"pop\", \"push\", \"prev\", \"pop\"])",
        "lastVisitedIntegers(words = [\"prev\", \"pop\", \"push\", \"push\", \"pop\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"add\", \"prev\", \"prev\", \"prev\", \"add\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"5\", \"prev\", \"2\", \"prev\", \"1\", \"prev\", \"4\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"visit\", \"prev\", \"next\", \"next\", \"prev\", \"visit\"])",
        "lastVisitedIntegers(words = [\"we\", \"prev\", \"we\", \"next\", \"prev\", \"next\", \"we\"])",
        "lastVisitedIntegers(words = [\"prev\", \"insert\", \"prev\", \"delete\", \"prev\", \"search\", \"prev\", \"index\", \"prev\"])"
    ],
    "sample_464": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 10, limit = 4)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts(nums = [0, 1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [3, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [8, 3, 9, 7, 6])",
        "minimumRightShifts(nums = [2, 6, 4, 8, 3, 7, 5, 9, 1])",
        "minimumRightShifts(nums = [2, 6, 4, 8, 10, 12, 16])",
        "minimumRightShifts(nums = [2, 2, 2, 3, 1, 5])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"foo\", \"bar\", \"baz\"], x = \"b\")",
        "findWordsContaining(words = [\"mq\", \"px\", \"zy\", \"ba\", \"nana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"pear\", \"mango\"], x = \"an\")",
        "findWordsContaining(words = [\"python\", \"java\", \"c++\", \"c\"], x = \"c\")",
        "findWordsContaining(words = [\"dog\", \"cat\", \"fish\"], x = \"s\")",
        "findWordsContaining(words = [\"bana\", \"ana\", \"anan\", \"nana\"], x = \"ana\")",
        "findWordsContaining(words = [\"bat\", \"ball\", \"bar\"], x = \"al\")",
        "findWordsContaining(words = [\"ba\", \"anana\", \"nana\", \"nana\", \"bana\"], x = \"ana\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"pear\", \"pineapple\", \"banana\"], x = \"na\")",
        "findWordsContaining(words = [\"ba\", \"man\", \"pant\", \"na\"], x = \"an\")"
    ],
    "sample_398": [
        "maxSum(nums = [1,2,3,1], m = 2, k = 2)",
        "maxSum(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 2, k = 4)",
        "maxSum([1,2,3], 2, 1)",
        "maxSum(nums = [4, 2, 2, 4, 1], m = 3, k = 4)",
        "maxSum(nums = [1,2,1,1,2], m = 2, k = 1)",
        "maxSum(nums = [1, 3, 2, 2, 3, 1, 4, 2], m = 2, k = 3)",
        "maxSum(nums = [2, 1, 5, 7, 5, 1, 9], m = 2, k = 3)",
        "maxSum(nums = [2, 1, 5, 5, 7, 9, 9, 9, 9], m = 3, k = 5)",
        "maxSum(nums = [10, 2, 5, 1, 7, 5, 5, 8, 7, 2], m = 4, k = 3)"
    ],
    "sample_424": [
        "minOperations(nums = [1,1,2])",
        "minOperations(nums = [1,1,2,3])",
        "minOperations(nums = [1,1,1])",
        "minOperations(nums = [1,1,2,2,3])",
        "minOperations(nums = [1, 1, 2, 3])",
        "minOperations(nums = [1,2,2,3,4])",
        "minOperations(nums = [1, 1, 2, 2, 3, 3])",
        "minOperations(nums = [1,2,3,4,5,6])",
        "minOperations(nums = [3,2,2,3,3,4])",
        "minOperations(nums = [4,2,1,2,1,3])"
    ],
    "sample_417": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1, 3, 2, 3, 1], k = 3)",
        "minOperations(nums = [1,5,2,4,3], k = 3)",
        "minOperations(nums = [3,1,2,4,6,5], k = 2)",
        "minOperations(nums = [0,2,2,4], k = 3)",
        "minOperations(nums = [8,6,9,7,5], k = 3)",
        "minOperations(nums = [8, 6, 4, 3, 1, 7, 9], k = 3)",
        "minOperations(nums = [10, 12, 5, 15, 20, 17], k = 3)",
        "minOperations([-2,4,-1,0,3,-2,5], 2)"
    ],
    "sample_371": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = \"YmpH\")",
        "sortVowels(\"lYmpH\")",
        "sortVowels(s = 'YmpH')",
        "sortVowels(s = 'Hello')",
        "sortVowels(s = \"Hello World\")",
        "sortVowels(s = \"aYmPH\")",
        "sortVowels(s = 'My name is Alice.')"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 10)",
        "distributeCandies(n = 1, limit = 2)",
        "distributeCandies(n = 8, limit = 5)"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [0, 1, 2])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 2, 1])",
        "sumCounts([2, 3, 2, 5])"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1,2,3])",
        "maxSubarrays(nums = [1, 0, 1])",
        "maxSubarrays(nums = [2, 3, 5, 7])",
        "maxSubarrays(nums = [0, 1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [4, 2, 2, 4])",
        "maxSubarrays(nums = [1, 3, 1])",
        "maxSubarrays(nums = [0, 0, 0, 1])",
        "maxSubarrays(nums = [3, 5, 9, 10])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1])",
        "maxSubarrays(nums = [5, 2, 4, 1, 0])"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [0, 1, 2])",
        "sumCounts(nums = [1,2,2,3])",
        "sumCounts([1, 1, 2])",
        "sumCounts([1, 2, 2, 3])",
        "sumCounts(nums = [2,2,2])",
        "sumCounts(nums = [3, 5, 1, 3])"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"aab\", s2 = \"aba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"acb\")",
        "canBeEqual(s1 = \"abccba\", s2 = \"abcba\")",
        "canBeEqual(s1 = \"abb\", s2 = \"bba\")",
        "canBeEqual(s1 = \"foobar\", s2 = \"raboof\")",
        "canBeEqual(s1 = \"abac\", s2 = \"bacb\")",
        "canBeEqual(s1 = \"tattarrattat\", s2 = \"ttattttata\")"
    ],
    "sample_380": [
        "countPairs(nums = [2,7,11,15], target = 9)",
        "countPairs(nums = [1,2,3], target = 3)",
        "countPairs(nums = [2, 7, 11, 15], target = 9)",
        "countPairs(nums = [1,2,3,4,5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [2, 3, 4], target = 6)",
        "countPairs(nums = [3,1,2,4], target = 6)",
        "countPairs(nums = [1,3,2,2,1], target = 3)",
        "countPairs(nums = [3, 1, 4, 2, 1], target = 5)",
        "countPairs(nums = [1, 5, 7, 2, 4], target = 6)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1,2])",
        "sumCounts(nums = [1,2,2,3])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1,2,3,4])",
        "sumCounts(nums = [0,1,2])"
    ],
    "sample_368": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = 'YmpH')",
        "sortVowels(s = \"hello\")",
        "sortVowels(s = \"aYmPh\")",
        "sortVowels(s = \"Hello\")",
        "sortVowels(s = \"Hello world\")",
        "sortVowels(\"Lymph\")",
        "sortVowels(s = \"This is a test string\")"
    ],
    "sample_462": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 8, limit = 3)",
        "distributeCandies(n = 10, limit = 6)",
        "distributeCandies(n = 10, limit = 9)",
        "distributeCandies(n = 11, limit = 5)",
        "distributeCandies(n = 15, limit = 10)",
        "distributeCandies(n = 2, limit = 2)"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 5, 11, 5])",
        "minimumCoins(prices = [100, 200, 300, 400, 500])",
        "minimumCoins(prices = [10, 20, 300])",
        "minimumCoins(prices = [1, 5, 11, 2, 6, 2, 6])",
        "minimumCoins(prices = [1, 10, 25, 35, 84, 120])",
        "minimumCoins(prices = [10, 5, 1, 1, 5, 10, 25])",
        "minimumCoins(prices = [1, 5, 100, 100, 100, 1000, 10000])",
        "minimumCoins([9,6,1,2,9])"
    ],
    "sample_426": [
        "minOperations(nums = [1, 2, 3, 4, 5])",
        "minOperations(nums = [3, 1, 2])",
        "minOperations(nums = [2, 1, 3])",
        "minOperations(nums = [2,2])",
        "minOperations(nums = [2, 2, 3, 4])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [0,1,2,3])",
        "minOperations(nums = [2, 2, 2, 3, 3, 4])",
        "minOperations(nums = [3,3,6,6])",
        "minOperations([2,2,2])"
    ],
    "sample_423": [
        "minOperations(nums = [1,2,3])",
        "minOperations(nums = [1, 1, 1])",
        "minOperations(nums = [1, 2, 2, 3])",
        "minOperations(nums = [1, 2, 3, 4, 5])",
        "minOperations(nums = [1, 2])",
        "minOperations(nums = [2,2,2])",
        "minOperations(nums = [2, 3, 3, 4])",
        "minOperations(nums = [2, 2, 2, 2])",
        "minOperations(nums = [2,3,3,3])",
        "minOperations(nums = [3, 3, 1, 2])"
    ],
    "sample_476": [
        "minimumCoins(prices = [1,2,3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 5, 10, 16])",
        "minimumCoins([1,3,5])",
        "minimumCoins(prices = [1,10,5,25])",
        "minimumCoins(prices = [10, 20, 5, 25, 15])",
        "minimumCoins(prices = [3,4,5,2])",
        "minimumCoins(prices = [3, 4, 1, 2])",
        "minimumCoins(prices = [10, 25, 35, 18, 20, 1, 80])",
        "minimumCoins(prices = [10, 6, 5, 3, 7, 2, 12])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [3,4,5,1,2])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6])",
        "minimumRightShifts(nums = [4, 3, 2, 6])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumRightShifts(nums = [0,1,2])",
        "minimumRightShifts(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumRightShifts(nums = [4, 5, 6, 7, 8, 1, 2])"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [1,2,3,4,0])",
        "minimumRightShifts(nums = [4, 3, 2, 6])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [8, 6, 4, 2])",
        "minimumRightShifts(nums = [5, 2, 3, 4, 0])",
        "minimumRightShifts(nums = [2, 6, 4, 8, 7, 5, 3, 1])",
        "minimumRightShifts(nums = [2, 4, 6, 8, 10, 12])",
        "minimumRightShifts(nums = [0,1,2,4,5,6])"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"mq\", s2 = \"px\", s3 = \"zy\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"cde\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"banana\", s3 = \"bana\")",
        "findMinimumOperations(s1 = \"qwerty\", s2 = \"werty\", s3 = \"qwerty\")",
        "findMinimumOperations(s1 = \"abacab\", s2 = \"abacab\", s3 = \"abacab\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abcd\", s3 = \"abxy\")",
        "findMinimumOperations(\"aba\", \"bca\", \"aca\")",
        "findMinimumOperations(\"ba\", \"bn\", \"nana\")",
        "findMinimumOperations(s1 = \"baaab\", s2 = \"bbaaab\", s3 = \"aabba\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"abd\", s3 = \"cda\")"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"aab\")",
        "longestSemiRepetitiveSubstring(\"banana\")",
        "longestSemiRepetitiveSubstring(\"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abcba\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"aaaab\")",
        "longestSemiRepetitiveSubstring(\"abbbaa\")",
        "longestSemiRepetitiveSubstring(\"aababb\")",
        "longestSemiRepetitiveSubstring(\"gfggg\")",
        "longestSemiRepetitiveSubstring(\"AABBCCDDEEFF\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"bat\", \"tab\", \"tab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"cba\"])",
        "maximumNumberOfStringPairs(words = [\"cat\",\"dog\",\"tac\",\"god\"])",
        "maximumNumberOfStringPairs(words = [\"code\", \"edoc\", \"daedoc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"mq\", \"px\", \"zy\", \"yy\"])",
        "maximumNumberOfStringPairs(words = [\"this\", \"is\", \"code\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"baab\", \"aa\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"xy\", \"x\", \"aa\", \"ab\", \"ba\"])"
    ],
    "sample_247": [
        "minOperations(s1 = \"ab\", s2 = \"ba\", x = 1)",
        "minOperations(s1 = \"abcd\", s2 = \"abcde\", x = 1)",
        "minOperations(s1 = \"abcdefgh\", s2 = \"abcdefgh\", x = 2)",
        "minOperations(s1 = \"abcde\", s2 = \"abfce\", x = 2)",
        "minOperations(s1 = \"bann\", s2 = \"banana\", x = 1)",
        "minOperations(s1 = \"ababa\", s2 = \"bbbba\", x = 2)",
        "minOperations(s1 = \"ab\", s2 = \"ab\", x = 2)",
        "minOperations(s1 = \"abc\", s2 = \"abc\", x = 2)",
        "minOperations(\"abc\", \"cba\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"abd\", x = 1)"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"bat\", \"tab\", \"cat\", \"act\"])",
        "maximumNumberOfStringPairs(words = [\"code\", \"da\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"bc\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"abc\", \"bc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"bac\",\"abc\",\"abc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cdc\", \"dcb\"])",
        "maximumNumberOfStringPairs(words = [\"banana\", \"ab\", \"ba\", \"nana\"])",
        "maximumNumberOfStringPairs(words = [\"hello\", \"world\", \"oh\", \"hell\", \"lo\"])",
        "maximumNumberOfStringPairs(words = [\"hi\", \"hi\", \"foo\"])",
        "maximumNumberOfStringPairs(words = [\"abb\", \"abc\", \"baa\", \"bcb\", \"bba\"])"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [1,2,1,2,1,1])",
        "minGroupsForValidAssignment(nums = [3, 2, 3, 6])",
        "minGroupsForValidAssignment(nums = [1,2,1,2,1,2,3])",
        "minGroupsForValidAssignment(nums = [2,2,4,4,4,8,8,8,8])",
        "minGroupsForValidAssignment(nums = [2, 3, 3, 3, 2, 3, 2, 3, 2, 2, 2])",
        "minGroupsForValidAssignment([5,1,2,5,5,5,6,5,5])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n = 20, m = 3)",
        "differenceOfSums(n = 12, m = 3)",
        "differenceOfSums(n = 9, m = 3)",
        "differenceOfSums(n = 8, m = 3)",
        "differenceOfSums(n = 10, m = 5)"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"110001\", k = 2)",
        "shortestBeautifulSubstring(s = \"1010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"11001\", k = 2)",
        "shortestBeautifulSubstring(s = \"101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1010\", k = 1)",
        "shortestBeautifulSubstring(\"1100\", 2)",
        "shortestBeautifulSubstring(s = \"1101110111\", k = 3)",
        "shortestBeautifulSubstring(s = \"1100\", k = 1)",
        "shortestBeautifulSubstring(s = \"0011101111011\", k = 2)",
        "shortestBeautifulSubstring(s = \"00001010101011000110110011001\", k = 2)"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"aa\", s2 = \"aa\", s3 = \"aa\")",
        "findMinimumOperations(s1 = \"aa\", s2 = \"aa\", s3 = \"aa\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"cd\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"cd\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"ana\", s3 = \"nana\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"anana\")",
        "findMinimumOperations(\"abc\", \"def\", \"ghi\")",
        "findMinimumOperations(\"ann\", \"ana\", \"nan\")"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abccba\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aab\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(\"abababa\")",
        "longestSemiRepetitiveSubstring(s = \"aabcbc\")"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum([1, 2, 3], [4, 5, 6])",
        "minSum([1,2,3], [4,5,6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 1, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 1, 1, 1])",
        "minSum([1,1,1,1,1], [2,3,4,5,6])",
        "minSum([4,2,2,4], [5,2,5,0,1])",
        "minSum(nums1 = [1, -3, 0, 3, 2], nums2 = [0, -3, -1, -1, 3, 5, 9])"
    ],
    "sample_289": [
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"100\")",
        "minimumSteps(s = \"111\")",
        "minimumSteps(s = \"11111\")",
        "minimumSteps(s = \"1011\")",
        "minimumSteps(s = \"10011001\")",
        "minimumSteps(s = \"0000110111\")"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [-2, 0, -1])",
        "maximumTripletValue(nums = [4, 3, 2])",
        "maximumTripletValue(nums = [3, 5, 2, 6])",
        "maximumTripletValue(nums = [3,1,5,2,4])",
        "maximumTripletValue(nums = [4, 5, 0, -2])",
        "maximumTripletValue([-1,2,1,-4])",
        "maximumTripletValue([2, 1, 5, 4, 3])",
        "maximumTripletValue(nums = [2, 6, 10, 6, 3])",
        "maximumTripletValue([0, -4, 2, -2, -1, 3])"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"aa\", k = 2)",
        "beautifulSubstrings(\"aaiueo\", 2)",
        "beautifulSubstrings(s = \"abaa\", k = 2)",
        "beautifulSubstrings(\"abacaba\", 3)",
        "beautifulSubstrings(\"aaiuaeo\", 2)",
        "beautifulSubstrings(s = \"ggeeee\", k = 3)",
        "beautifulSubstrings(\"abaa\", 2)",
        "beautifulSubstrings(s = \"a\", k = 1)",
        "beautifulSubstrings(\"ababbc\",\"a\")",
        "beautifulSubstrings(\"ac\", 1)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"ababa\")",
        "minimumBeautifulSubstrings(s = \"abcd\")",
        "minimumBeautifulSubstrings(\"baa\")",
        "minimumBeautifulSubstrings(\"baab\")",
        "minimumBeautifulSubstrings(s = \"ababcb\")",
        "minimumBeautifulSubstrings(\"aab\")",
        "minimumBeautifulSubstrings(\"aabab\")",
        "minimumBeautifulSubstrings(s = \"abacbac\")",
        "minimumBeautifulSubstrings(s = \"ababababcababab\")",
        "minimumBeautifulSubstrings(s = \"aa\")"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1,2],[3,4]])",
        "matrixSum([[0, 1, 2], [3, 4, 5], [6, 7, 8]])",
        "matrixSum(a = [[1, 2, 3], [2, 4, 5], [3, 5, 6]])",
        "matrixSum(a = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])",
        "matrixSum(a = [[1, 3, 5], [3, 2, 1], [5, 3, 1]])",
        "matrixSum(a = [[4, 3, 2], [2, 4, 1], [1, 2, 4]])",
        "matrixSum(a = [[1, 2, 3], [0, 2, 4], [5, 0, 1]])",
        "matrixSum(a = [[2, 1, 5], [3, 4, 3], [4, 5, 1]])",
        "matrixSum(a = [[2,4,3], [1,2,4], [6,3,5]])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [3, 4, 5, 6])",
        "minSum([0, 1, 2], [0, 2, 3])",
        "minSum(nums1 = [1, 0, 1], nums2 = [1, 0, 1])",
        "minSum(nums1 = [2,3,4], nums2 = [3,4,5,6])",
        "minSum(nums1 = [1, -2, 3], nums2 = [-4, 5, -6])",
        "minSum(nums1 = [1, 2, 3, 0, 0], nums2 = [0, 0, 4, 5, 0])",
        "minSum(nums1 = [1, 2, -2], nums2 = [-3, -3, -3])",
        "minSum(nums1 = [1, -1, 5, 2], nums2 = [-2, -3, 4, 3])",
        "minSum([1, 5, 10, 3], [2, 6, 4, 0])",
        "minSum(nums1 = [0, 1, 0, 1, 0, 1, 0, 0, 1, 1], nums2 = [1, 0, 1, 0, 0, 0, 1, 1, 0, 0])"
    ],
    "sample_282": [
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "minOperations(nums1 = [2, 3, 5], nums2 = [2, 3, 5])",
        "minOperations([1,2,3,4,5], [1,2,3,4,5])",
        "minOperations(nums1 = [3, 4, 2], nums2 = [2, 2, 2])",
        "minOperations(nums1 = [2, 4, 1], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 1, 4, 5])",
        "minOperations(nums1 = [1, 3, 2], nums2 = [4, 3, 2])",
        "minOperations(nums1 = [0, 1, 3, 4], nums2 = [2, 3, 5, 6])",
        "minOperations(nums1 = [3, 4, 7], nums2 = [6, 7, 1])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1,2,2,3,4,4,5])",
        "alternatingSubarray(nums = [1,1,2,2,3,3])",
        "alternatingSubarray(nums = [2,1,2,3,4])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 3, 3])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 3, 3])",
        "alternatingSubarray(nums = [1, 1, 1, 1, 1])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 4, 4, 4])",
        "alternatingSubarray([2,2,2,2,2,2])",
        "alternatingSubarray([2, 1, 1, 3, 2, 3, 4])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 3, 4], money = 5)",
        "buyChoco(prices = [10, 20, 30], money = 50)",
        "buyChoco(prices = [1, 2, 3, 4], money = 3)",
        "buyChoco(prices = [1, 2], money = 2)",
        "buyChoco(prices = [2, 3, 4, 5], money = 5)",
        "buyChoco(prices = [1, 3], money = 2)",
        "buyChoco(prices = [3, 2, 4, 1, 5], money = 7)",
        "buyChoco(prices = [1, 5, 3, 4, 2], money = 7)",
        "buyChoco(prices = [20, 10, 5, 1], money = 30)",
        "buyChoco(prices = [5, 3, 4, 1, 3, 6, 8, 1], money = 8)"
    ],
    "sample_302": [
        "countSeniors(details = [\"JSS\", \"WSS\", \"SSS\"])",
        "countSeniors(details = [\"I am a 23 year old, and I am a student.\", \"I am a 31 year old, and I am a doctor.\"])",
        "countSeniors(details = [\"201202201863\", \"201202201863\", \"201202201863\"])",
        "countSeniors(details = [\"mm1001:11:00\", \"mm1001:11:01\", \"mm1001:11:30\"])",
        "countSeniors(details = [\"mq64\", \"px64\", \"zy59\", \"jvc64\"])",
        "countSeniors(details = [\"a5827295938a\", \"a5827295938a\", \"a5827295938a\"])",
        "countSeniors(details = [\"A:42,C:58\", \"B:54,F:35\", \"C:65,A:33\"])",
        "countSeniors(details = [\"pincode:92319,birthday:2001/12/01,senior:0\", \"pincode:92319,birthday:2001/12/02,senior:1\"])",
        "countSeniors(details = [\"Sachin Sachin 30-17-1980\", \"Virender Virender 25-08-1962\", \"Rahul Rahul 25-04-1980\"])",
        "countSeniors(details = [\"40-05-2009 40-03-2011\", \"80-02-2012 70-06-2017\", \"90-04-1999\"])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"ababa\", k = 2)",
        "beautifulSubstrings(s = \"a\", k = 2)",
        "beautifulSubstrings(s = \"aba\", k = 5)",
        "beautifulSubstrings(s = \"banana\", k = 5)",
        "beautifulSubstrings(\"aab\", 3)",
        "beautifulSubstrings(\"ba\", 2)",
        "beautifulSubstrings(s = \"abca\", k = 8)",
        "beautifulSubstrings(s = \"aegis\", k = 2)",
        "beautifulSubstrings(\"aab\", 1)",
        "beautifulSubstrings(s = \"ehu\", k = 1)"
    ],
    "sample_255": [
        "minimumSum(nums = [1,2,3,4])",
        "minimumSum(nums = [1,2,3])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum([1, 2, 3])",
        "minimumSum(nums = [1,2,4])",
        "minimumSum(nums = [3, 3, 1, 2, 2])",
        "minimumSum([3,2,1,4,5])",
        "minimumSum(nums = [5, 2, 1, 8])",
        "minimumSum(nums = [4,2,3,7,6])"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums = [1,2,3])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6])",
        "minGroupsForValidAssignment(nums = [1,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [4,4,4,4])",
        "minGroupsForValidAssignment(nums = [2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,6])",
        "minGroupsForValidAssignment(nums = [1,2,1,2,1])",
        "minGroupsForValidAssignment(nums = [1,2,1,2,2])"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1,2,3])",
        "alternatingSubarray(nums = [1,2,2,3,4,4,5])",
        "alternatingSubarray(nums = [5, 4, 3, 2, 1])",
        "alternatingSubarray(nums = [2, 3, 6, 9])",
        "alternatingSubarray(nums = [1,3,2,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [5,6,7,4,3,2,1])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = \"1101\", k = 2)",
        "shortestBeautifulSubstring(s = \"111001\", k = 2)",
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = \"010101\", k = 2)",
        "shortestBeautifulSubstring(s = '1100', k = 2)",
        "shortestBeautifulSubstring(s = \"1101111\", k = 3)",
        "shortestBeautifulSubstring(s = \"00001111\", k = 3)",
        "shortestBeautifulSubstring(s = \"101101\", k = 3)",
        "shortestBeautifulSubstring(s = \"1101110101\", k = 3)",
        "shortestBeautifulSubstring(s = '0110100001100101011011000110110001101111', k = 3)"
    ],
    "sample_293": [
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"0001\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"00100\")",
        "minimumSteps(s = \"0010\")",
        "minimumSteps(s = \"10100\")",
        "minimumSteps(\"11101001\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcba\")",
        "longestSemiRepetitiveSubstring(s = \"aabccbb\")",
        "longestSemiRepetitiveSubstring(s = \"aaba\")",
        "longestSemiRepetitiveSubstring(\"baab\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abbbbaa\")",
        "longestSemiRepetitiveSubstring(\"abcabcabcabca\")",
        "longestSemiRepetitiveSubstring(s = \"abcccaabc\")",
        "longestSemiRepetitiveSubstring(s = \"aaa\")"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [1,2,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1,2,2,1])",
        "minGroupsForValidAssignment(nums = [3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,3,3,4])",
        "minGroupsForValidAssignment(nums = [1,2,3,2,1])",
        "minGroupsForValidAssignment(nums = [2,2,4,4,4])",
        "minGroupsForValidAssignment(nums = [1,3,2,4,2])",
        "minGroupsForValidAssignment(nums = [4,2,2,2,4,4,4])",
        "minGroupsForValidAssignment(nums = [1,3,1,1,4,3,2])"
    ],
    "sample_307": [
        "countSeniors(details = [\"apr\", \"mar\", \"feb\", \"jun\"])",
        "countSeniors(details = [\"Alex - 35\", \"John - 62\", \"Tom - 40\"])",
        "countSeniors(details = [\"s20\", \"b32\", \"h50\"])",
        "countSeniors(details = [\"bsa76\", \"bsa43\", \"bsa76\"])",
        "countSeniors(details = [\"2019-12-31 30\", \"2019-12-31 31\", \"2020-12-31 61\"])",
        "countSeniors(details = [\"r12\", \"a60\", \"j61\", \"d61\"])",
        "countSeniors(details = [\"12th std cv678\", \"10th std cv678\", \"10th std cv678\"])",
        "countSeniors(details = [\"Anshuman \", \"Sushil \", \"Ramesh\", \"Narendra\"])",
        "countSeniors(details = [\"bak 18\", \"san 31\", \"lac 30\"])",
        "countSeniors(details = [\"1234\", \"4321\", \"1212\", \"8453\", \"3456\", \"12\", \"2\"])"
    ],
    "sample_290": [
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"0001\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"10011\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"11000\")",
        "minimumSteps(s = \"01110111\")",
        "minimumSteps(s=\"0101\")",
        "minimumSteps(s = \"010010011\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,1,2], moveFrom = [0,2], moveTo = [1,0])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [2,3], moveTo = [1])",
        "relocateMarbles(nums = [0,1,2,2,3,0,4,2], moveFrom = [0,1,4], moveTo = [2,3,4])",
        "relocateMarbles(nums = [0,0,0,0,0,0,0,0], moveFrom = [0,1], moveTo = [1,0])",
        "relocateMarbles(nums = [2, 1, 2, 3, 2], moveFrom = [0, 0, 1, 1], moveTo = [1, 2, 2, 3])",
        "relocateMarbles(nums = [1,3,5,2,3], moveFrom = [3,5], moveTo = [4,5])",
        "relocateMarbles(nums = [1,2,3,2,1,4], moveFrom = [0,1,2], moveTo = [4,5,6])",
        "relocateMarbles(nums = [0,1,2,0,1,2,2], moveFrom = [2,5], moveTo = [1,4])",
        "relocateMarbles(nums = [1,2,2,1,2,2,2,2,1], moveFrom = [1,2,3,4], moveTo = [4,3,1,2])",
        "relocateMarbles(nums = [2,3,4,5,4,3,2], moveFrom = [2,2,3,3,4,4,5], moveTo = [1,1,2,2,3,3,5])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3])",
        "alternatingSubarray(nums = [2, 2, 2, 2])",
        "alternatingSubarray(nums = [2, 1, 2, 3, 4, 3])",
        "alternatingSubarray(nums = [4, 2, 4, 2, 4])",
        "alternatingSubarray(nums = [1,2,1,2,3])",
        "alternatingSubarray(nums = [1, 3, 1, 3, 5])",
        "alternatingSubarray(nums = [3, 6, 9, 12])",
        "alternatingSubarray(nums = [3, 1, 3, 2, 1, 3])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"aab\", k = 2)",
        "beautifulSubstrings(s = \"ababa\", k = 3)",
        "beautifulSubstrings(s = \"aab\", k = 3)",
        "beautifulSubstrings(s = \"aab\", k = 3)",
        "beautifulSubstrings(s = \"aa\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(\"ababa\", 3)",
        "beautifulSubstrings(s = \"baana\", k = 2)",
        "beautifulSubstrings(s = \"abababab\", k = 5)",
        "beautifulSubstrings(\"cbaebabacd\", 3)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [-1, 0, 1, 2, -1, -4])",
        "maximumTripletValue(nums = [-1, 0, 1, 2, -1, -4])",
        "maximumTripletValue(nums = [1,2,1])",
        "maximumTripletValue(nums = [-1,2,1,-4])",
        "maximumTripletValue([1,2,3])",
        "maximumTripletValue(nums = [3, 0, 1, 2])",
        "maximumTripletValue([-10, -10, 5, 2])",
        "maximumTripletValue(nums = [1,2,3,4])",
        "maximumTripletValue(nums = [0, -1, 2, -3])",
        "maximumTripletValue(nums = [3, 2, 0, -1])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"aa\", \"ba\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"ab\", \"bc\"])",
        "maximumNumberOfStringPairs(words = [\"cat\",\"bat\",\"rat\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bc\", \"c\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"a\", \"bc\", \"abcd\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"def\", \"aba\", \"zyx\", \"zyx\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"aa\", \"aaa\", \"b\", \"bb\", \"bbb\", \"c\"])",
        "maximumNumberOfStringPairs(words = [\"taco\", \"cat\", \"bat\", \"tab\", \"dog\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"ba\",\"abc\",\"bca\",\"abc\",\"cba\"])",
        "maximumNumberOfStringPairs(words = [\"ba\", \"ab\", \"bc\", \"bd\", \"cd\", \"dc\", \"cb\", \"db\"])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 20, m = 3)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 1, m = 3)"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [10, 20, 30], money = 50)",
        "buyChoco(prices = [1, 1, 1], money = 3)",
        "buyChoco(prices = [2, 3, 4, 10], money = 10)",
        "buyChoco(prices = [5, 7, 10], money = 10)",
        "buyChoco(prices = [5, 3, 6], money = 10)",
        "buyChoco(prices = [1, 3, 4, 1], money = 3)",
        "buyChoco(prices = [0, 1, 3, 4], money = 6)",
        "buyChoco(prices = [1, 3, 10, 40], money = 10)",
        "buyChoco(prices = [100, 50, 150], money = 150)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\", \"zyx\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"cba\", \"daf\", \"ghi\"])",
        "maximumNumberOfStringPairs(words = [\"dad\", \"madam\", \"banana\"])",
        "maximumNumberOfStringPairs(words = [\"code\", \"edoc\", \"daec\", \"ecod\"])"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"aab\")",
        "longestSemiRepetitiveSubstring(s = \"aab\")",
        "longestSemiRepetitiveSubstring(s = \"aabba\")",
        "longestSemiRepetitiveSubstring(s = \"bananana\")",
        "longestSemiRepetitiveSubstring(\"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"babcb\")",
        "longestSemiRepetitiveSubstring(\"pwwkew\")",
        "longestSemiRepetitiveSubstring(\"abcd\")"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"w\",\"o\",\"r\",\"l\",\"d\"])",
        "minimizeConcatenatedLength(words = [\"a\",\"b\",\"ba\",\"bca\"])",
        "minimizeConcatenatedLength(words = [\"abcd\",\"fgh\",\"ijkl\"])",
        "minimizeConcatenatedLength(words = [\"baa\",\"abc\",\"cdc\"])",
        "minimizeConcatenatedLength(words = [\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\",\"defg\",\"ab\",\"a\"])",
        "minimizeConcatenatedLength(words = [\"abcde\",\"f\",\"g\"])",
        "minimizeConcatenatedLength(words = [\"abcdef\", \"xyz\", \"lmnop\"])",
        "minimizeConcatenatedLength(words = [\"abcdefg\", \"ababcdef\", \"abcdefgh\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"abf\",\"az\",\"ba\",\"az\",\"bc\",\"ab\"])"
    ],
    "sample_323": [
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 3)",
        "isFascinating(n = 3)",
        "isFascinating(n = 3)",
        "isFascinating(n = 3)",
        "isFascinating(n = 4)",
        "isFascinating(n = 4)",
        "isFascinating(1)",
        "isFascinating(n = 0)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"abcba\")",
        "longestSemiRepetitiveSubstring(s = \"abcba\")",
        "longestSemiRepetitiveSubstring(s = \"aab\")",
        "longestSemiRepetitiveSubstring(s = \"babab\")",
        "longestSemiRepetitiveSubstring(s = \"abbbba\")",
        "longestSemiRepetitiveSubstring(\"bab\")",
        "longestSemiRepetitiveSubstring(\"abcbc\")",
        "longestSemiRepetitiveSubstring(s = \"abcc\")",
        "longestSemiRepetitiveSubstring(\"abbaabba\")",
        "longestSemiRepetitiveSubstring(s = \"baabaaa\")"
    ],
    "sample_305": [
        "countSeniors(details = [\n    \"0123456789\",\n
        "countSeniors(details = [\"a1:54\", \"a2:55\", \"a3:70\"])",
        "countSeniors(details=[\"A01231234567890\", \"A09231234567890\"])",
        "countSeniors(details = [\"baa90910:66\", \"baa9100:50\"])",
        "countSeniors(details=[\"John:01011990:68\",\"Sam:02191984:19\"])",
        "countSeniors(details = [\"59/10/2015|1|No\", \"60/11/2015|2|No\", \"58/12/2015|3|No\"])",
        "countSeniors(details = [\"sattar 10/21\", \"Hassan 10/10\", \"Adam 11/12\"])",
        "countSeniors(details = [\"Sen75 Rani\", \"Jr91 Shashank\", \"Jun54 KK\", \"Jun83 Mathew\"])",
        "countSeniors(details = [\"sam:16:05:21\", \"mark:62:22:34\", \"tina:31:55:15\", \"joan:60:59:23\"])",
        "countSeniors(details = [\"12/04/2012 - Joshua Johnson-30 years-senior-MBA\", \"12/04/2012 - Peter Greene-36 years-senior-PhD\", \"12/04/2012 - Renee Adams-50 years-senior-MBA\"])"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [1,2,3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [1,2])",
        "minGroupsForValidAssignment(nums = [1, 1, 2])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2])",
        "minGroupsForValidAssignment(nums = [1, 2, 1, 2, 1, 2])",
        "minGroupsForValidAssignment(nums = [2,2,2,4,4])",
        "minGroupsForValidAssignment(nums = [5,5,10,10])",
        "minGroupsForValidAssignment([1,2])"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [3, 4, -1, 1])",
        "minimumSum(nums = [3, 1, 4, 1, 5])",
        "minimumSum(nums = [4, 2, 1, 2])",
        "minimumSum(nums = [1,3,5])",
        "minimumSum(nums = [2,3,4,1,5])",
        "minimumSum(nums = [2, 1, 3, 5])",
        "minimumSum(nums = [2, -2, 4])",
        "minimumSum(nums = [3, 0, 0, 2])",
        "minimumSum(nums = [-3, 1, -4, -2, -3, 1, 5, -2])"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"bat\", \"tab\", \"cat\", \"dog\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"ba\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"cba\",\"abcd\",\"cdab\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"ba\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"b\", \"c\", \"ab\", \"ba\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"ba\", \"am\", \"ma\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"x\"])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = '0011', k = 2)",
        "shortestBeautifulSubstring(s = '10111', k = 2)",
        "shortestBeautifulSubstring(s = '10111', k = 2)",
        "shortestBeautifulSubstring(s = \"111\", k = 2)",
        "shortestBeautifulSubstring(s = \"111\", k = 2)",
        "shortestBeautifulSubstring(s = \"101001\", k = 3)",
        "shortestBeautifulSubstring(s = \"1110\", k = 2)",
        "shortestBeautifulSubstring(s = \"101110101\", k = 2)",
        "shortestBeautifulSubstring(\"1011101\", 2)",
        "shortestBeautifulSubstring(s = \"10011101\", k = 2)"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 4)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 4)",
        "lexicographicallySmallestArray(nums = [4, 3, 2, 1], limit = 3)",
        "lexicographicallySmallestArray(nums = [1, 2, 3, 4, 5], limit = 6)",
        "lexicographicallySmallestArray(nums = [1, 2, 3], limit = 1)",
        "lexicographicallySmallestArray(nums = [2, 3, 4, 5, 6], limit = 2)",
        "lexicographicallySmallestArray(nums = [5, 4, 1, 2], limit = 4)",
        "lexicographicallySmallestArray(nums = [9, 1, 2, 6, 7, 5], limit = 3)",
        "lexicographicallySmallestArray(nums = [9, 5, 1, 7], limit = 3)"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[3, 1, 4], [1, 5, 9], [2, 6, 5]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(a = [[0, 1, 0], [1, 0, 1], [1, 1, 1]])",
        "matrixSum(a = [\n    [1, 2, 3],\n    [2, 3, 4],\n    [1, 5, 5]\n])",
        "matrixSum(a = [[1,3,2],[4,6,1],[5,5,5]])"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"aab\", k = 2)",
        "beautifulSubstrings(s = \"ababa\", k = 2)",
        "beautifulSubstrings(s = \"ababa\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"aab\", k = 3)",
        "beautifulSubstrings(s = \"abcde\", k = 2)",
        "beautifulSubstrings(s = \"abacaba\", k = 3)",
        "beautifulSubstrings(s = \"abccba\", k = 2)",
        "beautifulSubstrings(s = \"abaac\", k = 2)",
        "beautifulSubstrings(s = \"abacadaeaf\", k = 1)"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"ab\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"ab\", \"ba\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"a\", \"bc\"])",
        "maximumNumberOfStringPairs(words = [\"bat\", \"tab\", \"car\", \"arc\", \"rat\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"a\", \"b\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"abc\", \"xyz\", \"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"cba\", \"d\", \"dcba\", \"abcd\", \"cd\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"def\", \"d\", \"f\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abcde\", \"abfde\", \"zyx\", \"wxyz\", \"xyzzy\"])"
    ],
    "sample_325": [
        "isFascinating(n = 9)",
        "isFascinating(n = 123)",
        "isFascinating(n = 12)",
        "isFascinating(n = 3)",
        "isFascinating(n = 6)",
        "isFascinating(n = 19)",
        "isFascinating(n = 495)",
        "isFascinating(n = 728)",
        "isFascinating(n = 12342)",
        "isFascinating(n = 9193961)"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 3, 2, 4])",
        "maximumTripletValue(nums = [2, 4, 1, 5, 3])",
        "maximumTripletValue(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])",
        "maximumTripletValue(nums = [1, 5, 1, 2])",
        "maximumTripletValue(nums = [2, 3, 2])",
        "maximumTripletValue(nums = [2, 7, 9, 4, 5, 3])",
        "maximumTripletValue(nums = [2, 7, 4, 1, 8, 10])",
        "maximumTripletValue([3, 3, 4, 4, 5])",
        "maximumTripletValue(nums = [-5, 5, 0, -10, 10])",
        "maximumTripletValue(nums = [9, 4, 7, 2, 9, 5])"
    ],
    "sample_312": [
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum(nums = [[9,8],[7,6]])",
        "matrixSum(nums = [[5,1],[9,2]])",
        "matrixSum(nums = [[2,2,2],[0,2,2],[0,0,2]])",
        "matrixSum(nums = [[3, 3, 3], [3, 3, 3]])",
        "matrixSum([[2, 2, 2], [2, 1, 2], [2, 1, 2]])",
        "matrixSum([[3,5,1],[9,2,6],[7,4,3]])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3, 4], b = [3, 2, 1, 4])",
        "minOperations(a = [3,4,5], b = [1,2,3])",
        "minOperations(a = [2, 4, 3], b = [1, 2, 3])",
        "minOperations(a = [9, 8, 7], b = [1, 2, 3])",
        "minOperations(a = [5, 3, 2], b = [2, 4, 1])",
        "minOperations(a = [2, 1, 1, 1], b = [1, 2, 3, 4])",
        "minOperations([2, 1], [2, 5])",
        "minOperations(a = [0, 1, 0, 0, 0], b = [1, 1, 0, 0, 0])",
        "minOperations(a = [5, 3, 1], b = [7, 8, 9])",
        "minOperations(a = [1, 5, 6, 1], b = [2, 3, 4, 2])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1,1,1,1,1], nums2 = [1,1,1,1,1])",
        "minOperations(nums1 = [3, 2, 3], nums2 = [2, 2, 2])",
        "minOperations([1,3,5,7,9], [2,4,6,8,10])",
        "minOperations(nums1 = [1, 1, 2], nums2 = [2, 1])",
        "minOperations(nums1 = [2, 3, 5], nums2 = [2, 4, 8])",
        "minOperations(nums1 = [5, 4, 3, 2, 1], nums2 = [2, 4, 1, 5, 3])",
        "minOperations(nums1 = [2, 3, 5, 7], nums2 = [8, 9, 1, 2])",
        "minOperations([2, 3, 1, 2], [3, 2, 4, 5])",
        "minOperations(nums1 = [3,4,2,1,4], nums2 = [5,6,1,2,3])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [2, 3, 1, 5, 8, 9])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [3, 1, 2])",
        "maximumTripletValue(nums = [2, 1, 5, 0])",
        "maximumTripletValue(nums = [1,2,3,4])",
        "maximumTripletValue([1, 2, 3])",
        "maximumTripletValue(nums = [0, 1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [3, 2, 3])",
        "maximumTripletValue([-10,0,1,2,3,4])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"010011\", k = 2)",
        "shortestBeautifulSubstring(\"abab\", 2)",
        "shortestBeautifulSubstring(s = \"00010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"010011001\", k = 4)",
        "shortestBeautifulSubstring(s = \"1110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"00101100101\", k = 2)",
        "shortestBeautifulSubstring(s = \"0100000111\", k = 4)",
        "shortestBeautifulSubstring(s = \"11211111\", k = 4)",
        "shortestBeautifulSubstring(s = \"0101110101\", k = 3)"
    ],
    "sample_256": [
        "minimumSum(nums = [2, 7, 9, 3, 1])",
        "minimumSum(nums = [2, 1, 2, 2])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSum(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minimumSum(nums = [4,5,1,2])",
        "minimumSum([1, 2, 1, 3, 2])",
        "minimumSum(nums = [1, 3, 8, 2])",
        "minimumSum(nums = [10, 5, 2, 4, 8])",
        "minimumSum(nums = [1, 2, -2, -3, 4, -4])",
        "minimumSum(nums = [2, 6, 3, 3, 7, 4])"
    ],
    "sample_291": [
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"11\")",
        "minimumSteps(s = \"11\")",
        "minimumSteps(s = \"1\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"000111\")",
        "minimumSteps(\"0101\")",
        "minimumSteps(\"1111\")",
        "minimumSteps(\"011\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations([1,2,3,4], [4,3,2,1])",
        "minOperations(nums1 = [3, 1, 2], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [3, 2, 1], nums2 = [1, 3, 2])",
        "minOperations([1,3,2,4], [2,4,3,1])",
        "minOperations(nums1 = [4, 5, 6, 7], nums2 = [1, 2, 3, 8])",
        "minOperations(nums1 = [4,3,5,1,2], nums2 = [2,3,1,4,5])",
        "minOperations([1,1,1,1,1,1,1,1,1,1,1], [1,1,2,2,2,2,2,2,2,2,2])",
        "minOperations(nums1 = [4, 2, 5, 7], nums2 = [4, 1, 5, 8])"
    ],
    "sample_277": [
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1,2,3],[4,5,6],[7,8,9]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [0, 0, 0]])",
        "findChampion(grid = [[0,1,1],[1,0,1],[0,1,0]])",
        "findChampion(grid = [[1, 1, 1], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 1, 0], [0, 0, 0, 1], [1, 1, 1, 1]])",
        "findChampion(grid = [[3, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[0, 0, 1, 0], [1, 1, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n = 20, m = 3)",
        "differenceOfSums(n = 15, m = 5)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(m = 3, n = 20)",
        "differenceOfSums(n = 16, m = 4)"
    ],
    "sample_292": [
        "minimumSteps(s = \"11\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"111\")",
        "minimumSteps(s = \"000111\")",
        "minimumSteps(s = \"00110011\")",
        "minimumSteps(s = \"11111\")",
        "minimumSteps(\"101\")",
        "minimumSteps(s = \"1000\")",
        "minimumSteps(s = \"001101\")",
        "minimumSteps(s = \"11000111\")"
    ],
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 3, 5, 7])",
        "alternatingSubarray(nums = [4, 2, 5, 1, 3])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 4])",
        "alternatingSubarray(nums = [1, 1, 1, 1, 2, 1, 1])",
        "alternatingSubarray(nums = [1,2,3,1,2,3,4,5,6])",
        "alternatingSubarray(nums = [0, 0, 0, 0, 1, 1, 0, 0, 0])"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [1,3], moveTo = [2,4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [4, 5], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [2, 1], moveTo = [3, 2])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [4,3], moveTo = [1,2])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 4, 6, 8], moveTo = [1, 3, 5, 7])",
        "relocateMarbles(nums = [2, 7, 11, 15], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums = [0,1,2,3,4], moveFrom = [2,3], moveTo = [4,0])",
        "relocateMarbles(nums = [3, 1, 1, 2], moveFrom = [1, 2], moveTo = [1])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 7], moveTo = [2, 8])",
        "relocateMarbles(nums = [1, 2, 5, 4], moveFrom = [4, 3], moveTo = [1, 2])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, -1])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [3, 2, 1])",
        "maximumTripletValue(nums = [3, 0, 2, 1])",
        "maximumTripletValue(nums = [3, 0, -2, 1])",
        "maximumTripletValue(nums = [-2, -3, 4, -1, -2, 1, 5, -3])",
        "maximumTripletValue([-1, 2, -3, 4])",
        "maximumTripletValue(nums = [10, 2, 5, 1, 6, -1])"
    ],
    "sample_273": [
        "findChampion(grid = [[1, 2, 3], [4, 0, 5], [6, 7, 8]])",
        "findChampion(grid = [[1, 1, 1], [0, 0, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 2, 3], [0, 0, 0], [4, 5, 6]])",
        "findChampion(grid = [[1,1,1],[1,1,1],[1,1,1]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 1, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 0, 0], [0, 1, 1]])",
        "findChampion(grid = [[2, 0, 0], [3, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 2, 3], [0, 5, 6], [4, 0, 0]])",
        "findChampion(grid = [[1, 1, 1, 0, 0, 1], [1, 0, 0, 1, 0, 1], [1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1], [1, 1, 0, 1, 1, 1], [1, 1, 0, 0, 1, 1]])",
        "findChampion(grid = [[1, 1, 1, 1, 0, 0, 1, 0],\n                             [1, 1, 1, 1, 0, 0, 1, 0],\n                             [1, 1, 1, 1, 1, 0, 1, 0],\n                             [1, 1, 1, 0, 1, 1, 0, 0],\n                             [0, 0, 0, 0, 0, 1, 0, 0],\n                             [0, 0, 0, 0, 0, 1, 0, 0],\n                             [1, 1, 1, 0, 1, 1, 1, 1],\n                             [1, 1, 1, 1, 0, 0, 1, 0]])"
    ],
    "sample_267": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minSum(nums1 = [], nums2 = [])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 4])",
        "minSum(nums1 = [2, 4], nums2 = [1, 3])",
        "minSum(nums1 = [2, 7, 11], nums2 = [1, 3, 6])",
        "minSum([4, 2, 3, 1], [5, 2, 2])",
        "minSum(nums1 = [3, 4, -2], nums2 = [-1, 2, 1, 5])",
        "minSum([-1], [0])"
    ],
    "sample_294": [
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"0011\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = '1011')",
        "minimumSteps(s = \"1000101\")"
    ],
    "sample_274": [
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 2, 3], [4, 0, 6], [7, 8, 9]])",
        "findChampion(grid = [[1,1,1],[1,0,1],[1,1,1]])",
        "findChampion(grid = [[0,0,0],[0,0,0],[0,0,0]])",
        "findChampion(grid = [[0, 0, 0], [1, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[1, 1, 1], [1, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 1, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 2], [0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [\n    [0, 2, 0, 4, 2],\n    [3, 2, 5, 0, 4],\n    [0, 1, 0, 3, 4],\n    [3, 1, 0, 0, 1],\n    [0, 2, 3, 1, 4],\n])"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums = [1,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2])",
        "minGroupsForValidAssignment(nums = [3,2,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2])",
        "minGroupsForValidAssignment(nums = [2,2,2,3,3,3,4,4,4,4])",
        "minGroupsForValidAssignment(nums = [1,2,4,4,4])",
        "minGroupsForValidAssignment(nums = [3,2,3,6])",
        "minGroupsForValidAssignment([2,2,2,2,2])",
        "minGroupsForValidAssignment([2,2,4,4,4,6])"
    ],
    "sample_270": [
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minSum(nums1 = [0, 1, 2], nums2 = [0, 1, 2])",
        "minSum(nums1 = [2,0,2], nums2 = [1,2,2])",
        "minSum([2, 1], [3, 4])",
        "minSum(nums1 = [1, 2, 7], nums2 = [3, 4, 9])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [2, 4, 5, 7])",
        "minSum(nums1 = [2, 4, 6, 0], nums2 = [3, 6, 0, 1])",
        "minSum([0, 1, 2], [0, 1, 2])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum([0, 0], [0, 0])"
    ],
    "sample_317": [
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 5)",
        "buyChoco(prices = [2, 3, 5], money = 5)",
        "buyChoco(prices = [1,2,3,4], money = 4)",
        "buyChoco(prices = [2, 5, 8], money = 10)",
        "buyChoco(prices = [4, 5, 1, 2], money = 3)",
        "buyChoco(prices = [1, 5, 3, 7, 2], money = 4)",
        "buyChoco(prices = [2, 5, 3, 8, 10], money = 15)",
        "buyChoco(prices = [10, 11, 12, 13, 14], money = 14)",
        "buyChoco(prices = [2, 3, 10, 4, 5, 7], money = 5)",
        "buyChoco(prices = [2, 5, 2, 6, 3, 8], money = 15)"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"aba\", k = 2)",
        "beautifulSubstrings(s = \"aabc\", k = 2)",
        "beautifulSubstrings(s = \"aau\", k = 2)",
        "beautifulSubstrings(\"aa\", 2)",
        "beautifulSubstrings(s = \"abacd\", k = 2)",
        "beautifulSubstrings(s = \"baaan\", k = 3)",
        "beautifulSubstrings(s = \"aaah\", k = 2)",
        "beautifulSubstrings(s = \"abacadaeae\", k = 2)",
        "beautifulSubstrings(\"aa\", 1)",
        "beautifulSubstrings(s = \"aab\", k = 1)"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(\"abab\")",
        "longestSemiRepetitiveSubstring(\"banana\")",
        "longestSemiRepetitiveSubstring(s = \"babab\")",
        "longestSemiRepetitiveSubstring(s = \"aaba\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcbc\")",
        "longestSemiRepetitiveSubstring(s = \"abbb\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaaa\")"
    ],
    "sample_341": [
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 4, z = 5)",
        "longestString(x = 5, y = 3, z = 4)",
        "longestString(x = 3, y = 7, z = 5)",
        "longestString(x = 5, y = 3, z = 7)",
        "longestString(x = 3, y = 5, z = 3)",
        "longestString(x = 5, y = 8, z = 2)",
        "longestString(x = 10, y = 3, z = 2)",
        "longestString(x = 5, y = 9, z = 10)"
    ],
    "sample_271": [
        "minSum(nums1 = [1,2,3], nums2 = [3,2,1])",
        "minSum(nums1 = [1,2,3], nums2 = [3,2,1])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [2, 4, 6, 8])",
        "minSum(nums1 = [1,1,0,0], nums2 = [0,0,1,1])",
        "minSum(nums1 = [0,2,4], nums2 = [0,2,4])",
        "minSum(nums1 = [10,20], nums2 = [2,20])",
        "minSum(nums1 = [1, 2], nums2 = [1, -2])",
        "minSum([-2,-3,-1],[1,2,1])",
        "minSum(nums1 = [2, -3, 4], nums2 = [-5, 0, 11])",
        "minSum(nums1 = [5, 1, 3, 4], nums2 = [2, 2, 4, 5])"
    ],
    "sample_340": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 3, z = 4)",
        "longestString(x = 4, y = 5, z = 2)",
        "longestString(x = 2, y = 5, z = 1)",
        "longestString(x = 2, y = 4, z = 7)",
        "longestString(x = 2, y = 6, z = 5)",
        "longestString(x = 5, y = 2, z = 6)",
        "longestString(x = 4, y = 7, z = 8)",
        "longestString(x = 10, y = 4, z = 2)"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"abcd\", k = 3)",
        "shortestBeautifulSubstring(s = \"1234\", k = 2)",
        "shortestBeautifulSubstring(s = \"10\", k = 1)",
        "shortestBeautifulSubstring(s = \"abcde\", k = 3)",
        "shortestBeautifulSubstring(s = \"10100101\", k = 3)",
        "shortestBeautifulSubstring(s = \"aabbbcc\", k = 2)",
        "shortestBeautifulSubstring(s = \"abcbca\", k = 5)",
        "shortestBeautifulSubstring(s = \"1234567890\", k = 15)",
        "shortestBeautifulSubstring(s = \"111223344555666777888\", k = 3)",
        "shortestBeautifulSubstring(\"abcdcccdabcd\", 2)"
    ],
    "sample_324": [
        "isFascinating(n = 9)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 22)",
        "isFascinating(n = 666)",
        "isFascinating(7)",
        "isFascinating(n = 6561)",
        "isFascinating(n = 697)",
        "isFascinating(n = 8181)",
        "isFascinating(n = 53806327)"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [2, 7, 11, 15])",
        "minimumSum(nums = [2,3,1,2,4])",
        "minimumSum([3, 1, 4, 2])",
        "minimumSum(nums = [3, 0, 2, 4])",
        "minimumSum(nums = [2, 6, 3, 7, 8])",
        "minimumSum(nums = [1, 5, 2, 7, 1])",
        "minimumSum(nums = [-1, -3, 5, 3])"
    ],
    "sample_268": [
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 4, 5])",
        "minSum(nums1 = [1,2,3,4], nums2 = [3,2,4,1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [5, 6, -4])",
        "minSum([2,2,2,2,2], [1,1,1,1,1])",
        "minSum(nums1 = [1, 2], nums2 = [0, 1, 0])",
        "minSum(nums1 = [4, 5, 0, 0, 3], nums2 = [5, 1, 9, 2])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum([-2,3,-4,4,3], [2,3,4,1,-4])",
        "minSum(nums1 = [1, -3, 4, 2, -1, -2], nums2 = [-1, -1, 1, 1, -1, 1, -1, 1, -1, -1])",
        "minSum([0,0,0], [0,0,0])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"ba\", s3 = \"ba\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"anana\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"bab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"aba\")",
        "findMinimumOperations(s1 = \"ana\", s2 = \"nana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"acd\", s3 = \"bcd\")",
        "findMinimumOperations(s1 = \"bca\", s2 = \"abc\", s3 = \"acb\")",
        "findMinimumOperations(\"aaaa\", \"bbaa\", \"cccc\")",
        "findMinimumOperations(s1 = \"baaa\", s2 = \"bbaaa\", s3 = \"bbaaaa\")"
    ],
    "sample_321": [
        "maxStrength(nums = [2, 3, -2, 4])",
        "maxStrength(nums = [1, 2, -3, 4])",
        "maxStrength(nums = [2, 3, -4, 5, -2])",
        "maxStrength(nums = [-2, -3, 5, -10])",
        "maxStrength(nums = [3,2,-3])",
        "maxStrength(nums = [1, 2, 3])",
        "maxStrength(nums = [-3, -2, -1, 0, 0, 1, 2, 3, 4, 5])",
        "maxStrength(nums = [1,2,-3,4,-5,6,7,-8])",
        "maxStrength(nums = [2, -1, -2, 3, 1, -3])",
        "maxStrength(nums = [-2, 3, -4, 0, 5, 6])"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,2], moveTo = [2,3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [3])",
        "relocateMarbles(nums = [2, 1, 2, 3, 1, 2], moveFrom = [0, 4], moveTo = [1, 2])",
        "relocateMarbles(nums = [1,2], moveFrom = [1,2], moveTo = [3,3])",
        "relocateMarbles(nums = [2, 1, 2, 3, 1], moveFrom = [0, 2], moveTo = [3, 0])",
        "relocateMarbles(nums = [1,2,2,3,4,4], moveFrom = [1,2,4], moveTo = [2,3,4])",
        "relocateMarbles(nums = [3, 2, 2, 3], moveFrom = [0, 0, 1], moveTo = [2, 1, 2])",
        "relocateMarbles(nums = [2, 5, 6, 7], moveFrom = [5, 7], moveTo = [2, 6])"
    ],
    "sample_357": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [1,2], moveTo = [3,4])",
        "relocateMarbles(nums = [5,6,8,9], moveFrom = [8,9], moveTo = [5,6])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [2, 1], moveTo = [4, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [4, 5], moveTo = [2, 8])",
        "relocateMarbles(nums = [5, 1, 2, 8, 9, 5], moveFrom = [1, 2, 5], moveTo = [3, 4, 6])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7], moveFrom = [2,3], moveTo = [3,7])",
        "relocateMarbles(nums = [2, 1, 5, 4, 6, 3], moveFrom = [1, 3, 5], moveTo = [4, 6, 2])",
        "relocateMarbles(nums = [5, 6, 5, 9, 8, 5, 5, 9, 9, 8], moveFrom = [5,5,5,5,8,9], moveTo = [6,9])",
        "relocateMarbles(nums = [2,2,2,2,3,3,3,4,5,6,6,6,6,6,7,8,8],\n                        moveFrom = [6,6,6,6,6,6,6,6,6,6,6],\n                        moveTo = [7,7,7,7,7,7,7,7,7,7,8])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 2, 3], money = 6)",
        "buyChoco(prices = [10, 20, 30], money = 100)",
        "buyChoco(prices = [10, 15, 3, 7], money = 20)",
        "buyChoco(prices = [1, 3, 5, 7], money = 8)",
        "buyChoco(prices = [100, 200, 300, 400, 500], money = 1000)",
        "buyChoco(prices = [100, 100, 100], money = 200)",
        "buyChoco(prices = [2, 3, 4, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4], money = 10)",
        "buyChoco(prices = [10, 30, 15, 20, 25], money = 80)",
        "buyChoco(prices = [4, 2, 2, 1, 3, 4, 5, 2, 4], money = 10)"
    ],
    "sample_308": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[3, 0, 8], [9, 5, 1], [2, 4, 6]])",
        "matrixSum(nums = [[1, 3, 4], [2, 5, 6]])",
        "matrixSum(nums = [[1, 2, 3], [2, 3, 4]])",
        "matrixSum([[2, 1, 4], [3, 6, 5], [8, 7, 9]])",
        "matrixSum(nums = [[1,4,2],[3,2,1],[4,5,1]])",
        "matrixSum(nums = [[3, 1, 4, 1, 5], [9, 2, 6, 5, 3], [5, 3, 7, 9, 3], [9, 9, 2, 6, 6], [4, 3, 2, 7, 5]])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 6)",
        "buyChoco(prices = [1, 2, 3, 4], money = 5)",
        "buyChoco(prices = [2, 3, 5], money = 5)",
        "buyChoco(prices = [2, 3, 4], money = 3)",
        "buyChoco(prices = [3, 4, 5], money = 7)",
        "buyChoco(prices = [10, 5], money = 20)",
        "buyChoco(prices = [5, 15], money = 10)",
        "buyChoco(prices = [1,2,3,4,5], money = 2)",
        "buyChoco(prices = [5, 10, 11], money = 20)"
    ],
    "sample_259": [
        "minimumSum(nums = [2,3,1,2,4,3])",
        "minimumSum(nums = [2,3,1,4])",
        "minimumSum(nums = [2,3,4,5])",
        "minimumSum(nums = [4,2,3,1,5])",
        "minimumSum(nums = [4,2,2,2,2])",
        "minimumSum(nums = [2,1,5,0])",
        "minimumSum(nums = [2,2,2,2,2,2,2,2,2])",
        "minimumSum(nums = [1,9,5])",
        "minimumSum(nums = [6, 5, 1, 2, 4])",
        "minimumSum(nums = [4, 2, 3, 4, 1, 2, 3])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [0, 1, 0])",
        "alternatingSubarray(nums = [1, 3, 2, 2, 5, 2])",
        "alternatingSubarray(nums = [-1, 2, 1, 3, 2])",
        "alternatingSubarray(nums = [-1, 2, 3, 1])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 3, 3])",
        "alternatingSubarray(nums = [1, 7, 5, 9, 2, 4])",
        "alternatingSubarray(nums = [2, 4, 1, 2, 7, 5, 9, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 6, 7, 9, 9, 7, 6])"
    ],
    "sample_311": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [3, 2, 1], [1, 2, 3]])",
        "matrixSum(nums = [[1,3,1],[1,5,1],[4,2,1]])",
        "matrixSum(nums = [[1,2,3],[4,5,6]])",
        "matrixSum(nums = [[2, 2], [3, 1]])",
        "matrixSum(nums = [[3, 0, 8, 4], [5, 6, 7, 0], [9, 9, 9, 9]])",
        "matrixSum(nums = [[5, 9, 7], [4, 8, 2], [6, 1, 3]])",
        "matrixSum(nums = [[5,4,5], [4,5,2], [2,5,7]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 2, 3], money = 5)",
        "buyChoco(a = [1, 2], money = 5)",
        "buyChoco(a = [1, 2], money = 5)",
        "buyChoco(a = [1, 2, 4], money = 5)",
        "buyChoco(a = [2, 5], money = 7)",
        "buyChoco(a = [1, 3, 5], money = 10)",
        "buyChoco(a = [1, 2, 3, 4, 5], money = 4)",
        "buyChoco(a = [1, 2, 6], money = 10)",
        "buyChoco([1, 2], 10)",
        "buyChoco([4, 7, 1, 2], 10)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [1, 2])",
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums = [3, 3, 6])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 6])",
        "minGroupsForValidAssignment([1,2,1])",
        "minGroupsForValidAssignment([1,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [2, 1, 2, 2, 1])",
        "minGroupsForValidAssignment([2,3,1,4])",
        "minGroupsForValidAssignment(nums = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4])"
    ],
    "sample_276": [
        "findChampion(grid = [[0, 0, 1], [0, 1, 0], [1, 0, 0]])",
        "findChampion(grid = [[0,1,0],[1,0,1],[0,1,0]])",
        "findChampion(grid = [[1,1,1],[1,1,1],[1,1,1]])",
        "findChampion(grid = [[0, 0, 0], [1, 1, 1], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 2, 3], [2, 3, 2], [3, 2, 1]])",
        "findChampion(grid = [[2, 1, 0], [1, 2, 0], [0, 1, 2]])",
        "findChampion(grid = [[0, 1, 2], [1, 1, 0], [2, 0, 1]])",
        "findChampion(grid = [[1,2,3], [2,1,3], [2,3,1]])"
    ],
    "sample_320": [
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3])",
        "maxStrength(nums = [2, 3, 5, 7])",
        "maxStrength(nums = [2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 5])",
        "maxStrength(nums = [2,3,4])",
        "maxStrength(nums = [2, 2, 2, 2])",
        "maxStrength(nums = [2, 6, 3, 9, 7])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"time\", \"me\", \"bell\"])",
        "minimizeConcatenatedLength(words = [\"abcw\", \"baz\", \"foo\", \"bar\", \"xtfn\", \"abcdef\"])",
        "minimizeConcatenatedLength(words = [\"baa\", \"nana\", \"aaa\"])",
        "minimizeConcatenatedLength(words = [\"baaa\", \"nanaaa\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ab\", \"ba\", \"bb\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"cba\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"nana\", \"aa\", \"a\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"ba\", \"ba\", \"ba\", \"na\", \"na\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"baaa\", \"baab\", \"baaab\", \"baa\"])",
        "minimizeConcatenatedLength(words = [\"abcdefg\", \"b\", \"bcdef\", \"cd\", \"defg\", \"ef\", \"f\"])"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"a\", s2 = \"a\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"aa\", s2 = \"a\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"aa\", s2 = \"aaa\", s3 = \"aaaa\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"aa\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"aaaaaa\", s2 = \"aaaaaa\", s3 = \"aaaaaa\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"aba\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"ba\", s3 = \"baa\")",
        "findMinimumOperations(s1 = \"aabb\", s2 = \"abb\", s3 = \"aaa\")",
        "findMinimumOperations(\"baana\", \"a\", \"ana\")"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [3, 6, 9, 12])",
        "alternatingSubarray(nums = [1,3,5,7])",
        "alternatingSubarray(nums = [1, 3, 2, 2, 5, 7])",
        "alternatingSubarray(nums = [2, 1, 2, 5, 7, 9])",
        "alternatingSubarray(nums = [1, 4, 3, 2, 5])",
        "alternatingSubarray(nums = [1,3,2,5,7])",
        "alternatingSubarray(nums = [1, 5, 1, 1, 7])",
        "alternatingSubarray(nums = [-3, 5, -2, -4])"
    ],
    "sample_278": [
        "findChampion(grid = [[1,1,1],[1,1,1],[1,1,1]])",
        "findChampion(grid = [[0, 1, 2], [3, 4, 5], [6, 7, 8]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [1, 0, 0], [1, 1, 0]])",
        "findChampion(grid = [[0, 0, 1], [1, 1, 0], [0, 1, 1]])",
        "findChampion(grid = [[0,1,0],[0,0,0],[0,0,1]])",
        "findChampion(grid = [[3, 1, 2], [0, 2, 2], [1, 1, 0]])",
        "findChampion(grid = [[1,0,0,0],[1,0,0,0],[1,1,0,0],[0,1,0,0]])",
        "findChampion(grid = [[2,3,2], [4,2,2], [1,1,2]])"
    ],
    "sample_304": [
        "countSeniors(details = [\"name:Tim, age:58\", \"name:Tom, age:77\"])",
        "countSeniors(details = [\"dc 12:00\", \"bc 13:00\", \"dc 12:30\"])",
        "countSeniors(details = [\"01.01.1990 25 50\", \"01.01.1990 28 60\", \"01.01.1990 25 40\"])",
        "countSeniors(details = [\"name:kulguru,age:22\", \"name:suman,age:50\"])",
        "countSeniors(details = [\"16/02/1999,45,F\", \"17/02/1999,62,M\", \"18/02/1999,71,M\"])",
        "countSeniors(details = [\"10001-01-01,25,Male,44\", \"10002-01-01,35,Female,50\", \"10003-01-01,45,Male,50\"])",
        "countSeniors(details = [\"am_krab@hotmail.com,51\", \"am_krab@hotmail.com,40\", \"am_krab@hotmail.com,31\"])",
        "countSeniors(details = [\"Mihir Sachdev  60\", \"Manish Chopra  28\", \"Manish Mehra  30\"])",
        "countSeniors(details = [\"9010 095321\", \"13010 095321\", \"13010 095321\", \"13010 095321\", \"13010 095321\"])",
        "countSeniors(details = [\"Jhon Smith,18\", \"Sam Brown,55\", \"Sandy Wu,80\", \"Lily Jones,19\"])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"aab\", k = 2)",
        "beautifulSubstrings(s = \"ababa\", k = 2)",
        "beautifulSubstrings(s = \"ababa\", k = 2)",
        "beautifulSubstrings(s = \"aba\", k = 2)",
        "beautifulSubstrings(s = \"leetcode\", k = 2)",
        "beautifulSubstrings(s = \"aaab\", k = 2)",
        "beautifulSubstrings(s = \"aaab\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"ababab\", k = 2)",
        "beautifulSubstrings(s = \"aee\", k = 3)"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"10\", k = 2)",
        "shortestBeautifulSubstring(s = \"111001\", k = 1)",
        "shortestBeautifulSubstring(s = \"101\", k = 1)",
        "shortestBeautifulSubstring(s = \"1100110\", k = 2)",
        "shortestBeautifulSubstring(s = '10', k = 2)",
        "shortestBeautifulSubstring(s = \"001101001\", k = 2)",
        "shortestBeautifulSubstring(s = \"1234\", k = 1)",
        "shortestBeautifulSubstring(s = \"01100101001\", k = 2)",
        "shortestBeautifulSubstring(s = \"0\" * 1000 + \"1\" * k + \"0\" * 1000, k = 2)"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"ab\", \"abc\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"an\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"anana\", \"n\"])",
        "minimizeConcatenatedLength(words = [\"wrt\", \"wrf\", \"er\", \"ett\", \"rftt\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"cd\", \"def\"])",
        "minimizeConcatenatedLength(words = [\"apple\", \"pie\", \"lemon\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"abc\"])",
        "minimizeConcatenatedLength(words = [\"one\", \"one\", \"one\", \"one\"])",
        "minimizeConcatenatedLength(words = [\"apple\", \"lemon\", \"apple\", \"banana\", \"lemon\"])"
    ],
    "sample_327": [
        "isFascinating(n = 123456789)",
        "isFascinating(n=123456789)",
        "isFascinating(123456789)",
        "isFascinating(n = 37)",
        "isFascinating(n = 45)",
        "isFascinating(n = 24)",
        "isFascinating(n = 13)",
        "isFascinating(n = 4242)",
        "isFascinating(n = 728)",
        "isFascinating(n=1634)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[3,2,1],[6,5,4],[9,8,7]])",
        "matrixSum([[3,2,1],[6,5,4],[9,8,7]])",
        "matrixSum([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[3,2,3], [1,2,3], [4,5,6]])",
        "matrixSum(nums = [\n    [5, 9, 2, 6],\n    [4, 3, 5, 7],\n    [8, 1, 9, 3],\n    [1, 8, 3, 3]\n])"
    ],
    "sample_326": [
        "isFascinating(n = 9)",
        "isFascinating(n = 9)",
        "isFascinating(n = 37)",
        "isFascinating(n = 19)",
        "isFascinating(n = 2333)",
        "isFascinating(n = 297)",
        "isFascinating(n = 45)",
        "isFascinating(11)",
        "isFascinating(n = 12321)",
        "isFascinating(n = 12341234)"
    ],
    "sample_275": [
        "findChampion(grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 0, 1], [0, 1, 0], [1, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 1], [0, 0, 0]])",
        "findChampion(grid = [[1,0,0],[0,1,0],[1,0,1]])",
        "findChampion(grid = [[1, 0, 1, 1], [1, 1, 0, 1], [0, 1, 1, 1], [1, 1, 1, 1]])",
        "findChampion(grid = [[0, 0, 0, 0], [1, 0, 1, 1], [1, 1, 1, 1], [0, 0, 0, 0]])",
        "findChampion(grid = [[1, 1, 1, 1], [0, 1, 1, 1], [0, 0, 0, 1], [1, 1, 0, 1]])",
        "findChampion(grid = [[0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                    [0, 0, 0, 0, 0, 0, 0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0, 0, 0, 0, 0, 0],\n                            [1, 0, 0, 0, 0, 0, 0, 0],\n                            [1, 1, 0, 0, 0, 0, 0, 0],\n                            [0, 1, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 1, 0, 0, 0, 0, 0],\n                            [0, 0, 1, 0, 0, 0, 0, 0],\n                            [0, 0, 1, 0, 0, 0, 0, 0],\n                            [0, 0, 1, 1, 0, 0, 0, 0]])"
    ],
    "sample_260": [
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 3, 2])",
        "minimumSum([-2, 1, -3, 4, -1, 2, 1, -5, 4])",
        "minimumSum(nums = [5, 2, 3, 4])",
        "minimumSum([-1, 2, 3, -4])",
        "minimumSum(nums = [3, 6, 7, 2])",
        "minimumSum([4, 3, 5, 6])",
        "minimumSum(nums = [1, 3, -5, 10])"
    ],
    "sample_322": [
        "isFascinating(n = 9)",
        "isFascinating(n = 37)",
        "isFascinating(n = 132)",
        "isFascinating(999)",
        "isFascinating(15)",
        "isFascinating(n = 2121)",
        "isFascinating(n = 13326)",
        "isFascinating(n = 2)",
        "isFascinating(n = 1)",
        "isFascinating(3)"
    ],
    "sample_248": [
        "minOperations(s1 = \"aab\", s2 = \"ab\", x = 2)",
        "minOperations(s1 = \"aab\", s2 = \"aab\", x = 2)",
        "minOperations(\"ba\", \"na\", 3)",
        "minOperations(s1 = \"aba\", s2 = \"baa\", x = 3)",
        "minOperations(s1 = \"0\", s2 = \"1\", x = 0)",
        "minOperations(\"0111\", \"0011\", 3)",
        "minOperations(s1 = \"00101\", s2 = \"01001\", x = 1)",
        "minOperations(s1 = \"11101\", s2 = \"10001\", x = 5)",
        "minOperations(s1 = \"aaabbb\", s2 = \"aabcc\", x = 4)",
        "minOperations(\"abc\", \"abc\", 2)"
    ],
    "sample_342": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 4, z = 3)",
        "longestString(x = 3, y = 3, z = 4)",
        "longestString(x = 4, y = 5, z = 6)",
        "longestString(x = 2, y = 3, z = 2)",
        "longestString(x = 4, y = 5, z = 2)",
        "longestString(x = 4, y = 5, z = 2)",
        "longestString(x = 3, y = 2, z = 3)",
        "longestString(x = 5, y = 3, z = 2)",
        "longestString(x = 2, y = 5, z = 1)"
    ],
    "sample_354": [
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [0, 2], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [3], moveTo = [4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [0, 1], moveTo = [2, 4])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [1,3], moveTo = [0,2])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [1, 2, 3], moveTo = [3, 4, 5])",
        "relocateMarbles(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 4, 6, 8], moveTo = [1, 3, 5, 7])",
        "relocateMarbles(nums = [2, 3, 4, 5, 6], moveFrom = [0, 0, 0, 0, 0], moveTo = [0, 0, 0, 0, 0])",
        "relocateMarbles(nums = [4, 5, 6, 7, 8], moveFrom = [4, 5], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 5, 6, 8, 9], moveFrom = [0, 1, 4], moveTo = [0, 2, 3])",
        "relocateMarbles(nums = [2, 3, 5, 6, 8, 9], moveFrom = [3, 1, 4], moveTo = [2, 5, 6])"
    ],
    "sample_306": [
        "countSeniors(details = [\"John:25\", \"Jane:60\", \"Bob:65\"])",
        "countSeniors(details = [\"name: joe,age:30\", \"name: kate,age:60\"])",
        "countSeniors(details = [\"John:34\", \"Michael:62\", \"Jane:56\"])",
        "countSeniors(details = [\"Mr.John is 64 years old\", \"Mr.Alex is 23 years old\"])",
        "countSeniors(details = [\"Alice:24\", \"Bob:23\", \"Charlie:80\", \"Diana:35\"])",
        "countSeniors(details = [\"mark, 57, smith\", \"john, 50, jones\"])",
        "countSeniors(details = [\"baulnabua@gmail.com\", \"baulnabua@gmail.com\", \"baulnabua@gmail.com\"])",
        "countSeniors(details = [\"SJK27-22-1994 16:23:50:36\", \"SJK27-22-1994 16:23:51:34\", \"SJK27-22-1994 16:23:52:34\"])",
        "countSeniors(details = [\"ABDmh 123456\", \"Jh12b mjd 67890\", \"aBmj 123456\"])",
        "countSeniors(details = [\"Tommy:01:03:00:00:01:12:00:50:00:01:50\",\n                                 \"Rick:01:10:00:00:00:01:12:00:50:00:01:50\",\n                                 \"Johnny:01:01:00:00:00:01:12:00:50:00:01:50\",\n                                 \"David:01:03:00:00:00:01:12:00:50:00:01:50\",\n                                 \"Timmy:01:03:00:00:00:01:12:00:50:00:01:50\",\n                                 \"Michael:01:03:00:00:00:01:12:00:50:00:01:50\"])"
    ],
    "sample_303": [
        "countSeniors(details = [\"I am 25 years old\", \"She is 60 years old\", \"He is 30 years old\"])",
        "countSeniors(details = [\"20-25\", \"46-60\", \"61-75\", \"80-90\"])",
        "countSeniors(details = [\"John-50\", \"Sam-60\", \"Maggie-89\"])",
        "countSeniors(details = [\"bob 60\", \"dan 30\", \"joe 65\", \"martha 70\"])",
        "countSeniors(details = [\"Lonnie 1234\", \"David 5678\", \"Sandra 9101\"])",
        "countSeniors(details = [\"joeh 45\", \"maryann 30\", \"joey 40\"])",
        "countSeniors(details = [\"john4:25\", \"mike8:30\", \"jon12:11\"])",
        "countSeniors(details = [\"steve11,72\", \"anna44,54\", \"chris32,35\"])",
        "countSeniors(details = [\"llebs1\", \"gk4\", \"p25s\"])",
        "countSeniors(details = [\"Liam\", \"06:00\", \"Ava\", \"12:00\", \"James\", \"16:00\", \"Karen\", \"15:00\", \"Sam\", \"14:00\"])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [2, 3], moveTo = [4, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [2, 3], moveTo = [1, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 2], moveTo = [5, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 2, 3], moveTo = [3, 4, 5])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [4, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [2, 3], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [3, 5], moveTo = [6, 8])",
        "relocateMarbles(nums = [1, 3, 4, 2], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [5])",
        "relocateMarbles(nums = [1, 1, 1, 1, 1, 1, 2, 2, 3, 4, 4, 4, 4], moveFrom = [0, 1, 2, 3], moveTo = [3, 4, 5, 6])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"aa\", s2 = \"aa\", s3 = \"aa\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"a\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"a\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abcde\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abcde\")",
        "findMinimumOperations(s1 = \"anna\", s2 = \"anna\", s3 = \"anna\")",
        "findMinimumOperations(s1 = \"bab\", s2 = \"aba\", s3 = \"bba\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"aba\")",
        "findMinimumOperations(s1 = \"bba\", s2 = \"bbb\", s3 = \"baa\")",
        "findMinimumOperations(s1 = \"abca\", s2 = \"bcbc\", s3 = \"bcac\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"mq\", s2 = \"px\", s3 = \"zy\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"na\", s3 = \"na\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"ana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"aa\", s2 = \"aa\", s3 = \"aa\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"an\", s3 = \"na\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"cde\", s3 = \"def\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"ccc\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"ananas\", s3 = \"naanas\")",
        "findMinimumOperations(\"sansa\", \"bran\", \"sara\")"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [3, 2, 1])",
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation(nums = [0, 1, 2])",
        "semiOrderedPermutation(nums = [1,3,2])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation(nums = [1, 3, 2, 1])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1,2,3])",
        "continuousSubarrays(a = [1,2,3,4])",
        "continuousSubarrays(a = [1, 1, 2, 1, 1])",
        "continuousSubarrays(a = [1, -1])",
        "continuousSubarrays(a = [1,3,2,3,1])",
        "continuousSubarrays([1, 2, 1, 2, 1, 2])",
        "continuousSubarrays(a = [1,1,2,2,3,3,4,4])",
        "continuousSubarrays(a = [1,2,1,1,1,1,1,1,1,2])",
        "continuousSubarrays(a = [2, 2, 3, 3, 4, 4, 5, 5])",
        "continuousSubarrays(a = [3,5,4,6,7,1,2])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [1, 2, 1])",
        "continuousSubarrays(nums = [1,1,1])",
        "continuousSubarrays(nums = [2, 2, 2])",
        "continuousSubarrays(nums = [10, 9, 2, 5, 3, 7, 101, 18])",
        "continuousSubarrays(nums = [2, 2, 1, 1, 2])",
        "continuousSubarrays(nums = [1, 1, 1, 2, 2])",
        "continuousSubarrays(nums = [2, 3, 1, 3, 2])",
        "continuousSubarrays([1, 2, 1, 2])",
        "continuousSubarrays(nums = [1,1,1,1,2])",
        "continuousSubarrays([1, 3, 1, 4, 1, 1, 5])"
    ],
    "sample_8": [
        "colorTheArray(n = 4, queries = [[0, 1], [2, 0], [1, 2], [2, 1]])",
        "colorTheArray(n = 4, queries = [[1,1],[2,1],[2,2]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 1], [1, 2], [1, 1]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 1], [3, 1], [1, 2], [2, 2]])",
        "colorTheArray(n = 7, queries = [[1, 2], [1, 2], [3, 2]])",
        "colorTheArray(n = 3, queries = [[2, 1], [0, 1], [1, 2]])",
        "colorTheArray(n = 5, queries = [[1, 0], [2, 1], [2, 1], [4, 0], [3, 1]])",
        "colorTheArray(n = 7, queries = [[1, 1],[2, 1],[3, 1],[4, 1],[5, 1],[6, 1],[7, 0]])",
        "colorTheArray(n = 3, queries = [[2,1],[3,1],[0,1],[2,2]])",
        "colorTheArray(n = 6, queries = [[1, 0], [2, 1], [3, 0], [4, 0], [3, 2], [4, 1]])"
    ],
    "sample_97": [
        "maximumJumps(nums = [2,3,1,1,4], target = 1)",
        "maximumJumps(nums = [2,3,1,1,4], target = 1)",
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [3,2,1,0,4], target = 3)",
        "maximumJumps(nums = [1,2,3,4,5,6,7,8,9,10], target = 2)",
        "maximumJumps(nums = [1,2,3,4,5,6,7,8,9,10], target = 7)",
        "maximumJumps(nums = [4, 2, 3, 0, 3, 1, 2], target = 1)",
        "maximumJumps(nums = [3,5,8,9,2,5,7], target = 3)",
        "maximumJumps(nums = [1,1,2,1,0,0,1,1,1,1], target = 2)"
    ],
    "sample_22": [
        "minLength(\"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"abcde\")",
        "minLength(\"ABA\")",
        "minLength(\"ab\")",
        "minLength(s = \"ABCB\")",
        "minLength(\"AABBCCD\")",
        "minLength(s = \"bacb\")",
        "minLength(s = \"abcdefghijk\")",
        "minLength(\"ab\")"
    ],
    "sample_7": [
        "colorTheArray(n = 3, queries = [[-1, 1]])",
        "colorTheArray(n = 5, queries = [[1,3],[2,3],[4,3]])",
        "colorTheArray(n = 6, queries = [[1, 2], [3, 5], [4, 5]])",
        "colorTheArray(n = 3, queries = [[1,2],[1,3],[2,1]])",
        "colorTheArray(n = 6, queries = [[1, 2], [2, 3], [3, 4], [2, 3]])",
        "colorTheArray(n = 4, queries = [[1,1], [1,2], [3,3]])",
        "colorTheArray(n = 4, queries = [[1, 2], [1, 1], [2, 1], [1, 2]])",
        "colorTheArray(n = 3, queries = [[0, 0], [1, 1], [1, 2], [2, 2]])",
        "colorTheArray(n = 5, queries = [[-1, 1], [2, 0], [2, 1], [4, 2], [-1, 2]])",
        "colorTheArray(n = 4, queries = [[0,3],[1,2],[0,3],[3,0],[1,2],[2,3]])"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[0, 1], [2, 1], [3, 0], [4, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [4, 1], [2, 2]])",
        "colorTheArray(n = 5, queries = [[0, 0], [3, 0], [3, 1], [1, 2], [2, 4], [4, 4]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [4, 1], [3, 2], [2, 2], [2, 3]])",
        "colorTheArray(n = 5, queries = [[1,2], [3,5], [4,5], [2,3]])",
        "colorTheArray(n = 5, queries = [[2, 0], [1, 1], [3, 2], [2, 4], [4, 4]])",
        "colorTheArray(n = 6, queries = [[3, 1], [4, 2], [4, 1], [1, 3], [2, 5]])",
        "colorTheArray(n = 6, queries = [[1,2],[1,3],[2,3],[4,4],[4,5],[5,5]])",
        "colorTheArray(n = 6, queries = [[2, 0], [1, 1], [3, 0], [5, 0], [6, 1]])",
        "colorTheArray(n = 4, queries = [[1, 1], [3, 1], [4, 1], [4, 2], [5, 2], [7, 2]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation(nums = [1,3,2])",
        "semiOrderedPermutation(nums = [0,1,2])",
        "semiOrderedPermutation(nums = [2,3,1])",
        "semiOrderedPermutation(nums = [2,1,2])",
        "semiOrderedPermutation(nums = [0, 1, 2, 3])",
        "semiOrderedPermutation(nums = [4,2,3,1])",
        "semiOrderedPermutation(nums = [3,1,1,2])",
        "semiOrderedPermutation(nums = [2,4,1])",
        "semiOrderedPermutation(nums = [3,3,1,1])"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 4, 2, 3, 1], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 4, 5, 7, 9], threshold = 4)",
        "longestAlternatingSubarray(nums = [0,1,0,1,0,1,1,0], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,3,5,2,4,6,7,8], threshold = 3)",
        "longestAlternatingSubarray(nums = [2, 1, 3, 2, 4, 3, 4], threshold = 4)",
        "longestAlternatingSubarray(nums = [0, 1, 0, 3, 2, 0, 1], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 4, 2, 9, 7, 5], threshold = 7)",
        "longestAlternatingSubarray(nums = [1, 3, -1, -3, 3, 5, -1, -3], threshold = 3)"
    ],
    "sample_33": [
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"12301\")",
        "removeTrailingZeros(num = \"12301\")",
        "removeTrailingZeros(\"512301\")",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '123000')",
        "removeTrailingZeros(num = \"500\")",
        "removeTrailingZeros(num = \"120000512301\")",
        "removeTrailingZeros(num = \"40000\")"
    ],
    "sample_50": [
        "smallestString(s = \"abaaab\")",
        "smallestString(s = \"baabaa\")",
        "smallestString(\"ababa\")",
        "smallestString(s = 'baaab')",
        "smallestString(s = \"aaabb\")",
        "smallestString(s = \"ababaaa\")",
        "smallestString(s = \"abc\")",
        "smallestString(s = \"aaa\")",
        "smallestString(s = \"abcd\")",
        "smallestString(\"bbaaaaaa\")"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [4, 2, 2, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6])",
        "distinctDifferenceArray(nums = [-1, 2, 3, 1])",
        "distinctDifferenceArray(nums = [-1, -3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 4, 7])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1, 1])",
        "distinctDifferenceArray(nums = [1, 4, 2, 4, 6])",
        "distinctDifferenceArray(nums = [2, 2, 4, 4, 5, 6, 7])"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 5, additionalTank = 4)",
        "distanceTraveled(mainTank = 3, additionalTank = 5)",
        "distanceTraveled(mainTank = 4, additionalTank = 10)",
        "distanceTraveled(mainTank = 6, additionalTank = 4)",
        "distanceTraveled(mainTank = 5, additionalTank = 6)",
        "distanceTraveled(mainTank = 8, additionalTank = 4)",
        "distanceTraveled(mainTank = 10, additionalTank = 6)",
        "distanceTraveled(mainTank = 3, additionalTank = 10)",
        "distanceTraveled(mainTank = 11, additionalTank = 3)",
        "distanceTraveled(mainTank = 0, additionalTank = 0)"
    ],
    "sample_118": [
        "minimumIndex(nums = [1, 1, 2])",
        "minimumIndex(nums = [2, 2, 3, 2])",
        "minimumIndex(nums = [1, 2, 2, 3, 4, 2])",
        "minimumIndex(nums = [2, 2, 1, 1, 1, 3])",
        "minimumIndex(nums = [1, 3, 3, 3, 2, 3])",
        "minimumIndex([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "minimumIndex(nums = [4,1,4,2,4,4])",
        "minimumIndex(nums = [1, 1, 3, 4, 4, 3, 1])",
        "minimumIndex(nums = [5, 5, 1, 3, 5, 1, 1])",
        "minimumIndex(nums = [2, 2, 4, 2, 5, 4, 5, 1])"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [12, 34, 56, 78, 90])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56, 67, 78, 89])",
        "countBeautifulPairs(nums = [12, 21, 3])",
        "countBeautifulPairs(nums = [123, 321, 312])",
        "countBeautifulPairs(nums = [10, 10, 2, 20])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56, 67, 78, 89, 91, 99])",
        "countBeautifulPairs(nums = [6, 1, 8, 2, 7])",
        "countBeautifulPairs(nums = [13, 10, 5, 12, 21])",
        "countBeautifulPairs(nums = [12, 21, 43, 56, 72, 83])",
        "countBeautifulPairs(nums = [19, 21, 34, 19, 11])"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"12301\")",
        "removeTrailingZeros(num = '12301')",
        "removeTrailingZeros(num = \"12301\")",
        "removeTrailingZeros(num = '123000')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = '12000')",
        "removeTrailingZeros(\"12345000\")",
        "removeTrailingZeros(num = \"550011\")",
        "removeTrailingZeros(num = '12000003')"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"ab\")",
        "minimizedStringLength(s = \"a\")",
        "minimizedStringLength(s = \"abcd\")",
        "minimizedStringLength(s = \"aaab\")",
        "minimizedStringLength(s = \"pqr\")",
        "minimizedStringLength(\"abcccccaaa\")",
        "minimizedStringLength(\"ababaa\")",
        "minimizedStringLength(s = \"cccbb\")",
        "minimizedStringLength(\"sas\")",
        "minimizedStringLength(\"pppppppppp\")"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 3)",
        "maximumBeauty(nums = [1, 2, 4], k = 1)",
        "maximumBeauty(nums = [1,3,4,2], k = 1)",
        "maximumBeauty(nums = [1, 5, 3, 4, 6], k = 1)",
        "maximumBeauty(nums = [1, 4, 10, 9], k = 3)",
        "maximumBeauty(nums = [3, 5, 7, 10, 11], k = 2)",
        "maximumBeauty(nums = [1, 2, 5, 10, 3], k = 1)",
        "maximumBeauty(nums = [1, 3, 4, 5, 7, 9, 10, 12], k = 3)",
        "maximumBeauty(nums = [5, 2, 7, 4, 2, 6, 5, 3, 6], k = 1)"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 123, num2 = 321)",
        "makeTheIntegerZero(num1 = 0, num2 = 1)",
        "makeTheIntegerZero(num1 = 6, num2 = 9)",
        "makeTheIntegerZero(num1 = 7, num2 = 13)",
        "makeTheIntegerZero(num1 = 7, num2 = 10)",
        "makeTheIntegerZero(num1 = 15, num2 = 10)",
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 123456, num2 = 987654321)",
        "makeTheIntegerZero(num1 = 256, num2 = 2)"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 4, 3, 2])",
        "findValueOfPartition(nums = [1,2,3,4])",
        "findValueOfPartition(nums = [1, 3])",
        "findValueOfPartition(nums = [1, 4, 3, 1])",
        "findValueOfPartition(nums = [1, 3, 2, 1])",
        "findValueOfPartition(nums = [3, 4, 2, 1])",
        "findValueOfPartition(nums = [3, 4, 2, 1, 2])",
        "findValueOfPartition(nums = [0, 1, 4, 7, 1, 2, 7])",
        "findValueOfPartition(nums = [8, 4, 2, 5, 1, 7, 6, 3])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 4, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 2)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 7, additionalTank = 1)",
        "distanceTraveled(mainTank = 8, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 6)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0,1,1,1])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1])"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(\"eve\")",
        "makeSmallestPalindrome(s = \"deified\")",
        "makeSmallestPalindrome(s = \"edcba\")",
        "makeSmallestPalindrome(s = 'not')",
        "makeSmallestPalindrome(s = \"deed\")",
        "makeSmallestPalindrome(s = \"hello\")",
        "makeSmallestPalindrome(\"abcde\")"
    ],
    "sample_110": [
        "checkArray(nums = [3, 2, 1, 2, 3], k = 3)",
        "checkArray(nums = [0, 0, 0, 0], k = 2)",
        "checkArray(nums = [1, -1], k = 1)",
        "checkArray(nums = [1, 2, 3, 4], k = 1)",
        "checkArray(nums = [0, 2, 3, 1], k = 2)",
        "checkArray(nums = [1,2,-3,4,5], k = 2)",
        "checkArray(nums = [1, 2, -3, 4, 5, -6, 7, 8, 9], k = 3)",
        "checkArray(nums = [2, -3, 3, -3], k = 3)",
        "checkArray(nums = [10, 9, 3, 7, 6, 1], k = 3)",
        "checkArray(nums = [4, 3, 2, 1, 0, 2], k = 3)"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [2, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0,1,0,0,1])",
        "doesValidArrayExist(derived = [2, 3, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [3, 2, 0, 2, 1, 2])",
        "doesValidArrayExist(derived = [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1])"
    ],
    "sample_54": [
        "smallestString(\"banana\")",
        "smallestString(s = \"aaaaa\")",
        "smallestString(s = \"bannana\")",
        "smallestString(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "smallestString(\"abaaaab\")",
        "smallestString(s = \"abaz\")",
        "smallestString(s = \"acb\")",
        "smallestString(\"accde\")",
        "smallestString(s = \"abdababab\")",
        "smallestString(\"abcd\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1,1,1,2,2,3])",
        "continuousSubarrays(A = [1,2,3,4,5])",
        "continuousSubarrays(A = [1, 1, 2, 2, 2])",
        "continuousSubarrays(A = [1,3,2,2,3,1])",
        "continuousSubarrays(A = [1, 1, 2, 2, 2, 3])",
        "continuousSubarrays(A = [1, 2, 1, 3, 2])",
        "continuousSubarrays(A = [2, 2, 1, 1, 2])",
        "continuousSubarrays(A = [0, 1, 0, 1])",
        "continuousSubarrays(A = [4, -1, -4, 1, -4])",
        "continuousSubarrays(A = [1,2,1,2,1,3,4,2,2,2,1])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = 'abcba')",
        "makeSmallestPalindrome(\"aaabb\")",
        "makeSmallestPalindrome(\"babb\")",
        "makeSmallestPalindrome(s = \"cab\")",
        "makeSmallestPalindrome(s = \"abacdfgdcaba\")",
        "makeSmallestPalindrome(s = \"aac\")",
        "makeSmallestPalindrome(\"gcc\")"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 3, 1])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 4, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 1])",
        "findValueOfPartition(nums = [1,2,3,4])",
        "findValueOfPartition(nums = [4, 5, 0, 3, 1])",
        "findValueOfPartition(nums = [10, 2])",
        "findValueOfPartition(nums = [1, 2, 3, 5, 4])",
        "findValueOfPartition(nums = [1, 3, 4, 5, 6])"
    ],
    "sample_51": [
        "smallestString(s = \"abcd\")",
        "smallestString(s = \"abcd\")",
        "smallestString(s = 'abcd')",
        "smallestString('kdsbncd')",
        "smallestString(s = \"aabc\")",
        "smallestString(\"aaabbaa\")",
        "smallestString('ababab')",
        "smallestString('acb')",
        "smallestString(s = \"a\")",
        "smallestString(\"a\")"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4], k = 1)",
        "maximumBeauty(nums = [1, 4, 2, 3], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "maximumBeauty(nums = [1, 3, 3, 4, 3, 2], k = 1)",
        "maximumBeauty(nums = [3,1,5,2,3], k = 1)",
        "maximumBeauty(nums = [1, 3, 2, 2, 4], k = 2)",
        "maximumBeauty(nums = [5, 2, 3, 4], k = 3)",
        "maximumBeauty([1,1,2,2,2], 2)",
        "maximumBeauty(nums = [1,3,3,4,5,5,6,6,8], k = 1)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [4, 2, 3], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "checkArray(nums = [1, -1, -1, 1], k = 2)",
        "checkArray(nums = [10, 20, 30, 40], k = 2)",
        "checkArray(nums = [10, 9, 2, 5, 3, 7, 101, 18], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 4)",
        "checkArray(nums = [2,2,3,4,3], k = 3)",
        "checkArray(nums = [2, 3, 3, 4, 5, 3], k = 2)",
        "checkArray(nums = [1,2,3,4], k = 3)"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 5, additionalTank = 5)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 8, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 4)",
        "distanceTraveled(mainTank = 4, additionalTank = 7)",
        "distanceTraveled(mainTank = 1, additionalTank = 3)"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1])",
        "distinctDifferenceArray(nums = [1,2,3,4,5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [0, 1, 2, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "distinctDifferenceArray(nums = [5, 1, 3, 2, 5])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1, 2, 2, 3, 1])",
        "continuousSubarrays(A = [1,1,1,2,2,3])",
        "continuousSubarrays(A = [1, 2, 3, 1])",
        "continuousSubarrays(A = [1,3,2,2,5,2])",
        "continuousSubarrays(A = [0,0,1,0,0,0])",
        "continuousSubarrays(A = [1, 0, 1, 1, 0])",
        "continuousSubarrays(A = [0, 1, 0, 0, 1])",
        "continuousSubarrays(A = [0,1,0,2,2,2,1,1,1,2,2,2])",
        "continuousSubarrays(A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])",
        "continuousSubarrays(A = [1, 2, 1, 2, 1, 1, 3, 1, 2, 1, 2, 1, 1, 1, 1, 1])"
    ],
    "sample_6": [
        "colorTheArray(n = 4, queries = [[0,1],[1,2],[2,0],[2,3]])",
        "colorTheArray(n = 6, queries = [[1,2], [2,2], [2,3]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [0, 3], [1, 4]])",
        "colorTheArray(n=3, queries=[[0,0],[1,1],[2,1],[1,1],[2,0]])",
        "colorTheArray(n = 3, queries = [[0,0],[0,1],[1,1],[1,2],[0,0],[2,2]])",
        "colorTheArray(n=3, queries=[[0,0],[1,1],[2,1],[0,1],[1,2],[0,2]])",
        "colorTheArray(n = 6, queries = [[0,3],[1,1],[2,3],[4,2],[3,4]])",
        "colorTheArray(n = 8, queries = [[2,5],[1,2],[2,6],[5,6]])",
        "colorTheArray(n=5, queries=[[3,2,1],[1,1,1],[4,3,2],[2,2,2]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,2],[2,3],[1,3],[1,0],[2,0],[3,0],[3,1],[3,2],[3,3]])"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 5, b = 3)",
        "makeTheIntegerZero(a = 9, b = 3)",
        "makeTheIntegerZero(a = 12, b = 4)",
        "makeTheIntegerZero(a = 123, b = 456)",
        "makeTheIntegerZero(a = 2, b = 4)",
        "makeTheIntegerZero(a = 23, b = 7)",
        "makeTheIntegerZero(a = 12, b = 12)",
        "makeTheIntegerZero(a = 0b11, b = 0b10)",
        "makeTheIntegerZero(a = 41, b = 9)"
    ],
    "sample_100": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [2,3,1,1,4], target = 1)",
        "maximumJumps(nums = [3, 2, 1, 0, 4], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 5, 3, 4, 2], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 6, 7], target = 2)",
        "maximumJumps(nums = [0,1,2,3,4,5], target = 2)",
        "maximumJumps(nums = [4,2,0,3,1,2], target = 2)",
        "maximumJumps(nums = [1,3,5,6,7,8,9,10], target = 3)",
        "maximumJumps(nums = [0,3,1,1,4,2,0], target = 1)"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 1, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8], threshold = 6)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8], threshold = 6)",
        "longestAlternatingSubarray(nums = [3, 1, 4, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], threshold = 3)",
        "longestAlternatingSubarray(nums = [5,4,4,3,4,4], threshold = 4)",
        "longestAlternatingSubarray(nums = [1,4,5,7,2,3,6,7,8,9], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 3, 1, 2, 3, 5, 4, 3], threshold = 5)"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1,2,3], b = [1,2,3])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [5, 4, 3, 2, 1])",
        "maxNonDecreasingLength(a = [3, 4, 2, 1], b = [3, 4, 2, 1])",
        "maxNonDecreasingLength(a = [1,2,2,3], b = [1,1,2,2])",
        "maxNonDecreasingLength(a = [4, 3, 5, 4], b = [1, 2, 4, 5])",
        "maxNonDecreasingLength(a = [1, 2, 2, 3, 4, 5], b = [1, 1, 2, 2, 5, 6])",
        "maxNonDecreasingLength(a = [1,2,4,4,3,2,1], b = [1,2,4,4,3,2,1])",
        "maxNonDecreasingLength(a = [5, 2, 4, 1, 6, 3], b = [2, 3, 5, 1, 9, 4])",
        "maxNonDecreasingLength(a = [4, 8, 9, 9, 2, 3, 3, 4, 4, 5], b = [3, 3, 8, 9, 6, 6, 1, 1, 7, 7])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,0])",
        "numberOfGoodSubarraySplits([1,2,0,1])"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5], threshold = 1)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5], threshold = 2)",
        "longestAlternatingSubarray(nums = [3, 1, 4, 2, 3], threshold = 1)",
        "longestAlternatingSubarray(nums = [3, 2, 3], threshold = 2)",
        "longestAlternatingSubarray(nums = [7, 3, 5, 4], threshold = 2)",
        "longestAlternatingSubarray(nums = [4,2,6,8,10,4], threshold = 4)",
        "longestAlternatingSubarray(nums = [3,5,3,7,8,2,2,2,2,4,5], threshold = 1)"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 3, 1])",
        "findValueOfPartition(nums = [4, 2, 3, 1])",
        "findValueOfPartition(nums = [1, 3, 4, 2])",
        "findValueOfPartition(nums = [2, 4, 1, 3])",
        "findValueOfPartition(nums = [1,3,1])",
        "findValueOfPartition(nums = [5, 1, 3, 4, 2])",
        "findValueOfPartition(nums = [3, 5, 8, 4])",
        "findValueOfPartition([2, 3, 4, 5, 1])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(\"abcd\")",
        "makeSmallestPalindrome(s = 'ab')",
        "makeSmallestPalindrome(s = \"racecar\")",
        "makeSmallestPalindrome(s = \"abcba\")",
        "makeSmallestPalindrome(s = 'ab')",
        "makeSmallestPalindrome(\"abac\")"
    ],
    "sample_18": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(\"ABCD\")",
        "minLength(\"ABCD\")",
        "minLength(s = \"ABC\")",
        "minLength(\"abcd\")",
        "minLength(s = \"AABA\")",
        "minLength(s = \"CBA\")",
        "minLength(s = \"AAAABB\")",
        "minLength(s = \"abababcdcd\")"
    ],
    "sample_99": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [2,3,1,1,4], target = 1)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [1, 1, 1], target = 1)",
        "maximumJumps(nums = [1, 1, 1, 1, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [5, 3, 2, 1, 4], target = 1)",
        "maximumJumps(nums = [1,3,6,7,9,11], target = 4)",
        "maximumJumps(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], target = 3)",
        "maximumJumps(nums = [2,1,1,3,1], target = 1)"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 3], [2, 5]])",
        "colorTheArray(n = 5, queries = [[1,2],[2,3]])",
        "colorTheArray(n = 3, queries = [[1, 2], [2, 3], [3, 1]])",
        "colorTheArray(n = 5, queries = [[1,2], [2,3], [3,4]])",
        "colorTheArray(n = 4, queries = [[1,1],[2,2],[2,2],[4,4]])",
        "colorTheArray(n = 5, queries = [[2, 2], [4, 2], [4, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1],[1, 4],[4, 0],[0, 2]])",
        "colorTheArray(n = 5, queries = [[1, 3], [2, 3], [3, 3], [3, 4], [3, 5], [4, 5], [5, 6]])",
        "colorTheArray(n = 6, queries = [[2,4],[3,3],[3,6],[3,2],[3,4]])",
        "colorTheArray(n = 5, queries = [[0,1],[3,4],[3,4],[3,4],[3,4],[1,2],[2,3],[1,2]])"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 4, additionalTank = 3)",
        "distanceTraveled(mainTank = 3, additionalTank = 3)",
        "distanceTraveled(mainTank=3, additionalTank=2)",
        "distanceTraveled(mainTank=4, additionalTank=1)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank=1, additionalTank=1)",
        "distanceTraveled(mainTank = 10, additionalTank = 10)",
        "distanceTraveled(mainTank = 0, additionalTank = 1)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [12, 23, 34, 45])",
        "countBeautifulPairs(nums = [11, 22, 33, 44, 55])",
        "countBeautifulPairs(nums = [2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1,2,3,4,5,6])",
        "countBeautifulPairs(nums = [12, 34, 5, 19])",
        "countBeautifulPairs(nums = [3, 2, 1, 4])",
        "countBeautifulPairs(nums = [3, 2, 5, 7])",
        "countBeautifulPairs(nums = [12, 13, 21, 2, 10])",
        "countBeautifulPairs(nums = [8, 1, 2, 7, 10])",
        "countBeautifulPairs(nums = [12, 31, 21, 31, 11, 22])"
    ],
    "sample_56": [
        "minCost(A = [1,2,3,4,5], x = 2)",
        "minCost(A = [4, 5, 6], x = 3)",
        "minCost(A = [2,4,6], x = 2)",
        "minCost(A = [1, 3, 10, 3, 1], x = 3)",
        "minCost(A = [2, 5, 2, 2], x = 3)",
        "minCost([1,3,5], 1)",
        "minCost(A = [5, 2, 4, 8, 10], x = 3)",
        "minCost(A = [6, 2, 4, 3, 8, 5, 7, 1], x = 2)",
        "minCost(A = [10, 4, 8, 3, 1], x = 3)",
        "minCost(A = [3, 4, 2, 1, 5, 6, 8, 5, 4, 6, 8, 2], x = 3)"
    ],
    "sample_98": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 1)",
        "maximumJumps(nums = [1, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [4,2,1,0,3], target = 1)",
        "maximumJumps(nums = [2, 4, 1, 3, 5], target = 3)",
        "maximumJumps(nums = [1,5,3,2,4], target = 2)",
        "maximumJumps(nums = [1, 5, 10], target = 9)",
        "maximumJumps(nums = [1, 3, 6, 8, 9, 2, 4, 7, 5], target = 3)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [2, 3, 1, 5])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1, 1, 2])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 1, 2, 3])",
        "distinctDifferenceArray(nums = [1,2,1,3,2])",
        "distinctDifferenceArray(nums = [-3, -1, 0, 1, 2])",
        "distinctDifferenceArray(nums = [1,2,1,3,3,4])",
        "distinctDifferenceArray(nums = [2, 1, 2, 5, 3, 2])",
        "distinctDifferenceArray(nums = [3, 4, 9, 5])",
        "distinctDifferenceArray(nums = [2, 3, 7, 5, 3])",
        "distinctDifferenceArray(nums = [3,2,1,2,3,4,3,4,5,6,4,5])"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6])",
        "countBeautifulPairs(nums = [10, 11, 12])",
        "countBeautifulPairs(nums = [11,22,33,44,55,66,77,88,99])",
        "countBeautifulPairs(nums = [2, 4, 5, 6, 8])",
        "countBeautifulPairs([123, 321, 12, 21])",
        "countBeautifulPairs(nums = [22, 22, 22])",
        "countBeautifulPairs(nums = [123, 321, 12, 21, 345])",
        "countBeautifulPairs(nums = [19, 21, 26, 30])",
        "countBeautifulPairs(nums = [12, 1, 12, 14, 12, 5, 8, 10])"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(\"banana\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"python\")",
        "minimizedStringLength(s = \"bbaa\")",
        "minimizedStringLength(s = \"abcdefgh\")",
        "minimizedStringLength(s = \"aabcdef\")",
        "minimizedStringLength(\"babad\")",
        "minimizedStringLength(\"abccccddddeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",
        "minimizedStringLength(s = \"wds\")"
    ],
    "sample_41": [
        "minimumCost(s = \"abca\")",
        "minimumCost(\"abab\")",
        "minimumCost(s = \"leetcode\")",
        "minimumCost(s = \"bbaab\")",
        "minimumCost(\"abaa\")",
        "minimumCost(\"ababcd\")",
        "minimumCost(\"aaab\")",
        "minimumCost(s = \"ababcbab\")",
        "minimumCost(s = \"aaaaaa\")",
        "minimumCost(s = \"AABBCCDD\")"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 1, 2])",
        "distinctDifferenceArray(nums = [1, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 1, 2, 3])",
        "distinctDifferenceArray(nums = [3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 4, 3])",
        "distinctDifferenceArray(nums = [1,2,1,3,4,3])",
        "distinctDifferenceArray(nums = [0, 1, 2, 2, 3, 0])",
        "distinctDifferenceArray([1,2,3,1])",
        "distinctDifferenceArray(nums = [1,2,2,1,1,3])",
        "distinctDifferenceArray(nums = [0, 1, 1, 2, 3])"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [1, 2, 3])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "doesValidArrayExist(derived = [1,0,0,1])",
        "doesValidArrayExist(derived = [1, 3, 5, 7, 9])",
        "doesValidArrayExist(derived = [1, 3, 2, 1])",
        "doesValidArrayExist(derived = [0, 1, 2, 3, 4, 5, 6])",
        "doesValidArrayExist(derived = [1, 1, 1, 2, 2, 3, 4])",
        "doesValidArrayExist(derived = [4, 4, 5, 6, 6, 7])",
        "doesValidArrayExist(derived = [1, 2, 3, 4])",
        "doesValidArrayExist(derived = [1,2,3])"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0, 1, 2])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 2, 3, 4])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 1])",
        "doesValidArrayExist(derived = [3, 1, 2])",
        "doesValidArrayExist(derived = [1,2,3,4,5])",
        "doesValidArrayExist(derived = [0, 0, 0, 1, 1, 1])"
    ],
    "sample_52": [
        "smallestString(\"abcd\")",
        "smallestString('abracadabra')",
        "smallestString(s = \"abac\")",
        "smallestString('abcbac')",
        "smallestString(s = \"aaaaaaaa\")",
        "smallestString(s = \"ababcad\")",
        "smallestString(s = 'kddsaasbcd')",
        "smallestString(s = \"a\")",
        "smallestString(s = 'aaa')",
        "smallestString(\"abcd\")"
    ],
    "sample_40": [
        "minimumCost(s = \"abcabcbb\")",
        "minimumCost(s = \"abcabcbb\")",
        "minimumCost(s = \"abcabcbb\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(\"abcd\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(\"abcde\")",
        "minimumCost(s = \"babab\")",
        "minimumCost(\"cab\")",
        "minimumCost(\"aaaa\")"
    ],
    "sample_38": [
        "minimumCost(s = \"aab\")",
        "minimumCost(\"abab\")",
        "minimumCost(\"abcd\")",
        "minimumCost(\"abcd\")",
        "minimumCost(\"aab\")",
        "minimumCost(s = \"abca\")",
        "minimumCost(s = \"abcbc\")",
        "minimumCost(s = \"abacd\")",
        "minimumCost(s = \"aaa\")",
        "minimumCost(s = \"mmn\")"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 1])",
        "distinctDifferenceArray(nums = [5, 4, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3])",
        "distinctDifferenceArray(nums = [0, 1, 2])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4, 5])",
        "distinctDifferenceArray(nums = [4, 2, 2, 2, 1])",
        "distinctDifferenceArray(nums = [1,2,3,2,4])",
        "distinctDifferenceArray(nums = [4, 3, 2, 7, 5, 2, 1])",
        "distinctDifferenceArray(nums = [1,2,3,1,2,3,4,1,2,3])"
    ],
    "sample_53": [
        "smallestString(s = \"baabc\")",
        "smallestString(s = \"abcd\")",
        "smallestString(\"abcd\")",
        "smallestString(\"abcd\")",
        "smallestString(s = \"banana\")",
        "smallestString(\"banana\")",
        "smallestString(\"abac\")",
        "smallestString(s = \"abacab\")",
        "smallestString(\"cabcd\")",
        "smallestString(s = \"aaazxxc\")"
    ],
    "sample_109": [
        "checkArray(nums = [1,2,3,4], k = 2)",
        "checkArray(nums = [1,2,3,4,5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 4, 2, 1], k = 2)",
        "checkArray(nums = [5, 4, 3, 2, 1], k = 4)",
        "checkArray(nums = [1, 3, 7, 9, 11], k = 3)",
        "checkArray(nums = [4,1,3,4], k = 1)",
        "checkArray(nums = [1, 2, 3, 4], k = 1)",
        "checkArray(nums = [2,5,2,1,3], k = 1)",
        "checkArray([3, 1, 4, 1], k = 1)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [2, 1, 5, 4, 3], k = 1)",
        "maximumBeauty(nums = [1, 3, -1, -3, 5, 3, 6, 7], k = 3)",
        "maximumBeauty(nums = [1, 2, 1, 2, 2], k = 1)",
        "maximumBeauty(nums = [2,1,2,3,3,4], k = 1)",
        "maximumBeauty(nums = [4, 6, 2, 3, 1], k = 2)",
        "maximumBeauty(nums = [1, 1, 1, 1, 1], k = 0)",
        "maximumBeauty(nums = [1,4,3,6,7,2,5], k = 2)",
        "maximumBeauty(nums = [3, 7, 5, 4, 9, 7, 2], k = 2)",
        "maximumBeauty(nums = [10, 15, 7, 20, 5, 25], k = 3)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1,2,3,4,5])",
        "distinctDifferenceArray(a = [1,2,3])",
        "distinctDifferenceArray(a = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])",
        "distinctDifferenceArray(a = [2, 3, 2])",
        "distinctDifferenceArray(a = [1, 3, 5, 6])",
        "distinctDifferenceArray(a = [1,2,2,3,3,3])",
        "distinctDifferenceArray(a = [1, 2, 1, 2, 1, 2, 1])",
        "distinctDifferenceArray(a = [3, 4, 2, 3, 5])",
        "distinctDifferenceArray(a = [1, 4, 5, 2, 2])"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '512301')",
        "removeTrailingZeros(a = \"512301\")",
        "removeTrailingZeros(a = \"512301\")",
        "removeTrailingZeros(\"512301\")",
        "removeTrailingZeros(a = '12301')",
        "removeTrailingZeros(a = \"12301\")",
        "removeTrailingZeros(a = \"12301000\")",
        "removeTrailingZeros(a = \"12340\")",
        "removeTrailingZeros(a = '54230001')",
        "removeTrailingZeros(a = '1234030')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = \"eve\")",
        "makeSmallestPalindrome(s = \"aacecaaa\")",
        "makeSmallestPalindrome(s = \"aabb\")",
        "makeSmallestPalindrome(s = \"eve\")",
        "makeSmallestPalindrome(s = 'aace')",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = \"abcdefg\")",
        "makeSmallestPalindrome(s = 'abcdef')",
        "makeSmallestPalindrome(\"aacecaaa\")",
        "makeSmallestPalindrome(\"deeee\")"
    ],
    "sample_55": [
        "smallestString(s = \"abcd\")",
        "smallestString(s = \"abc\")",
        "smallestString(s = 'a')",
        "smallestString(s = \"kddzbncd\")",
        "smallestString(s = \"kddd\")",
        "smallestString(\"abcdefg\")",
        "smallestString(\"axzzzzz\")",
        "smallestString(s = \"aazzzzzzzzzzzzzz\")",
        "smallestString(\"abcdef\")",
        "smallestString(s = 'kddfssbncd')"
    ],
    "sample_35": [
        "removeTrailingZeros(num = \"12301\")",
        "removeTrailingZeros(num = \"12301\")",
        "removeTrailingZeros(num = '12301')",
        "removeTrailingZeros(num = '12301')",
        "removeTrailingZeros(\"12301\")",
        "removeTrailingZeros(num = \"123000\")",
        "removeTrailingZeros(\"5123010\")",
        "removeTrailingZeros(\"1230100\")",
        "removeTrailingZeros(num = \"1203000\")",
        "removeTrailingZeros(num = '1234560000')"
    ],
    "sample_23": [
        "minLength(\"ABCD\")",
        "minLength(\"ABCD\")",
        "minLength(\"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(\"AABCD\")",
        "minLength(\"AABCD\")",
        "minLength(s=\"BABC\")",
        "minLength(\"ACAB\")",
        "minLength(s=\"AABB\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"12340\")",
        "removeTrailingZeros(num = '123000')",
        "removeTrailingZeros(num = \"150101\")"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 4, num2 = 2)",
        "makeTheIntegerZero(num1 = 13, num2 = 3)",
        "makeTheIntegerZero(num1 = 1000, num2 = 3)",
        "makeTheIntegerZero(num1 = 35, num2 = 7)",
        "makeTheIntegerZero(num1 = 13, num2 = 9)",
        "makeTheIntegerZero(num1 = 6, num2 = 6)",
        "makeTheIntegerZero(num1 = 31, num2 = 5)",
        "makeTheIntegerZero(num1 = 100, num2 = 97)"
    ],
    "sample_57": [
        "distanceTraveled(a = 3, b = 4)",
        "distanceTraveled(a = 4, b = 3)",
        "distanceTraveled(a = 10, b = 5)",
        "distanceTraveled(a = 10, b = 5)",
        "distanceTraveled(a = 5, b = 2)",
        "distanceTraveled(a = 2, b = 0)",
        "distanceTraveled(a = 1, b = 4)",
        "distanceTraveled(a = 1, b = 4)",
        "distanceTraveled(a = 2, b = 5)",
        "distanceTraveled(a = 8, b = 2)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [1,2,3,4], t = 4)",
        "longestAlternatingSubarray(nums = [1,2,3,4], t = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 5)",
        "longestAlternatingSubarray(nums = [1,0,0,0,0], t = 2)",
        "longestAlternatingSubarray(nums = [1, 4, 2, 6, 3], t = 3)",
        "longestAlternatingSubarray(nums = [10,2,3,4,5], t = 12)",
        "longestAlternatingSubarray(nums = [1,3,1,5,9,2,7], t = 4)",
        "longestAlternatingSubarray(nums = [5,7,4,2,8,1], t = 6)",
        "longestAlternatingSubarray(nums = [4, 8, 7, 3, 2, 3], t = 7)",
        "longestAlternatingSubarray(nums = [10, 7, 9, 6, 4, 6, 6, 7, 10, 4], t = 7)"
    ],
    "sample_102": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 1)",
        "maximumJumps(nums = [2,3,1,1,4], target = 3)",
        "maximumJumps(nums = [1, 2, 3], target = 3)",
        "maximumJumps(nums = [3, 5, 1, 2, 4], target = 1)",
        "maximumJumps(nums = [1, 3, 5, 9, 10], target = 2)",
        "maximumJumps(nums = [1, 3, 6, 7, 9, 11], target = 1)",
        "maximumJumps(nums = [3, 5, 1, 1, 9, 7, 5, 1, 1], target = 5)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"12301\")",
        "removeTrailingZeros(\"512301\")",
        "removeTrailingZeros(num = '12301')",
        "removeTrailingZeros(num = '50001')",
        "removeTrailingZeros(num = '123010000')",
        "removeTrailingZeros(num = \"1230123\")",
        "removeTrailingZeros(num = '20000')",
        "removeTrailingZeros(num = \"12000\")",
        "removeTrailingZeros(num = '6512000')"
    ],
    "sample_101": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [3, 2, 1, 0, 4], target = 3)",
        "maximumJumps(nums = [1, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [3, 4, 2, 1, 2, 3], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4], target = 3)",
        "maximumJumps(nums = [0, 1, 0, 0, 0], target = 2)",
        "maximumJumps(nums = [0, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [3, 6, 0, 9, 12], target = 3)",
        "maximumJumps(nums = [1, 0, 1], target = 1)",
        "maximumJumps(nums = [3, 6, 0, 9, 3, 0], target = 3)"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0,1,0,1])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0, 0, 0, 0, 0])",
        "doesValidArrayExist(derived = [0, 0, 1, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 0, 0, 1, 0, 1, 1])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 2])",
        "numberOfGoodSubarraySplits(nums = [1, 2, 3])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 0, 1, 1, 1, 0, 1])"
    ],
    "sample_19": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = 'ABCD')",
        "minLength(s = 'ABCD')",
        "minLength(s = \"ABC\")",
        "minLength(s = \"ABA\")",
        "minLength(\"AABCD\")",
        "minLength(\"ABABC\")",
        "minLength(\"GCDATABAC\")",
        "minLength(s = \"a\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(\"eve\")",
        "makeSmallestPalindrome(\"neven\")",
        "makeSmallestPalindrome(\"eve\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"aabb\")",
        "makeSmallestPalindrome(\"not\")",
        "makeSmallestPalindrome(s = \"code\")",
        "makeSmallestPalindrome(s = \"din\")",
        "makeSmallestPalindrome(\"stackexchange\")",
        "makeSmallestPalindrome(s = \"ab\")"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [1,2,3,4])",
        "semiOrderedPermutation(nums = [1,3,2])",
        "semiOrderedPermutation(nums = [2,1,3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [2,1,2])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4])",
        "semiOrderedPermutation(nums = [0,1,2,3,4])",
        "semiOrderedPermutation(nums = [1, 2, 0])",
        "semiOrderedPermutation(nums = [2, 3, 1, 1, 2])"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,1,0,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,1,0,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,0,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 0, 0, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,0,0,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,1,0,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 1, 1, 0, 1, 0])"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 3, 2, 4], k = 1)",
        "maximumBeauty(nums = [2,3,1,4], k = 1)",
        "maximumBeauty(nums = [3,5,2,4], k = 1)",
        "maximumBeauty(nums = [1, 3, 6, 2, 4], k = 3)",
        "maximumBeauty(nums = [2, 4, 5, 6], k = 2)",
        "maximumBeauty(nums = [3, 1, 2, 4, 6, 5], k = 1)",
        "maximumBeauty(nums = [1,4,7,10,11,16], k = 3)",
        "maximumBeauty(nums = [1, 3, 1, 5, 2, 6, 3, 5], k = 2)",
        "maximumBeauty(nums = [1, 7, 4, 2, 10, 7, 6, 2], k = 3)",
        "maximumBeauty(nums = [0, 5, 3, 3, 2, 7, 8, 1], k = 3)"
    ],
    "sample_117": [
        "minimumIndex(nums = [1, 2, 2, 3, 1])",
        "minimumIndex(nums = [1, 2, 3, 2])",
        "minimumIndex(nums = [2, 1, 2])",
        "minimumIndex(nums = [1, 2, 3, 3])",
        "minimumIndex(nums = [1,2,1,3,2])",
        "minimumIndex(nums = [0, 1, 2, 2, 2, 3, 4])",
        "minimumIndex(nums = [3,1,3,2,1])",
        "minimumIndex(nums = [0,0,2,2])",
        "minimumIndex(nums = [1,1,2,1,3,1])",
        "minimumIndex(nums = [3, 3, 3, 5, 2, 3])"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 3)",
        "makeTheIntegerZero(num1 = 11, num2 = 3)",
        "makeTheIntegerZero(num1 = 11, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 100, num2 = 3)",
        "makeTheIntegerZero(num1 = 23, num2 = 10)",
        "makeTheIntegerZero(num1 = 1001, num2 = 2)",
        "makeTheIntegerZero(num1 = 0b101, num2 = 0b001)"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [12, 23, 34, 45])",
        "countBeautifulPairs(nums = [10,11,12,13,14,15])",
        "countBeautifulPairs(nums = [12, 34, 5, 78])",
        "countBeautifulPairs(nums = [20, 2, 22, 12])",
        "countBeautifulPairs(nums = [13, 23, 37])",
        "countBeautifulPairs(nums = [2, 6, 11, 15])",
        "countBeautifulPairs(nums = [20, 7, 8, 10])",
        "countBeautifulPairs(nums = [100, 102, 103, 111, 112])",
        "countBeautifulPairs(nums = [23, 17, 3, 9, 42])",
        "countBeautifulPairs(nums = [12, 21, 23, 3, 15, 19])"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 9, num2 = 3)",
        "makeTheIntegerZero(num1 = 9, num2 = 3)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)",
        "makeTheIntegerZero(num1 = 4, num2 = 3)",
        "makeTheIntegerZero(num1 = 1, num2 = 1)",
        "makeTheIntegerZero(num1 = 17, num2 = 3)",
        "makeTheIntegerZero(num1 = 13, num2 = 9)",
        "makeTheIntegerZero(num1 = 3, num2 = 9)"
    ],
    "sample_20": [
        "minLength(s = \"abcde\")",
        "minLength(s = \"AABBCCD\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "minLength(\"ABCDA\")",
        "minLength(s = \"ab\")",
        "minLength(\"AABBCC\")",
        "minLength(s = \"CDE\")",
        "minLength(s = \"cdefghi\")",
        "minLength(s = \"haxby\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 3, 2, 4], k = 1)",
        "maximumBeauty(nums = [3,1,2,4], k = 1)",
        "maximumBeauty(nums = [1, 3, 1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 6, 3, 5, 4], k = 3)",
        "maximumBeauty(nums = [2, 1, 2, 5, 5], k = 2)",
        "maximumBeauty(nums = [2,4,3,6,1], k = 3)",
        "maximumBeauty(nums = [1, 5, 7, 8, 2, 6, 9], k = 1)",
        "maximumBeauty(nums = [5, 1, 9, 4, 3, 8, 7, 2], k = 3)",
        "maximumBeauty(nums = [1, 2, 6, 7, 3, 4, 6, 5, 6], k = 2)"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [12,34,56,78])",
        "countBeautifulPairs(nums = [12,23,34,45,56])",
        "countBeautifulPairs(nums = [12,34,56,78,90])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56, 67, 78, 89, 90])",
        "countBeautifulPairs(nums = [12,34,45,67,89])",
        "countBeautifulPairs(nums = [10, 2, 5, 1, 16])",
        "countBeautifulPairs(nums = [10, 2, 20, 8])",
        "countBeautifulPairs(nums = [20, 2, 200, 502])",
        "countBeautifulPairs(nums = [12, 34, 67, 24, 11])",
        "countBeautifulPairs(nums = [2,4,6,8,12,14,16,18,24,26,28])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 2, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 4, num2 = 3)",
        "makeTheIntegerZero(num1 = 8, num2 = 3)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)",
        "makeTheIntegerZero(num1 = 2, num2 = 2)",
        "makeTheIntegerZero(num1 = 100, num2 = 3)",
        "makeTheIntegerZero(num1 = 7, num2 = 13)",
        "makeTheIntegerZero(num1 = 999, num2 = 1)",
        "makeTheIntegerZero(num1 = 200, num2 = 30)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"aacecaaa\")",
        "makeSmallestPalindrome(\"eve\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = 'aacecaaa')",
        "makeSmallestPalindrome(\"even\")",
        "makeSmallestPalindrome(\"eve\")",
        "makeSmallestPalindrome(s = \"deed\")",
        "makeSmallestPalindrome(s = 'aacecaaa')",
        "makeSmallestPalindrome(s = \"abecedarian\")",
        "makeSmallestPalindrome(s = 'chci')"
    ],
    "sample_37": [
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"bab\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"leetcode\")",
        "minimumCost(\"abccba\")",
        "minimumCost(s = \"baba\")",
        "minimumCost(s = \"dab\")",
        "minimumCost(s = \"hello\")",
        "minimumCost(s = \"abcbca\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,2,3,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,2,1])",
        "numberOfGoodSubarraySplits(nums = [2, 1, 2, 2, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,1,0,0,1,1,1])"
    ],
    "sample_105": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, -2, 3, 4, -3, 2], k = 3)",
        "checkArray(nums = [1, -1, 1, -1, 1], k = 3)",
        "checkArray(nums = [1,2,-1,-2], k = 3)",
        "checkArray(nums = [1, 2, -1, 3, -2], k = 3)",
        "checkArray(nums = [3, 4, -1, 1], k = 4)",
        "checkArray(nums = [1, 2, -3, 4, -4], k = 4)",
        "checkArray(nums = [1,2,1,2,1,2,1,2], k = 3)",
        "checkArray(nums = [1, -2, 3, -1, -4], k = 3)",
        "checkArray(nums = [-3, -2, -3, 4, 3, 3, -3, -2, -4], k = 3)"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [1,3,2])",
        "semiOrderedPermutation(nums = [3, 2, 1])",
        "semiOrderedPermutation(nums = [3, 2, 1])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4])",
        "semiOrderedPermutation(nums = [0, 1, 2])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1,2,3,4,5], k = 3)",
        "checkArray(nums = [-1, 0, 1, 2, -1, -4], k = 3)",
        "checkArray(nums = [4,3,2,3,1], k = 2)",
        "checkArray(nums = [1, 2, -3, 4, -4], k = 2)",
        "checkArray(nums = [0, 1, 2, -3, 5], k = 3)",
        "checkArray([1, -2, 3], 2)",
        "checkArray(nums = [1, -3, 2, 1, 0], k = 3)",
        "checkArray(nums = [0, 1, 2, 3, 4, -1, -2], k = 3)",
        "checkArray([2, 1, 5, 3, 4, -2], k = 2)"
    ],
    "sample_39": [
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(\"abab\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abac\")",
        "minimumCost(s = \"abaa\")",
        "minimumCost(s = \"cbab\")",
        "minimumCost(s = \"ababbc\")",
        "minimumCost(s = \"bbaa\")",
        "minimumCost(s = \"abacbc\")"
    ],
    "sample_65": [
        "findValueOfPartition(a = [1, 2, 3])",
        "findValueOfPartition(a = [1, 2, 3])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 5, 4])",
        "findValueOfPartition(a = [1, 5, 9])",
        "findValueOfPartition(a = [2, 5, 7])",
        "findValueOfPartition(a = [3, 5, 6, 2, 1])",
        "findValueOfPartition(a = [1, 1, 3, 4, 7, 11])",
        "findValueOfPartition(a = [1, 10, 2, 4, 3, 7])",
        "findValueOfPartition(a = [3, -5, -1, 4, -2, 1])"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 3)",
        "distanceTraveled(mainTank = 4, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 4)",
        "distanceTraveled(mainTank = 6, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 7, additionalTank = 4)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1,2,3])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [1,2,3,1])",
        "doesValidArrayExist(derived = [1,2,1,2])",
        "doesValidArrayExist(derived = [1,2,4,2,4,1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [3, 0, 1])",
        "doesValidArrayExist(derived = [3, 4, 2, 1, 5, 6])"
    ],
    "sample_106": [
        "checkArray(nums = [1,2,3,4,5], k = 3)",
        "checkArray(nums = [2, 7, 11, 15], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "checkArray(nums = [0, 1, 2, -1, -2], k = 1)",
        "checkArray(nums = [0,1,0,3,2,3], k = 3)",
        "checkArray(nums = [4, 1, 4, 4], k = 2)",
        "checkArray(nums = [-1, 2, 1], k = 2)",
        "checkArray(nums = [2, 3, 4, -1, 6, 7], k = 3)",
        "checkArray(nums = [-4, -2, -3, 1, 5], k = 2)",
        "checkArray(nums = [4, 5, -9, -2, 3, 7, 0, -4], k = 3)"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 7)",
        "longestAlternatingSubarray([1,2,3,4], 10)",
        "longestAlternatingSubarray(nums = [10,9,2,5,3,7,101,18], threshold = 10)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 1, 3], threshold = 10)",
        "longestAlternatingSubarray(nums = [0, 0, 1, 0, 1, 0], threshold = 1)"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [1,2,3])",
        "countBeautifulPairs(nums = [3, 1, 4, 1, 5])",
        "countBeautifulPairs(nums = [1, 2, 4, 7])",
        "countBeautifulPairs(nums = [2, 6, 4, 5, 1])",
        "countBeautifulPairs([12, 34, 12, 35, 56])",
        "countBeautifulPairs([17, 15, 6, 4, 17])",
        "countBeautifulPairs(nums = [9, 14, 7, 16, 3, 6, 12])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5], t = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5], t = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4], t = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4], t = 5)",
        "longestAlternatingSubarray(nums = [1, 1, 1], t = 1)",
        "longestAlternatingSubarray(nums = [2, 4, 1, 3, 5], t = 5)",
        "longestAlternatingSubarray(nums = [1,3,2,1,4], t = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1], t = 3)",
        "longestAlternatingSubarray(nums = [4, 2, 7, 4, 8], t = 7)",
        "longestAlternatingSubarray(nums = [2,4,4,2,2,3,3,3,2,2,2], t = 3)"
    ],
    "sample_36": [
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"leetcode\")",
        "minimumCost(\"aba\")",
        "minimumCost(\"aba\")",
        "minimumCost(\"aab\")",
        "minimumCost(s = \"pwwkew\")",
        "minimumCost(\"aaabbb\")"
    ],
    "sample_21": [
        "minLength(\"ABCD\")",
        "minLength(\"ABCD\")",
        "minLength(\"ABCD\")",
        "minLength(s = \"BANANA\")",
        "minLength(\"ABABC\")",
        "minLength(\"AABB\")",
        "minLength(s = \"ABABCDAB\")",
        "minLength(s = \"xyzAB\")",
        "minLength(s = \"xyyabz\")",
        "minLength(s = \"DCBABBCCB\")"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0, 0, 1, 0, 0, 0])"
    ],
    "sample_9": [
        "colorTheArray(n = 4, queries = [[0, 1], [1, 2], [2, 3]])",
        "colorTheArray(n = 3, queries = [[0, 0], [1, 2], [2, 1]])",
        "colorTheArray(n = 3, queries = [[0, 0], [1, 0], [1, 1], [2, 1], [2, 2]])",
        "colorTheArray(n = 6, queries = [[0, 1], [1, 1], [1, 2], [2, 2]])",
        "colorTheArray(n = 3, queries = [[0, 2], [1, 0], [2, 2], [1, 1]])",
        "colorTheArray(n = 4, queries = [[0,0],[1,1],[0,1],[1,0],[1,2],[0,2]])",
        "colorTheArray(n = 5, queries = [[1,3],[2,2],[1,2],[3,4],[4,3]])",
        "colorTheArray(n = 6, queries = [[1, 4], [1, 2], [2, 2], [4, 3]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [1, 2], [2, 1]])",
        "colorTheArray(n = 10, queries = [[2, 6], [4, 6], [4, 8], [1, 3], [2, 3]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 3, 5, 4], nums2 = [1, 2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2], nums2 = [2, 4, 3])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2, 1], nums2 = [2, 2, 2])",
        "maxNonDecreasingLength(nums1 = [1,2,4], nums2 = [1,3,5])",
        "maxNonDecreasingLength(nums1 = [1,3,5,5], nums2 = [2,3,4,6])",
        "maxNonDecreasingLength(nums1 = [2, 3, 1, 1, 4], nums2 = [1, 2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 4, 5], nums2 = [1, 3, 2, 5])",
        "maxNonDecreasingLength(nums1 = [4, 4, 2], nums2 = [1, 2, 2])",
        "maxNonDecreasingLength(nums1 = [4, 5, 2, 3], nums2 = [3, 1, 2])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [2, 2, 3, 4, 6])"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1,1,1,2,2,2], k = 2)",
        "maximumBeauty(nums = [3, 5, 2, 1, 6, 7], k = 3)",
        "maximumBeauty(nums = [1, 3, 1, 3, 2, 3], k = 2)",
        "maximumBeauty(nums = [2, 1, 2, 6, 0, 5], k = 3)",
        "maximumBeauty(nums = [3,6,1,2,7,5], k = 2)",
        "maximumBeauty(nums = [1, 7, 3, 6, 7, 7, 3], k = 3)",
        "maximumBeauty(nums = [10, 4, 7, 3, 5, 1, 9, 2, 8, 6], k = 3)",
        "maximumBeauty(nums = [3,1,3,1,3,3,1,1,3,3,3,1], k = 2)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1,3])",
        "findValueOfPartition(nums = [1,4,3,2])",
        "findValueOfPartition(nums = [1, 4, 3, 2])",
        "findValueOfPartition(nums = [2, 5, 3, 4, 1])",
        "findValueOfPartition(nums = [10, 1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1,3])",
        "findValueOfPartition(nums = [1, 1])",
        "findValueOfPartition(nums = [2, 5, 3, 1, 6])",
        "findValueOfPartition(nums = [7, 2, 5, 3, 8, 4, 6, 1])",
        "findValueOfPartition(nums = [2,7,2,5,0,5,8,3,1])"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1,2,3])",
        "findValueOfPartition(nums = [1,3,1])",
        "findValueOfPartition(nums = [3,1,4,2])",
        "findValueOfPartition(nums = [1,2,1])",
        "findValueOfPartition(nums = [2,4,1,3])",
        "findValueOfPartition([1,2,3,4])",
        "findValueOfPartition(nums = [1, 3, 2])",
        "findValueOfPartition(nums = [1,1,4,4])",
        "findValueOfPartition(nums = [3, 4, -1, 1])",
        "findValueOfPartition(nums = [2,3,7,1,6])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [0, 1, 2])",
        "semiOrderedPermutation(nums = [4, 1, 2])",
        "semiOrderedPermutation(nums = [2, 1, 1])",
        "semiOrderedPermutation(nums = [1, 3, 5, 2, 4, 6])",
        "semiOrderedPermutation(nums = [1,3,0,2])",
        "semiOrderedPermutation(nums = [1, 1, 2, 3, 3])",
        "semiOrderedPermutation(nums = [0,1,3,4])"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [1, 0, 0, 1])",
        "semiOrderedPermutation(nums = [1, 1, 0, 1])",
        "semiOrderedPermutation(nums = [1, 1, 0, 0, 1])",
        "semiOrderedPermutation(nums = [1,0,0,1])",
        "semiOrderedPermutation(nums = [0, 0, 1, 1])",
        "semiOrderedPermutation(nums = [2,1,3])",
        "semiOrderedPermutation(nums = [0, 1, 0, 0])",
        "semiOrderedPermutation(nums = [1, 1, 1, 0, 0, 0, 0])",
        "semiOrderedPermutation(nums = [0,1,2])",
        "semiOrderedPermutation(nums = [1, 0, 0, 0, 1, 1, 0, 0, 1])"
    ],
    "sample_167": [
        "isAcronym(words = [\"a\", \"b\", \"c\"], s = \"abc\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"a\", \"e\", \"i\", \"o\", \"u\"], s = \"aeiou\")",
        "isAcronym(words = [\"ABC\", \"DEF\", \"GHI\"], s = \"ADG\")",
        "isAcronym(words = [\"and\", \"the\"], s = \"ant\")",
        "isAcronym(words = [\"red\", \"blue\", \"yellow\"], s = \"rby\")",
        "isAcronym(words = [\"bat\", \"cow\", \"bat\"], s = \"bbat\")",
        "isAcronym(words = [\"ch\", \"co\", \"ch\"], s = \"chco\")",
        "isAcronym(words = [\"sales\", \"for\", \"dummies\"], s = \"sfd\")",
        "isAcronym(words = [\"CAS\", \"AT\", \"CAS\", \"U\"], s = \"CA\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1, 2, 3], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 4, k = 1)",
        "countInterestingSubarrays(nums = [0,1,0,1,0], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,0,0,0,0], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1,1,1,0,0,0], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 1, 3, 2], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [3, 4, 2, 6], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [3, 2, 4, 5, 6], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [0, 2, 4, 6, 7], m = 7, k = 3)",
        "countInterestingSubarrays(nums = [5,2,2,7,4,0,9], m=7, k=3)"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [6, 9]])",
        "numberOfPoints(nums = [[1, 3], [4, 6], [7, 9]])",
        "numberOfPoints(nums = [[0, 3], [2, 6]])",
        "numberOfPoints(nums = [[0, 1], [2, 3], [5, 5]])",
        "numberOfPoints(nums = [[1,2],[3,4],[2,5]])",
        "numberOfPoints([[0,2], [3,5], [6,9]])",
        "numberOfPoints(nums = [[1, 3], [5, 8], [10, 11]])",
        "numberOfPoints(nums = [[0, 3], [1, 3], [2, 5], [1, 3], [1, 4], [5, 6]])"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"this\", \"is\", \"an\", \"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"Easy\", \"problem\"], separator = \"\")",
        "splitWordsBySeparator(words = ['this is an easy problem'], separator = \" \")",
        "splitWordsBySeparator(words = [\"Hello\", \"   \", \"World\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"I am an easy problem solver\", \"Python is a great language\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hard\", \"problem\", \"no\"], separator = \"d\")",
        "splitWordsBySeparator(words = [\"Apple,Banana,Orange\", \"Carrot,Lettuce,Tomato\"], separator = \",\")"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 2], [3, 4]])",
        "numberOfPoints(nums = [[1, 3], [2, 6], [9, 12]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [4, 5]])",
        "numberOfPoints(nums = [[1, 5], [2, 3], [6, 8]])",
        "numberOfPoints(nums = [[1, 4], [2, 3], [1, 4]])",
        "numberOfPoints(nums = [[0, 1], [0, 2], [2, 5], [6, 7]])",
        "numberOfPoints(nums = [[3,7],[2,5],[6,9]])",
        "numberOfPoints(nums = [[-2, 0], [0, 1], [2, 5]])",
        "numberOfPoints(nums = [[4,10],[2,5],[10,14]])",
        "numberOfPoints(nums = [[-5, 0], [2, 6], [-3, 1], [-1, -1]])"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1,2,2,1])",
        "countCompleteSubarrays(nums = [1, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,2,3,1])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1,1,2,2])",
        "countCompleteSubarrays(nums = [1,2,1,2,3,4,3,4,5])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ',')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ',')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = \" \")",
        "splitWordsBySeparator(words = \"one,two,three,four,five,six\", separator = \",\")"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 2, 3, 1])",
        "maxIncreasingGroups(u = [1,2,3,4])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 6, 7, 8, 9])",
        "maxIncreasingGroups(u = [1, 2, 3, 5])",
        "maxIncreasingGroups(u = [10, 20, 10, 40])",
        "maxIncreasingGroups(u = [1, 2, 2, 1, 3, 4, 4])",
        "maxIncreasingGroups(u = [1, 5, 7, 5, 6, 8])",
        "maxIncreasingGroups(u = [5, 2, 4, 7, 1, 3, 8])",
        "maxIncreasingGroups(u = [1, 4, 1, 2, 6, 4, 2, 1])",
        "maxIncreasingGroups(u = [10, 3, 4, 2, 7, 8, 2, 3, 9])"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1,2,3,4], x = 1)",
        "minAbsoluteDifference(nums = [1,4,2,3], x = 4)",
        "minAbsoluteDifference(nums = [1,2,3,4], x = 1)",
        "minAbsoluteDifference(nums = [1,2,3,4,5,6,7], x = 3)",
        "minAbsoluteDifference(nums = [4,5,1,3], x = 1)",
        "minAbsoluteDifference(nums = [4,2,2,3], x = 3)",
        "minAbsoluteDifference(nums = [1,2,3,4,10], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4], x = 1)",
        "minAbsoluteDifference(nums = [10, 9, 2, 5, 3, 7, 101], x = 4)",
        "minAbsoluteDifference(nums = [-10,3,2,4,6], x = 3)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 1], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 3, 2, 1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 3, 4, 2, 3], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums = [2,4,4], modulo = 4, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 5, 5], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [2, 1, 2, 4, 2, 4], modulo = 6, k = 2)",
        "countInterestingSubarrays(nums = [0, 2, 1, 1, 2, 0], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 3, 2, 1, 2, 4], modulo = 4, k = 2)",
        "countInterestingSubarrays(nums = [2, 1, 4, 5, 3, 2, 6, 7], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1], modulo = 2, k = 0)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 2, 3, 4], m = 5)",
        "canSplitArray(nums = [1, 2, 3], m = 3)",
        "canSplitArray(nums = [1, 2, 3], m = 5)",
        "canSplitArray(nums = [1, 2, 7, 1], m = 7)",
        "canSplitArray(nums = [1, 2], m = 4)",
        "canSplitArray(nums = [2, 2, 5, 5], m = 8)",
        "canSplitArray(nums = [5, 2, 6, 3, 7, 4], m = 9)",
        "canSplitArray(nums = [3, 3, 5, 2, 2, 2, 1, 1], m = 4)",
        "canSplitArray(nums = [4, 2, 3, 10, 3, 2, 2, 1, 10, 12], m = 7)",
        "canSplitArray(nums = [1, 2], m = 3)"
    ],
    "sample_169": [
        "isAcronym(words = [\"a\", \"b\", \"c\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\"], s = \"ab\")",
        "isAcronym(words = [\"North\", \"Atlantic\", \"Treaty\", \"Organization\"], s = \"NATO\")",
        "isAcronym(words = [\"The\", \"Quick\", \"Brown\", \"Fox\"], s = \"TQB\")",
        "isAcronym(words = [\"W\", \"H\", \"O\"], s = \"WHO\")",
        "isAcronym(words = [\"i\", \"like\", \"you\"], s = \"ilu\")",
        "isAcronym(words = [\"a\", \"t\", \"h\"], s = \"ah\")",
        "isAcronym(words = [\"Can\", \"You\", \"Come\"], s = \"CYC\")",
        "isAcronym(words = [\"u\", \"i\", \"r\"], s = \"URI\")",
        "isAcronym(words = [\"PEP\", \"IS\", \"WAP\"], s = \"PIW\")"
    ],
    "sample_121": [
        "minimumIndex(nums = [1,2,2,3,1])",
        "minimumIndex(nums = [1, 2, 2])",
        "minimumIndex(nums = [1,2,1,2])",
        "minimumIndex(nums = [1,2,2,2,3,4])",
        "minimumIndex(nums = [2, 3, 2])",
        "minimumIndex([1,2,2,3,1])",
        "minimumIndex(nums = [1,1,2,1,1])",
        "minimumIndex(nums = [1, 2, 3, 4, 4])",
        "minimumIndex([1,2,3,4,3,2,1])",
        "minimumIndex(nums = [2,2,1,1,2,2,3,4,1])"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 5, offers = [[1, 4, 5], [2, 5, 10], [2, 3, 5]])",
        "maximizeTheProfit(n = 4, offers = [[1, 3, 10], [2, 5, 20], [1, 2, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 5, 3], [2, 6, 2], [3, 7, 2], [4, 8, 4], [5, 9, 5]])",
        "maximizeTheProfit(n = 3, offers = [[2, 4, 10], [3, 5, 20], [6, 7, 30]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 3], [2, 3, 1], [3, 4, 1], [5, 6, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 1], [2, 5, 2], [3, 4, 1], [4, 5, 3], [2, 3, 1]])",
        "maximizeTheProfit(n = 10, offers = [[0, 1, 5], [3, 4, 6], [0, 2, 10]])",
        "maximizeTheProfit(n = 3, offers = [[5, 8, 100], [4, 4, 200], [5, 7, 100], [6, 6, 300]])",
        "maximizeTheProfit(n = 3, offers = [[1,2,5],[2,5,10],[1,3,10],[1,4,20],[3,10,30],[4,5,10]])",
        "maximizeTheProfit(n = 6, offers = [[4, 10, 11], [1, 10, 2], [5, 8, 4], [2, 6, 7], [3, 8, 9]])"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [-1, 2, 1, -4])",
        "maximumTripletValue(nums = [1,2,3,4])",
        "maximumTripletValue(nums = [1, 2, -3])",
        "maximumTripletValue(nums = [-1, 2, 1])",
        "maximumTripletValue([-10, -10, 5, 2])",
        "maximumTripletValue(nums = [1, 2, 5, 6])",
        "maximumTripletValue(nums = [4, 2, 5, 1])",
        "maximumTripletValue(nums = [1, 2, 0, 3, 4])",
        "maximumTripletValue(nums = [-10, 1, 2, -5, -4])"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"LLR_\")",
        "furthestDistanceFromOrigin(moves = \"LRL\")",
        "furthestDistanceFromOrigin(moves = \"_LLL_\")",
        "furthestDistanceFromOrigin(moves = \"R_R_L_\")",
        "furthestDistanceFromOrigin(\"LLLL_R\")",
        "furthestDistanceFromOrigin(moves = \"___LR___\")",
        "furthestDistanceFromOrigin(moves = \"LLLLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"R_R_L_R_L_L\")",
        "furthestDistanceFromOrigin(moves = 'LR_L_RL')",
        "furthestDistanceFromOrigin(\"LRLRLRLRLRLR\")"
    ],
    "sample_149": [
        "finalString(s = \"rii\")",
        "finalString(\"hello\")",
        "finalString(s = \"sing\")",
        "finalString(s = \"it\")",
        "finalString(s = 'rsng')",
        "finalString(s = \"is ig\")",
        "finalString(s = \"hills\")",
        "finalString(s = 'tsob')",
        "finalString(\"this is a test string\")",
        "finalString(\"net.barr.nana\")"
    ],
    "sample_162": [
        "maxSum(nums = [10, 2])",
        "maxSum(nums = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [11,12,13,14,15,16,17,18,19,20])",
        "maxSum(nums = [3, 4, 8])",
        "maxSum(nums = [4, 10, 7, 9, 3])",
        "maxSum(nums = [17,1,7,1,9,11])",
        "maxSum(nums = [12, 5, 2, 20, 7])",
        "maxSum(nums = [23, 42, 98, 23, 23, 23, 23])",
        "maxSum(nums = [28, -27, 13, -19, 23, 28, -12, -14])",
        "maxSum(nums = [46,36,48,27,28,14,6,3,54])"
    ],
    "sample_230": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 1])",
        "countWays(nums = [1, 1, 2])",
        "countWays(nums = [3, 2, 3])",
        "countWays(nums = [1, 3, 5, 7])",
        "countWays(nums = [2, 7, 11, 15])",
        "countWays(nums = [3, 3, 3, 3, 3])",
        "countWays(nums = [5, 3, 2])",
        "countWays(nums = [3,2,1,4])",
        "countWays([1, 2])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 3, target = 9)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 5, target = 6)",
        "minimumPossibleSum(n = 10, target = 10)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 3, offers = [[1, 2, 1], [2, 3, 5], [1, 3, 8]])",
        "maximizeTheProfit(N = 3, offers = [[1,2,6],[2,3,5],[3,4,10]])",
        "maximizeTheProfit(N = 3, offers = [[1, 3, 7], [2, 3, 10], [3, 4, 5]])",
        "maximizeTheProfit(N = 4, offers = [[2, 3, 4], [1, 3, 5], [1, 2, 6]])",
        "maximizeTheProfit(N = 4, offers = [[1, 2, 1], [1, 2, 5], [2, 3, 1]])",
        "maximizeTheProfit(N = 4, offers = [[1,2,1],[2,3,1],[3,4,2],[1,4,1]])",
        "maximizeTheProfit(N = 4, offers = [[2, 5, 1], [2, 1, 1], [3, 3, 1]])",
        "maximizeTheProfit(N = 5, offers = [[3,5,1],[4,5,2],[2,6,3]])",
        "maximizeTheProfit(N = 3, offers = [[1, 3, 5], [2, 4, 5], [2, 4, 1]])",
        "maximizeTheProfit(N = 3, offers = [[1,2,10],[3,4,10],[5,6,10],[1,3,20],[1,4,50],[1,5,60]])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 3, offers = [[1, 3, 3], [2, 3, 3], [3, 3, 3]])",
        "maximizeTheProfit(n = 3, offers = [[1, 5, 10], [2, 4, 8], [3, 6, 15]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 10], [0, 2, 20], [1, 3, 30], [1, 4, 40]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 6], [2, 5, 4], [3, 5, 3]])",
        "maximizeTheProfit(n = 5, offers = [[4, 7, 10], [4, 5, 7], [5, 8, 9]])",
        "maximizeTheProfit(n = 4, offers = [[0, 3, 5], [1, 3, 4], [1, 4, 1], [2, 4, 1]])",
        "maximizeTheProfit(n = 6, offers = [[0, 2, 1],[1, 3, 5],[4, 4, 7],[5, 6, 9]])",
        "maximizeTheProfit(n = 5, offers = [[1, 4, 7], [2, 3, 8], [1, 2, 7], [4, 5, 9], [2, 5, 10]])",
        "maximizeTheProfit(n = 10, offers = [[0, 3, 5],[3, 7, 4],[2, 6, 8],[7, 9, 10]])",
        "maximizeTheProfit(n = 5, offers = [[4, 5, 1], [2, 5, 2], [3, 6, 4], [1, 5, 3], [4, 6, 3]])"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 25)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 8, 8, 8, 9, 9], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 2, 5, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 3, 2, 1, 3], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 10, 20, 5, 30], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 4, 2], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 8, 0, 10, 4], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [60, 10, 20, 90, 40], target = 60)"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1,1,2])",
        "countCompleteSubarrays(nums = [1,2,2,3,1])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,2,3,4])",
        "countCompleteSubarrays(nums = [1,2,1,3,4,3])",
        "countCompleteSubarrays(nums = [1,1,1,1,1,1])",
        "countCompleteSubarrays(nums = [1,2,3,1,3,1])",
        "countCompleteSubarrays(nums = [1,1,2,2,3,3,1,1,1])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 1, 2])",
        "countWays(nums = [0,1,2])",
        "countWays(nums = [1, 3, 1])",
        "countWays(nums = [2, 3, 5])",
        "countWays(nums = [4, 2, 1, 3])",
        "countWays(nums = [2, 1, 3, 4])",
        "countWays(nums = [1, 2, 4, 5])",
        "countWays(nums = [3, 1, 5, 2])",
        "countWays(nums = [0, 1, 1, 1, 1, 2])"
    ],
    "sample_132": [
        "maxIncreasingGroups(count = [1, 1, 1, 1], group = 2)",
        "maxIncreasingGroups(count = [1, 2, 1, 2], group = 2)",
        "maxIncreasingGroups(count = [2, 3, 2], group = 2)",
        "maxIncreasingGroups(count = [4, 3, 1, 2], group = 4)",
        "maxIncreasingGroups(count = [1,1,1,1,1], group = 3)",
        "maxIncreasingGroups(count = [1, 1, 3, 3, 3], group = 3)",
        "maxIncreasingGroups(count = [1, 3, 2, 5, 3, 4])",
        "maxIncreasingGroups(count = [3, 1, 2, 5, 6])",
        "maxIncreasingGroups(count = [2, 1, 4, 5, 1, 1, 4])",
        "maxIncreasingGroups(count = [2, 1, 2, 3, 0, 4, 3, 4])"
    ],
    "sample_173": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 7, k = 3)",
        "minimumSum(n = 2, k = 5)"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1,2,3,4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 0, 1], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1,1,2,2,3,3], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 3, 5, 6, 7], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 4, 5], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [2, 4, 5, 2, 4], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 4, 7], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [10, 12, 13], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [4, 5, 6, 7, 9], m = 5, k = 5)",
        "countInterestingSubarrays(nums = [1,2,1,1,2,3,1], m = 2, k = 1)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1,2,1])",
        "countCompleteSubarrays(nums = [1,1,2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,1,2,1,3])",
        "countCompleteSubarrays(nums = [3,1,2,2,1])"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1,2,3,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,3,1], k = 2)",
        "longestEqualSubarray(nums = [1, 0, 1, 0, 1, 0, 1], k = 2)",
        "longestEqualSubarray(nums = [2, 2, 2, 1, 1, 1, 2, 2, 2], k = 2)",
        "longestEqualSubarray(nums = [1,1,2,2,3,3], k = 2)",
        "longestEqualSubarray(nums = [2, 2, 1, 1, 2], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,4,3,4,5], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,1,1,1,2,3,1,1,1], k = 3)",
        "longestEqualSubarray(nums = [2,2,2,2,2,2,2,2], k = 3)",
        "longestEqualSubarray(nums = [0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1], k = 2)"
    ],
    "sample_170": [
        "isAcronym(words = [\"a\", \"b\", \"c\"], s = \"abc\")",
        "isAcronym(words = [\"a\", \"b\", \"c\"], s = \"abc\")",
        "isAcronym(words = [\"i\", \"love\", \"python\"], s = \"ilp\")",
        "isAcronym(words = [\"a\", \"b\", \"c\"], s = \"ab\")",
        "isAcronym(words = [\"a\", \"n\", \"n\", \"a\"], s = \"anana\")",
        "isAcronym(words = [\"S\", \"W\", \"H\"], s = \"SWH\")",
        "isAcronym(words = [\"Google\", \"Facebook\", \"Amazon\"], s = \"GFA\")",
        "isAcronym(words = [\"SOS\"], s = \"SOS\")",
        "isAcronym(words = [\"South\", \"Atlantic\", \"Treaty\", \"Organization\"], s = \"sattoo\")",
        "isAcronym(words = [\"Yellow\", \"Apple\", \"Yellow\", \"Banana\"], s = \"YAY\")"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = \"1001\")",
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = '0011')",
        "maximumOddBinaryNumber(s = '011')",
        "maximumOddBinaryNumber(s = \"111\")",
        "maximumOddBinaryNumber(s = \"00101\")",
        "maximumOddBinaryNumber(s = \"0110011\")",
        "maximumOddBinaryNumber(s = \"01\")",
        "maximumOddBinaryNumber(s = \"100100\")",
        "maximumOddBinaryNumber(\"10111\")"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1,2,3])",
        "countWays(nums = [1, 3, 6, 7])",
        "countWays(nums = [3,1,2])",
        "countWays([1,1,1])",
        "countWays(nums = [2, 2, 2, 3, 3, 4])",
        "countWays(nums = [1,3,1,2])",
        "countWays(nums = [1, 2, 3, 1, 2, 3])",
        "countWays([3, 3, 4, 4, 4, 6])"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 4, offers = [[1, 1, 4], [2, 3, 5], [1, 2, 2]])",
        "maximizeTheProfit(n = 4, offers = [[2, 3, 2], [1, 2, 1], [2, 1, 1]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 3], [2, 5, 7], [2, 4, 10]])",
        "maximizeTheProfit(n = 6, offers = [[0, 2, 3], [1, 3, 5], [2, 4, 5], [3, 4, 5]])",
        "maximizeTheProfit(n = 4, offers = [[1,2,3],[2,3,4],[1,1,1],[1,1,1],[2,2,2]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,5],[2,3,7],[4,5,8],[3,5,9]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 3], [3, 4, 1], [4, 5, 2], [4, 6, 4]])",
        "maximizeTheProfit(n = 10, offers = [[5, 6, 3], [2, 9, 8], [4, 7, 9]])",
        "maximizeTheProfit(n = 10, offers = [[2, 5, 3], [5, 1, 2], [3, 4, 1], [6, 3, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 5, 7],[3, 7, 11],[1, 2, 3],[4, 5, 6]])"
    ],
    "sample_122": [
        "minimumIndex(nums = [1,2,2,1])",
        "minimumIndex(nums = [1,2,2])",
        "minimumIndex(nums = [1,2,2,3])",
        "minimumIndex(nums = [1,2,3,2,2])",
        "minimumIndex(nums = [2, 2, 1, 1, 2, 2])",
        "minimumIndex(nums = [1,2,1,2,1])",
        "minimumIndex(nums = [1, 3, 2, 2])",
        "minimumIndex(nums = [2, 1, 2, 1, 2])",
        "minimumIndex(nums = [2,3,3,2])",
        "minimumIndex(nums = [1, 2, 3, 3, 2, 2])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1, 2], [3, 5], [6, 7]])",
        "numberOfPoints(nums = [[1, 3], [6, 10], [8, 12]])",
        "numberOfPoints(nums = [[1, 3], [2, 6], [3, 4], [5, 7], [6, 8], [7, 9]])",
        "numberOfPoints(nums = [[0, 2], [3, 4], [6, 7]])",
        "numberOfPoints(nums = [[2, 5], [2, 7], [8, 10]])",
        "numberOfPoints(nums = [[0, 5], [2, 4], [5, 8]])",
        "numberOfPoints(nums = [[1, 4], [2, 5], [1, 7]])",
        "numberOfPoints(nums = [[3, 4], [5, 7], [7, 8]])",
        "numberOfPoints(nums = [[2, 5], [2, 4], [3, 6], [4, 7]])",
        "numberOfPoints(nums = [[0,2],[-3,-1],[5,8],[10,11],[-4,-2]])"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"ba\", \"nana\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"hello\", \"world\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"ba\", \"na\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"ba\", \"na\", \"nana\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"ba\", \"na\", \"ana\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"b\", \"a\", \"n\", \"a\", \"n\", \"a\"], separator = \"\")",
        "splitWordsBySeparator(words = \"Hello, World!\", separator = \",\")",
        "splitWordsBySeparator(words = [\"ba\", \"na\", \"na\"], separator = \"a\")",
        "splitWordsBySeparator(words = \"baanana\", separator = \"nana\")",
        "splitWordsBySeparator(words = [\"foobar\", \"\", \"foobaz\"], separator = \"b\")"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 4, target = 7)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 5, target = 5)",
        "minimumPossibleSum(n = 1, target = 3)",
        "minimumPossibleSum(n = 4, target = 8)",
        "minimumPossibleSum(n = 4, target = 1)",
        "minimumPossibleSum(n = 2, target = 7)"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 2], [3, 4]])",
        "numberOfPoints(nums = [[1, 2], [3, 5]])",
        "numberOfPoints(nums = [[1, 2], [3, 5], [6, 7]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [0, 5]])",
        "numberOfPoints(nums = [[1, 2], [1, 4], [2, 3]])",
        "numberOfPoints(nums = [[1, 3], [0, 1], [1, 2]])",
        "numberOfPoints(nums = [[1, 2], [4, 7], [2, 5]])",
        "numberOfPoints(nums = [[2, 3], [3, 6], [2, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [2, 6], [3, 5]])",
        "numberOfPoints(nums = [[4,8], [4,9], [8,9], [15,16]])"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 3], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 5, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 5, k = 1)",
        "countInterestingSubarrays(nums = [0, 1, 0, 0, 1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 4, k = 0)",
        "countInterestingSubarrays(nums = [1,1,1,1], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 4, 2, 4, 5], m = 4, k = 2)",
        "countInterestingSubarrays(nums = [1, 3, 5, 7, 9], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [3, 0, 3, 0], m = 3, k = 0)"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 6, 7], k = 3)",
        "sumIndicesWithKSetBits(nums = [8, 2, 0, 7], k = 1)"
    ],
    "sample_203": [
        "minimumOperations(num = \"45\")",
        "minimumOperations(num = '1234')",
        "minimumOperations(num = \"0123\")",
        "minimumOperations(num = \"5\")",
        "minimumOperations(\"4500\")",
        "minimumOperations(num = \"7564\")",
        "minimumOperations(num = \"817\")",
        "minimumOperations(num = '25025')",
        "minimumOperations(num = '010001')",
        "minimumOperations(num = \"1\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 3, 2, 2], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 2], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1,1,1,2,2,2], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [0,1,1], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [3, 1, 4, 1, 5], modulo = 6, k = 1)",
        "countInterestingSubarrays(nums = [1, 3, 2, 4, 3, 5, 4, 6], modulo = 5, k = 4)",
        "countInterestingSubarrays(nums = [2, 5, 2, 3, 4, 7], modulo = 4, k = 1)",
        "countInterestingSubarrays(nums = [3, 6, 7, 11, 5, 9], modulo = 10, k = 7)"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [3,2,2,3], K = 1)",
        "longestEqualSubarray(A = [1,2,3,4,5,6,7,8,9,10], K = 2)",
        "longestEqualSubarray(A = [1,2,3,1,2,3,1], K = 2)",
        "longestEqualSubarray(A = [1,2,1,2,1,2], K = 3)",
        "longestEqualSubarray(A = [3, 2, 1, 2, 3], K = 1)",
        "longestEqualSubarray(A = [0,1,0,1,0,1,0,1,1], K = 2)",
        "longestEqualSubarray(A = [4,2,2,4,1,4], K = 2)",
        "longestEqualSubarray(A = [1, 0, 0, 0, 1, 0, 0, 1], K = 1)",
        "longestEqualSubarray([1,2,3,1,2,1,2,1], 2)",
        "longestEqualSubarray(A = [1,1,1,1], K = 0)"
    ],
    "sample_146": [
        "finalString(s = \"peter\")",
        "finalString(s = \"apple\")",
        "finalString(s = \"apple\")",
        "finalString(\"iponter\")",
        "finalString(\"apple\")",
        "finalString(\"pont\")",
        "finalString(s = \"post\")",
        "finalString(s = 'pontel')",
        "finalString(\"poet\")",
        "finalString(s = 'hownost')"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 5], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 5, 4, 5, 6, 7], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 6, 7, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [100, 100, 150, 200, 300], target = 200)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 8, 6, 5, 9, 5], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 25, 3, 4, 5, 18, 12, 0], target = 10)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 3], [2, 6], [8, 10]])",
        "numberOfPoints(nums = [[1, 2], [3, 5], [6, 7]])",
        "numberOfPoints(nums = [[1, 1], [2, 2], [3, 3]])",
        "numberOfPoints(nums = [[1, 2], [2, 3]])",
        "numberOfPoints(nums = [[0, 1], [2, 3], [1, 3]])",
        "numberOfPoints(nums = [[1, 4], [7, 9]])",
        "numberOfPoints(nums = [[3, 5], [2, 2]])",
        "numberOfPoints(nums = [[-2, 2], [-2, 2], [-2, 2], [-2, 2], [-2, 2], [-2, 2], [-2, 2]])",
        "numberOfPoints(nums = [[1, 2], [4, 7], [2, 3]])",
        "numberOfPoints(nums = [[1, 3], [1, 4], [2, 6], [8, 10]])"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4])",
        "maxIncreasingGroups(A = [1,2,3,4,5])",
        "maxIncreasingGroups(A = [1, 2, 2, 3, 4, 4, 5])",
        "maxIncreasingGroups(A = [1, 3, 5, 2, 2])",
        "maxIncreasingGroups(A = [4, 6, 4, 8, 5])",
        "maxIncreasingGroups(A = [1, 4, 2, 7, 4])",
        "maxIncreasingGroups(A = [7, 4, 7, 5, 3, 2])",
        "maxIncreasingGroups(A = [3, 4, 3, 2, 3, 7, 1])",
        "maxIncreasingGroups(A = [1, 3, 2, 3, 7, 8, 5, 9, 9, 10])"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 8, offers = [[1, 3, 4], [2, 4, 5], [3, 5, 6], [4, 6, 7], [5, 7, 8]])",
        "maximizeTheProfit(n = 9, offers = [[1,2,3],[3,4,5],[3,5,6]])",
        "maximizeTheProfit(n = 3, offers = [[1,2,3],[0,1,2],[1,2,3],[0,1,2],[1,2,3],[0,1,2]])",
        "maximizeTheProfit(n=4, offers = [[1,3,4],[2,4,2],[2,2,1]])",
        "maximizeTheProfit(n=5, offers=[[2, 3, 3], [3, 4, 2], [5, 2, 1]])",
        "maximizeTheProfit(n = 3, offers = [[2, 3, 1], [5, 2, 3], [3, 4, 5]])",
        "maximizeTheProfit(n=3, offers = [[2,1,3], [5,3,4], [7,6,7]])",
        "maximizeTheProfit(n = 6, offers = [[1, 3, 1], [2, 4, 1], [2, 3, 2], [3, 5, 1], [4, 6, 1], [5, 8, 2]])",
        "maximizeTheProfit(n = 6, offers = [[3, 2, 5], [5, 2, 6], [2, 4, 7], [3, 6, 8]])",
        "maximizeTheProfit(n = 4, offers = [[0, 1, 1],[2, 5, 7],[4, 3, 2],[3, 4, 8]])"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(\"_L_R__\")",
        "furthestDistanceFromOrigin(moves = \"LR_LRLR\")",
        "furthestDistanceFromOrigin(moves = \"R_L_L_R_R\")",
        "furthestDistanceFromOrigin(moves = \"LLR_R\")",
        "furthestDistanceFromOrigin(moves = \"LRRLR\")",
        "furthestDistanceFromOrigin(moves = \"R_LRRL\")",
        "furthestDistanceFromOrigin(\"_L___\")",
        "furthestDistanceFromOrigin(moves = \"LR_R__\")",
        "furthestDistanceFromOrigin(moves = '.._.._..')",
        "furthestDistanceFromOrigin(\"LUR_L_R\")"
    ],
    "sample_175": [
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 4, k = 7)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 10, k = 3)",
        "minimumSum(n = 4, k = 5)",
        "minimumSum(n = 4, k = 10)",
        "minimumSum(n = 5, k = 6)",
        "minimumSum(n = 5, k = 6)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 6, k = 11)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,2],[2,3]])",
        "numberOfPoints(nums = [[1,2], [2,3], [4,5]])",
        "numberOfPoints(nums = [[0,2], [1,2], [3,4]])",
        "numberOfPoints(nums = [[0,2],[2,5],[8,10],[15,20],[25,30]])",
        "numberOfPoints(nums = [[3,6],[2,8],[9,12]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[6,7],[8,9]])",
        "numberOfPoints(nums = [[0,5],[2,3],[8,9]])",
        "numberOfPoints(nums = [[2,2],[5,5],[6,6],[7,7],[8,8]])",
        "numberOfPoints(nums = [[3,4],[7,10],[2,3],[3,7]])",
        "numberOfPoints(nums = [[0,2],[6,8],[8,10],[1,2],[1,5],[5,10],[0,4],[4,10]])"
    ],
    "sample_205": [
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"0101\")",
        "minimumOperations(\"500\")",
        "minimumOperations(num = \"05\")",
        "minimumOperations(num = \"19\")",
        "minimumOperations(num = \"4567\")",
        "minimumOperations(num = \"000010\")",
        "minimumOperations(num = \"823\")",
        "minimumOperations(num = \"06753\")",
        "minimumOperations(num = \"25555555\")"
    ],
    "sample_120": [
        "minimumIndex(nums = [1, 2, 3, 2])",
        "minimumIndex(nums = [1, 2, 3, 2, 1])",
        "minimumIndex(nums = [2, 1, 2])",
        "minimumIndex(nums = [2, 2, 1, 1])",
        "minimumIndex(nums = [0, 0, 1, 0])",
        "minimumIndex(nums = [2, 4, 2, 4, 2])",
        "minimumIndex(nums = [1, 2, 1, 3, 4, 3, 3])",
        "minimumIndex(nums = [4, 3, 2, 3, 1, 2, 2])",
        "minimumIndex(nums = [5, 6, 1, 2, 2])",
        "minimumIndex(nums = [4,5,6,7,6,5,5,5])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"LL_\")",
        "furthestDistanceFromOrigin(\"L_R__\")",
        "furthestDistanceFromOrigin(moves = 'LL_')",
        "furthestDistanceFromOrigin(moves = \"_L_R_\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRUUU\")",
        "furthestDistanceFromOrigin(moves = \"RLLRRR_\")",
        "furthestDistanceFromOrigin(moves = \"LRLRRR\")",
        "furthestDistanceFromOrigin(moves = \"RLLR_R_R\")",
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(\"LR_LR_R__R__LR__R_\")"
    ],
    "sample_161": [
        "maxSum(nums = [10, 2])",
        "maxSum(nums = [10, 2])",
        "maxSum(nums = [3, 30, 34, 5, 9])",
        "maxSum(nums = [-1, 0, 1])",
        "maxSum(nums = [5, 2, 2, 5])",
        "maxSum(nums = [2,2,2,2])",
        "maxSum(nums = [10, 2, 5, 1])",
        "maxSum([123, -1, 2, 0])",
        "maxSum(nums = [10,20,30,5,12])",
        "maxSum([1, 9, 7, -2])"
    ],
    "sample_160": [
        "maxSum(nums = [10, 2])",
        "maxSum(nums = [1721, 979, 366, 299, 675, 1456])",
        "maxSum(nums = [0,0,0,0,0,0,0,0,0,0])",
        "maxSum(nums = [23, 2, 5, 76, 23])",
        "maxSum(nums = [-2147483648, 1, -2147483648, 3, -2147483648, 5, -2147483648, 7, -2147483648])",
        "maxSum([10, 11, 12, 100, 200, 300, 1000, 2000, 3000, 10000])",
        "maxSum(nums = [1,2,3,4,5,6])",
        "maxSum([-1, 2, -3, 0, 0, 0, 1, 2, 3, -1, -2, -3, 0, 0, 0, 1, 2, 3, -1, -2, -3, 0, 0, 0, 1, 2, 3, -1, -2, -3, 0, 0, 0, 1, 2, 3, -1, -2, -3, 0, 0, 0, 1, 2, 3, -1, -2, -3, 0, 0, 0, 1, 2, 3, -1, -2, -3, 0, 0, 0, 1, 2, 3, -1, -2, -3, 0, 0, 0, 1, 2, 3, -1, -2, -3, 0, 0, 0, 1, 2, 3, -1, -2, -3, 0, 0, 0, 1, 2, 3, -1, -2, -3, 0, 0, 0, 1, 2, 3, -1, -2, -3, 0, 0, 0, 1, 2, 3, -1, -2, -3, 0, 0, 0, 1, 2, 3, -1, -2, -3, 0, 0, 0, 1, 2, 3, -1, -2, -3, 0, 0, 0, 1, 2, 3, -1, -2, -3, 0, 0, 0, 1, 2, 3, -1, -2, -3, 0, 0, 0, 1, 2, 3, -1, -2, -3, 0, 0, 0, 1, 2, 3, -1, -2, -3, 0, 0, 0, 1, 2, 3, -1, -2, -3, 0, 0, 0, 1, 2, 3, -1, -2, -3, 0, 0, 0, 1, 2, 3, -1, -2, -3, 0, 0, 0, 1, 2, 3, -1, -2, -3, 0, 0, 0, 1, 2, 3, -1, -2, -3, 0, 0, 0, 1, 2, 3, -1, -2, -3, 0, 0, 0, 1, 2, 3, -1, -2, -3, 0, 0, 0, 1, 2, 3, -1, -2, -3, 0, 0, 0, 1, 2, 3, -1, -2, -3, 0, 0, 0, 1, 2",
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [-5,1,7,-2,5,-10,3,4,-10,8,-3])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = '-')",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = '-')",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"\")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\"], separator = ' ')",
        "splitWordsBySeparator(words = ['hello', 'this', 'is', 'a', 'test'], separator = ' ')"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 5, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 1, 3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 3, 5, 1, 2], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [2,1,0,1], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 6, 8], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 5, 7, 4, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 50, 20, 60], target = 50)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 7, 9, 9], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [0,4,7,3,8,5], target = 5)"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 5, 4, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 5, 4, 7], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 6, 7, 8, 12], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 1, 7, 3, 8], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 1, 4, 2, 2, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [6, 9, 5, 8, 2], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 3, 3, 7, 6, 7], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [6, 3, 7, 8, 5, 8, 9], target = 6)"
    ],
    "sample_171": [
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 4, k = 2)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 6, k = 3)",
        "minimumSum(n = 7, k = 3)"
    ],
    "sample_159": [
        "maxSum(nums = [10,2])",
        "maxSum(nums = [10, 2])",
        "maxSum([-1,-2])",
        "maxSum(nums = [1,1])",
        "maxSum(nums = [2, 3, 1, 4])",
        "maxSum([-2147483648, -2147483648, 2147483647])",
        "maxSum(nums = [10,10,2,2,1])",
        "maxSum(nums = [2,10,4,2])",
        "maxSum(nums = [3,33,33,33,33])",
        "maxSum(nums = [10, 11, 2, 99, 101, 32, 100, 10])"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 2, 3], m = 3)",
        "canSplitArray(nums = [1, 2], m = 3)",
        "canSplitArray(nums = [1, 5, 11, 5], m = 8)",
        "canSplitArray(nums = [5, 3, 6, 7], m = 8)",
        "canSplitArray(nums = [4, 2, 3, 4], m = 6)",
        "canSplitArray(nums = [1, 1, 2, 2, 2], m = 3)",
        "canSplitArray(nums = [1,1], m = 1)",
        "canSplitArray(nums = [2, 1, 5, 2, 3, 4], m = 7)",
        "canSplitArray(nums = [3, 6, 7, 1], m = 7)",
        "canSplitArray(nums = [5, 3, 1, 2, 7, 4, 4], m = 7)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = \"\", separator = \" \")",
        "splitWordsBySeparator(words = [\"ba\", \"nana\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"b\", \"a\", \"n\", \"a\", \"n\", \"a\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"\", \"\", \"\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"ab\", \"cd\", \"ef\", \"gh\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"lorem\", \"ipsum\", \"dolor\", \"sit\", \"amet\", \"consectetur\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"Marry\", \"John\", \"Jane\", \"Mary\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"baa\", \"naa\", \"bba\", \"n\", \"na\", \"bna\"], separator = \"na\")",
        "splitWordsBySeparator(words = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"d\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"y\", \"x\", \"w\", \"v\", \"u\", \"t\", \"s\", \"r\", \"q\", \"p\", \"o\", \"n\", \"m\", \"l\", \"k\", \"j\", \"i\", \"h\", \"g\", \"f\", \"e\", \"d\", \"c\", \"b\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"])"
    ],
    "sample_172": [
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n=2, k=3)",
        "minimumSum(n = 10, k = 4)"
    ],
    "sample_228": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1,2,3,4])",
        "countWays(nums = [0, 1, 2, 3, 4])",
        "countWays(nums = [2, 1, 2])",
        "countWays(nums = [1, 2, 2])",
        "countWays(nums = [2, 4, 6])",
        "countWays(nums = [3,0,3,0,0])",
        "countWays(nums = [2,1,2,0,1,2])",
        "countWays(nums = [1,0,2,1,1,0])",
        "countWays(nums = [4, 1, 0, 4])"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"0101\")",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"010101\")",
        "maximumOddBinaryNumber(s = \"1011\")",
        "maximumOddBinaryNumber(s = \"0110\")",
        "maximumOddBinaryNumber(s = \"1011\")",
        "maximumOddBinaryNumber(s = \"bbaaab\")"
    ],
    "sample_119": [
        "minimumIndex(nums = [2, 1, 2])",
        "minimumIndex(nums = [1, 2, 1, 2])",
        "minimumIndex(nums = [2,2,2,2,2])",
        "minimumIndex(nums = [2,1,2,1,2])",
        "minimumIndex(nums = [2, 2, 1, 1, 2, 2, 2])",
        "minimumIndex(nums = [0, 0, 1, 0])",
        "minimumIndex(nums = [2, 2, 4, 4, 5, 5])",
        "minimumIndex(nums = [2, 1, 2, 2, 3, 4, 2])",
        "minimumIndex(nums = [3, 1, 3, 3, 2, 3, 3])",
        "minimumIndex(nums = [0, 0, 2, 2, 2, 2, 3, 3])"
    ],
    "sample_153": [
        "canSplitArray(nums = [1,2,3,4], m = 3)",
        "canSplitArray(nums = [1,2,3,4,5,6], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5], m = 6)",
        "canSplitArray(nums = [1,1,1,1,1,1,1,1,1,1,1,1], m = 2)",
        "canSplitArray(nums = [1, 2, 7, 1, 5, 5], m = 3)",
        "canSplitArray([3,4,2,3,3], 7)",
        "canSplitArray([5,3,2,4,3], 5)",
        "canSplitArray(nums = [4, 5, 1, 7, 2], m = 3)",
        "canSplitArray(nums = [10, 5, 1, 2, 3, 4, 5], m = 15)",
        "canSplitArray(nums = [1,2,4,8], m = 1)"
    ],
    "sample_147": [
        "finalString(s = \"rtsng\")",
        "finalString(s = 'rtsng')",
        "finalString(s = \"this is a string\")",
        "finalString(s = \"this is a string\")",
        "finalString(s = \"hello\")",
        "finalString(s = 'ring')",
        "finalString(\"iris\")",
        "finalString(s = 'sngi')",
        "finalString(s = 'ingi')",
        "finalString(s = 'istnigs')"
    ],
    "sample_174": [
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 4, k = 7)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 5, k = 5)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1,2,3], m = 4)",
        "canSplitArray(nums = [1, 2, 4, 5], m = 7)",
        "canSplitArray(nums = [3, 2, 2, 4], m = 4)",
        "canSplitArray(nums = [1,2,5,8], m = 7)",
        "canSplitArray(nums = [3, 4, 2, 1], m = 6)",
        "canSplitArray(nums = [2,4,8], m = 6)",
        "canSplitArray(nums = [2, 5, 1, 2, 4, 3], m = 6)",
        "canSplitArray(nums = [3, 2, 4, 6, 5], m = 7)",
        "canSplitArray(nums = [3, 2, 6, 5, 9, 11], m = 10)",
        "canSplitArray(nums = [0, 1, 5, 3, 0, 3, 0], m = 7)"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 1])",
        "countCompleteSubarrays(nums = [1,2,1])",
        "countCompleteSubarrays(nums = [1,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,1])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2])",
        "countCompleteSubarrays(nums = [0, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1,1,2,2,3])"
    ],
    "sample_150": [
        "finalString(s = \"rtsng\")",
        "finalString(s = \"hello\")",
        "finalString(\"in\")",
        "finalString(\"I\")",
        "finalString(\"internet\")",
        "finalString(s = \"This is a string with i's in it\")",
        "finalString(s = \"i like ice cream\")",
        "finalString(s = \"It's a great day!\")",
        "finalString(s = \"isThereAnyI\")",
        "finalString(\"first\")"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 5, target = 1)",
        "minimumPossibleSum(n = 5, target = 7)",
        "minimumPossibleSum(n = 4, target = 6)",
        "minimumPossibleSum(n = 4, target = 4)",
        "minimumPossibleSum(n = 5, target = 4)"
    ],
    "sample_176": [
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 4, k = 2)",
        "minimumSum(n = 10, k = 3)",
        "minimumSum(n = 4, k = 6)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 2, k = 5)"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1,2,3], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4], modulo = 4, k = 1)",
        "countInterestingSubarrays(nums = [0,1,2,3,4], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 1, 3], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1,3,4,3,1], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums = [1,3,2,4,1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [3,1,2,1,2], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [2, 4, 1, 1, 5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [3, 4, 2, 5, 1, 4], modulo = 7, k = 5)"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 7, 11, 15], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 3, 1, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 6, 10], k = 1)",
        "sumIndicesWithKSetBits(nums = [4, 2, 1, 2, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 5, 0, 1, 6, 3, 7], k = 2)"
    ],
    "sample_151": [
        "finalString(s = 'rtsng')",
        "finalString('This is a test')",
        "finalString(s = 'sgnirts')",
        "finalString(\"String\")",
        "finalString(s = \"si\")",
        "finalString(s = 'This is a test')",
        "finalString(s = \"This string contains no 'i' characters\")",
        "finalString(s = \"I'm really enjoying coding\")",
        "finalString(s = \"rijifrst\")",
        "finalString(\"irqtfnd\")"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 7, 11, 15], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [5,2,3], k = 1)",
        "sumIndicesWithKSetBits(nums = [4, 14, 2, 10], k = 1)",
        "sumIndicesWithKSetBits(nums = [4, 2, 3, 5, 2, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 0, 1, 2, -1, 2, -3, 0, -3, 1], k = 1)"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4])",
        "maxIncreasingGroups(usageLimits = [1,2,3])",
        "maxIncreasingGroups(usageLimits = [10, 10, 10])",
        "maxIncreasingGroups(usageLimits = [1,3,2,4])",
        "maxIncreasingGroups(usageLimits = [3, 2, 1, 4])",
        "maxIncreasingGroups(usageLimits = [1, 3, 6, 9, 12])",
        "maxIncreasingGroups(usageLimits = [1, 1, 1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1,1,2,1])",
        "maxIncreasingGroups(usageLimits = [3, 5, 10, 7, 5])",
        "maxIncreasingGroups([2, 1, 2, 2, 2])"
    ],
    "sample_204": [
        "minimumOperations(s = \"0\")",
        "minimumOperations(s = \"001\")",
        "minimumOperations(s = \"700\")",
        "minimumOperations(s = '12')",
        "minimumOperations(s = \"0010100\")",
        "minimumOperations(s = \"11000101\")",
        "minimumOperations(s = \"112233445566\")",
        "minimumOperations(s = \"b\")",
        "minimumOperations(\"0023\")",
        "minimumOperations(s = \"abc0def0ghijk0lmn\")"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 5, 6], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 8, 8], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 8, 7, 6, 5, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 2, 6], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 2, 3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [6, 8, 7], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 3, 8, 7], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 1, 1, 2, 2, 2, 3, 4, 5, 5, 5, 6, 7], target = 5)"
    ],
    "sample_148": [
        "finalString('ponter')",
        "finalString(s = \"pontar\")",
        "finalString(s = 'ipond')",
        "finalString('inpontr')",
        "finalString(s = \"play\")",
        "finalString(s = \"rponter\")",
        "finalString(s = 'i am on the top of the world')",
        "finalString(\"Hello, world\")",
        "finalString(s = 'mirpon')",
        "finalString(s = 'superhero')"
    ],
    "sample_168": [
        "isAcronym(words = [\"a\", \"b\", \"c\"], s = \"abc\")",
        "isAcronym(words = [\"North\", \"Atlantic\", \"Treaty\", \"Organization\"], s = \"NATO\")",
        "isAcronym(words = [\"abcd\", \"efgh\"], s = \"ab\")",
        "isAcronym(words = [\"H\", \"e\", \"l\", \"l\", \"o\"], s = \"HELLO\")",
        "isAcronym(words = [\"Apple\", \"Blueberry\", \"Cherry\"], s = \"ABC\")",
        "isAcronym(words = [\"CSP\", \"CSS\", \"JS\"], s = \"CSCS\")",
        "isAcronym(words = [\"Hi\", \"My\", \"Name\", \"is\", \"Bobi\"], s = \"HAN\")",
        "isAcronym(words = [\"c\", \"l\", \"u\", \"c\", \"h\"], s = \"chu\")",
        "isAcronym(words = [\"hat\", \"agility\"], s = \"HAA\")",
        "isAcronym(words = [\"lcm\", \"leet\", \"mq\"], s = \"lcm\")"
    ],
    "sample_201": [
        "minOperations(nums = [1,2,3], target = 4)",
        "minOperations(nums = [1,1,1,1], target = 4)",
        "minOperations(nums = [2, 4, 6], target = 9)",
        "minOperations(nums = [4, 2, 1, 3], target = 6)",
        "minOperations([1,1,1,1,1],5)",
        "minOperations(nums = [3, 4, 6, 9], target = 10)",
        "minOperations(nums = [3,5,2], target = 100)",
        "minOperations(nums = [2,5,7,11], target = 10)",
        "minOperations(nums = [10,30,20,10], target = 100)",
        "minOperations([5, 7, 2, 1, 2, 8, 8, 8, 3], 14)"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s = \"011\")",
        "maximumOddBinaryNumber(\"001\")",
        "maximumOddBinaryNumber(\"1101\")",
        "maximumOddBinaryNumber(s = '101010101')",
        "maximumOddBinaryNumber(s = '1010111')",
        "maximumOddBinaryNumber(s = '10111011')"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"100\")",
        "maximumOddBinaryNumber(s = '0011')",
        "maximumOddBinaryNumber(s = \"010\")",
        "maximumOddBinaryNumber(s = '11101')",
        "maximumOddBinaryNumber(\"10101\")",
        "maximumOddBinaryNumber(s = \"11\")",
        "maximumOddBinaryNumber(s = \"1110\")"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 2, target = 8)",
        "minimumPossibleSum(n = 4, target = 8)",
        "minimumPossibleSum(n = 4, target = 8)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 2, target = 6)",
        "minimumPossibleSum(n = 4, target = 20)"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"R2L3R\")",
        "furthestDistanceFromOrigin(moves = \"RRLLR\")",
        "furthestDistanceFromOrigin(moves = \"LLLLR\")",
        "furthestDistanceFromOrigin(\"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLRLR\")",
        "furthestDistanceFromOrigin(moves = \"RRUULR\")",
        "furthestDistanceFromOrigin(moves = \"RUDDLL\")",
        "furthestDistanceFromOrigin(moves = 'RLLL')"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 5, target = 1)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(2, 1)",
        "minimumPossibleSum(n=2, target=1)",
        "minimumPossibleSum(n=3, target=4)",
        "minimumPossibleSum(n=3, target=6)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 2, 1], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 5, 5], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 1, 0, 0], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 7, 10], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 5, 9, 1], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 4, 6, 8, 2, 3], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [100, 150, 90, 60, 100], target = 100)",
        "numberOfEmployeesWhoMetTarget(hours = [6, 9, 10, 3, 0, 8, 9], target = 5)"
    ],
    "sample_231": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [0, 1, 2])",
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [0,1,2])",
        "countWays(nums = [0, 2, 1, 3])",
        "countWays(nums = [1,2,4])",
        "countWays(nums = [0, 0, 0, 1])",
        "countWays([3, 4, 1, 5])",
        "countWays([2, 1, 1, 3])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"LL_R_\")",
        "furthestDistanceFromOrigin(moves = \"RLRLR\")",
        "furthestDistanceFromOrigin(moves = \"L_\")",
        "furthestDistanceFromOrigin(moves = \"LR_LR_R_\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLRL\")",
        "furthestDistanceFromOrigin(\"_LR\")",
        "furthestDistanceFromOrigin(moves = \"DRR\")",
        "furthestDistanceFromOrigin(moves = \"___LR_\")",
        "furthestDistanceFromOrigin(moves = \"RDRDRRR\")",
        "furthestDistanceFromOrigin(\"RLLRRRR\")"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 4, target = 4)",
        "minimumPossibleSum(n = 1, target = 4)",
        "minimumPossibleSum(n = 4, target = 5)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 2, target = 7)",
        "minimumPossibleSum(n = 4, target = 3)",
        "minimumPossibleSum(n=2, target=4)",
        "minimumPossibleSum(n=3, target=6)",
        "minimumPossibleSum(n = 1, target = 4)"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,1,1,1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 3, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 3, 1])",
        "countCompleteSubarrays(nums = [2, 2, 1, 2, 2, 2, 2, 1])"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 1, 1], m = 2)",
        "canSplitArray(nums = [1, 2, 3], m = 2)",
        "canSplitArray(nums = [1, 2, 3], m = 2)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 1, 2], m = 2)",
        "canSplitArray(nums = [1, 2, 4, 5], m = 5)",
        "canSplitArray(nums = [2, 4, 1, 3], m = 6)",
        "canSplitArray(nums = [1, 3, 1, 2, 1, 1], m = 5)",
        "canSplitArray(nums = [6, 3], m = 4)",
        "canSplitArray(nums = [4,2,1,2,1,1], m = 2)"
    ],
    "sample_200": [
        "minOperations(nums = [1, 2, 3], target = 4)",
        "minOperations(nums = [1, 2, 1], target = 4)",
        "minOperations(nums = [3, 3], target = 6)",
        "minOperations(nums = [3, 6, 9], target = 12)",
        "minOperations(nums = [4, 2, 1, 3], target = 3)",
        "minOperations(nums = [3, 5, 2, 4, 1], target = 8)",
        "minOperations(nums = [5,3,6], target = 8)",
        "minOperations(nums = [5, 5, 3, 2], target = 8)",
        "minOperations(nums = [4, 2, 2, 2, 2, 2, 2, 2, 2, 2], target = 30)",
        "minOperations(nums = [3, 6, 4, 12], target = 23)"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits([2, 4, 6, 8], 2)",
        "sumIndicesWithKSetBits(nums = [10, 15, 3, 7], k = 1)",
        "sumIndicesWithKSetBits(nums = [3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [2,3,5,6], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 5, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [5, 3, 6, 1, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 4, 6, 7, 12], k = 2)",
        "sumIndicesWithKSetBits(nums = [10, 15, 3, 7, 12], k = 2)"
    ],
    "sample_165": [
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"A\", \"B\", \"C\"], s = \"ABC\")",
        "isAcronym(words = [\"Apple\", \"Banana\", \"Orange\"], s = \"ABO\")",
        "isAcronym(words = [\"The\", \"Quick\", \"Brown\", \"Fox\"], s = \"TQBF\")",
        "isAcronym(words = ['e', 'e', 'e'], s = 'EEE')",
        "isAcronym(words = [\"H\", \"R\", \"O\", \"O\"], s = \"HRO\")",
        "isAcronym(words = [\"People\", \"Love\", \"Us\"], s = \"PLU\")",
        "isAcronym(words = ['A', 'L', 'G'], s = \"ALG\")",
        "isAcronym(words = [\"Army\", \"China\", \"USA\"], s = \"ACUS\")",
        "isAcronym(words = [\"d\", \"b\", \"n\", \"m\"], s = \"dbn\")"
    ],
    "sample_227": [
        "countWays(nums = [-1, 0, 1, 2, -1, -4])",
        "countWays(nums = [-1, 0, 1, 2, -1, -4])",
        "countWays(nums = [0, 1, 2])",
        "countWays(nums = [1,3,2])",
        "countWays(nums = [-10, 0, 10])",
        "countWays(nums = [0, 1, 2, 4, 5, 6])",
        "countWays(nums = [1,3,4])",
        "countWays(nums = [-2, 0, 2, 3, 6])",
        "countWays([1,2,3,0])",
        "countWays(nums = [-10, -9, 1, 2, 3])"
    ],
    "sample_158": [
        "maxSum(nums = [10, 2])",
        "maxSum(nums = [10, 2])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [2, 5, 2])",
        "maxSum(nums = [9, 99, 999, 9999])",
        "maxSum(nums = [10, 9, 2, 5, 3, 7, 1, 6, 8])",
        "maxSum(nums = [-2, -3, -5, -7, -11])",
        "maxSum(nums = [1, 2, 3, -5, 6])",
        "maxSum(nums = [4, -2, -7, 8])",
        "maxSum([-10, -1, 2, 8, 9])"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1, 0, 1, 0, 0], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,2], k = 1)",
        "longestEqualSubarray(nums = [1, 0, 1, 0, 1, 0, 1], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,0,1,2,3,4,5,6], k = 2)",
        "longestEqualSubarray(nums = [2,2,2,1,1,1,2,2,2,2], k = 1)",
        "longestEqualSubarray(nums = [1, 1, 1, 2, 2, 2, 2, 3, 3], k = 2)",
        "longestEqualSubarray(nums = [2, 2, 2, 1, 1, 1, 1, 1, 1, 1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,2,3,4,5,6,7], k = 2)"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [3, 2, 1]])",
        "maximizeTheProfit(n = 4, offers = [[1,2,3],[2,3,4],[3,4,5]])",
        "maximizeTheProfit(n = 2, offers = [[1, 2, 1], [1, 2, 2]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 4], [1, 3, 5], [2, 3, 6]])",
        "maximizeTheProfit(n = 3, offers = [[1,2,3], [4,5,6], [7,8,9]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,1],[1,1,1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [3, 2, 3]])",
        "maximizeTheProfit(n = 2, offers = [[1, 2, 6], [2, 5, 2]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [2, 3, 4], [1, 5, 2], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 5, 2], [2, 3, 5], [2, 4, 1], [3, 2, 4]])"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 4, 3, 2])",
        "maxIncreasingGroups(x = [1,4,3,2])",
        "maxIncreasingGroups(x = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])",
        "maxIncreasingGroups(x = [0, 1, 2, 0, 1, 2])",
        "maxIncreasingGroups(x = [1,3,2,4,2])",
        "maxIncreasingGroups(x = [3,1,2,5,4])",
        "maxIncreasingGroups(x = [2, 2, 2, 6, 7, 7, 7, 8, 9, 9])",
        "maxIncreasingGroups(x = [2,1,2,5,1,2,7,8,1,2])"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8,9,10], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8, 16, 32], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [3, 1, 2, 5, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 5, 3, 7, 11], k = 3)",
        "sumIndicesWithKSetBits([3, 1, 5, 9], 2)",
        "sumIndicesWithKSetBits(nums = [2,3,6,9,11,13], k = 2)"
    ],
    "sample_207": [
        "minimumOperations(num = \"100\")",
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"12\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"1001\")",
        "minimumOperations(num = \"35\")",
        "minimumOperations(num = \"1235\")",
        "minimumOperations(\"10\")",
        "minimumOperations(num = \"19\")"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"R\")",
        "furthestDistanceFromOrigin(\"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"LR\")",
        "furthestDistanceFromOrigin(moves = \"LLLLL\")",
        "furthestDistanceFromOrigin(\"LDR\")",
        "furthestDistanceFromOrigin(\"LLRLRLLL\")"
    ],
    "sample_206": [
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"100\")",
        "minimumOperations(num = \"12\")",
        "minimumOperations(num = \"01\")",
        "minimumOperations(num = \"5\")",
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"200\")",
        "minimumOperations(num = '125')",
        "minimumOperations(num = \"775\")",
        "minimumOperations(num = \"1101\")"
    ],
    "sample_155": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [2, 3, 1, 2, 4], m = 4)",
        "canSplitArray(nums = [1,1,1,1,2], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 2)",
        "canSplitArray(nums = [1, 1, 3], m = 4)",
        "canSplitArray(nums = [2, 5, 2, 3, 5, 7], m = 6)",
        "canSplitArray(nums = [1,2,3,4], m = 4)",
        "canSplitArray(nums = [1, 1, 1], m = 2)",
        "canSplitArray(nums = [1, 2], m = 2)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 4)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 2])",
        "countCompleteSubarrays(nums = [0, 1, 2, 0, 1, 2])",
        "countCompleteSubarrays(nums = [0, 0, 1, 1, 1])",
        "countCompleteSubarrays(nums = [2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [2,2,1,2])",
        "countCompleteSubarrays(nums = [0, 0, 1, 1, 0])"
    ],
    "sample_202": [
        "minimumOperations(num = \"0\")",
        "minimumOperations(num = \"75\")",
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"22\")",
        "minimumOperations(num = \"100\")",
        "minimumOperations(\"12345\")",
        "minimumOperations(num = \"03\")",
        "minimumOperations(num = \"01234567\")",
        "minimumOperations(num = \"002\")",
        "minimumOperations(\"1205\")"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [\"this\", \"is\", \"a\", \"test\"], b = \" \")",
        "splitWordsBySeparator(a = [\"banana\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"1\", \"2\", \"3\"], b = \"-\")",
        "splitWordsBySeparator(a = [\"a\", \"bb\", \"ccc\", \"dddd\"], b = \"b\")",
        "splitWordsBySeparator(a = [\"a,b,c\", \"d,e\"], b = \",\")",
        "splitWordsBySeparator(a = [\"word\", \"word\", \"word\"], b = \"o\")",
        "splitWordsBySeparator(a = [\"red\", \"green\", \"blue\"], b = \"e\")",
        "splitWordsBySeparator(a = [\"hello\", \"world\", \"foo\", \"bar\"], b = \",\")",
        "splitWordsBySeparator(a = [\"hey\", \"hey\"], b = \"\")",
        "splitWordsBySeparator(a = [\"12\", \"--\", \"--12\"], b = \"--\")"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 4, 6], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 4, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 10, 11, 15], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 2, 9, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 10, 2, 5, 3], k = 2)"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '100')",
        "maximumOddBinaryNumber(s = '011')",
        "maximumOddBinaryNumber(s = \"1234\")",
        "maximumOddBinaryNumber(s = '111')",
        "maximumOddBinaryNumber(s = \"111000\")",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"13\")",
        "maximumOddBinaryNumber(s = 'ba')",
        "maximumOddBinaryNumber(s = \"0100101\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,2,1,2,1,2,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3], k = 3)",
        "longestEqualSubarray(nums = [1,2,2,2,1,1,2], k = 2)",
        "longestEqualSubarray(nums = [1,0,1,0,1,0,1,1,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,0,1,0,0,1], k = 1)",
        "longestEqualSubarray(nums = [1,2,1,1,1,1,1,1,1,1], k = 2)",
        "longestEqualSubarray(nums = [4,2,2,4,1,4,4], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,4,3,4,5,3,4,5,6], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,2,3,2,2,2,3], k = 2)"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1,0,1,0,0], k = 1)",
        "longestEqualSubarray(nums = [1, 0, 1, 1, 0], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 4, 1, 2], k = 3)",
        "longestEqualSubarray(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 3)",
        "longestEqualSubarray(nums = [1,0,1,0,1,1,0], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,1,2,3], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,1,1,1,1], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 4, 5, 6], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 4, 2, 3, 7, 2], k = 3)",
        "longestEqualSubarray(nums = [1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,1,0,0,0,1,1,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], k = 2)"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = \"1001\")",
        "maximumOddBinaryNumber(s = '111')",
        "maximumOddBinaryNumber(s = \"11001\")",
        "maximumOddBinaryNumber(s = \"01\")",
        "maximumOddBinaryNumber(s = \"111000\")",
        "maximumOddBinaryNumber(s = 'abcd')",
        "maximumOddBinaryNumber(\"1010\")",
        "maximumOddBinaryNumber(\"0001\")",
        "maximumOddBinaryNumber(s = '00010')",
        "maximumOddBinaryNumber(s = '110100101')"
    ],
    "sample_166": [
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"a\", \"b\", \"c\"], s = \"abc\")",
        "isAcronym(words = [\"a\", \"b\", \"c\"], s = \"abc\")",
        "isAcronym(words = [\"a\", \"b\", \"c\"], s = \"abc\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"the\", \"quick\", \"brown\", \"fox\"], s = \"tqbf\")",
        "isAcronym(words = [\"world\", \"wide\", \"web\"], s = \"ww\")",
        "isAcronym(words = [\"Foo\", \"Bar\", \"Baz\"], s = \"FB\")",
        "isAcronym(words = [\"Laser\", \"Numerical\", \"Algorithm\"], s = \"LNA\")"
    ],
    "sample_163": [
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [-1, -2, -3, -4, -5])",
        "maxSum(nums = [-9, -9, 9, 9])",
        "maxSum([-10, -10, 10])",
        "maxSum([-2147483647, 2147483647])",
        "maxSum(nums = [5,2,4,5,3])",
        "maxSum(nums = [-23, -12, 3, 2, 10])",
        "maxSum(nums = [12, 35, 6, 9, 5])",
        "maxSum(nums = [34, 3, 98, 6, 8, 0, -15])"
    ]
}