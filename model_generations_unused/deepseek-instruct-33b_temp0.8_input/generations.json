{
    "sample_287": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"\", s2 = \"\", s3 = \"\")",
        "findMinimumOperations(s1 = \"\", s2 = \"\", s3 = \"\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1=\"abc\", s2=\"abd\", s3=\"abe\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"bana\", s3 = \"ban\")",
        "findMinimumOperations(s1 = \"aa\", s2 = \"ab\", s3 = \"ac\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"aac\", s3 = \"aad\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"cdef\", s3 = \"ghij\")"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"aabbbcc\")",
        "longestSemiRepetitiveSubstring(s = \"aabbb\")",
        "longestSemiRepetitiveSubstring(s = \"aabbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcba\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbbc\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbaaa\")",
        "longestSemiRepetitiveSubstring(s = \"bbbb\")",
        "longestSemiRepetitiveSubstring(s = \"baaabbbaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbaa\")",
        "longestSemiRepetitiveSubstring(s = \"acbbcac\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"def\", \"ghi\"])",
        "maximumNumberOfStringPairs(words=[])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\"])",
        "maximumNumberOfStringPairs(words = [\"b\", \"a\", \"n\", \"a\", \"n\", \"a\"])",
        "maximumNumberOfStringPairs(words = [\"foo\", \"bar\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"cba\",\"abc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bca\", \"cab\"])",
        "maximumNumberOfStringPairs(words=[\"aaa\", \"bbb\"])",
        "maximumNumberOfStringPairs(words = [\"an\", \"na\", \"banana\", \"apple\"])"
    ],
    "sample_247": [
        "minOperations(s1 = \"abc\", s2 = \"abd\", x = 2)",
        "minOperations(s1 = \"abc\", s2 = \"abd\", x = 2)",
        "minOperations(s1 = \"abc\", s2 = \"abc\", x = 2)",
        "minOperations(s1 = \"abc\", s2 = \"acb\", x = 2)",
        "minOperations(s1 = \"aab\", s2 = \"aab\", x = 1)",
        "minOperations(s1 = \"aba\", s2 = \"bba\", x = 1)",
        "minOperations(s1 = \"aba\", s2 = \"baa\", x = 1)",
        "minOperations(s1=\"abc\", s2=\"bcd\", x=10)",
        "minOperations(s1 = \"aaaa\", s2 = \"bbbb\", x = 10)",
        "minOperations(s1 = \"011010\", s2 = \"100110\", x = 1)"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"def\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"cba\",\"ab\",\"bc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\", \"xyz\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"oo\", \"ok\", \"ok\", \"oo\"])",
        "maximumNumberOfStringPairs(words=[\"ab\", \"ba\", \"cc\", \"cd\"])",
        "maximumNumberOfStringPairs(words=[\"abc\", \"cba\", \"dad\", \"add\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\", \"yxz\", \"pqrs\"])",
        "maximumNumberOfStringPairs(words = [\"nar\", \"bear\", \"ra\", \"rna\"])"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3,4,4])",
        "minGroupsForValidAssignment(nums = [2,2,1,1,5,5,3,3,5,5])",
        "minGroupsForValidAssignment(nums = [1,2,3,3,3,4,4,4,4])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [1, 2, 1])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 3, 3, 4, 4, 4, 4])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1,2,1,1,2,1])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n=10, m=3)",
        "differenceOfSums(n = 6, m = 3)",
        "differenceOfSums(n = 6, m = 3)"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"000111\", k = 2)",
        "shortestBeautifulSubstring(s = \"110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"11111\", k = 2)",
        "shortestBeautifulSubstring(s='110011', k=2)",
        "shortestBeautifulSubstring(s = '100011', k = 2)",
        "shortestBeautifulSubstring(s = '100011', k = 2)",
        "shortestBeautifulSubstring(s = '0110011', k = 2)",
        "shortestBeautifulSubstring(s = \"0111000011\", k = 2)",
        "shortestBeautifulSubstring(s = \"1000010011\", k = 3)",
        "shortestBeautifulSubstring(s = '1111110011011', k = 3)"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"ab\")",
        "findMinimumOperations(s1=\"a\", s2=\"b\", s3=\"c\")",
        "findMinimumOperations(s1 = \"aa\", s2 = \"bb\", s3 = \"cc\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"efgh\", s3 = \"ijkl\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"ab\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"xy\", s2 = \"x\", s3 = \"y\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"abc\", s3 = \"efg\")",
        "findMinimumOperations(s1 = \"apple\", s2 = \"apricot\", s3 = \"applepie\")",
        "findMinimumOperations(s1=\"ba\", s2=\"b\", s3=\"baba\")"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"aabbbcc\")",
        "longestSemiRepetitiveSubstring(s = \"aabbb\")",
        "longestSemiRepetitiveSubstring(s = \"aabbb\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbbaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbbccc\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbbc\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbbaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbccc\")",
        "longestSemiRepetitiveSubstring(s = \"baaana\")",
        "longestSemiRepetitiveSubstring(s = \"abcbaa\")"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 0, 6])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [4, 5, 6, 7, 8])",
        "minSum(nums1 = [1, 2, 3, 0, 5], nums2 = [1, 0, 2, 3, 5])",
        "minSum(nums1 = [2, 1, 2, 1], nums2 = [1, 2, 1, 2])",
        "minSum(nums1 = [3, 4, 4], nums2 = [2, 0, 5])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [0, 0, 0, 1])",
        "minSum(nums1 = [1, 2, 0, 2], nums2 = [1, 1, 1, 0])",
        "minSum(nums1 = [2, 1, 3, 0, 5], nums2 = [1, 2, 2, 5, 0])"
    ],
    "sample_289": [
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"00\")",
        "minimumSteps(s = \"11111\")",
        "minimumSteps(s=\"00000\")"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [0, 0, 0, 0])",
        "maximumTripletValue(nums = [0,0,0])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6])",
        "maximumTripletValue(nums = [0, 2, 1])",
        "maximumTripletValue(nums = [1, 0, 1])",
        "maximumTripletValue(nums = [5, 3, 2, 1])",
        "maximumTripletValue(nums = [3, 1, 2, 4, 5])"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"\", k = 1)",
        "beautifulSubstrings(s = \"\", k = 1)",
        "beautifulSubstrings(s = \"\", k = 1)",
        "beautifulSubstrings(s = \"\", k = 2)",
        "beautifulSubstrings(s=\"\", k=1)",
        "beautifulSubstrings(s=\"aeiou\", k=1)",
        "beautifulSubstrings(s = \"\", k = 4)",
        "beautifulSubstrings(s=\"banana\", k=1)",
        "beautifulSubstrings(s = \"aeioua\", k = 2)",
        "beautifulSubstrings(s = \"bbaa\", k = 2)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"0110\")",
        "minimumBeautifulSubstrings(s = \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s = \"101101101\")",
        "minimumBeautifulSubstrings(s = \"1011011\")",
        "minimumBeautifulSubstrings(s = \"00101\")",
        "minimumBeautifulSubstrings(s = \"10110101\")",
        "minimumBeautifulSubstrings(s = \"1111001\")",
        "minimumBeautifulSubstrings(s = \"1101000\")",
        "minimumBeautifulSubstrings(s = \"110110110\")",
        "minimumBeautifulSubstrings(s = \"11110000011000010100111110010101010010101111110001011110011111000111111101111100111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    ],
    "sample_313": [
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(a = [[1,2],[3,4]])",
        "matrixSum(a = [[1, 2, 3], [3, 2, 1], [2, 2, 2]])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minSum(nums1 = [1,2,3], nums2 = [1,2,3])",
        "minSum(nums1 = [1,2,3], nums2 = [3,2,1])",
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 0, 1])",
        "minSum(nums1 = [3, 2, 0], nums2 = [1, 1, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 4, 0])",
        "minSum(nums1 = [2, 1, 0], nums2 = [0, 3, 4])",
        "minSum(nums1 = [3, 1, 0, 2], nums2 = [3, 1, 0, 2])",
        "minSum(nums1 = [0, 0, 1, 3], nums2 = [1, 2])"
    ],
    "sample_282": [
        "minOperations(nums1 = [1,2,3], nums2 = [1,2,3])",
        "minOperations(nums1 = [2, 10, 6, 4, 8, 1], nums2 = [3, 1, 1])",
        "minOperations(nums1 = [2, 10, 6, 4, 8, 1], nums2 = [3, 1, 1])",
        "minOperations(nums1 = [2, 3, 4], nums2 = [5, 6, 7])",
        "minOperations(nums1 = [2, 10, 6, 4, 8, 1], nums2 = [3, 7, 1, 10, 5, 2])",
        "minOperations(nums1 = [3, 5], nums2 = [2, 1])",
        "minOperations(nums1=[2,3,5], nums2=[1,1,5])",
        "minOperations(nums1 = [2,3], nums2 = [2,4])",
        "minOperations(nums1 = [2, 3, 4], nums2 = [3, 2, 4])",
        "minOperations(nums1 = [2, 1, 3, 5], nums2 = [3, 3, 1, 4])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 2, 3, 4, 3, 4, 5])",
        "alternatingSubarray(nums = [3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3])",
        "alternatingSubarray(nums = [3, 4, 5, 3, 4, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1,3,2,4,3,2,1])",
        "alternatingSubarray(nums = [1, 3, 5, 7, 4, 2, 0])",
        "alternatingSubarray(nums = [1,2,3,4,5,7,8,9,10,11])",
        "alternatingSubarray(nums = [1,2,3,4,3,2,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 2, 1, 1, 2, 3, 3, 2, 1, 1, 2, 3, 3, 2, 1, 1, 2, 3, 3, 2, 1])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 2], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2], money = 1)",
        "buyChoco(prices = [1,1,5], money = 6)",
        "buyChoco(prices = [1,2,3], money = 1)",
        "buyChoco(prices=[1, 2, 2], money=5)",
        "buyChoco(prices = [2, 1], money = 2)",
        "buyChoco(prices = [3,2,1], money = 5)",
        "buyChoco(prices = [1,1,5,5], money = 3)"
    ],
    "sample_302": [
        "countSeniors(details = [\"Alice,25,Engineer\", \"Bob,65,Doctor\", \"Charlie,70,Teacher\", \"David,30,Nurse\"])",
        "countSeniors(details = [\"1234567890AB50\", \"1234567890CD62\", \"1234567890EF65\", \"1234567890GH70\"])",
        "countSeniors(details = [\"Mike, 55\", \"Jill, 75\", \"John, 67\", \"Jack, 60\"])",
        "countSeniors(details = [\"John,30,M\", \"Jane,65,F\", \"Bob,80,M\", \"Jill,70,F\"])",
        "countSeniors(details = [\"Sarah-35\", \"John-65\", \"Anna-60\"])",
        "countSeniors(details = [\"John,18\", \"Jane,65\", \"Doe,92\", \"Mary,35\"])",
        "countSeniors(details = [\"John:19:M\", \"Jane:67:F\", \"Doe:63:M\"])",
        "countSeniors(details = [\"Sue,22,Female\", \"Ann,65,Female\", \"John,35,Male\"])",
        "countSeniors(details = [\"john 20 male\", \"lily 65 female\", \"james 30 male\", \"sophia 70 female\"])",
        "countSeniors(details = [\"Mike-34-Developer\", \"Alan-65-Manager\", \"Zach-38-Artist\"])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"\", k = 2)",
        "beautifulSubstrings(s = \"\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"ba\", k = 2)",
        "beautifulSubstrings(s = \"aaa\", k = 1)",
        "beautifulSubstrings(s = \"aeiaaiooo\", k = 4)",
        "beautifulSubstrings(s=\"abc\", k=1)"
    ],
    "sample_255": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [1,2,3,4])",
        "minimumSum(nums = [2,3,4,5,6])",
        "minimumSum(nums = [3,0,2,1,2])",
        "minimumSum(nums = [2,5,7])",
        "minimumSum(nums = [2,5,1,6,3])",
        "minimumSum(nums = [4, 1, 7, 5])",
        "minimumSum(nums = [5, 3, 7, 6])"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [1,2,2,3,3,4,4,5,5])",
        "minGroupsForValidAssignment(nums = [2,3,4,4,5,6])",
        "minGroupsForValidAssignment(nums = [2,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,2,3,3,3,4,4,4,4])",
        "minGroupsForValidAssignment(nums = [2,2,3,3,4])",
        "minGroupsForValidAssignment(nums=[2,3,4,4,5,6])",
        "minGroupsForValidAssignment(nums = [2,3,3,4,4,4,4,7,7,7,12,12,13])",
        "minGroupsForValidAssignment(nums = [4,2,2,2,2,2,2,2,2,2,2])"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1, 2, 3])",
        "alternatingSubarray(nums = [1,2,3])",
        "alternatingSubarray(nums = [1,2,1,2])",
        "alternatingSubarray(nums = [3,2,3,4,5,4])",
        "alternatingSubarray(nums = [2,3,4,5,6])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,5,4,3,2,1])",
        "alternatingSubarray(nums = [3, 4])",
        "alternatingSubarray(nums=[1, 2, 3, 5])",
        "alternatingSubarray(nums = [2, 3, 2, 3, 2])",
        "alternatingSubarray(nums = [5, 3, 4, 2, 1, 0])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = \"11011\", k = 2)",
        "shortestBeautifulSubstring(s = \"110011\", k = 2)",
        "shortestBeautifulSubstring(s = '1011', k = 2)",
        "shortestBeautifulSubstring(s = \"11001\", k = 2)",
        "shortestBeautifulSubstring(s = '11001', k = 2)",
        "shortestBeautifulSubstring(s = '111111', k = 2)",
        "shortestBeautifulSubstring(s = '1110011', k = 2)",
        "shortestBeautifulSubstring(s = \"11010111\", k = 2)",
        "shortestBeautifulSubstring(s=\"101111\", k=2)",
        "shortestBeautifulSubstring(s = \"111001111001\", k = 2)"
    ],
    "sample_293": [
        "minimumSteps(s = \"01\")",
        "minimumSteps(s = \"01\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"0001\")",
        "minimumSteps(s = \"00\")",
        "minimumSteps(s = \"011\")",
        "minimumSteps(s = \"10010\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"aabbb\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaabbaa\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbba\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbba\")",
        "longestSemiRepetitiveSubstring(s = \"bbbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcd\")",
        "longestSemiRepetitiveSubstring(s = \"bababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababbaa\")"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [2,2,3,3,3,4])",
        "minGroupsForValidAssignment(nums = [2,2,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [2,2,3,3,3,4,4,4,4])",
        "minGroupsForValidAssignment(nums = [1, 2, 1, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6])",
        "minGroupsForValidAssignment(nums = [2,3,4,5,1,2,3,3,5,6,7,8,8])"
    ],
    "sample_307": [
        "countSeniors(details = [\"Alice,32\", \"Bob,65\", \"Charlie,80\"])",
        "countSeniors(details = [\"John,32\", \"Jane,65\", \"Jim,70\"])",
        "countSeniors(details = [\"1234567801\", \"1234567860\", \"1234567895\"])",
        "countSeniors(details = [\"John:55\", \"Jane:62\", \"Sally:51\", \"Bob:65\"])",
        "countSeniors(details = [\"Jim:45\", \"Fred:70\", \"Sheila:61\", \"John:55\"])",
        "countSeniors(details = [\"John 40\", \"Sally 61\", \"Bob 62\", \"Anne 35\"])",
        "countSeniors(details = [\"Clark Kent\", \"Wanda Maximoff\", \"Barry Allen\", \"Ray Palmer\", \"Hal Jordan\"])",
        "countSeniors(details = [\"Jane,1890\", \"John,1980\", \"George,1700\"])",
        "countSeniors(details = [\"john79\", \"david55\", \"frank99\"])",
        "countSeniors(details = [\"2526Bob\", \"6198Sally\", \"1001Alice\"])"
    ],
    "sample_290": [
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"11111\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"01\")",
        "minimumSteps(s = \"1\")",
        "minimumSteps(s = \"010010\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,2,3], moveTo = [2,3,1])",
        "relocateMarbles(nums = [1,2,3,2,1], moveFrom = [1,2,3], moveTo = [2,3,1])",
        "relocateMarbles(nums = [1,1,2,2,3,3], moveFrom = [1,2,3], moveTo = [2,1,3])",
        "relocateMarbles(nums = [2,2,3,3], moveFrom = [2,3], moveTo = [1,1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 1, 2], moveTo = [2, 3, 3])",
        "relocateMarbles(nums = [1,1,2], moveFrom = [1,2], moveTo = [2,3])",
        "relocateMarbles(nums = [1,2,3,1], moveFrom = [1,2], moveTo = [2,3])",
        "relocateMarbles(nums = [1,1,2,3,3,3], moveFrom = [1,3,3], moveTo = [2,2,2])",
        "relocateMarbles(nums = [2, 3, 2, 1], moveFrom = [2, 3], moveTo = [1, 1])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [1,2,3,4,5], moveTo = [2,2,3,2,4])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [3, 4, 5, 3, 7])",
        "alternatingSubarray(nums = [1, 3, 5])",
        "alternatingSubarray(nums = [3,4,5,3,7])",
        "alternatingSubarray(nums = [1, 1])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7])",
        "alternatingSubarray(nums=[1,2])",
        "alternatingSubarray(nums = [1, 3, 5, 4])",
        "alternatingSubarray(nums = [2, 4, 6, 7, 9, 10])",
        "alternatingSubarray(nums = [1, 3, 1, 1, 2])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeioua\", k = 2)",
        "beautifulSubstrings(s = \"aeioua\", k = 2)",
        "beautifulSubstrings(s = \"aeioua\", k = 3)",
        "beautifulSubstrings(s = \"abcde\", k = 2)",
        "beautifulSubstrings(s = \"aeiouaie\", k = 4)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [1,2,4,8])",
        "maximumTripletValue(nums = [2,2,3,3])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words=[\"ab\", \"ba\", \"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"lc\", \"cl\", \"gg\"])",
        "maximumNumberOfStringPairs(words = [\"lc\", \"cl\", \"gg\"])",
        "maximumNumberOfStringPairs(words = [\"cd\",\"dc\",\"ll\",\"xx\"])",
        "maximumNumberOfStringPairs(words = [\"cd\",\"ab\",\"dc\",\"ba\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"dc\", \"ll\", \"ld\", \"lc\"])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 10, m = 5)"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 1)",
        "buyChoco(prices = [1, 2, 3], money = 2)",
        "buyChoco(prices = [1, 1], money = 1)",
        "buyChoco(prices = [1, 2], money = 2)",
        "buyChoco(prices = [1,2,3], money = 4)",
        "buyChoco(prices = [1, 2, 3, 4], money = 7)",
        "buyChoco(prices = [10, 20, 30], money = 35)",
        "buyChoco(prices = [5, 1, 1], money = 2)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"def\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bbb\"])",
        "maximumNumberOfStringPairs(words=[\"aa\", \"bb\", \"bb\", \"cc\", \"aa\"])",
        "maximumNumberOfStringPairs(words = ['abc', 'cba', 'def', 'fed', 'efd'])"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"aabbbcc\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbcc\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbcc\")",
        "longestSemiRepetitiveSubstring(s = \"aabbc\")",
        "longestSemiRepetitiveSubstring(s = \"abcd\")",
        "longestSemiRepetitiveSubstring(s = \"abbbcc\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbba\")",
        "longestSemiRepetitiveSubstring(s = \"baaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbbccd\")",
        "longestSemiRepetitiveSubstring(s = \"abcbbcba\")"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"aa\", \"ab\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ab\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"b\",\"a\",\"n\",\"a\",\"n\",\"a\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"bd\",\"efg\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"bcd\", \"abcd\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"bc\",\"abc\",\"b\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"bca\",\"aaa\"])",
        "minimizeConcatenatedLength(words=[\"aa\", \"b\", \"bbb\"])",
        "minimizeConcatenatedLength(words = [\"ap\", \"bp\", \"cp\"])",
        "minimizeConcatenatedLength(words = [\"aa\",\"ba\",\"cc\",\"dc\"])"
    ],
    "sample_323": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 2)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 12)",
        "isFascinating(n = 12)",
        "isFascinating(n = 0)",
        "isFascinating(n = 7)",
        "isFascinating(n = 372)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"abcba\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaabbaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"baaab\")",
        "longestSemiRepetitiveSubstring(s = \"baaabbabbb\")",
        "longestSemiRepetitiveSubstring(s = \"abbbaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbabba\")",
        "longestSemiRepetitiveSubstring(s = \"abbabac\")",
        "longestSemiRepetitiveSubstring(s = \"abbbaabbab\")",
        "longestSemiRepetitiveSubstring(s = \"bbacb\")"
    ],
    "sample_305": [
        "countSeniors(details = [])",
        "countSeniors(details = [])",
        "countSeniors(details=[\"1234567890JOHN0123456789016\"])",
        "countSeniors(details = [\"John#25#Male\", \"Jane#65#Female\", \"Mark#45#Male\"])",
        "countSeniors(details = [\"Name:John,Age:70,City:London\",\"Name:Adam,Age:20,City:Paris\",\"Name:Mary,Age:45,City:Berlin\"])",
        "countSeniors(details = [\"Janet Smith,55\", \"Ethan Johnson,34\", \"Gerard Monroe,71\"])",
        "countSeniors(details=[\"john56\", \"david67\", \"andrew23\"])",
        "countSeniors(details = [\"Tom Cruise, 54, Hired\", \"Harrison Ford, 78, Hired\", \"Christian Bale, 42, Hired\", \"Brad Pitt, 55, Hired\"])",
        "countSeniors(details = [\"Name:Jon Age:40\", \"Name:Tom Age:67\", \"Name:Jessica Age:15\"])",
        "countSeniors(details = [\"S001-Joe-65\", \"S002-David-35\", \"S003-Mike-27\", \"S004-Steve-72\"])"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 1, 3])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 1, 3])",
        "minGroupsForValidAssignment(nums = [2,2,3,3,3,4])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 4])",
        "minGroupsForValidAssignment(nums = [2, 3, 3, 2, 2, 3])",
        "minGroupsForValidAssignment(nums = [3,2,3,3,1,1])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 2, 3, 4, 4, 4, 4])",
        "minGroupsForValidAssignment(nums = [2,2,2,2,2,1,1,1,1,1])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4])",
        "minGroupsForValidAssignment(nums = [2,2,1,1,3,3,2,2,4,4])"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1,2,3])",
        "minimumSum(nums = [1, 2, 1, 3])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSum(nums = [3, 2, 1])",
        "minimumSum(nums = [4, 3, 2, 1])",
        "minimumSum(nums = [3, 2, 1, 5, 6])"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"dog\"])",
        "maximumNumberOfStringPairs(words = [\"oo\", \"ok\", \"ko\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bbb\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"bb\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"efg\", \"gfe\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"ba\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"mq\", \"px\", \"zy\", \"yz\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bac\", \"bca\"])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = \"11011\", k = 2)",
        "shortestBeautifulSubstring(s='110011', k=2)",
        "shortestBeautifulSubstring(s = '1101011', k = 2)",
        "shortestBeautifulSubstring(s = \"10101\", k = 2)",
        "shortestBeautifulSubstring(s = '1011101', k = 2)",
        "shortestBeautifulSubstring(s = '110101', k = 2)",
        "shortestBeautifulSubstring(s = \"11001111\", k = 2)",
        "shortestBeautifulSubstring(s='1100011', k=2)",
        "shortestBeautifulSubstring(s = '011011100', k = 3)",
        "shortestBeautifulSubstring(s = \"111000101010\", k = 3)"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [5, 3, 1, 9, 8], limit = 2)",
        "lexicographicallySmallestArray(nums = [9, 8, 5, 3, 1], limit = 2)",
        "lexicographicallySmallestArray(nums = [9, 3, 5, 1, 8], limit = 2)",
        "lexicographicallySmallestArray(nums = [5, 1, 9, 3, 8], limit = 2)",
        "lexicographicallySmallestArray(nums = [3, 8, 1, 5, 9], limit = 4)",
        "lexicographicallySmallestArray(nums = [1, 9, 3, 8, 5], limit = 2)",
        "lexicographicallySmallestArray(nums = [3, 5, 9, 1, 8], limit = 2)",
        "lexicographicallySmallestArray(nums=[5, 3, 1, 8, 9], limit=2)",
        "lexicographicallySmallestArray(nums = [5, 9, 1, 3, 8], limit = 4)",
        "lexicographicallySmallestArray(nums = [8, 5, 3, 9, 1], limit = 4)"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[1, 1, 1], [1, 1, 1], [1, 1, 1]])",
        "matrixSum(a = [[1, 0], [0, 1]])",
        "matrixSum(a = [[1, 0], [0, 1]])",
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum(a = [[1, 2, 3], [1, 2, 3]])",
        "matrixSum(a = [[0, 0, 1], [0, 1, 0], [1, 0, 0]])",
        "matrixSum(a = [[0, 1], [2, 1]])"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiaaiooo\", k = 5)",
        "beautifulSubstrings(s = \"aeio\", k = 3)",
        "beautifulSubstrings(s = \"aabae\", k = 2)",
        "beautifulSubstrings(s=\"aaeiou\", k=3)",
        "beautifulSubstrings(s = \"aaeaeaeae\", k = 3)"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\", \"cba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\", \"cba\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"xyz\", \"zyx\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\", \"xyz\", \"zyx\", \"fgh\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"n\",\"an\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xy\", \"yx\", \"pq\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bca\", \"xy\", \"yx\", \"zzz\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abc\", \"bca\", \"bac\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\", \"ghi\", \"igh\", \"xyz\"])"
    ],
    "sample_325": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 157)",
        "isFascinating(n = 157)",
        "isFascinating(n = 157)",
        "isFascinating(n = 156)",
        "isFascinating(n = 37)",
        "isFascinating(n = 8)"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 1, 1, 1])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6])",
        "maximumTripletValue(nums = [1,2,3,4])",
        "maximumTripletValue(nums = [1, 2, 6, 5, 3])",
        "maximumTripletValue(nums = [1, 0, 1, 0, 1])",
        "maximumTripletValue(nums = [1, 2, 6, 5, 7, 10])",
        "maximumTripletValue(nums = [5,3,2,5])",
        "maximumTripletValue(nums = [3, 6, 8, 10, 7, 5, 2])"
    ],
    "sample_312": [
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums=[[1]])",
        "matrixSum(nums = [[1], [2], [3]])",
        "matrixSum(nums = [[1], [1], [1]])",
        "matrixSum(nums = [[1], [2]])",
        "matrixSum(nums=[[1, 3, 1], [1, 5, 1], [4, 2, 1]])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3, 4], b = [1, 2, 3, 5])",
        "minOperations(a = [1,2,3,4], b = [1,2,3,4])",
        "minOperations(a = [3, 2, 1], b = [1, 2, 3])",
        "minOperations(a = [1,2,3], b = [2,3,1])",
        "minOperations(a = [1, 2, 3, 4, 5, 6], b = [1, 2, 3, 4, 5, 6])",
        "minOperations(a=[3,2,4,1,5], b=[2,5,3,4,1])",
        "minOperations(a = [3, 1, 2], b = [1, 2, 3])",
        "minOperations(a = [1,2,3,4,5,6], b = [1,2,3,5,4,7])",
        "minOperations(a = [2, 1, 5, 4], b = [3, 1, 7, 6])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,2,3,4,5,6])",
        "minOperations(nums1 = [1,3,5,4], nums2 = [1,2,3,7])",
        "minOperations(nums1 = [2,3,1,4,5], nums2 = [3,4,5,1,2])",
        "minOperations(nums1 = [2,3,1,4,5], nums2 = [3,4,5,1,2])",
        "minOperations(nums1=[1,2,3], nums2=[3,2,1])",
        "minOperations(nums1 = [2, 3, 1], nums2 = [4, 5, 6])",
        "minOperations(nums1=[2,3,1,4,5], nums2=[3,4,5,1,2])",
        "minOperations(nums1 = [2, 10, 14], nums2 = [1, 13, 14])",
        "minOperations(nums1 = [2,3,1,3,2], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [2, 3, 1], nums2 = [3, 5, 2])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [1, 2, 6, 5, 1, 2])",
        "maximumTripletValue(nums = [3, 2, 1, 4])",
        "maximumTripletValue(nums = [1, 2, 100, 3, 101])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"00101\", k = 2)",
        "shortestBeautifulSubstring(s = \"101110\", k = 2)",
        "shortestBeautifulSubstring(s = \"11011\", k = 3)",
        "shortestBeautifulSubstring(s = \"1011100\", k = 3)",
        "shortestBeautifulSubstring(s = \"011011\", k = 5)",
        "shortestBeautifulSubstring(s = \"001110\", k = 2)",
        "shortestBeautifulSubstring(s='010101', k=2)",
        "shortestBeautifulSubstring(s = \"101110101\", k = 4)",
        "shortestBeautifulSubstring(s=\"010010100\", k=5)",
        "shortestBeautifulSubstring(s = \"011001111101011\", k = 3)"
    ],
    "sample_256": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [2, 3, 1, 4])",
        "minimumSum(nums = [3,1,2,4,5])",
        "minimumSum(nums = [3,1,2,4,5])",
        "minimumSum(nums = [3, 1, 2, 4, 3])",
        "minimumSum(nums = [5,3,4,2,1])",
        "minimumSum(nums = [1, 4, 3, 2])",
        "minimumSum(nums = [2, 5, 3, 8])",
        "minimumSum(nums = [2, 2, 3, 4, 5, 6])",
        "minimumSum(nums = [5, 1, 2, 5, 7, 9])"
    ],
    "sample_291": [
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"01010\")",
        "minimumSteps(s = \"00000000000\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1,2,3], nums2 = [2,3,4])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 1])",
        "minOperations(nums1 = [1,1,1,1,1,1], nums2 = [6])",
        "minOperations(nums1=[1,2,3], nums2=[4,5,6])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 2])",
        "minOperations(nums1 = [1, 1, 1, 1, 1, 1], nums2 = [6])",
        "minOperations(nums1 = [2,1,4,3], nums2 = [7,10,3,8])"
    ],
    "sample_277": [
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 0, 1], [1, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0,1,0],[0,0,1],[1,0,0]])",
        "findChampion(grid = [[0,1,1],[1,0,0],[1,0,0]])",
        "findChampion(grid=[[0, 0, 0], [1, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0,1,0,0], [1,1,0,0], [0,0,0,0], [1,0,0,0]])",
        "findChampion(grid=[[0, 1, 0, 1], [1, 0, 0, 1], [1, 1, 1, 0], [0, 0, 0, 1]])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 6, m = 3)",
        "differenceOfSums(n=10, m=3)",
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n = 5, m = 4)"
    ],
    "sample_292": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"0011\")",
        "minimumSteps(s = \"11001\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"1100\")"
    ],
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 2])",
        "alternatingSubarray(nums = [1, 2, 1])",
        "alternatingSubarray(nums = [3, 4, 5, 3, 4])",
        "alternatingSubarray(nums = [2, 3, 2])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 4, 4, 3, 2, 1])",
        "alternatingSubarray(nums = [2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 4, 5])",
        "alternatingSubarray(nums = [2,3,3,2,2])"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 2])",
        "relocateMarbles(nums = [1, 1, 2, 2], moveFrom = [1, 2], moveTo = [2, 1])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,2,3], moveTo = [2,3,1])",
        "relocateMarbles(nums=[1, 2, 3], moveFrom=[1, 2], moveTo=[2, 3])",
        "relocateMarbles(nums=[1,1,2,2], moveFrom=[1,2], moveTo=[2,1])",
        "relocateMarbles(nums=[1, 2, 3], moveFrom=[3], moveTo=[2])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 1, 2, 1])",
        "maximumTripletValue(nums = [1, 1, 1, 1, 1, 1])",
        "maximumTripletValue(nums = [1, 2, 4, 7])",
        "maximumTripletValue(nums = [1, 5, 7, 9])",
        "maximumTripletValue(nums = [2,3,-1,-2])"
    ],
    "sample_273": [
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 1, 1], [1, 1, 0]])",
        "findChampion(grid = [[0,1,1],[1,0,1],[1,1,0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 0, 1], [1, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0,1,0],[0,1,0],[0,1,0]])",
        "findChampion(grid = [[0, 1], [0, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 1], [1, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 1, 0, 0], [1, 1, 0, 0, 1], [0, 0, 0, 0, 0], [1, 0, 0, 0, 1], [1, 0, 0, 1, 0]])"
    ],
    "sample_267": [
        "minSum(nums1 = [0, 1, 2], nums2 = [3, 4, 5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [0, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [0, 1], nums2 = [1, 2])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [5, 6, 7, 8])",
        "minSum(nums1 = [1,2,3], nums2 = [-1,-2,-3])",
        "minSum(nums1=[0,1], nums2=[2,3])",
        "minSum(nums1=[0, 1], nums2=[1, 1])",
        "minSum(nums1 = [1, -1, 0], nums2 = [2, -2, 0])"
    ],
    "sample_294": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"01\")",
        "minimumSteps(s = \"01\")",
        "minimumSteps(s = \"0110\")",
        "minimumSteps(s = \"0010\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"111000\")",
        "minimumSteps(s = \"00110\")"
    ],
    "sample_274": [
        "findChampion(grid = [[0, 1, 1], [1, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[1,0,0], [0,1,0], [0,0,1]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 1], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [1, 1, 0], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [1, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 1, 0], [0, 0, 1], [1, 0, 0]])"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [1,2,3,3,3,4,4,4,4,4])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3,4,4])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 2, 3, 3, 3, 3, 4, 4])",
        "minGroupsForValidAssignment(nums = [3, 1, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [1, 3, 4, 4, 2, 2, 2, 1, 1, 3])",
        "minGroupsForValidAssignment(nums = [4, 3, 4, 2, 3, 2, 5])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 2, 3, 4, 4, 4, 5, 5, 6, 7])",
        "minGroupsForValidAssignment(nums = [2, 3, 3, 3, 5, 6, 6, 7, 8, 9])"
    ],
    "sample_270": [
        "minSum(nums1 = [1, 0], nums2 = [1, 1])",
        "minSum(nums1 = [1,2,3], nums2 = [1,2,0])",
        "minSum(nums1 = [1, 2, 0], nums2 = [1, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 0, 3])",
        "minSum(nums1 = [1, 0], nums2 = [2, 0])",
        "minSum(nums1 = [1, 1, 1], nums2 = [1, 0, 1])",
        "minSum(nums1 = [1, 0, 3], nums2 = [0, 2])",
        "minSum(nums1 = [1,2,0], nums2 = [4,5,6])",
        "minSum(nums1=[1, 0], nums2=[2, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 1, 2])"
    ],
    "sample_317": [
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1,2,3], money = 3)",
        "buyChoco(prices = [1,2,3], money = 4)",
        "buyChoco(prices = [1,2,3], money = 4)",
        "buyChoco(prices = [1, 2, 3, 4], money = 3)",
        "buyChoco(prices = [1,2,3,4], money = 7)",
        "buyChoco(prices = [2, 1], money = 3)",
        "buyChoco(prices = [2, 1, 3], money = 3)",
        "buyChoco(prices=[2,3], money=5)",
        "buyChoco(prices = [2, 2], money = 5)"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"\", k = 1)",
        "beautifulSubstrings(s = \"\", k = 1)",
        "beautifulSubstrings(s = \"\", k = 0)",
        "beautifulSubstrings(s = \"\", k = 0)",
        "beautifulSubstrings(s = \"bab\", k = 1)"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"abcba\")",
        "longestSemiRepetitiveSubstring(s = \"aabbc\")",
        "longestSemiRepetitiveSubstring(s = \"aabbccdd\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaabbaabbaa\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaabbaabb\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbccdd\")",
        "longestSemiRepetitiveSubstring(s = \"abaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaababb\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbbbbccc\")"
    ],
    "sample_341": [
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 2, y = 3, z = 2)",
        "longestString(x = 3, y = 2, z = 2)",
        "longestString(x = 3, y = 2, z = 2)",
        "longestString(x = 3, y = 2, z = 2)",
        "longestString(x = 3, y = 5, z = 1)",
        "longestString(x = 1, y = 3, z = 2)",
        "longestString(x = 2, y = 2, z = 3)"
    ],
    "sample_271": [
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [1,2,3], nums2 = [4,5])",
        "minSum(nums1 = [1,2,3], nums2 = [2,2,2])",
        "minSum(nums1=[1,2,3], nums2=[4,5])",
        "minSum(nums1 = [1,2,3], nums2 = [1,1,5])",
        "minSum(nums1 = [1,2,0], nums2 = [3,0,4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 0, 2])",
        "minSum(nums1 = [2,1,3], nums2 = [5,4,1])",
        "minSum(nums1 = [2, 1, 3], nums2 = [3, 4])",
        "minSum(nums1 = [2, 3, 5], nums2 = [0, 1, 0])"
    ],
    "sample_340": [
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 2, z = 1)",
        "longestString(x = 1, y = 2, z = 1)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 3, z = 2)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(x = 3, y = 3, z = 1)",
        "longestString(x = 4, y = 2, z = 2)",
        "longestString(x = 1, y = 3, z = 3)"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = '10011', k = 2)",
        "shortestBeautifulSubstring(s = '10011', k = 2)",
        "shortestBeautifulSubstring(s = \"01110\", k = 2)",
        "shortestBeautifulSubstring(s = '1011011', k = 2)",
        "shortestBeautifulSubstring(s = '110001', k = 2)",
        "shortestBeautifulSubstring(s = '011001', k = 2)",
        "shortestBeautifulSubstring(s='101011', k=2)",
        "shortestBeautifulSubstring(s = '10111101', k = 3)",
        "shortestBeautifulSubstring(s = \"0111111\", k = 3)",
        "shortestBeautifulSubstring(s = \"10011011011\", k = 5)"
    ],
    "sample_324": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(192)",
        "isFascinating(n=192)"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumSum(nums = [2, 7, 3, 4])",
        "minimumSum(nums = [3, 4, 5, 7])",
        "minimumSum(nums = [3,4,5,6,7])",
        "minimumSum(nums = [2, 1, 5, 4, 3])",
        "minimumSum(nums = [4, 1, 3, 5, 2])",
        "minimumSum(nums = [3,2,2,4,5])",
        "minimumSum(nums = [5, 3, 1, 2, 9])"
    ],
    "sample_268": [
        "minSum(nums1 = [1,2,3], nums2 = [4,5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 0, 5])",
        "minSum(nums1 = [2,0,3,0], nums2 = [1,2,3,4])",
        "minSum(nums1 = [3, 0], nums2 = [6, 3])",
        "minSum(nums1 = [2, 4, 0], nums2 = [2, 5, 0])",
        "minSum(nums1 = [1, 0, 0, 0, 0], nums2 = [2, 2, 2, 2, 2])",
        "minSum(nums1 = [2, 0, 2], nums2 = [2, 3, 2])",
        "minSum(nums1 = [2,2,3,0,1], nums2 = [2,2,2,2,2])",
        "minSum(nums1 = [3, 1, 0, 5], nums2 = [2, 1, 4, 6])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"efgh\", s3 = \"ijkl\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"efgh\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"cde\", s2 = \"abc\", s3 = \"fgh\")",
        "findMinimumOperations(s1 = \"1\", s2 = \"1\", s3 = \"2\")",
        "findMinimumOperations(s1='aaab', s2='aaac', s3='aaad')"
    ],
    "sample_321": [
        "maxStrength(nums = [2, 3, 4])",
        "maxStrength(nums = [2, 3, 4])",
        "maxStrength(nums = [2, 5])",
        "maxStrength(nums = [2, 5])",
        "maxStrength(nums = [2,5])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [2, -1, 3])",
        "maxStrength(nums = [2, 3, -2, 4])",
        "maxStrength(nums = [-1, 2, 3, 5, -4])",
        "maxStrength(nums = [-2,-4,5,3,1])"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 1])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,3], moveTo = [2,1])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,3], moveTo = [2,1])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,3], moveTo = [2,1])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,3], moveTo = [2,1])",
        "relocateMarbles(nums = [1], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums=[1, 2], moveFrom=[1], moveTo=[2])",
        "relocateMarbles(nums = [1, 3], moveFrom = [1, 2], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 2, 3], moveTo = [5, 4, 5])"
    ],
    "sample_357": [
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 8], moveTo = [5, 6])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [8])",
        "relocateMarbles(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom=[1, 2, 3], moveTo=[5, 6, 7])",
        "relocateMarbles(nums=[5, 6, 7, 8], moveFrom=[5, 6], moveTo=[9, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [5, 6, 7], moveTo = [8, 9, 10])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9], moveFrom = [1,2,3,4,7,9], moveTo = [5,6,7,8,9,1])",
        "relocateMarbles(nums=[5, 6, 6, 9], moveFrom=[6, 9], moveTo=[8, 8])",
        "relocateMarbles(nums=[1, 2, 3, 4, 5, 6, 7, 8], moveFrom=[3, 4, 5], moveTo=[7, 8, 9])",
        "relocateMarbles(nums=[1, 2, 2, 3, 5, 6, 7, 8, 9], moveFrom=[2, 7], moveTo=[8, 5])",
        "relocateMarbles(nums=[3,2,4,1,5,6,8,9,7], moveFrom=[1,2,3,4], moveTo=[7,7,7,7])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 6)",
        "buyChoco(prices = [1, 1, 1], money = 3)",
        "buyChoco(prices = [1,2,3], money = 0)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 6)",
        "buyChoco(prices = [10, 20], money = 10)",
        "buyChoco(prices = [1,2,3,4], money = 4)",
        "buyChoco(prices = [5,3,2], money = 5)",
        "buyChoco(prices = [5, 2, 3, 4, 5], money = 20)",
        "buyChoco(prices = [3, 2, 4, 7], money = 6)"
    ],
    "sample_308": [
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1], [1], [1]])",
        "matrixSum(nums = [[1,2,3], [4,5,6]])",
        "matrixSum(nums = [[1,2,3],[2,3,4],[3,4,5]])",
        "matrixSum(nums = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "matrixSum(nums = [[1,1,1], [1,1,1]])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 1], money = 2)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2], money = 3)",
        "buyChoco(prices = [1], money = 1)",
        "buyChoco(prices = [1], money = 1)",
        "buyChoco(prices = [1,1], money = 2)",
        "buyChoco(prices = [1,2], money = 3)",
        "buyChoco(prices = [1, 3, 2], money = 5)",
        "buyChoco(prices = [2,2], money = 1)"
    ],
    "sample_259": [
        "minimumSum(nums = [1,2,1,3])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3])",
        "minimumSum(nums = [1,2,3])",
        "minimumSum(nums = [1,2,3,4])",
        "minimumSum(nums = [1,2,3,4,6])",
        "minimumSum(nums = [5,0,3,8,6])",
        "minimumSum(nums = [1,1,1,1])",
        "minimumSum(nums = [1,3,2,4])",
        "minimumSum(nums = [5,10,2,3,4,6,7,8])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 3, 5, 7, 9])",
        "alternatingSubarray(nums = [1, 3, 5, 7, 6, 4, 2, 0])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 6, 7])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 4, 3, 2])",
        "alternatingSubarray(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19])",
        "alternatingSubarray(nums = [2, 3, 5, 6, 7])",
        "alternatingSubarray(nums=[10, 7, 4, 6, 8, 10, 11])",
        "alternatingSubarray(nums = [0, 1, 2, 3, 4, 5, 6, 3, 2, 1, 0])",
        "alternatingSubarray(nums = [2, 4, 1, 5, 3])"
    ],
    "sample_311": [
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1],[2],[3]])",
        "matrixSum(nums = [[1], [0]])",
        "matrixSum(nums = [[2, 2, 1], [1, 3, 2]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 2, 3], money = 3)",
        "buyChoco(a = [1, 2, 3], money = 1)",
        "buyChoco(a = [1, 2, 3], money = 6)",
        "buyChoco(a = [1, 2, 3], money = 6)",
        "buyChoco(a = [1,1], money = 1)",
        "buyChoco(a = [2, 2], money = 3)",
        "buyChoco(a=[1, 1], money=2)",
        "buyChoco(a=[1, 2], money=1)",
        "buyChoco(a = [3,2,2], money = 5)",
        "buyChoco(a = [1,2,3,4,5], money = 1)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [2,3,3,2,2])",
        "minGroupsForValidAssignment(nums = [2, 2, 3, 3, 4, 4, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 1, 2, 1, 2])",
        "minGroupsForValidAssignment(nums = [2, 3, 2, 4])",
        "minGroupsForValidAssignment(nums=[1, 2, 1])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1])"
    ],
    "sample_276": [
        "findChampion(grid = [[0, 1, 1], [0, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [0, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0, 0], [0, 0, 0, 0], [1, 0, 0, 1], [1, 0, 1, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 0], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 1, 1], [0, 0, 0, 0], [1, 0, 0, 1], [0, 0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 0]])",
        "findChampion(grid=[[1, 1, 0], [1, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0, 0],[0, 0, 0, 1],[0, 0, 0, 1],[1, 0, 1, 0]])",
        "findChampion(grid = [[0, 1, 1, 1, 0], [1, 0, 1, 1, 1], [0, 0, 0, 0, 0], [1, 1, 1, 0, 1], [1, 0, 1, 0, 0]])"
    ],
    "sample_320": [
        "maxStrength(nums = [2, 5, 4])",
        "maxStrength(nums = [2, 5, 4])",
        "maxStrength(nums = [2, 5, 4])",
        "maxStrength(nums = [1, 2, 5])",
        "maxStrength(nums = [1, 2, 5, 4])",
        "maxStrength(nums = [1, 2, 5, 4])",
        "maxStrength(nums = [2, 4, 5])",
        "maxStrength(nums = [2, 5])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums=[1, 2, 5, 4])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"ab\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ba\", \"aa\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"b\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"b\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"b\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"bcd\", \"efg\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"b\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"ap\", \"pa\", \"pp\"])",
        "minimizeConcatenatedLength(words = [\"hx\", \"qz\", \"rx\", \"x\", \"y\", \"aq\"])"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1=\"abc\", s2=\"def\", s3=\"ghi\")",
        "findMinimumOperations(s1=\"abc\", s2=\"def\", s3=\"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"bbb\", s3 = \"ccc\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"xyz\", s3 = \"pqr\")",
        "findMinimumOperations(s1=\"ab\", s2=\"ba\", s3=\"ba\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"bba\", s3 = \"aab\")",
        "findMinimumOperations(s1 = \"asdf\", s2 = \"asdf\", s3 = \"asdg\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"cde\", s3 = \"acf\")"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 3, 5, 7])",
        "alternatingSubarray(nums = [1, 3, 5, 7])",
        "alternatingSubarray(nums = [1, 3, 5, 7])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1])",
        "alternatingSubarray(nums = [1,3,2,5,4])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [2, 1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1,3,1,4,2])"
    ],
    "sample_278": [
        "findChampion(grid = [[0, 0, 1], [1, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0, 0, 1], [1, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0, 0, 1], [1, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [1, 0, 0], [1, 1, 0]])",
        "findChampion(grid = [[0,0,1], [1,0,0], [0,1,0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 1, 0], [0, 0, 0], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [-1, 0, 1], [1, 0, -1]])"
    ],
    "sample_304": [
        "countSeniors(details = [\"1234567890123456789\", \"1234567890123456789\", \"1234567890123456789\"])",
        "countSeniors(details=[\"1234567890AB50\",\"1234567890CD68\",\"1234567890EF70\"])",
        "countSeniors(details = [\"123456789101160\", \"23456789101161\", \"3456789101162\"])",
        "countSeniors(details = [\"John Doe, 62\", \"Jane Doe, 71\", \"John Smith, 45\"])",
        "countSeniors(details = [\"bob,35\", \"mary,42\", \"alice,66\", \"john,70\"])",
        "countSeniors(details = [\"Bob,61,Developer\", \"Linda,56,Project Manager\", \"Joe,75,QA Engineer\"])",
        "countSeniors(details = [\"John:63:1.80\", \"Mike:58:1.72\", \"Alice:65:1.68\", \"Bob:75:1.75\"])",
        "countSeniors(details = [\"Joe88,18\", \"Bill61,90\", \"Sally78,65\", \"Tim75,70\"])",
        "countSeniors(details=[\"Joe, 65, Male\", \"Jill, 67, Female\", \"Bob, 60, Male\", \"Bella, 59, Female\", \"Linda, 64, Female\"])",
        "countSeniors(details = [\"John,20192234,60\", \"Tom,19982215,70\", \"Karen,20200987,55\"])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"baceb\", k = 2)",
        "beautifulSubstrings(s = \"abcde\", k = 2)",
        "beautifulSubstrings(s = \"aeio\", k = 2)",
        "beautifulSubstrings(s = \"aeio\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"abacaba\", k = 2)",
        "beautifulSubstrings(s=\"baceb\", k=2)",
        "beautifulSubstrings(s = \"aeiaaioooaauuaeiu\", k = 3)"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = '10011', k = 2)",
        "shortestBeautifulSubstring(s = \"10111\", k = 2)",
        "shortestBeautifulSubstring(s = \"0011\", k = 2)",
        "shortestBeautifulSubstring(s = \"1011011\", k = 2)",
        "shortestBeautifulSubstring(s='110011', k=2)",
        "shortestBeautifulSubstring(s='11001', k=2)",
        "shortestBeautifulSubstring(s = '10110111', k = 2)",
        "shortestBeautifulSubstring(s='10101', k=2)",
        "shortestBeautifulSubstring(s = \"00111100111\", k = 2)",
        "shortestBeautifulSubstring(s = \"00111101011\", k = 2)"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"ab\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ba\", \"aa\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"a\"])",
        "minimizeConcatenatedLength(words = [\"aa\",\"ba\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"bb\", \"ab\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"ba\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"cab\", \"bca\"])"
    ],
    "sample_327": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n=192)",
        "isFascinating(n = 12345)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1], [2], [3]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3], [4,5,6], [7,8,9]])",
        "matrixSum(nums = [[1,2,3], [4,5,6], [7,8,9]])",
        "matrixSum(nums = [[1], [0, 0], [0, 0, 0]])"
    ],
    "sample_326": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(192)",
        "isFascinating(n=192)",
        "isFascinating(n=192)",
        "isFascinating(n=192)"
    ],
    "sample_275": [
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 1], [0, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [0, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 0, 0], [1, 0, 0], [1, 1, 0]])",
        "findChampion(grid=[[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 1, 1], [0, 0, 0, 0], [1, 1, 0, 0], [0, 0, 1, 0]])",
        "findChampion(grid = [[0, 0, 1], [1, 0, 0], [1, 0, 1]])"
    ],
    "sample_260": [
        "minimumSum(nums = [3,1,2,4])",
        "minimumSum(nums = [3,1,2,4])",
        "minimumSum(nums = [2, 3, 5])",
        "minimumSum(nums = [3, 1, 5, 8])",
        "minimumSum(nums = [1, 3, 2, 4, 6])",
        "minimumSum(nums = [3, 1, 7, 4])",
        "minimumSum(nums = [2, 4, 6, 7])",
        "minimumSum(nums = [5, 3, 1, 9])",
        "minimumSum(nums = [3,2,1,1,1,1])",
        "minimumSum(nums = [3, 1, 1, 4, 7, 9])"
    ],
    "sample_322": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(192)",
        "isFascinating(n=192)"
    ],
    "sample_248": [
        "minOperations(s1 = \"1011\", s2 = \"1010\", x = 2)",
        "minOperations(s1 = \"00\", s2 = \"11\", x = 2)",
        "minOperations(s1 = \"101\", s2 = \"011\", x = 1)",
        "minOperations(s1 = \"001\", s2 = \"110\", x = 2)",
        "minOperations(s1 = \"1001\", s2 = \"0011\", x = 1)",
        "minOperations(s1 = \"1011\", s2 = \"1010\", x = 5)",
        "minOperations(s1 = '10101', s2 = '11111', x = 2)",
        "minOperations(s1 = \"11111111\", s2 = \"00000000\", x = 1)",
        "minOperations(s1 = \"10111011\", s2 = \"11001101\", x = 2)",
        "minOperations(s1 = \"1010110\", s2 = \"1001001\", x = 2)"
    ],
    "sample_342": [
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 1, y = 2, z = 2)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 3, z = 2)",
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(x = 3, y = 2, z = 2)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 2, y = 2, z = 3)"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [9])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [8])",
        "relocateMarbles(nums = [5, 6, 7, 9], moveFrom = [7], moveTo = [8])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7, 5], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [6, 8], moveTo = [9, 5])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 8, 6, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [9, 8], moveTo = [6, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 3], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [2, 4, 7], moveTo = [7, 4, 2])"
    ],
    "sample_306": [
        "countSeniors(details = [\"id-name-age-40\", \"id-name-age-61\", \"id-name-age-70\"])",
        "countSeniors(details = [\"Alex_50\", \"Alice_65\", \"Bob_32\"])",
        "countSeniors(details = [\"Matthew 78\", \"Mark 18\", \"Luke 65\", \"John 67\", \"Acts 60\", \"Romans 62\"])",
        "countSeniors(details = [\"age1:54\", \"age2:63\", \"age3:43\", \"age4:39\"])",
        "countSeniors(details = [\"John_38\", \"Mary_61\", \"Sam_74\", \"Joe_60\"])",
        "countSeniors(details = [\"Name:Jane,Age:61\", \"Name:Bob,Age:62\", \"Name:Ann,Age:32\", \"Name:Tom,Age:45\"])",
        "countSeniors(details = [\"john55\", \"tom68\", \"jerry50\", \"katy72\", \"sam80\"])",
        "countSeniors(details=[\"Dennis, 75\", \"Barbara, 68\", \"Stanley, 79\", \"Diana, 55\", \"John, 81\"])",
        "countSeniors(details = [\"Terry-50\", \"Mary-70\", \"John-90\", \"Zoe-65\", \"Xavier-60\", \"Alan-85\"])",
        "countSeniors(details = [\"John,25,47,37\", \"Sally,53,32,67\", \"Jane,62,44,38\"])"
    ],
    "sample_303": [
        "countSeniors(details = [\"123456789\", \"987654321\"])",
        "countSeniors(details = [\"12345678\", \"22345678\", \"32345678\"])",
        "countSeniors(details = [\"123456789\", \"987654321\", \"97654321\", \"97654321\"])",
        "countSeniors(details = [\"John 33\", \"Julie 65\", \"Adam 56\", \"Alicia 71\"])",
        "countSeniors(details = [\"John, 21, Male\", \"Jim, 67, Male\", \"Jane, 55, Female\", \"Jennifer, 70, Female\"])",
        "countSeniors(details = ['John, 23', 'Mary, 65', 'Peter, 72', 'Harry, 59'])",
        "countSeniors(details = [\"Jeff-55\", \"Sally-72\", \"Joe-65\", \"Amy-44\"])",
        "countSeniors(details = ['bob is 55', 'jane is 70', 'joe is 31', 'bob is 61'])",
        "countSeniors(details = ['#1 @@56', '21 @@34', '31 @@75'])",
        "countSeniors(details=[\"Joe:61\", \"Mary:59\", \"John:70\", \"Mary:25\", \"Joan:62\"])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [9])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [9])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [9])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7, 8], moveTo = [9, 9])",
        "relocateMarbles(nums = [5, 7, 8, 9], moveFrom = [5, 7], moveTo = [6, 6])",
        "relocateMarbles(nums = [5, 7, 8, 9], moveFrom = [5, 7], moveTo = [6, 6])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [8])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7, 5], moveTo = [9, 6])",
        "relocateMarbles(nums=[5, 6, 7, 8, 9], moveFrom=[7, 8], moveTo=[5, 6])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [5, 6, 7], moveTo = [8, 9, 10])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"dabc\")",
        "findMinimumOperations(s1=\"abc\", s2=\"abc\", s3=\"abc\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"aa\", s3 = \"aaa\")",
        "findMinimumOperations(s1=\"\", s2=\"\", s3=\"\")",
        "findMinimumOperations(s1 = \"b\", s2 = \"ba\", s3 = \"baa\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"abc\", s3 = \"opq\")",
        "findMinimumOperations(s1=\"abc\", s2=\"abc\", s3=\"zyx\")",
        "findMinimumOperations(s1 = \"101\", s2 = \"010\", s3 = \"111\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"adc\", s3 = \"acc\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abce\", s3 = \"abc\")",
        "findMinimumOperations(s1=\"ab\", s2=\"b\", s3=\"ab\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"cdx\")",
        "findMinimumOperations(s1 = \"monkey\", s2 = \"money\", s3 = \"mommy\")",
        "findMinimumOperations(s1 = \"cba\", s2 = \"daa\", s3 = \"dbc\")",
        "findMinimumOperations(s1 = \"brown\", s2 = \"cow\", s3 = \"bo\")"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1,2,3,4])",
        "minimumRightShifts(nums = [2, 3, 1])",
        "minimumRightShifts(nums = [3,4,5,1,2])"
    ],
    "sample_453": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aaab\")",
        "minChanges(s = \"aaab\")",
        "minChanges(s = \"abcdef\")",
        "minChanges(s = \"ababab\")",
        "minChanges(s = \"abbcc\")",
        "minChanges(s = \"110101\")"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 100)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9,10], target = 100)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9,10], target = 100)",
        "lengthOfLongestSubsequence(nums = [2, 3, 4, 5, 6], target = 1)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5], target = 1)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 11)",
        "lengthOfLongestSubsequence(nums = [5, 2, 3], target = 1)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5], target = 3)",
        "lengthOfLongestSubsequence(nums = [3,5,8,2], target = 15)",
        "lengthOfLongestSubsequence(nums = [3,4,5,6,7,8,9,10], target = 10)"
    ],
    "sample_367": [
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmlHp\")",
        "sortVowels(s = \"YmHlp\")",
        "sortVowels(s = \"lEmOnH\")",
        "sortVowels(s = 'HlmpY')",
        "sortVowels(s = 'HmpYl')",
        "sortVowels(s = \"YmlPh\")",
        "sortVowels(s = 'mYvHp')",
        "sortVowels(s = 'pHlYm')"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [10, 15, 20], target = 30)",
        "lengthOfLongestSubsequence(nums = [10, 15, 20], target = 30)",
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 12)",
        "lengthOfLongestSubsequence(nums = [3, 5, 7, 11], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 1, 2, 2, 3, 3], target = 6)",
        "lengthOfLongestSubsequence(nums = [3, 7, 11], target = 10)",
        "lengthOfLongestSubsequence(nums = [3, 5, 7, 10], target = 13)",
        "lengthOfLongestSubsequence(nums = [10,2,3], target = 0)",
        "lengthOfLongestSubsequence(nums = [3,5,8,11,13,16,20], target = 15)"
    ],
    "sample_381": [
        "countPairs(nums = [2, 7, 11, 15], t = 20)",
        "countPairs(nums = [2, 7, 11, 15], t = 20)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [1, 2, 3, 4], t = 6)",
        "countPairs(nums = [1, 2, 3, 4], t = 6)",
        "countPairs(nums = [3, 1, 6, 4, 5, 2], t = 7)",
        "countPairs(nums = [3, 1, 6, 4, 5, 2], t = 7)",
        "countPairs(nums = [1,2,3,4,5,6], t = 8)",
        "countPairs(nums=[3, 1, 6, 4, 5, 2], t=7)",
        "countPairs(nums = [1, 3, 4, 5, 7, 10], t = 10)"
    ],
    "sample_366": [
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [2, 3, 1])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [3, 2, 1])",
        "isGood(nums = [3, 2, 1])",
        "isGood(nums = [2, 3, 4, 1])",
        "isGood(nums = [2, 3, 4, 5, 1])"
    ],
    "sample_369": [
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"HYmpl\")",
        "sortVowels(s = \"YmlHp\")",
        "sortVowels(s = \"HYlmp\")",
        "sortVowels(s = 'mYlPh')",
        "sortVowels(s = \"mYlPh\")",
        "sortVowels(s='YmplH')",
        "sortVowels(s = 'lPhYm')",
        "sortVowels(s=\"HYlPm\")"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [3, 2, 1, 4, 5])",
        "minimumRightShifts(nums = [3, 2, 1, 4, 5])",
        "minimumRightShifts(nums = [3, 2, 1, 4, 5])",
        "minimumRightShifts(nums = [3, 2, 1, 4, 5])",
        "minimumRightShifts(nums = [3, 4, 1, 2])",
        "minimumRightShifts(nums = [2, 3, 1, 4, 5])",
        "minimumRightShifts(nums = [2, 3, 4, 1])",
        "minimumRightShifts(nums = [5,4,1,2,3])",
        "minimumRightShifts(nums = [3, 7, 9, 5, 2, 5])",
        "minimumRightShifts(nums = [7, 2, 1, 3, 5])"
    ],
    "sample_448": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"bbaa\")",
        "minChanges(s = \"abcba\")",
        "minChanges(s = \"aa\")",
        "minChanges(s = \"ABAB\")",
        "minChanges(s=\"abcd\")",
        "minChanges(s = \"1101\")"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcab\")",
        "canBeEqual(s1 = \"1234\", s2 = \"1324\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"adcb\")",
        "canBeEqual(s1 = \"xyzt\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"bnaa\", s2 = \"abna\")",
        "canBeEqual(s1 = \"aca\", s2 = \"bbcd\")"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1,2,3,1,2,3])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2])",
        "minLengthAfterRemovals(nums = [2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1,1,1,2,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,7,7,7,7])"
    ],
    "sample_361": [
        "isGood(a = [1, 2, 3, 2])",
        "isGood(a = [1, 2, 3, 2])",
        "isGood(a = [1, 1, 2, 2, 3])",
        "isGood(a = [1, 1, 2, 2, 3])",
        "isGood([0, 1, 2, 2])",
        "isGood(a = [0, 1, 0, 2])",
        "isGood(a = [1,2,2,3,3])",
        "isGood(a = [1,2,1,3])",
        "isGood([2, 1, 1, 2])",
        "isGood(a = [1, 3, 2, 2, 4, 4])"
    ],
    "sample_419": [
        "minOperations(nums = [1,2,3,4,5,6,7,8,9], k = 5)",
        "minOperations(nums = [3,2,1,5,4], k = 5)",
        "minOperations(nums = [1,1,2,2,3], k = 3)",
        "minOperations(nums = [1, 3, 4, 2, 4, 3, 1, 3], k = 4)",
        "minOperations(nums = [3, 2, 1, 2, 3, 4], k = 5)",
        "minOperations(nums = [1,2,3,1,2,1], k = 3)",
        "minOperations(nums = [1,5,2,3,3], k = 4)",
        "minOperations(nums = [1, 2, 3, 3, 3, 2, 1, 2, 3, 4], k = 3)",
        "minOperations(nums = [3,5,2,5,2,3,1,4,5,6], k = 5)",
        "minOperations(nums = [1, 3, 4, 3, 2, 3, 2, 5, 3, 2, 1, 5, 2, 3, 4, 3], k = 5)"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1,2,3])",
        "findMaximumLength(nums = [1,2,3])",
        "findMaximumLength(nums = [1,2,3,4,5])",
        "findMaximumLength(nums = [1, 1, 1])",
        "findMaximumLength(nums = [1,1,1,1,1,1,1,1])",
        "findMaximumLength(nums=[1,2,3,4])",
        "findMaximumLength(nums=[1,1,1,1])",
        "findMaximumLength(nums = [1, 2, 2, 3])",
        "findMaximumLength(nums = [1, 1, 2, 1])",
        "findMaximumLength(nums=[1,2,2,1,1,2,2,2,2,2,1,1,1])"
    ],
    "sample_433": [
        "maxSubarrays(nums = [5, 4, 3, 2, 1])",
        "maxSubarrays(nums = [1, 2, 4, 3])",
        "maxSubarrays(nums = [2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [2, 1, 3, 2])",
        "maxSubarrays(nums=[1, 2, 3, 4])",
        "maxSubarrays(nums=[2,2,2])",
        "maxSubarrays(nums = [2,3,3,2,2,2,2,2,2,2])",
        "maxSubarrays(nums = [1,3,2,5,4,6])",
        "maxSubarrays(nums = [3, 2, 1, 3, 4, 3, 2])",
        "maxSubarrays(nums = [1,3,8,6,8,6,2])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"bc\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"ba\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"lmn\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"ace\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"axz\")",
        "canMakeSubsequence(str1 = \"acef\", str2 = \"abcde\")",
        "canMakeSubsequence(str1 = \"bfg\", str2 = \"cde\")"
    ],
    "sample_402": [
        "maxSum(nums = [], m = 2, k = 2)",
        "maxSum(nums = [], m = 3, k = 1)",
        "maxSum(nums = [1, 2, 3], m = 2, k = 1)",
        "maxSum(nums = [], m = 3, k = 5)",
        "maxSum(nums = [], m = 3, k = 5)",
        "maxSum(nums = [1,2,3,4,5,6], m = 2, k = 3)",
        "maxSum(nums = [0,0,0,0], m = 2, k = 2)",
        "maxSum(nums = [1,1,1,1,1,1,1], m = 1, k = 3)",
        "maxSum(nums = [1, 2, 1, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 2, 3, 4, 1], m = 2, k = 5)"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"z\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"z\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"mango\"], x = \"z\")",
        "findWordsContaining(words = [\"an\", \"apple\", \"ant\", \"in\"], x = \"a\")"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"4\", \"prev\"])",
        "lastVisitedIntegers(words = ['1', '2', 'prev', 'prev'])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"3\", \"prev\", \"4\", \"prev\", \"prev\"])"
    ],
    "sample_422": [
        "minOperations(nums = [1,2,3,4,5,6], k = 6)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], k = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [3, 2, 1, 5, 4], k = 5)",
        "minOperations(nums = [1,2,3,4], k = 5)",
        "minOperations(nums = [3, 1, 4, 2, 3], k = 4)",
        "minOperations(nums = [3,2,1,4], k = 5)",
        "minOperations(nums = [2,1,3,1,2,2,2,2,5], k = 5)",
        "minOperations(nums = [3, 1, 4, 2, 5, 6, 7, 8, 9], k = 9)",
        "minOperations(nums = [5,2,2,3,1,1,1], k = 5)"
    ],
    "sample_418": [
        "minOperations(nums = [1,2,3,4,5], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 6)",
        "minOperations(nums = [1,2,3,4,5,6], k = 6)",
        "minOperations(nums = [3,2,2,5,3], k = 5)",
        "minOperations(nums = [4, 3, 2, 1, 5], k = 5)",
        "minOperations(nums = [3,2,1,5,6,4], k = 3)",
        "minOperations(nums=[1, 3, 5, 6, 2, 7, 4], k=7)",
        "minOperations(nums = [3,4,5,6,7,8,9,10,11], k = 3)"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1, 2, 2, 1, 2, 1])",
        "minimumSeconds(nums = [1,1,2,3,2])",
        "minimumSeconds(nums = [1, 1, 3, 1])",
        "minimumSeconds(nums = [1, 1, 2, 2, 3, 1])",
        "minimumSeconds(nums = [2, 3, 1, 2])",
        "minimumSeconds(nums = [3,3,3,3,3])",
        "minimumSeconds(nums = [3, 3, 3, 3, 3])",
        "minimumSeconds(nums = [1, 2, 3, 2, 1, 2, 3])",
        "minimumSeconds(nums = [1, 3, 0, 1, 2])",
        "minimumSeconds(nums = [0,1,0,0,1,0])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1, 3, 2, 4, 5], target = 6)",
        "countPairs(nums = [1, 1, 2, 2, 3, 3], target = 5)",
        "countPairs(nums = [1, 1, 2, 3], target = 5)",
        "countPairs(nums = [2, 7, 11, 15], target = 11)"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"hello world\"], x = \"hello\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"hi\"], x = \"o\")",
        "findWordsContaining(words = [\"Hello\", \"World\", \"HelloWorld\"], x = \"Hello\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\", \"pineapple\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"pineapple\", \"mango\"], x = \"app\")",
        "findWordsContaining(words = [\"I\", \"am\", \"here\"], x = \"e\")"
    ],
    "sample_372": [
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = 'Leetcode')",
        "sortVowels(s = 'Let's test this')",
        "sortVowels(s = 'Let's test this')",
        "sortVowels(s = \"Let's test this\")",
        "sortVowels(s = \"Let's test this\")",
        "sortVowels(s = \"LeetcOde\")",
        "sortVowels(s = \"Hello, world\")",
        "sortVowels(s = 'Let's test this sentence.')"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [3,3,3,3,5,5,5,2,2,7])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 1, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 5, 5, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 3, 3, 3, 5, 5, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [4, 2, 3, 1, 4, 4, 4])"
    ],
    "sample_452": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"aabbcc\")",
        "minChanges(s = \"abcabc\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"abcab\")",
        "minChanges(s = \"abababab\")",
        "minChanges(s = \"abbbb\")"
    ],
    "sample_385": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 8)",
        "countPairs(nums = [2, 3, 5, 7], target = 10)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 10)",
        "countPairs(nums = [1, 2, 4, 5, 7], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8], target = 10)",
        "countPairs(nums=[3, 1, 5, 1, 2, 3], target=7)",
        "countPairs(nums = [2,1,3,2], target = 5)"
    ],
    "sample_427": [
        "minOperations(nums = [1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [1, 1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [3, 3, 4, 4, 5, 5])",
        "minOperations(nums = [3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5])",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9])",
        "minOperations(nums = [3,3,3,3,1,1,1])",
        "minOperations(nums = [3, 3, 3, 4, 4, 4, 3, 3, 3])",
        "minOperations(nums = [3, 3, 3, 3, 3, 3, 1, 1])",
        "minOperations(nums = [2, 3, 2, 3, 2, 3, 2, 3, 2, 2])"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1,2,3,4,5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6])",
        "minLengthAfterRemovals(nums = [3, 3, 3])",
        "minLengthAfterRemovals(nums = [1,1,2,2,2])",
        "minLengthAfterRemovals(nums = [1,1,1,2,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [2,2,3,3])",
        "minLengthAfterRemovals(nums = [2, 3, 2])",
        "minLengthAfterRemovals(nums = [3, 3, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 1, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 1, 3, 4, 4, 4, 5])"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 1])",
        "minimumCoins(prices = [1, 1])",
        "minimumCoins(prices = [1, 2, 1])",
        "minimumCoins(prices = [1, 2, 1, 1])",
        "minimumCoins(prices = [2, 1])",
        "minimumCoins(prices = [1, 2, 1, 2, 1])",
        "minimumCoins(prices = [1, 1, 2, 2])",
        "minimumCoins(prices = [1, 1, 1, 1, 1, 1])",
        "minimumCoins(prices = [1, 2, 1, 3])",
        "minimumCoins(prices = [2,1])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"hello world\"], x = \"hello\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"catdog\"], x = \"cat\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"hell\"], x = \"hell\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"grapes\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"berry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"pineapple\", \"pear\"], x = \"a\")",
        "findWordsContaining(words = [\"ball\", \"cat\", \"doll\", \"elephant\", \"fish\"], x = \"l\")"
    ],
    "sample_420": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1,2,3,4,5,6,7,8], k = 5)",
        "minOperations(nums = [1, 3, 5, 2, 4], k = 5)",
        "minOperations(nums=[1,2,3,4,5], k=4)",
        "minOperations(nums = [1,1,2,3,3], k = 3)",
        "minOperations(nums = [2,3,1,1,4], k = 5)",
        "minOperations(nums = [2, 3, 4, 5], k = 3)",
        "minOperations(nums = [5, 3, 1, 4, 2], k = 5)",
        "minOperations(nums = [1,2,4,2,3,1,2], k = 5)",
        "minOperations(nums = [4,2,5,1], k = 4)"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1,2,3,5])",
        "isGood(nums = [1,2,3,5])",
        "isGood(nums = [1, 3, 2])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1, 4, 2, 3])",
        "isGood(nums = [1,2,2,4])",
        "isGood(nums = [1,2,2,4])"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 0)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9,10], target = 0)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 15)",
        "lengthOfLongestSubsequence(nums = [3,5,1,2], target = 7)",
        "lengthOfLongestSubsequence(nums = [3, 7, 2, 1, 5], target = 4)",
        "lengthOfLongestSubsequence(nums = [3,5,7,1,8,9,4,6], target = 15)"
    ],
    "sample_365": [
        "isGood(nums = [1,2,3])",
        "isGood(nums = [1,2,3,3])",
        "isGood(nums = [1,2,2,2])",
        "isGood(nums = [1,2,2,4])",
        "isGood(nums=[1,2,3,4,5])",
        "isGood([1, 2, 2, 3, 3])",
        "isGood(nums = [1, 3, 3, 2])",
        "isGood(nums = [1,1,2,3,3])",
        "isGood(nums = [1, 1, 1, 2, 3])",
        "isGood(nums=[1, 1, 2, 3, 4, 5])"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1048575, 1048575, 1048575])",
        "maxSubarrays(nums = [1048575, 1048575, 1048575])",
        "maxSubarrays(nums = [1, 2, 4, 8])",
        "maxSubarrays(nums = [1, 2, 4, 8])",
        "maxSubarrays(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576])",
        "maxSubarrays(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768])",
        "maxSubarrays(nums = [2047, 2046, 2045, 2044, 2043, 2042, 2041, 2040])",
        "maxSubarrays(nums = [3, 6, 8, 3, 2])",
        "maxSubarrays(nums = [16, 11, 12, 21, 12])",
        "maxSubarrays(nums = [10, 13, 2, 6, 9, 3])"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [], target = 0)",
        "lengthOfLongestSubsequence(nums = [], target = 0)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 15)",
        "lengthOfLongestSubsequence(nums = [], target = 100)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 0)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9,10], target = 42)",
        "lengthOfLongestSubsequence(nums=[1,2,3], target=6)",
        "lengthOfLongestSubsequence(nums=[3,4,5,6,7], target=10)",
        "lengthOfLongestSubsequence(nums=[1,2,3,4,5,6,7,8,9], target=10)"
    ],
    "sample_450": [
        "minChanges(s = \"aabbcc\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"aabbba\")",
        "minChanges(s = \"ababba\")",
        "minChanges(s = \"aababab\")",
        "minChanges(s = \"aabbabb\")",
        "minChanges(s = \"aabbbbcc\")",
        "minChanges(s=\"aabbabab\")",
        "minChanges(s = \"abbbaaabbba\")",
        "minChanges(s = \"bbbbbaaaaabbb\")"
    ],
    "sample_463": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 10, limit = 4)",
        "distributeCandies(n=3, limit=2)",
        "distributeCandies(n = 12, limit = 2)"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1, 3])",
        "sumCounts(nums = [1, 2, 1, 3])",
        "sumCounts(nums = [1, 2, 1, 3, 2])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1, 1, 2, 2])",
        "sumCounts(nums = [1, 2, 1, 2, 1])"
    ],
    "sample_449": [
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aaaa\")",
        "minChanges(s = \"banana\")",
        "minChanges(s = \"ababab\")",
        "minChanges(s=\"aaaa\")",
        "minChanges(s = \"apple\")",
        "minChanges(s = \"b\")",
        "minChanges(s = \"baabb\")"
    ],
    "sample_425": [
        "minOperations(nums = [1, 1])",
        "minOperations(nums = [1, 2, 2, 4])",
        "minOperations(nums = [1, 2, 2, 2, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1,2,3,4])",
        "minOperations(nums = [1, 1, 2, 3, 4])",
        "minOperations(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2])",
        "minOperations(nums = [2, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [3, 3, 4, 1, 2, 2, 2])",
        "minOperations(nums=[2, 3, 3, 1, 1, 2])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"za\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"zz\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"bz\")",
        "canMakeSubsequence(str1 = \"zx\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"zaa\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"c\")",
        "canMakeSubsequence(str1 = \"zbz\", str2 = \"za\")",
        "canMakeSubsequence(str1 = \"zpq\", str2 = \"aq\")",
        "canMakeSubsequence(str1=\"zzzb\", str2=\"bz\")"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1, 2, 2, 1])",
        "minimumSeconds(nums = [1,2,3])",
        "minimumSeconds(nums = [1,2,2,1])",
        "minimumSeconds(nums = [1,2,2,1])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,2,3,1,2,3])",
        "minimumSeconds(nums = [1,2,1])",
        "minimumSeconds(nums = [1, 2, 3, 2, 1])",
        "minimumSeconds(nums = [1, 2, 3, 2, 1])",
        "minimumSeconds(nums = [1,2,2,3,4,4,4,6,8])"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 4)",
        "lengthOfLongestSubsequence(nums = [], target = 3)",
        "lengthOfLongestSubsequence(nums = [], target = 0)",
        "lengthOfLongestSubsequence(nums = [], target = 2)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 20)",
        "lengthOfLongestSubsequence(nums=[1,2,3,4,5,6,7,8,9],target=1)",
        "lengthOfLongestSubsequence(nums = [1, 3, 2, 5], target = 6)",
        "lengthOfLongestSubsequence(nums = [3,2,2,5,6], target = 1)"
    ],
    "sample_370": [
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = \"Let's test this\")",
        "sortVowels(s = 'Let's test this code')",
        "sortVowels(s = \"LeOtcede\")",
        "sortVowels(s = 'Let's test this case')",
        "sortVowels(s = 'Hello, world')",
        "sortVowels(s=\"let us coded\")"
    ],
    "sample_421": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1,2,3,4,5], k = 5)",
        "minOperations(nums = [1,2,3,4,5,6], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 5)",
        "minOperations(nums = [3,4,1,2,5], k = 5)",
        "minOperations(nums = [2, 3, 1, 4, 2, 3], k = 4)",
        "minOperations(nums = [4, 5, 1, 2, 3, 5], k = 5)",
        "minOperations(nums = [3,2,3,4,5,6,7], k = 7)",
        "minOperations(nums = [1,3,4,2,4,6,3,8], k = 8)",
        "minOperations(nums = [2,1,3,4,1,1,2,1,1,1], k = 5)"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [4, 11, 13])",
        "maxSubarrays(nums = [12,12,7,4,2,8,16])",
        "maxSubarrays(nums = [4, 11, 15, 2])",
        "maxSubarrays(nums = [10, 2, 2, 5, 13])",
        "maxSubarrays(nums = [4, 4, 4, 4, 5])",
        "maxSubarrays(nums = [10, 2, 2, 2, 11, 3, 3, 3])",
        "maxSubarrays(nums = [1, 2, 3, 2, 2, 1, 5])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [7, 8]], k = 10)",
        "countPairs(coordinates = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)], k = 3)",
        "countPairs(coordinates = [(0,0), (0,1), (1,0), (1,1)], k = 1)",
        "countPairs(coordinates = [[1,2],[3,4],[5,6]], k = 3)",
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [1, 2], [3, 4], [5, 6]], k = 3)",
        "countPairs(coordinates = [(0,0), (0,1), (1,0), (1,1)], k = 2)",
        "countPairs(coordinates=[(1,2),(3,4),(5,6),(7,8)],k=3)",
        "countPairs(coordinates = [[0, 1], [1, 1], [2, 1]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [0, 1], [1, 0], [2, 1]], k = 1)",
        "countPairs(coordinates = [(2,3), (2,1), (1,2), (1,1), (3,2)], k = 4)"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = -1)",
        "lengthOfLongestSubsequence(nums = [], target = 3)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 20)",
        "lengthOfLongestSubsequence(nums = [10, 1, 2, 7, 6, 1, 5], target = 8)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9,10], target = 50)",
        "lengthOfLongestSubsequence(nums=[3,5,7,8,9], target=1)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 20)",
        "lengthOfLongestSubsequence(nums = [3, 6, 5, 8], target = 13)"
    ],
    "sample_445": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1,1,1])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1, 2, 2, 1])",
        "sumCounts(nums = [1,2,3,4])",
        "sumCounts(nums = [1,2,2,3,1])"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"0110\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"11111111111111111111111111111111\")",
        "minimumBeautifulSubstrings(s = \"11111\")",
        "minimumBeautifulSubstrings(s = \"1111\")",
        "minimumBeautifulSubstrings(s = \"5\")",
        "minimumBeautifulSubstrings(s = \"123\")",
        "minimumBeautifulSubstrings(s = \"10100101101\")",
        "minimumBeautifulSubstrings(s = \"0000011111100000111111000001111110000011111100000111111000001111110000011111100000111111000001111110000011111100000111111000001111110000011111100000111111000001111110000011111100000111111000001111110000011111100000111111000001111110000011111100000111111000001111110000011111100000111111000001111110000011111100000111111000001111110000011111100000111111000001111110000011111100000111111000001111110000011111100000111111000001111110000011111100000111111000001111110000011111100000111111000001111110000011111",
        "minimumBeautifulSubstrings(s = \"111110110101\")"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 2, 4, 7])",
        "maxSubarrays(nums = [1, 2, 4, 7])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [2, 3, 5, 7])",
        "maxSubarrays(nums = [3, 1, 2])",
        "maxSubarrays(nums = [3, 17, 3, 3])",
        "maxSubarrays(nums = [2,3,1])",
        "maxSubarrays(nums = [1, 2, 4, 5, 8])",
        "maxSubarrays(nums = [3,3,3,3,3,3,3,3])",
        "maxSubarrays(nums = [2,3,1,4,2,2])"
    ],
    "sample_401": [
        "maxSum(nums = [], m = 0, k = 0)",
        "maxSum(nums = [], m = 3, k = 2)",
        "maxSum(nums = [], m = 3, k = 2)",
        "maxSum(nums = [], m = 3, k = 3)",
        "maxSum(nums=[], m=0, k=0)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3], m = 2, k = 3)",
        "maxSum(nums = [0,0,0,0,0], m = 1, k = 1)",
        "maxSum(nums = [2, 2, 2, 2, 2], m = 3, k = 2)",
        "maxSum(nums=[1,1,1,1,1,1], m=1, k=1)"
    ],
    "sample_400": [
        "maxSum(A = [], m = 0, k = 0)",
        "maxSum(A = [], m = 2, k = 3)",
        "maxSum(A = [], m = 1, k = 2)",
        "maxSum(A = [], m = 3, k = 4)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(A = [1,2,3,4,5,6,7], m = 0, k = 3)",
        "maxSum(A = [1, 2, 3, 4], m = 4, k = 4)",
        "maxSum(A = [1,2,3,4,5,6,7,8,9,10], m = 1, k = 3)",
        "maxSum(A = [1,2,2,3,1], m = 2, k = 3)",
        "maxSum(A=[1, 2, 2, 3, 3, 3], m=3, k=2)"
    ],
    "sample_363": [
        "isGood(nums = [2, 1, 2])",
        "isGood(nums = [2, 1, 2])",
        "isGood(nums = [2, 1, 2])",
        "isGood(nums = [1,0,2])",
        "isGood(nums = [1,0,2])",
        "isGood(nums = [1, 2, 2, 3, 3])",
        "isGood(nums = [1, 0, 2, 1])",
        "isGood(nums = [1, 2, 2, 3, 3, 4, 4])",
        "isGood(nums = [3,2,1,2,3])",
        "isGood([3,2,1,3,2])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1, 2, 3, 1, 2, 3])",
        "minimumSeconds(nums = [1, 2, 3, 1, 2, 3])",
        "minimumSeconds(nums = [1,2,3,1,2,3])",
        "minimumSeconds(nums = [1, 2, 1])",
        "minimumSeconds(nums = [1,2,1,2,1,2])",
        "minimumSeconds(nums = [1, 1, 2, 2])",
        "minimumSeconds(nums = [1, 2, 3, 1])",
        "minimumSeconds(nums = [1,1,1])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [2, 2, 1, 3, 2])"
    ],
    "sample_376": [
        "minimumSeconds(nums = [1,2,3,1,2,3])",
        "minimumSeconds(nums = [1,2,1,2])",
        "minimumSeconds(nums = [1,2,1])",
        "minimumSeconds(nums = [1,1,1,1])",
        "minimumSeconds(nums = [1, 2, 2, 1, 2, 1])",
        "minimumSeconds(nums = [0,0,0,0,0])",
        "minimumSeconds(nums = [2, 1, 2, 1])",
        "minimumSeconds(nums = [1, 2, 1, 2, 1, 2, 1])",
        "minimumSeconds(nums = [1, 1, 2, 2, 3, 1])",
        "minimumSeconds(nums = [0,1,1,2,3])"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1])",
        "minLengthAfterRemovals(nums = [1,2,3])",
        "minLengthAfterRemovals(nums = [1, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3])",
        "minLengthAfterRemovals(nums = [1,2,2])",
        "minLengthAfterRemovals(nums = [4,3,1,1,3,3,2])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 3, 4])",
        "minLengthAfterRemovals(nums = [2, 2, 1, 2, 3, 3, 3, 3, 4])"
    ],
    "sample_399": [
        "maxSum(nums = [], m = 0, k = 0)",
        "maxSum(nums = [], m = 0, k = 0)",
        "maxSum(nums = [], m = 1, k = 1)",
        "maxSum(nums = [], m = 2, k = 1)",
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 4)",
        "maxSum(nums = [0,0,0,0,0], m = 2, k = 5)",
        "maxSum(nums = [2, 3, 5, 3, 2], m = 2, k = 2)",
        "maxSum(nums = [0,1,1,0,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], m = 3, k = 2)"
    ],
    "sample_397": [
        "maxSum(nums = [], m = 0, k = 0)",
        "maxSum(nums = [], m = 0, k = 0)",
        "maxSum(nums = [], m = 2, k = 3)",
        "maxSum(nums = [], m = 3, k = 2)",
        "maxSum(nums = [], m = 1, k = 0)",
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 1, k = 1)",
        "maxSum(nums = [1, 2, 3], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7], m = 2, k = 5)"
    ],
    "sample_364": [
        "isGood(nums = [2, 3, 1, 5, 4])",
        "isGood(nums = [2, 3, 1])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [2, 3, 4, 1])",
        "isGood([1, 2, 3])",
        "isGood(nums = [1, 3, 2, 5, 4])",
        "isGood(nums = [2,1,4,5,3])",
        "isGood([2,3,1,5,4])",
        "isGood(nums = [3, 1, 2, 4])",
        "isGood(nums = [2, 3, 1, 5, 6, 7, 4])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 1, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1,1,2,2])",
        "minLengthAfterRemovals(nums = [1,1,2,2])",
        "minLengthAfterRemovals(nums = [1, 2, 1, 2, 1, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 1, 2, 2, 2, 1])"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"mango\"], x = \"a\")",
        "findWordsContaining(words = [\"Hello\", \"world\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"foo\", \"bar\"], x = \"o\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"orange\", \"banana\", \"apple\"], x = \"na\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"rat\", \"bat\"], x = \"a\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 2, 1])",
        "minimumCoins(prices = [4, 3, 2, 1])",
        "minimumCoins(prices = [4, 1, 2, 3])",
        "minimumCoins(prices = [1, 2, 4, 3])",
        "minimumCoins(prices = [2, 3, 2])",
        "minimumCoins(prices = [2, 1, 1, 1])",
        "minimumCoins(prices = [3,2,1,2,3])",
        "minimumCoins(prices=[2,2,1,2,2])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"101\")",
        "minimumBeautifulSubstrings(s = \"101\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"0\")",
        "minimumBeautifulSubstrings(s = \"1\")",
        "minimumBeautifulSubstrings(s = \"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s = \"111111\")",
        "minimumBeautifulSubstrings(s = \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumBeautifulSubstrings(s = \"01011\")",
        "minimumBeautifulSubstrings(s=\"011010011101001\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acdb\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acbd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcad\")",
        "canBeEqual(s1 = \"aabb\", s2 = \"bbaa\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bacd\")",
        "canBeEqual(s1 = \"bana\", s2 = \"aban\")",
        "canBeEqual(s1 = \"abba\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"xyzx\", s2 = \"yzyx\")",
        "canBeEqual(s1 = \"xyzk\", s2 = \"zkxy\")"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abz\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bad\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"acz\")",
        "canMakeSubsequence(str1 = \"a\", str2 = \"z\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azz\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"bcdd\")"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [3,3,3,3,5,5,5,2,2,7])",
        "minLengthAfterRemovals(nums = [1,2,3,4])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 4])",
        "minLengthAfterRemovals(nums = [1,1,2,2,2,2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [3,3,3,3,3,3,3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acdb\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acdb\")",
        "canBeEqual(s1 = \"acdb\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"xyab\", s2 = \"abxy\")",
        "canBeEqual(s1 = \"xyxy\", s2 = \"yxyx\")",
        "canBeEqual(s1 = \"xyzx\", s2 = \"xzxy\")",
        "canBeEqual(s1 = \"xyzz\", s2 = \"xzzy\")",
        "canBeEqual(s1 = \"acdb\", s2 = \"bcda\")",
        "canBeEqual(s1 = \"a1a1\", s2 = \"1a1a\")"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [2, 7, 11, 15], target = 22)",
        "countPairs(nums = [2, 7, 11, 15], target = 22)",
        "countPairs(nums=[1, 2, 3, 4, 5], target=7)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"abc\", s2 = \"az\")",
        "canMakeSubsequence(s1 = \"abcz\", s2 = \"acz\")",
        "canMakeSubsequence(s1=\"abcz\", s2=\"abca\")",
        "canMakeSubsequence(s1 = \"abcd\", s2 = \"bd\")",
        "canMakeSubsequence(s1 = \"abcz\", s2 = \"baz\")",
        "canMakeSubsequence(s1 = \"bzc\", s2 = \"abc\")",
        "canMakeSubsequence(s1=\"abcz\", s2=\"bza\")",
        "canMakeSubsequence(s1 = \"zbc\", s2 = \"az\")",
        "canMakeSubsequence(s1 = \"abcdz\", s2 = \"bacd\")",
        "canMakeSubsequence(s1 = \"abcdefz\", s2 = \"abcdgza\")"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"5\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"5\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"5\", \"prev\"])",
        "lastVisitedIntegers(words = ['1', '2', 'prev', 'prev', '3', 'prev'])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [7, 8]], k = 2)",
        "countPairs(coordinates = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)], k = 3)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], k = 1)",
        "countPairs(coordinates = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11)], k = 5)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9]], k = 5)",
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6]], k = 5)",
        "countPairs(coordinates=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], k=3)",
        "countPairs(coordinates = [(1, 2), (2, 2), (3, 2), (4, 2)], k = 1)",
        "countPairs(coordinates = [[1, 3], [3, 1], [3, 2]], k = 2)",
        "countPairs(coordinates=[(3, 2), (1, 1), (2, 1), (2, 2), (2, 3), (3, 3), (3, 4), (4, 3), (4, 4), (4, 5)], k=1)"
    ],
    "sample_451": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abcabc\")",
        "minChanges(s = \"abcabc\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"abcdabcd\")",
        "minChanges(s = \"ABABABA\")",
        "minChanges(s = \"abbbbba\")",
        "minChanges(s = \"abbababb\")"
    ],
    "sample_461": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 8, limit = 2)",
        "distributeCandies(n=5, limit=2)",
        "distributeCandies(n = 10, limit = 4)",
        "distributeCandies(n = 7, limit = 3)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acdb\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"adcb\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"bacd\", s2 = \"cdba\")"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n=3, limit=2)",
        "distributeCandies(n = 6, limit = 4)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 2, limit = 1)"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 100)",
        "accountBalanceAfterPurchase(p = 105)",
        "accountBalanceAfterPurchase(p = 100)",
        "accountBalanceAfterPurchase(p = 105)",
        "accountBalanceAfterPurchase(p = 100)",
        "accountBalanceAfterPurchase(p = 105)",
        "accountBalanceAfterPurchase(p = 95)",
        "accountBalanceAfterPurchase(p = 10)",
        "accountBalanceAfterPurchase(p=95)",
        "accountBalanceAfterPurchase(p=60)"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1, 3])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1,2,1,2])",
        "sumCounts(nums=[1, 2, 3])",
        "sumCounts(nums = [1,2,2,3])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1, 2, 1, 2])",
        "minimumSeconds(A = [1, 2, 2, 1])",
        "minimumSeconds(A = [1,2,3,4,5])",
        "minimumSeconds(A = [1,2,3,4,5])",
        "minimumSeconds(A = [1,1,2,2,3,3])",
        "minimumSeconds(A = [1,2,3,4,5,6])",
        "minimumSeconds(A = [1,2,3,1,2,3,1,2,3])",
        "minimumSeconds(A = [1,2,1,2,1,2,1])",
        "minimumSeconds(A = [0,0,0])",
        "minimumSeconds(A = [1, 3, 1])"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"def\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bca\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bdf\")",
        "canMakeSubsequence(str1 = \"aaa\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"xz\", str2 = \"za\")",
        "canMakeSubsequence(str1 = \"aab\", str2 = \"bac\")",
        "canMakeSubsequence(str1 = \"bcdefghijklmnopqrstuvwxyza\", str2 = \"za\")"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [5, 4, 3, 2, 1])"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1,2,3], l = 2, r = 5)",
        "countSubMultisets(nums = [1,2,3], l = 2, r = 4)",
        "countSubMultisets(nums = [1,2,3], l = 2, r = 4)",
        "countSubMultisets(nums = [1,2,3,4], l = 2, r = 3)",
        "countSubMultisets(nums = [1, 2, 3], l = 2, r = 4)",
        "countSubMultisets(nums = [1,2,3], l = 1, r = 10)",
        "countSubMultisets(nums = [1,1,2,2], l = 1, r = 4)",
        "countSubMultisets(nums = [1,2,3,4,5,6], l = 10, r = 15)",
        "countSubMultisets(nums = [1,2,3,4], l = 2, r = 12)",
        "countSubMultisets(nums=[1,2,3], l=3, r=3)"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 4])",
        "minimumCoins(prices = [4, 1, 2, 3])",
        "minimumCoins(prices = [1,2,4,2])",
        "minimumCoins(prices=[1,2,4])",
        "minimumCoins(prices=[2, 3, 1, 5])",
        "minimumCoins(prices = [3, 4, 1, 5])",
        "minimumCoins(prices = [2,2,2,1,2])",
        "minimumCoins(prices=[1,3,2,1,2,1])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 1, 2, 1])",
        "minimumCoins(prices = [1, 2, 1, 2])",
        "minimumCoins(prices = [1, 3, 2, 5])",
        "minimumCoins(prices = [1,2,3])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumCoins(prices = [1, 2, 1, 1, 2])",
        "minimumCoins(prices=[1, 2, 3, 2, 1])",
        "minimumCoins(prices = [3, 4, 5, 1])",
        "minimumCoins(prices=[1, 2, 3, 2, 1, 2, 3, 2, 1])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [1, 2, \"prev\", 1])",
        "lastVisitedIntegers(words = [1, 2, 3, \"prev\", \"prev\", 1])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 2, 3, 4, 4, 4, 5, 5, 5, 5])",
        "minOperations(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "minOperations(nums = [1, 2, 2, 4, 3, 3, 3, 5, 5, 5, 5])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5])",
        "minOperations(nums = [1,1,2,2,2,3,3,3,4,4,4])",
        "minOperations(nums = [1, 2, 3, 4, 1, 2, 3, 1, 2, 1])",
        "minOperations(nums=[3, 3, 3, 2, 2, 2, 1, 1])",
        "minOperations(nums=[2, 2, 2, 3, 3, 4])"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"push\", \"2\", \"push\", \"1\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"2\", \"pop\", \"push\", \"1\", \"pop\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"p\", \"p\", \"3\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"pop\", \"peek\"])",
        "lastVisitedIntegers(words = [\"push\", \"2\", \"pop\", \"push\", \"1\", \"push\", \"3\"])",
        "lastVisitedIntegers(words = [\"pop\", \"push 1\", \"push 2\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"pop\", \"3\", \"4\", \"push\", \"5\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"3\", \"2\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"p\", \"p\", \"p\", \"1\"])",
        "lastVisitedIntegers(words = [\"pop\", \"1\", \"2\", \"3\", \"push\", \"4\", \"5\", \"pop\"])"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1, 2, 2, 1])",
        "minimumSeconds(nums = [1, 2, 3, 2, 1])",
        "minimumSeconds(nums = [1,2,2,1])",
        "minimumSeconds(nums = [2,2,1,2,2])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1,3,3,3,1])",
        "minimumSeconds(nums = [1,1,2,1,2,1])",
        "minimumSeconds(nums=[1,2,3,4,5])",
        "minimumSeconds(nums = [1,1,1,1,1,1,1,1,1,1,1])",
        "minimumSeconds(nums = [2, 4, 3, 1, 2])"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"orange\", \"apple\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"mango\"], x = \"na\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"berry\"], x = \"a\")"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1,2,3,4,5])",
        "maxSubarrays(nums = [2, 3, 1, 6, 4, 7])",
        "maxSubarrays(nums = [2, 4, 6, 8])",
        "maxSubarrays(nums = [2, 3, 1, 6, 4, 8])",
        "maxSubarrays(nums = [1, 2, 4, 0, 8, 6])",
        "maxSubarrays(nums = [4, 0, 3])",
        "maxSubarrays(nums = [2,4,6,8,10])",
        "maxSubarrays(nums = [1, 0, 2, 3, 0, 4])",
        "maxSubarrays(nums = [3, 1, 4, 3, 2, 8])",
        "maxSubarrays(nums=[2, 3, 4, 0, 1, 2])"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [2, \"prev\", 1, \"prev\", \"prev\"])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [2, 7, 11, 15], target = 20)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [3, 1, 2, 4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 6)",
        "countPairs(nums = [1, 3, 5, 7, 9], target = 10)",
        "countPairs(nums = [3, 1, 5, 1, 2, 3], target = 7)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"abd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"efgh\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcad\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdba\")",
        "canBeEqual(s1 = \"banana\", s2 = \"nabana\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\", \"prev\"])"
    ],
    "sample_464": [
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 4)",
        "distributeCandies(n = 5, limit = 4)",
        "distributeCandies(n = 3, limit = 4)",
        "distributeCandies(n = 2, limit = 3)",
        "distributeCandies(n=3, limit=2)",
        "distributeCandies(n=3, limit=3)",
        "distributeCandies(n = 7, limit = 4)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [5, 4, 3, 2, 1])",
        "minimumRightShifts(nums = [4, 3, 2, 1])",
        "minimumRightShifts(nums = [4,1,2,3])",
        "minimumRightShifts(nums = [7, 2, 1, 5])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"foo\", \"bar\"], x = \"o\")",
        "findWordsContaining(words = [\"abc\", \"xyz\", \"aba\"], x = \"a\")"
    ],
    "sample_398": [
        "maxSum(nums = [], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 2, 3, 4], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4], m = 4, k = 2)",
        "maxSum(nums = [1, 2, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 0, k = 3)",
        "maxSum(nums = [1, 2, 3, 2, 3, 1], m = 2, k = 3)",
        "maxSum(nums = [3,4,5], m = 2, k = 1)",
        "maxSum(nums = [2,3,3,2,3,3,2], m = 3, k = 4)"
    ],
    "sample_424": [
        "minOperations(nums = [1, 2, 2, 4, 3, 3, 3])",
        "minOperations(nums = [1,2,2,3,3,4,4,5,5,5])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 2, 2, 3, 3])",
        "minOperations(nums = [3,3,3,3,3])",
        "minOperations(nums = [1,2,2,2,2,3,3,3,3,3,3,3])",
        "minOperations(nums = [1, 2, 2, 2, 2, 1, 1, 1])",
        "minOperations(nums = [1,2,3,4,5,6,6,7,7,7,8,8,8])",
        "minOperations(nums=[1, 3, 3, 2, 4, 2, 2, 2])",
        "minOperations(nums = [2,3,4,3,5,2,2,3])"
    ],
    "sample_417": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], k = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 8)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], k = 5)",
        "minOperations(nums = [3, 1, 4, 2, 5], k = 5)",
        "minOperations(nums = [1,3,2,4], k = 4)",
        "minOperations(nums=[1, 2, 3, 2, 1], k=3)",
        "minOperations(nums = [3, 1, 2, 5, 4, 3], k = 6)",
        "minOperations(nums = [1,2,4,8,3,5,6,10,20], k = 10)"
    ],
    "sample_371": [
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmlHp\")",
        "sortVowels(s = \"YmHlp\")",
        "sortVowels(s = \"YmPlh\")",
        "sortVowels(s = 'HmPlY')",
        "sortVowels(s = 'HYmPl')",
        "sortVowels(s = \"YmlnPh\")",
        "sortVowels(s = 'Humpy')",
        "sortVowels(s = 'HmLyP')",
        "sortVowels(s = \"HummpYl\")"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n=6, limit=2)"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1,2,1,2])",
        "sumCounts(nums=[1, 2, 2])",
        "sumCounts(nums = [1,2,3])"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 2, 0, 7, 2, 0, 2, 2])",
        "maxSubarrays(nums = [1, 2, 3, 0, 5])",
        "maxSubarrays(nums = [1, 2, 3, 0, 1, 2, 3])",
        "maxSubarrays(nums = [4, 2, 0, 1])",
        "maxSubarrays(nums = [2, 0, 2, 1, 3, 2])",
        "maxSubarrays(nums = [2, 2, 2, 3, 0, 0, 3, 3])",
        "maxSubarrays(nums = [1, 3, 8, 15, 21, 6])",
        "maxSubarrays(nums = [2, 1, 2, 3, 0, 0, 3, 2, 1])"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1, 2, 1, 3])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 2, 2, 1])",
        "sumCounts(nums = [1,2,1,2])",
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [1, 1, 2, 2])",
        "sumCounts(nums=[1, 2, 1])"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"xyz\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bacd\")",
        "canBeEqual(s1 = \"yxz\", s2 = \"xyz\")"
    ],
    "sample_380": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [2, 7, 11, 15], target = 22)",
        "countPairs(nums = [2, 7, 11, 15], target = 22)",
        "countPairs(nums = [2,7,11,15], target = 20)",
        "countPairs(nums=[1,2,3,4,5], target=6)",
        "countPairs(nums = [2, 1, 3], target = 4)",
        "countPairs(nums = [2,1,3,4], target = 6)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1, 2, 1, 2])",
        "sumCounts(nums = [1, 2, 1, 3])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1, 1, 2, 2])",
        "sumCounts(nums = [1, 2, 1, 3, 4])"
    ],
    "sample_368": [
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = 'YmplH')",
        "sortVowels(s = \"YmHlp\")",
        "sortVowels(s = \"YlPhm\")",
        "sortVowels(s = \"mYpHl\")",
        "sortVowels(s='YmlPh')",
        "sortVowels(s = 'mHpYl')",
        "sortVowels(s = \"leYmPh\")",
        "sortVowels(s='HmYpl')",
        "sortVowels(s=\"Hympl\")"
    ],
    "sample_462": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 10, limit = 4)",
        "distributeCandies(n = 10, limit = 4)",
        "distributeCandies(n = 10, limit = 10)",
        "distributeCandies(n=10, limit=5)",
        "distributeCandies(n=10, limit=4)",
        "distributeCandies(n=7, limit=3)",
        "distributeCandies(n = 30, limit = 10)"
    ],
    "sample_474": [
        "minimumCoins(prices = [1,2,3,4])",
        "minimumCoins(prices = [1,2,3,4,5])",
        "minimumCoins(prices = [1, 2, 1, 1, 2])",
        "minimumCoins(prices = [1,2,3])",
        "minimumCoins(prices = [1,2,3,2,1])",
        "minimumCoins(prices = [1, 3, 2, 2])",
        "minimumCoins(prices = [3,2,1])",
        "minimumCoins(prices = [3,2,2,5])",
        "minimumCoins(prices = [2,3,1,4,2])",
        "minimumCoins(prices = [1,1,1,2,3,1,2])"
    ],
    "sample_426": [
        "minOperations(nums = [1, 2, 3])",
        "minOperations(nums = [1, 2, 3, 4, 4, 4])",
        "minOperations(nums = [1, 1, 2])",
        "minOperations(nums = [1, 1, 2, 2, 3])",
        "minOperations(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "minOperations(nums = [3, 3, 3, 2, 2, 2, 2])",
        "minOperations(nums = [3, 2, 2, 4, 2, 2])",
        "minOperations(nums = [1, 2, 2, 3, 4, 4, 4, 5])",
        "minOperations(nums=[3,3,3,3,3,3,3,3,3])",
        "minOperations(nums = [1, 2, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7])"
    ],
    "sample_423": [
        "minOperations(nums = [1, 1])",
        "minOperations(nums = [1, 1, 1])",
        "minOperations(nums = [1, 1, 2])",
        "minOperations(nums = [1, 2, 3, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 2, 1])",
        "minOperations(nums = [1, 1, 1, 2])",
        "minOperations(nums = [3, 3, 3, 2])",
        "minOperations(nums = [3, 3, 1, 1])",
        "minOperations(nums = [4, 4, 4, 3, 3, 3, 5, 5, 5, 5, 6, 6])"
    ],
    "sample_476": [
        "minimumCoins(prices = [1,2,3])",
        "minimumCoins(prices = [1, 2, 1])",
        "minimumCoins(prices = [1,2])",
        "minimumCoins(prices = [1,2])",
        "minimumCoins(prices = [1,2,3,4,5])",
        "minimumCoins(prices = [1, 1, 1, 1])",
        "minimumCoins(prices = [1, 2, 1, 2, 1])",
        "minimumCoins(prices = [1, 1, 1, 1, 1, 1])",
        "minimumCoins(prices = [1, 1, 2, 1])",
        "minimumCoins(prices = [2,2,3])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [3, 1, 2])",
        "minimumRightShifts(nums = [2, 3, 1, 4])",
        "minimumRightShifts(nums = [0, 1, 2, 3])",
        "minimumRightShifts(nums = [3,2,1])",
        "minimumRightShifts(nums = [4, 2, 1, 3])",
        "minimumRightShifts(nums = [2, 3, 5, 1, 4])"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [3, 1, 2])",
        "minimumRightShifts(nums = [4, 1, 2, 3])",
        "minimumRightShifts(nums = [1, 3, 4, 2])",
        "minimumRightShifts(nums = [2, 4, 1, 3])"
    ],
    "sample_167": [
        "isAcronym(words = [\"banana\", \"split\"], s = \"bs\")",
        "isAcronym(words = [\"banana\"], s = \"b\")",
        "isAcronym(words = [\"ban\", \"ana\"], s = \"bn\")",
        "isAcronym(words = [\"ban\", \"ana\"], s = \"banana\")",
        "isAcronym(words = [\"banana\", \"apple\", \"grape\"], s = \"bag\")",
        "isAcronym(words = [\"b\", \"a\", \"n\", \"a\", \"n\", \"a\"], s = \"bana\")",
        "isAcronym(words = [\"Apple\", \"Banana\"], s = \"AB\")",
        "isAcronym(words=[\"fun\", \"games\"], s=\"fg\")",
        "isAcronym(words = [\"dog\", \"cow\", \"jumped\"], s = \"dcj\")",
        "isAcronym(words = [\"Van\", \"is\", \"awesome\"], s = \"VA\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [3,1,4,1,5,9,2,6], m = 1, k = 0)",
        "countInterestingSubarrays(nums = [2, 1, 4, 5, 3, 8], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [3,1,4,3,1,5], m = 4, k = 2)",
        "countInterestingSubarrays(nums = [20,1,1,2,1,1,1], m = 4, k = 1)",
        "countInterestingSubarrays(nums=[2,4,3,3], m=2, k=1)",
        "countInterestingSubarrays(nums = [2, 1, 2, 3, 1, 1, 4, 2, 1, 4, 1], m = 7, k = 5)"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1,2], [2,3], [3,5]])",
        "numberOfPoints(nums = [[10, 20], [20, 30], [30, 40]])",
        "numberOfPoints(nums = [[1, 2], [2, 4], [2, 3]])",
        "numberOfPoints(nums = [[2,4],[5,8]])",
        "numberOfPoints(nums = [[1,3], [5,8], [10,12]])",
        "numberOfPoints(nums = [[2,3], [1,3], [50,100]])",
        "numberOfPoints(nums = [[1,3], [2,4], [0,1], [5,7]])",
        "numberOfPoints(nums=[[2,3], [4,7]])",
        "numberOfPoints(nums = [[1,2],[3,5],[7,11],[12,14],[15,15],[28,33],[30,33]])",
        "numberOfPoints(nums=[[2,3],[2,5],[7,12],[4,11],[1,10]])"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy,problem\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easy,problem\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easy,problem\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy, problem\"], separator = \", \")",
        "splitWordsBySeparator(words = ['e-a-sy', 'pro-blem'], separator = '-')",
        "splitWordsBySeparator(words = ['e-a-s-y', 'pro-blem'], separator = '-')",
        "splitWordsBySeparator(words = [\"easyp\"], separator = \"y\")"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 3], [2, 4]])",
        "numberOfPoints(nums = [[2,4], [4,8]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [4, 5]])",
        "numberOfPoints(nums = [[1, 3], [5, 6]])",
        "numberOfPoints(nums = [[1,3],[3,6],[4,6]])",
        "numberOfPoints(nums = [[2, 4], [4, 6]])",
        "numberOfPoints(nums = [[1, 2], [2, 5]])",
        "numberOfPoints(nums = [[2, 5], [4, 8], [8, 9]])",
        "numberOfPoints(nums = [[1,3], [2,2], [1,1]])",
        "numberOfPoints(nums = [[0, 5], [3, 6]])"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,3])",
        "countCompleteSubarrays(nums = [1,2,2,3,3,3])",
        "countCompleteSubarrays(nums = [1,2,3,3,2,1,4])",
        "countCompleteSubarrays(nums = [2, 5, 3, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 4, 1, 2, 4, 5, 5])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one,two\", \"three,four\", \"five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three,four\", \"five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = \" \")",
        "splitWordsBySeparator(words=[\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator=\" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = ' ')",
        "splitWordsBySeparator(words=[\"one,two,three,four,five,six\"], separator=\",\")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = 'and')",
        "splitWordsBySeparator(words = [\"one-two\", \"\", \"three four\", \"five\", \"six\"], separator = \"-\")"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 1, 2])",
        "maxIncreasingGroups(u = [1, 1, 2])",
        "maxIncreasingGroups(u = [1, 1, 2, 2, 3, 3])",
        "maxIncreasingGroups(u = [1, 2, 1, 2, 1])",
        "maxIncreasingGroups(u = [1, 2, 3, 1, 2])",
        "maxIncreasingGroups(u=[1, 1, 2])",
        "maxIncreasingGroups(u = [1,1,2,2,3])",
        "maxIncreasingGroups(u = [1, 1, 3, 4, 4])",
        "maxIncreasingGroups(u=[1, 2, 1, 2, 2])",
        "maxIncreasingGroups(u = [3,1,2,2,2,1,4,1])"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 4)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 4)",
        "minAbsoluteDifference(nums = [1, 2, 3, 4, 5], x = 4)",
        "minAbsoluteDifference(nums = [1, 3, 3, 4], x = 2)",
        "minAbsoluteDifference(nums = [2,5,3,4,8], x = 3)",
        "minAbsoluteDifference(nums = [3, 2, 8, 4, 9], x = 2)",
        "minAbsoluteDifference(nums = [10, 12, 13, 15, 18], x = 3)",
        "minAbsoluteDifference(nums = [2, 5, 3, 10, 7], x = 2)",
        "minAbsoluteDifference(nums = [1,5,8,13,21], x = 2)",
        "minAbsoluteDifference(nums=[3,6,1,5,10,10,14], x=2)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [3, 1, 4, 3, 2, 2], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 1, k = 0)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4, 5], modulo=5, k=2)",
        "countInterestingSubarrays(nums=[2, 3, 4, 5], modulo=2, k=1)",
        "countInterestingSubarrays(nums = [3, 2, 1, 4, 5], modulo = 2, k = 1)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 2, 3], m = 4)",
        "canSplitArray(nums = [1, 2, 3], m = 4)",
        "canSplitArray(nums = [1, 2, 3], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 3)",
        "canSplitArray(nums = [1, 1, 1, 1], m = 4)",
        "canSplitArray(nums = [3, 2, 1], m = 5)",
        "canSplitArray(nums = [3, 2, 1], m = 5)",
        "canSplitArray(nums = [1, 1, 1, 1], m = 3)",
        "canSplitArray(nums = [2, 2, 1], m = 4)",
        "canSplitArray(nums=[1,2,2,2], m=5)"
    ],
    "sample_169": [
        "isAcronym(words = [\"banana\", \"split\"], s = \"bs\")",
        "isAcronym(words = [\"b\", \"a\", \"n\", \"a\", \"n\", \"a\"], s = \"banana\")",
        "isAcronym(words = [\"banana\"], s = \"b\")",
        "isAcronym(words = [\"b\",\"a\",\"n\",\"a\",\"n\",\"a\"], s = \"banana\")",
        "isAcronym(words=[\"banana\"], s=\"b\")",
        "isAcronym(words = [\"banana\", \"apple\", \"cat\"], s = \"banac\")",
        "isAcronym(words=[\"bear\", \"apple\", \"cat\"], s=\"baac\")",
        "isAcronym(words = [\"be\", \"that\", \"way\"], s = \"btw\")",
        "isAcronym(words = [\"Bright\", \"Education\"], s = \"BE\")",
        "isAcronym(words = [\"Bob\", \"Daily\", \"Brief\"], s = \"BDB\")"
    ],
    "sample_121": [
        "minimumIndex(nums = [1, 2, 2, 2, 3])",
        "minimumIndex(nums = [1,2,1,2,2,1])",
        "minimumIndex(nums = [1, 2, 3, 2])",
        "minimumIndex(nums = [1, 2, 1, 3, 1, 2])",
        "minimumIndex(nums = [1,2,3,1,5])",
        "minimumIndex(nums=[1,1,1,2,2,2,2])",
        "minimumIndex(nums = [2, 1, 3, 5, 2, 2, 7])",
        "minimumIndex(nums = [1, 1, 3, 4, 2])",
        "minimumIndex(nums = [1, 1, 3, 2, 3])",
        "minimumIndex(nums=[1, 2, 2, 1, 1, 2, 2, 1, 1])"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 3, offers = [[1,2,5],[3,4,5],[2,3,2]])",
        "maximizeTheProfit(n = 3, offers = [[1,2,1],[2,3,2],[3,4,3]])",
        "maximizeTheProfit(n = 2, offers = [[1,2,10],[2,3,20]])",
        "maximizeTheProfit(n = 3, offers = [[2, 5, 3], [1, 2, 2], [6, 9, 5]])",
        "maximizeTheProfit(n = 4, offers = [[0, 2, 3], [1, 3, 2], [2, 5, 3]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 2], [2, 5, 3], [1, 3, 3]])",
        "maximizeTheProfit(n = 2, offers = [[1,2,5], [1,2,6]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,5], [3,4,5], [5,6,5]])",
        "maximizeTheProfit(n = 5, offers = [[0, 2, 3], [1, 3, 3], [2, 4, 4], [0, 3, 2], [3, 5, 3]])",
        "maximizeTheProfit(n = 3, offers = [[2, 7, 2], [1, 2, 1], [3, 15, 3]])"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [5, 6, 2, 7, 4])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [5, 6, 2, 7, 4])",
        "maximumTripletValue(nums = [2,1,4,3])"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"L_R_\")",
        "furthestDistanceFromOrigin(moves = \"LLR_R\")",
        "furthestDistanceFromOrigin(moves = \"LL_R_\")",
        "furthestDistanceFromOrigin(moves = \"L_R\")",
        "furthestDistanceFromOrigin(moves = \"L_R__\")",
        "furthestDistanceFromOrigin(moves = \"LRL_R\")",
        "furthestDistanceFromOrigin(moves = \"LL__RR\")",
        "furthestDistanceFromOrigin(moves = \"LLR_RL\")",
        "furthestDistanceFromOrigin(moves = \"__LLR\")",
        "furthestDistanceFromOrigin(moves = \"L__R_R\")"
    ],
    "sample_149": [
        "finalString(s = 'string')",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s='string')",
        "finalString(s = \"string\")",
        "finalString(s = \"this\")",
        "finalString(s = \"rtsing\")",
        "finalString(s = 'tirrngs')",
        "finalString(s = \"thiing\")",
        "finalString(s='it is not string')"
    ],
    "sample_162": [
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51,71,17,42])",
        "maxSum(nums = [51,71,17,24,42])",
        "maxSum(nums = [4, 6, 15, 35, 83, 7, 88])",
        "maxSum(nums = [12, 23, 33, 45, 55])",
        "maxSum(nums = [65, 78, 75, 86, 90])",
        "maxSum(nums = [8, 8, 12, 13, 24])",
        "maxSum(nums = [10, 40, 35, 88, 99, 100])",
        "maxSum(nums = [13, 23, 69, 88, 89, 90])",
        "maxSum(nums = [65, 72, 23, 88, 15, 98, 52, 60, 18, 35, 88])"
    ],
    "sample_230": [
        "countWays(nums = [3, 2, 1])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [3, 1, 2])",
        "countWays(nums = [3, 2, 2, 1])",
        "countWays(nums = [3, 2, 2, 1])",
        "countWays(nums = [1, 2, 3, 2, 1])",
        "countWays(nums = [3, 2, 2, 1, 1])",
        "countWays(nums = [4, 2, 3, 1])",
        "countWays([3, 2, 2, 2])",
        "countWays(nums=[2,2,1,1,1])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 3, target = 1)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 3, offers = [[1, 2, 1], [1, 3, 2]])",
        "maximizeTheProfit(N = 5, offers = [[0, 1, 1], [0, 2, 2], [1, 3, 1], [3, 4, 2], [4, 5, 1]])",
        "maximizeTheProfit(N = 5, offers = [[1,2,10],[2,3,20],[3,5,25]])",
        "maximizeTheProfit(N = 3, offers = [[0,1,2],[0,2,3]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 1], [3, 5, 2], [2, 4, 1]])",
        "maximizeTheProfit(N = 4, offers = [[1, 3, 1], [2, 4, 1], [3, 4, 1]])",
        "maximizeTheProfit(N = 3, offers = [[0,2,4], [1,3,3], [2,4,1]])",
        "maximizeTheProfit(N = 4, offers = [[0, 1, 3], [2, 3, 1], [2, 2, 2]])",
        "maximizeTheProfit(N = 5, offers = [[0, 2, 10], [0, 3, 15], [1, 4, 20], [3, 5, 25]])",
        "maximizeTheProfit(N = 10, offers = [[1,4,5],[3,5,4],[9,10,1]])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 4, offers = [[1, 2, 5], [2, 3, 5]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 10], [3, 4, 30], [1, 3, 20]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [1, 3, 5]])",
        "maximizeTheProfit(n = 6, offers = [[0, 1, 5], [0, 2, 10], [1, 3, 15], [2, 4, 20], [2, 5, 25]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 5], [1, 2, 2], [2, 3, 3], [3, 4, 4]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 10], [3, 4, 30], [1, 2, 20], [0, 4, 5]])",
        "maximizeTheProfit(n = 10, offers = [[2, 5, 6], [5, 9, 5], [6, 7, 4]])",
        "maximizeTheProfit(n = 5, offers = [[0, 0, 2], [1, 1, 1], [2, 2, 3], [3, 3, 5]])",
        "maximizeTheProfit(n = 5, offers = [[0, 0, 10], [2, 3, 1], [4, 4, 5]])",
        "maximizeTheProfit(n=5, offers=[(0, 1, 5), (0, 2, 6), (1, 3, 7), (1, 4, 2), (2, 4, 8), (3, 4, 3)])"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [40, 40, 40, 40], target = 45)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours=[16, 17, 15, 18, 19], target=20)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 1, 4, 1, 5], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [40, 40, 30, 30], target = 45)",
        "numberOfEmployeesWhoMetTarget(hours = [30, 20, 10, 5], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4, 8, 6], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [16, 18, 16, 18, 10, 8], target = 0)"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,1,2,3,4,5])",
        "countCompleteSubarrays(nums = [5, 5, 5, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3])",
        "countCompleteSubarrays(nums = [5, 5, 1, 1])",
        "countCompleteSubarrays(nums = [1,2,3,4,1,2,3,1,1,1,1,2,3])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 3, 2])",
        "countWays(nums = [1, 3, 2])",
        "countWays(nums = [1, 2, 3, 2, 1])",
        "countWays(nums = [1, 2, 1, 2])",
        "countWays(nums = [1, 2, 3, 2])",
        "countWays(nums = [2, 1])",
        "countWays(nums = [2, 1])",
        "countWays(nums = [1,2,1,2,1,2,1,2])"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4])",
        "maxIncreasingGroups(usageLimits = [3, 2, 2, 1])",
        "maxIncreasingGroups(usageLimits = [2, 3, 1, 2])",
        "maxIncreasingGroups(usageLimits=[3,2,2,2,1,1])",
        "maxIncreasingGroups(usageLimits=[1, 2, 3, 2, 1])",
        "maxIncreasingGroups(usageLimits = [2, 1, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [2, 3, 3])",
        "maxIncreasingGroups(usageLimits = [1, 3, 1])",
        "maxIncreasingGroups(usageLimits=[3, 2, 1, 3])",
        "maxIncreasingGroups(usageLimits=[3, 1, 2, 1])"
    ],
    "sample_173": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n=2, k=3)",
        "minimumSum(n=2, k=3)",
        "minimumSum(n=2, k=2)"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 1, 4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [5, 10, 15, 20], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [2, 2, 2, 1, 2, 2, 1, 2, 2, 2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 5], m = 5, k = 1)",
        "countInterestingSubarrays(nums=[3,1,4,3,1], m=4, k=1)",
        "countInterestingSubarrays(nums = [5,10,15,20,10,5], m = 4, k = 2)",
        "countInterestingSubarrays(nums = [1, 3, 4, 2, 4, 2, 5, 1], m = 3, k = 2)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 1, 2, 3, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 3, 2, 1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [2, 2, 1, 3, 3, 3, 3, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 2])"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 1)",
        "longestEqualSubarray(nums = [1,2,2,1,2,3], k = 1)",
        "longestEqualSubarray(nums = [1,2,2,1,3,3,3], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 3, 2, 2], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,3,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,3,3,3,2,1], k = 1)",
        "longestEqualSubarray(nums=[1,2,3,2,3,2,1,2,3,2,1], k=2)",
        "longestEqualSubarray(nums = [1,2,3,3,2,3,3,2], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 2, 2, 3, 1, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,2,1,1,1,3,3,3,3,3], k = 1)"
    ],
    "sample_170": [
        "isAcronym(words = [\"banana\"], s = \"b\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"Frequently\", \"Asked\", \"Questions\"], s = \"FAQ\")",
        "isAcronym(words = [\"banana\"], s = \"bnn\")",
        "isAcronym(words = [\"Banana\", \"Orange\"], s = \"BO\")",
        "isAcronym(words = [\"Welcome\", \"to\", \"the\", \"jungle\"], s = \"Wtj\")",
        "isAcronym(words = [\"ab\", \"cde\", \"fghi\"], s = \"acg\")",
        "isAcronym(words = [\"dogs\", \"are\", \"friendly\"], s = \"d\")",
        "isAcronym(words = [\"I\", \"declare\", \"reservation\"], s = \"JFR\")",
        "isAcronym(words = [\"bro\", \"kol\", \"n\"], s = \"bkn\")"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = '110')",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"01010\")",
        "maximumOddBinaryNumber(s='1010')",
        "maximumOddBinaryNumber(s = '11011')",
        "maximumOddBinaryNumber(s=\"001\")",
        "maximumOddBinaryNumber(s = '00000001')",
        "maximumOddBinaryNumber(s = '110010')",
        "maximumOddBinaryNumber(s=\"000101\")",
        "maximumOddBinaryNumber(s = \"1110001000100100\")"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1,2,3])",
        "countWays(nums = [1, 3, 2])",
        "countWays(nums = [1, 3, 2])",
        "countWays(nums = [1, 5, 3, 2])",
        "countWays(nums = [0, 2, 1])",
        "countWays(nums = [2, 4, 1, 3, 5])",
        "countWays(nums = [1, 2, 4, 5, 3])",
        "countWays(nums = [2,3,1,2,3])",
        "countWays(nums = [3, 4, 1, 5, 2])"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 5, offers = [[0, 1, 3], [1, 2, 2], [2, 3, 1], [0, 2, 5]])",
        "maximizeTheProfit(n = 5, offers = [[0, 2, 4], [1, 3, 3], [2, 5, 3]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 5], [1, 2, 2], [2, 3, 3], [3, 4, 1], [4, 5, 1]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 4], [0, 1, 9]])",
        "maximizeTheProfit(n = 6, offers = [[0, 1, 2], [1, 3, 1], [2, 5, 3]])",
        "maximizeTheProfit(n = 10, offers = [[3, 5, 3], [3, 7, 4], [4, 8, 7]])",
        "maximizeTheProfit(n=7, offers=[[0, 3, 2], [1, 3, 3], [2, 5, 5], [4, 6, 7]])",
        "maximizeTheProfit(n=7, offers=[[0, 1, 5], [0, 2, 4], [2, 3, 3], [1, 3, 5]])",
        "maximizeTheProfit(n = 10, offers = [[2,7,3],[1,2,3],[5,7,5]])",
        "maximizeTheProfit(n=5, offers=[[0,0,5],[1,1,7],[1,1,1],[2,3,10],[0,3,11]])"
    ],
    "sample_122": [
        "minimumIndex(nums = [1,1,2,2,2])",
        "minimumIndex(nums = [2,2,1,1,1,2,2])",
        "minimumIndex(nums = [1,2,2,2,1,1,1,1,1,1,1])",
        "minimumIndex(nums = [1,1,2,1,3,1])",
        "minimumIndex(nums = [1, 2, 2, 2, 2, 2, 2, 1])",
        "minimumIndex(nums = [1,2,2,2,2,3,4,2])",
        "minimumIndex(nums=[1, 1, 2, 1])",
        "minimumIndex(nums = [2,2,2,2,3,3,3,3,3,4])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 4, 3, 4, 4, 4, 4, 5, 5, 5])",
        "minimumIndex(nums = [1,2,2,2,1,3,4,5,6,7,8,2,2,2,2,2,2,2,2])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1,2],[3,5],[7,11]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [2, 4]])",
        "numberOfPoints(nums = [[1, 4], [7, 8], [3, 5]])",
        "numberOfPoints(nums = [[1, 2], [3, 5], [4, 5]])",
        "numberOfPoints(nums = [[1,2], [2,3], [1,3]])",
        "numberOfPoints(nums = [[1,2], [4,5], [7,8]])",
        "numberOfPoints(nums = [[2, 3], [4, 5], [6, 7], [8, 9]])",
        "numberOfPoints(nums = [[1,3],[2,5],[6,9]])",
        "numberOfPoints(nums = [[1,2], [3,5], [5,8]])",
        "numberOfPoints(nums = [[2,3], [4,5], [10, 10]])"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \"-\")",
        "splitWordsBySeparator(words = [], separator = \",\")",
        "splitWordsBySeparator(words = [\"a-b-c\", \"d-e-f\"], separator = \"-\")",
        "splitWordsBySeparator(words = [], separator = \".\")",
        "splitWordsBySeparator(words = [\"\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"a-b\", \"c-d\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"a-b-c\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"\", \"\", \"\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apples,oranges,grapes\"], separator = \",\")"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 0, target = 1)"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [3, 6]])",
        "numberOfPoints(nums = [[1,2], [2,3], [3,5]])",
        "numberOfPoints(nums = [[1, 3], [4, 6], [2, 5]])",
        "numberOfPoints(nums = [[1,2], [4,5], [7,8]])",
        "numberOfPoints(nums = [[1,3],[2,4],[2,5]])"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3], m = 4, k = 1)",
        "countInterestingSubarrays(nums = [2, 3, 5, 1, 4], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,2,2], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [4,3,1,2,5], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [2, 2, 1], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [2,3,5,3,1,2], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [4, 2, 3, 2, 4, 2], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 1, 2, 5], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [4,3,2,2,4,2,2,2], m = 4, k = 2)"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums=[1, 2, 3, 4, 5], k=1)",
        "sumIndicesWithKSetBits(nums = [1, 3, 7, 15, 31, 63], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 4, 5, 3, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 4, 1, 8, 7], k = 2)"
    ],
    "sample_203": [
        "minimumOperations(num = \"20250\")",
        "minimumOperations(num = \"0075\")",
        "minimumOperations(num = \"12325\")",
        "minimumOperations(num = '75')",
        "minimumOperations(num = \"1200\")",
        "minimumOperations(num = \"19525\")",
        "minimumOperations(num = \"0012345\")",
        "minimumOperations(num = \"7512\")",
        "minimumOperations(num = \"37480\")",
        "minimumOperations(num = \"51234\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [3, 1, 4, 3, 2], modulo = 5, k = 0)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4, 5], modulo=2, k=1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [2, 3, 5], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums = [2, 1, 5, 4, 3], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [5, 2, 4, 3, 6], modulo = 4, k = 1)"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1,2,3,4,5,6], K = 2)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5, 6, 7, 8], K = 2)",
        "longestEqualSubarray(A = [1,2,3,4,5,1,2,1], K = 2)",
        "longestEqualSubarray(A = [1, 2, 1, 3, 4, 3], K = 2)",
        "longestEqualSubarray(A = [1, 2, 2, 1, 1, 1, 2], K = 2)",
        "longestEqualSubarray(A = [1,2,3,4,2,1,5], K = 3)",
        "longestEqualSubarray(A = [1,2,2,3,4,5,5,5,6], K = 2)",
        "longestEqualSubarray(A=[1, 3, 2, 1, 3, 3], K=2)",
        "longestEqualSubarray(A = [1,3,2,4,5,3,1,2,4,5], K = 1)",
        "longestEqualSubarray(A = [1, 2, 2, 3, 1, 2, 3, 2, 3, 2, 1, 1, 1, 2], K = 2)"
    ],
    "sample_146": [
        "finalString(s = \"pointer\")",
        "finalString(s = \"pontier\")",
        "finalString(s = \"pinter\")",
        "finalString(s = \"pontir\")",
        "finalString(s=\"pinter\")",
        "finalString(s = \"iponter\")",
        "finalString(s='notep')",
        "finalString(s = \"ponitri\")",
        "finalString(s = \"interpot\")",
        "finalString(s = \"npoteri\")"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 7, 8], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 5, 12, 9, 7], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 5, 6, 12], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 8, 5, 8, 10], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 7, 12, 15, 8], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 0, 8, 1, 7], target = 2)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1,3], [2,4], [5,6]])",
        "numberOfPoints(nums = [[1, 2], [2, 4], [3, 6]])",
        "numberOfPoints(nums = [[1, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [3, 6]])",
        "numberOfPoints(nums = [[1, 4], [2, 5], [3, 6]])",
        "numberOfPoints(nums = [[1,3],[2,5]])",
        "numberOfPoints(nums = [[1, 5], [3, 4]])",
        "numberOfPoints(nums = [[1,2], [2,3], [3,5]])",
        "numberOfPoints(nums = [[1,3],[2,2],[3,3]])",
        "numberOfPoints(nums=[[1, 2], [3, 5]])"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 2, 3, 4])",
        "maxIncreasingGroups(A = [1,2,3])",
        "maxIncreasingGroups(A = [1,2,3,4,5])",
        "maxIncreasingGroups(A=[1,2,3])",
        "maxIncreasingGroups(A = [0, 1, 2, 3, 4])",
        "maxIncreasingGroups(A = [2, 1, 1])",
        "maxIncreasingGroups(A = [2, 1, 2, 2])",
        "maxIncreasingGroups(A = [1, 3, 4, 4])",
        "maxIncreasingGroups(A = [1, 1, 1, 1, 2, 2, 2, 3, 3, 4])",
        "maxIncreasingGroups(A = [2,1,2,2,3,4,3])"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [1, 2, 1], [2, 3, 1], [3, 4, 1], [4, 5, 1]])",
        "maximizeTheProfit(n = 3, offers = [[0,1,2], [1,2,3]])",
        "maximizeTheProfit(n = 3, offers = [[0, 1, 1], [1, 2, 2], [2, 3, 1]])",
        "maximizeTheProfit(n=5, offers=[[0, 2, 1], [1, 3, 2], [2, 4, 3], [3, 5, 4]])",
        "maximizeTheProfit(n = 4, offers = [[0,1,3],[1,2,2],[2,3,4]])",
        "maximizeTheProfit(n = 3, offers = [[0, 1, 3], [1, 2, 2], [2, 3, 1]])",
        "maximizeTheProfit(n = 3, offers = [[1,2,2],[1,2,1],[1,3,3]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 1], [1, 3, 2], [3, 4, 5], [1, 5, 3]])",
        "maximizeTheProfit(n = 5, offers = [[0, 2, 1], [0, 4, 2], [1, 4, 2], [2, 3, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,2], [2,4,2], [3,5,1], [1,4,3], [2,5,2]])"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"L___R\")",
        "furthestDistanceFromOrigin(moves = \"LLR_R\")",
        "furthestDistanceFromOrigin(moves = \"LLR__RR\")",
        "furthestDistanceFromOrigin(moves = \"LLR_RLL\")",
        "furthestDistanceFromOrigin(moves = \"L_R_L___\")",
        "furthestDistanceFromOrigin(moves = \"__LRL_\")",
        "furthestDistanceFromOrigin(moves = \"LLRL_LR\")",
        "furthestDistanceFromOrigin(moves = \"R_L__R_L\")",
        "furthestDistanceFromOrigin(moves=\"R_R_LL\")",
        "furthestDistanceFromOrigin(moves = \"__L_R_L_R_\")"
    ],
    "sample_175": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 1, k = 3)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,2],[3,4],[5,6]])",
        "numberOfPoints(nums = [[1,2], [3,4], [5,6]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[4,5]])",
        "numberOfPoints(nums = [[1, 2], [3, 5], [4, 6]])",
        "numberOfPoints(nums = [[1,2],[4,5],[6,7]])",
        "numberOfPoints(nums = [[1,2],[3,4],[1,5]])",
        "numberOfPoints(nums=[[1,3],[2,4],[3,6]])",
        "numberOfPoints(nums = [[2,5],[3,4],[1,4]])",
        "numberOfPoints(nums = [[2,5],[3,4],[2,2]])",
        "numberOfPoints(nums = [[2, 5], [3, 7], [10, 10]])"
    ],
    "sample_205": [
        "minimumOperations(num = \"520\")",
        "minimumOperations(num = \"520\")",
        "minimumOperations(num = \"100\")",
        "minimumOperations(num = \"10025\")",
        "minimumOperations(num = \"001234\")",
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"502\")",
        "minimumOperations(num = \"3725\")",
        "minimumOperations(num = \"21\")",
        "minimumOperations(num = \"11111011000\")"
    ],
    "sample_120": [
        "minimumIndex(nums = [1, 7, 3, 6, 5, 6])",
        "minimumIndex(nums = [1, 7, 3, 6, 5, 6])",
        "minimumIndex(nums = [1, 2, 2, 2, 1, 1, 1])",
        "minimumIndex(nums = [1, 1, 2, 2, 3])",
        "minimumIndex(nums = [2,2,1,1,1,2,2])",
        "minimumIndex(nums = [1,2,3,4,3,2,1])",
        "minimumIndex(nums = [1, 2, 1, 1, 1, 2])",
        "minimumIndex(nums = [1, 1, 2, 4, 4])",
        "minimumIndex(nums = [1, 3, 2, 2, 2, 3, 1])",
        "minimumIndex(nums = [1, 2, 3, 3, 2, 1, 1, 1, 3, 2, 1])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"L___R\")",
        "furthestDistanceFromOrigin(moves = \"LLLRRR__\")",
        "furthestDistanceFromOrigin(moves = \"LL_RR_\")",
        "furthestDistanceFromOrigin(moves = \"LLR_R\")",
        "furthestDistanceFromOrigin(moves = \"L__R_L\")",
        "furthestDistanceFromOrigin(moves = \"LL__R\")",
        "furthestDistanceFromOrigin(moves = \"LL_RRLLR\")",
        "furthestDistanceFromOrigin(moves = \"R_L__L_R\")",
        "furthestDistanceFromOrigin(moves = \"__L_R___L___R_\")",
        "furthestDistanceFromOrigin(moves=\"LRLR_L_LRRR\")"
    ],
    "sample_161": [
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [51, 715, 35, 20])",
        "maxSum(nums = [11, 22, 33])",
        "maxSum(nums = [1,2,3])",
        "maxSum(nums = [51, 712, 1, 1, 2000])",
        "maxSum(nums = [10, 3, 15, 5])",
        "maxSum(nums = [11, 20, 35, 44, 53])"
    ],
    "sample_160": [
        "maxSum(nums = [51,71,17,24,42])",
        "maxSum(nums = [51,71,17,24,42])",
        "maxSum(nums = [51,71,17,24,42])",
        "maxSum(nums = [51,71,17,24,42])",
        "maxSum(nums = [51,71,17,42])",
        "maxSum(nums = [51,71,17,42])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10,12,12,22,23])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = [\"one,two\", \"three,four\", \"five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three,four,five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two,three\", \"four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three\", \"four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one-two\", \"three\", \"four-five-six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\"], separator = \" \")",
        "splitWordsBySeparator(words=[\"one,two\", \"three,four\", \"five,six\"], separator=',')",
        "splitWordsBySeparator(words=['one-two', 'three-four', 'five-six'], separator='-')",
        "splitWordsBySeparator(words = ['one,two', 'three', 'four-five-six'], separator = [',', '-'])",
        "splitWordsBySeparator(words = [\"one,two\", \"three\", \"four;five\", \"six\"], separator = [\",\",\";\"])"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40], target = 50)",
        "numberOfEmployeesWhoMetTarget(hours = [16, 12, 18, 20, 15], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [16, 17, 15], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours=[5,3,4,6], target=7)",
        "numberOfEmployeesWhoMetTarget(hours = [10,20,30,40], target = 100)",
        "numberOfEmployeesWhoMetTarget(hours=[1, 2, 3, 4, 5], target=0)",
        "numberOfEmployeesWhoMetTarget(hours = [16, 17, 16], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [16, 12, 18, 15, 16, 19, 17, 16, 18, 19], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [16, 18, 15, 18, 17, 13, 10], target = 18)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 3, 10, 13, 17, 9], target = 12)"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [16, 17, 15, 18, 19], target = 18)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [16,16,16], target = 16)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours=[2, 3, 4], target=5)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 2, 5, 4, 1], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours=[2, 4, 6], target=7)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 10, 5, 30], target = 25)",
        "numberOfEmployeesWhoMetTarget(hours=[0, 1, 2, 3, 4], target=4)"
    ],
    "sample_171": [
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 1, k = 3)",
        "minimumSum(n = 1, k = 2)"
    ],
    "sample_159": [
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40])",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [51, 712, 1, 3])",
        "maxSum(nums = [1,12,3])",
        "maxSum(nums = [1, 23, 4, 5, 67])",
        "maxSum(nums = [12, 11, 23, 34, 56])"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [2, 3, 1, 2], m = 5)",
        "canSplitArray(nums = [2, 3, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 1], m = 3)",
        "canSplitArray(nums = [1,2,3,1,1], m = 3)",
        "canSplitArray(nums = [1,2,3,1], m = 2)",
        "canSplitArray(nums = [2, 2, 1, 2], m = 5)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \"-\")",
        "splitWordsBySeparator(words=[], separator=\",\")",
        "splitWordsBySeparator(words = [], separator = \":\")",
        "splitWordsBySeparator(words = [\" \"], separator = \" \")",
        "splitWordsBySeparator(words = [\"Hello,World\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple\"], separator = \"-\")"
    ],
    "sample_172": [
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n=3, k=2)",
        "minimumSum(n = 1, k = 2)"
    ],
    "sample_228": [
        "countWays(nums = [0,1,2])",
        "countWays(nums = [0, 1, 2])",
        "countWays(nums = [1,0,2])",
        "countWays(nums = [1,0,2])",
        "countWays(nums = [1,2,0])",
        "countWays(nums = [0, 0, 1, 2])",
        "countWays(nums = [0, 0, 1])",
        "countWays([0,2,1])",
        "countWays(nums = [0, 1, 2, 3, 4])",
        "countWays(nums = [0,0,1,1,0])"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = '00')",
        "maximumOddBinaryNumber(s = \"01\")",
        "maximumOddBinaryNumber(s = '01011000')"
    ],
    "sample_119": [
        "minimumIndex(nums = [1, 2, 2, 2, 1])",
        "minimumIndex(nums = [1,2,2,2,1,1])",
        "minimumIndex(nums = [1,2,2,2,3,4])",
        "minimumIndex(nums = [1,2,2,2,3,4])",
        "minimumIndex(nums = [1, 2, 2, 2, 2, 2, 1])",
        "minimumIndex(nums=[1,2,2,2,1,1,1,2,2])",
        "minimumIndex(nums = [1,2,2,2,2,2,1,1,1,1])",
        "minimumIndex(nums = [1, 2, 3, 2, 2, 2, 1, 1])",
        "minimumIndex(nums = [1,1,2,1])",
        "minimumIndex(nums = [1, 2, 3, 2, 3, 2, 3])"
    ],
    "sample_153": [
        "canSplitArray(nums = [1,2,3,4,5,6,7,8,9], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 5)",
        "canSplitArray(nums = [2, 1, 3, 2, 4, 3], m = 5)",
        "canSplitArray(nums = [2,2,1], m = 4)",
        "canSplitArray(nums = [2, 5, 10, 3], m = 7)",
        "canSplitArray(nums = [1,1,1,2], m = 3)",
        "canSplitArray(nums = [1,2,3,1,2,3], m = 10)",
        "canSplitArray(nums = [2,1,3,5,2], m = 3)",
        "canSplitArray(nums = [2, 2, 1, 2, 1, 2], m = 5)",
        "canSplitArray(nums = [5, 2, 2, 3, 5, 10], m = 5)"
    ],
    "sample_147": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = \"rtsni\")",
        "finalString(s = \"rtsng\")",
        "finalString(s = 'trsing')",
        "finalString(s = \"rstnig\")"
    ],
    "sample_174": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n=2, k=2)",
        "minimumSum(n = 1, k = 2)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1,2,3], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 5)",
        "canSplitArray(nums=[1,2,3], m=5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 3)",
        "canSplitArray(nums = [1,1,1,1], m = 2)",
        "canSplitArray(nums = [2, 3, 1, 2, 4], m = 7)",
        "canSplitArray(nums = [1, 3, 3, 2], m = 5)",
        "canSplitArray(nums = [1, 3, 5, 2, 1], m = 4)"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "countCompleteSubarrays(nums=[1,2,1,3,2,1,3,2])"
    ],
    "sample_150": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = 'string')",
        "finalString(s = \"string\")",
        "finalString(s = 'rtsni')",
        "finalString(s = 'sirting')",
        "finalString(s = 'singr')"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 3, target = 10)"
    ],
    "sample_176": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums=[1,2,3,4,5,6], modulo=2, k=0)",
        "countInterestingSubarrays(nums = [2, 3, 5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 3, 6, 2, 2, 0], modulo = 6, k = 5)",
        "countInterestingSubarrays(nums=[4,5,0,-2,-3,1],modulo=5,k=1)",
        "countInterestingSubarrays(nums = [1, 4, 7, 3, 2], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums=[1, 3, 9, 4, 5], modulo=3, k=2)"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [3, 1, 4, 1, 5, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 7, 5, 11], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 1, 4, 3, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 2, 1, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 4, 5], k = 1)"
    ],
    "sample_151": [
        "finalString(s = \"string\")",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'rtsng')",
        "finalString(s = 'rtsng')",
        "finalString(s = 'rtsng')",
        "finalString(s = 'strinig')",
        "finalString(s = 'pirates')",
        "finalString(s = 'gstrin')"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8, 16], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 3, 1, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,0,2,3,4], k = 1)"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [10, 16, 12, 15])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 1, 1])",
        "maxIncreasingGroups(usageLimits = [1, 1, 2, 2, 3, 3, 4, 4])",
        "maxIncreasingGroups(usageLimits = [2, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 1, 2])",
        "maxIncreasingGroups(usageLimits = [10, 20, 30, 40])",
        "maxIncreasingGroups(usageLimits = [1, 1, 2, 3, 3, 5])",
        "maxIncreasingGroups(usageLimits = [5, 4, 1, 3])",
        "maxIncreasingGroups(usageLimits=[5,1,3,3,4])"
    ],
    "sample_204": [
        "minimumOperations(s = \"525\")",
        "minimumOperations(s = \"525\")",
        "minimumOperations(s = \"0025\")",
        "minimumOperations(s = \"0025\")",
        "minimumOperations(s = \"5075\")",
        "minimumOperations(s = \"5225\")",
        "minimumOperations(s = \"002575\")",
        "minimumOperations(s = \"025\")",
        "minimumOperations(s = \"5205\")",
        "minimumOperations(s=\"138825\")"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 7, 9, 8], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 9, 8, 7], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 15, 30], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 5, 20, 15], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 7, 6, 9, 12], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 7, 10], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 12, 7, 15], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 5, 20, 7], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 5, 8, 13, 15], target = 8)"
    ],
    "sample_148": [
        "finalString(s = \"pointer\")",
        "finalString(s = 'pointer')",
        "finalString(s = 'pontier')",
        "finalString(s = \"pointer\")",
        "finalString(s = \"pontier\")",
        "finalString(s = \"interp\")",
        "finalString(s = 'pointi')",
        "finalString(s = 'pontiert')",
        "finalString(s = 'poniiter')",
        "finalString(s = \"opinter\")"
    ],
    "sample_168": [
        "isAcronym(words = [\"banana\"], s = \"b\")",
        "isAcronym(words = [\"ban\", \"ana\"], s = \"ba\")",
        "isAcronym(words = [\"ban\", \"ana\"], s = \"ba\")",
        "isAcronym(words = [\"banana\", \"split\"], s = \"bs\")",
        "isAcronym(words = [\"there\", \"is\", \"no\", \"spoon\"], s = \"TSNS\")",
        "isAcronym(words = [\"banana\", \"apple\", \"grapes\"], s = \"bap\")",
        "isAcronym(words = [\"nat\", \"io\", \"na\"], s = \"nin\")",
        "isAcronym(words = [\"what\", \"is\", \"the\", \"word\"], s = \"WITW\")",
        "isAcronym(words = [\"Hypochondriac\", \"Blue\"], s = \"HUB\")",
        "isAcronym(words = [\"constructor\", \"destructor\", \"in\"], s = \"cdi\")"
    ],
    "sample_201": [
        "minOperations(nums = [1,2,3,4], target = 10)",
        "minOperations(nums = [1, 2, 3], target = 4)",
        "minOperations(nums = [1, 2, 3, 4], target = 5)",
        "minOperations(nums = [1,2,3,4], target = 6)",
        "minOperations(nums=[1,2,3], target=4)",
        "minOperations(nums = [5,2,4], target = 1)",
        "minOperations(nums = [2, 4, 8, 16], target = 0)",
        "minOperations(nums = [3, 5], target = 10)",
        "minOperations(nums=[1,2,3,4], target=3)",
        "minOperations(nums=[3,2,2,4], target=3)"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = '110')",
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s = '10101')",
        "maximumOddBinaryNumber(s = '1010')",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = '00010')",
        "maximumOddBinaryNumber(s = \"10110\")",
        "maximumOddBinaryNumber(s = '10111')"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = '0001')",
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s = \"100\")",
        "maximumOddBinaryNumber(s = '0010')",
        "maximumOddBinaryNumber(s = \"1000\")",
        "maximumOddBinaryNumber(s='0001')",
        "maximumOddBinaryNumber(s = '1110')",
        "maximumOddBinaryNumber(s = \"11001\")",
        "maximumOddBinaryNumber(s = '10110')",
        "maximumOddBinaryNumber(s = \"0010100\")"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 2, target = 6)"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LRL\")",
        "furthestDistanceFromOrigin(moves = \"LRL\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRAA\")",
        "furthestDistanceFromOrigin(moves = \"LRLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves=\"LRL\")",
        "furthestDistanceFromOrigin(moves=\"LLAR\")",
        "furthestDistanceFromOrigin(moves=\"LLRLLRA\")"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 2, target = 5)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [16, 12, 18], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [16, 18, 10, 8, 14, 16], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 5, 2, 9], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 6, 9, 7, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 21, 22], target = 22)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 22, 23], target = 24)",
        "numberOfEmployeesWhoMetTarget(hours = [0,1,2,3,4,5], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 12, 15], target = 0)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 5, 3, 10], target = 0)",
        "numberOfEmployeesWhoMetTarget(hours = [15, 17, 19], target = 14)"
    ],
    "sample_231": [
        "countWays(nums = [0, 2, 1])",
        "countWays(nums = [0, 1, 2])",
        "countWays(nums = [1,0,2])",
        "countWays(nums = [0, 1, 3])",
        "countWays(nums = [0, 3, 2])",
        "countWays([0, 2, 1])",
        "countWays(nums = [1,2,0])",
        "countWays(nums = [0, 0, 2, 1])",
        "countWays(nums=[0,1,1])",
        "countWays(nums = [1,0,0,1,0,1])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"L___R\")",
        "furthestDistanceFromOrigin(moves = \"L___LRR\")",
        "furthestDistanceFromOrigin(moves = \"L___LRLR\")",
        "furthestDistanceFromOrigin(moves = \"LLL___RRRRRR\")",
        "furthestDistanceFromOrigin(moves = \"L___R_LL\")",
        "furthestDistanceFromOrigin(moves = \"LL_R_RLL\")",
        "furthestDistanceFromOrigin(moves = \"LL__R_\")",
        "furthestDistanceFromOrigin(moves = \"LL__RRRRLLR\")",
        "furthestDistanceFromOrigin(moves = \"R_R___R_\")",
        "furthestDistanceFromOrigin(moves = \"LLR_RRLLL\")"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n=2, target=3)",
        "minimumPossibleSum(n=2, target=3)",
        "minimumPossibleSum(n = 3, target = 1)"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [5, 5, 5, 5])",
        "countCompleteSubarrays(nums = [5, 5, 5, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums=[5,5,5,5])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,3])",
        "countCompleteSubarrays(nums=[1, 2, 1, 2, 3])",
        "countCompleteSubarrays(nums = [5,1,3,4,2,3])",
        "countCompleteSubarrays(nums = [5, 3, 5, 3, 5, 1, 1, 5, 3, 5])"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 2, 3], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 9)",
        "canSplitArray(nums = [1, 2, 3], m = 4)",
        "canSplitArray(nums = [1, 1, 2, 3, 5], m = 5)",
        "canSplitArray(nums = [1,2,3,1,1], m = 5)",
        "canSplitArray(nums = [1, 3, 4], m = 5)",
        "canSplitArray(nums = [1, 1, 1, 3, 5], m = 3)",
        "canSplitArray(nums = [1,2,3,4,5,6,7,8,9], m = 20)"
    ],
    "sample_200": [
        "minOperations(nums = [1, 2, 3, 4], target = 10)",
        "minOperations(nums = [1, 2, 3], target = 10)",
        "minOperations(nums = [1,2,3,4,5], target = 15)",
        "minOperations(nums = [1], target = 10)",
        "minOperations(nums = [1,2,3], target = 3)",
        "minOperations(nums = [3, 5, 7], target = 10)",
        "minOperations(nums = [1,2,3,4], target = 12)",
        "minOperations(nums = [2,3,5], target = 11)",
        "minOperations(nums = [3, 2, 5], target = 1)",
        "minOperations(nums = [2,2,3,4], target = 15)"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8, 16], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8], k = 1)",
        "sumIndicesWithKSetBits(nums=[1, 2, 3, 4, 5, 6], k=3)",
        "sumIndicesWithKSetBits(nums = [0, 1, 1, 2, 3, 5, 8, 13], k = 1)"
    ],
    "sample_165": [
        "isAcronym(words = [\"banana\", \"split\"], s = \"bs\")",
        "isAcronym(words = [\"ban\", \"ana\"], s = \"ba\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"banana\", \"apple\"], s = \"ba\")",
        "isAcronym(words = [\"banana\", \"splash\"], s = \"bs\")",
        "isAcronym(words = [\"John\", \"Doe\"], s = \"JD\")",
        "isAcronym(words = [\"we\", \"are\", \"the\", \"world\"], s = \"wawt\")",
        "isAcronym(words = [\"balloon\", \"pop\", \"corn\"], s = \"bpc\")",
        "isAcronym(words = [\"beautiful\", \"sunflower\"], s = \"bs\")",
        "isAcronym(words = [\"pig\", \"has\", \"a\", \"tail\"], s = \"pHat\")"
    ],
    "sample_227": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [3, 1, 4, 2])",
        "countWays(nums = [2, 3, 1, 0])",
        "countWays(nums = [1, 3, 2, 5, 0])",
        "countWays(nums = [1, 3, 2, 4, 5, 0])",
        "countWays(nums=[0, 1, 5, 3, 2])",
        "countWays(nums = [1, 5, 8, 3, 2, 6, 10, 2, 3, 9])"
    ],
    "sample_158": [
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [51, 712, 1, 4])",
        "maxSum(nums = [51, 712, 1, 4])",
        "maxSum(nums = [51, 712, 1, 4])",
        "maxSum(nums = [])",
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums = [51, 32, 73])",
        "maxSum(nums = [10, 20, 15, 22, 33])",
        "maxSum(nums = [1, 2, 10, 20])",
        "maxSum(nums = [51, 711, 33, 24, 48, 11])"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 2, 1, 2], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 2, 3, 2], k = 2)",
        "longestEqualSubarray(nums = [1,1,2,2,2,2,3,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,1,2,1,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,1,2,3,1,3], k = 2)",
        "longestEqualSubarray(nums=[1,2,2,1,1,2,1], k=2)",
        "longestEqualSubarray(nums=[2,2,2,2,1,1,1,1,3,3,3,3,3], k=2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2], k = 2)"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [0, 1, 9], [2, 4, 4], [0, 2, 2]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [0, 2, 3], [1, 3, 2], [2, 4, 3]])",
        "maximizeTheProfit(n = 4, offers = [[2, 3, 5], [1, 2, 2], [0, 1, 4]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 5], [2, 3, 5], [0, 2, 3]])",
        "maximizeTheProfit(n = 4, offers = [[0, 1, 3], [1, 2, 4], [0, 2, 5]])",
        "maximizeTheProfit(n = 5, offers = [[0,1,2],[0,2,3],[1,3,2],[1,2,4]])",
        "maximizeTheProfit(n = 5, offers = [[0,0,1],[0,2,5],[1,2,5],[1,3,5]])",
        "maximizeTheProfit(n = 5, offers = [[0,1,4], [1,2,5], [2,3,2], [3,4,3], [4,5,1]])",
        "maximizeTheProfit(n=5, offers=[[0, 1, 4], [0, 2, 3], [1, 3, 5], [2, 4, 5]])",
        "maximizeTheProfit(n = 4, offers = [[0, 0, 5], [0, 1, 7], [1, 3, 3], [2, 3, 6]])"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1,2,3,4,5])",
        "maxIncreasingGroups(x = [1,2,3,4,5])",
        "maxIncreasingGroups(x = [1, 1, 2, 2, 2, 3, 3, 3, 3])",
        "maxIncreasingGroups(x = [4, 1, 3, 2])",
        "maxIncreasingGroups(x = [1, 2, 2, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [2, 3, 2, 1])",
        "maxIncreasingGroups(x = [1, 3, 6, 7, 8, 9])",
        "maxIncreasingGroups(x = [4, 2, 3, 2, 4, 1])"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 2)",
        "sumIndicesWithKSetBits(nums=[1, 2, 3, 4, 5], k=2)",
        "sumIndicesWithKSetBits(nums=[1, 2, 3, 4, 5], k=2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 4, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,4,8,16], k = 2)",
        "sumIndicesWithKSetBits(nums = [2,4,6,8], k = 2)",
        "sumIndicesWithKSetBits(nums = [3,2,1], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 5, 7, 9, 11], k = 1)"
    ],
    "sample_207": [
        "minimumOperations(num = \"520\")",
        "minimumOperations(num = \"520\")",
        "minimumOperations(num = \"100\")",
        "minimumOperations(num = \"250\")",
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"10\")",
        "minimumOperations(num = \"200\")",
        "minimumOperations(num = \"5075\")",
        "minimumOperations(num = \"0123\")",
        "minimumOperations(num = '0000000000')"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"LRL\")",
        "furthestDistanceFromOrigin(moves = \"LRL\")",
        "furthestDistanceFromOrigin(moves = \"LRL\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLL\")",
        "furthestDistanceFromOrigin(moves = \"LRLR\")",
        "furthestDistanceFromOrigin(moves = \"RRL\")"
    ],
    "sample_206": [
        "minimumOperations(num = \"2575\")",
        "minimumOperations(num = \"2575\")",
        "minimumOperations(num = \"2575\")",
        "minimumOperations(num = \"0257\")",
        "minimumOperations(num = \"002575\")",
        "minimumOperations(num = \"075\")",
        "minimumOperations(num = \"2075\")",
        "minimumOperations(num = \"10\")",
        "minimumOperations(num=\"75\")",
        "minimumOperations(num = \"5200520052005200\")"
    ],
    "sample_155": [
        "canSplitArray(nums = [1,2,3,4,5], m = 11)",
        "canSplitArray(nums=[1, 2, 3, 4], m=10)",
        "canSplitArray(nums=[1,2,3,4,5], m=6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 15)",
        "canSplitArray(nums = [2, 1, 3, 2, 4], m = 6)",
        "canSplitArray(nums=[1, 3, 2, 4, 1], m=5)",
        "canSplitArray(nums=[1,3,3,2], m=5)",
        "canSplitArray(nums = [3,2,1,4,4], m = 3)",
        "canSplitArray(nums = [3,2,1,2,2], m = 3)",
        "canSplitArray(nums=[2, 2, 3, 3, 4], m=5)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 1, 2, 3, 1, 2, 1])",
        "countCompleteSubarrays(nums = [1,2,3,2,4,1,3,2,4,1])",
        "countCompleteSubarrays(nums = [2, 5, 1, 2, 3, 4, 1])",
        "countCompleteSubarrays(nums=[5, 5, 1, 5, 5])",
        "countCompleteSubarrays(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5])"
    ],
    "sample_202": [
        "minimumOperations(num = \"002575\")",
        "minimumOperations(num = \"5200\")",
        "minimumOperations(num=\"0075\")",
        "minimumOperations(num = \"10250\")",
        "minimumOperations(num = \"725000\")",
        "minimumOperations(num = \"0075025\")",
        "minimumOperations(num = \"0025007550\")",
        "minimumOperations(num = \"1270\")",
        "minimumOperations(num = \"10052750\")",
        "minimumOperations(num = \"55252\")"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [], b = \"-\")",
        "splitWordsBySeparator(a = [], b = \"/\")",
        "splitWordsBySeparator(a = [\"Hello, World!\"], b = \" \")",
        "splitWordsBySeparator(a = [\"banana\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"hello\"], b = \" \")",
        "splitWordsBySeparator(a = [\"abc\", \"def\", \"ghi\"], b = \"x\")",
        "splitWordsBySeparator(a = [\"apple:banana\", \"cherry\"], b = \":\")",
        "splitWordsBySeparator(a=[\"banana, orange, apple\"], b=\", \")",
        "splitWordsBySeparator(a=[\"hello, world\", \"how are you?\"], b=\", \")",
        "splitWordsBySeparator(a = [\"hello||world\", \"Python||is||fun\"], b = \"||\")"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 4, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [5, 3, 6, 2, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 6, 1, 3, 7], k = 2)"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = '1100')",
        "maximumOddBinaryNumber(s = \"1100\")",
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s='101')",
        "maximumOddBinaryNumber(s = \"0110\")",
        "maximumOddBinaryNumber(s = \"0100\")",
        "maximumOddBinaryNumber(s = '1111010')"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,3,2,1,3,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 1)",
        "longestEqualSubarray(nums = [1,3,2,1,2], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 3, 1, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6], k = 4)"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,2,1,1,1,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 2, 1], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,2,3,3], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 2, 1, 2], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,2,1,3,4,5], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 2, 3, 2, 2, 2, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [2,3,3,4,2,3,4,4,3,2,2,2,3,3,4,4,4,4], k = 2)"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '110')",
        "maximumOddBinaryNumber(s = \"11100\")",
        "maximumOddBinaryNumber(s = '1010')",
        "maximumOddBinaryNumber(s = '111')",
        "maximumOddBinaryNumber(s = '00011')",
        "maximumOddBinaryNumber(s = \"111000\")",
        "maximumOddBinaryNumber(s = \"101010\")"
    ],
    "sample_166": [
        "isAcronym(words = [\"banana\"], s = \"b\")",
        "isAcronym(words = [\"banana\"], s = \"b\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"Banana\", \"Rama\"], s = \"BR\")",
        "isAcronym(words = [\"Boston\", \"Academy\"], s = \"BA\")",
        "isAcronym(words = [\"banana\", \"split\", \"us\"], s = \"bsu\")",
        "isAcronym(words = [\"This\", \"is\", \"Python\"], s = \"TIP\")",
        "isAcronym(words = [\"happy\", \"elephant\"], s = \"he\")",
        "isAcronym(words = [\"banana\", \"parsley\"], s = \"bp\")",
        "isAcronym(words = [\"banana\", \"and\", \"apricot\"], s = \"BAA\")"
    ],
    "sample_163": [
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [51, 712, 1, 4])",
        "maxSum(nums = [51,32,43])",
        "maxSum(nums = [])",
        "maxSum(nums=[51, 32, 43])",
        "maxSum(nums = [12, 23])",
        "maxSum(nums = [15, 13, 10])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [3, 2, 1])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [5, 4, 3, 2, 1])",
        "semiOrderedPermutation(nums = [4, 3, 2, 1])",
        "semiOrderedPermutation(nums = [4, 3, 2, 1])",
        "semiOrderedPermutation(nums = [3,1,2,4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4])",
        "semiOrderedPermutation(nums = [5, 3, 4, 2, 1])",
        "semiOrderedPermutation(nums=[3,2,1])",
        "semiOrderedPermutation(nums=[5, 4, 3, 2, 1])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1, 2, 3, 4, 5])",
        "continuousSubarrays(a = [1, 2, 3, 4])",
        "continuousSubarrays(a = [1, 2, 3])",
        "continuousSubarrays(a = [1,2,3,4])",
        "continuousSubarrays(a = [1, 2, 3, 2, 1, 4])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6, 7, 8])",
        "continuousSubarrays(a = [1, 2, 3, 4, 2, 3, 4])",
        "continuousSubarrays(a = [3, 2, 2, 4, 2])",
        "continuousSubarrays(a = [3, 3, 4, 5])",
        "continuousSubarrays(a = [2, 3, 5, 3, 3, 2, 4, 3, 2, 1, 2, 4])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [1, 2, 3, 4])",
        "continuousSubarrays(nums = [1,2,3,4,5])",
        "continuousSubarrays(nums = [1,2,3,4])",
        "continuousSubarrays(nums = [1, 3, 5])",
        "continuousSubarrays(nums = [1,2,1,2,3])",
        "continuousSubarrays(nums = [1, 2, 1, 3, 1, 2])",
        "continuousSubarrays(nums = [1, 2, 3, 1, 1, 2])",
        "continuousSubarrays(nums = [2, 2, 4, 4, 4, 4])",
        "continuousSubarrays(nums = [1,2,1,3,2,1,3])",
        "continuousSubarrays(nums = [1, 2, 1, 3, 1, 4, 3, 2, 1])"
    ],
    "sample_8": [
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1]])",
        "colorTheArray(n = 3, queries = [[0, 2], [1, 2], [2, 1]])",
        "colorTheArray(n = 2, queries = [[0, 2], [1, 2]])",
        "colorTheArray(n = 2, queries = [[0, 2], [1, 2]])",
        "colorTheArray(n=3, queries=[[0,1],[1,2],[0,2]])",
        "colorTheArray(n = 3, queries = [[1, 2], [0, 2]])",
        "colorTheArray(n = 3, queries = [[1, 2]])",
        "colorTheArray(n=3, queries=[[0,1],[1,2],[2,1]])",
        "colorTheArray(n = 3, queries = [[1, 1], [1, 2], [2, 1], [2, 2], [3, 2]])"
    ],
    "sample_97": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [1,2,3,4,5], target = 2)",
        "maximumJumps(nums = [1, 2, 3], target = 1)",
        "maximumJumps(nums = [100,-23,-23,404,100,23,23,23,3,404], target = 3)",
        "maximumJumps(nums = [100, -23, -23, 404, 100, 23, 23, 23, 3, 404], target = 3)",
        "maximumJumps(nums = [5,4,3,2,1], target = 1)",
        "maximumJumps(nums = [0, 1, 2, 3], target = 1)",
        "maximumJumps(nums = [1,2,3,4,5,6,7,8], target = 3)",
        "maximumJumps(nums = [1, 5, 2], target = 2)"
    ],
    "sample_22": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABABCD\")"
    ],
    "sample_7": [
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,2]])",
        "colorTheArray(n = 3, queries = [[0,1],[1,2],[0,2]])",
        "colorTheArray(n = 3, queries = [[0,2],[1,2],[2,1]])",
        "colorTheArray(n = 5, queries = [])",
        "colorTheArray(n = 2, queries = [[0, 2]])",
        "colorTheArray(n = 2, queries = [[0,2],[1,2]])",
        "colorTheArray(n = 1, queries = [[0, 2]])"
    ],
    "sample_10": [
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 2]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,2]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,2]])",
        "colorTheArray(n = 4, queries = [(0, 2), (1, 2), (3, 1), (1, 1), (2, 1)])",
        "colorTheArray(n = 3, queries = [[0, 2], [1, 2], [0, 1], [2, 1]])",
        "colorTheArray(n = 6, queries = [[2, 2], [5, 3], [4, 3], [1, 2], [4, 1]])",
        "colorTheArray(n = 3, queries = [[0, 2], [1, 2], [0, 1], [2, 3]])",
        "colorTheArray(n = 6, queries = [[2, 2], [1, 1], [2, 3], [2, 1], [3, 2]])",
        "colorTheArray(n = 6, queries = [[0,1],[1,2],[3,2],[2,1],[2,2]])",
        "colorTheArray(n = 4, queries = [(0, 2), (1, 2), (3, 2), (2, 3)])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [3,2,1,5,4])",
        "semiOrderedPermutation(nums = [3,2,1,5,4])",
        "semiOrderedPermutation(nums = [5,4,1,2,3])",
        "semiOrderedPermutation(nums = [4,3,2,1,5])",
        "semiOrderedPermutation(nums = [4, 3, 1, 2])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4, 5])",
        "semiOrderedPermutation(nums = [4,2,3,1,5])",
        "semiOrderedPermutation(nums = [5,3,4,1,2])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [5, 1, 3, 4, 2])"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 1, 3, 5, 4], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 4, 3], threshold = 7)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6, 7, 1], threshold = 7)",
        "longestAlternatingSubarray(nums = [0, 2, 4, 10, 11], threshold = 10)",
        "longestAlternatingSubarray(nums=[2, 3, 5, 4, 6, 1, 2], threshold=6)",
        "longestAlternatingSubarray(nums = [2, 5, 1, 4, 7, 6, 3], threshold = 3)",
        "longestAlternatingSubarray(nums = [3, 7, 5, 8, 1, 15, 2, 10], threshold = 10)"
    ],
    "sample_33": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '5123010000000')",
        "removeTrailingZeros(num = \"512301000\")"
    ],
    "sample_50": [
        "smallestString(s = \"abaaa\")",
        "smallestString(s = 'baaab')",
        "smallestString(s = \"babaa\")",
        "smallestString(s = \"aaabb\")",
        "smallestString(s = 'aaab')",
        "smallestString(s = 'abb')",
        "smallestString(s = \"aaaaa\")",
        "smallestString(s = \"abcd\")",
        "smallestString(s = \"azzz\")",
        "smallestString(s = 'aabba')"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(nums = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(nums = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(nums = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(nums = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(nums = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(nums = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4])"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)"
    ],
    "sample_118": [
        "minimumIndex(nums = [1, 2, 1, 2, 1, 1])",
        "minimumIndex(nums = [1, 2, 1, 2, 1, 1])",
        "minimumIndex(nums = [1, 2, 3, 3, 3])",
        "minimumIndex(nums = [1,2,1,2,1,2,1])",
        "minimumIndex(nums = [1, 1, 2, 1, 1])",
        "minimumIndex(nums = [1, 2, 3, 2, 2, 2, 5, 6])",
        "minimumIndex(nums = [1,2,3,3,3,3])",
        "minimumIndex(nums = [0, 0, 1, 2, 1])",
        "minimumIndex(nums = [0, 1, 1, 1])",
        "minimumIndex(nums = [0, 1, 2, 2, 2, 2])"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [11, 21, 11])",
        "countBeautifulPairs(nums = [23, 45, 61])",
        "countBeautifulPairs(nums = [11, 21, 31])",
        "countBeautifulPairs(nums = [12, 21, 11, 5])",
        "countBeautifulPairs(nums = [23, 56])",
        "countBeautifulPairs(nums = [23, 3])",
        "countBeautifulPairs(nums = [25, 35, 45])",
        "countBeautifulPairs(nums = [25, 55, 75])",
        "countBeautifulPairs(nums = [21, 11, 7, 52])",
        "countBeautifulPairs(nums = [100, 12, 15, 19])"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = '51230100')"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"aabbbc\")",
        "minimizedStringLength(s = \"aabbbc\")",
        "minimizedStringLength(s = \"aabbbc\")",
        "minimizedStringLength(s = \"aabbbc\")",
        "minimizedStringLength(s = \"aabbbc\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"aabbbccc\")",
        "minimizedStringLength(s = \"program\")",
        "minimizedStringLength(s = \"baaannana\")",
        "minimizedStringLength(s = \"Hello World\")"
    ],
    "sample_111": [
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [1, 3, 1], k = 2)",
        "maximumBeauty(nums = [1, 3, 1], k = 2)",
        "maximumBeauty(nums = [1,3,1], k = 2)",
        "maximumBeauty(nums=[1,3,1,3], k=1)",
        "maximumBeauty(nums = [1,3,1,1,2,3,3,3,2,4], k = 2)"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 1, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 20)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 2, num2 = 4)",
        "makeTheIntegerZero(num1=5, num2=10)",
        "makeTheIntegerZero(num1 = 1, num2 = 5)",
        "makeTheIntegerZero(num1 = 100, num2 = 99)",
        "makeTheIntegerZero(num1 = 25, num2 = 2)",
        "makeTheIntegerZero(num1=5, num2=7)",
        "makeTheIntegerZero(num1=11, num2=5)"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [3, 6, 1, 2])",
        "findValueOfPartition(nums = [3, 6, 1, 2, 5])",
        "findValueOfPartition(nums = [3, 6, 1, 2, 5])",
        "findValueOfPartition(nums = [3, 1, 2, 4])",
        "findValueOfPartition(nums = [3,6,10])",
        "findValueOfPartition(nums = [3, 6, 1, 8])",
        "findValueOfPartition(nums = [4,1,5,2])",
        "findValueOfPartition(nums = [2, 5, 6, 9, 10])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0,1,0,1])",
        "doesValidArrayExist(derived = [1, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0,1,1,1,1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 1, 0])"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = \"never\")",
        "makeSmallestPalindrome(s = \"never\")",
        "makeSmallestPalindrome(s=\"neven\")"
    ],
    "sample_110": [
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1,2,3], k = 2)",
        "checkArray(nums = [4, 3, 2, 1], k = 2)",
        "checkArray(nums = [1,2,1,0,0,0,1], k = 2)",
        "checkArray(nums = [3,2,2,1], k = 2)",
        "checkArray(nums=[1,1,1,1,1], k=3)",
        "checkArray(nums = [1,0,0,0,1,0,0,0,1], k = 3)"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 1, 1, 0])"
    ],
    "sample_54": [
        "smallestString(s = 'kddsbncz')",
        "smallestString(s = 'kddsbnad')",
        "smallestString(s = 'kddscncd')",
        "smallestString(s = 'lazydog')",
        "smallestString(s = 'kddsbmncd')",
        "smallestString(s = 'kbddsbncd')",
        "smallestString(s = 'laabncd')",
        "smallestString(s = 'ladbdncd')",
        "smallestString(s = 'lddubmc')",
        "smallestString(s = \"lbceyad\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1, 3, 5, 2, 4])",
        "continuousSubarrays(A = [1, 2, 3, 2, 3, 4])",
        "continuousSubarrays(A = [1, 2, 4, 3, 2, 1])",
        "continuousSubarrays(A = [1, 2, 4, 5, 6])",
        "continuousSubarrays(A = [1,3,2,5,4,4,2,3])",
        "continuousSubarrays(A = [1,2,3,2,2,3])",
        "continuousSubarrays(A = [0, 1, 2, 2, 1, 0])",
        "continuousSubarrays(A = [0, 1, 3, 2, 1])",
        "continuousSubarrays(A = [1,3,3,7,6,2])",
        "continuousSubarrays(A=[1, 2, 2, 4, 3, 4])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = 'abba')",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = 'abb')",
        "makeSmallestPalindrome(s = 'abb')",
        "makeSmallestPalindrome(s = 'bab')",
        "makeSmallestPalindrome(s = 'ba')",
        "makeSmallestPalindrome(s = 'abca')",
        "makeSmallestPalindrome(s = 'abcdba')",
        "makeSmallestPalindrome(s = 'abcdba')",
        "makeSmallestPalindrome(s = 'bbc')"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [4, 1, 8, 7])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 5])",
        "findValueOfPartition(nums = [3, 6, 1, 2])",
        "findValueOfPartition(nums = [1, 3, 5, 7])",
        "findValueOfPartition(nums = [1, 3, 5, 7, 9])",
        "findValueOfPartition(nums = [3, 6, 1, 8])",
        "findValueOfPartition(nums = [1,3,100,200,201,202])"
    ],
    "sample_51": [
        "smallestString(s = 'labdac')",
        "smallestString(s = 'labdac')",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = 'kddsbmncd')",
        "smallestString(s = \"kddsbnzd\")",
        "smallestString(s = \"lazzm\")",
        "smallestString(s = \"jddsbncd\")",
        "smallestString(s = 'kaasbncd')",
        "smallestString(s = \"ladkjbscd\")"
    ],
    "sample_113": [
        "maximumBeauty(nums = [9, 9, 9], k = 3)",
        "maximumBeauty(nums = [1,3,1,1,2,3,3,2,2], k = 1)",
        "maximumBeauty(nums = [1,3,1,5,4], k = 0)",
        "maximumBeauty(nums = [5, 5, 5, 1, 2, 3, 4, 5, 6], k = 2)",
        "maximumBeauty(nums = [1,3,1,1,1,3,3,2], k = 2)",
        "maximumBeauty(nums = [9,9,9,9,1,2,3], k = 3)",
        "maximumBeauty(nums = [4,6,1,2,3,2], k = 2)",
        "maximumBeauty(nums = [10,10,10,9,9,9], k = 2)",
        "maximumBeauty(nums = [1, 5, 8, 9, 10, 13], k = 2)",
        "maximumBeauty(nums = [3,5,2,2,3,4,3], k = 1)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1, 2, 3, 3, 2, 1], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "checkArray(nums=[1,2,3,4,5], k=3)",
        "checkArray(nums = [1, 2, 1, 2], k = 2)",
        "checkArray(nums = [1, 2, 3, 1], k = 3)",
        "checkArray(nums = [2, 2, 2, 1, 5, 5, 5], k = 4)"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank=2, additionalTank=0)"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(nums = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(nums = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(nums = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(nums = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [5,3,1,1,1,3,5,1,1])",
        "distinctDifferenceArray(nums = [5,3,1,1,1,3,5,1,1])",
        "distinctDifferenceArray(nums = [3,2,3,4,2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1, 2, 3, 4])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3])",
        "continuousSubarrays(A = [1,2,3,4,5])",
        "continuousSubarrays(A = [1,2,3,4])",
        "continuousSubarrays(A = [1,2,3,1,2,3])",
        "continuousSubarrays(A = [1, 2, 3, 2, 4])",
        "continuousSubarrays(A = [1, 2, 3, 3, 2, 1, 4, 2, 5])",
        "continuousSubarrays(A = [1,2,2,1,1,1,2,2,2,1,1,1,1,2,1])",
        "continuousSubarrays(A = [1,2,2,2,3,4,5,6,7,8,1,2,2,1,1,2,3,4,5,6,7,8,9,1,2,2,1,1,2,3,4,5,6,7,8,1])"
    ],
    "sample_6": [
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n=1, queries=[])",
        "colorTheArray(n = 2, queries = [])",
        "colorTheArray(n = 2, queries = [[0,3],[1,2],[1,4]])",
        "colorTheArray(n=1, queries=[[0,1]])",
        "colorTheArray(n = 3, queries = [[0,1],[1,2],[2,1]])"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 6, b = 2)",
        "makeTheIntegerZero(a = 11, b = 2)",
        "makeTheIntegerZero(a=10, b=3)",
        "makeTheIntegerZero(a=10, b=2)",
        "makeTheIntegerZero(a = 11, b = 3)",
        "makeTheIntegerZero(a = 13, b = 3)",
        "makeTheIntegerZero(a = 9, b = 1)"
    ],
    "sample_100": [
        "maximumJumps(nums = [10, 20, 30, 40, 50], target = 10)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [10, 20, 30, 40], target = 10)",
        "maximumJumps(nums = [10, 13, 12, 14, 15], target = 2)",
        "maximumJumps(nums = [10,20,30,15,25], target = 10)",
        "maximumJumps(nums=[10,20,30,10], target=10)",
        "maximumJumps(nums = [1, 2, 3, 4, 1], target = 2)",
        "maximumJumps(nums = [1, 3, 2, 4, 2, 5], target = 2)",
        "maximumJumps(nums=[10,9,2,5,3,7,101,18], target=10)",
        "maximumJumps(nums = [2, 5, 3, 4, 1, 3, 5, 7, 2, 6], target = 2)"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [2,3,4,5], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [2,3,4,5,6], threshold = 7)",
        "longestAlternatingSubarray(nums=[1,2,3,4,5], threshold=5)",
        "longestAlternatingSubarray(nums = [3,2,3,4,5], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 5)",
        "longestAlternatingSubarray(nums=[1,3,5,2,4,6], threshold=6)",
        "longestAlternatingSubarray(nums = [2,3,5,1,6], threshold = 6)",
        "longestAlternatingSubarray(nums = [3, 4, 1, 2, 8, 7], threshold = 10)",
        "longestAlternatingSubarray(nums = [4,1,2,3,6,1,1,5,3,1,2,3,4], threshold = 2)"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [1, 2, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [5, 4, 3, 2, 1])",
        "maxNonDecreasingLength(a = [1, 3, 2, 5], b = [2, 4, 3, 7])",
        "maxNonDecreasingLength(a=[1,2,3,4,5], b=[2,4,6,8,10])",
        "maxNonDecreasingLength(a = [1, 2, 5, 7, 10], b = [1, 3, 4, 6, 9])",
        "maxNonDecreasingLength(a = [1, 4, 2, 3], b = [3, 5, 1, 5])",
        "maxNonDecreasingLength(a = [1, 1, 2, 3, 4, 5], b = [1, 2, 3, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 3, 2, 1, 4], b = [2, 2, 2, 3, 2])",
        "maxNonDecreasingLength(a = [1,3,1,2,2,4], b = [2,4,2,1,4,3])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,1,0,0,0])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,1,0,0,0])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0])",
        "numberOfGoodSubarraySplits(nums=[1,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 0, 1, 1, 1, 0, 0])"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6], threshold = 6)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10], threshold = 10)",
        "longestAlternatingSubarray(nums = [2,3], threshold = 3)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6, 7], threshold = 7)",
        "longestAlternatingSubarray(nums = [1,2,3,4], threshold = 10)",
        "longestAlternatingSubarray(nums = [3], threshold = 3)",
        "longestAlternatingSubarray(nums = [0, 4, 2, 5, 7], threshold = 7)",
        "longestAlternatingSubarray(nums = [10, 2, 4, 6, 3, 5], threshold = 10)",
        "longestAlternatingSubarray(nums = [5,10,15,14,13], threshold = 15)"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [4, 1, 8, 7])",
        "findValueOfPartition(nums = [4, 1, 8, 7])",
        "findValueOfPartition(nums = [1, 3, 2])",
        "findValueOfPartition(nums = [1,3,2,4,5])",
        "findValueOfPartition(nums=[4, 1, 8, 7])",
        "findValueOfPartition(nums = [3, 6, 1, 8])",
        "findValueOfPartition(nums = [1, 3, 2, 6, 4, 8])",
        "findValueOfPartition(nums = [10, 1, 2, 5, 6])",
        "findValueOfPartition(nums = [10, 3, 2, 1, 5, 7])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = 'ba')",
        "makeSmallestPalindrome(s = 'abb')",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = 'aabb')",
        "makeSmallestPalindrome(s = 'abccba')",
        "makeSmallestPalindrome(s = 'abcba')",
        "makeSmallestPalindrome(s = 'babc')",
        "makeSmallestPalindrome(s=\"abbc\")"
    ],
    "sample_18": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"AABCCD\")",
        "minLength(s = \"ABCDABCDAB\")",
        "minLength(s = \"AACCBD\")"
    ],
    "sample_99": [
        "maximumJumps(nums = [100,2], target = 1)",
        "maximumJumps(nums = [100,-23,-23,404,100,23,23,23,3,404], target = 3)",
        "maximumJumps(nums = [100,200], target = 100)",
        "maximumJumps(nums = [100, 2], target = 1)",
        "maximumJumps(nums = [100,20,15,2,1,70,2], target = 10)",
        "maximumJumps(nums = [1,3,6,3,2,3,6,8,9,5], target = 5)",
        "maximumJumps(nums = [100,200,300,400,500], target = 1)",
        "maximumJumps(nums = [1, 3, 6, 8, 12, 17], target = 3)",
        "maximumJumps(nums = [100,200,300,400,500], target = 500)",
        "maximumJumps(nums = [1,3,6,8,12,17], target = 3)"
    ],
    "sample_11": [
        "colorTheArray(n = 3, queries = [[0, 2], [1, 2], [2, 3], [1, 3]])",
        "colorTheArray(n = 3, queries = [[0, 2], [1, 2], [2, 3], [1, 2]])",
        "colorTheArray(n = 3, queries = [[0, 2], [1, 2], [2, 3], [1, 2]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,2]])",
        "colorTheArray(n = 3, queries = [[0,2],[1,2],[2,1],[1,1],[0,1]])",
        "colorTheArray(n = 4, queries = [[1, 2], [2, 2], [3, 3], [2, 3]])",
        "colorTheArray(n = 3, queries = [[0,2],[1,2],[1,3],[1,2]])",
        "colorTheArray(n = 3, queries = [[0,2], [1,1], [2,2], [0,3]])",
        "colorTheArray(n=4, queries=[[0, 2], [1, 2], [3, 2], [2, 1]])",
        "colorTheArray(n=3, queries = [[1, 2], [2, 2], [3, 3]])"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank=1, additionalTank=0)",
        "distanceTraveled(mainTank=1, additionalTank=0)",
        "distanceTraveled(mainTank=1, additionalTank=0)",
        "distanceTraveled(mainTank=1, additionalTank=1)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [11, 21, 11])",
        "countBeautifulPairs(nums = [11, 21, 12])",
        "countBeautifulPairs(nums = [11, 12, 13, 14])",
        "countBeautifulPairs(nums = [23, 12])",
        "countBeautifulPairs(nums = [23, 56, 11, 45, 78])",
        "countBeautifulPairs(nums = [23, 7, 9])",
        "countBeautifulPairs(nums = [31, 43])",
        "countBeautifulPairs(nums = [21, 2, 3])",
        "countBeautifulPairs(nums = [23, 22, 11, 45, 37])",
        "countBeautifulPairs(nums = [23, 15, 45, 51, 32, 12, 19, 39])"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [3, 2, 1], x = 2)",
        "minCost(A=[1,2,3], x=2)",
        "minCost(A = [3, 1, 2], x = 2)",
        "minCost(A=[1, 2, 3], x=2)",
        "minCost(A = [2, 3, 1], x = 1)",
        "minCost(A = [3,2,1,4,5], x = 2)",
        "minCost(A = [4, 3, 2, 1], x = 2)",
        "minCost(A=[3,4,1,2], x=1)",
        "minCost(A = [4,2,3,5,1], x = 2)"
    ],
    "sample_98": [
        "maximumJumps(nums = [10,20,30,40], target = 10)",
        "maximumJumps(nums = [10, 20, 30, 40], target = 10)",
        "maximumJumps(nums = [], target = 1)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 1)",
        "maximumJumps(nums=[100, 2], target=1)",
        "maximumJumps(nums=[], target=2)",
        "maximumJumps(nums = [], target = 100)",
        "maximumJumps(nums=[10, 20, 30, 40], target=15)",
        "maximumJumps(nums=[1, 2, 3, 4], target=4)",
        "maximumJumps(nums = [50, 50, 50, 100], target = 0)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 0])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [5, 3, 1, 1, 2])",
        "distinctDifferenceArray(nums = [5, 3, 1, 1, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [5,3,1,1,2,3,5])",
        "distinctDifferenceArray(nums = [5,3,1,1,2,3,5])",
        "distinctDifferenceArray(nums = [3,2,3,4,2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 4])",
        "distinctDifferenceArray(nums = [4, 5, 1, 2, 5])",
        "distinctDifferenceArray(nums = [4,3,2,4,5])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2, 1, 1, 5])"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [11, 21, 12])",
        "countBeautifulPairs(nums = [21, 43, 65, 87, 22])",
        "countBeautifulPairs(nums = [25, 35, 47])",
        "countBeautifulPairs(nums = [23, 45, 67, 123, 234])",
        "countBeautifulPairs(nums = [45, 25, 35, 15])",
        "countBeautifulPairs(nums = [21,32,43,64,85])",
        "countBeautifulPairs(nums = [21, 12, 24, 53, 24, 21])",
        "countBeautifulPairs(nums = [25, 12, 24, 60, 90])",
        "countBeautifulPairs(nums = [23, 51, 91, 29, 89])",
        "countBeautifulPairs(nums = [31,25,75,93,42,16,48])"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"mississippi\")",
        "minimizedStringLength(s = \"apple\")",
        "minimizedStringLength(s = \"hello\")",
        "minimizedStringLength(s = \"Abracadabra\")",
        "minimizedStringLength(s = \"Hello\")",
        "minimizedStringLength(s = \"aabbbccd\")",
        "minimizedStringLength(s = \"abbbbc\")"
    ],
    "sample_41": [
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abb\")",
        "minimumCost(s = \"abb\")",
        "minimumCost(s = \"aabb\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abbaba\")",
        "minimumCost(s = \"010\")"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3,2,3,4,2])",
        "distinctDifferenceArray(nums = [3,2,3,4,2])",
        "distinctDifferenceArray(nums = [3,2,3,4,2])"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0,1,0])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0,1,0,1,1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 0, 0, 1, 0])"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0,1,1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1,0,1,1])",
        "doesValidArrayExist(derived=[0, 1, 1])"
    ],
    "sample_52": [
        "smallestString(s = \"kddsbncz\")",
        "smallestString(s = \"kddsbncz\")",
        "smallestString(s = 'kddsbnca')",
        "smallestString(s = 'kddsbndc')",
        "smallestString(s = \"abcd\")",
        "smallestString(s = 'labdcdb')",
        "smallestString(s = 'aabcddcba')",
        "smallestString(s=\"kdedsbncd\")",
        "smallestString(s = 'kddsemdn')",
        "smallestString(s = 'kbduzmbc')"
    ],
    "sample_40": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"ababa\")"
    ],
    "sample_38": [
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abb\")",
        "minimumCost(s = \"bab\")",
        "minimumCost(s = \"aabbc\")",
        "minimumCost(s = \"ababab\")"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(nums = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [5,3,1,1,1,3,5,1,1])",
        "distinctDifferenceArray(nums = [5,3,1,1,1,3,5,1,1])",
        "distinctDifferenceArray(nums = [5,3,1,2,3,7,9])",
        "distinctDifferenceArray(nums = [5,3,1,2,3,4])",
        "distinctDifferenceArray(nums = [1, 3, 2, 5, 3])"
    ],
    "sample_53": [
        "smallestString(s = 'cbbaa')",
        "smallestString(s = 'bbaac')",
        "smallestString(s = 'bbaac')",
        "smallestString(s = \"cbaab\")",
        "smallestString(s = \"baabb\")",
        "smallestString(s = \"baabb\")",
        "smallestString(s = \"cbc\")",
        "smallestString(s = \"banzc\")",
        "smallestString(s = \"baabz\")",
        "smallestString(s = 'bzzza')"
    ],
    "sample_109": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1,2,3,4], k = 2)",
        "checkArray(nums = [1, 2, 3], k = 2)",
        "checkArray(nums = [1, 2, 3], k = 2)",
        "checkArray(nums = [1,1,1,1,1], k = 0)",
        "checkArray(nums = [1,0,0,0,1], k = 3)",
        "checkArray(nums=[1, 2, 3, 4, 5], k=3)",
        "checkArray(nums = [1, 3, 1, 1, 2], k = 2)",
        "checkArray(nums = [2,3,5,1,6,8,7,4,9,0], k = 4)",
        "checkArray(nums = [1, 0, 0, 3, 0, 1, 2, 2, 1, 3], k = 2)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1, 3, 1, 1, 2, 3, 3, 2], k = 2)",
        "maximumBeauty(nums = [1, 3, 1, 1, 2, 3, 3, 2], k = 2)",
        "maximumBeauty(nums = [1, 3, 1, 1, 2, 3, 3, 2], k = 2)",
        "maximumBeauty(nums = [1, 3, 1], k = 2)",
        "maximumBeauty(nums = [1,3,1,1,4,3,1], k = 2)",
        "maximumBeauty(nums = [1,3,1,1,4,4,4], k = 1)",
        "maximumBeauty(nums=[1,3,1,2,1,3,1,2], k=2)",
        "maximumBeauty(nums = [1,3,1,4,2,3,1,5], k = 3)",
        "maximumBeauty(nums = [1,3,1,2,1,5,3], k = 1)",
        "maximumBeauty(nums = [1,3,1,5,6,2,3,2,3,1], k = 2)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(a = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(a = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(a = [5, 3, 1, 2, 3])",
        "distinctDifferenceArray(a = [5, 3, 1, 2, 2])",
        "distinctDifferenceArray(a = [5, 3, 1, 2, 2])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 2, 3, 4, 4])",
        "distinctDifferenceArray(a = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(a = [5, 3, 1, 2, 3, 4])"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = '512301000000')",
        "removeTrailingZeros(a = '512301000000')",
        "removeTrailingZeros(a = '51230100000000000000000000000000')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = 'neveroddoreven')",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = 'neven')",
        "makeSmallestPalindrome(s='neveroddoreven')",
        "makeSmallestPalindrome(s=\"neveroddoreven\")",
        "makeSmallestPalindrome(s = 'level')",
        "makeSmallestPalindrome(s=\"neveroddoreven\")"
    ],
    "sample_55": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'lazydog')",
        "smallestString(s = \"kddsbncz\")",
        "smallestString(s = 'lazzy')",
        "smallestString(s = 'kddsbodc')",
        "smallestString(s = 'lazzmno')",
        "smallestString(s='lazydog')",
        "smallestString(s = 'lc')",
        "smallestString(s = \"kddsbmc\")",
        "smallestString(s = \"lznab\")"
    ],
    "sample_35": [
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = \"512301000000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"51230100000\")",
        "removeTrailingZeros(num = \"51230100000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num=\"512301000\")"
    ],
    "sample_23": [
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCDAB\")",
        "minLength(s = \"ABCDCDAB\")",
        "minLength(s=\"ABCDABCDABCD\")",
        "minLength(s=\"ABABCDCD\")",
        "minLength(s = \"AACDBBCD\")",
        "minLength(s=\"ACDABB\")",
        "minLength(s = \"ACDACDBACD\")",
        "minLength(s = \"AACDABCDAB\")",
        "minLength(s = \"ACBACDBACDBACDBACDBACDBACDBACDBACD\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = \"51230100\")"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 11, num2 = 2)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 5)",
        "makeTheIntegerZero(num1 = 15, num2 = 5)",
        "makeTheIntegerZero(num1=10, num2=1)",
        "makeTheIntegerZero(num1 = 20, num2 = 10)"
    ],
    "sample_57": [
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a=1, b=0)",
        "distanceTraveled(a=1, b=1)",
        "distanceTraveled(a=2, b=1)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [2,3,4,5], t = 5)",
        "longestAlternatingSubarray(nums = [2,3,4,5,6,7], t = 7)",
        "longestAlternatingSubarray(nums = [1,3,2,5,7,4], t = 7)",
        "longestAlternatingSubarray(nums = [2,3,4,5,6,7,8], t = 7)",
        "longestAlternatingSubarray(nums=[1, 2, 3, 4], t=5)",
        "longestAlternatingSubarray(nums = [2, 3, 5, 7, 8], t = 10)",
        "longestAlternatingSubarray(nums=[2, 1, 4, 3, 2], t=5)",
        "longestAlternatingSubarray(nums = [2,1,3,4,6], t = 4)",
        "longestAlternatingSubarray(nums = [2,5,7,1], t = 5)",
        "longestAlternatingSubarray(nums = [2,5,3,2,6,7,8,2,4], t = 7)"
    ],
    "sample_102": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [10,20,30,40,50], target = 10)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 5)",
        "maximumJumps(nums = [10, 20, 30, 40, 50], target = 10)",
        "maximumJumps(nums = [1,2,3,4,5,6], target = 2)",
        "maximumJumps(nums = [1, 3, 6, 7], target = 2)",
        "maximumJumps(nums = [2,1,2,4], target = 1)",
        "maximumJumps(nums = [5,2,3,0,3,1,5,1], target = 1)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = '5123010000000')"
    ],
    "sample_101": [
        "maximumJumps(nums = [100, -23, -23, 404, 100, 23, 23, 23, 3, 404], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [100,200,300,400], target = 1)",
        "maximumJumps(nums = [100,200,300,400], target = 1)",
        "maximumJumps(nums = [100,200,300], target = 100)",
        "maximumJumps(nums = [1, 3, 6, 2, 1], target = 2)",
        "maximumJumps(nums = [100,200,150], target = 100)",
        "maximumJumps(nums = [1, 3, 5, 8, 9, 2], target = 2)",
        "maximumJumps(nums = [100,20,15,20,25,50], target = 10)",
        "maximumJumps(nums = [1, 3, 6, 2, 8, 5], target = 2)"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1,0,1,1])",
        "doesValidArrayExist(derived = [0, 0, 0, 1])",
        "doesValidArrayExist(derived = [1,1,1,1,1,1,1,1,1,1])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums=[1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 0, 0])"
    ],
    "sample_19": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABC\")",
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"CDAB\")",
        "minLength(s = \"ABCDABCDAB\")",
        "minLength(s = \"ACCD\")",
        "minLength(s = \"ACBDABC\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = 'neveroddoreven')",
        "makeSmallestPalindrome(s = 'neveroddoreven')",
        "makeSmallestPalindrome(s = 'neveroddoreven')",
        "makeSmallestPalindrome(s = \"never\")",
        "makeSmallestPalindrome(s = 'neven')",
        "makeSmallestPalindrome(s = \"neve\")",
        "makeSmallestPalindrome(s = \"nave\")"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [3,1,2])",
        "semiOrderedPermutation(nums = [5,4,1,2,3])",
        "semiOrderedPermutation(nums = [2,1,3])",
        "semiOrderedPermutation(nums = [5, 4, 1, 2, 3])",
        "semiOrderedPermutation(nums = [3,1,2,4])",
        "semiOrderedPermutation(nums=[5,4,1,2,3])",
        "semiOrderedPermutation(nums = [4,2,3,1])",
        "semiOrderedPermutation(nums = [3,2,1,4,5])"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums=[1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 1, 0, 1, 1])"
    ],
    "sample_116": [
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [1, 3, 1, 1, 2, 3, 3, 2], k = 1)",
        "maximumBeauty(nums = [1,3,1,1,1], k = 2)",
        "maximumBeauty(nums = [1,3,1,1,4,3,1], k = 2)",
        "maximumBeauty(nums = [1,3,1,4,3], k = 1)"
    ],
    "sample_117": [
        "minimumIndex(nums = [1,2,2,2])",
        "minimumIndex(nums = [1,2,2,2])",
        "minimumIndex(nums = [1, 2, 2, 2])",
        "minimumIndex(nums = [1, 7, 3, 6, 5, 6])",
        "minimumIndex(nums = [1, 2, 2, 2, 2])",
        "minimumIndex(nums = [1, 2, 2, 2, 1, 3, 1])",
        "minimumIndex(nums = [1,2,2,2,1,2,2,3])",
        "minimumIndex(nums = [2, 3, 4, 2, 2, 3, 2, 2])",
        "minimumIndex(nums = [1,2,2,2,2,2,3,4,4])",
        "minimumIndex(nums = [1, 2, 3, 2, 2, 3, 3, 2, 3, 3])"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 5)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 9, num2 = 3)",
        "makeTheIntegerZero(num1 = 20, num2 = 4)",
        "makeTheIntegerZero(num1=9, num2=2)"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [23, 45, 61])",
        "countBeautifulPairs(nums = [11, 21, 11, 71])",
        "countBeautifulPairs(nums = [23, 15, 43])",
        "countBeautifulPairs(nums = [22, 5, 12])",
        "countBeautifulPairs(nums = [22, 5, 12])",
        "countBeautifulPairs(nums = [23,23])",
        "countBeautifulPairs(nums = [23, 12, 33, 54])",
        "countBeautifulPairs(nums = [23, 11, 9, 33])",
        "countBeautifulPairs(nums = [22, 23, 32, 44])",
        "countBeautifulPairs(nums = [23, 10, 60, 72, 48])"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 11, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 12, num2 = 2)",
        "makeTheIntegerZero(num1=10, num2=2)",
        "makeTheIntegerZero(num1 = 28, num2 = 4)",
        "makeTheIntegerZero(num1 = 28, num2 = 3)"
    ],
    "sample_20": [
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDCDAB\")",
        "minLength(s = \"ABABABABAB\")",
        "minLength(s = \"ACBDABCD\")",
        "minLength(s = \"ACDBAC\")",
        "minLength(s = \"ACABDCC\")",
        "minLength(s = \"ADAB\")",
        "minLength(s = \"ACBDADBABCD\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [1, 3, 1], k = 2)",
        "maximumBeauty(nums = [1, 3, 1, 1, 2, 3, 3, 2], k = 2)",
        "maximumBeauty(nums=[1, 3, 1], k=2)",
        "maximumBeauty(nums = [1,3,1,1,3,4], k = 2)",
        "maximumBeauty(nums = [3,4,1,2,3], k = 1)",
        "maximumBeauty(nums = [1,3,1,3,2,3,4,5], k = 1)"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [11, 21, 11])",
        "countBeautifulPairs(nums = [22, 44, 66])",
        "countBeautifulPairs(nums = [35, 1, 10])",
        "countBeautifulPairs(nums = [23, 34, 45])",
        "countBeautifulPairs(nums = [22, 44, 66, 88])",
        "countBeautifulPairs(nums = [11, 21, 12, 19])",
        "countBeautifulPairs(nums = [23, 1, 3])",
        "countBeautifulPairs(nums = [22, 11, 55, 66])",
        "countBeautifulPairs(nums = [23, 15, 65, 42, 12])",
        "countBeautifulPairs(nums = [23,236,15,16])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)",
        "makeTheIntegerZero(num1 = 11, num2 = 2)",
        "makeTheIntegerZero(num1 = 21, num2 = 3)",
        "makeTheIntegerZero(num1=7, num2=2)",
        "makeTheIntegerZero(num1 = 21, num2 = 6)",
        "makeTheIntegerZero(num1 = 50, num2 = 5)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = 'neveroddoreven')",
        "makeSmallestPalindrome(s = 'neveroddoreven')",
        "makeSmallestPalindrome(s = 'neveroddoreven')",
        "makeSmallestPalindrome(s = 'neveroddoreven')",
        "makeSmallestPalindrome(s='neveroddoreven')"
    ],
    "sample_37": [
        "minimumCost(s = \"bba\")",
        "minimumCost(s = \"bba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abb\")",
        "minimumCost(s = \"abccbd\")",
        "minimumCost(s = \"aaab\")",
        "minimumCost(s = \"aaab\")",
        "minimumCost(s = \"bbaa\")",
        "minimumCost(s = \"aaaab\")",
        "minimumCost(s = \"00011\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,0])",
        "numberOfGoodSubarraySplits(nums=[0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 1, 0, 1])"
    ],
    "sample_105": [
        "checkArray(nums = [1,2,3,4,5], k = 2)",
        "checkArray(nums = [1, 2, 3, 2, 1], k = 3)",
        "checkArray(nums = [1,2,3,4,5,6,7,8,9,10], k = 5)",
        "checkArray(nums = [5, 1, 4, 2, 3], k = 3)",
        "checkArray(nums = [10, 9, 8, 7, 6], k = 3)",
        "checkArray(nums = [6, 3, 2, 2, 1], k = 3)",
        "checkArray(nums = [2, 4, 0, 0, 1], k = 3)",
        "checkArray(nums = [1,2,1,0,0,0,0,0,0,0], k = 4)",
        "checkArray(nums = [2,1,3,1,2,1], k = 2)",
        "checkArray(nums=[3, 2, 5, 10, 2], k=3)"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [5, 4, 1, 2, 3])",
        "semiOrderedPermutation(nums = [4, 2, 1, 3])",
        "semiOrderedPermutation(nums = [5,4,1,2,3])",
        "semiOrderedPermutation(nums = [4,3,1,2])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [4,2,1,3])",
        "semiOrderedPermutation(nums = [4,3,2,1,5])",
        "semiOrderedPermutation(nums = [5, 2, 3, 4, 1])",
        "semiOrderedPermutation(nums=[4, 3, 1, 2])",
        "semiOrderedPermutation(nums = [2, 3, 4, 5, 1])"
    ],
    "sample_108": [
        "checkArray(nums = [1,2,3,4,5], k = 2)",
        "checkArray(nums = [1,2,3,4,5], k = 2)",
        "checkArray(nums = [1,2,3,4], k = 2)",
        "checkArray(nums = [1,2,3,4], k = 2)",
        "checkArray(nums = [1,2,3,4], k = 2)",
        "checkArray(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "checkArray(nums = [2, 3, 4], k = 2)",
        "checkArray(nums = [0, 1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [3, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [0,2,0,2,1], k = 3)"
    ],
    "sample_39": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"abcabc\")"
    ],
    "sample_65": [
        "findValueOfPartition(a = [1, 3, 2])",
        "findValueOfPartition(a = [1, 3, 2])",
        "findValueOfPartition(a = [1, 2, 3, 4])",
        "findValueOfPartition(a = [1, 3, 2, 5])",
        "findValueOfPartition(a = [1, 3, 2, 5, 4])",
        "findValueOfPartition(a = [1, 3, 2, 5, 4])",
        "findValueOfPartition(a = [3, 1, 2, 7, 9, 5])",
        "findValueOfPartition(a = [4, 3, 1, 2, 5])",
        "findValueOfPartition(a = [1, 2, 3, 5, 7, 9])",
        "findValueOfPartition(a = [1, 2, 5, 7, 12])"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank=1, additionalTank=1)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank=2, additionalTank=0)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [1,1,0])",
        "doesValidArrayExist(derived = [1,0,0])",
        "doesValidArrayExist(derived = [1,0,1,0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 0, 1, 0, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 0, 0, 1, 1, 1, 1])"
    ],
    "sample_106": [
        "checkArray(nums = [1,2,3,4,5], k = 2)",
        "checkArray(nums = [1,2,3,4,5], k = 2)",
        "checkArray(nums = [1,2,3,4,5], k = 3)",
        "checkArray(nums = [1, 2, 2, 1, 0, 1], k = 3)",
        "checkArray(nums = [1, 2, 3, 2, 1], k = 3)",
        "checkArray(nums = [1,1,0,1], k = 2)",
        "checkArray(nums=[1,0,0,1,0], k=3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "checkArray(nums = [1, 3, 2, 4], k = 2)",
        "checkArray(nums = [1, 2, 0, 0, 1], k = 2)"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [2,3,4,5], threshold = 5)",
        "longestAlternatingSubarray(nums = [2,3,4,5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7], threshold = 7)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], threshold = 20)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 7], threshold = 10)",
        "longestAlternatingSubarray(nums = [4,1,3], threshold = 3)"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [11, 21, 11])",
        "countBeautifulPairs(nums = [11, 21, 11])",
        "countBeautifulPairs(nums = [45, 23, 17])",
        "countBeautifulPairs(nums = [22, 33, 44, 55])",
        "countBeautifulPairs(nums = [11, 21, 12, 13])",
        "countBeautifulPairs(nums = [1, 21, 3, 721, 4, 5])",
        "countBeautifulPairs(nums = [11, 21, 11, 27, 23])",
        "countBeautifulPairs(nums=[1, 21, 3, 12, 4])",
        "countBeautifulPairs(nums = [21, 23, 34])",
        "countBeautifulPairs(nums = [21, 45, 67, 89, 11])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1,3,5,7,9], t = 10)",
        "longestAlternatingSubarray(nums = [1, 3, 4], t = 4)",
        "longestAlternatingSubarray(nums = [4, 5, 6], t = 10)",
        "longestAlternatingSubarray(nums = [3,2,5], t = 4)",
        "longestAlternatingSubarray(nums = [1, 3, 7, 4, 5], t = 7)",
        "longestAlternatingSubarray(nums = [1, 4, 5, 2, 6], t = 10)",
        "longestAlternatingSubarray(nums = [2,1,4,1], t = 10)",
        "longestAlternatingSubarray(nums=[1,2,3,3,4,5],t=5)",
        "longestAlternatingSubarray(nums = [3, 1, 5, 6], t = 9)",
        "longestAlternatingSubarray(nums=[2, 3, 2, 5, 10], t=5)"
    ],
    "sample_36": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"bbbaaab\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDEF\")",
        "minLength(s = \"ABCDABCDABCDABCD\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABCDEABCD\")",
        "minLength(s = \"ABCDABAB\")",
        "minLength(s = \"ABCABDCD\")",
        "minLength(s = \"AAAAABBBBBCCCCCDDDDD\")",
        "minLength(s = \"AAAAABBBCCDDD\")",
        "minLength(s = \"EFGHABIJKCDL\")"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1])",
        "numberOfGoodSubarraySplits(nums=[1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,1,1,0,0])",
        "numberOfGoodSubarraySplits(nums=[0,0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,0,1,0,0,0,1])"
    ],
    "sample_9": [
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,2]])",
        "colorTheArray(n = 3, queries = [[0,1],[1,2],[0,2]])",
        "colorTheArray(n = 3, queries = [[0,1],[1,2],[0,2]])",
        "colorTheArray(n = 3, queries = [])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 2]])",
        "colorTheArray(n = 2, queries = [[0, 2], [1, 2]])",
        "colorTheArray(n = 3, queries = [[0,2],[1,2],[2,3],[1,3]])",
        "colorTheArray(n = 3, queries = [[0,2],[1,2],[2,1]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,1],[2,2],[3,3]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 3, 2, 1], nums2 = [2, 2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2, 1], nums2 = [2, 2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2, 1], nums2 = [2, 2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2], nums2 = [2, 2, 3])",
        "maxNonDecreasingLength(nums1=[1,2,3,4], nums2=[1,2,3,4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4], nums2 = [1, 3, 2, 4])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2, 4], nums2 = [2, 1, 3, 2])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2, 5], nums2 = [2, 4, 6, 2])",
        "maxNonDecreasingLength(nums1 = [1,2,1,1], nums2 = [1,2,1,1])",
        "maxNonDecreasingLength(nums1 = [2, 4, 5], nums2 = [3, 6, 7])"
    ],
    "sample_115": [
        "maximumBeauty(nums = [9, 9, 9], k = 0)",
        "maximumBeauty(nums = [1, 5, 4, 2, 9, 9, 9], k = 3)",
        "maximumBeauty(nums = [1, 5, 4, 2, 9, 9, 9], k = 3)",
        "maximumBeauty(nums = [1,3,1,2,4,2], k = 1)",
        "maximumBeauty(nums = [1,3,1,3,3], k = 1)",
        "maximumBeauty(nums = [1,3,1,2,4,1,2,1], k = 2)",
        "maximumBeauty(nums=[1, 5, 8, 13], k=5)",
        "maximumBeauty(nums = [1, 2, 3, 2, 1, 1], k = 1)",
        "maximumBeauty(nums=[3,2,1,2,1,7,2,2,1], k=2)",
        "maximumBeauty(nums = [1, 1, 1, 2, 2, 2, 3, 4, 5], k = 1)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [3, 1, 2, 4])",
        "findValueOfPartition(nums = [1,3,2,4])",
        "findValueOfPartition(nums = [3, 6, 1])",
        "findValueOfPartition(nums = [1, 3, 2, 5])",
        "findValueOfPartition(nums=[3,6,1])",
        "findValueOfPartition(nums = [3, 1, 6, 4, 5, 2])",
        "findValueOfPartition(nums = [5, 9, 1, 2, 3, 8])"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1,3,2,4])",
        "findValueOfPartition(nums = [1,3,2,4])",
        "findValueOfPartition(nums = [1,3,2,4,7])",
        "findValueOfPartition(nums = [3,6,1,2,5])",
        "findValueOfPartition(nums = [1,3,2,7,9,5])",
        "findValueOfPartition(nums = [3,6,10])",
        "findValueOfPartition(nums = [3, 6, 1])",
        "findValueOfPartition(nums = [3,6,1,2,4,7])",
        "findValueOfPartition(nums = [3,6,1,9,5])",
        "findValueOfPartition(nums = [1, 2, 3, 10])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [4, 3, 1, 2])",
        "semiOrderedPermutation(nums = [4, 3, 1, 2])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [5, 4, 3, 2, 1])",
        "semiOrderedPermutation(nums = [5, 4, 3, 2, 1])",
        "semiOrderedPermutation(nums = [4, 2, 3, 1])",
        "semiOrderedPermutation(nums = [3,2,1,4,5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [4, 1, 5, 2, 3])",
        "semiOrderedPermutation(nums = [5,2,4,3,1])"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [5,4,1,2,3])",
        "semiOrderedPermutation(nums = [5, 2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [5, 3, 4, 1, 2])",
        "semiOrderedPermutation(nums = [5, 3, 4, 1, 2])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation(nums = [5, 4, 1, 2, 3])",
        "semiOrderedPermutation(nums = [5, 2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [4, 2, 1, 3, 5])",
        "semiOrderedPermutation(nums = [4,3,1,2])",
        "semiOrderedPermutation(nums=[3, 1, 2, 4])"
    ]
}