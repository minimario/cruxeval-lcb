{
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [0, 1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [0, 1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [0, 1, 1])",
        "minimumRightShifts(nums = [2, 1, 4, 3, 5, 7, 6, 8])",
        "minimumRightShifts(nums = [3, 1, 2])"
    ],
    "sample_453": [
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"aabba\")",
        "minChanges(s = \"aabba\")"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 100)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 10)",
        "lengthOfLongestSubsequence(nums = [10, 15, 20], target = 35)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5, 7, 9], target = 11)",
        "lengthOfLongestSubsequence(nums = [3, 2, 1], target = 4)",
        "lengthOfLongestSubsequence(nums = [2, 3, 7, 11, 15], target = 30)",
        "lengthOfLongestSubsequence(nums = [2, 3, 7, 8, 12], target = 20)"
    ],
    "sample_367": [
        "sortVowels(s = 'lHmYp')",
        "sortVowels(s = 'lHmYp')",
        "sortVowels(s = 'Hlymp')",
        "sortVowels(s = 'Hlymp')",
        "sortVowels(s = 'HlymP')",
        "sortVowels(s = 'lHymp')",
        "sortVowels(s = 'Hylmp')",
        "sortVowels(s = 'Hmypl')",
        "sortVowels(s = \"mLyph\")",
        "sortVowels(s = \"lHpyM\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 100)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 0)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 0)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3, 4], target=5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 7)",
        "lengthOfLongestSubsequence(nums = [3, 2, 5, 7], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "lengthOfLongestSubsequence(nums=[5, 4, 3, 2, 1, 1], target=7)"
    ],
    "sample_381": [
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [1, 2, 3, 4], t = 7)",
        "countPairs(nums = [1, 2, 3, 4], t = 7)",
        "countPairs(nums=[1, 2, 3, 4, 5], t=6)",
        "countPairs(nums=[1, 2, 3, 4, 5], t=7)",
        "countPairs(nums=[1, 2, 3, 4, 5], t=7)",
        "countPairs(nums = [1, 3, 5, 7, 9], t = 10)",
        "countPairs(nums = [1, 3, 2, 4], t = 7)",
        "countPairs(nums=[1, 2, 3, 4, 5, 6, 7, 8], t=10)",
        "countPairs(nums = [1, 5, 3, 3, 2], t = 6)"
    ],
    "sample_366": [
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [0, 1, 2])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [0, 1, 3, 4])"
    ],
    "sample_369": [
        "sortVowels(s = \"HlymuP\")",
        "sortVowels(s = 'HlymuP')",
        "sortVowels(s = \"Hlymu\")",
        "sortVowels(s = 'mYlpH')",
        "sortVowels(s = \"HYlmpo\")",
        "sortVowels(s = \"HlyuMP\")",
        "sortVowels(s = 'Ylphm')",
        "sortVowels(s = \"pYlHm\")",
        "sortVowels(s = \"HlumyP\")",
        "sortVowels(s = \"HumLp\")"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [5, 3, 1, 4, 2])",
        "minimumRightShifts(nums = [4, 1, 3, 2])",
        "minimumRightShifts(nums = [4, 3, 3, 1, 2])",
        "minimumRightShifts(nums = [1, 0, 3])",
        "minimumRightShifts(nums = [4, 2, 3])",
        "minimumRightShifts(nums = [1, 3, 3, 3, 2, 1, 1, 2])"
    ],
    "sample_448": [
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"abcd\")"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"1234\", s2 = \"4321\")",
        "canBeEqual(s1 = \"1234\", s2 = \"4321\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cab\")",
        "canBeEqual(s1 = \"egg\", s2 = \"add\")",
        "canBeEqual(s1 = \"abcc\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"bacd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"1234\", s2 = \"2341\")",
        "canBeEqual(s1 = \"abac\", s2 = \"babad\")",
        "canBeEqual(s1 = \"fro\", s2 = \"cro\")"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 0, 0, 1, 1, 0, 0])",
        "minLengthAfterRemovals(nums = [0, 1, 0, 1, 1, 0])",
        "minLengthAfterRemovals(nums = [1, 0, 1, 1, 0, 0])",
        "minLengthAfterRemovals(nums = [0, 1, 1, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [0, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1,1,0,0,1,1,1,1,0,0])"
    ],
    "sample_361": [
        "isGood(a = [0, 1, 2, 2, 3])",
        "isGood(a = [0, 1, 2, 3, 3])",
        "isGood(a = [0, 1, 2, 3, 3])",
        "isGood(a = [0, 1, 2, 3, 3])",
        "isGood(a = [0, 1, 2, 3, 4, 4])",
        "isGood(a = [0, 1, 2, 2, 4])",
        "isGood(a = [0, 1, 1, 3])",
        "isGood(a = [0, 1, 2, 2, 3, 4])",
        "isGood(a = [0, 1, 2, 2, 3, 4])",
        "isGood(a = [1, 0, 2, 2, 0])"
    ],
    "sample_419": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 4)",
        "minOperations(nums = [5,1,4,2,3,3,2,1,5], k = 2)",
        "minOperations(nums = [3, 1, 3, 4, 1], k = 2)",
        "minOperations(nums = [5,4,3,2,1,1], k = 2)",
        "minOperations(nums = [3,1,2,4,2], k = 2)",
        "minOperations(nums = [5,4,3,2,1,2,3,4,5], k = 3)",
        "minOperations(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], k = 4)",
        "minOperations(nums=[3,3,2,1,2], k=3)",
        "minOperations(nums = [4, 2, 7, 5, 3, 4, 7, 2, 3, 1], k = 3)",
        "minOperations(nums = [10, 2, 1, 12, 4, 1, 7], k = 3)"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1, 2, 3, 4, 5])",
        "findMaximumLength(nums=[1])",
        "findMaximumLength(nums = [1, 2, 3, 4])",
        "findMaximumLength(nums = [1, 2])",
        "findMaximumLength(nums = [1, 0, 1, 0, 1])",
        "findMaximumLength(nums = [1, 3, 5, 7, 9])",
        "findMaximumLength(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "findMaximumLength(nums = [1, 1, 1, 0, 0, 0])",
        "findMaximumLength(nums = [1, 3, 2, 5, 7, 8, 9, 1, 2, 3, 4])",
        "findMaximumLength(nums = [0, 1, 1, 2, 3, 4, 1])"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [5, 4, 3, 2, 1])",
        "maxSubarrays(nums = [1, 3, 2, 5, 2, 9, 7])",
        "maxSubarrays(nums = [3, 1, 5, 7, 8, 2, 4])",
        "maxSubarrays(nums = [2, 5, 3, 2, 3, 1])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azc\")",
        "canMakeSubsequence(str1 = \"abz\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"ax\", str2 = \"by\")",
        "canMakeSubsequence(str1 = \"xyz\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abcdef\", str2 = \"axbycz\")"
    ],
    "sample_402": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 1, 2, 3], m = 2, k = 3)",
        "maxSum(nums = [0, 1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [0, 1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 1, 1, 2, 2, 3], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 4, k = 4)",
        "maxSum(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], m=3, k=3)"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"x\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"grape\"], x = \"x\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"mouse\"], x = \"z\")"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words=[\"1\", \"2\", \"prev\", \"3\", \"prev\"])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 1, 1], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 5)",
        "minOperations(nums = [3, 1, 4, 2], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 1], k = 3)",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6], k = 4)",
        "minOperations(nums = [2, 7, 3, 1, 4, 2], k = 3)",
        "minOperations(nums = [1, 3, 2, 5, 4, 6, 8, 7], k = 3)",
        "minOperations(nums = [2, 7, 3, 4, 6, 8, 1, 5, 3, 4, 7], k = 4)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 3)",
        "minOperations(nums = [1, 1, 3, 3, 3, 4, 4, 5, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 3, 4, 5, 5, 5], k = 2)",
        "minOperations(nums = [1, 1, 3, 3, 3, 2, 4, 4, 4, 5, 5], k = 2)",
        "minOperations(nums = [1, 3, 6, 1, 3, 4, 1], k = 3)"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1])",
        "minimumSeconds(nums = [0, 1, 2])",
        "minimumSeconds(nums = [0, 1, 1])",
        "minimumSeconds(nums = [0, 1, 0, 1, 1, 0])",
        "minimumSeconds(nums = [0, 1, 0, 1, 0, 1])",
        "minimumSeconds(nums = [2, 1, 2, 1, 2, 1, 2])",
        "minimumSeconds(nums = [0, 1, 1, 2, 2])",
        "minimumSeconds(nums = [0, 1, 1, 3, 3, 3, 4, 5, 5])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums=[2, 7, 11, 15], target=9)",
        "countPairs(nums = [2, 3, 1, 4], target = 5)"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"abc\", \"de\", \"fgh\"], x = \"de\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"fish\"], x = \"a\")",
        "findWordsContaining(words = [\"coding\", \"test\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"cat\", \"bat\", \"mat\", \"dog\"], x = \"at\")",
        "findWordsContaining(words = [\"xabx\", \"cd\", \"xefx\"], x = \"x\")"
    ],
    "sample_372": [
        "sortVowels(s = 'eOtcedeL')",
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = 'eLeOtced')",
        "sortVowels(s = 'eLeOtced')",
        "sortVowels(s = 'Lteoedc')",
        "sortVowels(s = 'eLeoTcde')",
        "sortVowels(s = 'LteoCdE')",
        "sortVowels(s = 'LEOtcdee')",
        "sortVowels(s = 'Eleotced')",
        "sortVowels(s = \"Lete's do this!\")"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 3])",
        "minLengthAfterRemovals(nums = [2, 2, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])"
    ],
    "sample_452": [
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abacadaeaf\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"aabba\")",
        "minChanges(s = \"abc\")"
    ],
    "sample_385": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 10)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums=[1,2,3,4,5], target=6)",
        "countPairs(nums = [1, 1, 1, 1, 2], target = 5)"
    ],
    "sample_427": [
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3])",
        "minOperations(nums = [1, 2, 3, 3, 3, 4, 5, 6])",
        "minOperations(nums = [2, 2, 2, 2, 2, 1, 1, 1, 1, 1])",
        "minOperations(nums = [2, 3, 2, 3, 2, 3])",
        "minOperations(nums = [3, 3, 2, 1, 1])",
        "minOperations(nums = [2, 2, 2, 2, 1])",
        "minOperations(nums = [2, 2, 2, 2, 1, 1, 1, 1, 1])",
        "minOperations(nums = [2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3])",
        "minOperations(nums = [2, 3, 3, 2, 5, 5, 5, 5, 5])",
        "minOperations(nums = [3, 5, 1, 1, 1, 2, 2, 2, 3, 3])"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minLengthAfterRemovals(nums = [2, 1, 1, 2, 2, 2, 1, 2, 1])"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 1])",
        "minimumCoins(prices = [1, 2, 1])",
        "minimumCoins(prices = [1, 1, 1])",
        "minimumCoins(prices=[1, 2])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"python\", \"java\", \"kotlin\", \"javascript\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\", \"pineapple\"], x = \"a\")",
        "findWordsContaining(words = [\"python\", \"java\", \"javascript\", \"java\"], x = \"java\")"
    ],
    "sample_420": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [3, 1, 4, 1, 5], k = 2)",
        "minOperations(nums = [5, 1, 4, 3, 2], k = 2)",
        "minOperations(nums = [2, 2, 1, 1, 3], k = 2)",
        "minOperations(nums = [2, 1, 4, 5, 3, 2, 1, 4], k = 2)",
        "minOperations(nums = [5, 1, 4, 3, 2, 6, 8, 7], k = 3)",
        "minOperations(nums = [2, 2, 2, 2, 5, 5, 5, 5, 5], k = 2)",
        "minOperations(nums = [2, 2, 2, 2, 2, 2, 2, 2], k = 3)"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 4])",
        "isGood(nums = [1, 2, 4])",
        "isGood(nums = [1, 2, 4])",
        "isGood(nums = [1, 2, 4])",
        "isGood(nums = [1, 2, 4])",
        "isGood(nums = [1, 3, 2])",
        "isGood(nums = [1, 3, 2])",
        "isGood(nums = [1, 3, 5])",
        "isGood(nums = [1, 3, 4])",
        "isGood(nums = [2, 3, 1])"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 1)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1], target = 1)",
        "lengthOfLongestSubsequence(nums = [10, 9, 2, 5, 3, 7, 101, 18], target = 15)"
    ],
    "sample_365": [
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1, 2, 4])",
        "isGood(nums = [1, 2, 4])",
        "isGood(nums = [1, 3, 3])",
        "isGood(nums = [1, 3, 3, 4])",
        "isGood(nums = [1, 2, 4, 3])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [2, 3, 1, 4])"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3])",
        "maxSubarrays(nums = [1, 2, 3])",
        "maxSubarrays(nums = [1, 3, 5, 7, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [2, 3, 1, 5, 4])",
        "maxSubarrays(nums = [2, 3, 1, 5, 8])",
        "maxSubarrays(nums = [2, 3, 1, 5, 6, 7])",
        "maxSubarrays(nums = [2, 2, 1, 2, 3, 4, 1, 2])"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 7)",
        "lengthOfLongestSubsequence(nums=[1,2,3,4,5], target=0)",
        "lengthOfLongestSubsequence(nums=[1,2,3,4,5], target=0)",
        "lengthOfLongestSubsequence(nums=[1,2,3,4,5], target=100)",
        "lengthOfLongestSubsequence(nums = [3, 2, 5, 7, 9], target = 12)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7, 9], target = 15)",
        "lengthOfLongestSubsequence(nums=[1,2,3], target=4)",
        "lengthOfLongestSubsequence(nums=[1,2,3,4], target=0)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 7)"
    ],
    "sample_450": [
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aabbb\")",
        "minChanges(s = \"aabbb\")",
        "minChanges(s = \"aabbbb\")",
        "minChanges(s = \"aabbbb\")",
        "minChanges(s = \"aabba\")",
        "minChanges(s = \"aabbccdd\")",
        "minChanges(s = \"ababb\")",
        "minChanges(s = \"aabbaaa\")",
        "minChanges(s = \"abca\")"
    ],
    "sample_463": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 12, limit = 5)",
        "distributeCandies(n = 15, limit = 3)"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 2, 2])"
    ],
    "sample_449": [
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"aabbaabbaabb\")",
        "minChanges(s = \"aabba\")"
    ],
    "sample_425": [
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 1, 2, 1, 2])",
        "minOperations(nums = [1, 1, 1, 1, 1])",
        "minOperations(nums = [1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [3, 3, 3, 3, 3, 3, 3, 3])",
        "minOperations(nums = [1, 2, 3, 1, 2, 3])",
        "minOperations(nums = [1, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"zzz\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"azb\", str2 = \"zza\")",
        "canMakeSubsequence(str1 = \"azbzcz\", str2 = \"bzc\")",
        "canMakeSubsequence(str1 = \"bbaz\", str2 = \"bza\")",
        "canMakeSubsequence(str1 = \"abcz\", str2 = \"yxw\")",
        "canMakeSubsequence(str1 = \"azbyczd\", str2 = \"bzad\")",
        "canMakeSubsequence(str1 = \"xzqy\", str2 = \"zqa\")"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1, 2, 3])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumSeconds(nums = [1, 0, 1, 0, 1])",
        "minimumSeconds(nums = [1, 0, 0, 1, 1])",
        "minimumSeconds(nums = [0, 1, 0, 1, 1, 0])",
        "minimumSeconds(nums = [3, 1, 2, 4, 5])",
        "minimumSeconds(nums = [2, 1, 3, 2, 4, 3])"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 6)",
        "lengthOfLongestSubsequence(nums=[1,2,3,4,5], target=6)",
        "lengthOfLongestSubsequence(nums=[1,2,3,4,5], target=0)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3, 4, 5], target=6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3, 4, 5], target=9)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3, 4, 5], target=0)",
        "lengthOfLongestSubsequence(nums = [10, 9, 2, 5, 3, 7, 10, 9, 4], target = 8)"
    ],
    "sample_370": [
        "sortVowels(s = 'letcode')",
        "sortVowels(s = 'lEdtOcee')",
        "sortVowels(s = \"Eltcedeol\")",
        "sortVowels(s = 'tEdlEocA')",
        "sortVowels(s = \"cEdotleE\")",
        "sortVowels(s = 'tedcEloa')",
        "sortVowels(s = 'letCodeE')",
        "sortVowels(s = \"tEd lEO\")",
        "sortVowels(s = 'lEodcet')",
        "sortVowels(s = 'Etcdo teOle')"
    ],
    "sample_421": [
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 3)",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 1, 2, 2], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 4)",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4], k = 2)",
        "minOperations(nums = [1,1,2,2,3,3,3,4,4,4,4], k = 3)",
        "minOperations(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "minOperations(nums = [1,1,2,2,3,3,3,4,4,4,5,5,6,6,7,7,7,8,9,9], k = 4)"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [3, 3, 2, 2, 1, 1])",
        "maxSubarrays(nums = [3, 1, 5, 2, 6])",
        "maxSubarrays(nums = [3, 1, 3, 3, 2])",
        "maxSubarrays(nums = [1, 1, 1, 0, 0, 0, 1, 1, 1])",
        "maxSubarrays(nums = [3, 1, 3, 2, 4])",
        "maxSubarrays(nums = [1, 2, 3, 1, 2, 3, 1])",
        "maxSubarrays(nums = [1, 2, 3, 1, 5, 6])",
        "maxSubarrays(nums = [4, 2, 2, 3, 2, 5])",
        "maxSubarrays(nums = [2, 3, 1, 5, 2, 9])"
    ],
    "sample_415": [
        "countPairs(coordinates = [(1, 2), (2, 3), (3, 1)], k = 3)",
        "countPairs(coordinates = [(0, 0), (0, 1), (1, 0), (1, 1)], k = 1)",
        "countPairs(coordinates = [(1, 1), (2, 2), (3, 3), (4, 4)], k = 2)",
        "countPairs(coordinates = [(1, 2), (2, 3), (1, 3)], k = 2)",
        "countPairs(coordinates = [(1, 2), (3, 4), (5, 6)], k = 4)",
        "countPairs(coordinates = [(1, 2), (2, 3), (3, 4), (5, 6)], k = 3)",
        "countPairs(coordinates = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11)], k = 11)",
        "countPairs(coordinates = [[1, 1], [2, 2], [1, 2], [2, 1], [3, 3], [2, 3], [3, 2]], k = 2)",
        "countPairs(coordinates = [(1, 1), (2, 1), (3, 1), (3, 2), (3, 3), (2, 3), (1, 3), (1, 2), (2, 2), (3, 0)], k = 3)",
        "countPairs(coordinates = [(3, 1), (3, 2), (2, 3), (4, 3), (1, 3)], k = 4)"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 4)",
        "lengthOfLongestSubsequence(nums = [2, 1, 3, 4, 7], target = 9)"
    ],
    "sample_445": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums=[1, 2, 1])",
        "sumCounts(nums=[1, 2, 1])"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"a\")",
        "minimumBeautifulSubstrings(s = \"a\")",
        "minimumBeautifulSubstrings(s = \"a\")",
        "minimumBeautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "minimumBeautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\")",
        "minimumBeautifulSubstrings(s = \"aaaaaaaaaaaaaaa\")",
        "minimumBeautifulSubstrings(s = \"1111111111111101\")",
        "minimumBeautifulSubstrings(s = \"aaaaaaaaaaaaaa\")",
        "minimumBeautifulSubstrings(s = \"11001010010111\")",
        "minimumBeautifulSubstrings(s = \"0000011100010110101001101100011110111011000111011101101001100000011100110110010001101011101110111011011001101110110011001111010110011011101110101100111101110111011001011011000110111010111001000110011110110011010111011101101101101100100110110010111011001111011101110110011110101110110011001111011101110110010110110001101110101110010001100111101100110101110111011011011011001001101100101110110011110111011101100111101011101100110011110111011101100101101100011011101011100100011001111011001101011101110110110110"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 0])",
        "maxSubarrays(nums = [1, 2, 3, 0, 4, 5, 6])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 0, 1, 1])",
        "maxSubarrays(nums = [1, 1, 1, 0, 0, 1, 1])",
        "maxSubarrays(nums = [1, 0, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 1, -1, -1, 1, -1, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 0])",
        "maxSubarrays(nums = [1, 2, 3, -4, -1, 6, -10, 11])",
        "maxSubarrays(nums = [2, 3, 7, 5, 1, 4, 3, 8, 10, 1, 7])"
    ],
    "sample_401": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4], m = 1, k = 2)",
        "maxSum(nums = [1, 1, 1, 1, 1, 1], m = 3, k = 3)",
        "maxSum(nums = [3, 4, 5, 1, 2], m = 2, k = 3)",
        "maxSum(nums=[-1, -1, 1, 1], m=1, k=2)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 1, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 1, k = 3)",
        "maxSum(A = [0, 0, 0, 0, 0], m = 2, k = 3)",
        "maxSum(A = [0, 0, 0, 0, 0], m = 1, k = 3)",
        "maxSum(A = [0, 0, 0, 0], m = 2, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 2, k = 4)",
        "maxSum(A = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], m = 4, k = 4)"
    ],
    "sample_363": [
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3, 4, 4])",
        "isGood(nums = [1, 2, 3, 4, 4])",
        "isGood(nums = [1, 2, 3, 4, 5, 5])",
        "isGood(nums = [1, 2, 3, 3, 4])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [2, 1, 2])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1])",
        "minimumSeconds(nums = [1, 0, 1, 1, 0, 1])",
        "minimumSeconds(nums = [0, 2, 1, 3, 1, 2])",
        "minimumSeconds(nums = [2, 4, 1])",
        "minimumSeconds(nums = [0, 1, 1, 2, 2, 3])"
    ],
    "sample_376": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 0, 0, 1])",
        "minimumSeconds(nums = [1, 0, 1])",
        "minimumSeconds(nums = [1, 0, 1])"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 1, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 3, 4, 4, 4, 5, 5, 5, 5])",
        "minLengthAfterRemovals(nums = [4, 1, 1, 1, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [4,2,2,5,1,5])",
        "minLengthAfterRemovals(nums = [2,2,1,3,1,2,3,1,2,3])",
        "minLengthAfterRemovals(nums = [4, 8, 5, 3, 1, 10, 15, 15, 15, 10, 3, 8, 5, 4, 1, 1])"
    ],
    "sample_399": [
        "maxSum(nums = [2,3,4,1,2], m = 3, k = 2)",
        "maxSum(nums = [2, 3, 4, 2, 3, 4, 2, 3, 4], m = 3, k = 4)",
        "maxSum(nums=[1, 2, 3, 2, 1], m=2, k=3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, -2, 3, -4, 5, -6], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 2, 1], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 1], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,2,1,2,3,2,1], m = 3, k = 4)",
        "maxSum(nums=[1,2,3,4,5,6,7,8,9,10], m=2, k=3)",
        "maxSum(nums = [1, 1, -2, 1, -3], m = 2, k = 3)"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 3)",
        "maxSum(nums = [1, 1, 1, 1], m = 2, k = 3)",
        "maxSum(nums = [1, 1, 2, 1, 2, 3, 3, 4], m = 3, k = 4)"
    ],
    "sample_364": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [1,2,3,4])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 1])",
        "minLengthAfterRemovals(nums = [1, 1])",
        "minLengthAfterRemovals(nums = [1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 4, 4, 4, 5, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 4])"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"bat\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\"], x = \"a\")",
        "findWordsContaining(words = [\"snake\", \"python\", \"java\"], x = \"a\")",
        "findWordsContaining(words = [\"hi\", \"hello\", \"world\"], x = \"l\")",
        "findWordsContaining(words = [\"camel\", \"fox\"], x = \"a\")",
        "findWordsContaining(words = [\"orange\", \"blue\", \"cyan\"], x = \"a\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 2])",
        "minimumCoins(prices = [1, 2, 3, 2])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 3, 5])",
        "minimumCoins(prices = [1, 2, 4, 3])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"1101\")",
        "minimumBeautifulSubstrings(s = \"1101\")",
        "minimumBeautifulSubstrings(s = \"1101\")",
        "minimumBeautifulSubstrings(s = \"5555\")",
        "minimumBeautifulSubstrings(s = \"111001101\")",
        "minimumBeautifulSubstrings(s = \"0011001\")",
        "minimumBeautifulSubstrings(s = \"10110011\")",
        "minimumBeautifulSubstrings(s = \"51111\")",
        "minimumBeautifulSubstrings(s = \"111100011111\")",
        "minimumBeautifulSubstrings(s
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"efgh\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"dfe\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"dbe\")",
        "canBeEqual(s1 = \"xy\", s2 = \"ab\")"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"axc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"axc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"adc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"axbycz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"yza\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"aabb\")"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2])",
        "minLengthAfterRemovals(nums = [0, 0, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 3, 3, 4, 4, 5, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 1, 2, 3, 1])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"acb\")"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 10)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 10)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 6)",
        "countPairs(nums = [1, 3, 4, 2], target = 6)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"abc\", s2 = \"abd\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"azc\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"bza\")",
        "canMakeSubsequence(s1 = \"azb\", s2 = \"abc\")",
        "canMakeSubsequence(s1 = \"azb\", s2 = \"abc\")",
        "canMakeSubsequence(s1 = \"azb\", s2 = \"zab\")",
        "canMakeSubsequence(s1 = \"axz\", s2 = \"xza\")",
        "canMakeSubsequence(s1 = \"abcdef\", s2 = \"adfc\")",
        "canMakeSubsequence(s1 = \"abcdefz\", s2 = \"azf\")",
        "canMakeSubsequence(s1 = \"aabczz\", s2 = \"bz\")"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words=['2', 'prev', '1', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['2', '1', 'prev', '3', 'prev', 'prev'])"
    ],
    "sample_416": [
        "countPairs(coordinates = [(1, 2), (2, 3), (3, 1)], k = 3)",
        "countPairs(coordinates = [(0, 0), (1, 1), (1, 2), (2, 1)], k = 1)",
        "countPairs(coordinates = [(0, 0), (1, 1), (2, 2)], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 1)",
        "countPairs(coordinates = [(1, 2), (2, 3), (1, 3)], k = 2)",
        "countPairs(coordinates = [(1, 2), (3, 4), (5, 6)], k = 4)",
        "countPairs(coordinates = [(1, 2), (2, 1), (1, 3), (3, 1)], k = 2)",
        "countPairs(coordinates = [(1, 0), (0, 1), (1, 1), (1, 2), (2, 2)], k = 2)",
        "countPairs(coordinates = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)], k = 5)",
        "countPairs(coordinates = [(1, 1), (2, 3), (4, 1), (3, 3), (2, 2), (1, 3), (4, 3), (5, 5), (3, 1), (4, 2)], k = 3)"
    ],
    "sample_451": [
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abacadaeaf\")",
        "minChanges(s = \"aabbaa\")"
    ],
    "sample_461": [
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 15, limit = 5)",
        "distributeCandies(n = 15, limit = 5)",
        "distributeCandies(n = 20, limit = 5)",
        "distributeCandies(n = 6, limit = 1)",
        "distributeCandies(n = 20, limit = 3)",
        "distributeCandies(n = 15, limit = 3)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cab\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cab\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"1234\", s2 = \"1342\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcad\")",
        "canBeEqual(s1 = \"1234\", s2 = \"1432\")",
        "canBeEqual(s1 = \"abdc\", s2 = \"dabc\")"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 5)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n=3, limit=2)",
        "distributeCandies(n = 2, limit = 5)"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 25)",
        "accountBalanceAfterPurchase(p = 35)",
        "accountBalanceAfterPurchase(p = 15)",
        "accountBalanceAfterPurchase(p = 45)",
        "accountBalanceAfterPurchase(p = 45)",
        "accountBalanceAfterPurchase(p = 105)",
        "accountBalanceAfterPurchase(p = 55)",
        "accountBalanceAfterPurchase(p = 150)",
        "accountBalanceAfterPurchase(p = 130)",
        "accountBalanceAfterPurchase(p = 18)"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1, 1, 2, 3])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [0, 1, 2, 3, 4])",
        "minimumSeconds(A = [1, 2, 3, 4])",
        "minimumSeconds(A = [0, 1, 2])",
        "minimumSeconds(A = [0, 1, 2, 3])",
        "minimumSeconds(A = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(A = [1, 1, 1])",
        "minimumSeconds(A = [1, 1, 2, 2, 3, 3])",
        "minimumSeconds(A = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0])"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abcz\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abcz\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcf\")",
        "canMakeSubsequence(str1 = \"abcdef\", str2 = \"abd\")"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 3, 5, 6, 7])",
        "minimumRightShifts(nums = [0, 1, 1])"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1, 2, 3], l = 2, r = 4)",
        "countSubMultisets(nums = [1, 2, 3], l = 1, r = 6)",
        "countSubMultisets(nums = [1, 2, 3], l = 1, r = 6)",
        "countSubMultisets(nums = [1, 2, 3], l = 3, r = 5)",
        "countSubMultisets(nums = [1, 2, 3], l = 4, r = 5)",
        "countSubMultisets(nums = [1, 2, 2], l = 1, r = 3)",
        "countSubMultisets(nums = [1, 1, 1, 1], l = 2, r = 4)",
        "countSubMultisets(nums = [1,2,3], l = 5, r = 10)",
        "countSubMultisets(nums = [1, 2, 3, 4], l = 5, r = 8)",
        "countSubMultisets(nums = [1,1,2,2], l = 3, r = 3)"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 5, 1, 2])",
        "minimumCoins(prices = [1, 2, 5, 1, 2, 5, 1, 2, 5])",
        "minimumCoins(prices = [1, 2, 4, 3])",
        "minimumCoins(prices = [1, 2, 1, 3])",
        "minimumCoins(prices = [2, 3, 1, 4, 5])",
        "minimumCoins(prices = [1, 2, 1, 3, 4, 1])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 2])",
        "minimumCoins(prices = [1, 3, 1, 4])",
        "minimumCoins(prices = [2, 1, 4])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\", \"prev\", \"prev\"])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 1, 2, 2, 2, 3, 3, 3, 3])",
        "minOperations(nums = [1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [2, 2, 2, 2, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1, 1, 1, 2, 2, 2, 3, 3])",
        "minOperations(nums = [1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5])",
        "minOperations(nums = [3, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"p\", \"1\", \"p\", \"2\", \"p\"])",
        "lastVisitedIntegers(words = [\"p\", \"1\", \"p\", \"2\", \"p\"])",
        "lastVisitedIntegers(words = ['p', '2', 'p', '1', 'p'])",
        "lastVisitedIntegers(words = [\"1\", \"p\", \"2\", \"p\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"p\", \"p\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"p\", \"p\", \"3\"])",
        "lastVisitedIntegers(words = [\"p\", \"1\", \"p\", \"2\", \"3\", \"p\"])",
        "lastVisitedIntegers(words=['p', '1', '2', 'p', 'p'])",
        "lastVisitedIntegers(words=[\"1\", \"p\", \"2\", \"p\", \"3\"])",
        "lastVisitedIntegers(words = [\"p\", \"p\", \"2\", \"1\", \"p\", \"3\"])"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 1, 1, 1])",
        "minimumSeconds(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minimumSeconds(nums = [1, 1, 2, 2, 1, 1])",
        "minimumSeconds(nums = [2, 3, 1, 5, 4])",
        "minimumSeconds(nums = [0, 1, 1, 2])",
        "minimumSeconds(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minimumSeconds(nums = [2,1,3,2,4,3,1,2])",
        "minimumSeconds(nums = [1, 2, 1, 2, 3, 2, 1])",
        "minimumSeconds(nums = [2, 3, 4, 5, 7, 8, 9])"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"bat\", \"ant\"], x = \"at\")"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 0])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 0, 1])",
        "maxSubarrays(nums = [5, 1, 6])"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 10)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 10)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [2, 7, 11, 15], target = 9)",
        "countPairs(nums=[1, 3, 7, 9], target=10)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"abd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"aab\", s2 = \"bbb\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"3\", \"2\", \"prev\", \"1\", \"prev\", \"prev\"])"
    ],
    "sample_464": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 3, limit = 5)",
        "distributeCandies(n = 3, limit = 5)",
        "distributeCandies(n = 5, limit = 4)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 2, limit = 3)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [3, 8, 9, 1, 2])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 0])",
        "minimumRightShifts(nums = [1, 3, 3, 3, 2, 1])",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [1, 3, 3, 1, 1])",
        "minimumRightShifts(nums = [2, 1, 3, 4])",
        "minimumRightShifts(nums = [3, 3, 3, 3, 3, 3, 3])",
        "minimumRightShifts(nums = [2, 1, 3, 6, 5, 4])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"basket\", \"ball\"], x = \"a\")",
        "findWordsContaining(words = [\"priyanka\", \"pratik\"], x = \"ri\")"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 3)",
        "maxSum(nums = [1, 1, 1, 1], m = 2, k = 2)",
        "maxSum(nums = [2, 1, 5, 1, 3, 2], m = 2, k = 3)",
        "maxSum(nums=[1], m=1, k=1)",
        "maxSum(nums = [1, 1, 1, 1], m = 1, k = 3)",
        "maxSum(nums = [1, 1, 1, 1, 1], m = 1, k = 5)",
        "maxSum(nums = [0, 1, 2, 3, 4], m = 1, k = 2)",
        "maxSum(nums = [0, 1, 0, 1, 0, 1], m = 3, k = 3)"
    ],
    "sample_424": [
        "minOperations(nums = [1,1,2,2,3,3])",
        "minOperations(nums = [1,1,2,2,3,3])",
        "minOperations(nums = [1,1,2,2,3,3])",
        "minOperations(nums = [3,3,3,3,2,2,2,1,1,1])",
        "minOperations(nums = [1,1,2,2,3,3,3])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1,2,1,2,1,2,1,2,1,2])",
        "minOperations(nums = [1, 2, 2, 2, 3, 3])",
        "minOperations(nums = [1, 2, 1, 2, 1, 2])",
        "minOperations(nums = [3,3,3,3,2,2,1,1,1,1,1])"
    ],
    "sample_417": [
        "minOperations(nums = [3, 1, 4, 1, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [3, 1, 4, 1, 5, 9], k = 2)",
        "minOperations(nums = [10, 11, 12, 13, 14, 15], k = 3)",
        "minOperations(nums = [3,1,2,4,3], k = 2)",
        "minOperations(nums = [10, 15, 20, 25, 30, 35, 40], k = 4)",
        "minOperations(nums = [3, 1, 5, 1, 2, 1], k = 2)",
        "minOperations(nums = [1, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums=[10, 5, 11, 11, 10, 11], k=3)"
    ],
    "sample_371": [
        "sortVowels(s = 'Hymlp')",
        "sortVowels(s = 'Hymlp')",
        "sortVowels(s = 'lHmYp')",
        "sortVowels(s = 'HlymuP')",
        "sortVowels(s = \"HlymP\")",
        "sortVowels(s = \"lHmYp\")",
        "sortVowels(s = \"HlypM\")",
        "sortVowels(s = 'mHlyp')",
        "sortVowels(s = \"Humidity\")",
        "sortVowels(s = 'HyMmL')"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 3, limit = 5)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n=3, limit=1)",
        "distributeCandies(n=3, limit=3)",
        "distributeCandies(n=6, limit=3)"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 1, 2, 2])"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 1, 0, 1, 1])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1])",
        "maxSubarrays(nums = [1, 2, 3, 0, 4, 5, 6])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1, 2, 0, 3, 0, 4, 0, 5])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 2, 0, 3, 0, 4, 0])",
        "maxSubarrays(nums = [1, 2, 0, 3])",
        "maxSubarrays(nums = [1, 2, 0, 3, 0, 4, 5])"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [0, 1, 2])",
        "sumCounts(nums = [0, 1, 2])"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"aabbcc\", s2 = \"xyzzwv\")"
    ],
    "sample_380": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 10)",
        "countPairs(nums=[1,2,3,4,5,6], target=6)",
        "countPairs(nums=[1, 7, 2, 5], target=10)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1, 1, 1])"
    ],
    "sample_368": [
        "sortVowels(s = \"lYmph\")",
        "sortVowels(s = \"lYmph\")",
        "sortVowels(s = \"lYmph\")",
        "sortVowels(s = \"HlymP\")",
        "sortVowels(s = \"HlymP\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"HlymuP\")",
        "sortVowels(s = \"Hlmyp\")",
        "sortVowels(s = \"Hpylm\")",
        "sortVowels(s = 'pLumpy')"
    ],
    "sample_462": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n=10, limit=3)"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 2])",
        "minimumCoins(prices = [1, 2, 3, 2])",
        "minimumCoins(prices = [1, 2, 3, 2])",
        "minimumCoins(prices = [1, 2, 3, 2])",
        "minimumCoins(prices = [1, 2, 1, 1, 2])",
        "minimumCoins(prices=[1, 2, 3, 2, 1])",
        "minimumCoins(prices=[1, 1, 1, 2])",
        "minimumCoins(prices=[1, 3, 4])",
        "minimumCoins(prices = [1, 2, 4, 3, 1, 2])"
    ],
    "sample_426": [
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1])",
        "minOperations(nums = [2, 2, 2])",
        "minOperations(nums = [3,3,3,3])",
        "minOperations(nums = [2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])",
        "minOperations(nums = [3,3,3,3,3,3,3,3,3])",
        "minOperations(nums = [2, 3, 3, 2, 3, 3, 2, 3, 3, 2])"
    ],
    "sample_423": [
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 3, 3, 3])",
        "minOperations(nums = [1, 1, 1, 3, 3, 3])",
        "minOperations(nums = [3, 3, 3, 3, 2, 2, 2])",
        "minOperations(nums = [3, 3, 3, 3, 2, 2, 2, 1, 1, 1])",
        "minOperations(nums = [3, 3, 3, 3, 2, 2, 2, 1, 1, 1])",
        "minOperations(nums = [3, 3, 3, 3, 3, 3])",
        "minOperations(nums = [2, 2, 2, 2, 2, 2, 2])",
        "minOperations(nums = [1, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5])"
    ],
    "sample_476": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1,2,5])",
        "minimumCoins(prices = [1,2,5])",
        "minimumCoins(prices = [1,2,5])",
        "minimumCoins(prices=[1, 2, 5])",
        "minimumCoins(prices = [1, 5, 11, 5])",
        "minimumCoins(prices = [1, 2, 3, 2, 1])",
        "minimumCoins(prices=[1, 2, 3])",
        "minimumCoins(prices=[2,3,5])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 1, 2, 2, 3, 3])",
        "minimumRightShifts(nums = [1, 3, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 3, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 3, 5, 7, 9])",
        "minimumRightShifts(nums = [1, 3, 5, 6, 6, 7])",
        "minimumRightShifts(nums = [2, 1, 4, 3, 5])",
        "minimumRightShifts(nums = [3, 3, 3])",
        "minimumRightShifts(nums = [3, 3, 3, 3, 6])",
        "minimumRightShifts(nums = [0,1,1,1,0,0,0,1])"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 3, 5, 7, 9])",
        "minimumRightShifts(nums = [1, 3, 5, 7, 9])",
        "minimumRightShifts(nums = [1, 3, 5, 7, 9])",
        "minimumRightShifts(nums = [1, 3, 5, 7])",
        "minimumRightShifts(nums = [1, 3, 5, 7])",
        "minimumRightShifts(nums = [1, 3, 5, 7])",
        "minimumRightShifts(nums = [1, 3, 5, 6, 7])",
        "minimumRightShifts(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8])"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"efgh\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"xyz\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"apple\", s2 = \"aple\", s3 = \"aple\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"xxy\", s3 = \"xxz\")"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"abacb\")",
        "longestSemiRepetitiveSubstring(s = \"abacb\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"aabacbebeb\")",
        "longestSemiRepetitiveSubstring(s = \"aabbcc\")",
        "longestSemiRepetitiveSubstring(s = \"aabaabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbabaa\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"hello\", \"world\"])",
        "maximumNumberOfStringPairs(words = [\"hello\", \"world\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\"])",
        "maximumNumberOfStringPairs(words = [\"level\", \"level\", \"up\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"bab\", \"aaa\", \"abab\"])",
        "maximumNumberOfStringPairs(words = [\"ba\", \"na\", \"ab\", \"an\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"cba\", \"abc\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"ab\", \"ba\", \"a\", \"abacus\", \"abacuses\"])",
        "maximumNumberOfStringPairs(words = [\"level\",\"levels\",\"levels\",\"pizza\",\"act\",\"cat\",\"dog\"])"
    ],
    "sample_247": [
        "minOperations(s1 = \"abc\", s2 = \"abc\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"abc\", x = 1)",
        "minOperations(s1 = \"abcd\", s2 = \"abcd\", x = 1)",
        "minOperations(s1 = \"abcd\", s2 = \"abcd\", x = 1)",
        "minOperations(s1 = \"abcd\", s2 = \"abcd\", x = 1)",
        "minOperations(s1 = \"abcd\", s2 = \"abcd\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"adc\", x = 1)",
        "minOperations(s1 = \"abcd\", s2 = \"abce\", x = 1)",
        "minOperations(s1 = \"abac\", s2 = \"caba\", x = 1)",
        "minOperations(s1 = \"abcdef\", s2 = \"abcdef\", x = 2)"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"aba\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"mama\", \"papa\"])"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minGroupsForValidAssignment(nums = [2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 2, 3, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 4, 4, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [2, 4, 1, 1, 1, 2, 2])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 7, m = 2)",
        "differenceOfSums(n = 30, m = 7)"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = '1101', k = 2)",
        "shortestBeautifulSubstring(s = '1101', k = 2)",
        "shortestBeautifulSubstring(s = '11101', k = 2)",
        "shortestBeautifulSubstring(s = '11011', k = 2)",
        "shortestBeautifulSubstring(s = \"1101100\", k = 2)",
        "shortestBeautifulSubstring(s = \"110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"110110\", k = 2)",
        "shortestBeautifulSubstring(s = '1100', k = 2)",
        "shortestBeautifulSubstring(s = \"1011011\", k = 3)",
        "shortestBeautifulSubstring(s = '011100', k = 2)"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bca\", s3 = \"cab\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bca\", s3 = \"cab\")",
        "findMinimumOperations(s1 = \"x\", s2 = \"y\", s3 = \"z\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"gh\")"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"abcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcddcba\")",
        "longestSemiRepetitiveSubstring(s = \"abcab\")"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3, 0], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2], nums2 = [3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 0, 2, 3], nums2 = [4, 5, 6, 0])",
        "minSum(nums1 = [0, 0, 0, 3, 4], nums2 = [0, 0, 0, 1, 2])",
        "minSum(nums1 = [2, 1, 3, 1, 2], nums2 = [1, 2, 1, 3, 2])"
    ],
    "sample_289": [
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"11001\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"111001\")",
        "minimumSteps(s = \"111011\")",
        "minimumSteps(s = \"011\")",
        "minimumSteps(s = \"1111100\")",
        "minimumSteps(s = \"10101010101\")"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [2, 3, 1])",
        "maximumTripletValue(nums = [2, 1, 3])",
        "maximumTripletValue(nums = [0, 1, 0])",
        "maximumTripletValue(nums = [-1, -2, -3])"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"abc\", k = 1)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"a\", k = 1)",
        "beautifulSubstrings(s = \"abacadaeaf\", k = 3)",
        "beautifulSubstrings(s = \"abc\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"a\", k = 2)",
        "beautifulSubstrings(s = \"aibohphobia\", k = 3)",
        "beautifulSubstrings(s = \"z\", k = 2)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"a\")",
        "minimumBeautifulSubstrings(s = \"111\")",
        "minimumBeautifulSubstrings(s = \"abcdefg\")",
        "minimumBeautifulSubstrings(s = \"1111\")",
        "minimumBeautifulSubstrings(s = \"11111\")",
        "minimumBeautifulSubstrings(s = \"5555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555",
        "minimumBeautifulSubstrings(s = \"11011010\")",
        "minimumBeautifulSubstrings(s = \"babab\")",
        "minimumBeautifulSubstrings(s = \"543628\")",
        "minimumBeautifulSubstrings(s = \"303123\")"
    ],
    "sample_313": [
        "matrixSum(a = [[0, 1]])",
        "matrixSum(a = [[0, 1]])",
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum(a = [[0, 1], [1, 0]])",
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[0, 0, 1]])",
        "matrixSum(a = [[1, 2], [3, 0]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "matrixSum(a = [[0, 0, 1], [0, 0, 0], [1, 1, 1]])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3, 0], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 1, 1, 0, 0, 0], nums2 = [0, 0, 0, 1, 1, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 0, 6])",
        "minSum(nums1 = [1, 1, 1], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 0], nums2 = [4, 5])",
        "minSum(nums1 = [0, 0, 1, 1], nums2 = [0, 0, 1, 1])",
        "minSum(nums1 = [2, 0, 1], nums2 = [1, 2, 0])",
        "minSum(nums1 = [1, 1], nums2 = [0, 1])",
        "minSum(nums1 = [1, 2, 0, 6], nums2 = [3, 4, 0, 0])"
    ],
    "sample_282": [
        "minOperations(nums1 = [1, 2], nums2 = [2, 1])",
        "minOperations(nums1 = [1, 2], nums2 = [2, 1])",
        "minOperations(nums1 = [1, 2], nums2 = [2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 4])",
        "minOperations(nums1 = [1, 1], nums2 = [2, 2])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [2, 1, 4, 3])",
        "minOperations(nums1=[1,1,1], nums2=[1,2,3])",
        "minOperations(nums1 = [2, 1, 4], nums2 = [2, 1, 3])",
        "minOperations(nums1=[2, 3, 7, 10, 2], nums2=[2, 3, 6, 8, 2])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1, 2, 2, 3, 3, 3, 3])",
        "alternatingSubarray(nums = [1, 2, 2, 2, 3, 3, 3, 3])",
        "alternatingSubarray(nums = [1, 2, 2, 2, 3, 3, 3, 3])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 3, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 2, 2, 3])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2])",
        "alternatingSubarray(nums = [1, 2, 2, 2, 3, 4, 4, 4, 4])",
        "alternatingSubarray(nums = [1, 0, 1, 1, 0, 0, 1, 1])",
        "alternatingSubarray(nums = [1, 2, 3, 2, 4, 3, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 2, 1, 3, 4, 2])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [3, 5, 7], money = 5)",
        "buyChoco(prices = [100, 200, 50], money = 300)",
        "buyChoco(prices = [10, 5, 20], money = 15)",
        "buyChoco(prices = [1, 2], money = 1)",
        "buyChoco(prices = [4, 6, 5], money = 5)",
        "buyChoco(prices = [1, 3, 5, 7], money = 2)"
    ],
    "sample_302": [
        "countSeniors(details = [\"Alice_25_F\", \"Bob_65_M\", \"Charlie_35_M\"])",
        "countSeniors(details = [\"Alice, 30\", \"Bob, 65\", \"Charlie, 22\"])",
        "countSeniors(details = [\"001234567890\", \"012345678901\", \"023456789012\"])",
        "countSeniors(details = [\"John Doe 25\", \"Jane Smith 65\", \"Jim Brown 15\"])",
        "countSeniors(details = [\"John Doe, 25\", \"Jane Doe, 65\", \"Bruce Wayne, 45\"])",
        "countSeniors(details = [\"Smith, John, 22\", \"Doe, Jane, 35\", \"Johnson, Alice, 75\"])",
        "countSeniors(details = [\"John_25_3456\", \"Mike_65_1234\", \"Emma_22_5678\"])",
        "countSeniors(details = [\"2001-01-31John\", \"1945-11-27Mark\", \"1978-05-16Anna\"])",
        "countSeniors(details = [\"John-25-Developer\", \"Samantha-45-Manager\", \"Sue-60-Salesperson\"])",
        "countSeniors(details = [\"001001010011\", \"001011001001\", \"001011011001\"])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"abacadaeaf\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"abcd\", k = 1)",
        "beautifulSubstrings(s = \"abcd\", k = 1)",
        "beautifulSubstrings(s = \"abcd\", k = 2)",
        "beautifulSubstrings(s = \"aabbaa\", k = 1)",
        "beautifulSubstrings(s = \"bhjgvgv\", k = 2)"
    ],
    "sample_255": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5,6,7,8,9])",
        "minimumSum(nums=[1, 2, 3, 4, 5])",
        "minimumSum(nums = [3,4,5,7,2])",
        "minimumSum(nums = [3,5,7,2,8,1])",
        "minimumSum(nums = [1,4,6,2,7])",
        "minimumSum(nums = [1, 4, 2, 7, 5, 8, 3, 6])",
        "minimumSum(nums = [5,3,7,4,2])",
        "minimumSum(nums = [1,4,7,10,2,3,11])"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [3,3,3,4,4,4,4])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 2, 2, 2, 3, 3, 4])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,3,3,3,4,4,4,4])",
        "minGroupsForValidAssignment(nums = [1, 1, 3, 3, 3, 4, 4, 4, 4])",
        "minGroupsForValidAssignment(nums = [1, 3, 3, 3, 2, 2, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])",
        "minGroupsForValidAssignment(nums = [3, 1, 3, 2, 2, 2, 1, 1])",
        "minGroupsForValidAssignment(nums=[2, 3, 5, 7, 8, 11])",
        "minGroupsForValidAssignment(nums=[2, 3, 2, 4, 3, 5, 3, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9])"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 2, 3])",
        "alternatingSubarray(nums = [1, 2, 1, 3, 4, 5])",
        "alternatingSubarray(nums=[1, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 4, 6])",
        "alternatingSubarray(nums = [1, 2, 4, 3])",
        "alternatingSubarray(nums = [2, 3, 4, 5, 7, 9])",
        "alternatingSubarray(nums = [1, 2, 4, 3, 5, 6, 7])",
        "alternatingSubarray(nums=[1, 2, 3, 5, 6, 10])",
        "alternatingSubarray(nums=[1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = '1011', k = 2)",
        "shortestBeautifulSubstring(s = '1100', k = 2)",
        "shortestBeautifulSubstring(s = '11011', k = 2)",
        "shortestBeautifulSubstring(s = '110111', k = 2)",
        "shortestBeautifulSubstring(s = '111011', k = 2)",
        "shortestBeautifulSubstring(s = '1101100', k = 2)",
        "shortestBeautifulSubstring(s = '111001', k = 2)",
        "shortestBeautifulSubstring(s = \"01110110\", k = 3)",
        "shortestBeautifulSubstring(s = \"11011100\", k = 3)",
        "shortestBeautifulSubstring(s
    ],
    "sample_293": [
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"01101\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"0100100\")",
        "minimumSteps(s = \"0010101\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"ababaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"bababc\")",
        "longestSemiRepetitiveSubstring(s = \"abaa\")",
        "longestSemiRepetitiveSubstring(s = \"abaabac\")",
        "longestSemiRepetitiveSubstring(s = \"1234567890\")"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minGroupsForValidAssignment(nums = [3,3,2,1,1])",
        "minGroupsForValidAssignment(nums = [1,2,3,1,2,3])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 1, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [3,1,4,1,5,9])",
        "minGroupsForValidAssignment(nums = [2, 2, 1, 1, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [2, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [3, 1, 3, 4, 1, 3])",
        "minGroupsForValidAssignment(nums = [2, 1, 2, 2, 1, 1, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3])"
    ],
    "sample_307": [
        "countSeniors(details = [\"1987Alice\", \"1997Bob\", \"2007Carol\", \"1977David\"])",
        "countSeniors(details = [\"1990-03-21\", \"1959-11-10\", \"1975-08-30\"])",
        "countSeniors(details = [\"John 1987\", \"Mike 1975\", \"Emily 1990\"])",
        "countSeniors(details = [\"John1985\", \"Jane1970\", \"Tim2005\", \"Alice1969\"])",
        "countSeniors(details = [\"John1987\", \"Alan2005\", \"Smith1975\", \"Mark2020\"])",
        "countSeniors(details = [\"190123\", \"194509\", \"197805\", \"199011\"])",
        "countSeniors(details = [\"00101065\", \"00204055\", \"00302035\", \"00405065\"])",
        "countSeniors(details = [\"Alice,30,8912\", \"Bob,50,8912\", \"Carol,70,8912\"])",
        "countSeniors(details = [\"John,80,1234\", \"Doe,70,5678\", \"Smith,65,9101\", \"Brown,55,1357\"])",
        "countSeniors(details = [\"010178Alice\", \"020382Bob\", \"030292Charlie\", \"040119David\"])"
    ],
    "sample_290": [
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"0110\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"00\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"1101\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,1,2], moveFrom = [1,2], moveTo = [2,1])",
        "relocateMarbles(nums = [1, 2, 2], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums=[1, 2, 2, 3, 3, 3], moveFrom=[2, 3], moveTo=[3, 2])",
        "relocateMarbles(nums = [1, 2, 2, 3, 3, 3], moveFrom = [2, 3], moveTo = [1, 2])",
        "relocateMarbles(nums=[1, 2, 2], moveFrom=[1, 2], moveTo=[2, 1])",
        "relocateMarbles(nums = [1,2,2], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums = [1, 2, 2, 3, 3, 3], moveFrom = [3], moveTo = [1])",
        "relocateMarbles(nums = [1,2,1,2], moveFrom = [1,2], moveTo = [2,1])",
        "relocateMarbles(nums=[1,2,2,3,5,5,5], moveFrom=[2,5], moveTo=[3,4])",
        "relocateMarbles(nums=[1, 1, 2, 2, 3, 3], moveFrom=[1, 2], moveTo=[2, 3])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [0, 1, 0, 1])",
        "alternatingSubarray(nums = [0, 1, 0, 1])",
        "alternatingSubarray(nums = [0, 1, 0, 1])",
        "alternatingSubarray(nums = [1, 2, 1, 2])",
        "alternatingSubarray(nums = [0, 1, 1, 0])",
        "alternatingSubarray(nums = [1, 0, 1, 0])",
        "alternatingSubarray(nums = [1, 0, 1, 0])",
        "alternatingSubarray(nums = [1, 0, 1, 0])",
        "alternatingSubarray(nums = [1, 0, 1, 0])",
        "alternatingSubarray(nums = [1, 3, 2, 3, 5, 3])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aei\", k = 2)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"abc\", k = 3)",
        "beautifulSubstrings(s = \"beautiful\", k = 3)",
        "beautifulSubstrings(s = \"hello\", k = 3)",
        "beautifulSubstrings(s = \"abac\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 5)",
        "beautifulSubstrings(s = \"education\", k = 3)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [0, 1, 2, 3, 4])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\", \"zyx\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\", \"bac\", \"xyz\", \"zyx\"])",
        "maximumNumberOfStringPairs(words = [\"aab\", \"bab\", \"aba\"])",
        "maximumNumberOfStringPairs(words = [\"aabb\", \"bbaa\"])",
        "maximumNumberOfStringPairs(words = [\"aab\", \"bab\", \"aba\", \"baa\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abca\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bac\", \"bca\", \"aba\", \"aab\"])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 6, m = 3)",
        "differenceOfSums(n = 6, m = 3)",
        "differenceOfSums(n = 7, m = 3)"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [2, 3, 5], money = 5)",
        "buyChoco(prices = [2, 3, 5], money = 10)",
        "buyChoco(prices = [5, 5, 7], money = 10)",
        "buyChoco(prices = [5, 8, 9], money = 13)",
        "buyChoco(prices = [20, 30, 50], money = 50)",
        "buyChoco(prices = [5, 7, 8], money = 10)",
        "buyChoco(prices = [5, 4, 3], money = 9)",
        "buyChoco(prices = [500, 200, 300], money = 500)",
        "buyChoco(prices = [4, 5, 9], money = 9)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"b\", \"a\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"aab\", \"bab\", \"aba\", \"aaa\"])"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"baab\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaa\")",
        "longestSemiRepetitiveSubstring(s = \"ababcc\")",
        "longestSemiRepetitiveSubstring(s = \"baababa\")",
        "longestSemiRepetitiveSubstring(s = \"abcdcbef\")"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"a\",\"b\",\"c\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"bca\", \"cab\"])",
        "minimizeConcatenatedLength(words = [\"cat\",\"dog\",\"bird\",\"ant\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"bc\", \"ab\"])",
        "minimizeConcatenatedLength(words = [\"cat\",\"dog\",\"cat\"])",
        "minimizeConcatenatedLength(words = [\"ba\",\"na\",\"na\"])",
        "minimizeConcatenatedLength(words=[\"cat\", \"dog\", \"bird\"])",
        "minimizeConcatenatedLength(words = [\"aab\", \"bac\", \"cca\"])",
        "minimizeConcatenatedLength(words = [\"a\",\"ab\",\"bc\",\"cd\",\"de\"])",
        "minimizeConcatenatedLength(words = [\"pq\",\"qr\",\"rs\",\"st\",\"tu\"])"
    ],
    "sample_323": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 1)",
        "isFascinating(n = 0)",
        "isFascinating(n = 0)",
        "isFascinating(n = 12)",
        "isFascinating(n=12)",
        "isFascinating(n = 111)",
        "isFascinating(n = 678)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"baaabac\")",
        "longestSemiRepetitiveSubstring(s = \"babab\")",
        "longestSemiRepetitiveSubstring(s = \"baabac\")",
        "longestSemiRepetitiveSubstring(s = \"bacbab\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"1990-01-01\"])",
        "countSeniors(details = [\"Alice,25,Engineer\", \"Bob,55,Doctor\", \"Charlie,35,Teacher\"])",
        "countSeniors(details = [\"2000-01-01\", \"1949-12-31\"])",
        "countSeniors(details = [\"John,25,Developer\",\"Alan,65,Manager\"])",
        "countSeniors(details = [\"name,age,gender\\nAlice,35,F\\nBob,65,M\\nCarol,25,F\"])",
        "countSeniors(details = [\"Alice,2021-01-20\"])",
        "countSeniors(details = [\"John,32\", \"Tom,65\", \"Alice,22\"])",
        "countSeniors(details = [\"Alice,30,2000\", \"Bob,40,1995\", \"Charlie,55,1965\"])",
        "countSeniors(details = [\"John_23_07_1965\", \"Emma_28_05_1995\", \"Michael_35_01_1980\"])",
        "countSeniors(details=[\"1985-01-26\", \"2000-10-12\", \"2021-11-23\"])"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [1, 2, 1, 2])",
        "minGroupsForValidAssignment(nums = [2, 1, 1, 2])",
        "minGroupsForValidAssignment(nums = [5, 1, 3, 2, 2])",
        "minGroupsForValidAssignment(nums = [2, 3, 4, 5, 2, 3, 4, 5])"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [])",
        "minimumSum(nums = [3, 4, 5, 1, 2])",
        "minimumSum(nums = [3, 4, 5, 1, 2])",
        "minimumSum(nums = [5, 4, 3, 2, 1])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [3, 1, 2, 4])",
        "minimumSum(nums = [5, 5, 1, 2, 3])"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"b\", \"a\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"b\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ac\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"xy\", \"yx\"])",
        "maximumNumberOfStringPairs(words = [\"aba\"])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = '1101', k = 2)",
        "shortestBeautifulSubstring(s = '1101', k = 2)",
        "shortestBeautifulSubstring(s = '10111', k = 2)",
        "shortestBeautifulSubstring(s = \"10111\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110111\", k = 3)",
        "shortestBeautifulSubstring(s = '100111', k = 2)",
        "shortestBeautifulSubstring(s = '0110111', k = 2)",
        "shortestBeautifulSubstring(s = \"1110111101\", k = 2)",
        "shortestBeautifulSubstring(s = '101010101111111', k = 3)",
        "shortestBeautifulSubstring(s = \"11101111111011101\", k = 3)"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [8, 5, 1, 9, 3], limit = 5)",
        "lexicographicallySmallestArray(nums = [8, 5, 1, 9, 3], limit = 10)",
        "lexicographicallySmallestArray(nums = [5, 1, 9, 8, 3], limit = 10)",
        "lexicographicallySmallestArray(nums = [8, 9, 1, 5, 3], limit = 10)",
        "lexicographicallySmallestArray(nums = [5, 8, 3, 9, 1], limit = 10)",
        "lexicographicallySmallestArray(nums = [5, 1, 8, 3, 9], limit = 3)",
        "lexicographicallySmallestArray(nums = [8, 9, 5, 3, 1], limit = 1)",
        "lexicographicallySmallestArray(nums = [1, 3, 9, 5, 8], limit = 5)",
        "lexicographicallySmallestArray(nums = [8, 9, 5, 3, 1], limit = 4)",
        "lexicographicallySmallestArray(nums = [8, 5, 9, 1, 5, 8, 3], limit = 7)"
    ],
    "sample_310": [
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum(a = [[0, 1], [1, 0]])",
        "matrixSum(a = [[0, 1], [0, 0]])",
        "matrixSum(a = [[0,1],[1,0]])",
        "matrixSum(a = [[0,1],[1,0]])",
        "matrixSum(a = [[0,1],[2,3]])",
        "matrixSum(a = [[1, 0], [0, 0], [0, 1]])",
        "matrixSum(a = [[0,1,2,3],[1,2,3,4]])",
        "matrixSum(a = [[0, 1, 1], [2, 2, 1]])"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"beautiful\", k = 3)",
        "beautifulSubstrings(s = \"beautiful\", k = 3)",
        "beautifulSubstrings(s = \"abacadaeaf\", k = 3)",
        "beautifulSubstrings(s = \"abcdae\", k = 3)",
        "beautifulSubstrings(s = \"aabb\", k = 1)",
        "beautifulSubstrings(s = \"abc\", k = 1)",
        "beautifulSubstrings(s = \"abcdefg\", k = 3)",
        "beautifulSubstrings(s = \"beautifulSubstrings\", k = 3)",
        "beautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyz\", k = 3)",
        "beautifulSubstrings(s = \"aabbaa\", k = 2)"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\", \"zyx\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aba\", \"bab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcabc\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"bca\", \"abcd\", \"dcba\"])"
    ],
    "sample_325": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 4)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 1234)"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [3, 4, 0])",
        "maximumTripletValue(nums = [10, 3, 10, 2, 8])"
    ],
    "sample_312": [
        "matrixSum(nums = [[0, 1]])",
        "matrixSum(nums = [[0, 1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[0, 1], [2, 3]])",
        "matrixSum(nums = [[0, 1], [2, 3]])",
        "matrixSum(nums = [[0,1],[1,0]])",
        "matrixSum(nums = [[0,1]])",
        "matrixSum(nums = [[[1]]])",
        "matrixSum(nums = [[1], [2]])",
        "matrixSum(nums = [[1], [2]])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3, 4, 5], b = [6, 7, 8, 9, 10])",
        "minOperations(a = [1, 2, 3, 4, 5], b = [6, 7, 8, 9, 10])",
        "minOperations(a = [1, 2, 3, 4], b = [5, 6, 7, 8])",
        "minOperations(a = [1, 3, 5], b = [2, 4, 6])",
        "minOperations(a = [2, 1, 3], b = [3, 2, 1])",
        "minOperations(a = [2, 3, 5], b = [1, 4, 6])",
        "minOperations(a = [5,6,7], b = [3,8,9])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 4])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 1])",
        "minOperations(nums1 = [1, 2], nums2 = [3, 4])",
        "minOperations(nums1 = [1, 2], nums2 = [3, 4])",
        "minOperations(nums1 = [1, 2], nums2 = [2, 1])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [2, 2, 2, 2])",
        "minOperations(nums1=[1, 2, 3, 4, 5], nums2=[6, 7, 8, 9, 10])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 5, 7])",
        "minOperations(nums1=[1,2,3], nums2=[2,3,1])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [3, 2, 1])",
        "maximumTripletValue(nums = [2, 3, 1])",
        "maximumTripletValue(nums = [2, 3, 1])",
        "maximumTripletValue(nums = [5, 3, 2])",
        "maximumTripletValue(nums = [2, 3, 4])",
        "maximumTripletValue(nums = [2, 1, 2])",
        "maximumTripletValue(nums = [5, 1, 5])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = '1101', k = 2)",
        "shortestBeautifulSubstring(s = '1010101', k = 3)",
        "shortestBeautifulSubstring(s = '1011', k = 2)",
        "shortestBeautifulSubstring(s = \"1101010\", k = 3)",
        "shortestBeautifulSubstring(s = '01110110', k = 3)",
        "shortestBeautifulSubstring(s = \"0101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"1101000\", k = 3)",
        "shortestBeautifulSubstring(s = '10010110', k = 2)",
        "shortestBeautifulSubstring(s = \"11100110\", k = 2)",
        "shortestBeautifulSubstring(s = \"0001101010100111\", k = 3)"
    ],
    "sample_256": [
        "minimumSum(nums = [1, 5, 4, 1])",
        "minimumSum(nums = [3, 4, 5, 1, 2])",
        "minimumSum(nums = [2, 4, 7, 6])",
        "minimumSum(nums = [3, 4, 5, 1, 2, 3])",
        "minimumSum(nums = [3, 5, 8, 4])",
        "minimumSum(nums = [10, 5, 7, 8, 9])",
        "minimumSum(nums = [1, 4, 7, 8, 7, 3, 2, 1])",
        "minimumSum(nums = [0, 1, 1, 2, 1, 3, 4, 2, 1])",
        "minimumSum(nums = [5, 7, 1, 7, 2])",
        "minimumSum(nums = [1, 4, 1, 1, 2, 5, 2, 3, 5])"
    ],
    "sample_291": [
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"000000\")",
        "minimumSteps(s = \"010101\")",
        "minimumSteps(s = \"0101010\")",
        "minimumSteps(s
    ],
    "sample_279": [
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 1])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [2, 3, 4, 1])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [2, 3, 1, 4])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minOperations(nums1=[1, 2, 3, 4], nums2=[4, 3, 2, 1])",
        "minOperations(nums1 = [1, 1, 1], nums2 = [1, 1, 1])",
        "minOperations(nums1 = [1, 3, 5], nums2 = [2, 3, 1])",
        "minOperations(nums1 = [1, 1, 2, 2, 3, 3], nums2 = [1, 1, 2, 2, 3, 4])",
        "minOperations(nums1 = [1, 3, 2, 3, 3], nums2 = [2, 3, 1, 1, 2])",
        "minOperations(nums1=[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], nums2=[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1])"
    ],
    "sample_277": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[0, 1, 2], [3, 0, 5], [6, 7, 8]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 1], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[1, 2, 0], [3, 4, 5], [6, 7, 8]])",
        "findChampion(grid = [[0, 1, 2], [1, 1, 1], [0, 0, 0]])",
        "findChampion(grid = [[1, -1, 0, 0, -1], [0, 1, -1, 0, 0], [0, 0, 1, -1, 0], [0, 0, 0, 1, -1], [-1, 0, 0, 0, 1]])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 5, m = 2)"
    ],
    "sample_292": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"1110\")",
        "minimumSteps(s = \"0111\")",
        "minimumSteps(s = \"01101110\")"
    ],
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 1, 2])",
        "alternatingSubarray(nums = [1, 2, 1, 2])",
        "alternatingSubarray(nums = [1, 2, 1, 2])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3])",
        "alternatingSubarray(nums = [4, 2, 5, 7])",
        "alternatingSubarray(nums = [1, 2, 3, 2, 1])",
        "alternatingSubarray(nums = [1, 3, 4, 5, 7, 9])",
        "alternatingSubarray(nums = [4, 2, 1, 6])",
        "alternatingSubarray(nums = [1, 3, 4, 6, 7, 10])"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 3])",
        "relocateMarbles(nums = [2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [4, 2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 3], moveTo = [2, 4])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [0, 1, 0])"
    ],
    "sample_273": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 0], [0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1], [1, 1]])",
        "findChampion(grid = [[0, 1], [2, 3]])",
        "findChampion(grid = [[0, 0, 1], [0, 0, 0], [1, 0, 0]])"
    ],
    "sample_267": [
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [0, 0, 0, 0], nums2 = [1, 1, 1, 1])",
        "minSum(nums1 = [1, 1, 1], nums2 = [2, 2, 2])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 0, 3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 0, 0])",
        "minSum(nums1 = [2, 2, 2, 2], nums2 = [0, 0, 0, 0])",
        "minSum(nums1 = [1, 2], nums2 = [0, 1, 2])",
        "minSum(nums1 = [1, 1, 2, 2], nums2 = [0, 0, 0, 0])",
        "minSum(nums1=[2,3,0,4], nums2=[1,0,5])"
    ],
    "sample_294": [
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"01101\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"110101\")",
        "minimumSteps(s = \"011010\")",
        "minimumSteps(s = \"100110\")",
        "minimumSteps(s = \"1111100000\")"
    ],
    "sample_274": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[1, -1, 0], [0, 1, -1], [1, 0, 1]])",
        "findChampion(grid = [[1, 0], [0, 1]])",
        "findChampion(grid = [[0, 1], [0, 1]])",
        "findChampion(grid = [[1, -1, 0], [0, 2, -1], [1, 0, 2]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 2, 0], [0, 2, 1], [2, 1, 0]])",
        "findChampion(grid = [[1, -1, 0], [0, 2, -1], [0, -2, 3]])"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [3,3,3,4,4,4,4])",
        "minGroupsForValidAssignment(nums = [4, 3, 2, 1])",
        "minGroupsForValidAssignment(nums = [5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [2, 2, 3, 3, 4])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [5, 5, 5, 5, 4, 4, 4, 3, 3, 2, 2])",
        "minGroupsForValidAssignment(nums = [11, 9, 8, 7, 6, 5, 4, 3, 2, 1])",
        "minGroupsForValidAssignment(nums = [5,5,4,3,2,1,1,1])",
        "minGroupsForValidAssignment(nums = [10, 2, 2, 4, 2, 4, 2, 2, 2, 4])"
    ],
    "sample_270": [
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [0, 0, 0], nums2 = [0, 0, 0])",
        "minSum(nums1 = [0, 0, 0], nums2 = [1, 1])",
        "minSum(nums1 = [1, 1, 1], nums2 = [1, 0, 1])",
        "minSum(nums1 = [1, 0], nums2 = [2, 3])",
        "minSum(nums1 = [0, 1, 2], nums2 = [1, 1])",
        "minSum(nums1 = [2, 5, 1], nums2 = [0, 1, 2])"
    ],
    "sample_317": [
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [5, 7, 2], money = 10)",
        "buyChoco(prices = [3, 5, 7], money = 10)",
        "buyChoco(prices = [1,2,3], money = 5)",
        "buyChoco(prices = [2, 5, 7], money = 5)",
        "buyChoco(prices = [5, 7, 3], money = 10)",
        "buyChoco(prices=[5, 2, 8, 1], money=6)"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"hello\", k = 3)",
        "beautifulSubstrings(s = \"hello\", k = 2)",
        "beautifulSubstrings(s = \"hello\", k = 2)",
        "beautifulSubstrings(s = \"abcd\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"abc\", k = 1)",
        "beautifulSubstrings(s = \"a\", k = 1)",
        "beautifulSubstrings(s = \"z\", k = 3)",
        "beautifulSubstrings(s = \"abcdefg\", k = 3)",
        "beautifulSubstrings(s = \"abcedcba\", k = 2)"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"ababaa\")"
    ],
    "sample_341": [
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 5, y = 7, z = 2)",
        "longestString(x = 5, y = 7, z = 2)",
        "longestString(x = 5, y = 6, z = 3)",
        "longestString(x = 5, y = 3, z = 2)",
        "longestString(x = 3, y = 5, z = 6)",
        "longestString(x = 4, y = 6, z = 3)",
        "longestString(x = 4, y = 3, z = 7)"
    ],
    "sample_271": [
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3, 0], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1,2,3,0], nums2 = [4,5,6])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3])",
        "minSum(nums1 = [0, 0, 0], nums2 = [1, 1, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1=[1,0,3], nums2=[2,4,6])",
        "minSum(nums1=[3, 2, 1], nums2=[2, 3, 2])"
    ],
    "sample_340": [
        "longestString(x = 3, y = 4, z = 1)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 3, z = 2)",
        "longestString(x = 3, y = 3, z = 1)",
        "longestString(x = 4, y = 3, z = 1)",
        "longestString(x = 5, y = 4, z = 3)",
        "longestString(x = 2, y = 4, z = 1)"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = '1101', k = 3)",
        "shortestBeautifulSubstring(s = '1101101', k = 3)",
        "shortestBeautifulSubstring(s = \"10111\", k = 3)",
        "shortestBeautifulSubstring(s = \"010111\", k = 3)",
        "shortestBeautifulSubstring(s = \"0101010\", k = 3)",
        "shortestBeautifulSubstring(s = '11100', k = 3)",
        "shortestBeautifulSubstring(s = \"11100111\", k = 3)",
        "shortestBeautifulSubstring(s = \"1101101010\", k = 3)",
        "shortestBeautifulSubstring(s = \"0111001\", k = 3)",
        "shortestBeautifulSubstring(s = '1100110110111100', k = 3)"
    ],
    "sample_324": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 0)",
        "isFascinating(n = 9)"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [3, 2, 1, 5, 4])",
        "minimumSum(nums = [1, 4, 7])",
        "minimumSum(nums = [3, 1, 4, 2])",
        "minimumSum(nums = [1, 3, 4, 2])",
        "minimumSum(nums = [4, 3, 2, 1])",
        "minimumSum(nums = [1, 5, 11, 5])",
        "minimumSum(nums = [4, 1, 7, 3, 8])",
        "minimumSum(nums = [2, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 3, 6, 7, 9])"
    ],
    "sample_268": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3, 0], nums2 = [4, 5, 6])",
        "minSum(nums1 = [0, 1, 2], nums2 = [3, 4, 5])",
        "minSum(nums1 = [1, 1, 1, 0, 0, 0], nums2 = [0, 0, 0, 1, 1, 1])",
        "minSum(nums1 = [1, 0, 1, 0, 1, 0], nums2 = [1, 1, 1, 0, 0, 0])",
        "minSum(nums1 = [0, 0, 0, 1, 2], nums2 = [0, 0, 1, 2, 3])",
        "minSum(nums1 = [1, 2, 3, 4, 0], nums2 = [0, 0, 0, 0])",
        "minSum(nums1 = [1, 1, 0], nums2 = [0, 0, 2])",
        "minSum(nums1 = [1, 0, 1, 0, 1, 0, 1], nums2 = [1, 1, 1, 1, 1])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abe\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"acd\", s3 = \"ace\")"
    ],
    "sample_321": [
        "maxStrength(nums = [1, 2, -3, -4, 5])",
        "maxStrength(nums = [1, 2, 3, -4, -5, -6])",
        "maxStrength(nums = [2, -3, 4, -5, 6])",
        "maxStrength(nums = [2, 3, -1, -3, 5])",
        "maxStrength(nums = [4, 3, 2, -5, -6, -7])",
        "maxStrength(nums = [4, 3, 2, -1, -2, 5])",
        "maxStrength(nums = [2, 3, 4, -1, -2, 5])",
        "maxStrength(nums = [3, -2, 0, -5, -1])",
        "maxStrength(nums = [4, -1, 1, -4])",
        "maxStrength(nums = [5, 1, -1, 2, -2])"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [4, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 3, 5], moveTo = [2, 4, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 3, 5], moveTo = [2, 4, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 3], moveTo = [2, 4])"
    ],
    "sample_357": [
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [10])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [10])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [10])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 8], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 9], moveTo = [10, 11])",
        "relocateMarbles(nums=[5, 6, 8, 9], moveFrom=[], moveTo=[])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 2, 3], moveTo = [4, 5, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 4, 7], moveTo = [8, 9, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveFrom = [1, 2, 3, 4, 7, 8, 9, 10], moveTo = [5, 6, 7, 8, 9, 10, 11, 12])",
        "relocateMarbles(nums = [1, 5, 7, 9, 5, 6, 8, 9], moveFrom = [7, 9], moveTo = [3, 1])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 0)",
        "buyChoco(prices = [10, 20, 30], money = 50)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 5)",
        "buyChoco(prices = [1, 2, 3, 4], money = 5)",
        "buyChoco(prices=[1, 2], money=0)",
        "buyChoco(prices = [5, 8], money = 5)",
        "buyChoco(prices = [1, 3, 5, 8, 9], money = 15)",
        "buyChoco(prices = [5, 4, 3], money = 5)",
        "buyChoco(prices=[2, 4], money=0)"
    ],
    "sample_308": [
        "matrixSum(nums = [[0, 1], [2, 3]])",
        "matrixSum(nums = [[0, 1], [2, 3]])",
        "matrixSum(nums = [[0, 1], [2, 3]])",
        "matrixSum(nums = [[0, 1], [1, 0]])",
        "matrixSum(nums = [[0,1],[1,0]])",
        "matrixSum(nums = [[0,1],[1,0]])",
        "matrixSum(nums = [[0, 1], [0, 0]])",
        "matrixSum(nums = [[0, 1], [0, 0]])",
        "matrixSum(nums = [[0, 1, 0], [0, 0, 1], [1, 1, 1]])",
        "matrixSum(nums = [[1]])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2], money = 3)",
        "buyChoco(prices = [2, 3, 5], money = 10)",
        "buyChoco(prices = [5, 5, 10], money = 10)",
        "buyChoco(prices = [2, 3, 6], money = 5)",
        "buyChoco(prices = [5, 7, 8], money = 10)",
        "buyChoco(prices = [5, 5, 2, 2], money = 7)",
        "buyChoco(prices = [5, 5, 2, 2], money = 9)",
        "buyChoco(prices = [3, 4, 5, 6], money = 5)",
        "buyChoco(prices = [10, 5, 6], money = 11)",
        "buyChoco(prices = [5, 6, 8], money = 13)"
    ],
    "sample_259": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [5,4,3,2,1])",
        "minimumSum(nums = [1,2,3,4])",
        "minimumSum(nums = [1,2,3,2,1])",
        "minimumSum(nums = [5, 3, 2, 1, 4])",
        "minimumSum(nums = [3, 4, 2, 1, 5])",
        "minimumSum(nums = [3, 2, 1, 2, 4])",
        "minimumSum(nums = [1,3,5,2,1])",
        "minimumSum(nums = [2,5,1,8,0,6,5,4,2])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 3, 5, 7, 9])",
        "alternatingSubarray(nums = [1, 3, 5, 7, 9])",
        "alternatingSubarray(nums = [1, 3, 5, 7, 9])",
        "alternatingSubarray(nums = [10, 9, 8, 7, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 7, 6, 5])",
        "alternatingSubarray(nums = [1, 0, 1, 0, 1, 0])",
        "alternatingSubarray(nums = [5, 3, 2, 4, 1])",
        "alternatingSubarray(nums = [1, 0, 1, 0, 1, 0, 1])",
        "alternatingSubarray(nums = [1, 3, 5, 2, 3, 4, 7])",
        "alternatingSubarray(nums = [10, 14, 9, 11, 14, 15])"
    ],
    "sample_311": [
        "matrixSum(nums = [[0, 1], [2, 3]])",
        "matrixSum(nums = [[0, 1]])",
        "matrixSum(nums = [[0, 1]])",
        "matrixSum(nums = [[1, 2], [3, 0]])",
        "matrixSum(nums = [[0,1],[1,0]])",
        "matrixSum(nums = [[0, 0, 1], [0, 0, 0], [1, 0, 0]])",
        "matrixSum(nums = [[1, 1, 0], [0, 1, 1]])",
        "matrixSum(nums = [[0, 1], [0, 1]])",
        "matrixSum(nums = [[0, 0, 1], [1, 0, 0], [0, 1, 0]])",
        "matrixSum(nums = [[0,1,1],[1,0,1],[1,1,0]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 2, 3], money = 3)",
        "buyChoco(a = [5, 5], money = 10)",
        "buyChoco(a = [5, 5], money = 10)",
        "buyChoco(a = [2, 3], money = 5)",
        "buyChoco(a = [2, 3], money = 5)",
        "buyChoco(a = [1, 2, 3], money = 5)",
        "buyChoco(a = [1, 2], money = 4)",
        "buyChoco(a = [5, 5, 5], money = 10)",
        "buyChoco(a = [5, 5, 5], money = 10)",
        "buyChoco(a = [10, 20, 5], money = 30)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [3, 3, 2, 2, 1, 1])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [4, 5, 6, 7])",
        "minGroupsForValidAssignment(nums = [3, 1, 1, 2, 2, 1])",
        "minGroupsForValidAssignment(nums = [4, 4, 2, 2])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 1, 1])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 4, 5, 5, 5, 5])"
    ],
    "sample_276": [
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 1], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0, 1], [1, 0, 1, 0], [0, 1, 0, 1], [1, 1, 1, 0]])"
    ],
    "sample_320": [
        "maxStrength(nums = [2, 3, 5, 6])",
        "maxStrength(nums = [2, 3, 5, 6])",
        "maxStrength(nums = [2, 3, 5, 6])",
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 5])",
        "maxStrength(nums = [1, 2, 4, 5, 10])",
        "maxStrength(nums = [1, 2, 4, 5, 8])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [2, 3, 4, 5, 6])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\", \"d\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\", \"d\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\", \"d\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"hello\", \"world\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\", \"gh\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"ab\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"ab\", \"abc\"])",
        "minimizeConcatenatedLength(words = [\"aba\",\"a\",\"b\"])"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"ab\")",
        "findMinimumOperations(s1=\"abcd\", s2=\"abcd\", s3=\"abcd\")",
        "findMinimumOperations(s1=\"hello\", s2=\"world\", s3=\"hellworld\")"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 7, 6, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 7, 6, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, -1, 2, -3, 3])",
        "alternatingSubarray(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 7, 8, 9, 10])"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0], [0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])"
    ],
    "sample_304": [
        "countSeniors(details = [\"Alice_25_F\", \"Bob_55_M\", \"Charlie_19_M\"])",
        "countSeniors(details = [\"01/01/1950\", \"02/02/1970\", \"03/03/1990\"])",
        "countSeniors(details = [\"John,35,Engineer\", \"Anna,55,Doctor\", \"Peter,18,Student\"])",
        "countSeniors(details = [\"001012345678\", \"002023456789\", \"003033456789\"])",
        "countSeniors(details = [\"01/01/1940\", \"01/01/1970\", \"01/01/1990\"])",
        "countSeniors(details = [\"Alice_25_1234\", \"Bob_55_5678\", \"Carol_33_9101\"])",
        "countSeniors(details = [\"001051974Alice\", \"001062000Bob\", \"001051985Charlie\"])",
        "countSeniors(details = [\"000102030405\", \"000203040506\", \"000304050607\"])",
        "countSeniors(details = [\"2000-01-01\", \"1955-08-15\", \"1978-02-21\"])",
        "countSeniors(details = [\"200102011991\", \"200203021985\", \"200304031979\"])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"beautiful\", k = 3)",
        "beautifulSubstrings(s = \"beautiful\", k = 3)",
        "beautifulSubstrings(s = \"abacadaeaf\", k = 3)",
        "beautifulSubstrings(s = \"abacadaeaf\", k = 3)",
        "beautifulSubstrings(s = \"abacadaeaf\", k = 3)",
        "beautifulSubstrings(s = \"abacadaeaf\", k = 3)",
        "beautifulSubstrings(s = \"abacadaeaf\", k = 3)",
        "beautifulSubstrings(s = \"abba\", k = 1)",
        "beautifulSubstrings(s = \"aeiouaaei\", k = 3)",
        "beautifulSubstrings(s = \"baaaba\", k = 3)"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = '1101', k = 2)",
        "shortestBeautifulSubstring(s = \"1101\", k = 2)",
        "shortestBeautifulSubstring(s = '11101', k = 2)",
        "shortestBeautifulSubstring(s = \"110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110\", k = 2)",
        "shortestBeautifulSubstring(s = \"11001\", k = 2)",
        "shortestBeautifulSubstring(s = '0111', k = 2)",
        "shortestBeautifulSubstring(s = \"1110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s = '110110011', k = 2)",
        "shortestBeautifulSubstring(s = \"1110011\", k = 3)"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"a\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"ab\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"ab\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"ab\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"bb\", \"ccc\"])",
        "minimizeConcatenatedLength(words=[\"a\", \"ab\"])",
        "minimizeConcatenatedLength(words = [\"ca\", \"bb\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"ba\", \"nana\"])",
        "minimizeConcatenatedLength(words=[\"ca\", \"ab\", \"ba\"])"
    ],
    "sample_327": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 46)",
        "isFascinating(n = 567)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1], [0]])",
        "matrixSum(nums = [[1], [0]])",
        "matrixSum(nums = [[1, 2], [3, 0]])",
        "matrixSum(nums = [[0, 1]])",
        "matrixSum(nums = [[0, 1]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1], [2]])"
    ],
    "sample_326": [
        "isFascinating(n = 12)",
        "isFascinating(n = 12)",
        "isFascinating(n = 12)",
        "isFascinating(n = 12)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 1)"
    ],
    "sample_275": [
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 1, 1], [0, 1, 1], [1, 1, 1]])"
    ],
    "sample_260": [
        "minimumSum(nums = [3, 2, 5, 1, 4])",
        "minimumSum(nums = [3, 1, 4, 2])",
        "minimumSum(nums = [2, 5, 1, 8])",
        "minimumSum(nums = [1, 5, 3, 4, 2])",
        "minimumSum(nums = [2, 4, 6, 1])",
        "minimumSum(nums = [10, 4, 2, 5, 1])",
        "minimumSum(nums = [4, 2, 9, 1, 4, 8, 3, 6])",
        "minimumSum(nums = [10, 2, 11, 3])",
        "minimumSum(nums = [3, 1, 3, 1, 1])",
        "minimumSum(nums = [2, 3, 5, 9, 8, 4])"
    ],
    "sample_322": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123456)",
        "isFascinating(n = 123456)",
        "isFascinating(n = 199)",
        "isFascinating(n = 456)",
        "isFascinating(n = 192850)"
    ],
    "sample_248": [
        "minOperations(s1 = \"1100\", s2 = \"0011\", x = 2)",
        "minOperations(s1 = \"1100\", s2 = \"0011\", x = 2)",
        "minOperations(s1 = \"110\", s2 = \"001\", x = 2)",
        "minOperations(s1 = \"110\", s2 = \"101\", x = 1)",
        "minOperations(s1 = \"0101\", s2 = \"1110\", x = 2)",
        "minOperations(s1 = \"10110\", s2 = \"01011\", x = 2)",
        "minOperations(s1 = \"1101\", s2 = \"0111\", x = 2)",
        "minOperations(s1 = \"110\", s2 = \"111\", x = 2)",
        "minOperations(s1 = \"0100\", s2 = \"0010\", x = 1)",
        "minOperations(s1 = \"0000\", s2 = \"0001\", x = 1)"
    ],
    "sample_342": [
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 3, y = 3, z = 1)",
        "longestString(x = 3, y = 3, z = 1)",
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(x = 3, y = 4, z = 1)",
        "longestString(x = 2, y = 3, z = 2)",
        "longestString(x = 1, y = 2, z = 5)",
        "longestString(x = 2, y = 1, z = 1)"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [10])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [8])",
        "relocateMarbles(nums = [4, 5, 6, 7, 8, 9], moveFrom = [4, 7], moveTo = [1, 2])",
        "relocateMarbles(nums = [4, 5, 6, 7, 8, 9], moveFrom = [4, 7], moveTo = [1, 2])",
        "relocateMarbles(nums = [4, 5, 6, 7], moveFrom = [4, 7], moveTo = [8, 9])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 2, 3, 4, 7], moveTo = [5, 6, 8, 9, 10])",
        "relocateMarbles(nums = [4, 5, 6, 7, 8, 9], moveFrom = [4, 7], moveTo = [8, 9])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3, 4, 7], moveTo = [5, 6, 8, 9])",
        "relocateMarbles(nums = [4, 5, 6, 8, 9], moveFrom = [4, 6], moveTo = [1, 2])",
        "relocateMarbles(nums = [5, 6, 8, 9, 10], moveFrom = [10], moveTo = [9])"
    ],
    "sample_306": [
        "countSeniors(details = [\"Alice, 25\", \"Bob, 55\", \"Charlie, 15\"])",
        "countSeniors(details = [\"John, 32\", \"Alice, 65\", \"Bob, 25\"])",
        "countSeniors(details = [\"Name: John, Age: 65\", \"Name: Mike, Age: 45\"])",
        "countSeniors(details = [\"Name: John Age: 65\", \"Name: Alice Age: 25\", \"Name: Bob Age: 70\"])",
        "countSeniors(details = [\"123456789012Tom\", \"234567890123Jerry\", \"345678901234Batman\"])",
        "countSeniors(details = [\"John,32\", \"Alice,45\", \"Bob,75\"])",
        "countSeniors(details = [\"John,25\", \"Anna,35\", \"Mike,67\", \"Laura,45\"])",
        "countSeniors(details = [\"Alice,25,Engineer\",\"Bob,75,Doctor\",\"Charlie,35,Teacher\"])",
        "countSeniors(details = [\"Alice,35,123456\", \"Bob,45,987654\", \"Charlie,70,246813\"])",
        "countSeniors(details = [\"John Doe,35\", \"Jane Doe,62\", \"Mary Smith,28\"])"
    ],
    "sample_303": [
        "countSeniors(details = [\"Alice_25_F\", \"Bob_45_M\", \"Charlie_65_M\", \"David_35_M\"])",
        "countSeniors(details = [\"Alice_45\", \"Bob_55\", \"Charlie_65\"])",
        "countSeniors(details = [\"Alice_25_F\", \"Bob_35_M\", \"Charlie_75_M\", \"David_45_M\"])",
        "countSeniors(details = [\"Alice45F\", \"Bob60M\", \"Carol30F\", \"David22M\"])",
        "countSeniors(details = [\"John,35,Developer\",\"Rose,62,Manager\",\"Smith,28,Analyst\"])",
        "countSeniors(details = [\"Alan, 23\", \"Sophie, 56\", \"Emma, 34\"])",
        "countSeniors(details = [\"Adam,35\", \"Bella,42\", \"Cathy,70\", \"David,18\"])",
        "countSeniors(details = [\"John1985\", \"Anna35\", \"Bob55\", \"Claire65\", \"David45\"])",
        "countSeniors(details = [\"John_25\", \"Alan_67\", \"Kate_32\", \"Sam_70\"])",
        "countSeniors(details = [\"Mike34\", \"John67\", \"Anna56\", \"Sara22\"])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 2, 3, 4], moveTo = [5, 6, 7, 8])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [8])",
        "relocateMarbles(nums = [5, 7, 8, 9], moveFrom = [7, 9], moveTo = [6, 8])",
        "relocateMarbles(nums = [4, 5, 6, 8, 9], moveFrom = [4, 6], moveTo = [7, 8])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 9], moveTo = [6, 8])",
        "relocateMarbles(nums = [4, 6, 8, 9], moveFrom = [4, 8], moveTo = [5, 7])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3], moveTo = [9, 7])",
        "relocateMarbles(nums = [1, 2, 5, 7, 8, 9], moveFrom = [1, 7], moveTo = [3, 4])",
        "relocateMarbles(nums = [1, 2, 5, 7, 8], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [1, 4, 5, 6, 8, 9], moveFrom = [1, 4, 9], moveTo = [5, 7, 10])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abe\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"gh\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"de\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"efg\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"abc\", s3 = \"adc\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"abc\", s3 = \"def\")",
        "findMinimumOperations(s1 = \"hello\", s2 = \"world\", s3 = \"python\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"nana\", s3 = \"ana\")",
        "findMinimumOperations(s1 = \"apple\", s2 = \"orange\", s3 = \"watermelon\")"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6, 7])",
        "continuousSubarrays(a = [2, 1, 3, 1, 2])",
        "continuousSubarrays(a = [2, 1, 3, 3, 4, 7])",
        "continuousSubarrays(a = [3, 2, 1, 4, 2, 5, 1])",
        "continuousSubarrays(a = [0, 1, 1, 2, 2, 2])",
        "continuousSubarrays(a = [1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(nums = [4, 2, 5, 3, 1, 6, 7])",
        "continuousSubarrays(nums = [2, 5, 3, 1, 2, 4, 7])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(nums = [4, 2, 1, 6, 3, 7])",
        "continuousSubarrays(nums = [2, 3, 4, 6, 7, 8, 9])",
        "continuousSubarrays(nums = [4, 2, 5, 3, 7, 6, 1, 1, 4, 2])"
    ],
    "sample_8": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 2, queries = [[1, 1]])",
        "colorTheArray(n = 3, queries = [[1, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 1], [2, 1]])",
        "colorTheArray(n=2, queries=[[0, 1], [1, 2], [0, 1]])",
        "colorTheArray(n = 2, queries = [[1, 2], [0, 1]])",
        "colorTheArray(n=3, queries=[[0, 1], [2, 1], [1, 0], [1, 1]])"
    ],
    "sample_97": [
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 3)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 3)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 3)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [1], target = 0)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 0)",
        "maximumJumps(nums = [1], target = 10)"
    ],
    "sample_22": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ACB\")",
        "minLength(s = \"ACBAD\")",
        "minLength(s = \"ACBAD\")",
        "minLength(s = \"ACBAD\")",
        "minLength(s = \"ACBD\")",
        "minLength(s = \"CDAB\")",
        "minLength(s = \"CDAB\")",
        "minLength(s = \"ACDF\")",
        "minLength(s = \"ACBDE\")"
    ],
    "sample_7": [
        "colorTheArray(n = 2, queries = [[1, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 1], [3, 1]])",
        "colorTheArray(n = 3, queries = [[1, 2], [2, 2], [3, 1]])",
        "colorTheArray(n=3, queries=[[1, 1], [2, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 1], [1, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1]])",
        "colorTheArray(n = 3, queries = [[1, 2], [2, 2]])",
        "colorTheArray(n = 2, queries = [[1, 1], [1, 2]])",
        "colorTheArray(n=2, queries=[[]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 2]])"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [4, 0], [5, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 1], [3, 2], [4, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 1], [3, 2], [4, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [4, 0], [5, 0]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [3, 0], [4, 1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 1], [4, 2], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [4, 2], [5, 3]])",
        "colorTheArray(n=5, queries=[[1, 1], [2, 1], [3, 1], [4, 1], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [4, 0], [0, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 2], [3, 3], [4, 1]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [3,1,4,2])",
        "semiOrderedPermutation(nums = [3, 1, 4, 2])",
        "semiOrderedPermutation(nums = [2,1,5,4,3])",
        "semiOrderedPermutation(nums = [3,2,4,1,5])",
        "semiOrderedPermutation(nums = [3,2,4,1,5])",
        "semiOrderedPermutation(nums = [4,3,2,1])",
        "semiOrderedPermutation(nums = [0, 1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [3,4,2,1,5])",
        "semiOrderedPermutation(nums = [3,4,2,1,5])",
        "semiOrderedPermutation(nums = [2,3,1,4,5,6,7])"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 6)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 6)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 8)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 2, 5, 6], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8], threshold = 7)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 2, 5], threshold = 6)",
        "longestAlternatingSubarray(nums = [3, 3, 5, 4, 2, 7, 2, 3], threshold = 6)"
    ],
    "sample_33": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = '51230100')"
    ],
    "sample_50": [
        "smallestString(s = \"aaab\")",
        "smallestString(s = \"aaab\")",
        "smallestString(s = \"abac\")",
        "smallestString(s = \"abac\")",
        "smallestString(s = 'aaab')",
        "smallestString(s = 'abab')",
        "smallestString(s = \"abab\")",
        "smallestString(s = \"abaac\")",
        "smallestString(s = 'aabab')",
        "smallestString(s = \"ababa\")"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5])",
        "distinctDifferenceArray(nums = [0, 1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3, 4, 4])"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 4, additionalTank = 0)",
        "distanceTraveled(mainTank = 4, additionalTank = 0)",
        "distanceTraveled(mainTank = 20, additionalTank = 2)"
    ],
    "sample_118": [
        "minimumIndex(nums = [1, 0, 1, 1, 0, 1])",
        "minimumIndex(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 1])",
        "minimumIndex(nums = [1, 2, 1, 1, 3, 4, 1])",
        "minimumIndex(nums = [2, 1, 2, 1, 2])",
        "minimumIndex(nums = [4, 1, 2, 3, 2, 5, 2])",
        "minimumIndex(nums = [1, 2, 2, 1, 3, 2, 1])",
        "minimumIndex(nums = [4, 4, 5, 3, 2, 2, 1])",
        "minimumIndex(nums = [0, 1, 2, 0, 1, 0, 1, 0, 2])",
        "minimumIndex(nums = [4, 2, 2, 5, 1, 2, 3, 2])"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [123, 234])",
        "countBeautifulPairs(nums = [12, 34])",
        "countBeautifulPairs(nums = [123, 45])",
        "countBeautifulPairs(nums = [123, 456])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56])",
        "countBeautifulPairs(nums = [12, 34, 45, 67, 89])",
        "countBeautifulPairs(nums = [123, 45, 156, 789])",
        "countBeautifulPairs(nums = [123, 345, 23, 1])",
        "countBeautifulPairs(nums = [123, 345, 789, 341])",
        "countBeautifulPairs(nums = [23, 43, 14, 27, 39, 47, 11, 50])"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"aabbbcc\")",
        "minimizedStringLength(s = \"aabbbcc\")",
        "minimizedStringLength(s = \"aabbbcc\")",
        "minimizedStringLength(s = \"aabcc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"aabbbc\")",
        "minimizedStringLength(s = \"aabbcc\")",
        "minimizedStringLength(s = \"aabbcc\")",
        "minimizedStringLength(s = \"aabbcc\")",
        "minimizedStringLength(s = \"aabbb\")"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 4, 5, 6], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 5, 11, 13], k = 1)",
        "maximumBeauty(nums = [1, 3, 4, 6, 7], k = 3)",
        "maximumBeauty(nums = [1, 2, 4, 5, 6, 7, 8, 9], k = 3)",
        "maximumBeauty(nums = [1, 5, 3, 9, 11, 12, 17], k = 2)",
        "maximumBeauty(nums = [1, 2, 4, 7, 7, 7, 12, 12, 13], k = 2)"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 9, num2 = 4)",
        "makeTheIntegerZero(num1 = 9, num2 = 4)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 6)",
        "makeTheIntegerZero(num1 = 37, num2 = 5)",
        "makeTheIntegerZero(num1 = 35, num2 = 17)",
        "makeTheIntegerZero(num1 = 27, num2 = 10)"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [3, 1, 2])",
        "findValueOfPartition(nums = [3, 1, 4, 1, 5, 9])",
        "findValueOfPartition(nums = [1, 2, 4, 7])",
        "findValueOfPartition(nums = [1, 2, 4, 7, 8])",
        "findValueOfPartition(nums = [2, 1, 3, 1])",
        "findValueOfPartition(nums = [2, 5, 2, 3, 1, 2])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 7, additionalTank = 1)",
        "distanceTraveled(mainTank = 6, additionalTank = 1)",
        "distanceTraveled(mainTank = 6, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 7, additionalTank = 2)",
        "distanceTraveled(mainTank = 7, additionalTank = 0)",
        "distanceTraveled(mainTank = 7, additionalTank = 0)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [0, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0, 1, 1])"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"nven\")",
        "makeSmallestPalindrome(s = \"nven\")",
        "makeSmallestPalindrome(s = \"nev\")",
        "makeSmallestPalindrome(s = \"enve\")",
        "makeSmallestPalindrome(s = 'neven')"
    ],
    "sample_110": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [2, 1, 1, 2], k = 2)",
        "checkArray(nums = [0, 0, 0, 0, 0], k = 1)",
        "checkArray(nums = [10, 10, 1], k = 2)",
        "checkArray(nums = [2, 1, 1], k = 1)",
        "checkArray(nums = [2, 1, 3], k = 1)",
        "checkArray(nums = [10, -2, -3, 8, -5], k = 3)",
        "checkArray(nums = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6], k = 3)",
        "checkArray(nums = [2, 5, 2, 8, 6], k = 2)",
        "checkArray(nums = [10, 2, 3, 4, 5, 11], k = 3)"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 0, 1, 1])"
    ],
    "sample_54": [
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = 'kdebsncd')",
        "smallestString(s = 'kdeebncd')",
        "smallestString(s = 'kdeeebncd')",
        "smallestString(s = \"kddsbncde\")",
        "smallestString(s = 'kddsbcda')",
        "smallestString(s = \"kdeedbnce\")",
        "smallestString(s = \"kddsbcdd\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1])",
        "continuousSubarrays(A = [2, 2, 2, 2, 2, 2])",
        "continuousSubarrays(A = [2, 2, 2, 2, 2, 2])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3])",
        "continuousSubarrays(A = [2, 2, 2, 1, 2, 2])",
        "continuousSubarrays(A = [2, 2, 2, 3, 3, 3, 1, 1, 2, 2])",
        "continuousSubarrays(A = [2, 2, 3, 1, 2])",
        "continuousSubarrays(A = [1, 2, 1, 2, 3, 4])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = 'abac')",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = 'baa')",
        "makeSmallestPalindrome(s = \"azby\")",
        "makeSmallestPalindrome(s = \"abdba\")"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [0, 1, 2, 3])",
        "findValueOfPartition(nums = [3, 5, 6, 8])",
        "findValueOfPartition(nums = [2, 3, 5, 7])",
        "findValueOfPartition(nums = [2, 3, 4])",
        "findValueOfPartition(nums = [1, 3, 4, 8, 9])",
        "findValueOfPartition(nums = [1, 2, 3, 5, 7, 9])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "findValueOfPartition(nums = [2, 4, 7])",
        "findValueOfPartition(nums = [1, 3, 5, 6])"
    ],
    "sample_51": [
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kdebsnce')",
        "smallestString(s = 'kdebsnce')",
        "smallestString(s = 'kdebsnce')",
        "smallestString(s = 'kdeebnce')",
        "smallestString(s = 'kdedsbncd')",
        "smallestString(s = 'kdffbncd')",
        "smallestString(s = \"kddsbnd\")",
        "smallestString(s = \"kdder\")"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 3, 2, 5, 2, 3, 7], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 2, 5, 2, 3, 7], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9, 11, 13, 15], k = 3)",
        "maximumBeauty(nums = [1, 5, 8, 10, 11, 13, 14, 15], k = 3)",
        "maximumBeauty(nums = [2, 3, 5, 12, 13, 17, 20], k = 3)",
        "maximumBeauty(nums = [1, 3, 4, 5, 6, 8, 9, 12, 15], k = 2)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "checkArray(nums = [2, 3, 1, 2, 4, 3], k = 3)",
        "checkArray(nums = [1, 2, 3, 2, 5, 6], k = 3)",
        "checkArray(nums = [3, 1, 4, 2, 2, 3], k = 3)"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 6, additionalTank = 1)",
        "distanceTraveled(mainTank = 7, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 4, additionalTank = 0)",
        "distanceTraveled(mainTank = 15, additionalTank = 3)",
        "distanceTraveled(mainTank = 20, additionalTank = 2)",
        "distanceTraveled(mainTank = 11, additionalTank = 1)"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 2, 1, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 1, 3])",
        "distinctDifferenceArray(nums = [1, 1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [2, 2, 1, 3, 3])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3])",
        "continuousSubarrays(A = [2, 1, 3, 2, 5, 3])",
        "continuousSubarrays(A = [1, 2, 1, 2, 1, 2])",
        "continuousSubarrays(A = [1,2,3,4,5,6])",
        "continuousSubarrays(A = [1,2,3,1,2,3,1])",
        "continuousSubarrays(A = [3, 2, 3, 1, 2, 2, 1])",
        "continuousSubarrays(A = [1,3,2,1,4,2,2,1])",
        "continuousSubarrays(A = [2, 1, 2, 2, 3, 1, 2, 2, 3, 2])"
    ],
    "sample_6": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 2, queries = [[0, 1]])",
        "colorTheArray(n = 3, queries = [[0,1]])",
        "colorTheArray(n = 2, queries = [[1,1]])",
        "colorTheArray(n = 2, queries = [[1, 2]])"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 12, b = 3)",
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 15, b = 3)",
        "makeTheIntegerZero(a = 20, b = 3)",
        "makeTheIntegerZero(a = 123, b = 45)",
        "makeTheIntegerZero(a = 6, b = 2)",
        "makeTheIntegerZero(a = 30, b = 10)",
        "makeTheIntegerZero(a = 11, b = 3)",
        "makeTheIntegerZero(a = 29, b = 7)",
        "makeTheIntegerZero(a = 345, b = 7)"
    ],
    "sample_100": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [2, 1, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [1, 3, 2, 1, 4], target = 2)",
        "maximumJumps(nums = [1, 3, 2, 1, 4], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 7, 9], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 10, 15], target = 4)",
        "maximumJumps(nums = [1, 2, 3, 1, 2, 3, 1], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [4, 1, 6, 1, 1, 1, 6], target = 2)"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8], threshold = 6)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 2, 4], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 3, 4, 2, 5, 6], threshold = 7)",
        "longestAlternatingSubarray(nums = [2, 1, 4, 3, 2, 3], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 1, 4, 3, 5, 6, 7, 8], threshold = 4)",
        "longestAlternatingSubarray(nums=[1, 3, 2, 5, 4], threshold=4)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 1, 3, 3, 1, 2, 2, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [3, 2, 5, 6, 6, 1], threshold = 6)",
        "longestAlternatingSubarray(nums = [2, 5, 3, 1, 4, 7, 5, 8], threshold = 6)",
        "longestAlternatingSubarray(nums = [2, 4, 1, 3, 2, 2, 3, 1, 2], threshold = 3)"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [2, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [2, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1, 3, 2, 5, 4], b = [2, 4, 3, 5, 1])",
        "maxNonDecreasingLength(a = [3, 2, 6, 4, 5, 1], b = [2, 3, 5, 1, 4, 6])",
        "maxNonDecreasingLength(a = [1, 5, 3, 7, 9], b = [2, 6, 4, 8, 10])",
        "maxNonDecreasingLength(a = [1, 2, 3, 2, 3, 4, 3], b = [2, 3, 4, 1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [3, 5, 7, 9, 12, 13, 15, 16], b = [2, 4, 6, 8, 10, 11, 14, 17])",
        "maxNonDecreasingLength(a = [2, 5, 3, 1, 7], b = [3, 6, 4, 8, 5])",
        "maxNonDecreasingLength(a = [1, 4, 2, 5], b = [2, 1, 3, 6])",
        "maxNonDecreasingLength(a = [3, 4, 9, 1, 12, 5, 6], b = [5, 6, 7, 1, 10, 8, 12])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums=[0, 1, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums=[1, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0])"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [1, 1], threshold = 1)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 1, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [0, 1, 2, 3, 4, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 1, 2, 1, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 3, 5], threshold = 10)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 1], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 5, 6, 1], threshold = 6)",
        "longestAlternatingSubarray(nums = [2, 5, 4, 3], threshold = 5)",
        "longestAlternatingSubarray(nums = [10, 3, 4, 2, 8], threshold = 4)"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 2, 3, 5])",
        "findValueOfPartition(nums = [2, 3, 5])",
        "findValueOfPartition(nums = [2, 3, 5])",
        "findValueOfPartition(nums = [3, 2, 1])",
        "findValueOfPartition(nums = [1, 3, 4])",
        "findValueOfPartition(nums = [1, 2, 3, 5, 6])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 6])",
        "findValueOfPartition(nums = [1, 2, 3, 5, 7, 8])",
        "findValueOfPartition(nums = [3, 2, 1, 4, 7])",
        "findValueOfPartition(nums=[1,2,3,5,7])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"bab\")",
        "makeSmallestPalindrome(s = \"bab\")",
        "makeSmallestPalindrome(s = \"abac\")",
        "makeSmallestPalindrome(s = \"abcba\")",
        "makeSmallestPalindrome(s = \"abccba\")",
        "makeSmallestPalindrome(s = \"abcdcba\")",
        "makeSmallestPalindrome(s = \"abab\")",
        "makeSmallestPalindrome(s = \"bac\")"
    ],
    "sample_18": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABCDAB\")"
    ],
    "sample_99": [
        "maximumJumps(nums = [1], target = 0)",
        "maximumJumps(nums = [2, 1, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1, 2, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 8, 10], target = 2)",
        "maximumJumps(nums = [2, 1, 1, 0, 2], target = 1)",
        "maximumJumps(nums = [3, 1, 2, 2, 0, 1, 2], target = 2)",
        "maximumJumps(nums = [1, 3, 3, 1, 2], target = 0)",
        "maximumJumps(nums = [1, 3, 2, 1, 4, 1, 1, 3, 1, 1, 1, 2, 1, 3, 4, 1], target = 2)"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [4, 1], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 2], [4, 1], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [2, 2], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 2], [4, 1], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [3, 0], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [1, 0], [2, 0]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [1, 2], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [1, 2], [5, 1]])",
        "colorTheArray(n = 4, queries = [[1, 1], [3, 2], [2, 2], [1, 0], [3, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [3, 1], [5, 1], [4, 0], [2, 0]])"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 0)",
        "distanceTraveled(mainTank = 4, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 7, additionalTank = 1)",
        "distanceTraveled(mainTank=3, additionalTank=0)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 34, 56, 78, 90])",
        "countBeautifulPairs(nums = [12, 34, 56, 78, 90])",
        "countBeautifulPairs(nums = [123, 234])",
        "countBeautifulPairs(nums = [123, 456, 789, 987])",
        "countBeautifulPairs(nums = [23, 24, 26, 27])",
        "countBeautifulPairs(nums = [23, 24, 25, 26, 27, 28, 29])",
        "countBeautifulPairs(nums = [44, 30, 33, 55])",
        "countBeautifulPairs(nums = [23, 34, 26, 74, 79])"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 3)",
        "minCost(A = [4, 5, 6], x = 3)",
        "minCost(A = [3, 5, 7], x = 2)",
        "minCost(A = [2, 3, 4], x = 2)",
        "minCost(A = [3, 1, 1, 3, 2, 1], x = 2)",
        "minCost(A = [2, 3, 5, 7], x = 2)",
        "minCost(A = [3, 4, 2], x = 2)",
        "minCost(A = [3, 2, 1, 5, 4], x = 2)",
        "minCost(A = [4, 6, 6, 4, 2, 2, 4, 6, 4, 6], x = 3)"
    ],
    "sample_98": [
        "maximumJumps(nums = [1, 2, 3, 1], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 1], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [1,2,3,4,5,6,7,8,9,10], target = 3)",
        "maximumJumps(nums = [1, 3, 2, 1, 4], target = 2)",
        "maximumJumps(nums = [1, 3, 2], target = 1)",
        "maximumJumps(nums = [1,2,3,1], target = 1)",
        "maximumJumps(nums = [1, 3, 2, 5, 4], target = 2)",
        "maximumJumps(nums = [1, 3, 1, 2, 4, 3], target = 2)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1])",
        "numberOfGoodSubarraySplits(nums=[1, 0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums=[1, 0, 1, 1, 1])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1, 3, 3, 5, 5, 5, 7, 7, 7, 7])",
        "distinctDifferenceArray(nums = [1, 3, 1, 4, 1, 5])",
        "distinctDifferenceArray(nums = [5, 4, 3, 2, 1])",
        "distinctDifferenceArray(nums = [2, 1, 2, 1, 3])",
        "distinctDifferenceArray(nums = [0, 1, 2, 0, 1, 2, 0, 1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 3, 2, 5])",
        "distinctDifferenceArray(nums = [2, 1, 2, 2, 3, 1])",
        "distinctDifferenceArray(nums = [10, 10, 11, 11, 11, 11, 12, 12, 12, 12])",
        "distinctDifferenceArray(nums = [3, 2, 5, 3, 2, 7, 5, 7, 2])",
        "distinctDifferenceArray(nums = [4, 9, 6, 5, 4, 1, 0])"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56])",
        "countBeautifulPairs(nums = [123, 234, 345, 456, 567])",
        "countBeautifulPairs(nums=[13, 24, 35, 46, 57])",
        "countBeautifulPairs(nums=[123, 245, 357, 469, 512])",
        "countBeautifulPairs(nums = [123, 456, 124, 357, 890])",
        "countBeautifulPairs(nums = [34, 23, 12, 56, 67])",
        "countBeautifulPairs(nums = [4321, 2345, 9876, 5432, 1234])",
        "countBeautifulPairs(nums = [231, 324, 253, 123, 352])",
        "countBeautifulPairs(nums = [42, 51, 43, 61, 92])",
        "countBeautifulPairs(nums = [47, 15, 27, 12, 39])"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"aabbbcc\")",
        "minimizedStringLength(s = \"aabbbcc\")",
        "minimizedStringLength(s = \"aabbbcc\")",
        "minimizedStringLength(s = \"aabbbcc\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"aaabbb\")",
        "minimizedStringLength(s = \"aaabbb\")",
        "minimizedStringLength(s = \"aaabbb\")",
        "minimizedStringLength(s = \"abcabcabc\")",
        "minimizedStringLength(s = \"aabbbcdd\")"
    ],
    "sample_41": [
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"caab\")",
        "minimumCost(s = \"caab\")",
        "minimumCost(s = \"abcac\")",
        "minimumCost(s = \"aabac\")",
        "minimumCost(s = \"aabb\")",
        "minimumCost(s = \"caad\")"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 2, 1, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 1, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [2, 1, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 4])",
        "distinctDifferenceArray(nums = [1, 3, 1, 2, 1])",
        "distinctDifferenceArray(nums = [2, 1, 1, 2, 3, 3, 3])",
        "distinctDifferenceArray(nums = [2, 3, 1, 2, 3])"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [1, 1, 2, 2])",
        "doesValidArrayExist(derived = [1, 1, 2, 2])",
        "doesValidArrayExist(derived = [1, 1, 2, 2])",
        "doesValidArrayExist(derived = [0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 0, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 2, 3, 5, 8, 13, 21])"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 2, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 1])"
    ],
    "sample_52": [
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbndd')",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = 'kdebsnce')",
        "smallestString(s = 'kddsbcncd')",
        "smallestString(s = \"kddsbcncd\")",
        "smallestString(s = 'kddebcd')",
        "smallestString(s = 'kddsbezd')",
        "smallestString(s = \"kddsbcdd\")"
    ],
    "sample_40": [
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"abcac\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"caab\")",
        "minimumCost(s = \"caab\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"ACCA\")",
        "minimumCost(s = \"ABABA\")"
    ],
    "sample_38": [
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"caab\")",
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"BABA\")",
        "minimumCost(s = \"aabac\")",
        "minimumCost(s = \"abacadaeaf\")",
        "minimumCost(s = \"ACCA\")",
        "minimumCost(s = \"abcabc\")"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 2])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3])",
        "distinctDifferenceArray(nums = [2, 2, 1, 3, 4])",
        "distinctDifferenceArray(nums = [1, 1, 2, 3, 4, 4, 4])",
        "distinctDifferenceArray(nums = [3, 2, 1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [2, 1, 1, 3, 4, 5])"
    ],
    "sample_53": [
        "smallestString(s = \"baazc\")",
        "smallestString(s = 'baazc')",
        "smallestString(s = 'baabd')",
        "smallestString(s = \"baacd\")",
        "smallestString(s = 'baacd')",
        "smallestString(s = \"baaz\")",
        "smallestString(s = 'baccd')",
        "smallestString(s = \"baadc\")",
        "smallestString(s = 'bzaac')",
        "smallestString(s = \"bacab\")"
    ],
    "sample_109": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums=[1, 2, 3, 4, 5], k=2)",
        "checkArray(nums = [1, 3, 1, 2, 1], k = 2)",
        "checkArray(nums = [3, 1, 2], k = 1)",
        "checkArray(nums = [2, 3, 4, 1], k = 1)",
        "checkArray(nums = [2, 2, 3, 1, 2], k = 2)",
        "checkArray(nums = [10, 7, 5, 4, 2, 1], k = 2)",
        "checkArray(nums = [2, 3, 4, 2, 5, 3], k = 2)",
        "checkArray(nums = [2, 4, 1, 3, 5], k = 1)",
        "checkArray(nums = [5, 3, 4, 2, 1, 6], k = 2)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 3)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 10)",
        "maximumBeauty(nums = [1, 3, 5, 9, 10], k = 2)",
        "maximumBeauty(nums=[1, 3, 5, 9, 12], k=3)",
        "maximumBeauty(nums = [1, 2, 4, 7, 9], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 5, 9, 10], k = 3)",
        "maximumBeauty(nums = [1, 3, 5, 8, 10, 11], k = 1)",
        "maximumBeauty(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], k=1)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 2, 3, 4, 4, 4])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "distinctDifferenceArray(a = [1, 2, 3, 1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5, 1, 2, 3])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1, 0])",
        "distinctDifferenceArray(a = [1, 2, 2, 3, 4, 5, 6, 7])",
        "distinctDifferenceArray(a = [2, 3, 5, 2, 3])",
        "distinctDifferenceArray(a = [1, 2, 2, 1, 3, 4])",
        "distinctDifferenceArray(a = [5, 3, 2, 1, 0])",
        "distinctDifferenceArray(a = [2, 1, 2, 3, 4, 3])"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '51230000')",
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '5123000')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'evenn')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"nevv\")",
        "makeSmallestPalindrome(s = \"noeven\")",
        "makeSmallestPalindrome(s = 'oneven')",
        "makeSmallestPalindrome(s = 'nveen')",
        "makeSmallestPalindrome(s = 'evnn')"
    ],
    "sample_55": [
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = \"kdeebnce\")",
        "smallestString(s = 'kdeebnce')",
        "smallestString(s = 'kdeebnce')",
        "smallestString(s = 'kdeezncd')",
        "smallestString(s = 'kdeezncd')",
        "smallestString(s = 'kddebncd')",
        "smallestString(s = \"kdebnce\")"
    ],
    "sample_35": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = '512301000000')"
    ],
    "sample_23": [
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCDCD\")",
        "minLength(s = \"ABCDABCDABC\")",
        "minLength(s = \"ABCDABCDABC\")",
        "minLength(s = \"ABCDABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCDABCDABCD\")",
        "minLength(s = \"ABCDEFCDAB\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"51230100000\")"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 11, num2 = 2)",
        "makeTheIntegerZero(num1 = 25, num2 = 5)",
        "makeTheIntegerZero(num1 = 17, num2 = 4)",
        "makeTheIntegerZero(num1 = 9, num2 = 3)",
        "makeTheIntegerZero(num1 = 16, num2 = 3)",
        "makeTheIntegerZero(num1 = 30, num2 = 4)",
        "makeTheIntegerZero(num1 = 50, num2 = 10)",
        "makeTheIntegerZero(num1 = 41, num2 = 5)",
        "makeTheIntegerZero(num1 = 55, num2 = 13)"
    ],
    "sample_57": [
        "distanceTraveled(a = 3, b = 2)",
        "distanceTraveled(a = 3, b = 2)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 2, b = 2)",
        "distanceTraveled(a = 1, b = 2)",
        "distanceTraveled(a = 5, b = 2)",
        "distanceTraveled(a = 4, b = 0)",
        "distanceTraveled(a=1, b=1)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 5)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5], t = 5)",
        "longestAlternatingSubarray(nums = [2, 2, 1, 1], t = 2)",
        "longestAlternatingSubarray(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], t = 10)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 7, 9], t = 10)",
        "longestAlternatingSubarray(nums = [5, 3, 6, 1, 2], t = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 1], t = 5)",
        "longestAlternatingSubarray(nums = [5, 4, 1, 3, 2], t = 5)",
        "longestAlternatingSubarray(nums = [3, 1, 4, 2, 5, 2], t = 5)"
    ],
    "sample_102": [
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], target = 1)",
        "maximumJumps(nums = [3, 4, 2], target = 1)",
        "maximumJumps(nums = [3, 4, 1, 2], target = 1)",
        "maximumJumps(nums = [4, 1, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [1, 4, 2, 3, 1, 2], target = 1)",
        "maximumJumps(nums = [4, 1, 3, 2, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 4, 3, 7, 2], target = 1)",
        "maximumJumps(nums = [3, 1, 2, 1, 1], target = 2)",
        "maximumJumps(nums = [2, 1, 1, 1, 1, 1], target = 2)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '51230100')"
    ],
    "sample_101": [
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 2, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 3, 2, 1, 4], target = 2)",
        "maximumJumps(nums = [4, 6, 2, 1, 1], target = 3)",
        "maximumJumps(nums = [1, 3, 4, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 3, 2, 4, 1], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 8, 9, 12], target = 2)",
        "maximumJumps(nums = [3, 1, 2, 2, 0, 1, 2], target = 2)",
        "maximumJumps(nums = [3, 4, 2, 1, 2, 3, 4, 5, 10], target = 2)",
        "maximumJumps(nums = [2, 1, 1, 0, 2, 2], target = 1)"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0])",
        "doesValidArrayExist(derived = [1, 1, 1, 0, 1])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 0, 1, 0])"
    ],
    "sample_19": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = 'evenn')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"oneven\")",
        "makeSmallestPalindrome(s = \"nevene\")",
        "makeSmallestPalindrome(s = \"nineve\")"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [1, 5, 2, 4, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 3, 4, 2])",
        "semiOrderedPermutation(nums = [2, 1, 5, 4, 3])",
        "semiOrderedPermutation(nums = [1, 5, 2, 6, 3, 7, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4, 5, 6, 7])",
        "semiOrderedPermutation(nums=[2, 4, 1, 3])",
        "semiOrderedPermutation(nums = [3,2,4,1,6,5,7])"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums=[1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 2, 3, 1, 2, 3])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums=[1, 0, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums=[1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,1])"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 3)",
        "maximumBeauty(nums = [1, 3, 4, 5, 7, 9, 11, 13], k = 2)",
        "maximumBeauty(nums = [1, 3, 4, 2, 5, 10, 7], k = 3)",
        "maximumBeauty(nums = [1, 5, 6, 10, 11], k = 2)",
        "maximumBeauty(nums = [1, 5, 7, 10, 12, 14, 16], k = 2)",
        "maximumBeauty(nums = [1, 5, 11, 14, 15, 20, 26, 30], k = 5)"
    ],
    "sample_117": [
        "minimumIndex(nums = [3, 3, 1, 3, 2, 3])",
        "minimumIndex(nums = [3, 3, 1, 3, 2, 3])",
        "minimumIndex(nums = [7, 1, 5, 3, 6, 4])",
        "minimumIndex(nums = [3, 3, 2, 1, 2, 2, 2])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumIndex(nums = [1, 2, 2, 3, 4])",
        "minimumIndex(nums = [3, 2, 1, 3, 2])",
        "minimumIndex(nums = [1, 3, 5, 2, 2])",
        "minimumIndex(nums = [3, 1, 2, 3, 4, 2, 2])",
        "minimumIndex(nums = [3, 2, 1, 2, 3, 1, 2, 1, 1])"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 15, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 1)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 13, num2 = 2)",
        "makeTheIntegerZero(num1 = 11, num2 = 2)",
        "makeTheIntegerZero(num1 = 9, num2 = 2)",
        "makeTheIntegerZero(num1 = 18, num2 = 3)",
        "makeTheIntegerZero(num1 = 20, num2 = 1)",
        "makeTheIntegerZero(num1 = 23, num2 = 1)"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [123, 321])",
        "countBeautifulPairs(nums = [123, 234, 345, 456])",
        "countBeautifulPairs(nums = [123, 456, 789])",
        "countBeautifulPairs(nums = [18, 28, 38])",
        "countBeautifulPairs(nums = [123, 456, 789, 321])",
        "countBeautifulPairs(nums = [123, 234, 345, 456, 567])",
        "countBeautifulPairs(nums = [12345, 67890])",
        "countBeautifulPairs(nums = [235, 341, 123])",
        "countBeautifulPairs(nums = [1123, 1234, 2243, 3334, 4444])",
        "countBeautifulPairs(nums = [1124, 521, 215, 1154])"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 11, num2 = 1)",
        "makeTheIntegerZero(num1 = 45, num2 = 5)",
        "makeTheIntegerZero(num1 = 9, num2 = 3)",
        "makeTheIntegerZero(num1 = 9, num2 = 1)",
        "makeTheIntegerZero(num1 = 34, num2 = 17)",
        "makeTheIntegerZero(num1 = 31, num2 = 5)",
        "makeTheIntegerZero(num1 = 100, num2 = 2)",
        "makeTheIntegerZero(num1 = 34, num2 = 5)"
    ],
    "sample_20": [
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABCDEF\")",
        "minLength(s = \"ABAACD\")",
        "minLength(s = \"ABABABCDCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ADABCA\")",
        "minLength(s = \"ADABCDB\")",
        "minLength(s = \"ABAACDAB\")",
        "minLength(s = \"ABBCDAB\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 3, 4, 5, 7, 10, 12], k = 2)",
        "maximumBeauty(nums = [1, 3, 4, 5, 7, 9, 11, 13], k = 2)",
        "maximumBeauty(nums = [2, 3, 4, 5, 6], k = 2)",
        "maximumBeauty(nums = [1, 5, 7, 9, 12, 15, 16], k = 2)"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56])",
        "countBeautifulPairs(nums = [123, 45, 789])",
        "countBeautifulPairs(nums = [123, 45, 76])",
        "countBeautifulPairs(nums=[23, 56, 11, 2])",
        "countBeautifulPairs(nums = [12, 23, 45, 55])",
        "countBeautifulPairs(nums = [22, 11, 33, 44, 55])",
        "countBeautifulPairs(nums = [45, 22, 91, 74])",
        "countBeautifulPairs(nums=[234, 345, 23456, 789])",
        "countBeautifulPairs(nums=[23, 30, 56, 70, 66, 81])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 30, num2 = 5)",
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 30, num2 = 3)",
        "makeTheIntegerZero(num1 = 35, num2 = 4)",
        "makeTheIntegerZero(num1 = 12, num2 = 5)",
        "makeTheIntegerZero(num1 = 27, num2 = 5)",
        "makeTheIntegerZero(num1 = 18, num2 = 5)",
        "makeTheIntegerZero(num1 = 63, num2 = 7)",
        "makeTheIntegerZero(num1 = 4, num2 = 3)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"noeven\")",
        "makeSmallestPalindrome(s = 'noon')",
        "makeSmallestPalindrome(s = \"nevve\")"
    ],
    "sample_37": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abac\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"abba\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums=[1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums=[1, 0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums=[1, 0, 1, 0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0, 0, 1, 1, 0])"
    ],
    "sample_105": [
        "checkArray(nums = [1, 2, 3], k = 2)",
        "checkArray(nums = [2, 3, 4, 1, 2], k = 2)",
        "checkArray(nums = [3, 2, 4, 1], k = 3)",
        "checkArray(nums = [2, 3, 1, 3], k = 2)",
        "checkArray(nums = [10, 2, -2, -20, 5], k = 3)",
        "checkArray(nums = [3, 2, 1, 5, 2, 2], k = 3)",
        "checkArray(nums = [3, 1, 3], k = 2)",
        "checkArray(nums = [5, 1, 5, 2, 1, 4], k = 3)",
        "checkArray(nums = [5, 7, 3, 3, 1], k = 2)",
        "checkArray(nums = [10, 7, 8, 9, 11, 10, 12, 13, 10, 11], k = 3)"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [3, 1, 4, 2])",
        "semiOrderedPermutation(nums = [4, 1, 3, 2])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 4, 3, 5])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4, 6, 5, 7])",
        "semiOrderedPermutation(nums = [4, 3, 1, 2])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4, 5, 6, 7])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "checkArray(nums = [1, 1, 2, 2, 3, 3], k = 2)",
        "checkArray(nums = [0, 1, 2, 3], k = 2)",
        "checkArray(nums = [15, 10, 10, 15], k = 2)",
        "checkArray(nums = [15, 10, 3, 7, 1], k = 2)",
        "checkArray(nums = [0, -1, 1, -2, 2], k = 3)",
        "checkArray(nums = [2, 3, 2, 1], k = 1)",
        "checkArray(nums = [2, 5, 3, 1, 2, 5, 4], k = 3)",
        "checkArray(nums = [0, 2, 3, 0, 0, 5, 7, 0, 0, 1], k = 3)"
    ],
    "sample_39": [
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"aabbb\")",
        "minimumCost(s = \"AABABBA\")",
        "minimumCost(s = \"AABABBA\")",
        "minimumCost(s = \"abca\")"
    ],
    "sample_65": [
        "findValueOfPartition(a = [3, 2, 1, 5, 4])",
        "findValueOfPartition(a = [3, 2, 1, 5, 4])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [2, 3, 1, 5, 4])",
        "findValueOfPartition(a = [1, 3, 5])",
        "findValueOfPartition(a = [2, 4, 7, 9])",
        "findValueOfPartition(a = [1, 2, 4, 6, 7])",
        "findValueOfPartition(a = [2, 5, 8, 14])",
        "findValueOfPartition(a = [1, 2, 3, 4, 10, 11])",
        "findValueOfPartition(a = [2, 5, 6, 8, 10])"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 7, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 7, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 20, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
    ],
    "sample_106": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4], k = 1)",
        "checkArray(nums = [3, 2, 1, 2], k = 1)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "checkArray(nums = [1, 2, 3, 2, 1], k = 3)",
        "checkArray(nums = [3, 2, 1, 1, 1], k = 2)",
        "checkArray(nums = [10, 2, -2, -20, 5], k = 3)",
        "checkArray(nums = [1, 0, 0, 0, 1, 0, 1], k = 2)",
        "checkArray(nums = [10, 4, 4, 6, 1], k = 2)"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [2, 1, 4, 3], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 1, 2], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 1], threshold = 3)",
        "longestAlternatingSubarray(nums = [2, 3], threshold = 10)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6, 7, 8, 9], threshold = 9)",
        "longestAlternatingSubarray(nums = [2, 3, 5, 7], threshold = 10)",
        "longestAlternatingSubarray(nums = [2, 1, 4, 3, 2, 1], threshold = 4)",
        "longestAlternatingSubarray(nums=[1, 3, 5, 7, 9], threshold=10)",
        "longestAlternatingSubarray(nums = [2, 1, 2, 1, 1], threshold = 3)",
        "longestAlternatingSubarray(nums = [4, 2, 0, 1, 3], threshold = 5)"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [12, 34, 56, 78, 90])",
        "countBeautifulPairs(nums = [123, 321])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56])",
        "countBeautifulPairs(nums = [123, 234])",
        "countBeautifulPairs(nums = [123, 321, 231, 132])",
        "countBeautifulPairs(nums = [123, 231, 312])",
        "countBeautifulPairs(nums = [12, 23, 13, 24, 25])",
        "countBeautifulPairs(nums = [22, 45, 89, 150, 220])",
        "countBeautifulPairs(nums = [22, 25, 62, 81])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], t = 4)",
        "longestAlternatingSubarray(nums=[1, 2, 3, 4, 5], t=5)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9], t = 9)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7], t = 7)",
        "longestAlternatingSubarray(nums = [1, 3, 2, 5], t = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3], t = 5)",
        "longestAlternatingSubarray(nums=[1, 2, 3, 4, 5, 6], t=6)",
        "longestAlternatingSubarray(nums = [1, 3, 2], t = 5)",
        "longestAlternatingSubarray(nums=[5, 3, 7, 1, 9, 4, 2], t=10)"
    ],
    "sample_36": [
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"caab\")",
        "minimumCost(s = \"caab\")",
        "minimumCost(s = \"abcabc\")",
        "minimumCost(s = \"aabcdaab\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABCDCDAB\")",
        "minLength(s = \"ABCDCDAB\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDABCDCD\")",
        "minLength(s = \"ABCDABCDCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDCDA\")"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1, 0, 0, 1])"
    ],
    "sample_9": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1]])",
        "colorTheArray(n = 2, queries = [[0, 1]])",
        "colorTheArray(n = 2, queries = [[0, 1]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 2]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 1]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [2, 3, 1])",
        "maxNonDecreasingLength(nums1 = [3, 2, 1], nums2 = [5, 4, 3])",
        "maxNonDecreasingLength(nums1 = [1, 2, 1, 2, 1], nums2 = [2, 1, 2, 1, 2])",
        "maxNonDecreasingLength(nums1 = [2, 1, 4], nums2 = [3, 2, 5])",
        "maxNonDecreasingLength(nums1 = [2, 4, 6], nums2 = [1, 2, 3])",
        "maxNonDecreasingLength(nums1 = [3, 2, 1], nums2 = [3, 4, 5])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 2, 3, 3], nums2 = [3, 2, 1, 2, 3, 1])",
        "maxNonDecreasingLength(nums1 = [3, 2, 3], nums2 = [2, 4, 5])"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "maximumBeauty(nums=[1, 3, 5, 7, 9], k=2)",
        "maximumBeauty(nums = [3, 1, 5, 2, 2], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 1)",
        "maximumBeauty(nums = [2, 3, 1, 4, 6], k = 2)",
        "maximumBeauty(nums = [2, 3, 5, 6, 8, 10], k = 1)",
        "maximumBeauty(nums = [1, 1, 1, 2, 3, 3, 3, 4, 4, 5], k = 2)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1, 2])",
        "findValueOfPartition(nums = [1, 2])",
        "findValueOfPartition(nums = [1, 2])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [0, 1])",
        "findValueOfPartition(nums = [0, 1])",
        "findValueOfPartition(nums = [0, 1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3, 5, 6])",
        "findValueOfPartition(nums = [3, 5, 6, 8])",
        "findValueOfPartition(nums = [3, 5, 6, 8, 10])",
        "findValueOfPartition(nums = [3, 4, 7, 8, 9])",
        "findValueOfPartition(nums = [3, 4, 6, 8])",
        "findValueOfPartition(nums = [3, 4, 6, 8])",
        "findValueOfPartition(nums = [1, 3, 4, 5, 7, 8])",
        "findValueOfPartition(nums = [2, 3, 4, 5, 7, 10])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [0, 1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4, 5])",
        "semiOrderedPermutation(nums = [2, 4, 1, 5, 3])",
        "semiOrderedPermutation(nums = [2, 1, 6, 5, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 4, 3])",
        "semiOrderedPermutation(nums = [2, 3, 4, 5, 6, 7, 8, 1])"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [1, 3, 5, 2, 4, 6])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4, 5])",
        "semiOrderedPermutation(nums = [3, 1, 5, 2, 4])",
        "semiOrderedPermutation(nums = [3, 1, 5, 2, 4])",
        "semiOrderedPermutation(nums = [3, 4, 1, 2])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7])",
        "semiOrderedPermutation(nums=[1, 3, 5, 2, 4, 6])",
        "semiOrderedPermutation(nums = [4, 1, 2, 3, 6, 5, 7])"
    ],
    "sample_167": [
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hewo\")",
        "isAcronym(words = [\"multi\", \"dimensional\", \"array\"], s = \"MADAM\")",
        "isAcronym(words = [\"Cats\", \"are\", \"awesome\"], s = \"Caa\")",
        "isAcronym(words = [\"programming\", \"examples\"], s = \"pex\")",
        "isAcronym(words = [\"What\", \"A\", \"Wonderful\", \"World\"], s = \"WWOW\")",
        "isAcronym(words=[\"What\", \"a\", \"Wonderful\", \"World\"], s = \"WWWW\")",
        "isAcronym(words=[\"morning\", \"sunshine\", \"dreams\"], s=\"MSD\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums=[1, 2, 3, 1, 2, 3, 1, 2, 3], m=3, k=0)",
        "countInterestingSubarrays(nums=[1, 2, 3, 1, 2, 3, 1, 2, 3], m=3, k=1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], m = 2, k = 0)",
        "countInterestingSubarrays(nums=[1, 1, 1, 1, 1, 1], m=3, k=0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3, 3], m = 2, k = 0)",
        "countInterestingSubarrays(nums=[1, 2, 3, 1, 2, 3, 3, 1], m=3, k=1)",
        "countInterestingSubarrays(nums=[2, 3, 4, 5, 6], m=2, k=1)",
        "countInterestingSubarrays(nums = [2, 3, 1, 4, 2], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3, 3, 3, 2, 1], m = 3, k = 1)",
        "countInterestingSubarrays(nums=[1, 3, 2, 4, 5, 8, 9], m=3, k=0)"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1,5], [2,3]])",
        "numberOfPoints(nums = [[1, 3], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [4, 7]])",
        "numberOfPoints(nums = [[1, 3], [2, 4]])",
        "numberOfPoints(nums = [[1, 3], [2, 4]])",
        "numberOfPoints(nums = [[1, 4], [7, 10]])",
        "numberOfPoints(nums = [[1,5], [6,10]])",
        "numberOfPoints(nums = [[1,3],[4,6],[7,8]])",
        "numberOfPoints(nums = [[1, 4], [7, 8], [2, 5]])"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = ['easy-problem'], separator = '-')",
        "splitWordsBySeparator(words = [\"easy:problem\"], separator = \":\")",
        "splitWordsBySeparator(words = [\"easy/problem\"], separator = \"/\")",
        "splitWordsBySeparator(words = [\"easy/problem\"], separator = \"/\")",
        "splitWordsBySeparator(words = [\"easy/problem\"], separator = \"/\")",
        "splitWordsBySeparator(words = ['easy:problem'], separator = ':')",
        "splitWordsBySeparator(words = [\"easy_problem\"], separator = \"_\")",
        "splitWordsBySeparator(words = [\"easy_problem\"], separator = \"_\")",
        "splitWordsBySeparator(words = [\"easy problem\"], separator = \" \")",
        "splitWordsBySeparator(words = ['easy%problem'], separator = '%')"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 6]])",
        "numberOfPoints(nums = [[1, 5], [2, 6], [3, 7]])",
        "numberOfPoints(nums = [[1, 5], [2, 4], [3, 6]])",
        "numberOfPoints(nums = [[1, 2], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1,4],[2,5],[3,6]])",
        "numberOfPoints(nums = [[1, 5], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[1, 3], [3, 6], [4, 6]])",
        "numberOfPoints(nums = [[1, 4], [3, 6], [10, 15]])",
        "numberOfPoints(nums = [[1,4], [2,3], [4,6]])",
        "numberOfPoints(nums = [[1,4], [7,8], [2,5]])"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 2])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one,two\", \"three,four,five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = [\"one,two,three\", \"four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = ['one,two', 'three', 'four,five,six'], separator = ',')",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"\", \"three\", \"four\", \"five\", \"six\"], separator = \"|\")",
        "splitWordsBySeparator(words = ['one_two', 'three_four_five', 'six'], separator = '_')",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"#\")"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [2, 3, 4])",
        "maxIncreasingGroups(u = [2, 2, 1, 3, 4])",
        "maxIncreasingGroups(u = [1, 2, 2])",
        "maxIncreasingGroups(u = [2, 1, 2, 1, 2])",
        "maxIncreasingGroups(u = [1, 2, 3, 1, 2])",
        "maxIncreasingGroups(u = [1, 3, 2])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 7, 8])",
        "maxIncreasingGroups(u = [5, 1, 4, 3, 2, 8])",
        "maxIncreasingGroups(u = [2, 3, 5, 6, 1])",
        "maxIncreasingGroups(u = [2, 1, 3, 5, 6, 4, 2, 3, 6, 7, 8, 9, 10, 11, 12])"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [3,8,-10,23,19,-4,-14,27], x = 2)",
        "minAbsoluteDifference(nums = [4, 2, 1, 3], x = 1)",
        "minAbsoluteDifference(nums=[1,5,7,8,5,3,4], x=2)",
        "minAbsoluteDifference(nums = [1, 3, 6], x = 2)",
        "minAbsoluteDifference(nums = [3, 7, 2, 9], x = 2)",
        "minAbsoluteDifference(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], x = 2)",
        "minAbsoluteDifference(nums = [3, 7, 2, 9, 4, 6], x = 2)",
        "minAbsoluteDifference(nums = [2,5,3,9,1], x = 2)",
        "minAbsoluteDifference(nums = [1, 7, 5, 9, 2, 10, 4], x = 3)",
        "minAbsoluteDifference(nums = [1,9,4,10,6], x = 2)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 2, 1], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [3, 1, 4, 1], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 4, k = 0)",
        "countInterestingSubarrays(nums = [3, 1, 4, 1, 5, 9, 2], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [0, 1, 2], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 1, 1, 2], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 2], modulo = 4, k = 0)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 2, 3, 4], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [3, 1, 1], m = 2)",
        "canSplitArray(nums = [3, 1, 1], m = 2)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 7)",
        "canSplitArray(nums = [5, 3, 2, 4, 1], m = 6)",
        "canSplitArray(nums = [1, 2, 3], m = 4)",
        "canSplitArray(nums = [7, 2, 3, 1], m = 5)",
        "canSplitArray(nums = [3, 1, 7, 3], m = 5)"
    ],
    "sample_169": [
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"bee\", \"cat\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"orange\", \"banana\"], s = \"AOB\")",
        "isAcronym(words = [\"apple\", \"bee\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"apple\", \"bat\", \"car\"], s = \"abc\")",
        "isAcronym(words = [\"Mark\", \"Paul\", \"John\"], s = \"MPJ\")",
        "isAcronym(words = [\"Mark\", \"Paul\", \"Anna\"], s = \"MAP\")",
        "isAcronym(words = [\"app\", \"ebook\", \"reader\"], s = \"AER\")"
    ],
    "sample_121": [
        "minimumIndex(nums = [7, 1, 5, 3, 6, 4])",
        "minimumIndex(nums = [7, 1, 5, 3, 6, 4])",
        "minimumIndex(nums = [3,1,2,3,2,4])",
        "minimumIndex(nums = [3,1,2,3,2,4,5,6])",
        "minimumIndex(nums = [4, 4, 2, 2, 1, 1])",
        "minimumIndex(nums = [3, 2, 1, 2, 3, 1])",
        "minimumIndex(nums = [7, 1, 5, 3, 6, 1])",
        "minimumIndex(nums = [3, 3, 2, 1, 0, 1, 2])",
        "minimumIndex(nums = [4, 1, 1, 2, 3])",
        "minimumIndex(nums = [3, 3, 1, 3, 2, 1, 1, 1])"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 3, offers = [[1, 5, 2], [3, 7, 3], [6, 8, 4]])",
        "maximizeTheProfit(n = 3, offers = [[1, 4, 2], [2, 5, 1], [3, 6, 3]])",
        "maximizeTheProfit(n = 4, offers = [[1, 4, 2], [2, 5, 3], [3, 6, 4], [4, 7, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 5, 2], [3, 8, 4], [6, 9, 1]])",
        "maximizeTheProfit(n = 3, offers = [[1, 4, 6], [2, 3, 5], [3, 5, 8]])",
        "maximizeTheProfit(n = 3, offers = [[1, 4, 2], [3, 5, 3], [4, 6, 1]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 6], [3, 4, 7], [2, 3, 5], [4, 5, 8]])",
        "maximizeTheProfit(n = 3, offers = [[1, 4, 4], [3, 5, 1], [2, 3, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 4, 2], [3, 5, 3], [4, 6, 4], [7, 9, 1], [2, 3, 5]])",
        "maximizeTheProfit(n = 1, offers = [[1, 3, 2], [3, 4, 3], [4, 5, 4]])"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [2, 3, 1])",
        "maximumTripletValue(nums = [3, 1, 2])"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"L__R_\")",
        "furthestDistanceFromOrigin(moves = \"R_R_L\")",
        "furthestDistanceFromOrigin(moves = \"R_R_L\")",
        "furthestDistanceFromOrigin(moves = \"L_R\")",
        "furthestDistanceFromOrigin(moves = \"R__L_R\")",
        "furthestDistanceFromOrigin(moves = \"R_L_L\")",
        "furthestDistanceFromOrigin(moves = \"RLL__RR\")",
        "furthestDistanceFromOrigin(moves = \"L_R_L_\")",
        "furthestDistanceFromOrigin(moves = \"RR_RR\")",
        "furthestDistanceFromOrigin(moves = 'R__R_L')"
    ],
    "sample_149": [
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = \"string\")",
        "finalString(s = 'sing')",
        "finalString(s = \"singing\")",
        "finalString(s = \"singing\")",
        "finalString(s = \"sing\")",
        "finalString(s = \"singer\")",
        "finalString(s = \"siting\")"
    ],
    "sample_162": [
        "maxSum(nums = [12, 23, 45, 88, 34])",
        "maxSum(nums = [12, 123, 56, 88, 90])",
        "maxSum(nums = [40, 43, 88, 34])",
        "maxSum(nums = [9, 2, 88, 7, 3, 5])",
        "maxSum(nums = [45, 89, 23, 75, 11])",
        "maxSum(nums = [81, 13, 51, 5])",
        "maxSum(nums = [62, 71, 64, 72, 91])",
        "maxSum(nums = [8, 76, 45, 23, 89, 2])",
        "maxSum(nums = [53, 76, 23, 45, 88, 1])",
        "maxSum(nums = [58, 7, 10, 88, 72, 87, 60, 100, 70, 67, 68, 100, 77, 69])"
    ],
    "sample_230": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2])",
        "countWays(nums = [2, 3, 4])",
        "countWays(nums = [2, 1, 3])",
        "countWays(nums = [4, 3, 2, 1])",
        "countWays(nums = [0, 1, 2, 3, 4])",
        "countWays(nums = [1, 0, 2])",
        "countWays(nums = [1, 3, 1, 2])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 0)",
        "minimumPossibleSum(n = 1, target = 0)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 10, target = 1)",
        "minimumPossibleSum(n = 5, target = 3)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 3, offers = [[1, 2, 10], [2, 3, 20]])",
        "maximizeTheProfit(N = 3, offers = [[0, 1, 2], [1, 2, 3]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 100], [2, 3, 200]])",
        "maximizeTheProfit(N = 3, offers = [(1, 2, 2), (2, 3, 3)])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 3], [2, 4, 1], [3, 5, 2]])",
        "maximizeTheProfit(N = 3, offers = [[0, 2, 1], [2, 3, 1]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 1], [2, 3, 2], [1, 3, 1]])",
        "maximizeTheProfit(N = 5, offers = [[1, 5, 2], [3, 4, 1], [2, 3, 3]])",
        "maximizeTheProfit(N=5, offers=[(1, 3, 2), (2, 4, 1), (3, 5, 1)])",
        "maximizeTheProfit(N = 3, offers = [[0, 1, 2], [0, 1, 3], [1, 2, 1]])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 2], [2, 4, 3], [3, 5, 4]])",
        "maximizeTheProfit(n = 5, offers = [[1, 5, 2], [3, 4, 3]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 4, 15], [3, 5, 7]])",
        "maximizeTheProfit(n=5, offers=[[1, 3, 6], [2, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 5, 5], [2, 4, 2], [3, 5, 7]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 1], [3, 4, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 4, 2], [2, 4, 1], [1, 3, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [3, 4, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 4], [3, 4, 5], [2, 4, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 5, 4], [3, 4, 5], [2, 3, 1]])"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40], target = 50)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40], target = 50)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 10, 15], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40], target = 45)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 5, 8], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 2, 10, 8, 15], target = 16)",
        "numberOfEmployeesWhoMetTarget(hours = [45, 38, 60, 75, 45], target = 50)"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 3, 1])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 3, 2])",
        "countWays(nums = [1, 2, 4, 5])",
        "countWays(nums = [1, 2, 3, 5, 6])",
        "countWays(nums = [1, 2, 3, 5, 6])"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [10, 20, 30])",
        "maxIncreasingGroups(usageLimits = [10, 10, 10, 10, 10])",
        "maxIncreasingGroups(usageLimits = [2, 2, 2, 1])",
        "maxIncreasingGroups(usageLimits = [100, 200, 300, 400])",
        "maxIncreasingGroups(usageLimits = [1, 1, 2, 2, 3])",
        "maxIncreasingGroups(usageLimits = [4, 5, 6, 7])",
        "maxIncreasingGroups(usageLimits = [10, 5, 12, 11, 10])",
        "maxIncreasingGroups(usageLimits = [2, 1, 4, 3, 5, 6])",
        "maxIncreasingGroups(usageLimits = [10, 2, 3, 5, 7])"
    ],
    "sample_173": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 1)"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 3, 4, 5, 6], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [3, 1, 4, 1], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [3, 1, 4, 1], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [2, 2, 1, 2, 1], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 5, 0, 2, 4, 4, 1], m = 3, k = 1)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3,4])"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,3], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,3,2,1,2], k = 2)",
        "longestEqualSubarray(nums = [2, 2, 2, 1, 4, 4, 4, 1, 2, 2, 2], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,2,3,4,3], k = 2)"
    ],
    "sample_170": [
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"QBF\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"Jumps\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"HELLO\")",
        "isAcronym(words = [\"Microsoft\", \"Windows\", \"Operating\", \"System\"], s = \"MWOS\")",
        "isAcronym(words = [\"apple\", \"bread\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"monday\", \"tuesday\"], s = \"T\")",
        "isAcronym(words = [\"biology\", \"chemistry\"], s = \"bc\")",
        "isAcronym(words = [\"Pineapple\", \"Pizza\", \"Burger\"], s = \"PPB\")"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '100')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = \"010\")",
        "maximumOddBinaryNumber(s = \"010\")",
        "maximumOddBinaryNumber(s = '1000')"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3, 5, 6, 7])",
        "countWays(nums = [1, 3, 4, 5])"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [2, 3, 6]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [2, 3, 6]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 3], [2, 3, 4]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 5], [2, 3, 6], [3, 4, 7]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 5], [2, 3, 6], [3, 4, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 6], [3, 4, 7], [4, 5, 8]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 4, 2]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [2, 3, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 4, 10], [3, 5, 7]])",
        "maximizeTheProfit(n=3, offers=[[1, 2, 2], [0, 2, 1]])"
    ],
    "sample_122": [
        "minimumIndex(nums = [3,1,3,3,2,3])",
        "minimumIndex(nums = [3, 1, 3, 3, 2, 3])",
        "minimumIndex(nums = [3,2,1,2])",
        "minimumIndex(nums = [3, 3, 1, 3, 2, 1, 1])",
        "minimumIndex(nums = [3,2,3,1,2,4,5,2])",
        "minimumIndex(nums = [1, 2, 2, 1, 3, 4, 4, 4, 5, 6, 7])",
        "minimumIndex(nums = [3,2,2,4,2,2,1])",
        "minimumIndex(nums = [2, 2, 3, 3, 3, 3, 4, 4, 5, 5])",
        "minimumIndex(nums = [3,2,1,2,1,2,3,1,2,3,1,2,3])",
        "minimumIndex(nums = [1, 2, 3, 3, 1, 2, 3, 3, 4, 4, 4, 5, 5, 5, 6])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1, 5], [2, 6], [3, 7]])",
        "numberOfPoints(nums = [[1, 5], [2, 6], [3, 7]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 5]])",
        "numberOfPoints(nums = [[1, 5], [2, 6], [3, 4]])",
        "numberOfPoints(nums = [[1,3],[2,4]])",
        "numberOfPoints(nums = [[1, 3], [2, 5]])",
        "numberOfPoints(nums = [[1,3],[2,6],[3,8],[15,18]])",
        "numberOfPoints(nums = [[1, 2], [2, 4], [4, 6]])",
        "numberOfPoints(nums = [[1, 5], [2, 3], [8, 9]])"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"a,b,c\", \"d,e,f\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"\", \"\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"\", \"\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello\", \"world\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple||orange||banana\"], separator = \"||\")",
        "splitWordsBySeparator(words = [\"\", \"\"], separator = \"@\")",
        "splitWordsBySeparator(words = [\"\", \"a\", \"b\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"apples,oranges\", \"grapes,peaches\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"foo|bar|baz\"], separator = \"|\")"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 10, target = 1)",
        "minimumPossibleSum(n = 10, target = 1)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 10, target = 2)",
        "minimumPossibleSum(n = 10, target = 2)",
        "minimumPossibleSum(n = 4, target = 1)",
        "minimumPossibleSum(n = 10, target = 3)"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 3], [2, 4]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [3, 6]])",
        "numberOfPoints(nums = [[2, 5], [1, 6]])",
        "numberOfPoints(nums = [[0,2],[1,4],[3,6]])",
        "numberOfPoints(nums = [[0, 2], [2, 4], [3, 4]])",
        "numberOfPoints(nums = [[1,3],[2,4],[1,3]])"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], m = 3, k = 1)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], m=3, k=1)",
        "countInterestingSubarrays(nums = [3, 2, 1, 4, 3], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [3, 1, 4, 1, 5, 9, 2, 6], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 3, 1, 4, 2], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 4, 6, 8, 10], m = 5, k = 2)"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 3)"
    ],
    "sample_203": [
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"01\")",
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"02575\")",
        "minimumOperations(num = \"00000001\")",
        "minimumOperations(num = \"005\")",
        "minimumOperations(num = \"0123456789\")",
        "minimumOperations(num = \"4025\")",
        "minimumOperations(num = \"5525\")",
        "minimumOperations(num = \"00022\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 5, 1, 7, 3], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums=[1, 2, 3, 1, 2, 3, 1, 2, 3], modulo=3, k=1)",
        "countInterestingSubarrays(nums = [3, 3, 2, 2, 1, 1], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums=[3, 3, 3, 3, 3, 3], modulo=3, k=2)",
        "countInterestingSubarrays(nums=[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 9, 2, 6, 8, 5, 3, 8, 3, 2, 7, 9, 5, 0, 2, 8, 8, 4, 1, 9, 7, 1], modulo=5, k=3)"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1, 2, 3, 4, 5], K = 1)",
        "longestEqualSubarray(A = [1, 2, 3, 2, 1], K = 1)",
        "longestEqualSubarray(A = [1, 2, 3, 4], K = 1)",
        "longestEqualSubarray(A = [1,2,3,4,5], K = 1)",
        "longestEqualSubarray(A = [2, 2, 2, 2, 2], K = 1)",
        "longestEqualSubarray(A = [1, 1, 1, 1, 1, 1, 1, 1], K = 2)",
        "longestEqualSubarray(A = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2], K = 3)",
        "longestEqualSubarray(A = [1, 1, 1, 1, 2, 1, 1, 1, 1, 1], K = 2)",
        "longestEqualSubarray(A = [1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3], K = 3)",
        "longestEqualSubarray(A = [1, 3, 2, 2, 2, 3, 1, 2, 2, 1], K = 1)"
    ],
    "sample_146": [
        "finalString(s = 'tniop')",
        "finalString(s = 'noitne')",
        "finalString(s = \"tinnep\")",
        "finalString(s = 'toinnep')",
        "finalString(s = 'pintter')",
        "finalString(s = 'tnirep')",
        "finalString(s = 'noitcnuf')",
        "finalString(s = \"rotip\")",
        "finalString(s = \"pint\\x07er\")",
        "finalString(s = 'niiopteer')"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 25, 30, 10, 40], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 25, 30, 45, 60], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [50, 60, 80, 45, 60], target = 50)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 25, 18, 30, 12], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [30, 25, 15, 35, 40], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 9, 15, 14], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [50, 75, 100, 60, 85], target = 70)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 3], [2, 4]])",
        "numberOfPoints(nums = [[1, 4], [2, 5], [3, 6]])",
        "numberOfPoints(nums = [[1, 3], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 2], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [3, 6], [4, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [1, 5]])",
        "numberOfPoints(nums = [[1, 3], [3, 6], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [3, 6], [0, 1]])",
        "numberOfPoints(nums = [[0, 1], [1, 2], [2, 3], [1, 3], [0, 2], [0, 3], [2, 4]])"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 2, 3, 4])",
        "maxIncreasingGroups(A = [1, 2, 3, 4])",
        "maxIncreasingGroups(A = [1, 1, 1])",
        "maxIncreasingGroups(A = [0, 1, 2, 3, 4])",
        "maxIncreasingGroups(A = [1, 3, 5, 7])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7])",
        "maxIncreasingGroups(A = [1, 1, 1, 1, 1, 1])",
        "maxIncreasingGroups(A = [0, 1, 2, 3, 4, 5, 6, 7])",
        "maxIncreasingGroups(A = [1, 3, 3])",
        "maxIncreasingGroups(A = [0, 1, 1, 2, 3, 3, 4])"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 3, offers = [[1, 2, 10], [2, 3, 20]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 10], [2, 3, 15]])",
        "maximizeTheProfit(n = 4, offers = [[1, 3, 2], [2, 3, 3]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 4, 15]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 2], [2, 3, 3]])",
        "maximizeTheProfit(n=3, offers=[[1, 2, 4]])",
        "maximizeTheProfit(n=7, offers=[])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 4, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 6], [3, 4, 7]])",
        "maximizeTheProfit(n=3, offers=[[1,2,2],[1,3,3],[2,3,1]])"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"LLRRR__\")",
        "furthestDistanceFromOrigin(moves = \"LL_RR__\")",
        "furthestDistanceFromOrigin(moves = \"LL_RR\")",
        "furthestDistanceFromOrigin(moves = \"RLL_RR\")",
        "furthestDistanceFromOrigin(moves = \"RL_RRR_\")",
        "furthestDistanceFromOrigin(moves = \"RR_L_RRR_\")",
        "furthestDistanceFromOrigin(moves = \"R_R_L_R_R_L_R_R\")",
        "furthestDistanceFromOrigin(moves = \"LLR_RR_L\")",
        "furthestDistanceFromOrigin(moves = \"L__R_R_R_R_\")",
        "furthestDistanceFromOrigin(moves = 'R_R_RR_L_LL_')"
    ],
    "sample_175": [
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 4)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 5], [2, 6], [3, 7]])",
        "numberOfPoints(nums = [[1, 4], [2, 5], [3, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4]])",
        "numberOfPoints(nums = [[1,3], [2,4], [3,5]])",
        "numberOfPoints(nums=[[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[4,5]])",
        "numberOfPoints(nums=[[1, 5], [2, 3], [4, 5]])",
        "numberOfPoints(nums = [[1, 4], [3, 5], [2, 6]])",
        "numberOfPoints(nums = [[1,5],[2,3],[4,4],[1,7]])"
    ],
    "sample_205": [
        "minimumOperations(num = \"2575\")",
        "minimumOperations(num = \"002575\")",
        "minimumOperations(num = \"0100\")",
        "minimumOperations(num = \"500\")",
        "minimumOperations(num = \"01001\")",
        "minimumOperations(num = \"257525\")",
        "minimumOperations(num = \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(num = \"5552525\")",
        "minimumOperations(num = \"31415\")",
        "minimumOperations(num = \"7050250\")"
    ],
    "sample_120": [
        "minimumIndex(nums = [3, 3, 1, 3, 2, 3])",
        "minimumIndex(nums = [1, 2, 3, 1, 2, 3])",
        "minimumIndex(nums = [1, 1, 2, 2, 3, 3])",
        "minimumIndex(nums = [2, 2, 1, 1, 3, 3])",
        "minimumIndex(nums = [1, 0, 1, 0, 1, 0])",
        "minimumIndex(nums = [1, 2, 2, 3, 4, 4, 4, 5])",
        "minimumIndex(nums = [2, 2, 1, 2, 3, 1, 2])",
        "minimumIndex(nums = [3, 3, 2, 1, 2, 2, 2, 1, 1])",
        "minimumIndex(nums = [4, 4, 3, 3, 1, 2, 2])",
        "minimumIndex(nums = [2, 4, 0, 1, 2, 3])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"LL_RRR_\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRR__\")",
        "furthestDistanceFromOrigin(moves = \"R__R_L_L_\")",
        "furthestDistanceFromOrigin(moves = 'L__R_R')",
        "furthestDistanceFromOrigin(moves = \"LL__RRR_\")",
        "furthestDistanceFromOrigin(moves = \"RR_RRR_L__L\")",
        "furthestDistanceFromOrigin(moves = 'RR__LL_L')",
        "furthestDistanceFromOrigin(moves = \"RR_LLL_\")",
        "furthestDistanceFromOrigin(moves = \"RRL_RRRR__\")",
        "furthestDistanceFromOrigin(moves = 'R__L_R_L_R_L_R_L')"
    ],
    "sample_161": [
        "maxSum(nums = [0, 0])",
        "maxSum(nums = [0, 0])",
        "maxSum(nums = [0, 0, 0])",
        "maxSum(nums = [0, 0, 0])",
        "maxSum(nums = [])",
        "maxSum(nums = [])",
        "maxSum(nums = [0, 0, 0, 0])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_160": [
        "maxSum(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1])",
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums = [2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [5, 5, 9, 1, 5])",
        "maxSum(nums = [2, 3, 5, 1, 9, 8, 4])",
        "maxSum(nums = [12, 345, 4, 0, 56, 78, 9])",
        "maxSum(nums = [2, 4, 5, 7, 8, 10])",
        "maxSum(nums = [9, 8, 2, 4, 7, 6, 5, 3, 1])",
        "maxSum(nums = [12, 3, 1, 11, 2, 123, 5])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = ['one-two', 'three-four', 'five-six'], separator = '-')",
        "splitWordsBySeparator(words = ['one,two', 'three;four,five:six'], separator = ',;:')",
        "splitWordsBySeparator(words = ['one;two', 'three;four;five', 'six'], separator = ';')",
        "splitWordsBySeparator(words = ['one-two', 'three:four;five.six'], separator = '-:;.')",
        "splitWordsBySeparator(words = [\"one||two\", \"three||four||five||six\"], separator = \"||\")",
        "splitWordsBySeparator(words = [\"one:two::three:four:::five:six\"], separator = \":\")",
        "splitWordsBySeparator(words = ['one|two', 'three,four', 'five;six'], separator = '|')",
        "splitWordsBySeparator(words = ['one.two', 'three.four', 'five', 'six'], separator = '.')",
        "splitWordsBySeparator(words = ['one|two', 'three:four', 'five-six'], separator = '|')",
        "splitWordsBySeparator(words = ['o.ne.', 't.w.o.', 't.h.r.e.e.', 'f.o.u.r.', 'f.i.v.e.', 's.i.x'], separator = '.')"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 25)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 35)",
        "numberOfEmployeesWhoMetTarget(hours=[10, 20, 30], target=30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 25], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours=[10,20,30], target=40)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours=[25, 30, 45, 60], target=50)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 6, 4, 7], target = 8)"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40], target = 50)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 60)",
        "numberOfEmployeesWhoMetTarget(hours=[], target=8)",
        "numberOfEmployeesWhoMetTarget(hours = [50, 60, 70], target = 80)",
        "numberOfEmployeesWhoMetTarget(hours = [25, 26, 22], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 5, 6, 3, 7], target = 5)"
    ],
    "sample_171": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 6)"
    ],
    "sample_159": [
        "maxSum(nums = [])",
        "maxSum(nums = [0, 0])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [0, 0, 0])",
        "maxSum(nums = [0, 1, 2, 3])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [0,0,0,0])",
        "maxSum(nums = [0,0,0,0])",
        "maxSum(nums = [11, 22, 33])"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [2, 2, 1, 1], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 1], m = 2)",
        "canSplitArray(nums = [1, 2, 3], m = 4)",
        "canSplitArray(nums = [2, 3, 1, 1, 2], m = 2)",
        "canSplitArray(nums = [5, 3, 2, 4, 1], m = 4)",
        "canSplitArray(nums = [2, 1, 3, 4, 7], m = 5)",
        "canSplitArray(nums = [1, 1, 2, 3], m = 2)",
        "canSplitArray(nums = [2, 2, 3, 5, 7, 8, 9], m = 15)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"a,b,c\", \"d,e,f\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"hello\", \"world\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"a||b||c\"], separator = \"||\")",
        "splitWordsBySeparator(words = [\"a||b||c\"], separator = \"||\")",
        "splitWordsBySeparator(words = [\"Hello\", \"World\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"\", \"\"], separator = \"@\")",
        "splitWordsBySeparator(words = [\"a,b,c,\", \"\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple,banana\", \"orange,grape\"], separator = \",\")"
    ],
    "sample_172": [
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 3)"
    ],
    "sample_228": [
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [0,1,2])",
        "countWays(nums = [0, 1, 2, 4])",
        "countWays(nums = [1,2,3,4])",
        "countWays(nums = [0, 1, 2, 3, 4, 5])",
        "countWays(nums = [0, 1, 2, 4, 6])",
        "countWays(nums = [0, 1, 2, 5, 6])",
        "countWays(nums = [0, 2, 4])",
        "countWays(nums = [0,1,2,3,4,5,6,7,8,9,10])"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '1100')",
        "maximumOddBinaryNumber(s = '0011011')"
    ],
    "sample_119": [
        "minimumIndex(nums = [3, 3, 1, 3, 3, 2, 3])",
        "minimumIndex(nums = [1, 2, 2, 3, 4, 2, 2, 2])",
        "minimumIndex(nums = [7, 7, 3, 2, 3, 3, 1])",
        "minimumIndex(nums = [3, 2, 2, 1, 4])",
        "minimumIndex(nums = [1, 2, 3, 3, 3, 4, 4, 5, 5, 5, 5])",
        "minimumIndex(nums = [7, 7, 5, 5, 5, 5])",
        "minimumIndex(nums = [1, 1, 1, 3, 3])",
        "minimumIndex(nums = [0, 1, 1, 3, 3, 3, 4, 4, 4, 4])",
        "minimumIndex(nums = [7, 1, 3, 4, 1, 6, 1])",
        "minimumIndex(nums = [4, 4, 4, 3, 3, 2, 2, 2])"
    ],
    "sample_153": [
        "canSplitArray(nums = [2, 2, 1, 1], m = 3)",
        "canSplitArray(nums = [2, 2, 1, 1], m = 3)",
        "canSplitArray(nums = [2, 1, 2, 1, 2], m = 2)",
        "canSplitArray(nums = [1, 1, 1, 1, 1], m = 2)",
        "canSplitArray(nums = [2, 3, 1], m = 1)",
        "canSplitArray(nums = [2, 2, 1, 1, 3, 3], m = 2)",
        "canSplitArray(nums = [2, 3, 1, 2], m = 1)",
        "canSplitArray(nums = [5, 5, 10, 10, 10], m = 10)",
        "canSplitArray(nums = [1, 100, 2, 3, 100, 4], m = 1)",
        "canSplitArray(nums = [5, 1, 2, 7], m = 6)"
    ],
    "sample_147": [
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = 'singer')",
        "finalString(s = \"singing\")",
        "finalString(s = \"singing\")"
    ],
    "sample_174": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 3, k = 12)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 5)",
        "canSplitArray(nums = [1, 2], m = 5)",
        "canSplitArray(nums = [1, 1], m = 2)",
        "canSplitArray(nums = [2, 2, 1], m = 3)",
        "canSplitArray(nums = [1, 2, 3], m = 4)",
        "canSplitArray(nums = [3, 1, 4, 2], m = 5)",
        "canSplitArray(nums=[1,2], m=4)",
        "canSplitArray(nums = [2, 3, 5, 9], m = 8)",
        "canSplitArray(nums=[3, 1, 7, 1, 1, 8, 1, 1, 9], m=5)"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [2, 3, 1, 2, 3, 1])"
    ],
    "sample_150": [
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 10, target = 5)"
    ],
    "sample_176": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums=[1, 2, 3, 4, 5], modulo=3, k=1)",
        "countInterestingSubarrays(nums=[1, 2, 3, 1, 2, 3], modulo=3, k=1)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4], modulo=3, k=1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums=[1, 2, 3, 2, 1, 2], modulo=3, k=1)",
        "countInterestingSubarrays(nums=[3, 2, 6, 4, 1], modulo=3, k=0)",
        "countInterestingSubarrays(nums=[0, 0, 0, 0, 0], modulo=3, k=0)"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8, 16], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], k = 2)",
        "sumIndicesWithKSetBits(nums = [5, 4, 1, 2], k = 2)"
    ],
    "sample_151": [
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = 'sing')",
        "finalString(s = \"singing\")",
        "finalString(s = 'sign')"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [0, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 0, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 0, 1, 0, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 1], k = 2)"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 1, 1])",
        "maxIncreasingGroups(usageLimits = [2, 2, 2])",
        "maxIncreasingGroups(usageLimits = [2, 3, 4])",
        "maxIncreasingGroups(usageLimits = [2, 2, 2, 2])",
        "maxIncreasingGroups(usageLimits = [1, 3, 5, 7, 9])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 1, 1, 1])"
    ],
    "sample_204": [
        "minimumOperations(s = \"00255075\")",
        "minimumOperations(s = \"00255075\")",
        "minimumOperations(s = \"00255075\")",
        "minimumOperations(s = \"00255075\")",
        "minimumOperations(s = \"00255075\")",
        "minimumOperations(s = \"0025\")",
        "minimumOperations(s = \"002575\")",
        "minimumOperations(s = \"00022500\")",
        "minimumOperations(s = \"01002050\")",
        "minimumOperations(s = \"01000101\")"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 25)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 15, 25], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 5], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 10, 15, 20], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [40, 30, 50, 20, 45], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 24, 18, 30, 24], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 12, 6, 14, 7], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 24, 32, 18, 22], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [240, 300, 210, 260, 280], target = 250)"
    ],
    "sample_148": [
        "finalString(s = 'pointer')",
        "finalString(s = 'pointer')",
        "finalString(s = \"pointer\")",
        "finalString(s = \"pointer\")",
        "finalString(s = 'poniter')",
        "finalString(s = 'popi')",
        "finalString(s = 'popitner')",
        "finalString(s = 'popiitner')",
        "finalString(s = 'rotite')",
        "finalString(s = 'iikgnop')"
    ],
    "sample_168": [
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"QBF\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hW\")",
        "isAcronym(words = [\"program\", \"alliance\"], s = \"PA\")",
        "isAcronym(words = [\"biology\", \"atmosphere\", \"chemistry\"], s = \"BAC\")",
        "isAcronym(words = [\"Merry\", \"Xmas\"], s = \"MX\")",
        "isAcronym(words = [\"madam\", \"arora\"], s = \"mara\")"
    ],
    "sample_201": [
        "minOperations(nums = [1, 1, 1, 1, 1], target = 10)",
        "minOperations(nums = [1, 1, 1], target = 2)",
        "minOperations(nums = [1, 1, 1], target = 2)",
        "minOperations(nums=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minOperations(nums=[1,1,1], target=3)",
        "minOperations(nums = [1, 2, 3, 4], target = 10)",
        "minOperations(nums = [1, 2, 3], target = 7)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 12)",
        "minOperations(nums=[2, 3, 5], target=9)",
        "minOperations(nums=[3, 1, 5, 8], target=12)"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '100')",
        "maximumOddBinaryNumber(s = '100')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '1101110')"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '110')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '100')",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = '00100')"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 4, target = 8)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 4, target = 9)"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LLRRa\")",
        "furthestDistanceFromOrigin(moves = \"LLRRA\")",
        "furthestDistanceFromOrigin(moves = \"LLRRA\")",
        "furthestDistanceFromOrigin(moves = \"LRaL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRALA\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRRA\")",
        "furthestDistanceFromOrigin(moves = \"RRALA\")",
        "furthestDistanceFromOrigin(moves = \"LLARRRAL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRaRa\")",
        "furthestDistanceFromOrigin(moves = \"RLARRALA\")"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 2, target = 5)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 6, 8], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 6, 8], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [25, 27, 24], target = 26)",
        "numberOfEmployeesWhoMetTarget(hours = [40, 30, 20, 45], target = 30)"
    ],
    "sample_231": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 3, 5])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [0, 1, 2])",
        "countWays(nums = [1, 2, 3, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 3, 3])",
        "countWays(nums = [1, 3, 2, 5])",
        "countWays(nums = [1, 3, 3, 4])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"L_R_R_R_R_R_R\")",
        "furthestDistanceFromOrigin(moves = \"L_R__R_L_\")",
        "furthestDistanceFromOrigin(moves = \"L_R__R_L_\")",
        "furthestDistanceFromOrigin(moves = \"L_R_R_R_\")",
        "furthestDistanceFromOrigin(moves = \"L_R__R_L\")",
        "furthestDistanceFromOrigin(moves = \"R_R_R_R_R_R_R\")",
        "furthestDistanceFromOrigin(moves = \"R_R__R_\")",
        "furthestDistanceFromOrigin(moves = \"L__RRR_\")",
        "furthestDistanceFromOrigin(moves = \"____RRRRRRR__LLL\")",
        "furthestDistanceFromOrigin(moves = \"RLLRRLLRLR\")"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 1, target = 4)",
        "minimumPossibleSum(n = 1, target = 4)",
        "minimumPossibleSum(n = 1, target = 4)",
        "minimumPossibleSum(n = 1, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 1, target = 5)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 2, target = 8)",
        "minimumPossibleSum(n=2, target=5)",
        "minimumPossibleSum(n = 2, target = 3)"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 1])"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 5)",
        "canSplitArray(nums = [2, 3, 1], m = 3)",
        "canSplitArray(nums = [2, 2, 2, 2], m = 5)",
        "canSplitArray(nums = [2, 2, 1, 1, 2], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [2, 1, 3, 2], m = 3)",
        "canSplitArray(nums = [3, 1, 7, 3], m = 8)",
        "canSplitArray(nums = [1, 3, 2, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7], m = 8)"
    ],
    "sample_200": [
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 100)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 11)",
        "minOperations(nums = [3, 2, 1], target = 7)",
        "minOperations(nums = [1, 2, 3, 4], target = 5)",
        "minOperations(nums = [1, 1], target = 3)",
        "minOperations(nums = [3, 2, 1], target = 1)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 5)",
        "minOperations(nums = [1, 1, 2, 3, 4], target = 10)",
        "minOperations(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], target = 15)"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8, 16, 32, 64, 128], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8, 16, 32, 64, 128], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 7, 11], k = 2)"
    ],
    "sample_165": [
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"Microsoft\", \"Windows\", \"Operating\", \"System\"], s = \"MWOS\")",
        "isAcronym(words = [\"Python\", \"is\", \"fun\"], s = \"PIF\")",
        "isAcronym(words = [\"Awesome\", \"Programming\", \"Language\"], s = \"APL\")",
        "isAcronym(words = [\"abc\", \"def\"], s = \"ad\")",
        "isAcronym(words = [\"Python\", \"Development\", \"Tools\"], s = \"PD\")",
        "isAcronym(words = [\"python\", \"is\", \"fun\"], s = \"PIF\")"
    ],
    "sample_227": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 3, 5, 7, 9])",
        "countWays(nums = [1, 3, 5, 7, 9])",
        "countWays(nums = [0, 1, 2, 3, 4])",
        "countWays(nums = [2, 3, 4])",
        "countWays(nums = [3, 1, 2])",
        "countWays(nums = [0, 2, 3, 5])",
        "countWays(nums = [1, 3, 7, 9])",
        "countWays(nums = [2, 0, 1, 5, -3])"
    ],
    "sample_158": [
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [])",
        "maxSum(nums = [123, 321])",
        "maxSum(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [10, 20, 30])",
        "maxSum(nums = [123, 123])",
        "maxSum(nums = [123, 321, 456, 789])",
        "maxSum(nums = [123, 1234])",
        "maxSum(nums = [1, 10, 11])",
        "maxSum(nums = [23, 232, 2323, 23232])"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,3,2,1,2], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,3,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,3,2,1,2,3,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,4,2,2,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,3,1,2,3,3,2], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3,1], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3, 2, 3, 2], k = 2)"
    ],
    "sample_177": [
        "maximizeTheProfit(n=3, offers=[[1, 2, 10], [2, 3, 15]])",
        "maximizeTheProfit(n=5, offers=[[1, 2, 10], [2, 4, 15], [3, 5, 7]])",
        "maximizeTheProfit(n=4, offers=[[1, 2, 5], [3, 4, 8]])",
        "maximizeTheProfit(n=2, offers=[[1, 2, 5], [3, 4, 7]])",
        "maximizeTheProfit(n=3, offers=[[1, 2, 6], [2, 3, 7], [3, 4, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 4, 5], [2, 5, 6], [3, 6, 7]])",
        "maximizeTheProfit(n=4, offers=[(1, 2, 10), (2, 3, 15)])",
        "maximizeTheProfit(n=4, offers=[[1, 2, 10], [2, 4, 15]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 60], [2, 3, 100], [1, 3, 50]])",
        "maximizeTheProfit(n = 4, offers = [[1, 3, 2], [3, 4, 1], [0, 2, 3], [2, 3, 2]])"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4])",
        "maxIncreasingGroups(x = [1, 2, 3, 5, 6, 7])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7])",
        "maxIncreasingGroups(x = [1, 2, 4, 7, 11, 15])",
        "maxIncreasingGroups(x = [2, 3, 4, 5, 6])",
        "maxIncreasingGroups(x = [0, 1, 2, 5, 6, 7])",
        "maxIncreasingGroups(x = [1, 3, 4, 5, 8, 9])"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 7, 11], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8, 16], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 1)",
        "sumIndicesWithKSetBits(nums = [5, 1, 2, 8, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 7, 8, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 7, 11, 13, 14, 15], k = 3)"
    ],
    "sample_207": [
        "minimumOperations(num = \"1001\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"001\")",
        "minimumOperations(num = \"101\")",
        "minimumOperations(num = \"0110\")",
        "minimumOperations(num = \"000\")",
        "minimumOperations(num = \"011\")",
        "minimumOperations(num = \"12340\")",
        "minimumOperations(num = \"01101\")",
        "minimumOperations(num = \"2011\")"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"RLL\")",
        "furthestDistanceFromOrigin(moves = \"RLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"RLRL\")",
        "furthestDistanceFromOrigin(moves=\"RRL\")",
        "furthestDistanceFromOrigin(moves = \"RLLLRLRR\")"
    ],
    "sample_206": [
        "minimumOperations(num = \"02575\")",
        "minimumOperations(num = \"75025\")",
        "minimumOperations(num = \"15\")",
        "minimumOperations(num = \"0002575\")",
        "minimumOperations(num = \"257500\")",
        "minimumOperations(num = \"47\")",
        "minimumOperations(num = \"375\")",
        "minimumOperations(num = \"00225075\")",
        "minimumOperations(num = \"001001\")",
        "minimumOperations(num = \"5075025\")"
    ],
    "sample_155": [
        "canSplitArray(nums = [2, 3, 1], m = 2)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 5)",
        "canSplitArray(nums = [2, 3, 1, 1, 2], m = 2)",
        "canSplitArray(nums = [2, 3, 5, 1, 2], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 4)",
        "canSplitArray(nums = [7, 1, 1, 1, 1, 1], m = 3)",
        "canSplitArray(nums = [1, 1, 2], m = 2)",
        "canSplitArray(nums=[3,3,1,1,2,2,3,3], m=5)",
        "canSplitArray(nums = [10, 2, 3, 2, 5, 7], m = 4)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 1, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 3, 2, 1, 3, 2])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 4, 1, 2, 3, 4, 1])"
    ],
    "sample_202": [
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"02575\")",
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"02500\")",
        "minimumOperations(num = \"0075\")",
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"00000\")",
        "minimumOperations(num = \"257500\")",
        "minimumOperations(num = \"505\")"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [\"\", \"\"], b = \" \")",
        "splitWordsBySeparator(a = [\"\"], b = \"\")",
        "splitWordsBySeparator(a = [\"a,b,c\", \"d,e,f\"], b = \",\")",
        "splitWordsBySeparator(a = [\"apple,orange,banana\"], b = \",\")",
        "splitWordsBySeparator(a = [\"\",\"\",\"\"], b = \" \")",
        "splitWordsBySeparator(a = [\"\",\"\"], b = \" \")",
        "splitWordsBySeparator(a = [\"apple,banana\", \"cherry,date\"], b = \",\")",
        "splitWordsBySeparator(a = [\"test1,test2\", \"test3,test4\"], b = \",\")",
        "splitWordsBySeparator(a = [\"b,a,,n,a,,,na\"], b = \",\")",
        "splitWordsBySeparator(a = [\"apple\", \"orange\"], b = \"a\")"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8, 16, 32, 64, 128], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [5, 7, 9, 11, 13, 15, 17, 19], k = 2)",
        "sumIndicesWithKSetBits(nums = [5, 3, 2, 7, 9, 1, 15], k = 2)"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = '1010')",
        "maximumOddBinaryNumber(s = '1010')",
        "maximumOddBinaryNumber(s = '1100')",
        "maximumOddBinaryNumber(s = '1100')",
        "maximumOddBinaryNumber(s = \"1101\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,2,1,2,1,2], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,3,1,2,3], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 4], k = 1)",
        "longestEqualSubarray(nums=[3, 2, 1, 2, 3, 3, 3, 3], k=2)",
        "longestEqualSubarray(nums=[3, 1, 5, 2, 2, 2, 1, 4, 2, 3, 1, 5, 2, 2, 2, 1, 4, 2, 3, 1], k=3)"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1, 1, 1, 1, 1], k = 0)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 2)",
        "longestEqualSubarray(nums = [1,6,3,4,2,7,10,2,4], k = 3)",
        "longestEqualSubarray(nums = [1,6,2,3,4,5,6], k = 2)",
        "longestEqualSubarray(nums = [1, 3, 2, 1, 2, 1, 3], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1, 2, 3, 3], k = 2)",
        "longestEqualSubarray(nums = [1,6,2,3,4,5,3,2,1], k = 2)",
        "longestEqualSubarray(nums = [1, 3, 2, 2, 1, 3, 4, 2], k = 3)",
        "longestEqualSubarray(nums = [1, 1, 2, 2, 3, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 1, 2, 3, 4], k = 2)"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '100')",
        "maximumOddBinaryNumber(s = '1010')",
        "maximumOddBinaryNumber(s = '0100')"
    ],
    "sample_166": [
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"helloworld\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hwe\")",
        "isAcronym(words = [\"Monday\", \"Tuesday\", \"Wednesday\"], s = \"MTW\")",
        "isAcronym(words = [\"multi\", \"word\", \"test\"], s = \"mwt\")",
        "isAcronym(words = [\"motor\", \"vehicle\", \"amazing\", \"race\"], s = \"MVAR\")"
    ],
    "sample_163": [
        "maxSum(nums = [])",
        "maxSum(nums = [0, 1, 2])",
        "maxSum(nums = [0, 0, 0])",
        "maxSum(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [0, 0, 0, 0, 0])",
        "maxSum(nums = [111, 222, 333])",
        "maxSum(nums = [0,1,2])",
        "maxSum(nums = [123, 1234, 12345])",
        "maxSum(nums = [9876, 98765])",
        "maxSum(nums = [3, 5, 8])"
    ]
}