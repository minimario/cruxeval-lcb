{
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1,2,3])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1])",
        "minimumRightShifts(nums = [1, 1, 1])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6])",
        "minimumRightShifts([1, 2, 3])",
        "minimumRightShifts(nums = [7, 1, 5, 3, 6, 4])"
    ],
    "sample_453": [
        "minChanges(s = \"abba\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"baaba\")",
        "minChanges(s = \"abbcb\")",
        "minChanges(s = \"abcddc\")",
        "minChanges(s = \"babbbc\")",
        "minChanges(s = \"bbbaccc\")",
        "minChanges(s = \"11100000001111000000\")"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 7)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6], target = 7)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 2, 3], target = 3)",
        "lengthOfLongestSubsequence(nums = [3,4,-1,3,2], target = 7)",
        "lengthOfLongestSubsequence(nums = [10,20,30,40], target = 35)",
        "lengthOfLongestSubsequence(nums = [1,2,3,2,1,4], target = 11)",
        "lengthOfLongestSubsequence(nums = [5, 1, 6, 3, 2, 6, 6, 2], target = 10)"
    ],
    "sample_367": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lamp\")",
        "sortVowels(s = \"LyMph\")",
        "sortVowels(s = \"lYmPh\")",
        "sortVowels(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "sortVowels(s = \"mlph\")",
        "sortVowels(s = \"lMph\")",
        "sortVowels(s = \"YMPH\")",
        "sortVowels(s = 'Hmlypp')"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [3, 7, 1], target = 11)",
        "lengthOfLongestSubsequence(nums = [1, 2, 1, 2], target = 3)",
        "lengthOfLongestSubsequence(nums = [8, 4, 12], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 4], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 1, 2, 3], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 2, 2, 2], target = 4)",
        "lengthOfLongestSubsequence(nums = [0, 3, 6], target = 3)",
        "lengthOfLongestSubsequence(nums = [10, 2, 1, 3], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,1,1,1,1,1,1,1,1], target = 12)",
        "lengthOfLongestSubsequence(nums = [2, 4, 4, 3, 1], target = 1)"
    ],
    "sample_381": [
        "countPairs(nums = [1,2,3], t = 6)",
        "countPairs(nums = [1,2,3,4,5], t = 3)",
        "countPairs(nums = [2, 3, 4], t = 7)",
        "countPairs(nums = [2,4,4], t = 6)",
        "countPairs(nums = [4, 1, 1, 2], t = 5)",
        "countPairs(nums = [1, 3, 2, 4, 1], t = 4)",
        "countPairs(nums = [1,1,4,1,2], t = 3)",
        "countPairs(nums = [3, 1, 5, 12], t = 6)",
        "countPairs(nums = [2, 2, 2, 3, 5, 7], t = 7)",
        "countPairs(nums = [2, 3, 5, 9, 13], t = 16)"
    ],
    "sample_366": [
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [1, 3, 5, 6])",
        "isGood(nums = [1, 3, 4, 6])",
        "isGood([1, 3, 4, 5])",
        "isGood(nums = [3, 4, 6, 1, 0, 2])",
        "isGood(nums = [1, 2, 4, 5, 7, 8])",
        "isGood(nums = [1, 4, 7])"
    ],
    "sample_369": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = 'lYmpH')",
        "sortVowels(\"Lymph\")",
        "sortVowels(s = \"lampy\")",
        "sortVowels(s = \"hello world!\")",
        "sortVowels(s = 'YplmH')",
        "sortVowels(s = \"hello\")",
        "sortVowels(s = 'bamboo')"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [5, 4, 3, 2, 1])",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [1, 3, 2])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 3, 2, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6])",
        "minimumRightShifts(nums = [1, 3, 2, 4, 5, 6])",
        "minimumRightShifts(nums = [2, 3, 1, 4, 5, 2])",
        "minimumRightShifts(nums = [6, 2, 8, 1, 5])",
        "minimumRightShifts(nums = [5, 4, 2, 3, 1, 4, 1, 4, 4, 5, 4])"
    ],
    "sample_448": [
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"ab\")",
        "minChanges(s = \"abca\")",
        "minChanges(s = \"abca\")",
        "minChanges(s = \"aabbc\")",
        "minChanges(s = \"bbbbbbbbb\")",
        "minChanges(s = \"pqrstuv\")",
        "minChanges(s = \"dgbg\")"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abcd\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acdb\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bacd\")",
        "canBeEqual(s1 = \"aabcc\", s2 = \"adcaa\")",
        "canBeEqual(s1 = \"aaa\", s2 = \"bbb\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"adcb\")",
        "canBeEqual(s1 = \"abba\", s2 = \"baba\")",
        "canBeEqual(s1 = \"aaa\", s2 = \"aab\")",
        "canBeEqual(s1 = \"aba\", s2 = \"aab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcdc\")"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1,2,3,4,5])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [3,3])",
        "minLengthAfterRemovals(nums = [2,2,2,2,2,2])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 1, 3])",
        "minLengthAfterRemovals(nums = [0, 2, 0])",
        "minLengthAfterRemovals(nums = [3,1,2,4])",
        "minLengthAfterRemovals(nums = [3, 1, 1, 1, 5])"
    ],
    "sample_361": [
        "isGood(a = [1, 2, 3, 4, 4])",
        "isGood(a = [1, 2, 3, 3, 4, 5])",
        "isGood(a = [1, 2, 1, 2, 1, 2])",
        "isGood(a = [2, 2, 1])",
        "isGood(a = [1, 2, 1, 1, 2])",
        "isGood(a = [1, 3, 2])",
        "isGood(a = [1,2,3,2])",
        "isGood(a = [2, 4, 4, 3, 2])",
        "isGood(a = [1, 2, 1, 2, 3, 2, 1, 3])",
        "isGood(a = [1, 1, 2, 3, 4, 5, 1, 4, 5])"
    ],
    "sample_419": [
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "minOperations(nums=[1,2,3,4,5], k=2)",
        "minOperations(nums = [1,3,4,2], k = 4)",
        "minOperations(nums = [1,2,4,3], k = 2)",
        "minOperations(nums = [9,4,2,3,4], k = 3)",
        "minOperations(nums = [5,3,4,1,2], k = 3)",
        "minOperations(nums = [2,3,4,7], k = 3)",
        "minOperations(nums = [2,2,3,2,3], k = 3)",
        "minOperations(nums = [1,1,1,1,2,3,1,1,4,5], k = 3)"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1,2,3])",
        "findMaximumLength(nums = [1,2,3])",
        "findMaximumLength(nums = [1,2,3,4])",
        "findMaximumLength(nums = [1,2,3,4,5,6,7,8])",
        "findMaximumLength(nums=[1,2,3,1])",
        "findMaximumLength(nums = [3,6,7,11])",
        "findMaximumLength(nums = [3,1,2,4,3])",
        "findMaximumLength(nums = [2,4,6,8,10])",
        "findMaximumLength(nums = [0,1,1,1,1,2])",
        "findMaximumLength(nums = [1, 0, 2, 1])"
    ],
    "sample_433": [
        "maxSubarrays(nums = [2, 3, 5, 7, 11])",
        "maxSubarrays(nums = [1,2,3,2,1])",
        "maxSubarrays(nums = [1, 4, 2, 5, 3])",
        "maxSubarrays(nums = [6, 3, 1, 2, 5])",
        "maxSubarrays(nums = [1, 1, 1, 2, 3, 1, 2, 3, 1])",
        "maxSubarrays(nums = [2, 3, 2, 2, 3, 2, 4, 2, 2, 3])",
        "maxSubarrays(nums = [2, 5, 2, 3, 4, 4, 2, 3, 4])",
        "maxSubarrays(nums = [1,2,1,3,4,1,3,3,3,2])",
        "maxSubarrays(nums = [2,3,4,2,5,7,3,4,5,2])",
        "maxSubarrays(nums = [3, 1, 2, 5, 8, 4, 5, 4, 8, 3])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bac\")",
        "canMakeSubsequence(str1 = \"z\", str2 = \"aa\")",
        "canMakeSubsequence(str1 = \"zebra\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"a\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"zebra\", str2 = \"zebra\")",
        "canMakeSubsequence(str1 = \"zzab\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"cabbage\", str2 = \"abcde\")",
        "canMakeSubsequence(str1 = \"apb\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"abbz\", str2 = \"abcc\")"
    ],
    "sample_402": [
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3], m = 1, k = 2)",
        "maxSum(nums = [10, 1, 2, 7, 6, 1, 5], m = 3, k = 0)",
        "maxSum(nums = [2, 3, 4], m = 2, k = 2)",
        "maxSum(nums = [1, 1, 1, 1, 1, 1], m = 2, k = 2)",
        "maxSum(nums = [1, 1, 1, 1, 1], m = 1, k = 5)",
        "maxSum(nums = [1, 1, 3, 2], m = 2, k = 2)",
        "maxSum(nums = [2,3,-2,4], m = 2, k = 2)",
        "maxSum(nums = [0, 0, 2, 1], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 1, 3, 1, 1, 1, 1], m = 3, k = 7)"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"pineapple\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"fish\"], x = \"d\")",
        "findWordsContaining(words = [\"123\", \"abc\", \"def\"], x = \"2\")",
        "findWordsContaining(words = [\"bamboo\", \"mango\", \"orange\"], x = \"o\")",
        "findWordsContaining(words = [\"a\", \"banana\", \"ba\", \"apple\", \"banana\"], x = \"nana\")",
        "findWordsContaining(words = [\"my\", \"name\", \"is\", \"not\", \"here\"], x = \"y\")",
        "findWordsContaining(words = [\"asd\", \"abs\", \"bbb\"], x = \"bbb\")",
        "findWordsContaining(words = [\"bag\", \"sad\", \"buy\"], x = \"sad\")",
        "findWordsContaining(words = [\"animal\", \"banana\", \"cat\", \"cat\", \"dog\", \"dog\", \"tiger\"], x = \"tig\")"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = ['prev', '1', 'prev', '2', 'prev'])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = ['prev', '1', 'prev', '2', 'next', '3'])",
        "lastVisitedIntegers(words = [\"prev\", \"5\", \"prev\", \"1\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"next\", \"next\", \"prev\", \"next\", \"prev\", \"next\", \"prev\", \"prev\"])"
    ],
    "sample_422": [
        "minOperations(nums = [2,3,1,2,4,3], k = 2)",
        "minOperations(nums = [3,1,2,2,1,7], k = 3)",
        "minOperations(nums = [1, 1, 2, 2], k = 1)",
        "minOperations(nums = [1, 3, 1, 5], k = 2)",
        "minOperations(nums = [1, 1, 0, 0], k = 2)",
        "minOperations(nums = [5,3,1,2,3], k = 2)",
        "minOperations(nums = [1,1,3,5,5], k = 5)",
        "minOperations(nums = [3,3,5,5,2,2,5,7], k = 3)",
        "minOperations(nums = [4, 2, 1, 3, 5, 3, 4], k = 4)",
        "minOperations(nums = [3,2,2,1,2,3,1,1,1,2], k = 4)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 1, 1, 1], k = 2)",
        "minOperations(nums = [1, 1, 1], k = 3)",
        "minOperations(nums = [3, 1, 2], k = 2)",
        "minOperations(nums = [2, 1, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 2, 1], k = 2)",
        "minOperations(nums = [1, 100, 2, 100, 3, 100], k = 2)",
        "minOperations(nums = [2, 1, 4, 3, 2], k = 4)",
        "minOperations(nums = [2,1,2,1,3], k = 4)",
        "minOperations(nums = [4, 1, 1, 2, 3], k = 3)",
        "minOperations(nums = [1,10,9,11,9,12,10,1], k = 3)"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1,2,3,4])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 1, 1])",
        "minimumSeconds(nums = [1, 3, 5, 2])",
        "minimumSeconds(nums = [3, 1, 5, 0, 2, 4])",
        "minimumSeconds(nums = [1, 3, 1, 4, 2, 3])",
        "minimumSeconds(nums = [2, 2, 1, 3, 1])",
        "minimumSeconds([3, 3, 1])",
        "minimumSeconds(nums = [1, 3, 2, 2, 5, 2, 3])",
        "minimumSeconds(nums = [1,1,1,2,1,2])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3], target = 3)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 8)",
        "countPairs(nums = [0, 1, 2], target = 2)",
        "countPairs(nums = [1, 5, 3, 2], target = 4)",
        "countPairs(nums = [1, 3, 2, 6, 1, 2], target = 4)",
        "countPairs(nums = [2,2,2,3,4], target = 4)",
        "countPairs(nums = [0, 0, 0, 0, 0, 0, 0], target = 5)",
        "countPairs(nums = [4, 5, 7, 1, 3], target = 8)"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"a\", \"b\", \"c\"], x = \"a\")",
        "findWordsContaining(words = [\"abc\", \"def\", \"ghi\"], x = \"a\")",
        "findWordsContaining(words = [\"blah\", \"blahblah\", \"blahblahblah\"], x = \"blah\")",
        "findWordsContaining(words = [\"ipsum\", \"lorem\", \"dolor\"], x = \"lorem\")",
        "findWordsContaining(words = [\"aa\", \"ad\", \"an\", \"ab\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"ball\", \"apple\", \"apple\"], x = \"pp\")",
        "findWordsContaining(words = [\"box\", \"bog\", \"fog\"], x = \"b\")",
        "findWordsContaining(words = [\"ab\", \"car\", \"cab\", \"bab\"], x = \"a\")",
        "findWordsContaining(words = [\"123abc\", \"456de\", \"789fgh\"], x = \"bc\")",
        "findWordsContaining(words = [\"laid\", \"alley\", \"salt\"], x = \"a\")"
    ],
    "sample_372": [
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = \"leoTcede\")",
        "sortVowels(s = 'leoTcede')",
        "sortVowels(s = \"codedelete\")",
        "sortVowels(s = 'leTOcede')",
        "sortVowels(s = \"loTceDE\")",
        "sortVowels(s = 'cedeotLe')",
        "sortVowels(s = 'eLeoTcede')",
        "sortVowels(s = \"leotcead\")"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [1])",
        "minLengthAfterRemovals(nums = [1,1])",
        "minLengthAfterRemovals(nums = [1,1,2])",
        "minLengthAfterRemovals(nums = [1, 3, 4, 2, 6, 1, 2])",
        "minLengthAfterRemovals(nums = [0, 0, 0, 0, 0])",
        "minLengthAfterRemovals(nums = [3, 3, 2, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 1, 2, 4])",
        "minLengthAfterRemovals(nums = [1, 3, 1, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [2, 4, 3, 5, 6, 7])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9, 9, 9])"
    ],
    "sample_452": [
        "minChanges(s = \"abcdef\")",
        "minChanges(s = \"banana\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"abccba\")",
        "minChanges(s = \"ababa\")",
        "minChanges(s = \"aaaabbb\")",
        "minChanges(s = \"abcbad\")",
        "minChanges(s = \"baaac\")",
        "minChanges(s = \"candy\")",
        "minChanges(s = \"another\")"
    ],
    "sample_385": [
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 10)",
        "countPairs(nums = [1,2,3,4,5,6], target = 5)",
        "countPairs(nums = [3,5,-4,8,-11,12], target = 8)",
        "countPairs(nums = [1, 4, 45, 6, 10, -8], target = 5)",
        "countPairs(nums = [1, 3, 1, 5, 4], target = 4)",
        "countPairs(nums = [2, 7, 11, 15], target = 15)",
        "countPairs(nums = [1,3,4,1,3,5], target = 6)",
        "countPairs(nums = [1, 4, 5, 3, 2, 1], target = 3)",
        "countPairs(nums = [1, 3, 4, 5, 2, 4], target = 4)"
    ],
    "sample_427": [
        "minOperations(nums = [3,1,4,2])",
        "minOperations(nums = [1, 1, 2, 2])",
        "minOperations(nums = [2, 1, 3])",
        "minOperations(nums = [1, 2, 3, 2])",
        "minOperations(nums = [1, 3, 1, 2])",
        "minOperations(nums = [3,1,2])",
        "minOperations(nums = [1, 4, 4])",
        "minOperations(nums = [1, 2, 3, 3, 4, 5, 6])",
        "minOperations(nums = [1, 3, 3, 3, 3, 3, 3, 3, 3, 3])",
        "minOperations(nums = [2, 1, 4, 6, 3, 6, 5, 3, 2, 4])"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [2, 3, 2])",
        "minLengthAfterRemovals([1, 1, 1, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [2,2,3,3,5])"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2])",
        "minimumCoins([1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 5, 1])",
        "minimumCoins([1, 3, 4])",
        "minimumCoins(prices = [3, 2, 2])",
        "minimumCoins([3, 2, 5])",
        "minimumCoins([10, 4, 2])",
        "minimumCoins(prices = [1, 4, 3, 1, 2, 1])",
        "minimumCoins([1, 5, 9, 4])",
        "minimumCoins(prices = [2, 1, 4, 2, 3, 4, 1])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"abc\", \"def\", \"ghi\"], x = \"f\")",
        "findWordsContaining(words = [\"foo\", \"bar\", \"baz\"], x = \"a\")",
        "findWordsContaining(words = [\"a\", \"aa\", \"aaa\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"aardvark\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"pear\", \"kiwi\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"there\", \"how\", \"are\", \"you\"], x = \"ho\")",
        "findWordsContaining(words = [\"test\", \"foobar\", \"barfoo\"], x = \"foo\")",
        "findWordsContaining(words = [\"apple\", \"beetle\", \"cake\"], x = \"p\")"
    ],
    "sample_420": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "minOperations(nums = [1, 2, 3, 1], k = 3)",
        "minOperations(nums = [5,1,3,4,2], k = 3)",
        "minOperations(nums = [1, 1, 1, 1, 1, 1], k = 4)",
        "minOperations(nums = [1, 1, 1, 2, 2], k = 2)",
        "minOperations(nums = [2,3,1,2], k = 3)",
        "minOperations(nums = [2,1,4,3], k = 3)",
        "minOperations(nums = [4,3,5,1,2,0], k = 4)",
        "minOperations(nums = [2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1], k = 2)"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3])",
        "isGood(nums = [1, 3, 5, 6])",
        "isGood(nums = [2, 1])",
        "isGood(nums = [3, 2, 1])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7])",
        "isGood(nums = [1, 3, 5])",
        "isGood(nums = [2, 4, 7, 9])"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [3, 5, 1, 2, 4], target = 9)",
        "lengthOfLongestSubsequence(nums = [2, 3, 4, 6, 7], target = 10)",
        "lengthOfLongestSubsequence(nums = [2, 1, 4, 5, 3], target = 7)",
        "lengthOfLongestSubsequence(nums = [1,3,5,4,6], target = 1)",
        "lengthOfLongestSubsequence(nums = [4, 6, 7, 8, 10], target = 10)",
        "lengthOfLongestSubsequence(nums = [3, 4, 6, 8], target = 22)",
        "lengthOfLongestSubsequence(nums = [4, 1, 1, 3, 3, 7], target = 1)",
        "lengthOfLongestSubsequence(nums = [3, 6, 10, 3, 2], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 4, 7, 10, 12, 23], target = 3)",
        "lengthOfLongestSubsequence(nums = [5, 5, 6, 2, 5, 6, 2, 1, 6, 5], target = 2)"
    ],
    "sample_365": [
        "isGood(nums = [1,2,3])",
        "isGood(nums = [1,2])",
        "isGood(nums = [1,1,2])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7])",
        "isGood(nums = [2, 3, 5])",
        "isGood(nums = [4,2,1])",
        "isGood(nums = [5,1,3,2,4])",
        "isGood(nums = [1,1,4,2,3])",
        "isGood(nums = [4,3,5,1,2])",
        "isGood(nums = [1,2,2,10,12])"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 2, 3])",
        "maxSubarrays(nums = [0, 1, 1, 1])",
        "maxSubarrays(nums = [0, 0, 1, 1, 1])",
        "maxSubarrays(nums = [0, 1, 1, 0, 0, 1, 1])",
        "maxSubarrays(nums = [1, 2, 3, 2, 3, 1])",
        "maxSubarrays(nums = [1, 2, 2, 1, 2])",
        "maxSubarrays(nums = [1, 1, 1, 2, 2, 3])",
        "maxSubarrays(nums = [2, 3, 1, 1, 4, 5])",
        "maxSubarrays(nums = [3, 1, 0, 0, 0, 0, 2, 1])",
        "maxSubarrays(nums = [2, 3, 1, 1, 2, 2, 2, 3, 1, 2, 2, 1, 3, 3, 3])"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 3)",
        "lengthOfLongestSubsequence(nums = [1,3,5,4,7], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [2,3,4,5], target = 4)",
        "lengthOfLongestSubsequence(nums = [1,4,2], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,2,1,3,2], target = 4)",
        "lengthOfLongestSubsequence(nums=[5,1,3,4,7], target=15)",
        "lengthOfLongestSubsequence(nums = [1,1,1,2,1,1,1], target = 6)",
        "lengthOfLongestSubsequence(nums = [0,1,0,2,2,1],target = 2)",
        "lengthOfLongestSubsequence(nums = [4, 1, 1, 1, 2, 1, 1, 1, 2, 2, 2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 1], target = 5)"
    ],
    "sample_450": [
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abababa\")",
        "minChanges(s = \"abccba\")",
        "minChanges(s = \"baba\")",
        "minChanges(s = \"abbc\")",
        "minChanges(s = \"babaa\")",
        "minChanges(s = \"cccc\")",
        "minChanges(s = \"abdadb\")",
        "minChanges(s = \"saysaysay\")"
    ],
    "sample_463": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 8, limit = 3)",
        "distributeCandies(n = 8, limit = 5)",
        "distributeCandies(n = 11, limit = 5)",
        "distributeCandies(n = 13, limit = 4)",
        "distributeCandies(n = 100, limit = 10)",
        "distributeCandies(n = 20, limit = 7)"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1, 1, 1, 2, 3])",
        "sumCounts(nums = [2, 3, 2])",
        "sumCounts(nums = [2, 4, 2])",
        "sumCounts(nums = [1,2,3,1,2,1,2,3])"
    ],
    "sample_449": [
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aaa\")",
        "minChanges(s=\"aa\")",
        "minChanges(s = \"aaaa\")",
        "minChanges(s = \"abbb\")",
        "minChanges(s = \"abbc\")",
        "minChanges(s = \"aaaaaaaa\")",
        "minChanges(s = \"1111\")",
        "minChanges(s = \"aabcd\")"
    ],
    "sample_425": [
        "minOperations(nums = [1, 1, 1])",
        "minOperations(nums = [1, 1])",
        "minOperations(nums = [1, 1])",
        "minOperations(nums = [2])",
        "minOperations(nums = [3, 1, 4])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [3, 1, 7])",
        "minOperations(nums = [1, 2, 2, 3, 3, 4])",
        "minOperations(nums = [2, 1, 1, 1, 2, 1])",
        "minOperations(nums = [5, 1, 1, 1, 1, 4, 2, 3, 3])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"bacd\")",
        "canMakeSubsequence(str1 = \"aab\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ca\")",
        "canMakeSubsequence(str1 = \"abcba\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"acbd\")",
        "canMakeSubsequence(str1 = \"zaz\", str2 = \"bab\")",
        "canMakeSubsequence(str1 = \"abzzzz\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"bbabz\", str2 = \"bza\")",
        "canMakeSubsequence(str1 = \"abcsd\", str2 = \"aczb\")",
        "canMakeSubsequence(str1 = \"zazax\", str2 = \"xayz\")"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1,2,3])",
        "minimumSeconds(nums = [1,2,3,4])",
        "minimumSeconds(nums = [1,3,4,2])",
        "minimumSeconds(nums = [0,0,0,0])",
        "minimumSeconds(nums = [1,1,2,1])",
        "minimumSeconds(nums = [4,3,2,1])",
        "minimumSeconds(nums = [3,2,5,3,2])",
        "minimumSeconds(nums = [2, 1, 3, 4, 3, 3])",
        "minimumSeconds(nums = [3,4,4,5,6,1,1,1])",
        "minimumSeconds(nums = [0,2,4,0,1,4,0,5,1])"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [3,7,1,6], target = 1)",
        "lengthOfLongestSubsequence(nums = [1,3,5,4,7],target=15)",
        "lengthOfLongestSubsequence(nums = [6, 1, 3, 2, 2, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [1,1,3,3,5], target = 8)",
        "lengthOfLongestSubsequence(nums = [1,4,7,10], target = 2)",
        "lengthOfLongestSubsequence(nums = [4, 6, 7, 8, 2, 3, 5], target = 7)",
        "lengthOfLongestSubsequence(nums = [10,15,5,6,3,10], target = 7)",
        "lengthOfLongestSubsequence(nums = [1,5,3,3,3,4,6,1,7], target = 6)",
        "lengthOfLongestSubsequence(nums = [5,12,3,15,5,14], target = 10)"
    ],
    "sample_370": [
        "sortVowels(s = \"lEOtcede\")",
        "sortVowels(s = \"lEOTcede\")",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"tedeloc\")",
        "sortVowels(s = \"codelearn\")",
        "sortVowels(s = 'dog')",
        "sortVowels(s = 'The quick brown fox jumps over the lazy dog.')",
        "sortVowels(s = 'loctede')",
        "sortVowels(s = \"teledcoe\")",
        "sortVowels(s = 'leadtoced')"
    ],
    "sample_421": [
        "minOperations(nums = [1,2,3,4,5], k = 4)",
        "minOperations(nums = [1, 2, 3, 4], k = 5)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9], k = 3)",
        "minOperations(nums = [3, 4, 5, 1], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 3, 4, 1, 2], k = 3)",
        "minOperations(nums = [1, 4, 2, 6], k = 3)",
        "minOperations(nums = [3, 2, 1, 1, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 5, 4, 6], k = 5)",
        "minOperations(nums = [1, 2, 4, 2, 3, 5], k = 2)",
        "minOperations(nums = [1, 2, 4, 4, 3, 4, 2, 2, 1], k = 6)"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [3, 10, 5, 25, 2, 8])",
        "maxSubarrays(nums = [2, 1, 3, 5])",
        "maxSubarrays(nums = [1, 2, 2, 2, 1])",
        "maxSubarrays(nums = [1, 1, 0, 0])",
        "maxSubarrays(nums = [1, 2, 3, 1, 1, 3, 2])",
        "maxSubarrays(nums = [11, 13, 10, 11, 13, 10, 1])",
        "maxSubarrays(nums = [1,2,3,2,4,5,2])",
        "maxSubarrays(nums = [5, 1, 10, 3, 5, 10, 10, 5, 1, 5, 5])",
        "maxSubarrays(nums = [2,1,4,12,4,1,8,1])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[1, 3], [2, 4], [3, 5]], k = 2)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3], [4, 4]], k = 3)",
        "countPairs(coordinates = [[1, 1], [3, 2], [5, 2], [4, 1], [2, 3], [1, 6], [5, 3]], k = 2)",
        "countPairs(coordinates = [[0,0],[1,1],[1,0],[0,1]], k = 2)",
        "countPairs(coordinates = [[1, 2], [2, 3], [1, 4], [2, 4], [3, 4]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 3], [2, 4], [4, 3]], k = 2)",
        "countPairs(coordinates = [[2, 2], [4, 4], [4, 4]], k = 1)",
        "countPairs(coordinates = [(1, 2), (2, 3), (3, 1), (3, 4), (4, 5)], k = 3)",
        "countPairs(coordinates = [[1,1],[1,1],[2,1],[2,2],[2,2]], k = 3)",
        "countPairs(coordinates = [[0, 0], [0, 2], [0, 3], [0, 4], [1, 0], [1, 2], [1, 3], [2, 0], [2, 1], [2, 2]], k = 2)"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 3, 4, 2], target = 6)",
        "lengthOfLongestSubsequence(nums = [2, 7, 4, 18, 17, 6], target = 20)",
        "lengthOfLongestSubsequence(nums = [5, 1, 2, 3, 4], target = 8)",
        "lengthOfLongestSubsequence(nums = [3, 6, 3, 4], target = 8)",
        "lengthOfLongestSubsequence(nums = [1, 4, 7, 3, 4], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 2, 4, 6, 8, 9, 10], target = 14)"
    ],
    "sample_445": [
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1,1,2])",
        "sumCounts([1,2,3])",
        "sumCounts(nums = [1,1,1,1,1])",
        "sumCounts([1,1])",
        "sumCounts(nums = [1,1,1,2,2,2,3,3,3])",
        "sumCounts([1,1,1,1,1,1])",
        "sumCounts(nums=[1,2,3,1,3,1])",
        "sumCounts(nums = [3, 4, 4, 3, 3, 4, 3, 4])"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"111\")",
        "minimumBeautifulSubstrings(s = \"bb\")",
        "minimumBeautifulSubstrings(s = \"123456789\")",
        "minimumBeautifulSubstrings(s = \"abcdefgh\")",
        "minimumBeautifulSubstrings(s = \"0101001101\")",
        "minimumBeautifulSubstrings(s = \"0000\")",
        "minimumBeautifulSubstrings(s = \"abbccb\")",
        "minimumBeautifulSubstrings(s = \"0011011011011011110110111011011110110111011011110111110111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(\"5544255443355255225252355\")",
        "minimumBeautifulSubstrings
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 1, 0, 1, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [1,2,3])",
        "maxSubarrays(nums = [1, 2, 3, 2, 1])",
        "maxSubarrays(nums = [1, 1, 1, 0, 0, 0])",
        "maxSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "maxSubarrays(nums = [1, 2, 3, 1, 0, 0, 1])",
        "maxSubarrays(nums = [4, 1, 1, 2])",
        "maxSubarrays(nums = [0, 2, 1, 0, 2])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 1, 1, 1, 1, 0])"
    ],
    "sample_401": [
        "maxSum(nums = [3, 1, 2, 10, 1, 3, 1, 3, 2], m = 3, k = 4)",
        "maxSum(nums = [0, 0, 0], m = 2, k = 3)",
        "maxSum(nums = [0, 0, 0], m = 1, k = 2)",
        "maxSum(nums = [0, 0, 0], m = 1, k = 2)",
        "maxSum(nums = [2, 3, 1, 2, 3], m = 2, k = 3)",
        "maxSum(nums = [1, 3, -1, -3, 5], m = 2, k = 1)",
        "maxSum(nums = [1,2,3,1,4], m = 2, k = 5)",
        "maxSum(nums = [2, 3, 2, 3], m = 3, k = 2)",
        "maxSum(nums = [4, -3, -3, 8, 4], m = 2, k = 2)",
        "maxSum(nums = [3, 2, 6, 2, 4], m = 3, k = 2)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3, 4], m = 2, k = 3)",
        "maxSum(A = [2, 3, 1, 2, 4, 3], m = 2, k = 2)",
        "maxSum(A = [5, 1, 3, 4, 2], m = 2, k = 3)",
        "maxSum(A = [1, 2, 2, 2], m = 1, k = 2)",
        "maxSum(A = [0, 1, 2, 2, 2, 3, 3, 4], m = 3, k = 4)",
        "maxSum(A = [3,10,2,1,1,9], m = 2, k = 2)",
        "maxSum(A = [0, 1, 1, 2, 2, 2, 3], m = 3, k = 5)",
        "maxSum(A = [10, -2, -2, -2, 1, 2, 3, 2, 5], m = 4, k = 3)",
        "maxSum(A = [0, 1, 1, 0, 1, 0], m = 4, k = 4)",
        "maxSum(A = [0, 1, 2, 0, 0, 0, 0, 1, 0], m = 3, k = 5)"
    ],
    "sample_363": [
        "isGood(nums = [1, 1, 2, 2, 3])",
        "isGood(nums = [1, 2, 3, 3, 3])",
        "isGood(nums = [1, 3, 3, 3])",
        "isGood(nums = [2, 3, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 3, 3])",
        "isGood(nums = [1,2,2,3,4])",
        "isGood(nums = [1, 2, 3, 4, 4, 4, 5, 6])",
        "isGood(nums = [1, 2, 4, 4, 3])",
        "isGood(nums = [3, 5, 5, 3])",
        "isGood(nums = [5, 4, 4, 3, 1, 1])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1, 1, 1, 1, 1])",
        "minimumSeconds(nums = [1, 2, 2, 1])",
        "minimumSeconds(nums = [1, 3, 2, 4])",
        "minimumSeconds(nums = [1, 2, 4, 5])",
        "minimumSeconds(nums = [1, 4, 4])",
        "minimumSeconds(nums = [2, 1, 5, 4, 3])",
        "minimumSeconds(nums = [1,2,1,2,1])",
        "minimumSeconds([1, 3, 4, 1, 2])",
        "minimumSeconds(nums = [10,10,2])",
        "minimumSeconds(nums = [2, 4, 10, 1, 3, 5])"
    ],
    "sample_376": [
        "minimumSeconds(nums = [1, 2])",
        "minimumSeconds(nums = [1,2,1])",
        "minimumSeconds(nums = [2, 2])",
        "minimumSeconds(nums = [2, 1, 1])",
        "minimumSeconds([0, 0])",
        "minimumSeconds([1,3,2])",
        "minimumSeconds(nums = [4,2,5,3,1])",
        "minimumSeconds(nums = [1, 2, 1, 3, 5, 4, 2, 3, 5, 4, 6, 7])",
        "minimumSeconds(nums = [1,2,3,3,4,4,5,6,6,6])",
        "minimumSeconds(nums = [1, 3, 4, 3, 3, 2])"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [3, 4, 2, 2, 1])",
        "minLengthAfterRemovals(nums = [2, 2, 2, 1, 2])",
        "minLengthAfterRemovals(nums = [1,2,1,1,1,1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [3,2,1,5])",
        "minLengthAfterRemovals(nums = [2, 1, 4, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 1, 2, 4, 2, 1])",
        "minLengthAfterRemovals([10, 12, 24, 3, 12, 5, 6, 15, 4])"
    ],
    "sample_399": [
        "maxSum(nums = [1,3,-1,-3,5,3,6,7], m = 3, k = 3)",
        "maxSum(nums = [0], m = 1, k = 0)",
        "maxSum(nums = [0, 0, 0, 0, 0], m = 3, k = 2)",
        "maxSum(nums = [0,0,0,0,0,0], m = 2, k = 2)",
        "maxSum(nums = [0,0,0,0,0,0,0], m = 3, k = 3)",
        "maxSum(nums = [0, 0, 0, 1, 2], m = 2, k = 5)",
        "maxSum(nums = [4,4,5,1], m = 2, k = 2)",
        "maxSum(nums = [2, 1, 5, 1, 3, 1, 1], m = 4, k = 3)",
        "maxSum(nums = [1,3,2,6,3,4], m = 2, k = 4)",
        "maxSum(nums = [100, 1, 3, 4, 5, 6], m = 2, k = 4)"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 1, 1, 1, 1], m = 2, k = 2)",
        "maxSum(nums = [1,1,1], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 1], m = 1, k = 2)",
        "maxSum(nums = [1, 1, 1, 2, 3], m = 2, k = 3)",
        "maxSum(nums = [1, 1, 1, 2], m = 1, k = 3)",
        "maxSum(nums = [1, 2, 2, 3, 3, 3], m = 2, k = 3)",
        "maxSum(nums = [1, 3, 1, 2, 3], m = 2, k = 2)",
        "maxSum(nums = [4, 5, 6], m = 1, k = 3)",
        "maxSum(nums = [1,2,3,2,2,2], m = 2, k = 2)"
    ],
    "sample_364": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [3,1,2,4])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7])",
        "isGood(nums = [3,4,5,1,2])",
        "isGood(nums = [2, 1, 3, 4, 5])",
        "isGood(nums = [2, 4, 5])",
        "isGood(nums = [3,2,5,1,7,4])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1,1,3,3,5,5])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [5, 5, 5, 5, 5])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 2])",
        "minLengthAfterRemovals(nums = [1,2,2,1,1])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 3, 2, 3])",
        "minLengthAfterRemovals(nums = [0, 1, 1, 2, 2, 2, 3, 3, 3, 4])"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"abc\", \"xyz\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"orange\"], x = \"ana\")",
        "findWordsContaining(words = [\"b\", \"apple\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apples\", \"bananas\", \"carrots\"], x = \"ap\")",
        "findWordsContaining(words = [\"aa\", \"aa\"], x = \"a\")",
        "findWordsContaining(words = [\"hi\", \"bye\"], x = \"b\")",
        "findWordsContaining(words = [\"are\", \"you\", \"there\"], x = \"there\")",
        "findWordsContaining(words = [\"hey\", \"hi\", \"byebye\"], x = \"ye\")",
        "findWordsContaining(words = [\"bob\", \"banana\", \"sandwich\"], x = \"ban\")",
        "findWordsContaining(words = [\"are\", \"ab\", \"abracadabra\"], x = \"ab\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 1, 1, 1])",
        "minimumCoins(prices = [1, 3, 2, 1])",
        "minimumCoins(prices = [1, 1, 2, 3])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100, 200])",
        "minimumCoins(prices = [3, 7, 10, 12])",
        "minimumCoins(prices = [1, 4, 2, 5, 6, 3])",
        "minimumCoins(prices = [2, 1, 3, 2, 1, 5, 1])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s = \"0110\")",
        "minimumBeautifulSubstrings(s = \"00000\")",
        "minimumBeautifulSubstrings(s = \"1100\")",
        "minimumBeautifulSubstrings(s = \"00100\")",
        "minimumBeautifulSubstrings(s = \"10010\")",
        "minimumBeautifulSubstrings(s = \"110\")",
        "minimumBeautifulSubstrings(s = \"10010\")",
        "minimumBeautifulSubstrings(s = \"abababababababa\")",
        "minimumBeautifulSubstrings(s = \"111010110101\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abcd\", s2 = \"acdb\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acbd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"ac\")",
        "canBeEqual(s1 = \"aba\", s2 = \"bba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcdf\")",
        "canBeEqual(s1 = \"aba\", s2 = \"baba\")",
        "canBeEqual(s1 = \"1234\", s2 = \"1324\")",
        "canBeEqual(s1 = \"gggg\", s2 = \"ggaa\")"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"banana\", str2 = \"banana\")",
        "canMakeSubsequence(str1 = \"zyx\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"xyz\", str2 = \"axb\")",
        "canMakeSubsequence(str1 = \"za\", str2 = \"b\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"acdbz\")",
        "canMakeSubsequence(str1 = \"bab\", str2 = \"bzz\")",
        "canMakeSubsequence(str1 = \"bcz\", str2 = \"aac\")",
        "canMakeSubsequence(str1 = \"abbb\", str2 = \"zb\")",
        "canMakeSubsequence(str1 = \"miaow\", str2 = \"aowme\")",
        "canMakeSubsequence(str1 = \"xyyzzz\", str2 = \"aaxbxc\")"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1, 1, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 3, 4])",
        "minLengthAfterRemovals(nums = [2,2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 1, 3, 1, 3])",
        "minLengthAfterRemovals([4, 4])",
        "minLengthAfterRemovals([2, 4, 4, 4])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"aba\", s2 = \"baa\")",
        "canBeEqual(s1 = \"aabcc\", s2 = \"adcaa\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"aa\", s2 = \"aa\")",
        "canBeEqual(s1 = \"abab\", s2 = \"baab\")",
        "canBeEqual(s1 = \"abba\", s2 = \"baba\")"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 4)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8], target = 10)",
        "countPairs(nums = [3, 1, 7, 11], target = 10)",
        "countPairs(nums = [1, 1, 1, 2, 2], target = 3)",
        "countPairs(nums = [1, 3, 2, 5], target = 4)",
        "countPairs(nums = [2, 2, 3, 4, 5, 6], target = 8)",
        "countPairs(nums = [3,1,5,2,4,6], target = 5)",
        "countPairs(nums = [1, 2, 2, 5, 5, 6], target = 6)",
        "countPairs(nums = [2, 4, 5, 1, 1], target = 10)",
        "countPairs(nums = [1, 3, 3, 6, 2, 5], target = 7)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"abba\", s2 = \"bab\")",
        "canMakeSubsequence(s1=\"abz\", s2=\"az\")",
        "canMakeSubsequence(s1=\"zebra\", s2=\"abz\")",
        "canMakeSubsequence(s1 = \"aaa\", s2 = \"bbaa\")",
        "canMakeSubsequence(s1 = \"zab\", s2 = \"zyxa\")",
        "canMakeSubsequence(s1=\"zaba\", s2=\"za\")",
        "canMakeSubsequence(s1 = \"banana\", s2 = \"nnan\")",
        "canMakeSubsequence(s1 = \"xabz\", s2 = \"aabz\")",
        "canMakeSubsequence(s1 = \"bcdef\", s2 = \"bafzde\")",
        "canMakeSubsequence(s1 = \"kaka\", s2 = \"zebza\")"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\"])",
        "lastVisitedIntegers([\"prev\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"123\", \"prev\", \"456\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"next\", \"2\", \"next\", \"3\"])",
        "lastVisitedIntegers(words = ['prev', '3', 'prev', '4'])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"next\", \"1\", \"next\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"42\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"3\", \"prev\", \"prev\", \"prev\", \"4\", \"prev\", \"prev\"])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3]], k = 1)",
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6]], k = 2)",
        "countPairs(coordinates = [[1, 2], [2, 1], [1, 0], [2, 0]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 1], [2, 2]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 0], [0, 1], [1, 1], [0, 0], [1, 0], [0, 1], [1, 1], [0, 0], [1, 0]], k = 1)",
        "countPairs(coordinates = [[1, 2], [3, 2], [4, 2], [5, 2]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 1], [3, 3], [4, 4], [5, 2], [2, 5]], k = 3)",
        "countPairs(coordinates = [(1, 2), (1, 4), (2, 1), (3, 3)], k = 1)",
        "countPairs(coordinates = [[0, 0], [2, 0], [0, 1], [2, 1], [1, 2], [1, 1]], k = 2)",
        "countPairs(coordinates = [(1, 3), (1, 2), (2, 1), (3, 1), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (5, 4)], k = 1)"
    ],
    "sample_451": [
        "minChanges(s = \"abca\")",
        "minChanges(s = \"code\")",
        "minChanges(s = \"abbc\")",
        "minChanges(s = \"baaaa\")",
        "minChanges(s = \"abacba\")",
        "minChanges(s = \"raja\")",
        "minChanges(s = \"pqpppqp\")",
        "minChanges(s = \"toleza\")",
        "minChanges(s = \"wadsfjh\")",
        "minChanges(s = \"MJJJJKJJJK\")"
    ],
    "sample_461": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 15, limit = 5)",
        "distributeCandies(n = 12, limit = 4)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 14, limit = 6)",
        "distributeCandies(n = 35, limit = 10)",
        "distributeCandies(n = 100, limit = 2)",
        "distributeCandies(n = 21, limit = 11)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"abc\", s2 = \"acb\")",
        "canBeEqual(s1 = \"aba\", s2 = \"aba\")"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 12, limit = 3)",
        "distributeCandies(n = 12, limit = 3)",
        "distributeCandies(n = 15, limit = 5)",
        "distributeCandies(n = 11, limit = 5)",
        "distributeCandies(n = 9, limit = 5)",
        "distributeCandies(n = 12, limit = 10)"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 9)",
        "accountBalanceAfterPurchase(p = 15)",
        "accountBalanceAfterPurchase(p = 20)",
        "accountBalanceAfterPurchase(p = 25)",
        "accountBalanceAfterPurchase(p = 55)",
        "accountBalanceAfterPurchase(p = 105)",
        "accountBalanceAfterPurchase(p = 2)",
        "accountBalanceAfterPurchase(p = 1)",
        "accountBalanceAfterPurchase(p = 1)",
        "accountBalanceAfterPurchase(101)"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [2, 2, 2, 2])",
        "sumCounts(nums = [2, 1])",
        "sumCounts(nums = [1, 1, 1, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 13, 14, 15, 16])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1,1,1,1,1])",
        "minimumSeconds(A = [1,1])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [2, 1, 1])",
        "minimumSeconds(A = [1, 3, 5])",
        "minimumSeconds(A = [3, 4, 1, 2])",
        "minimumSeconds([1, 3, 1])",
        "minimumSeconds(A = [2,1,4,3])",
        "minimumSeconds([4])",
        "minimumSeconds(A = [1, 2, 1, 1, 3])"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bac\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"a\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"aab\")",
        "canMakeSubsequence(str1 = \"zyx\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"abcdefghij\")",
        "canMakeSubsequence(str1 = \"zxa\", str2 = \"xz\")",
        "canMakeSubsequence(str1 = \"cabba\", str2 = \"abbb\")",
        "canMakeSubsequence(str1 = \"abccbb\", str2 = \"aabc\")"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 3, 2])",
        "minimumRightShifts(nums = [1, 1, 1])",
        "minimumRightShifts(nums = [1, 2, 3, 1])",
        "minimumRightShifts(nums = [2, 5, 1, 3, 4])",
        "minimumRightShifts(nums = [2, 2, 1])",
        "minimumRightShifts([1, 2, 1])",
        "minimumRightShifts(nums = [1, 3, 2, 4, 0])",
        "minimumRightShifts(nums = [1, 2, 1, 2, 1, 2, 1])",
        "minimumRightShifts([3, 4, 2])",
        "minimumRightShifts(nums = [2, 3, 6, 1, 8])"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1], l = 1, r = 1)",
        "countSubMultisets(nums = [1,1], l = 0, r = 1)",
        "countSubMultisets(nums = [1,2,2], l = 0, r = 2)",
        "countSubMultisets(nums = [1, 2, 3, 4], l = 2, r = 3)",
        "countSubMultisets(nums = [1, 2, 2], l = 0, r = 2)",
        "countSubMultisets(nums = [1,2,3,3], l = 2, r = 3)",
        "countSubMultisets(nums = [1,1,2,2,3], l = 2, r = 3)",
        "countSubMultisets(nums = [2,1,2], l = 2, r = 3)",
        "countSubMultisets(nums = [0, 0, 1], l = 1, r = 3)",
        "countSubMultisets(nums = [1, 1, 2, 3, 1, 2, 1], l = 4, r = 6)"
    ],
    "sample_475": [
        "minimumCoins(prices = [2, 1, 3, 1])",
        "minimumCoins(prices = [1, 3, 5, 9])",
        "minimumCoins(prices = [1, 3, 2, 4, 5])",
        "minimumCoins(prices = [2, 3, 1, 1])",
        "minimumCoins(prices = [10, 3, 1])",
        "minimumCoins(prices = [10, 20, 20, 10])",
        "minimumCoins(prices = [1, 1, 1, 2, 1, 1])",
        "minimumCoins(prices = [5, 3, 1, 3, 4])",
        "minimumCoins([2, 3, 5, 11])",
        "minimumCoins(prices = [2, 5, 3, 7, 6, 4])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [2, 3, 5, 7, 11])",
        "minimumCoins(prices = [3, 2, 3])",
        "minimumCoins(prices = [2, 5, 1, 3])",
        "minimumCoins(prices = [1, 5, 2, 1])",
        "minimumCoins([10, 50, 1, 20, 100])",
        "minimumCoins(prices = [1, 4, 3, 2, 2, 4, 1, 1, 1])",
        "minimumCoins(prices = [1, 10, 4, 6, 1, 1, 1, 3, 1, 1, 1, 2])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"next\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"next\", \"prev\", \"1\"])",
        "lastVisitedIntegers([\"prev\", \"1\", \"prev\", \"2\", \"next\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"3\", \"prev\", \"1\"])",
        "lastVisitedIntegers([\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"1\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"4\", \"prev\", \"3\", \"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers([\"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers([\"1\", \"2\", \"next\", \"prev\", \"next\", \"next\", \"prev\"])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 2, 3])",
        "minOperations(nums = [1,2,3])",
        "minOperations(nums = [1,2,3,4])",
        "minOperations(nums = [4, 1, 2, 3])",
        "minOperations(nums = [2, 1, 1, 3])",
        "minOperations(nums = [4, 4])",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10,11,12])",
        "minOperations(nums = [3, 3, 1, 3, 1])",
        "minOperations(nums = [3, 1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [5, 4, 5, 4])"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"p\", \"p\", \"p\"])",
        "lastVisitedIntegers(words = [\"p\", \"1\", \"p\"])",
        "lastVisitedIntegers([\"p\", \"2\", \"3\", \"p\", \"1\"])",
        "lastVisitedIntegers(words = [\"p\", \"99\"])",
        "lastVisitedIntegers(words = [\"par\", \"par\", \"par\", \"par\", \"par\", \"par\", \"par\", \"par\", \"par\"])",
        "lastVisitedIntegers(words = [\"pi\",\"p0\",\"p1\"])",
        "lastVisitedIntegers(words = [\"p\", \"z\", \"p\", \"a\", \"x\"])",
        "lastVisitedIntegers([\"pap\", \"pap\", \"1\", \"pap\", \"pap\", \"pap\"])",
        "lastVisitedIntegers(words = [\"p2\", \"p3\", \"pa\", \"p5\", \"p4\", \"p1\"])",
        "lastVisitedIntegers(words = [\"p5\", \"p1\", \"p2\", \"p3\", \"4\", \"5\", \"p7\"])"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1,1,1,1])",
        "minimumSeconds(nums = [5,4,3,2,1])",
        "minimumSeconds(nums = [1,3,2,4,2])",
        "minimumSeconds(nums = [10, 10, 10, 10])",
        "minimumSeconds(nums = [2,2,6,6,6,8,8])",
        "minimumSeconds(nums = [2, 4, 3, 1])",
        "minimumSeconds(nums = [1,3,5,2,2])",
        "minimumSeconds(nums = [1,3,1,3,3,3])",
        "minimumSeconds(nums = [0,0,1,2,2,2])",
        "minimumSeconds(nums = [10, 6, 8, 4])"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cantaloupe\"], x = \"a\")",
        "findWordsContaining(words = [\"dog\", \"cat\", \"banana\"], x = \"na\")",
        "findWordsContaining(words = [\"brown\", \"fox\", \"jumps\"], x = \"o\")",
        "findWordsContaining(words = [\"the\", \"quick\", \"brown\", \"fox\"], x = \"k\")",
        "findWordsContaining(words = [\"car\", \"carrot\", \"carrot cake\"], x = \"car\")",
        "findWordsContaining(words = [\"a\", \"ab\", \"ab\"], x = \"ab\")",
        "findWordsContaining(words = [\"apple\", \"applepie\", \"pear\"], x = \"pear\")",
        "findWordsContaining(words = [\"buy\", \"butter\", \"buy\"], x = \"bu\")",
        "findWordsContaining(words = [\"there\", \"great\", \"night\", \"of\", \"day\"], x = \"a\")",
        "findWordsContaining(words = [\"scary\", \"sara\", \"dark\", \"alarm\"], x = \"a\")"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 2, 3, 1])",
        "maxSubarrays(nums = [1, 2, 3, 1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [2, 10, 3, 1, 5, 8])",
        "maxSubarrays(nums = [0,1,0,1,0,0,1])",
        "maxSubarrays(nums = [1, 2, 1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1,2,3,0,1,2,0,1,0])",
        "maxSubarrays(nums = [10, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5])"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"10\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"123\", \"prev\", \"456\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"prev\", \"1\", \"2\"])",
        "lastVisitedIntegers([\"prev\", \"prev\", \"prev\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"1\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"next\", \"2\", \"1\", \"prev\"])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3], target = 4)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 7)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 3)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6, 7], target = 6)",
        "countPairs(nums = [3, 1, 2, 1, 1], target = 3)",
        "countPairs(nums = [0, 3, 1, 2], target = 4)",
        "countPairs(nums = [3, 3, 3, 4, 4, 4, 5, 5], target = 8)",
        "countPairs(nums = [4, 1, 3, 3, 1], target = 2)",
        "countPairs(nums = [2, 5, 8, 10, 15, 19, 20, 21], target = 19)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"aaa\", s2 = \"bbb\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acdb\")",
        "canBeEqual(s1 = \"ab\", s2 = \"aa\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"efgh\")",
        "canBeEqual(s1 = \"acca\", s2 = \"aaac\")",
        "canBeEqual(s1 = \"abca\", s2 = \"c\")",
        "canBeEqual(s1 = \"aba\", s2 = \"baba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acd\")",
        "canBeEqual(s1 = \"abac\", s2 = \"cab\")",
        "canBeEqual(s1 = \"aaaabbbb\", s2 = \"aaabbbb\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"next\", \"2\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"next\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers([\"prev\", \"prev\", \"next\", \"prev\", \"next\", \"prev\"])",
        "lastVisitedIntegers([\"prev\", \"1\", \"prev\", \"1\", \"next\", \"next\"])",
        "lastVisitedIntegers([\"prev\", \"2\", \"prev\", \"prev\", \"1\", \"next\"])",
        "lastVisitedIntegers([\"1\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\"])"
    ],
    "sample_464": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 4, limit = 3)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 5, limit = 4)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6])",
        "minimumRightShifts(nums = [2, 4, 1, 3, 5])",
        "minimumRightShifts(nums = [1, 3, 2, 4, 1])",
        "minimumRightShifts(nums = [2, 1, 2, 3, 1])",
        "minimumRightShifts(nums = [3, 5, 3])",
        "minimumRightShifts([3, 2, 1, 5])",
        "minimumRightShifts(nums = [3, 4, 6, 2, 9])",
        "minimumRightShifts(nums = [1, 3, 4, 10, 10])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"n\")",
        "findWordsContaining(words = [\"apple\", \"orange\"], x = \"p\")",
        "findWordsContaining(words = [\"dog\", \"cat\", \"bat\"], x = \"t\")",
        "findWordsContaining(words = [\"lemon\", \"banana\", \"apple\"], x = \"a\")",
        "findWordsContaining(words = [\"abcd\", \"acde\"], x = \"ac\")",
        "findWordsContaining(words = [\"boat\", \"car\", \"boat\"], x = \"boat\")",
        "findWordsContaining(words = [\"lemon\", \"lime\", \"ladybug\"], x = \"l\")",
        "findWordsContaining(words = [\"xyz\", \"fds\"], x = \"x\")",
        "findWordsContaining(words = [\"asdf\", \"sdfghj\", \"fghjkl\"], x = \"df\")",
        "findWordsContaining(words = [\"yap\", \"yap\", \"kid\", \"great\"], x = \"y\")"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 3], m = 2, k = 2)",
        "maxSum(nums = [1, 3, 2], m = 2, k = 2)",
        "maxSum(nums = [1,2,2,2,5], m = 2, k = 3)",
        "maxSum(nums = [2, 3, 4, 1], m = 2, k = 2)",
        "maxSum(nums = [0, 1], m = 1, k = 1)",
        "maxSum(nums = [3, 2, 3], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 3], m = 3, k = 1)",
        "maxSum(nums = [1,1,2,3,1], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 1, 4, 1], m = 2, k = 1)",
        "maxSum(nums = [100, 101, 102, 103, 104, 105], m = 2, k = 1)"
    ],
    "sample_424": [
        "minOperations(nums = [1,1,2,3])",
        "minOperations(nums = [1,2,3,2])",
        "minOperations(nums = [1,1,1,3])",
        "minOperations(nums = [1,2,3,4,3])",
        "minOperations(nums = [3,2,1,1,2])",
        "minOperations(nums = [1,1,1,3,3,4,3,4])",
        "minOperations(nums = [4,2,3,5])",
        "minOperations(nums = [1,2,3,5,4,6])",
        "minOperations(nums = [2,3,5,7,11,13,17])",
        "minOperations(nums = [3,1,4,2,2,5,2,1,5,3,1])"
    ],
    "sample_417": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [3,2,2,4], k = 3)",
        "minOperations(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "minOperations(nums = [3, 2, 1], k = 3)",
        "minOperations(nums = [2,1,3,4,5], k = 3)",
        "minOperations(nums = [1, 3, 5, 6, 7], k = 3)",
        "minOperations(nums = [1, 2, 4, 3, 5], k = 3)",
        "minOperations(nums = [2, 1, 3, 4, 1], k = 3)",
        "minOperations(nums = [0,1,3], k = 1)",
        "minOperations(nums = [0,2,1,0,2,0,1,3,2,1,2,1], k = 3)"
    ],
    "sample_371": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = 'lymph')",
        "sortVowels(s = 'lymph')",
        "sortVowels(\"lYmpH\")",
        "sortVowels(s = \"lumpy\")",
        "sortVowels(s = \"lyMpH\")",
        "sortVowels(s = \"listen\")",
        "sortVowels(s = \"HabibiyLmpHy\")"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 4, limit = 1)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 9, limit = 3)"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 1])",
        "sumCounts(nums = [1, 2, 2, 1])",
        "sumCounts(nums = [1, 1, 3, 3, 10])"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 2, 1, 0, 0, 1])",
        "maxSubarrays(nums = [1, 1, 1, 1, 0, 0])",
        "maxSubarrays(nums = [1, 1, 0, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [3, 0, 1, 0, 3])",
        "maxSubarrays(nums = [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 2, 3, 5, 0, 0, 0, 1, 2, 3])",
        "maxSubarrays(nums = [4, 1, 0, 1, 0, 0, 1, 1, 0])"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts([1, 2, 3])",
        "sumCounts(nums = [1, 1])",
        "sumCounts(nums = [2, 2])",
        "sumCounts(nums = [1, 1, 3])",
        "sumCounts(nums = [1, 2, 3, 3, 2, 1])",
        "sumCounts(nums = [1, 1, 2, 3, 3, 2])"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"abc\", s2 = \"acb\")",
        "canBeEqual(s1 = \"aaa\", s2 = \"bbb\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acdb\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ac\")",
        "canBeEqual(s1 = \"aaaabbbb\", s2 = \"bbbbaaaa\")",
        "canBeEqual(s1 = \"aacaba\", s2 = \"aaacba\")",
        "canBeEqual(s1 = \"bbb\", s2 = \"abc\")"
    ],
    "sample_380": [
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1,2,3,4,5,6], target = 7)",
        "countPairs(nums = [1,2,3,4,5,6], target = 6)",
        "countPairs(nums = [1,3,5,6,7,10,12], target = 9)",
        "countPairs(nums = [2,5,1], target = 6)",
        "countPairs(nums = [1,3,2,1,1,2], target = 5)",
        "countPairs(nums = [0,1,1,2,3,4,5,5], target = 6)",
        "countPairs(nums = [3, 2, 5, 2, 7], target = 6)",
        "countPairs(nums = [2,3,5,10,15,16], target = 4)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 3, 1, 2])",
        "sumCounts(nums = [1, 2, 3, 1, 2])",
        "sumCounts(nums = [1, 2, 3, 3])",
        "sumCounts(nums = [1, 2, 3, 1, 1, 2, 3, 4, 3])"
    ],
    "sample_368": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(\"lYmpH\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"YmphLy\")",
        "sortVowels(s = \"Hymlp\")",
        "sortVowels(s = \"iYmyplH\")"
    ],
    "sample_462": [
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 50, limit = 3)"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 3, 2])",
        "minimumCoins([1, 2, 3, 4])",
        "minimumCoins(prices = [3, 2, 3])",
        "minimumCoins(prices = [1, 1, 2])",
        "minimumCoins(prices = [100, 200, 300])",
        "minimumCoins(prices = [2, 3, 2, 1])",
        "minimumCoins(prices = [1, 3, 4, 2, 2])"
    ],
    "sample_426": [
        "minOperations(nums = [1, 2, 3])",
        "minOperations(nums = [1])",
        "minOperations(nums = [1, 2])",
        "minOperations(nums = [1,1,1])",
        "minOperations(nums = [2, 2])",
        "minOperations(nums = [1, 2, 4])",
        "minOperations(nums = [1, 3, 4])",
        "minOperations(nums = [1, 1, 1, 2])",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minOperations(nums = [2,3,4])"
    ],
    "sample_423": [
        "minOperations(nums = [1])",
        "minOperations(nums = [1])",
        "minOperations(nums = [1, 1, 1])",
        "minOperations(nums = [1,1])",
        "minOperations(nums = [1,1])",
        "minOperations(nums = [2])",
        "minOperations(nums = [1, 2, 3, 6])",
        "minOperations(nums = [1, 2, 2, 3])",
        "minOperations(nums = [3,1,3,6,2,3,6,4,1])",
        "minOperations(nums = [1, 2, 3, 3, 3, 2, 4, 6, 7, 7, 8, 8, 9, 9, 9, 9, 8, 7, 6, 4, 3, 3, 2, 1, 6, 9, 9, 9, 9])"
    ],
    "sample_476": [
        "minimumCoins(prices = [1,2,3])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1,3,2])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 1])",
        "minimumCoins(prices = [2, 1, 5, 3])",
        "minimumCoins(prices = [4,2,1])",
        "minimumCoins(prices = [2,3,2,1])",
        "minimumCoins(prices = [1, 5, 4, 2])",
        "minimumCoins([10,2,3,4,2,3,4])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 1, 1])",
        "minimumRightShifts(nums = [1, 1, 1])",
        "minimumRightShifts(nums = [1, 2, 1])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumRightShifts(nums = [2, 1])",
        "minimumRightShifts(nums = [1,2,3,1,2,3])",
        "minimumRightShifts(nums = [3,2,3])",
        "minimumRightShifts(nums = [0,0,1,1,0])",
        "minimumRightShifts(nums = [7, 1, 5, 2, 7, 4, 5, 3])"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 1, 1])",
        "minimumRightShifts(nums = [1, 3, 2])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [2, 1, 3, 4])",
        "minimumRightShifts(nums = [3, 2, 3])",
        "minimumRightShifts(nums = [2, 3, 4])",
        "minimumRightShifts(nums = [1, 3, 2, 4, 5])",
        "minimumRightShifts(nums = [2, 3, 4, 5, 6, 7, 8])",
        "minimumRightShifts(nums = [2, 2, 2, 2, 3])",
        "minimumRightShifts(nums = [4, 4, 2, 4, 4, 4, 4, 4, 4, 4])"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"a\", s3 = \"b\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"cde\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"xyz\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"efgh\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"a\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"c\", s3 = \"d\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"bread\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"abcb\", s2 = \"bacb\", s3 = \"bcbc\")"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"abcabc\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abba\")",
        "longestSemiRepetitiveSubstring(s = \"ababc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabca\")",
        "longestSemiRepetitiveSubstring(s = \"abcba\")",
        "longestSemiRepetitiveSubstring(\"abcabc\")",
        "longestSemiRepetitiveSubstring(\"aaabaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaabbb\")",
        "longestSemiRepetitiveSubstring(\"abbbb\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"a\", \"b\", \"c\"])",
        "maximumNumberOfStringPairs(words = [\"ab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"ad\", \"da\"])",
        "maximumNumberOfStringPairs(words = [\"c\", \"c\", \"a\", \"a\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"a\", \"ab\", \"c\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"acc\", \"bcc\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"y\", \"xy\", \"xz\", \"z\", \"yx\"])",
        "maximumNumberOfStringPairs(words = [\"dog\", \"cat\", \"bat\", \"bat\", \"pot\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"aa\", \"bb\", \"bba\", \"bbaa\", \"bbb\", \"bbba\"])"
    ],
    "sample_247": [
        "minOperations(s1 = \"abc\", s2 = \"bcd\", x = 1)",
        "minOperations(s1 = \"abcd\", s2 = \"bcdf\", x = 1)",
        "minOperations(s1 = \"aba\", s2 = \"baba\", x = 1)",
        "minOperations(s1 = \"abcd\", s2 = \"dcba\", x = 2)",
        "minOperations(s1 = \"aaa\", s2 = \"bba\", x = 1)",
        "minOperations(s1 = \"adc\", s2 = \"wxy\", x = 2)",
        "minOperations(s1 = \"abba\", s2 = \"abba\", x = 2)",
        "minOperations(s1 = \"abc\", s2 = \"cbd\", x = 2)",
        "minOperations(s1 = \"abcda\", s2 = \"bcdac\", x = 2)",
        "minOperations(s1 = \"ob\", s2 = \"b\", x = 1)"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yx\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"b\", \"c\", \"d\"])",
        "maximumNumberOfStringPairs(words = [\"racecar\", \"carer\"])",
        "maximumNumberOfStringPairs(words = [\"onetwothree\", \"twothreeone\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"xyz\", \"efg\"])",
        "maximumNumberOfStringPairs(words = [\"ba\", \"ba\", \"b\"])",
        "maximumNumberOfStringPairs(words = [\"wow\", \"mom\"])",
        "maximumNumberOfStringPairs(words = [\"yaw\", \"wap\", \"map\"])",
        "maximumNumberOfStringPairs(words = [\"cad\", \"ba\", \"cad\"])"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1, 2, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [2, 2, 1])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 2, 3, 4])",
        "minGroupsForValidAssignment([2, 3, 1])",
        "minGroupsForValidAssignment(nums = [4, 2, 1, 5, 4])",
        "minGroupsForValidAssignment([2,1,1,1,3])",
        "minGroupsForValidAssignment(nums = [2, 1, 1, 2, 2, 2, 2, 3])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n = 12, m = 3)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 6, m = 2)",
        "differenceOfSums(n = 11, m = 2)",
        "differenceOfSums(n = 16, m = 4)",
        "differenceOfSums(n = 30, m = 4)",
        "differenceOfSums(n = 6, m = 5)"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"10110\", k = 2)",
        "shortestBeautifulSubstring(s = \"1011\", k = 1)",
        "shortestBeautifulSubstring(s = \"100110\", k = 2)",
        "shortestBeautifulSubstring(s = \"11011001\", k = 3)",
        "shortestBeautifulSubstring(s = \"1011010\", k = 1)",
        "shortestBeautifulSubstring(s = \"1100\", k = 2)",
        "shortestBeautifulSubstring(s = \"11000101\", k = 2)",
        "shortestBeautifulSubstring(s = \"0101100\", k = 1)",
        "shortestBeautifulSubstring(s = \"01101101101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1000100010000110010101\", k = 5)"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"ab\", s2 = \"ac\", s3 = \"bc\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"ab\", s3 = \"ac\")",
        "findMinimumOperations(s1 = \"aa\", s2 = \"b\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"aa\", s3 = \"aab\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"aaanan\", s3 = \"aaanaa\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"b\", s3 = \"b\")",
        "findMinimumOperations(s1 = \"aabb\", s2 = \"aac\", s3 = \"aabc\")",
        "findMinimumOperations(s1 = \"aaabbb\", s2 = \"bb\", s3 = \"aabba\")",
        "findMinimumOperations(s1 = \"babc\", s2 = \"cbda\", s3 = \"adc\")",
        "findMinimumOperations(s1 = \"baaanana\", s2 = \"nanaa\", s3 = \"anaaa\")"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"abababa\")",
        "longestSemiRepetitiveSubstring(s = \"abababa\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"aabb\")",
        "longestSemiRepetitiveSubstring(s = \"bababa\")",
        "longestSemiRepetitiveSubstring(s = \"abc\")",
        "longestSemiRepetitiveSubstring(s = \"abaabc\")",
        "longestSemiRepetitiveSubstring(\"abacab\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcc\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabcbb\")"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3, 0, 0], nums2 = [4, 5, 6, 0, 0])",
        "minSum(nums1 = [4, 5, 6], nums2 = [1, 2, 3])",
        "minSum(nums1 = [0, 0, 0, 1], nums2 = [0, 1, 2, 3])",
        "minSum(nums1 = [1, 3, 0], nums2 = [2, 0, 5])",
        "minSum(nums1 = [1, 0, 2, 0], nums2 = [3, 0, 2, 0])",
        "minSum(nums1 = [1, 1, 0, 0, 0], nums2 = [0, 1, 1, 1, 0])",
        "minSum(nums1 = [0, 0, 0], nums2 = [10, 5, 0])",
        "minSum(nums1 = [0, 5, 3], nums2 = [5, 2])",
        "minSum(nums1 = [1,0,2,3,0,4,0], nums2 = [0,5,0,1])",
        "minSum(nums1 = [3, 2, 7, 0, 5], nums2 = [10, 0, 0, 3])"
    ],
    "sample_289": [
        "minimumSteps(s = \"111\")",
        "minimumSteps(s = \"11\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"10100\")",
        "minimumSteps(s = \"111111111111\")",
        "minimumSteps(s = \"0001101\")",
        "minimumSteps(s = \"10010110\")",
        "minimumSteps(s = \"110010100\")"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [1,2,3,4])",
        "maximumTripletValue(nums = [0,0,0])",
        "maximumTripletValue(nums = [5, 4, 3, 2, 1])",
        "maximumTripletValue(nums = [-1,0,2])",
        "maximumTripletValue(nums = [2, -1, 0, 3])"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"aiueo\", k = 3)",
        "beautifulSubstrings(s = \"aabaa\", k = 2)",
        "beautifulSubstrings(s = \"abab\", k = 10)",
        "beautifulSubstrings(s = \"aibao\", k = 7)",
        "beautifulSubstrings(s = \"geeksforgeeks\", k = 3)",
        "beautifulSubstrings(s=\"iiii\", k=2)",
        "beautifulSubstrings(s=\"abccc\",k=3)",
        "beautifulSubstrings(s = \"kj\", k = 4)",
        "beautifulSubstrings(s = \"papayo\", k = 3)",
        "beautifulSubstrings(s = \"aueiouaie\", k = 4)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"bb\")",
        "minimumBeautifulSubstrings(s = \"0\")",
        "minimumBeautifulSubstrings(s = \"110\")",
        "minimumBeautifulSubstrings(s = \"xx\")",
        "minimumBeautifulSubstrings(s = \"1110\")",
        "minimumBeautifulSubstrings(s = \"aaabbbb\")",
        "minimumBeautifulSubstrings(s = \"abcab\")",
        "minimumBeautifulSubstrings(s = \"4552455\")",
        "minimumBeautifulSubstrings(s = \"11101011110111111111110111111110110110111011010\")"
    ],
    "sample_313": [
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[1]])",
        "matrixSum([[1]])",
        "matrixSum(a = [[1, 1, 1], [1, 1, 1], [1, 1, 1]])",
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum(a = [[0, 1]])",
        "matrixSum(a = [[2,2,2], [2,2,2]])",
        "matrixSum(a = [[3, 2, 1], [4, 2, 1]])",
        "matrixSum(\n    a = [[0, 1], [1, 2], [2, 3]]\n)",
        "matrixSum(a = [[5,5,5], [10,10,10]])"
    ],
    "sample_269": [
        "minSum(nums1 = [0, 1, 2, 3], nums2 = [5, 6, 7, 8])",
        "minSum(nums1 = [1, 2, 0, 0], nums2 = [1, 2, 0, 0])",
        "minSum(nums1 = [1, 1, 1, 1], nums2 = [1, 1, 0, 0])",
        "minSum(nums1 = [0, 1, 2, 3, 4], nums2 = [1, 2, 3, 4, 5, 6, 7])",
        "minSum(nums1 = [1, 2, 4], nums2 = [3, 4, 5])",
        "minSum(nums1 = [1, 0, 1, 2], nums2 = [0, 6, 0, 5])",
        "minSum(nums1 = [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minSum(nums1 = [0, 1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1, 0, 12])",
        "minSum(nums1 = [0, 4, 10, 1], nums2 = [3, 6, 11])",
        "minSum(nums1 = [0, 1, 2, 3, 0, 1, 0, 3], nums2 = [0, 3, 3, 0, 1, 3, 1, 2])"
    ],
    "sample_282": [
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 3, 5, 7, 9])",
        "minOperations(nums1 = [1,2], nums2 = [3,4])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 1, 3])",
        "minOperations(nums1 = [1, 1, 1], nums2 = [2, 2, 2])",
        "minOperations(nums1 = [3,2,3], nums2 = [4,6,1])",
        "minOperations(nums1 = [0, 1, 2], nums2 = [2, 1, 0])",
        "minOperations(nums1 = [1,2,3], nums2 = [100,200,300])",
        "minOperations(nums1 = [2,1,1], nums2 = [1,2,2])",
        "minOperations(nums1 = [5, 1, 2, 3], nums2 = [4, 6, 7, 8])",
        "minOperations(nums1 = [3, 1, 5, 1, 7], nums2 = [1, 3, 4, 9, 5])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1,2,3,4,5,4,3,2,1])",
        "alternatingSubarray(nums = [1,1,2,2,3,3,4,4])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 3, 3])",
        "alternatingSubarray(nums = [1,2,2,1,2,2,1])",
        "alternatingSubarray(nums = [1, 2, 4, 4, 4, 4])",
        "alternatingSubarray([1,2,3,4,5,6,7,8])",
        "alternatingSubarray(nums = [2,3,2,1,4,2])",
        "alternatingSubarray(nums = [1,2,3,4,2,3,4,5,3,4,5])",
        "alternatingSubarray(nums = [1, 3, 2, 5, 3, 4, 6, 7, 8])",
        "alternatingSubarray(nums = [2, 2, 1, 3, 3, 2, 2, 3, 3, 3])"
    ],
    "sample_315": [
        "buyChoco(prices = [2, 1], money = 1)",
        "buyChoco(prices = [3, 2], money = 2)",
        "buyChoco(prices = [4, 2], money = 4)",
        "buyChoco(prices = [100, 50], money = 100)",
        "buyChoco(prices = [3,1], money = 2)",
        "buyChoco(prices = [5, 2], money = 4)",
        "buyChoco(prices = [10, 1, 2, 7, 6, 1, 6], money = 10)",
        "buyChoco(prices = [4, 1, 2], money = 5)",
        "buyChoco(prices = [2, 2, 2], money = 5)",
        "buyChoco(prices = [6, 4, 3, 5, 1, 8], money = 10)"
    ],
    "sample_302": [
        "countSeniors(details = [\"1234567890\", \"1111111111\"])",
        "countSeniors(details = [\"Adam Smith, 30, 123-4567\", \"Eve Jones, 45, 987-6543\"])",
        "countSeniors(details = ['010110000001', '110110000001', '000110000001'])",
        "countSeniors(details = [\"Sid\", \"John\", \"Pratik\", \"Sara\"])",
        "countSeniors(details = [\"Ashish\", \"007\", \"62\", \"63\", \"65\"])",
        "countSeniors(details = [\"i am 35 year old\",\"my father is 65 year old\",\"my mother is 58 year old\"])",
        "countSeniors(details = [\"Matthew, 25\", \"Katherine, 72\", \"Jennifer, 32\"])",
        "countSeniors(details = [\"Bob@78923464\", \"Bob@78923464\", \"Bob@78923464\", \"Bob@78923464\", \"Bob@78923464\", \"Bob@78923464\"])",
        "countSeniors(details = [\"Harshith 11th 35\", \"Abhi 45 35\"])",
        "countSeniors(details = [\"Sandy 24 11/06/1965\", \"Vicki 46 08/05/1962\"])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"a\", k = 2)",
        "beautifulSubstrings(s = \"a\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"aab\", k = 5)",
        "beautifulSubstrings(s = \"aee\", k = 2)",
        "beautifulSubstrings(s = \"aeeiioou\", k = 2)",
        "beautifulSubstrings(s = \"pear\", k = 5)",
        "beautifulSubstrings(s = \"happiness\", k = 4)"
    ],
    "sample_255": [
        "minimumSum(nums = [1,2,3,4])",
        "minimumSum(nums = [3,4,5,1,2])",
        "minimumSum(nums = [1, 3, 5, 7])",
        "minimumSum(nums = [1, 3, 5, 7])",
        "minimumSum(nums = [2,1,4,3])",
        "minimumSum(nums = [2, 4, 1, 3])",
        "minimumSum(nums = [5, 1, 2, 3])",
        "minimumSum(nums = [3,1,4])",
        "minimumSum(nums = [3, 5, 3])",
        "minimumSum(nums = [7,5,5,2])"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums = [2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1,1,3,3])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,10])",
        "minGroupsForValidAssignment(nums = [2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [10, 2, 5, 2, 3, 7, 5, 1])",
        "minGroupsForValidAssignment(nums = [1,2,1,1,1,2,1])",
        "minGroupsForValidAssignment(nums = [6,7,2,5,4,3,1])",
        "minGroupsForValidAssignment(nums = [4, 4, 1, 4, 1, 1, 1])",
        "minGroupsForValidAssignment([13,2,13,15,5,7,3,4,7,2,10,11,11,1,5,3])"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1,2,2,3,3])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 3, 2, 1])",
        "alternatingSubarray([1,2,3,4,4,3,2,1])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 4, 5])",
        "alternatingSubarray(nums = [1,2,1,2,3,4,5])",
        "alternatingSubarray(nums = [1, 2, 4, 3, 5, 4])",
        "alternatingSubarray(nums = [1,2,1,3,1,4,1,2])",
        "alternatingSubarray(nums = [3,1,2,4,5,7,6])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = \"1011010\", k = 2)",
        "shortestBeautifulSubstring(s = \"10101010\", k = 2)",
        "shortestBeautifulSubstring(s = \"111010\", k = 2)",
        "shortestBeautifulSubstring(s = \"110100\", k = 2)",
        "shortestBeautifulSubstring(s = \"10000\", k = 1)",
        "shortestBeautifulSubstring(s = \"101101111\", k = 3)",
        "shortestBeautifulSubstring(s = \"100011001\", k = 3)",
        "shortestBeautifulSubstring(s = '1011101', k = 1)",
        "shortestBeautifulSubstring(s = \"100011100\", k = 1)",
        "shortestBeautifulSubstring(s = \"0110110111011101\", k = 3)"
    ],
    "sample_293": [
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"001\")",
        "minimumSteps(s = \"01\")",
        "minimumSteps(s = \"100\")",
        "minimumSteps(s = \"0001\")",
        "minimumSteps(s = \"00100\")",
        "minimumSteps(s = \"000110\")",
        "minimumSteps(s = \"001001000\")",
        "minimumSteps(s = \"1000001000000\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abcd\")",
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"bbbbbbbb\")",
        "longestSemiRepetitiveSubstring(s = \"aabcccddd\")",
        "longestSemiRepetitiveSubstring(s = \"abcabdabcd\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabcaabc\")"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [1,1,1,2,3])",
        "minGroupsForValidAssignment([1,1,2,2,3])",
        "minGroupsForValidAssignment(nums = [2,1,3,2,4,2])",
        "minGroupsForValidAssignment(nums = [2, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1,1,2,3,5,8,7,6,2,1])",
        "minGroupsForValidAssignment(nums = [2,1,2,2,3,1])",
        "minGroupsForValidAssignment(nums = [5,4,3,2,1,1,1,1,1,1])",
        "minGroupsForValidAssignment(nums = [2,1,4,2,1,4,2,1,4])",
        "minGroupsForValidAssignment(nums = [1,1,1,0,0,0,1,0,0,0,1,1])",
        "minGroupsForValidAssignment(nums = [3, 1, 5, 1, 4, 1, 3, 1])"
    ],
    "sample_307": [
        "countSeniors(details = [\"Joe\", \"Jane\", \"Joe\"])",
        "countSeniors(details = [\"John\", \"Peter\", \"Sarah\", \"Emily\"])",
        "countSeniors(details = [\"w17\", \"w73\", \"e26\", \"a78\"])",
        "countSeniors(details = [\"Mike 19 66\", \"Ben 24 62\", \"Millie 18 58\", \"Bob 20 55\"])",
        "countSeniors(details = [\"joe 55 male\", \"bill 60 male\", \"dave 74 male\", \"ann 45 female\"])",
        "countSeniors(details = [\"ravi\", \"68\", \"tom\", \"56\"])",
        "countSeniors(details = [\"Peter: 19\", \"Anna: 29\", \"Maria: 60\", \"Peter: 17\", \"Anna: 42\", \"Maria: 13\"])",
        "countSeniors(details = [\"George 61\", \"Geoffrey 53\", \"Kayla 22\", \"George 82\"])",
        "countSeniors([\"Crystal 50-12\", \"Fred 40-32\", \"Cris 51-5\"])",
        "countSeniors(details = [\"rmc23\",\"ktq34\",\"mjw32\",\"gvr45\"])"
    ],
    "sample_290": [
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"00000000\")",
        "minimumSteps(s = \"0000000000\")",
        "minimumSteps(s = \"001\")",
        "minimumSteps(s = \"00010\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,2,2], moveFrom = [1,2], moveTo = [2,1])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [1,2], moveTo = [3,4])",
        "relocateMarbles(nums = [1, 2, 1, 2], moveFrom = [1, 2], moveTo = [2, 1])",
        "relocateMarbles(nums = [1,2,2,3], moveFrom = [2,1], moveTo = [3,2])",
        "relocateMarbles(nums = [2, 1, 3], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums = [1,3,5,1,2], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [2,2,2,2,2], moveTo = [1,3,2,4,1])",
        "relocateMarbles(nums = [3,4,3,4], moveFrom = [1,0], moveTo = [2,2])",
        "relocateMarbles(nums = [1,1,2,2,2,3],moveFrom=[1,2,2,2,1],moveTo=[2,2,1,3,2])",
        "relocateMarbles(nums = [5, 1, 2, 3, 4, 5, 6, 6],\n                                  moveFrom = [2, 1, 2, 2, 3],\n                                  moveTo = [1, 3, 4, 4, 5])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 3, 2, 4])",
        "alternatingSubarray(nums = [1, 2, 4])",
        "alternatingSubarray(nums = [1, 3, 2, 1])",
        "alternatingSubarray(nums = [1, 3, 5, 7, 9])",
        "alternatingSubarray(nums = [1, 2, 2, 2, 3])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 3, 1, 4, 2])",
        "alternatingSubarray(nums = [3, 1, 4, 2, 5])",
        "alternatingSubarray(nums = [1,2,2,3,4,4])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"abc\", k = 3)",
        "beautifulSubstrings(s = \"a\", k = 2)",
        "beautifulSubstrings(s = \"abab\", k = 2)",
        "beautifulSubstrings(s = \"abcd\", k = 5)",
        "beautifulSubstrings(s = \"aabaa\", k = 4)",
        "beautifulSubstrings(s = \"bannana\", k = 7)",
        "beautifulSubstrings(s = \"aaca\", k = 5)",
        "beautifulSubstrings(s = \"abcbcc\", k = 3)",
        "beautifulSubstrings(s = \"abeea\", k = 3)",
        "beautifulSubstrings(s = \"adbccaddc\", k = 7)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [0,0,0])",
        "maximumTripletValue(nums = [-2, 0, 1, 3])",
        "maximumTripletValue(nums = [-2, -1, 0, 1, 2])",
        "maximumTripletValue(nums = [1, -2, 3, 0])",
        "maximumTripletValue([-10, 0, 0, 10])",
        "maximumTripletValue(nums = [3,4,1,0,3])",
        "maximumTripletValue(nums = [2, -6, 3, 1, 2])",
        "maximumTripletValue(nums = [3, -3, 4, -5, 1])",
        "maximumTripletValue([-5,10,100])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abcd\", \"dabc\"])",
        "maximumNumberOfStringPairs(words = [\"apple\", \"apple\"])",
        "maximumNumberOfStringPairs(words = [\"in\", \"car\", \"tac\", \"cat\"])",
        "maximumNumberOfStringPairs(words = [\"xyx\", \"xxy\", \"xyx\"])",
        "maximumNumberOfStringPairs(words = [\"unix\", \"xun\"])",
        "maximumNumberOfStringPairs(words = [\"bcbcbc\", \"bcbcbc\", \"abcbabcbab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"xyx\", \"m\", \"du\", \"uz\"])",
        "maximumNumberOfStringPairs(words = [\"yap\", \"lop\", \"pit\", \"pya\", \"yap\"])"
    ],
    "sample_245": [
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n = 12, m = 3)",
        "differenceOfSums(n = 12, m = 3)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 15, m = 5)",
        "differenceOfSums(n = 6, m = 3)",
        "differenceOfSums(n = 100, m = 3)",
        "differenceOfSums(n = 12, m = 4)",
        "differenceOfSums(n = 24, m = 7)",
        "differenceOfSums(n = 100, m = 13)"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 3, 4], money = 1)",
        "buyChoco(prices = [1, 3, 5], money = 1)",
        "buyChoco(prices = [3, 4], money = 4)",
        "buyChoco(prices = [3, 7], money = 10)",
        "buyChoco(prices = [10, 9, 8, 7], money = 10)",
        "buyChoco(prices = [3, 2, 1, 5], money = 4)",
        "buyChoco(prices = [3, 4, 5, 1], money = 10)",
        "buyChoco(prices = [10, 30, 50, 40], money = 5)",
        "buyChoco(prices = [7, 2, 5, 6, 1], money = 4)",
        "buyChoco(prices = [3, 6, 4, 3, 2], money = 7)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"baba\", \"aba\", \"xzxb\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"dcab\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"a\", \"bb\", \"c\"])",
        "maximumNumberOfStringPairs(words = [\"it\", \"at\"])",
        "maximumNumberOfStringPairs(words = [\"dad\", \"mom\", \"bab\", \"xax\"])",
        "maximumNumberOfStringPairs(words = [\"za\", \"qj\", \"tq\", \"qw\", \"qw\"])",
        "maximumNumberOfStringPairs([\"coder\", \"code\", \"dedo\", \"ode\", \"dede\"])"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcdabcd\")",
        "longestSemiRepetitiveSubstring(s = \"abccd\")",
        "longestSemiRepetitiveSubstring(s = \"abbac\")",
        "longestSemiRepetitiveSubstring(s = \"aaabab\")",
        "longestSemiRepetitiveSubstring(s = \"abcdefghi\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcdef\")",
        "longestSemiRepetitiveSubstring(s = \"baannana\")",
        "longestSemiRepetitiveSubstring(s = \"ccaccc\")"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"a\",\"b\",\"c\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"def\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"ac\"])",
        "minimizeConcatenatedLength(words = [\"aa\",\"bb\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"ab\", \"aba\"])",
        "minimizeConcatenatedLength(words = [\"aab\",\"def\",\"ghi\"])",
        "minimizeConcatenatedLength(words = [\"c\", \"a\", \"a\", \"a\", \"b\", \"a\"])",
        "minimizeConcatenatedLength(words=[\"ad\", \"b\"])",
        "minimizeConcatenatedLength([\"moo\",\"moo\",\"moo\",\"aaa\",\"baa\"])",
        "minimizeConcatenatedLength(words = [\"ac\", \"xyz\", \"ba\", \"y\", \"qwer\"])"
    ],
    "sample_323": [
        "isFascinating(n = 2)",
        "isFascinating(n = 3)",
        "isFascinating(n = 4)",
        "isFascinating(n = 10)",
        "isFascinating(n = 6)",
        "isFascinating(n = 6)",
        "isFascinating(n = 12)",
        "isFascinating(n = 12)",
        "isFascinating(n = 15)",
        "isFascinating(n = 55)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"abcdabcd\")",
        "longestSemiRepetitiveSubstring(s = \"ababcd\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abbaba\")",
        "longestSemiRepetitiveSubstring(s = \"aabbb\")",
        "longestSemiRepetitiveSubstring(s = \"baaabb\")",
        "longestSemiRepetitiveSubstring(s = \"abcdeeeefgh\")",
        "longestSemiRepetitiveSubstring(s = \"aabcddeffdd\")",
        "longestSemiRepetitiveSubstring(s = \"aabcdbbbbbbbbbb\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaacdaacdba\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"I am 20 years old.\", \"I am 15 years old.\"])",
        "countSeniors([\"Mr. John Smith, 1234567890\"])",
        "countSeniors(details=[\"Roberto\",\"Antonio\",\"Victor\",\"Juan\"])",
        "countSeniors(details = [\"Sarah\", \"Jake\", \"Cynthia\", \"Scott\"])",
        "countSeniors(details = [\"Carlsberg 74\", \"Carlsberg 25\"])",
        "countSeniors(details = [\"Coders@You 19:00\", \"Coders@You 18:00\", \"Coders@You 20:00\"])",
        "countSeniors(details = [\"male\", \"12\", \"B\", \"09/04/2006\", \"student\"])",
        "countSeniors(details = [\"sabrina@code-hacker.com\",\"john@code-hacker.com\",\"mike@code-hacker.com\",\"sarah@code-hacker.com\"])",
        "countSeniors(details = [\"tom04\", \"abc12\", \"harry60\", \"spy02\", \"anna45\"])",
        "countSeniors(details = [\"John01:37\",\"Tom45:22\",\"Anna19:21\",\"Alex15:30\"])"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [1,2,3])",
        "minGroupsForValidAssignment(nums = [2,2,3,3,2,4,4,4,4,4])",
        "minGroupsForValidAssignment(nums = [3, 1, 2, 3, 3, 1])",
        "minGroupsForValidAssignment(nums = [2,2,1,1,3,3])",
        "minGroupsForValidAssignment(nums = [3, 1, 5, 4, 3])",
        "minGroupsForValidAssignment(nums = [2, 4, 5, 3, 1])",
        "minGroupsForValidAssignment(nums = [5, 6, 7, 2, 4, 5, 1, 3, 4])",
        "minGroupsForValidAssignment(nums = [500, 1000, 2000])",
        "minGroupsForValidAssignment(nums = [3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 2, 3, 4, 2, 3, 2])"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 3, 5])",
        "minimumSum(nums = [1, 1, 1])",
        "minimumSum(nums = [1, 3, 2])",
        "minimumSum(nums = [3, 4, 5])",
        "minimumSum(nums = [1, 5, 1])",
        "minimumSum(nums = [2, 3, 5, 7, 11])",
        "minimumSum([3, 3, 3])",
        "minimumSum([1, 5, 10])",
        "minimumSum(nums = [2, 1, 6, 8])",
        "minimumSum(nums = [3, 100, 6])"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"b\"])",
        "maximumNumberOfStringPairs([\"abc\", \"bcd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"a\", \"b\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"katak\"])",
        "maximumNumberOfStringPairs([\"abc\", \"bca\", \"acb\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"bb\", \"cb\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"d\", \"x\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"baa\", \"bab\", \"bcbc\", \"a\", \"bb\"])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = \"10110\", k = 2)",
        "shortestBeautifulSubstring(s = \"10110\", k = 3)",
        "shortestBeautifulSubstring(s = \"1111\", k = 2)",
        "shortestBeautifulSubstring(s = \"0101111\", k = 3)",
        "shortestBeautifulSubstring(s = \"11100\", k = 2)",
        "shortestBeautifulSubstring(s = \"11100011\", k = 3)",
        "shortestBeautifulSubstring(s = \"10011100\", k = 1)",
        "shortestBeautifulSubstring(s = \"0110010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"0000100000\", k = 3)",
        "shortestBeautifulSubstring(s = \"10001110110001010111100\", k = 2)"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [1, 2, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [5, 1, 3, 8, 9], limit = 5)",
        "lexicographicallySmallestArray(nums = [8, 1, 3, 5, 9], limit = 10)",
        "lexicographicallySmallestArray(nums = [8, 5, 1, 3, 9], limit = 5)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 2, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 2, 3, 4, 5, 8, 9, 10], limit = 4)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 1000000000)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9, 6, 2], limit = 2)",
        "lexicographicallySmallestArray(nums = [3, 4, 1, 5, 8, 9, 2, 6], limit = 100)",
        "lexicographicallySmallestArray(nums = [1, 2, 4, 7, 8, 10, 11, 12, 14], limit = 11)"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum([[1, 1, 1], [1, 1, 1]])",
        "matrixSum(a = [[1], [3]])",
        "matrixSum([[1,2,3],[4,5,6]])",
        "matrixSum(a = [[2, 3], [1, 3]])",
        "matrixSum(a = [[1, 3], [2, 4], [3, 5]])",
        "matrixSum(a = [[5, 3], [1, 4]])",
        "matrixSum(a = [[1, 3, 4], [2, 5, 6], [1, 2, 3]])",
        "matrixSum(a = [[2, 0, 0], [2, 3, 2]])"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aaa\", k = 3)",
        "beautifulSubstrings(s = \"abacaba\", k = 2)",
        "beautifulSubstrings(s = \"aio\", k = 3)",
        "beautifulSubstrings(s = \"beautiful\", k = 10)",
        "beautifulSubstrings(s = \"apples\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 100000)",
        "beautifulSubstrings(s = \"aaabbbbccc\", k = 6)",
        "beautifulSubstrings(s = \"aeg\", k = 5)",
        "beautifulSubstrings(s = 'aeciio', k = 3)"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"a\", \"b\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"lmn\", \"xyz\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abcd\", \"dcb\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"acb\", \"cba\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"ll\", \"ss\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bcd\", \"cba\", \"def\", \"fed\"])",
        "maximumNumberOfStringPairs(words = [\"abcb\", \"abca\", \"caba\"])",
        "maximumNumberOfStringPairs(words = [\"dragon\", \"wolf\"])",
        "maximumNumberOfStringPairs(words = [\"able\",\"wound\"])",
        "maximumNumberOfStringPairs(words = [\"abcde\", \"ac\", \"d\", \"cb\", \"bd\"])"
    ],
    "sample_325": [
        "isFascinating(n = 10)",
        "isFascinating(n = 10)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 11)",
        "isFascinating(n = 27)",
        "isFascinating(n = 42)",
        "isFascinating(n = 90)",
        "isFascinating(n = 456)",
        "isFascinating(n = 978)"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [1, 4, 2, 3])",
        "maximumTripletValue([1, 2, 1])",
        "maximumTripletValue(nums = [-3, -2, -1, 0, 1, 2, 3])",
        "maximumTripletValue(nums = [-1, -3, -1, 2])",
        "maximumTripletValue([2, 5, 6, 1, 3])",
        "maximumTripletValue(nums = [10, 5, 4, 11])"
    ],
    "sample_312": [
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2],[1,2]])",
        "matrixSum(nums = [[1, 3], [1, 2]])",
        "matrixSum(nums = [[1, 4], [3, 2]])",
        "matrixSum([[1],[1],[1]])",
        "matrixSum(nums = [[4,4], [4,4]])",
        "matrixSum(nums = [[1, 0, 0], [1, 1, 1], [1, 1, 1]])",
        "matrixSum(nums = [[1, 4, 5], [2, 3, 5]])",
        "matrixSum(nums = [[2,1,4],[3,1,2]])"
    ],
    "sample_281": [
        "minOperations(a = [1,2,3], b = [1,2,3])",
        "minOperations(a = [1, 1, 1], b = [2, 2, 2])",
        "minOperations(a = [1,2,3,4,5], b = [1,2,3,4,5])",
        "minOperations(a = [1, 3, 1], b = [2, 1, 3])",
        "minOperations(a = [1, 2], b = [10, 10])",
        "minOperations(a = [2, 3, 10], b = [1, 5, 8])",
        "minOperations(a = [2, 3, 1, 5], b = [1, 4, 5, 2])",
        "minOperations(a = [1, 3, 4, 1, 2], b = [3, 2, 1, 4, 3])",
        "minOperations(a = [2, 2, 1, 1, 1, 1, 1, 1], b = [1, 1, 2, 2, 1, 1, 1, 1])",
        "minOperations(a = [2,1,3,4,6,2], b = [1,2,2,3,4,5])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [5,6,7,8,9])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 3, 1])",
        "minOperations(nums1 = [3,3,4,2], nums2 = [4,4,5,5])",
        "minOperations(nums1 = [0, 1, 2, 3, 4, 5, 6], nums2 = [6, 5, 4, 3, 2, 1, 0])",
        "minOperations(nums1 = [1, 10, 15, 20], nums2 = [2, 7, 11, 15])",
        "minOperations(nums1 = [2, 4, 5], nums2 = [5, 3, 6])",
        "minOperations(nums1 = [5, 10], nums2 = [5, 11])",
        "minOperations(nums1 = [0, 1, 1, 0, 0, 1], nums2 = [1, 0, 1, 1, 0, 1])",
        "minOperations(nums1 = [5, 10, 5, 4, 5, 10], nums2 = [5, 4, 5, 10, 5, 10])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2])",
        "maximumTripletValue(nums = [1, 0, 2])",
        "maximumTripletValue(nums = [10, 10, 10, 10])",
        "maximumTripletValue(nums = [3, 7, 4])",
        "maximumTripletValue(nums = [1, 2, 1, 1, 1, 1])",
        "maximumTripletValue([-2, -1, 0, 1])",
        "maximumTripletValue([-1, 1, 2, 2])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"10110\", k = 3)",
        "shortestBeautifulSubstring(s = \"00110\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110\", k = 2)",
        "shortestBeautifulSubstring(s = \"11111\", k = 5)",
        "shortestBeautifulSubstring(s = \"10011\", k = 4)",
        "shortestBeautifulSubstring(s = \"00100\", k = 4)",
        "shortestBeautifulSubstring(s = \"1011010\", k = 6)",
        "shortestBeautifulSubstring(s = \"001010\", k = 1)",
        "shortestBeautifulSubstring(s = \"11000011\", k = 2)",
        "shortestBeautifulSubstring(s = '001000100001111101010101011', k = 4)"
    ],
    "sample_256": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 3, 5])",
        "minimumSum(nums = [3, 1, 2])",
        "minimumSum(nums = [7, 2, 5, 10, 8])",
        "minimumSum(nums = [2, 4, 1, 5, 3])",
        "minimumSum(nums = [1, 10, 1, 1, 1, 10, 1, 1, 10])",
        "minimumSum(nums = [5, 2, 4, 6, 3])",
        "minimumSum(nums = [5, 3, 8, 2])",
        "minimumSum(nums = [100, 101, 102, 103])",
        "minimumSum(nums = [1, 5, 2, 11, 4])"
    ],
    "sample_291": [
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"0110\")",
        "minimumSteps(s = \"001010\")",
        "minimumSteps(s = \"10111000\")",
        "minimumSteps(s = \"000101000010000100\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1, 3, 5, 2], nums2 = [2, 4, 6, 3])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [5,4,3,2,1])",
        "minOperations(nums1 = [1,3], nums2 = [2,4])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [2,1,3,4,5])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,3,5,2,4])",
        "minOperations(nums1 = [5, 4, 3, 2, 1], nums2 = [5, 4, 3, 2, 1])",
        "minOperations(nums1 = [2, 2, 2, 2, 2], nums2 = [1, 1, 1, 1, 1])",
        "minOperations(nums1 = [2,2,2,2], nums2 = [1,1,1,1])",
        "minOperations(nums1 = [5, 1, 3], nums2 = [1, 4, 2])",
        "minOperations(nums1 = [1, 3, 5, 6], nums2 = [1, 3, 5, 7])"
    ],
    "sample_277": [
        "findChampion(grid = [[1, 0, 1], [0, 0, 0], [1, 0, 1]])",
        "findChampion(grid = [[1,0,0],[0,1,0],[0,0,0]])",
        "findChampion(grid = [[1, 1, 0], [0, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 1, 0], [1, 1, 0], [1, 1, 0]])",
        "findChampion(grid = [[0, 0, 1], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1,1,0],[0,0,1]])",
        "findChampion([[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[0, 0, 1, 0],\n                            [0, 1, 0, 0],\n                            [1, 0, 0, 0],\n                            [0, 0, 0, 0]])",
        "findChampion(grid = [[1, 2, 0],\n                            [1, 0, 0],\n                            [0, 0, 0]])",
        "findChampion(grid = [[0,1,1,2],[0,2,0,0],[0,1,0,1],[0,0,0,0]])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n = 20, m = 3)",
        "differenceOfSums(n = 15, m = 5)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 6, m = 3)",
        "differenceOfSums(n = 25, m = 3)"
    ],
    "sample_292": [
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"100011\")",
        "minimumSteps(s = \"1000111\")",
        "minimumSteps(s = \"1010110\")",
        "minimumSteps(s = \"11001001\")",
        "minimumSteps(s = \"1001010100\")",
        "minimumSteps(s = \"10110010111\")",
        "minimumSteps(s = \"010110101101\")",
        "minimumSteps(s = \"10001100110010101\")"
    ],
    "sample_348": [
        "alternatingSubarray(nums = [0, 1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 2, 2])",
        "alternatingSubarray(nums = [1, 3, 5])",
        "alternatingSubarray(nums = [3, 4, 1, 2])",
        "alternatingSubarray(nums = [2, 4, 3, 5])",
        "alternatingSubarray(nums = [1, 1, 2, 1, 2])",
        "alternatingSubarray(nums = [2, 3, 1, 2, 3])",
        "alternatingSubarray(nums = [4, 2, 1, 3, 5])",
        "alternatingSubarray(nums = [1, 2, 1, 3, 1, 4])",
        "alternatingSubarray(nums = [3, 1, 2, 3, 4, 5, 1])"
    ],
    "sample_353": [
        "relocateMarbles(nums = [2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 5], moveTo = [2])",
        "relocateMarbles(nums = [2, 3, 1], moveFrom = [1, 2], moveTo = [2])",
        "relocateMarbles(nums = [1, 3, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [0, 1], moveTo = [0, 1])",
        "relocateMarbles(nums = [3, 2], moveFrom = [0, 1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 1, 3, 3], moveFrom = [1, 2], moveTo = [2, 1])",
        "relocateMarbles(nums = [2], moveFrom = [1, 2, 0, 1], moveTo = [1, 2, 0, 1])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [1, 1, 1, 1])",
        "maximumTripletValue(nums = [0, 1, 2])",
        "maximumTripletValue(nums = [-2, 0, 10, -19, 4, 6])",
        "maximumTripletValue(nums = [2, 1, 0])",
        "maximumTripletValue(nums = [-100, -100, -100])",
        "maximumTripletValue(nums = [1, 5, 0, 2, 3])",
        "maximumTripletValue([3, 4, 2, 1])",
        "maximumTripletValue(nums = [4, 3, 6, 2, 5])",
        "maximumTripletValue([4, 1, 2, 2, 4])"
    ],
    "sample_273": [
        "findChampion(grid = [[0,0,0],[0,0,0],[0,0,0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 1, 0]])",
        "findChampion(grid = [[0, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 1], [1, 1, 0], [0, 1, 1]])",
        "findChampion(grid = [[1,1,0],[1,1,0],[0,0,0]])",
        "findChampion(grid = [[0,0,1], [0,0,1], [0,0,0]])",
        "findChampion(grid = [[1,1,1,1],[1,0,0,1],[1,0,0,1],[1,1,1,1]])",
        "findChampion(grid = [[0, 1, 1],\n                            [0, 0, 1],\n                            [1, 0, 0]])",
        "findChampion(grid = [[1,1,0,0,0],[0,0,1,0,0],[0,0,0,1,1],[1,1,1,1,1]])"
    ],
    "sample_267": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [0, 0], nums2 = [1, 1])",
        "minSum(nums1 = [1], nums2 = [1, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6, 7])",
        "minSum(nums1 = [2, 3, 4], nums2 = [1])",
        "minSum(nums1 = [0], nums2 = [2, 3, 5])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [3, 4, 5, 6, 7, 8, 9])",
        "minSum(nums1 = [1, 5, 3], nums2 = [2, 1, 4])",
        "minSum(nums1 = [4, 6, 7], nums2 = [0])"
    ],
    "sample_294": [
        "minimumSteps(s = \"1\")",
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"1110\")",
        "minimumSteps(s = \"010101\")",
        "minimumSteps(s = '110')",
        "minimumSteps(s = \"100000\")",
        "minimumSteps(s = \"100011000\")",
        "minimumSteps(s = \"10111000100\")",
        "minimumSteps(s
    ],
    "sample_274": [
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 0],\n                            [0, 0, 0],\n                            [0, 0, 1]])",
        "findChampion(grid = [[0, 0, 1], [1, 0, 0], [1, 1, 1]])",
        "findChampion(grid = [[-1,0,0],[0,-1,0],[0,0,-1]])",
        "findChampion(grid = [[2, 0, 0], [0, 3, 1], [1, 2, 2]])",
        "findChampion(grid = [[1, 1, 1, 0],\n                           [1, 1, 1, 0],\n                           [1, 1, 1, 0],\n                           [0, 0, 0, 0]])",
        "findChampion(grid = [[-1, -1, -1, 0, -1, -1], [-1, -1, -1, 0, -1, -1], [-1, -1, -1, 0, -1, -1], [-1, -1, -1, 0, -1, -1], [-1, -1, -1, 0, -1, -1], [-1, -1, -1, 0, -1, -1]])",
        "findChampion(grid = [[2, 1, 1],[3, 1, 1],[2, 2, 1]])",
        "findChampion(grid = [[1, 0, 0, 0, 1], [0, 0, 0, 1, 1], [0, 0, 1, 0, 1], [1, 1, 0, 0, 1], [1, 1, 0, 0, 0]])"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6])",
        "minGroupsForValidAssignment(nums = [2,1,3,4,5])",
        "minGroupsForValidAssignment(nums = [1,2,4,2,1])",
        "minGroupsForValidAssignment(nums = [5,1,1,2])",
        "minGroupsForValidAssignment(nums = [1,3,4,1,2,3])",
        "minGroupsForValidAssignment(nums = [1,1,3,2,5])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,2,2,2,1,1,1,1,1,1,1,1])",
        "minGroupsForValidAssignment(nums = [3,1,2,3,4,3,1])",
        "minGroupsForValidAssignment(nums = [1,4,3,4,5,1,4,3,3,4,5,1,4,3,4,5])",
        "minGroupsForValidAssignment(nums = [6, 4, 10, 10, 10, 10, 10, 4, 2, 10])"
    ],
    "sample_270": [
        "minSum(nums1 = [0], nums2 = [1, 2])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [5, 6, 7, 8])",
        "minSum(nums1 = [1,2,0], nums2 = [0])",
        "minSum(nums1 = [0, 1, 2, 3, 4, 5], nums2 = [2, 3, 4, 5, 6, 7])",
        "minSum(nums1 = [2, 3, 4], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3, 5], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [1, 3], nums2 = [3, 3])",
        "minSum(nums1 = [1, 2, 3, 4, 5, 6], nums2 = [1, 2, 3, 4, 0])",
        "minSum(nums1 = [1, 3, 2], nums2 = [2, 4])",
        "minSum(nums1 = [1, 2, 2, 4, 5, 6], nums2 = [1, 2, 2, 4, 5, 6])"
    ],
    "sample_317": [
        "buyChoco(prices = [1,2], money = 3)",
        "buyChoco(prices = [1,2], money = 3)",
        "buyChoco(prices = [1,2,3,4], money = 5)",
        "buyChoco(prices = [2, 1], money = 3)",
        "buyChoco(prices = [1,2,3,4,5,6], money = 10)",
        "buyChoco(prices = [3,4,5], money = 7)",
        "buyChoco(prices = [100, 200, 300], money = 1000)",
        "buyChoco(prices = [4, 5, 6], money = 8)",
        "buyChoco(prices = [1, 3, 4], money = 2)",
        "buyChoco(prices = [100, 200, 50, 150], money = 400)"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"a\", k = 1)",
        "beautifulSubstrings(s = \"a\", k = 2)",
        "beautifulSubstrings(s = \"a\", k = 2)",
        "beautifulSubstrings(s = \"a\", k = 3)",
        "beautifulSubstrings(s = \"b\", k = 1)",
        "beautifulSubstrings(s = \"beautiful\", k = 5)",
        "beautifulSubstrings(s = \"apple\", k = 3)",
        "beautifulSubstrings(s = \"apple\", k = 5)",
        "beautifulSubstrings(s = \"leetcode\", k = 5)",
        "beautifulSubstrings(s = \"yqwaebdbibg\", k = 14)"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"abba\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abbaaba\")",
        "longestSemiRepetitiveSubstring(\"abcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abaababaab\")",
        "longestSemiRepetitiveSubstring(\"abaab\")",
        "longestSemiRepetitiveSubstring(s = \"abcabba\")",
        "longestSemiRepetitiveSubstring(s = \"babaababa\")",
        "longestSemiRepetitiveSubstring(s = \"abbaabbaab\")",
        "longestSemiRepetitiveSubstring(s = \"acdabfdb\")"
    ],
    "sample_341": [
        "longestString(x = 5, y = 3, z = 2)",
        "longestString(x = 5, y = 3, z = 2)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 2, y = 3, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(x = 7, y = 4, z = 3)",
        "longestString(x = 5, y = 4, z = 4)",
        "longestString(x = 6, y = 5, z = 2)"
    ],
    "sample_271": [
        "minSum(nums1 = [0, 0, 0], nums2 = [1, 1, 1])",
        "minSum(nums1 = [0,1,1,2], nums2 = [3,4,0,2])",
        "minSum(nums1 = [0,2,3], nums2 = [1,1,2])",
        "minSum(nums1 = [1, 10, 3, 0, 7], nums2 = [2, 5, 6, 0, 9])",
        "minSum(nums1 = [3,4,5,1], nums2 = [1,2,3,4,5])",
        "minSum(nums1 = [0, 1, 0, 2, 0, 1], nums2 = [1, 2, 3, 4, 5, 6])",
        "minSum(nums1 = [0, 1, 1, 2, 1, 2, 1, 1, 1, 0], nums2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",
        "minSum(nums1 = [0, 12, 12, 0], nums2 = [10, 0, 0, 0])",
        "minSum(nums1 = [1,2,3,10], nums2 = [2,1])",
        "minSum(nums1 = [0, 5, 1, 1, 0], nums2 = [0, 2, 1, 0, 4])"
    ],
    "sample_340": [
        "longestString(x = 2, y = 2, z = 1)",
        "longestString(x = 2, y = 1, z = 2)",
        "longestString(x = 2, y = 3, z = 3)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 4, y = 2, z = 2)",
        "longestString(x = 2, y = 1, z = 3)",
        "longestString(x = 4, y = 2, z = 3)",
        "longestString(x = 2, y = 5, z = 2)",
        "longestString(x = 4, y = 6, z = 3)",
        "longestString(x = 2, y = 4, z = 4)"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"1001\", k = 2)",
        "shortestBeautifulSubstring(s = \"110111\", k = 3)",
        "shortestBeautifulSubstring(s = '123123', k = 3)",
        "shortestBeautifulSubstring(s = \"1010\", k = 1)",
        "shortestBeautifulSubstring(s = '1100', k = 2)",
        "shortestBeautifulSubstring(s = \"123456789\", k = 12)",
        "shortestBeautifulSubstring(s = \"1010111100\", k = 6)",
        "shortestBeautifulSubstring(s = '1010111111', k = 11)",
        "shortestBeautifulSubstring(s = \"443342\", k = 1)",
        "shortestBeautifulSubstring(s = \"01100101111110001011\", k = 4)"
    ],
    "sample_324": [
        "isFascinating(n = 123)",
        "isFascinating(n = 10)",
        "isFascinating(n = 5)",
        "isFascinating(n = 6)",
        "isFascinating(n = 27)",
        "isFascinating(n = 45)",
        "isFascinating(n = 22)",
        "isFascinating(n = 111111111)",
        "isFascinating(n = 555)",
        "isFascinating(n = 2594)"
    ],
    "sample_258": [
        "minimumSum(nums = [3, 4, 5, 1, 2])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [1, 1, 1, 1, 1])",
        "minimumSum(nums = [1, 5, 3, 2])",
        "minimumSum(nums = [6, 7, 8])",
        "minimumSum(nums = [6, 4, 2, 5])",
        "minimumSum(nums = [4, 6, 9, 10])",
        "minimumSum(nums = [10, 4, 5, 7])",
        "minimumSum(nums = [5, 3, 2, 9, 10])",
        "minimumSum(nums = [1, 5, 2, 20, 20])"
    ],
    "sample_268": [
        "minSum(nums1 = [0, 1, 2], nums2 = [3, 4, 5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2])",
        "minSum(nums1 = [1,2,3,4], nums2 = [0,5,6,7])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [0, 0, 1, 2])",
        "minSum(nums1 = [1, 2, 10], nums2 = [3, 7])",
        "minSum(nums1 = [2, 3], nums2 = [2, 1])",
        "minSum(nums1 = [2, 2, 1, 1], nums2 = [1, 2, 1, 2])",
        "minSum(nums1 = [1,2,3,4,5,6], nums2 = [5,6,7,8])",
        "minSum(nums1 = [5, 2, 0, 1], nums2 = [4, 1, 3])",
        "minSum(nums1 = [3, 1, 4, 5, 2, 3], nums2 = [3, 2, 1, 1])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"bbb\", s3 = \"ccc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bca\", s3 = \"cab\")",
        "findMinimumOperations(s1 = \"aabc\", s2 = \"abc\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"aa\", s2 = \"aa\", s3 = \"aa\")",
        "findMinimumOperations(s1 = \"ad\", s2 = \"sd\", s3 = \"cd\")",
        "findMinimumOperations(s1 = \"poodle\", s2 = \"cat\", s3 = \"dog\")",
        "findMinimumOperations(s1 = \"abcdefghij\", s2 = \"cdefghijab\", s3 = \"dghijabc\")",
        "findMinimumOperations(s1 = \"abba\", s2 = \"xxx\", s3 = \"yyyy\")"
    ],
    "sample_321": [
        "maxStrength(nums = [-4, -3, -2, -1, 0, 1, 2, 3, 4])",
        "maxStrength(nums = [-1, 5, -2])",
        "maxStrength(nums = [5, 4, 3, 2, -1, -2])",
        "maxStrength([-20, 10, -10])",
        "maxStrength(nums = [-2, -1, 3, 4, 5, 6, 7, 8])",
        "maxStrength(nums = [2, -3, 3, -5, 4])",
        "maxStrength(nums = [1, -2, 3, 1, -1, 0])",
        "maxStrength(nums = [3, -1, -1, -1, 3, 2])",
        "maxStrength(nums = [10, 5, -1, -10, 20, 3, 4])",
        "maxStrength(nums = [-15, -12, -5, 3, -2, 13, -25])"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1,2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [0, 1], moveTo = [2])",
        "relocateMarbles(nums = [1,2], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums = [1, 2], moveFrom = [0], moveTo = [0])",
        "relocateMarbles(nums = [2, 1], moveFrom = [0], moveTo = [1])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [3], moveTo = [2])",
        "relocateMarbles(nums = [2, 2, 1], moveFrom = [0], moveTo = [1])",
        "relocateMarbles(nums = [2,1], moveFrom = [1,1], moveTo = [2])",
        "relocateMarbles(nums = [2, 1, 2, 4, 1], moveFrom = [3, 2, 1], moveTo = [0, 1, 2])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveFrom = [0, 3, 4], moveTo = [6, 2, 5])"
    ],
    "sample_357": [
        "relocateMarbles(nums = [8, 9, 5, 6], moveFrom = [8, 9], moveTo = [5, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 3], moveTo = [5, 6])",
        "relocateMarbles(nums = [1, 2, 3, 5, 6, 8, 9], moveFrom = [5, 6, 8], moveTo = [5, 8, 9])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9,10], moveFrom = [1,10], moveTo = [5,6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 3, 4], moveTo = [1, 2, 3])",
        "relocateMarbles(nums = [8, 5, 8, 6, 9], moveFrom = [8, 5], moveTo = [6, 9])",
        "relocateMarbles(nums = [5,6,8,9], moveFrom = [9, 7], moveTo = [5, 8])",
        "relocateMarbles(nums = [9, 11, 8, 5, 6, 7], moveFrom = [8, 9], moveTo = [5, 6])",
        "relocateMarbles(nums = [8, 7, 9, 1, 5, 6], moveFrom = [8, 5, 7], moveTo = [9, 1, 6])",
        "relocateMarbles(nums = [8, 6, 5, 4, 9, 2], moveFrom = [5, 4, 6], moveTo = [1, 2, 8])"
    ],
    "sample_318": [
        "buyChoco(prices = [5, 4, 3, 2], money = 7)",
        "buyChoco(prices = [10, 15, 3, 7], money = 10)",
        "buyChoco(prices = [1,3,5,7], money = 10)",
        "buyChoco(prices = [10, 20, 50, 30], money = 100)",
        "buyChoco(prices = [1, 5, 10], money = 100)",
        "buyChoco(prices = [1, 3, 1, 4], money = 6)",
        "buyChoco(prices = [10, 12, 20, 30], money = 40)",
        "buyChoco(prices = [100, 150, 50], money = 400)",
        "buyChoco(prices = [1000, 1000, 1000, 500, 500], money = 2000)",
        "buyChoco(prices = [7, 9, 13, 25], money = 25)"
    ],
    "sample_308": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [1, 2, 3]])",
        "matrixSum([[1, 1], [1, 1]])",
        "matrixSum(nums = [[1], [3], [2]])",
        "matrixSum(nums = [[1, 3, 5], [2, 4, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 1, 2], [1, 2, 1], [1, 2, 2]])",
        "matrixSum(nums = [[5,4,3,2], [4,3,2,1]])",
        "matrixSum(nums = [[2,2,2,2,2], [1,2,3,4,5], [5,6,7,8,9], [5,17,18,19,20]])",
        "matrixSum([[2, 4, 3], [5, 3, 2], [4, 7, 9]])",
        "matrixSum([[2, 1, 5, 4], [1, 4, 7, 3], [3, 6, 2, 5]])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2], money = 1)",
        "buyChoco(prices = [1, 1], money = 0)",
        "buyChoco(prices = [10, 20], money = 20)",
        "buyChoco(prices = [1, 2], money = 4)",
        "buyChoco(prices = [2, 5], money = 2)",
        "buyChoco(prices = [10, 1000], money = 20)",
        "buyChoco(prices = [5, 3, 4, 6], money = 5)",
        "buyChoco(prices = [6, 3, 7, 10], money = 10)",
        "buyChoco(prices = [5, 3, 8, 7, 6], money = 9)",
        "buyChoco(prices = [1, 5, 2, 7, 2, 2], money = 17)"
    ],
    "sample_259": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3])",
        "minimumSum(nums = [2,3,4,5])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSum(nums = [2,3,1,1,4])",
        "minimumSum(nums = [2, 3, 1, 4])",
        "minimumSum([2,1,0])",
        "minimumSum(nums = [3,4,2,6,8])",
        "minimumSum([1,5,2,1])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [1, -2, 3, -4])",
        "alternatingSubarray(nums = [4, 1, 2, 3, 5, 6])",
        "alternatingSubarray(nums = [1, 3, 5, 7, 8, 10, 12, 14])",
        "alternatingSubarray([1, 4, -1, 2])",
        "alternatingSubarray(nums = [1,2,4,3,1,2,4,3])",
        "alternatingSubarray(nums = [1, 2, -2, 1, -2, -1, 1])"
    ],
    "sample_311": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 4], [2, 1]])",
        "matrixSum(nums = [[3, 0, 1, 4], [5, 2, 3, 0], [0, 5, 3, 1]])",
        "matrixSum(nums = [[1, 0, 1], [1, 0, 0], [1, 0, 0]])",
        "matrixSum(nums = [[1, 1, 0, 0],\n                        [0, 1, 1, 0],\n                        [1, 0, 0, 0]])",
        "matrixSum(nums = [[1, 4, 3], [1, 2, 3], [1, 4, 3]])",
        "matrixSum(nums = [[3, 1], [1, 4], [4, 2]])",
        "matrixSum(nums = [[2, 1, 1], [2, 0, 1], [0, 0, 1], [1, 0, 0]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 1], money = 1)",
        "buyChoco(a = [3, 2, 1], money = 5)",
        "buyChoco(a = [10, 3], money = 13)",
        "buyChoco(a = [5, 5, 5, 5], money = 5)",
        "buyChoco(a = [5, 2, 1], money = 2)",
        "buyChoco(a = [2, 5, 10], money = 7)",
        "buyChoco(a = [300, 300], money = 500)",
        "buyChoco(a = [5, 4, 3, 2], money = 14)",
        "buyChoco(a = [5, 10, 2], money = 5)",
        "buyChoco(a = [3, 7, 3, 6], money = 20)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [1, 1, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [2, 1, 1])",
        "minGroupsForValidAssignment(nums = [3, 3])",
        "minGroupsForValidAssignment(nums = [2,1,1])",
        "minGroupsForValidAssignment(nums = [4,2,1,1])",
        "minGroupsForValidAssignment(nums = [2, 3, 3, 3, 2, 4, 1, 2, 7, 4])",
        "minGroupsForValidAssignment(nums = [1,2,1,1,1,2,2])",
        "minGroupsForValidAssignment(nums = [2, 4, 5, 10, 3])",
        "minGroupsForValidAssignment([2,2,2,2,3,3,3])"
    ],
    "sample_276": [
        "findChampion(grid = [[0, 0, 1], [0, 1, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 1],\n                            [1, 0, 1],\n                            [1, 1, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0,1,1,1],[1,0,1,1],[1,1,0,1],[1,1,1,0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [0, 0, 1]])",
        "findChampion(grid = [[0, 0, 0], [1, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 1],\n                            [0, 0, 1],\n                            [1, 0, 0]])",
        "findChampion(grid = [[0,0,0,0,1],[0,0,0,1,0],[0,0,1,0,0],[0,1,0,0,0],[1,0,0,0,0]])"
    ],
    "sample_320": [
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength([1, 2, 3, 4, 5])",
        "maxStrength(nums = [1,2,3,4,5])",
        "maxStrength(nums = [2, 5, 3, 10])",
        "maxStrength(nums = [1, 2, 4, 8])",
        "maxStrength(nums = [2, 5, 6, 3])",
        "maxStrength(nums = [4, 6, 10])",
        "maxStrength(nums = [1, 5, 4, 2, 3])",
        "maxStrength(nums = [1, 2, 10, 10, 10])",
        "maxStrength(nums = [4, 6, 3, 8])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"abc\", \"def\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"ab\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"a\", \"b\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"bb\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"un\",\"iq\",\"ue\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ba\", \"ad\", \"bd\"])",
        "minimizeConcatenatedLength(words = [\"e\", \"f\", \"h\"])",
        "minimizeConcatenatedLength(words = [\"ban\", \"an\", \"ap\", \"pe\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ab\", \"ac\", \"bc\", \"dd\", \"aa\", \"ae\", \"az\"])"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"x\", s2 = \"x\", s3 = \"x\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"xyz\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"bab\", s2 = \"aba\", s3 = \"aba\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcdf\", s3 = \"acdf\")",
        "findMinimumOperations(s1 = \"b\", s2 = \"ba\", s3 = \"b\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"defg\", s3 = \"hijl\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"ab\", s3 = \"bacd\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"efgh\", s3 = \"efgh\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"aaba\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abcdef\", s2 = \"adbdef\", s3 = \"abcefg\")"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 1, 2])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 3, 1, 2, 3])",
        "alternatingSubarray([1, -1, 1, -1])",
        "alternatingSubarray(nums = [1, 2, 3, -1, 0])",
        "alternatingSubarray(nums = [1, 2, -3, 1, 0])",
        "alternatingSubarray(nums = [-1, 1, -2, -3, 2])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 10, 10])"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[0,0,1],[0,1,0],[1,0,0]])",
        "findChampion(grid = [[0, 1, 1],\n                            [1, 1, 1],\n                            [1, 1, 1]])",
        "findChampion(grid = [[0,1,1],[1,1,0],[1,0,0]])",
        "findChampion(grid = [[1, 1, 0], [1, 1, 1], [0, 0, 1]])",
        "findChampion(grid = [[1, 1, 0], [0, 0, 1], [0, 0, 1]])",
        "findChampion(grid = [[1, 1, 1], [0, 1, 0], [0, 1, 0]])",
        "findChampion(grid = [[1, 1, 0], [0, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 0], [0, 1, 1]])",
        "findChampion(grid = [[0, 1, 0, 1],\n                           [0, 0, 0, 1],\n                           [1, 0, 0, 1],\n                           [0, 0, 0, 0]])"
    ],
    "sample_304": [
        "countSeniors(details = [\"Bob\", \"John\", \"Sara\"])",
        "countSeniors(details = [\"9999999999\", \"9111111111\"])",
        "countSeniors(details = [\"b7e127\", \"07e129\"])",
        "countSeniors(details = [\"34\", \"69\", \"94\", \"20\", \"55\"])",
        "countSeniors(details = [\"01-01-2019\", \"01-02-2019\", \"01-03-1996\", \"01-04-2001\", \"01-05-1998\"])",
        "countSeniors(details = [\"Susie Smith\", \"Fred Johnson\", \"Jason Brown\", \"Mary Jones\"])",
        "countSeniors(details = [\"26/12/2000 07:10 23.45\", \"26/12/2000 07:10 23.45\", \"26/12/2000 07:10 23.45\"])",
        "countSeniors(details = [\"B47 537890\", \"B45 527790\", \"BA7 577870\"])",
        "countSeniors(details = [\"Patrick\", \"Banana\", \"67\", \"49\", \"Olivier\", \"45\", \"Peter\", \"57\", \"68\", \"Paul\"])",
        "countSeniors(details = [\"1972-11-24\", \"2006-02-01\", \"1992-05-15\", \"1994-09-20\", \"1966-07-17\", \"1994-09-20\", \"1995-11-02\"])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aabbb\", k = 2)",
        "beautifulSubstrings(s = \"aabbbc\", k = 3)",
        "beautifulSubstrings(s = \"codewars\", k = 3)",
        "beautifulSubstrings(s = \"aacac\", k = 3)",
        "beautifulSubstrings(s = \"mia\", k = 3)",
        "beautifulSubstrings(s = \"iieeoeeeee\", k = 3)",
        "beautifulSubstrings(s = \"adcadegc\", k = 3)",
        "beautifulSubstrings(s = \"wewqwewqe\", k = 3)",
        "beautifulSubstrings(s = \"sanskar\", k = 15)"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"111\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110\", k = 2)",
        "shortestBeautifulSubstring(s = \"11111\", k = 1)",
        "shortestBeautifulSubstring(s = \"1101100\", k = 1)",
        "shortestBeautifulSubstring(s = \"1111\", k = 3)",
        "shortestBeautifulSubstring(s = \"111111\", k = 2)",
        "shortestBeautifulSubstring(s = '1010', k = 1)",
        "shortestBeautifulSubstring(s = \"1010010\", k = 2)",
        "shortestBeautifulSubstring(s = \"1111000000001111\", k = 3)",
        "shortestBeautifulSubstring(s = \"10111111000011011001\", k = 2)"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"abc\", \"def\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"apple\", \"banana\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"bc\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"bcd\", \"def\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"ab\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"nc\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"abc\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"c\", \"e\", \"g\"])",
        "minimizeConcatenatedLength(words = [\"and\", \"banana\"])"
    ],
    "sample_327": [
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 1)",
        "isFascinating(n = 11)",
        "isFascinating(n = 13)",
        "isFascinating(n = 13)",
        "isFascinating(n = 15)",
        "isFascinating(n = 25)",
        "isFascinating(n = 22)",
        "isFascinating(n = 32)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[0]])",
        "matrixSum(nums = [[1],[2]])",
        "matrixSum(nums = [[1],[2]])",
        "matrixSum([[2], [1]])",
        "matrixSum(nums = [[1,1,1], [2,2,2], [3,3,3]])",
        "matrixSum(nums = [[0, 0, 0], [1, 1, 1], [2, 2, 2]])",
        "matrixSum(nums = [[2, 1, 1, 2], [1, 1, 1, 2], [2, 1, 1, 2]])",
        "matrixSum(nums = [[4, 7, 1, 3], [2, 5, 6, 8], [3, 3, 4, 2], [1, 4, 1, 6]])"
    ],
    "sample_326": [
        "isFascinating(n = 7)",
        "isFascinating(n = 12)",
        "isFascinating(n = 13)",
        "isFascinating(n = 1234)",
        "isFascinating(n = 1234)",
        "isFascinating(n = 5)",
        "isFascinating(n = 4)",
        "isFascinating(n = 110)",
        "isFascinating(n = 99999)",
        "isFascinating(n = 919293)"
    ],
    "sample_275": [
        "findChampion(grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[1, 1, 0], [1, 1, 1], [1, 1, 1]])",
        "findChampion(grid = [[0,1,0],[1,0,1],[0,1,1]])",
        "findChampion(grid = [[1,1,1],[0,1,0],[0,0,1]])",
        "findChampion(grid = [[0, 0, 0, 0, 0],\n                           [0, 0, 0, 0, 0],\n                           [0, 0, 0, 0, 0],\n                           [0, 0, 0, 0, 0],\n                           [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[1, 0, 1, 1],\n                            [0, 1, 0, 1],\n                            [1, 0, 1, 0],\n                            [1, 1, 0, 1]])",
        "findChampion(grid = [[0, 0, 0, 0, 0],\n                           [0, 0, 1, 0, 0],\n                           [0, 1, 0, 1, 0],\n                           [0, 0, 0, 0, 0],\n                           [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[1, 0, 1, 0, 0, 0, 0, 0],\n                           [0, 1, 1, 0, 0, 0, 0, 0],\n                           [0, 0, 0, 1, 0, 0, 0, 0],\n                           [1, 0, 0, 0, 1, 0, 0, 0],\n                           [0, 0, 0, 0, 0, 1, 0, 0],\n                           [0, 0, 0, 0, 0, 1, 0, 0],\n                           [0, 0, 0, 0, 0, 0, 1, 0],\n                           [0, 0, 0, 0, 0, 0, 0, 1]])"
    ],
    "sample_260": [
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 5, 3])",
        "minimumSum(nums = [1, 4, 5, 7])",
        "minimumSum([1, 1, 2])",
        "minimumSum(nums = [2, 5, 1, 1])",
        "minimumSum(nums = [10, 20, 5])",
        "minimumSum(nums = [7, 2, 10, 3, 1])",
        "minimumSum(nums = [6, 5, 2, 9, 3])",
        "minimumSum(nums = [10, 2, 4, 1, 5, 8, 7, 6])"
    ],
    "sample_322": [
        "isFascinating(n = 12)",
        "isFascinating(n = 100)",
        "isFascinating(n = 1000)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 666)",
        "isFascinating(n = 22)",
        "isFascinating(n = 420)",
        "isFascinating(n = 2520)",
        "isFascinating(n = 7777777)"
    ],
    "sample_248": [
        "minOperations(s1 = \"101\", s2 = \"011\", x = 3)",
        "minOperations(s1 = \"10101\", s2 = \"10101\", x = 4)",
        "minOperations(s1 = \"0011\", s2 = \"1100\", x = 1)",
        "minOperations(s1 = \"011\", s2 = \"011\", x = 2)",
        "minOperations(s1 = \"10111\", s2 = \"01110\", x = 4)",
        "minOperations(s1 = \"1000\", s2 = \"1101\", x = 3)",
        "minOperations(s1 = \"011001\", s2 = \"110001\", x = 8)",
        "minOperations(s1 = \"ab1a\", s2 = \"ab1a\", x = 1)",
        "minOperations(s1 = \"001011101\", s2 = \"101010100\", x = 2)",
        "minOperations(s1 = \"101000010101100001001111011111\", s2 = \"1001011110110010101100010110000000\", x = 10)"
    ],
    "sample_342": [
        "longestString(x = 3, y = 3, z = 2)",
        "longestString(x = 2, y = 2, z = 3)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 3, y = 2, z = 2)",
        "longestString(x = 3, y = 2, z = 2)",
        "longestString(x = 3, y = 3, z = 1)",
        "longestString(x = 5, y = 5, z = 2)",
        "longestString(x = 2, y = 1, z = 2)",
        "longestString(x = 4, y = 5, z = 1)",
        "longestString(x = 4, y = 4, z = 4)"
    ],
    "sample_354": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 2, 3], moveTo = [5, 6, 7])",
        "relocateMarbles(nums = [1, 2, 5, 6, 8, 9], moveFrom = [1, 2, 3], moveTo = [4, 5, 6])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 9], moveTo = [1, 2])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [0, 1], moveTo = [0, 1])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [0, 0, 1, 2], moveTo = [0, 1, 2, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 1, 2], moveTo = [2, 3, 4])",
        "relocateMarbles(nums = [5, 6, 8, 9, 7], moveFrom = [2, 5, 0], moveTo = [0, 2, 1])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [4, 7, 6], moveTo = [2, 1, 3])",
        "relocateMarbles(nums = [8, 5, 6, 9], moveFrom = [1, 0, 3], moveTo = [3, 1, 2])",
        "relocateMarbles(nums = [1,2,5,6,8,9], moveFrom = [1,5,8], moveTo = [3,9,10])"
    ],
    "sample_306": [
        "countSeniors(details = [\"Tom\", \"Jerry\", \"John\", \"Mary\"])",
        "countSeniors(details = [\"alice\", \"63\", \"john\", \"61\"])",
        "countSeniors(details = [\"John, 25, male\", \"Mark, 65, male\", \"Jane, 19, female\"])",
        "countSeniors(details = [\"Joe 41\", \"John 59\", \"Sara 63\"])",
        "countSeniors(details = [\"Jason\", \"Susan\", \"Ganesh\", \"Abbas\"])",
        "countSeniors(details = ['Smith', '22', 'Brown', '71', 'Anderson', '69'])",
        "countSeniors(details = [\"john 20\", \"edward 50\", \"adam 28\", \"jim 68\"])",
        "countSeniors(details = [\"gab1990\", \"kumar42\", \"aarona2000\"])",
        "countSeniors(details = [\"Matthew Maedgen 21\", \"Chinmai Raghunath 51\", \"Anna Zaborowska 34\"])",
        "countSeniors(details = [\"Muriel Bertrand\",\"Charles Jenkins\",\"Patrick Anderson\",\"Edward Edson\",\"Joseph Lopez\",\"Vanessa Vu\",\"Joshua Ford\"])"
    ],
    "sample_303": [
        "countSeniors(details = [\"abc\", \"def\", \"abcd\", \"abde\", \"abcde\"])",
        "countSeniors(details = [\"0061\",\"0400\"])",
        "countSeniors(details = [\"Alex\", \"Roger\", \"Sofia\", \"Dick\"])",
        "countSeniors(details = [\"trndwtrd1\", \"trndwtrd2\", \"trndwtrd3\"])",
        "countSeniors(details = [\"Charlie\", \"James\", \"Jason\", \"Lily\", \"Samantha\", \"Francis\"])",
        "countSeniors(details = [\"Rahul,32,BCA\",\"Sonal,67,Bcom\",\"Rohan,57,BCA\"])",
        "countSeniors(details = [\"Lyatt42\", \"Tom72\", \"Kyle48\"])",
        "countSeniors([\"Vikram\", \"Sarah\", \"Michael\", \"Jacob\", \"Nicholas\", \"Josh\", \"Darren\"])",
        "countSeniors(details = [\"Mike:62\", \"Bill:45\", \"Jack:56\", \"Adam:68\", \"Daniel:22\"])",
        "countSeniors(details = [\"Anton 61\", \"Klaus 71\", \"Kristina 61\", \"Peter 59\", \"Doris 61\"])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [1, 2])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 8], moveTo = [5, 6])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [1, 0], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [7, 9], moveTo = [5, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [4, 8], moveTo = [5, 6])",
        "relocateMarbles(nums = [8, 9, 5, 6], moveFrom = [5, 6], moveTo = [9, 5])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [1, 5], moveTo = [3, 4])",
        "relocateMarbles(nums = [4, 6, 8, 9, 10], moveFrom = [4, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [9, 8, 7, 6, 5], moveFrom = [9, 8, 6], moveTo = [5, 6, 8])",
        "relocateMarbles(nums = [8, 9, 1, 5, 6], moveFrom = [3, 1], moveTo = [3, 5])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"banana\", s2 = \"banana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ac\", s3 = \"bc\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"ac\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"a\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"bb\", s2 = \"b\", s3 = \"b\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"aca\", s3 = \"bab\")",
        "findMinimumOperations(s1 = \"aax\", s2 = \"aab\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"a\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"bcc\", s2 = \"ccc\", s3 = \"baa\")",
        "findMinimumOperations(s1 = \"zc\", s2 = \"zz\", s3 = \"zdz\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"banana\", s2 = \"banana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"banana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"aabaa\", s2 = \"aabaa\", s3 = \"aabaa\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"abc\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"ban\", s3 = \"apple\")",
        "findMinimumOperations(s1 = \"aaba\", s2 = \"baa\", s3 = \"bab\")",
        "findMinimumOperations(s1 = \"qw\", s2 = \"as\", s3 = \"er\")",
        "findMinimumOperations(s1 = \"cc\", s2 = \"a\", s3 = \"bc\")",
        "findMinimumOperations(s1 = \"flap\", s2 = \"clak\", s3 = \"gap\")",
        "findMinimumOperations(s1 = \"bxkcox\", s2 = \"bzax\", s3 = \"bexz\")"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1])",
        "semiOrderedPermutation(nums = [2, 4, 3, 1])",
        "semiOrderedPermutation(nums = [2, 3, 4, 5, 1])",
        "semiOrderedPermutation(nums = [4, 3, 2, 5, 1])",
        "semiOrderedPermutation(nums = [3, 1, 6, 4])",
        "semiOrderedPermutation(nums = [3, 1, 5, 7, 2, 4, 6, 8])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1,2,3,1,2,3])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1,1,1,1,1])",
        "continuousSubarrays(a = [1,1,2,1,1])",
        "continuousSubarrays(a = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "continuousSubarrays([1, 2, 2, 1, 2])",
        "continuousSubarrays(a = [2,2,1,1,1,2,2,1])",
        "continuousSubarrays(a = [3,1,3,6,3,4,3])",
        "continuousSubarrays([1, 2, 3, 1, 5, 6, 7, 8, 9, 1, 2, 3, 1])",
        "continuousSubarrays(a = [2, 4, 1, 3, 5, 2, 6, 2])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [1, 2, 3, 4, 3, 2, 1])",
        "continuousSubarrays(nums = [1, 2, 1, 2])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays(nums = [1, 2, 1, 2, 1, 2, 1])",
        "continuousSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2])",
        "continuousSubarrays(nums = [2,2,2,2,2,2])",
        "continuousSubarrays(nums = [0, 1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(nums = [1, 2, 2, 2, 3, 4])",
        "continuousSubarrays(nums = [2, 2, 3, 4, 1, 2])",
        "continuousSubarrays(nums = [1,1,1,2,1,1,1,2,2,2])"
    ],
    "sample_8": [
        "colorTheArray(n = 4, queries = [[0, 0], [1, 1], [2, 1], [3, 0]])",
        "colorTheArray(n = 3, queries = [[1, 0], [2, 0], [3, 0]])",
        "colorTheArray(n = 4, queries = [[0, 0], [2, 1]])",
        "colorTheArray(n = 3, queries = [[1, 0], [2, 0], [0, 1]])",
        "colorTheArray(n = 4, queries = [[0,0],[1,0],[2,0],[3,1]])",
        "colorTheArray(n = 5, queries = [(0, 1), (1, 2)])",
        "colorTheArray(n = 7, queries = [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 1], [7, 1]])",
        "colorTheArray(n = 4, queries = [[1, 0], [1, 1], [1, 0], [1, 0], [2, 1], [2, 1]])",
        "colorTheArray(n = 6, queries = [[0, 1], [1, 0], [4, 1], [5, 1], [3, 1], [5, 1]])",
        "colorTheArray(n = 5, queries = [[2, 'a'], [2, 'b'], [4, 'a'], [0, 'a'], [3, 'b']])"
    ],
    "sample_97": [
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [1,2,3,5,4], target = 3)",
        "maximumJumps(nums = [5,2,1,2,5,2,8], target = 2)",
        "maximumJumps(nums = [1,2,3,10], target = 3)",
        "maximumJumps(nums = [2,1,3,1], target = 2)",
        "maximumJumps(nums = [4,3,5], target = 3)",
        "maximumJumps(nums = [2, 4, 1, 6, 5, 3], target = 2)",
        "maximumJumps(nums = [4,1,2,2,3,2,3,4,3], target = 1)",
        "maximumJumps(nums = [2,5,10,12,6,1], target = 2)"
    ],
    "sample_22": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABC\")",
        "minLength(s = \"ABCDABC\")",
        "minLength(s = \"ABBC\")",
        "minLength(s = \"ABBC\")",
        "minLength(s = \"BCDAB\")",
        "minLength(s = \"BABCDCDAB\")"
    ],
    "sample_7": [
        "colorTheArray(n = 4, queries = [[1, 0], [2, 1], [1, 1]])",
        "colorTheArray(n = 4, queries = [[1, 2], [3, 2], [1, 1]])",
        "colorTheArray(n = 6, queries = [[1, 0], [2, 1], [3, 0], [4, 1], [5, 0], [6, 1]])",
        "colorTheArray(n = 10, queries = [[1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0]])",
        "colorTheArray(n = 5, queries = [[0, 2], [1, 1], [2, 0], [3, 2], [4, 0]])",
        "colorTheArray(n = 4, queries = [[1,1],[1,2],[2,2],[3,2],[2,1]])",
        "colorTheArray(n = 10, queries = [(0, 1), (1, 0), (2, 1), (2, 0)])",
        "colorTheArray(n = 4, queries = [[1,1],[3,1],[2,0],[0,1],[1,0]])",
        "colorTheArray(n = 4, queries = [[1,1], [1,2], [0,2], [1,2], [0,2], [1,2], [0,2]])",
        "colorTheArray(n = 10, queries = [[2, 1], [1, 2], [0, 1], [0, 0], [9, 1], [8, 0], [5, 0], [9, 2], [9, 1], [9, 2]])"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [4, 1], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 2], [4, 1], [5, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 2], [3, 1], [4, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 1], [2, 2], [3, 1], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [3, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 0], [2, 0], [3, 0], [4, 1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 2], [3, 1], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [4, 2], [5, 3]])",
        "colorTheArray(n = 5, queries = [(0, 2), (1, 2), (1, 1), (1, 0), (2, 0), (2, 0)])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [1,2,3,4])",
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation([1,2,3,4,5])",
        "semiOrderedPermutation(nums = [1, 3, 4, 2])",
        "semiOrderedPermutation(nums = [3,1,4])",
        "semiOrderedPermutation(nums = [1, 5, 3, 2, 4])",
        "semiOrderedPermutation([4,3,2,1])"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8], threshold = 6)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 6, 8], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 10, 100, 1000], threshold = 10)",
        "longestAlternatingSubarray(nums = [2, 3, 5, 6, 9], threshold = 10)",
        "longestAlternatingSubarray(nums = [4, 6, 10, 10], threshold = 6)",
        "longestAlternatingSubarray(nums = [4, 2, 3, 2, 5, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [4, 2, 3, 7, 1, 3, 4, 2], threshold = 5)",
        "longestAlternatingSubarray(nums = [3, 2, 1, 5, 4, 4, 3, 2, 1, 3, 4], threshold = 4)"
    ],
    "sample_33": [
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"512301000000000000\")",
        "removeTrailingZeros(num = '123000512301')"
    ],
    "sample_50": [
        "smallestString(s = \"abaaba\")",
        "smallestString(s = \"abaaab\")",
        "smallestString(s = \"abaaab\")",
        "smallestString(s = \"aaaaab\")",
        "smallestString(\"abaab\")",
        "smallestString(s = \"aaabaab\")",
        "smallestString(s = \"abaaaba\")",
        "smallestString(s = \"ababba\")",
        "smallestString(s = \"aaaabaaaaa\")",
        "smallestString(s = 'aaaa')"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1,2,3,4,5])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6])",
        "distinctDifferenceArray(nums = [1, 1, 2, 3, 3])",
        "distinctDifferenceArray(nums = [1, 1, 1, 3, 3, 4, 3, 2, 4, 2])",
        "distinctDifferenceArray(nums = [1, 3, 5, 3, 1])",
        "distinctDifferenceArray(nums = [4, 2, 4, 1, 6])"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 11, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 5)",
        "distanceTraveled(mainTank = 11, additionalTank = 2)",
        "distanceTraveled(mainTank = 14, additionalTank = 3)",
        "distanceTraveled(mainTank = 200, additionalTank = 50)",
        "distanceTraveled(mainTank = 9, additionalTank = 100)"
    ],
    "sample_118": [
        "minimumIndex(nums = [1, 1, 0, 0, 1])",
        "minimumIndex(nums = [1, 2, 1, 2, 3])",
        "minimumIndex(nums = [1, 2, 2, 2, 1, 2])",
        "minimumIndex(nums = [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3])",
        "minimumIndex(nums = [2, 2, 1, 3, 2, 2, 3])",
        "minimumIndex(nums = [1, 1, 0, 0, 1, 1, 0, 0, 1])",
        "minimumIndex(nums = [0, 1, 0, 0, 0, 1, 0, 0, 1, 0])",
        "minimumIndex(nums = [1, 2, 3, 1, 4, 1, 5, 1, 6, 1])",
        "minimumIndex([2, 2, 0, 0, 2])",
        "minimumIndex([3, 6, 7, 3, 3])"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [1, 2, 3])",
        "countBeautifulPairs(nums = [12, 34, 56])",
        "countBeautifulPairs([3, 2, 1])",
        "countBeautifulPairs([100, 101, 102])",
        "countBeautifulPairs(nums = [11, 15, 12])",
        "countBeautifulPairs(nums = [12, 23, 45, 67, 90])",
        "countBeautifulPairs(nums = [4, 10, 3, 12, 6])",
        "countBeautifulPairs(nums = [1,2,12,13,3])",
        "countBeautifulPairs(nums = [12, 4, 16, 5, 32, 9, 10, 2, 20, 25, 8])",
        "countBeautifulPairs(nums = [3, 1, 4, 1, 1, 2, 2, 5, 2])"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '51230101')"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"aaa\")",
        "minimizedStringLength(s = \"aaa\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"abcd\")",
        "minimizedStringLength(s = \"abcd\")",
        "minimizedStringLength(s = \"xyz\")",
        "minimizedStringLength(s = \"aaabbccc\")",
        "minimizedStringLength(s = \"abcabd\")",
        "minimizedStringLength(s = \"car\")"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 2, 3], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "maximumBeauty(nums = [3, 2, 1, 2, 1], k = 1)",
        "maximumBeauty(nums = [2, 3, 5, 7, 11, 13], k = 3)",
        "maximumBeauty(nums = [5, 6, 7, 8, 9, 10, 11], k = 1)",
        "maximumBeauty(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 1)",
        "maximumBeauty(nums = [1,2,2,3,3,3,4], k = 0)",
        "maximumBeauty(nums = [2, 3, 10, 4, 5], k = 3)",
        "maximumBeauty(nums = [4, 6, 7, 1, 3], k = 2)",
        "maximumBeauty(nums = [2, 3, 5, 1, 3, 2, 5], k = 1)"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 1, num2 = 2)",
        "makeTheIntegerZero(num1 = 2, num2 = 1)",
        "makeTheIntegerZero(num1 = 4, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 1)",
        "makeTheIntegerZero(num1 = 11, num2 = 10)",
        "makeTheIntegerZero(num1 = 11, num2 = 2)",
        "makeTheIntegerZero(num1 = 1, num2 = 4)",
        "makeTheIntegerZero(num1 = 4, num2 = 6)",
        "makeTheIntegerZero(num1 = 10, num2 = 8)",
        "makeTheIntegerZero(num1 = 1111, num2 = 111)"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [3, 2, 1])",
        "findValueOfPartition(nums = [5, 4, 3, 2, 1])",
        "findValueOfPartition(nums = [3, 1, 2])",
        "findValueOfPartition(nums = [1, 2, 5])",
        "findValueOfPartition(nums = [3, 1, 4])",
        "findValueOfPartition(nums = [4, 2, 3])",
        "findValueOfPartition(nums = [1, 1, 3, 4])",
        "findValueOfPartition(nums = [2, 6, 4, 8, 10])",
        "findValueOfPartition(nums = [3,4,3])",
        "findValueOfPartition(nums = [2, 3, 7, 11, 15])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 6, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 0, additionalTank = 1)",
        "distanceTraveled(mainTank = 15, additionalTank = 2)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 1])",
        "doesValidArrayExist(derived = [1,0,1,0,1,0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 1, 1, 1, 0, 1])"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = 'neven')",
        "makeSmallestPalindrome(s = \"venen\")",
        "makeSmallestPalindrome(s = \"neve\")",
        "makeSmallestPalindrome(s = \"anev\")",
        "makeSmallestPalindrome(s = \"eeevennnn\")",
        "makeSmallestPalindrome(s = \"zenon\")"
    ],
    "sample_110": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [0, 1, 2, 3], k = 2)",
        "checkArray(nums = [1, 0, 1], k = 2)",
        "checkArray(nums = [2, 3, 4, 5, 6], k = 3)",
        "checkArray(nums = [3, 0, 1], k = 1)",
        "checkArray(nums = [4, 3, 1, 0], k = 2)",
        "checkArray(nums = [10, 4, 5, 3], k = 2)",
        "checkArray(nums = [1, -1, -2, 3], k = 2)",
        "checkArray(nums = [2, 4, 1, 0], k = 3)",
        "checkArray(nums = [10, -1, 5, 3, 7, -9, 1, 4, 6], k = 2)"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [True, 1, False, 0])"
    ],
    "sample_54": [
        "smallestString(s = \"akddsbncd\")",
        "smallestString(s = 'kddsbncda')",
        "smallestString(s = \"kddsbancd\")",
        "smallestString(s = \"kdbsncd\")",
        "smallestString(s = \"abdc\")",
        "smallestString(s = \"kdsbncd\")",
        "smallestString(s = 'aaaabbb')",
        "smallestString(s = \"aaxdxdc\")",
        "smallestString(s = \"gghcaa\")",
        "smallestString(s = \"zzddsabbaabbd\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(A = [1, 1, 2, 2])",
        "continuousSubarrays(A = [1, 2, 1, 2, 1, 2, 1])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 4, 3, 2, 1])",
        "continuousSubarrays(A = [1, 2, 2, 3])",
        "continuousSubarrays([1,2,1,2,1])",
        "continuousSubarrays(A = [1,2,1,2,1,2,1,2,1])",
        "continuousSubarrays(A = [1,2,2,3,1])",
        "continuousSubarrays(A = [1, 1, 1, 2, 2, 3, 3, 3, 4, 4])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = \"abca\")",
        "makeSmallestPalindrome(s = \"abbba\")",
        "makeSmallestPalindrome(s = 'abab')",
        "makeSmallestPalindrome(s = 'abca')",
        "makeSmallestPalindrome(s = 'aabb')",
        "makeSmallestPalindrome(s = \"aab\")",
        "makeSmallestPalindrome(s = \"abdca\")",
        "makeSmallestPalindrome(s = \"acbc\")"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [0, 1])",
        "findValueOfPartition(nums = [1, 3, 6, 10, 15])",
        "findValueOfPartition(nums = [1, 2, 3, 1])",
        "findValueOfPartition(nums = [2, 1, 1, 2])",
        "findValueOfPartition(nums = [2, 6, 9])",
        "findValueOfPartition(nums = [0, 2, 5])",
        "findValueOfPartition(nums = [1, 2, 5, 6, 7, 9])",
        "findValueOfPartition(nums = [2, 2, 5, 1, 0])"
    ],
    "sample_51": [
        "smallestString(s = 'kddsbnca')",
        "smallestString(s = 'kddsba')",
        "smallestString(s = 'kddsba')",
        "smallestString(s = \"kddsbnca\")",
        "smallestString(s = \"kddsba\")",
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = \"kddsbncda\")",
        "smallestString(\"kddsbnca\")",
        "smallestString(s = \"akdjdskl\")",
        "smallestString(s = \"knjczcnbp\")"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1,2,3], k = 1)",
        "maximumBeauty(nums = [2, 3, 4, 1, 5], k = 2)",
        "maximumBeauty(nums = [4, 5, 3, 1, 2, 6], k = 2)",
        "maximumBeauty(nums = [3, 4, 5, 6, 2, 1, 7, 8, 9, 10], k = 2)",
        "maximumBeauty(nums = [4, 3, 7, 8, 10, 11, 12, 1, 2, 6], k = 2)",
        "maximumBeauty(nums = [100, 10000, 1000000, 100000, 1000], k = 1000)",
        "maximumBeauty(nums = [2, 10, 13, 12, 15, 16, 3, 18, 4, 8, 1, 9], k = 2)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "checkArray(nums = [1, 3, -1, -3, 5, 3, 6, 7], k = 3)",
        "checkArray(nums = [1, 2, 3], k = 1)",
        "checkArray(nums = [1, 1, 1, 2, 1, 1], k = 3)",
        "checkArray(nums = [1, 2, 3, 2, 3], k = 2)",
        "checkArray(nums = [2, 1, 3, 4, 2], k = 2)",
        "checkArray(nums = [2, 4, 6, 1, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 1, 1, 2, 2], k = 5)",
        "checkArray(nums = [2,3,3,4,5,5], k = 3)"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 30, additionalTank = 1)",
        "distanceTraveled(mainTank = 30, additionalTank = 1)",
        "distanceTraveled(mainTank = 6, additionalTank = 1)",
        "distanceTraveled(mainTank = 25, additionalTank = 2)",
        "distanceTraveled(mainTank = 30, additionalTank = 2)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 15, additionalTank = 3)",
        "distanceTraveled(mainTank = 50, additionalTank = 1)",
        "distanceTraveled(mainTank = 25, additionalTank = 3)",
        "distanceTraveled(mainTank = 40, additionalTank = 3)"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 3])",
        "distinctDifferenceArray(nums = [1, 1, 1, 2, 2])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3, 3, 3])",
        "distinctDifferenceArray(nums = [0, 1, 1, 1, 2, 3, 4])",
        "distinctDifferenceArray([1, 3, 3, 2, 1])",
        "distinctDifferenceArray(nums = [5, 3, 1, 2, 7])",
        "distinctDifferenceArray(nums = [-1, -2, 0, 3, 3])",
        "distinctDifferenceArray(nums = [5, 2, 3, 3, 5])",
        "distinctDifferenceArray(nums = [3, 5, 1, 7, 10])",
        "distinctDifferenceArray([3, 5, 8, 9, 10, 12])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1,2,3,2,3,1])",
        "continuousSubarrays(A = [1,1,1,3,3,3])",
        "continuousSubarrays(A = [1, 2, 1, 2, 3, 2, 2])",
        "continuousSubarrays(A = [1, 3, 2, 1, 2, 3])",
        "continuousSubarrays(A = [0, 1, 1, 0, 0, 0, 0, 0])",
        "continuousSubarrays([1,1,1,1,2,2,2,3,3])",
        "continuousSubarrays(A = [1,2,3,4,5,5,5,6,7,8])",
        "continuousSubarrays(A = [1,2,3,3,3,2,1,1,1])",
        "continuousSubarrays([1,1,1,0,1,1,1,0,0,0,0])",
        "continuousSubarrays(A = [1, 2, 1, 3, 2, 3, 3, 3, 2, 1, 2, 3, 3, 2])"
    ],
    "sample_6": [
        "colorTheArray(n = 3, queries = [[0,1]])",
        "colorTheArray(n = 3, queries = [[0, 1]])",
        "colorTheArray(n = 3, queries = [[0, 0], [1, 1]])",
        "colorTheArray(n = 3, queries = [[0,0]])",
        "colorTheArray(n = 4, queries = [[0, 0], [1, 0], [2, 0], [3, 0]])",
        "colorTheArray(n = 3, queries = [[1, 1], [0, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1],[1, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 1], [1, 0]])",
        "colorTheArray(n = 7, queries = [[1,0],[2,1],[4,0],[2,0],[3,1],[4,1]])",
        "colorTheArray(n = 10, queries = [[0, 1], [0, 1], [0, 1], [0, 1], [1, 1], [2, 1], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [8, 0], [9, 0], [9, 0], [9, 0]])"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 5, b = 2)",
        "makeTheIntegerZero(a = 2, b = 1)",
        "makeTheIntegerZero(a = 3, b = 1)",
        "makeTheIntegerZero(a = 3, b = 1)",
        "makeTheIntegerZero(a = 12, b = 4)",
        "makeTheIntegerZero(a = 2, b = 3)",
        "makeTheIntegerZero(a = 6, b = 4)",
        "makeTheIntegerZero(a = 29, b = 17)",
        "makeTheIntegerZero(a = 4000, b = 10)",
        "makeTheIntegerZero(a = 130, b = 23)"
    ],
    "sample_100": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 1)",
        "maximumJumps(nums = [3, 0, 1, 2, 1], target = 1)",
        "maximumJumps(nums = [1,2,3,2,1], target = 1)",
        "maximumJumps(nums = [100, 200, 1000, 1000000000], target = 300)",
        "maximumJumps(nums = [5, 2, 3, 1, 4], target = 3)",
        "maximumJumps(nums = [1, 2, 4, 5, 1, 3], target = 3)",
        "maximumJumps(nums = [5, 0, 3, 1, 2, 3], target = 3)",
        "maximumJumps(nums = [3, 7, 1, 6, 2, 5, 1, 8, 0, 3], target = 3)",
        "maximumJumps(nums = [5, 9, 6, 3, 10, 2], target = 3)"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1,2,3], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,4,2,3], threshold = 5)",
        "longestAlternatingSubarray(nums = [3, 2, 4, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 5, 2, 3, 5, 8], threshold = 5)",
        "longestAlternatingSubarray(nums = [3, 6, 4, 1, 7, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 17, 18, 19, 20], threshold = 21)",
        "longestAlternatingSubarray(nums = [4, 5, 4, 2, 3, 6, 10, 5, 2, 8], threshold = 10)"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [5, 4, 3, 2])",
        "maxNonDecreasingLength(a = [4, 3, 2, 1], b = [4, 3, 2, 1])",
        "maxNonDecreasingLength(a = [4, 5, 6, 7], b = [2, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1, 3, 3, 1], b = [2, 5, 4, 2])",
        "maxNonDecreasingLength(a = [3, 1, 2, 6], b = [5, 4, 3, 1])",
        "maxNonDecreasingLength(a = [1, 2, 4, 5, 3], b = [5, 3, 4, 2, 1])",
        "maxNonDecreasingLength(a = [3, 1, 5, 4, 2], b = [4, 6, 7, 8, 9])",
        "maxNonDecreasingLength(a = [4, 2, 5, 1], b = [5, 3, 3, 2])",
        "maxNonDecreasingLength(a = [1, 3, 10, 10], b = [4, 5, 2, 10])",
        "maxNonDecreasingLength(a = [1, 1, 2, 4, 3, 4, 3], b = [1, 1, 2, 4, 5, 6, 7])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0])",
        "numberOfGoodSubarraySplits([1,1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0])"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], threshold = 2)",
        "longestAlternatingSubarray(nums = [0, 1, 2, 3, 4], threshold = 2)",
        "longestAlternatingSubarray(nums = [0], threshold = 2)",
        "longestAlternatingSubarray(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 0, 0, 1], threshold = 1)",
        "longestAlternatingSubarray(nums = [5, 2], threshold = 5)",
        "longestAlternatingSubarray(nums = [3, 4, 1, 5], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 4, 6, 7, 10, 11, 17], threshold = 7)"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2])",
        "findValueOfPartition(nums = [1])",
        "findValueOfPartition(nums = [3, 2, 1])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5, 6])",
        "findValueOfPartition([3, 2, 1])",
        "findValueOfPartition(nums = [5, 6, 7])",
        "findValueOfPartition(nums = [4, 5, 6, 7, 8])",
        "findValueOfPartition([2, 7, 1, 3])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abbc\")",
        "makeSmallestPalindrome(s = \"abcb\")",
        "makeSmallestPalindrome(s = \"baab\")",
        "makeSmallestPalindrome(s = \"baba\")",
        "makeSmallestPalindrome(s = 'abccba')",
        "makeSmallestPalindrome(s = \"babba\")",
        "makeSmallestPalindrome(s = \"abacb\")",
        "makeSmallestPalindrome(s = \"cac\")",
        "makeSmallestPalindrome(s = \"bbbb\")"
    ],
    "sample_18": [
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABCDABAB\")",
        "minLength(s = \"ABABABCDCDCDCD\")",
        "minLength(s = \"BCDABCDE\")",
        "minLength(s = \"ABABCDECDABCDABCDABCDABCD\")"
    ],
    "sample_99": [
        "maximumJumps(nums = [1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [3, 2, 1, 0, 4], target = 2)",
        "maximumJumps(nums = [10, 1, 2, 7, 6, 1, 5], target = 5)",
        "maximumJumps(nums = [1, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 5], target = 1)",
        "maximumJumps(nums = [2, 5, 1, 2, 0, 5, 3], target = 3)",
        "maximumJumps(nums = [1, 2, 1, 3, 4, 2, 4, 1, 1, 2], target = 2)",
        "maximumJumps(nums = [1, 2, 1, 2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2], target = 2)"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [4, 1], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 2], [4, 2], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [1, 0], [2, 0], [3, 0], [4, 1]])",
        "colorTheArray(n = 5, queries = [[1, 0], [3, 0], [2, 1], [4, 0], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 1], [3, 1], [2, 2], [1, 1]])",
        "colorTheArray(n = 5, queries = [[1,1],[1,2],[2,2],[2,3],[3,2]])",
        "colorTheArray(n = 5, queries = [[1, 0], [2, 1], [1, 2], [1, 0], [2, 1]])",
        "colorTheArray(n = 5, queries = [[3, 1], [4, 1], [2, 2], [3, 2]])",
        "colorTheArray(n = 5, queries = [[1, 2], [4, 3], [1, 2], [2, 1], [3, 2]])",
        "colorTheArray(n = 4, queries = [[1, 1], [1, 0], [2, 0], [2, 1], [3, 1], [3, 0]])"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 2)",
        "distanceTraveled(mainTank = 2, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 3)",
        "distanceTraveled(mainTank = 3, additionalTank = 3)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [2, 1, 4])",
        "countBeautifulPairs(nums = [2, 3, 5, 4])",
        "countBeautifulPairs(nums = [13, 1, 15])",
        "countBeautifulPairs(nums = [12, 15, 17, 9])",
        "countBeautifulPairs([2, 3, 6, 8, 12, 14])",
        "countBeautifulPairs(nums = [3, 5, 6, 7, 8, 10, 11, 13, 14])",
        "countBeautifulPairs([1, 4, 11, 21, 20])",
        "countBeautifulPairs(nums = [15, 1, 11, 100, 13, 20])",
        "countBeautifulPairs(nums = [13, 12, 15, 12, 4, 8, 5])"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3, 4, 5], x = 2)",
        "minCost(A = [2, 3, 5, 1], x = 2)",
        "minCost(A = [2, 3, 6, 4, 5], x = 3)",
        "minCost(A = [2, 7, 11, 15], x = 2)",
        "minCost(A = [3, 3, 3, 3, 3], x = 5)",
        "minCost(A = [7, 2, 5, 10, 4], x = 2)",
        "minCost(A = [1, 3, 6, 7], x = 4)",
        "minCost(A = [3, 4, 1, 4], x = 3)",
        "minCost(A = [2, 3, 2, 1, 1, 2])"
    ],
    "sample_98": [
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [1,3,5,8], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 4, 2], target = 3)",
        "maximumJumps(nums = [1,2,3,1,1,4], target = 3)",
        "maximumJumps(nums = [4, 2, 3, 7], target = 1)",
        "maximumJumps(nums = [1,3,3,5], target = 2)",
        "maximumJumps(nums = [1, 3, 3, 1, 3], target = 2)",
        "maximumJumps(nums = [1, 1, 2, 3, 5, 4, 2, 3, 1, 1, 5], target = 2)",
        "maximumJumps(nums = [2,5,6,2,0,3,3], target = 1)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 0, 1, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,1,1,0,0,1,0])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1,2,3,4,5])",
        "distinctDifferenceArray(nums = [1,2,3,4,5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 2, 1])",
        "distinctDifferenceArray(nums = [0, 1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6])",
        "distinctDifferenceArray(nums = [3, 2, 1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 2, 2, 3, 5])",
        "distinctDifferenceArray(nums = [1, 2, 1, 1, 1, 1])"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countBeautifulPairs(nums = [10, 11, 12, 13, 14])",
        "countBeautifulPairs(nums = [2,1,3,4,5])",
        "countBeautifulPairs(nums = [1, 10, 20, 30, 40])",
        "countBeautifulPairs(nums = [9, 2, 1, 1, 2])",
        "countBeautifulPairs(nums = [13, 14, 15, 17, 19, 3])",
        "countBeautifulPairs([10, 3, 2, 100])",
        "countBeautifulPairs(nums = [7, 2, 14, 8, 4])",
        "countBeautifulPairs(nums = [5, 13, 16, 1, 16])"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abcd\")",
        "minimizedStringLength(s = \"abcd\")",
        "minimizedStringLength(s = \"aba\")",
        "minimizedStringLength(s = \"baaa\")",
        "minimizedStringLength(s = \"qwer\")",
        "minimizedStringLength(s = \"bbbc\")",
        "minimizedStringLength(s = \"xyyz\")",
        "minimizedStringLength(s = \"pqrq\")",
        "minimizedStringLength(s = \"aabbcdddeeee\")"
    ],
    "sample_41": [
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abcdef\")",
        "minimumCost(s = \"abcdef\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"abcb\")",
        "minimumCost(s = \"abbbc\")",
        "minimumCost(s = \"abbbb\")",
        "minimumCost(s = \"babba\")",
        "minimumCost(s = \"baacb\")"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1,2,3,4,5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 2])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 1, 1, 1, 1])",
        "distinctDifferenceArray(nums = [1, 1, 1, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1,2,2,3,3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 1, 2, 3])",
        "distinctDifferenceArray(nums = [0, 1, 2, 3, 1])",
        "distinctDifferenceArray(nums = [0, 2, 2, 0, 0, 1, 1])"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1,1,0,1])"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [0, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0])",
        "doesValidArrayExist(derived = [1, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 1, 0])",
        "doesValidArrayExist(derived = [1,0,1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1,0,1,0,1,0])"
    ],
    "sample_52": [
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = \"kddsbnca\")",
        "smallestString(s = \"kddsba\")",
        "smallestString(s = \"kddsba\")",
        "smallestString(s = 'kddsbancd')",
        "smallestString(s = 'abcdz')",
        "smallestString(s = 'kdbfzncd')",
        "smallestString(s = 'kkkdssdda')"
    ],
    "sample_40": [
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"abac\")",
        "minimumCost(s = \"abac\")",
        "minimumCost(s = \"aabb\")",
        "minimumCost(s = \"aaaabbb\")",
        "minimumCost(s = \"hello\")",
        "minimumCost(s = \"cbbd\")",
        "minimumCost(s = \"babccbab\")",
        "minimumCost(s = \"abbbbcbabbbbbbbb\")",
        "minimumCost(s = \"gfecdgjh\")"
    ],
    "sample_38": [
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abccba\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"banana\")",
        "minimumCost(s = \"aaa\")",
        "minimumCost(s = \"aaabbb\")",
        "minimumCost(s = \"abaa\")",
        "minimumCost(s = \"aaabaa\")",
        "minimumCost(s = \"ababababababab\")",
        "minimumCost(s = \"bbcbb\")"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [2, 1, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2])",
        "distinctDifferenceArray(nums = [3, 4, 5, 2, 1])",
        "distinctDifferenceArray(nums = [2, 2, 2, 2, 3])",
        "distinctDifferenceArray(nums = [-1, 4, 6, 10])",
        "distinctDifferenceArray(nums = [2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_53": [
        "smallestString(s = \"baabc\")",
        "smallestString(s = \"baabc\")",
        "smallestString(s = \"babac\")",
        "smallestString(s = \"ababc\")",
        "smallestString(s = \"baacbc\")",
        "smallestString(s = \"acb\")",
        "smallestString(s = \"zzz\")",
        "smallestString(s = \"zaba\")",
        "smallestString(s = 'abaaac')",
        "smallestString(s = \"bcdef\")"
    ],
    "sample_109": [
        "checkArray(nums = [1,2,3], k = 1)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 4)",
        "checkArray(nums = [1, 2, 5, 6], k = 2)",
        "checkArray(nums = [3, 2, 4, 1], k = 3)",
        "checkArray(nums = [3, 1, 5, 10], k = 2)",
        "checkArray(nums = [1, 3, 5, 2, 3], k = 3)",
        "checkArray(nums = [1, 10, 2, 20], k = 3)",
        "checkArray(nums = [3, 2, 5, 1, 6, 4, 7], k = 2)",
        "checkArray(nums = [1, 2, 3, 5, 4, 3, 6, 7], k = 3)",
        "checkArray(nums = [2,3,1,0,5,4,7,6,9,8], k = 2)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1,2,3,4], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7,8,9,10], k = 2)",
        "maximumBeauty(nums = [3,4,2,1], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,6,10], k = 3)",
        "maximumBeauty(nums = [7, 9, 5, 6], k = 3)",
        "maximumBeauty(nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 5, 5, 6, 7, 8, 9, 9], k = 2)",
        "maximumBeauty(nums = [3,2,1,2,6,1,2], k = 2)",
        "maximumBeauty(nums = [3,2,5,6,5,1], k = 2)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1,2,3,4,5])",
        "distinctDifferenceArray(a = [1,2,3,4,5])",
        "distinctDifferenceArray(a = [1,2,3,4,5])",
        "distinctDifferenceArray(a = [1,2,3,4,5])",
        "distinctDifferenceArray(a = [1, 2, 1, 3, 3])",
        "distinctDifferenceArray(a = [4, 1, 2, 3, 4])",
        "distinctDifferenceArray(a = [1, 2, 2, 3, 3, 3, 4])",
        "distinctDifferenceArray(a = [3, 1, 3, 2, 3, 3])"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '5123010')",
        "removeTrailingZeros(a = '5123010')",
        "removeTrailingZeros(a = '5123010')",
        "removeTrailingZeros(a = '5123010')",
        "removeTrailingZeros(a = \"5123010\")",
        "removeTrailingZeros(a = \"5123010\")",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301010')",
        "removeTrailingZeros(a = '123400000')",
        "removeTrailingZeros(a = '111011011110110000000000000000000000000')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"venen\")",
        "makeSmallestPalindrome(s = \"neevn\")",
        "makeSmallestPalindrome(s = 'nevne')",
        "makeSmallestPalindrome(s = \"iven\")",
        "makeSmallestPalindrome(s = \"nvne\")",
        "makeSmallestPalindrome(s = \"nibevne\")"
    ],
    "sample_55": [
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbnd\")",
        "smallestString(\"kddsbncd\")",
        "smallestString(s = \"kddsbndz\")",
        "smallestString(s = \"kdbbca\")",
        "smallestString(s = \"kdljsbndc\")",
        "smallestString(s = \"eazkq\")",
        "smallestString(s = \"kdshsjbx\")"
    ],
    "sample_35": [
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000000\")",
        "removeTrailingZeros(num = \"51230101010101\")",
        "removeTrailingZeros(num = \"0051230100\")"
    ],
    "sample_23": [
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s=\"ABCDAB\")",
        "minLength(s = \"ABCDABCDAB\")",
        "minLength(s = \"AABCBA\")",
        "minLength(s=\"ABACDABCD\")",
        "minLength(s=\"ABABCDABABCDABABCDABABCD\")",
        "minLength(s = \"ABCDBCDBC\")",
        "minLength(s = \"AABCDCDCDCDCDC\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = '512301000')"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 4, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 4, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 2)",
        "makeTheIntegerZero(num1 = 13, num2 = 3)",
        "makeTheIntegerZero(num1 = 16, num2 = 2)",
        "makeTheIntegerZero(num1 = 9, num2 = 5)",
        "makeTheIntegerZero(num1 = 40, num2 = 10)",
        "makeTheIntegerZero(num1 = 16, num2 = 10)",
        "makeTheIntegerZero(num1 = 29, num2 = 12)"
    ],
    "sample_57": [
        "distanceTraveled(a = 3, b = 1)",
        "distanceTraveled(a = 5, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 4, b = 1)",
        "distanceTraveled(a = 4, b = 1)",
        "distanceTraveled(a = 7, b = 1)",
        "distanceTraveled(a = 2, b = 0)",
        "distanceTraveled(a = 10, b = 2)",
        "distanceTraveled(a = 4, b = 4)",
        "distanceTraveled(a = 20, b = 3)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [1,2,3,4], t = 4)",
        "longestAlternatingSubarray(nums = [0,1,0,1,0], t = 1)",
        "longestAlternatingSubarray(nums = [1,3,5,7], t = 3)",
        "longestAlternatingSubarray(nums = [1,3,5,7,9], t = 5)",
        "longestAlternatingSubarray(nums = [2,5,4,1], t = 2)",
        "longestAlternatingSubarray(nums = [1,2,5,6], t=3)",
        "longestAlternatingSubarray(nums = [1,4,4,4,3], t = 4)",
        "longestAlternatingSubarray(nums = [0,1,3,3,2], t = 1)",
        "longestAlternatingSubarray(nums = [1,4,7,2,5,8,3,6], t = 5)",
        "longestAlternatingSubarray(nums = [4, 7, 10, 12, 3], t = 9)"
    ],
    "sample_102": [
        "maximumJumps(nums = [1, 2, 3, 4], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], target = 3)",
        "maximumJumps(nums = [3, 4, 1, 1, 4], target = 1)",
        "maximumJumps(nums = [-1, 3, 0, 1, -3, 4], target = 3)",
        "maximumJumps(nums = [1,3,2,4,2], target = 3)",
        "maximumJumps(nums = [1,3,5,8,10], target = 5)",
        "maximumJumps(nums = [3, 4, 6, 2, 4], target = 2)",
        "maximumJumps(nums = [1, 3, 2, 6, 2, 5, 2], target = 2)",
        "maximumJumps(nums = [100, 80, 120, 60, 140, 160, 180, 200], target = 10)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')"
    ],
    "sample_101": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], target = 3)",
        "maximumJumps(nums = [1, 2, 3], target = 3)",
        "maximumJumps(nums = [2,3,1,1,4], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 7, 6, 0], target = 2)",
        "maximumJumps(nums = [1, 3, 10, 5, 2], target = 3)",
        "maximumJumps(nums = [2, 2, 1, 2, 1, 2, 1], target = 2)"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1,0,1,0])",
        "doesValidArrayExist(derived = [1,0,0,1,0])",
        "doesValidArrayExist(derived = [1, 2, 2, 4])",
        "doesValidArrayExist(derived = [2, 1, 3, 5])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 2, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 2, 1, 2, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 0, 1, 0, 0, 0])"
    ],
    "sample_19": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABCABCD\")",
        "minLength(s = \"ABCDABCDAB\")",
        "minLength(s = \"ABABCABCD\")",
        "minLength(s = \"ABCDABCDCDCDABCD\")",
        "minLength(s = \"ABABBCDABCD\")",
        "minLength(s = \"CDCDCDABABAB\")",
        "minLength(s = \"ABCBDCABD\")",
        "minLength(s = 'ABCDCDABCDCDABCDCDABCDCDABCDCDABCD')"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"naveen\")",
        "makeSmallestPalindrome(s = \"naveen\")",
        "makeSmallestPalindrome(s = 'veneven')",
        "makeSmallestPalindrome(s = 'oven')"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [1,2,3,4])",
        "semiOrderedPermutation(nums = [1,2,3,4])",
        "semiOrderedPermutation(nums = [1,3,2,4])",
        "semiOrderedPermutation(nums = [1,3,2])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [2,1,3])",
        "semiOrderedPermutation(nums = [2,3,1,4])",
        "semiOrderedPermutation(nums = [2,1,3,4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation([3,1,4])"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,1,1,1])",
        "numberOfGoodSubarraySplits([0,0,1,1,0,1])"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1,2,3,4,5,6,7,8,9,10], k = 1)",
        "maximumBeauty(nums = [1, 4, 2, 5, 3], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 2], k = 2)",
        "maximumBeauty(nums = [1, 2, 10, 10, 3], k = 3)",
        "maximumBeauty(nums = [3, 4, 2, 1, 1], k = 3)",
        "maximumBeauty(nums = [5,2,2,3,1], k = 1)",
        "maximumBeauty(nums = [0,1,1,1,2], k = 2)",
        "maximumBeauty(nums = [4,2,10,1,3], k = 2)",
        "maximumBeauty(nums = [2, 3, 1, 4, 5, 6, 7, 8, 9, 10], k = 4)",
        "maximumBeauty(nums = [5, 15, 4, 10], k = 2)"
    ],
    "sample_117": [
        "minimumIndex(nums = [1, 1, 1, 2, 2, 3])",
        "minimumIndex(nums = [1,1,2,2])",
        "minimumIndex(nums = [1, 3, 2, 1, 1])",
        "minimumIndex([1, 2, 2, 2, 3, 3, 3])",
        "minimumIndex(nums = [1, 2, 4, 1, 2, 4])",
        "minimumIndex(nums = [1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "minimumIndex([2, 2, 2, 3, 1])",
        "minimumIndex(nums = [5, 1, 1, 1, 5, 1, 1])",
        "minimumIndex(nums = [2, 3, 1, 5, 4, 3, 2])",
        "minimumIndex([3, 3, 3, 1, 1, 3, 1, 3])"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 8, num2 = 3)",
        "makeTheIntegerZero(num1 = 11, num2 = 4)",
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 15, num2 = 4)",
        "makeTheIntegerZero(num1 = 20, num2 = 5)",
        "makeTheIntegerZero(num1 = 19, num2 = 3)",
        "makeTheIntegerZero(num1 = 28, num2 = 5)",
        "makeTheIntegerZero(num1 = 11111, num2 = 2)"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [3, 1, 4, 2])",
        "countBeautifulPairs(nums = [1, 2, 4, 8])",
        "countBeautifulPairs(nums = [4, 3, 2, 5])",
        "countBeautifulPairs(nums = [11, 22, 31, 44, 55])",
        "countBeautifulPairs([2,2,5])",
        "countBeautifulPairs(nums = [3,5,3,6])",
        "countBeautifulPairs(nums = [12, 11, 15, 3])",
        "countBeautifulPairs(nums = [40, 50, 20, 10])",
        "countBeautifulPairs(nums = [2, 8, 20, 2])",
        "countBeautifulPairs([1234, 156, 23])"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 13, num2 = 5)",
        "makeTheIntegerZero(num1 = 2, num2 = 3)",
        "makeTheIntegerZero(num1 = 11, num2 = 5)",
        "makeTheIntegerZero(num1 = 11, num2 = 1)",
        "makeTheIntegerZero(num1 = 20, num2 = 2)",
        "makeTheIntegerZero(num1 = 35, num2 = 12)",
        "makeTheIntegerZero(num1 = 45, num2 = 7)",
        "makeTheIntegerZero(num1 = 10000, num2 = 100)",
        "makeTheIntegerZero(num1 = 54, num2 = 17)",
        "makeTheIntegerZero(num1 = 36, num2 = 32)"
    ],
    "sample_20": [
        "minLength(s = \"ABABCDABCD\")",
        "minLength(s = \"ABCAB\")",
        "minLength(s = \"ABCAD\")",
        "minLength(s = \"ABACDBCD\")",
        "minLength(s = \"ABCDCDCDCD\")",
        "minLength(s = \"CDCDBA\")",
        "minLength(s = \"ACDBCDA\")",
        "minLength(s = \"CABAABCD\")",
        "minLength(s = \"ABABABABABABCDCDCDABCD\")",
        "minLength(s = \"ABABABABABABABABABCDABCD\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 2, 3], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 3, 2, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 2, 3], k = 2)",
        "maximumBeauty(nums = [1, 4, 3, 2, 5], k = 2)",
        "maximumBeauty(nums = [1, 5, 3, 2], k = 1)",
        "maximumBeauty(nums = [0, 2, 1, 5], k = 2)",
        "maximumBeauty(nums = [5, 3, 2, 1], k = 3)"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [1,2,3,4])",
        "countBeautifulPairs(nums = [2,3])",
        "countBeautifulPairs(nums = [1,1,1,1,1,1])",
        "countBeautifulPairs(nums = [12, 1, 4])",
        "countBeautifulPairs(nums = [12, 13, 22])",
        "countBeautifulPairs(nums = [1,3,2,6,8])",
        "countBeautifulPairs(nums=[12, 1, 10])",
        "countBeautifulPairs(nums = [1,4,6,12,18,24,36,48])",
        "countBeautifulPairs([10,1,9,5,6,2,5])",
        "countBeautifulPairs(nums=[55,2,7,8,101,22,200])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 14, num2 = 3)",
        "makeTheIntegerZero(num1 = 42, num2 = 7)",
        "makeTheIntegerZero(num1 = 33, num2 = 5)",
        "makeTheIntegerZero(num1 = 1000, num2 = 200)",
        "makeTheIntegerZero(num1 = 123, num2 = 14)",
        "makeTheIntegerZero(num1 = 202, num2 = 10)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"evene\")",
        "makeSmallestPalindrome(s = \"niven\")",
        "makeSmallestPalindrome(s = \"neveN\")",
        "makeSmallestPalindrome(s = \"evnen\")",
        "makeSmallestPalindrome(s = 'niven')",
        "makeSmallestPalindrome(s = \"nEvEn\")",
        "makeSmallestPalindrome(s = \"eveVen\")"
    ],
    "sample_37": [
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abccba\")",
        "minimumCost(s = \"aabba\")",
        "minimumCost(s = \"abcc\")",
        "minimumCost(s = \"cb\")",
        "minimumCost(s = \"abcabac\")",
        "minimumCost(s = \"aaabaaabbbabaaaabaaab\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1,1,0,0,1,1])"
    ],
    "sample_105": [
        "checkArray(nums = [1, 2, 3], k = 2)",
        "checkArray(nums = [1, 2, 3], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [2, 3, 1, 2, 4], k = 2)",
        "checkArray(nums = [1,2,3,4,5,6,7], k = 3)",
        "checkArray(nums = [1, 1, 1, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [1, 3, 2, 4], k = 2)",
        "checkArray(nums = [1, 0, 0], k = 2)",
        "checkArray(nums = [3, 2, 3, 4, 5, 4], k = 3)",
        "checkArray(nums = [0, 0, 1, 0, 0, 2, 1, 1, 0], k = 3)"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 4, 3, 2])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [5, 1, 2, 4, 3])",
        "semiOrderedPermutation(nums = [2, 3, 5, 1, 4])",
        "semiOrderedPermutation(nums = [1, 5, 2, 3, 6, 4])",
        "semiOrderedPermutation(nums = [1, 5, 3, 6, 4, 2])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 1, 1, 1], k = 2)",
        "checkArray(nums = [2, 2, 2], k = 3)",
        "checkArray(nums = [1, 1, 0], k = 1)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 1)",
        "checkArray(nums = [2, 1, 3, 4, 2], k = 3)",
        "checkArray(nums = [4, 2, 4, 5, 1], k = 2)",
        "checkArray(nums = [3, 0, 3, 1], k = 2)",
        "checkArray(nums = [10, 3, 2, 4], k = 3)"
    ],
    "sample_39": [
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aabb\")",
        "minimumCost(s = \"abca\")",
        "minimumCost(s = \"abca\")",
        "minimumCost(s = \"aabbb\")",
        "minimumCost(s = \"aaabb\")",
        "minimumCost(s = \"babab\")",
        "minimumCost(s = \"aaaabbbbb\")"
    ],
    "sample_65": [
        "findValueOfPartition(a = [1, 2, 3])",
        "findValueOfPartition(a = [1, 2, 3])",
        "findValueOfPartition(a = [1, 2, 3, 4])",
        "findValueOfPartition(a = [1, 2])",
        "findValueOfPartition(a = [1])",
        "findValueOfPartition(a = [1, 2, 4, 5])",
        "findValueOfPartition(a = [2, 3, 4])",
        "findValueOfPartition(a = [4, 2, 5, 7])",
        "findValueOfPartition([2, 4, 4, 4])",
        "findValueOfPartition(a = [0, 2, 6, 10, 4])"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 20, additionalTank = 1)",
        "distanceTraveled(mainTank = 20, additionalTank = 3)",
        "distanceTraveled(mainTank = 4, additionalTank = 0)",
        "distanceTraveled(mainTank = 14, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 2)",
        "distanceTraveled(mainTank = 25, additionalTank = 3)",
        "distanceTraveled(mainTank = 20, additionalTank = 5)",
        "distanceTraveled(mainTank = 21, additionalTank = 0)",
        "distanceTraveled(mainTank = 60, additionalTank = 1)",
        "distanceTraveled(mainTank = 24, additionalTank = 4)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4])",
        "doesValidArrayExist(derived = [1, 2, 3, 4])",
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1,0,1,1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1,0,1,0,1,1,1,0])",
        "doesValidArrayExist(derived = [2, 1, 6, 4, 5, 3])"
    ],
    "sample_106": [
        "checkArray(nums = [1, 2, 3], k = 2)",
        "checkArray(nums = [1, 2, 3, 4], k = 1)",
        "checkArray(nums = [1, 1, 1], k = 1)",
        "checkArray(nums = [1, 3, 4, 2], k = 2)",
        "checkArray(nums = [3, 2, 3], k = 1)",
        "checkArray(nums = [1, 2, 4, 3], k = 2)",
        "checkArray(nums = [3, 1, 2, 5], k = 3)",
        "checkArray(nums = [1, 0, 2, 3, 4], k = 2)",
        "checkArray(nums = [4, 6, 4], k = 2)",
        "checkArray(nums = [0, 1, 0, 0, 2], k = 4)"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 1], threshold = 1)",
        "longestAlternatingSubarray(nums = [2, 3, 1], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 1, 4], threshold = 1)",
        "longestAlternatingSubarray(nums = [2, 1, 3, 2, 1, 3, 2], threshold = 3)",
        "longestAlternatingSubarray(nums = [3, 1, 5, 7], threshold = 7)",
        "longestAlternatingSubarray(nums = [4, 5, 4, 1, 6], threshold = 10)",
        "longestAlternatingSubarray(nums = [4, 1, 6, 3, 1, 2], threshold = 100)",
        "longestAlternatingSubarray(nums = [2, 3, 6, 8, 2, 3, 12], threshold = 5)"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countBeautifulPairs(nums = [12, 28, 46, 32])",
        "countBeautifulPairs(nums = [1, 3, 5])",
        "countBeautifulPairs(nums = [7, 3, 9, 12])",
        "countBeautifulPairs(nums = [11, 10, 14, 15])",
        "countBeautifulPairs([4, 2, 1, 9])",
        "countBeautifulPairs(nums = [11, 12, 3, 30, 13, 31])",
        "countBeautifulPairs(nums = [123, 321, 12, 1234, 5, 1234])",
        "countBeautifulPairs([918, 819, 810, 123, 198])",
        "countBeautifulPairs(nums = [1, 11, 2, 1, 15, 12, 19, 5, 24, 17, 20])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5], t = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8], t = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], t = 10)",
        "longestAlternatingSubarray(nums = [2,1,2,1,2,3,2], t = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 4, 1, 3], t = 2)",
        "longestAlternatingSubarray(nums = [1,2,4,8,16,32], t = 16)",
        "longestAlternatingSubarray(nums = [5, 2, 1, 4, 3], t = 3)",
        "longestAlternatingSubarray(nums = [2,6,1,4], t = 3)",
        "longestAlternatingSubarray(nums = [3,2,4,1,6], t = 2)",
        "longestAlternatingSubarray(nums = [2,4,10,12], t = 4)"
    ],
    "sample_36": [
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abbba\")",
        "minimumCost(s = \"aaaabbbbb\")",
        "minimumCost(s = \"foo\")",
        "minimumCost(s = \"baaa\")",
        "minimumCost(s = \"abaccd\")",
        "minimumCost(s = \"bbbaxbbb\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCDABCDABCDABCD\")",
        "minLength(s = \"ABABCDE\")",
        "minLength(s = \"ABCDABCDABCDABCDABC\")",
        "minLength(s = \"ABCBCDAB\")",
        "minLength(s = \"CDABCDABCDABC\")",
        "minLength(s = \"ACBBCB\")",
        "minLength(s = \"AAAABCCCCD\")",
        "minLength(s = \"ABABAABCDD\")",
        "minLength(s = \"ACDABDACB\")",
        "minLength(s = \"AAAABBCDABBCCDABBA\")"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0])",
        "numberOfGoodSubarraySplits([1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 1, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 1, 0, 0, 1, 0])"
    ],
    "sample_9": [
        "colorTheArray(n = 2, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0]])",
        "colorTheArray(n = 5, queries = [])",
        "colorTheArray(n = 4, queries = [[1, 0]])",
        "colorTheArray(n = 3, queries = [[1, 0], [2, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0, 1], [2, 2]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 1], [2, 0], [3, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 0], [2, 0]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 1], [2, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [0, 1], [1, 0], [1, 1], [2, 0]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1,2], nums2 = [3,4])",
        "maxNonDecreasingLength(nums1 = [5, 4, 3, 2, 1], nums2 = [5, 6, 7, 8, 9])",
        "maxNonDecreasingLength(nums1 = [1,2], nums2 = [1,2])",
        "maxNonDecreasingLength(nums1 = [1, 3], nums2 = [2, 4])",
        "maxNonDecreasingLength(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4], nums2 = [2, 1, 4, 3])",
        "maxNonDecreasingLength(nums1 = [3, 2, 4], nums2 = [4, 3, 1])",
        "maxNonDecreasingLength(nums1 = [5, 2, 1], nums2 = [2, 6, 4])",
        "maxNonDecreasingLength(nums1 = [1, 3, 5, 2, 4], nums2 = [6, 9, 10, 5, 7])",
        "maxNonDecreasingLength(nums1 = [5, 1, 4, 3], nums2 = [1, 5, 2, 4, 3])"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [2, 3, 4], k = 1)",
        "maximumBeauty(nums = [3, 2, 1, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [5, 5, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 5, 6, 7, 8, 9], k = 1)",
        "maximumBeauty(nums = [4,5,2,1], k = 3)",
        "maximumBeauty(nums = [3, 7, 1, 6, 9, 4, 2], k = 5)",
        "maximumBeauty(nums = [5, 5, 5, 5, 5, 5, 5, 5], k = 4)",
        "maximumBeauty(nums = [2, 4, 1, 8, 11], k = 1)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1, 1, 1])",
        "findValueOfPartition(nums = [1, 1, 1])",
        "findValueOfPartition(nums = [2, 2])",
        "findValueOfPartition(nums = [1, 1, 2, 3])",
        "findValueOfPartition(nums = [0,0,1])",
        "findValueOfPartition(nums = [5, 10])",
        "findValueOfPartition(nums = [4, 2, 3, 6, 1])",
        "findValueOfPartition(nums = [3, 4, 6, 6, 7, 8])",
        "findValueOfPartition([1,1,1,1,1,2,2,3,3,3,4])",
        "findValueOfPartition([1,1,2,2,3,3,5,6,8])"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1,2,3,4,5])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [10,20,30,40,50])",
        "findValueOfPartition(nums = [2, 1, 1])",
        "findValueOfPartition(nums = [10,1])",
        "findValueOfPartition(nums = [4, 4])",
        "findValueOfPartition(nums = [3, 1, 4, 5])",
        "findValueOfPartition(nums = [0,1,3,5,7])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "semiOrderedPermutation(nums = [1, 2, 3, 5, 4, 6])",
        "semiOrderedPermutation(nums = [3, 5, 2, 7, 1, 4])",
        "semiOrderedPermutation(nums = [1, 10, 3, 5, 7, 9, 11])"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 4, 3])",
        "semiOrderedPermutation([3, 1, 2])",
        "semiOrderedPermutation(nums = [5, 1, 4, 3, 2])",
        "semiOrderedPermutation(nums = [1, 4, 3, 5, 2])",
        "semiOrderedPermutation(nums = [3, 5, 1])",
        "semiOrderedPermutation(nums = [4, 5, 6, 1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 4, 5, 7, 8])"
    ],
    "sample_167": [
        "isAcronym(words = [\"Apple\", \"Samsung\", \"Google\"], s = \"ASG\")",
        "isAcronym(words = [\"this\", \"is\", \"test\"], s = \"TIT\")",
        "isAcronym(words = [\"z\", \"q\"], s = \"zq\")",
        "isAcronym(words = [\"yo\", \"mom\", \"yo\"], s = \"yo\")",
        "isAcronym(words = [\"Ja\", \"va\", \"sa\"], s = \"JVS\")",
        "isAcronym(words = [\"abc\",\"def\",\"g\"], s = \"ghi\")",
        "isAcronym(words = [\"carpet\", \"carpet\", \"carpet\"], s = \"c\")",
        "isAcronym(words = [\"iceland\", \"brazil\", \"australia\", \"france\"], s = \"FRANCE\")",
        "isAcronym(words = [\"platypus\", \"zebra\", \"giraffe\", \"cobra\"], s = \"Z\")",
        "isAcronym(words = [\"FOB\", \"COB\", \"SAC\", \"SOF\"], s = \"fobcob\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 4, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [0,1,1,1,0], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1,2,1,4,1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 1, 1, 0], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [0, 0, 0, 1, 1, 0, 0, 0, 0], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1, 1, 1, 2, 2], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,3,6,3,4,5,10,1],m = 5, k = 4)"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1,3],[4,7]])",
        "numberOfPoints(nums = [[1, 3], [1, 2]])",
        "numberOfPoints(nums = [[1,3], [2,4], [5,7]])",
        "numberOfPoints(nums = [[2,5],[3,7]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [6, 10]])",
        "numberOfPoints(nums = [[1, 10], [3, 6], [2, 8]])",
        "numberOfPoints(nums = [[1, 3], [3, 3], [10, 20]])",
        "numberOfPoints(nums = [[2,3], [5,8], [12, 15]])",
        "numberOfPoints(nums = [[1,3],[10,12],[3,10],[3,10]])",
        "numberOfPoints(nums = [[1,3],[5,7],[1,5],[1,7],[3,7],[5,7]])"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easyproblem\"], separator = \"problem\")",
        "splitWordsBySeparator(words = \"easyproblem\", separator = \"problem\")",
        "splitWordsBySeparator(words = ['easyproblem'], separator = 'p')",
        "splitWordsBySeparator(words = \"easy problem\", separator = ' ')",
        "splitWordsBySeparator(words = \"easy-problem\", separator = \"-\")",
        "splitWordsBySeparator(words = ['easy-problem'], separator = '-')",
        "splitWordsBySeparator(words = \"easyproblem\".split(\" \"), separator = \" \")",
        "splitWordsBySeparator(words = \"easyproblem\", separator = 'problem')",
        "splitWordsBySeparator(words = [\"hi this is a test\"], separator = \" \")",
        "splitWordsBySeparator(words = \"thisisnotajoke\".split(), separator = \"s\")"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 5], [10, 20]])",
        "numberOfPoints(nums = [[1,5], [4,6]])",
        "numberOfPoints(nums = [[2, 6], [5, 10]])",
        "numberOfPoints(nums = [[1, 4], [3, 5], [6, 7]])",
        "numberOfPoints(nums = [[1,4], [3,6]])",
        "numberOfPoints(nums = [(1, 3), (2, 6), (3, 5)])",
        "numberOfPoints(nums = [[2, 3], [7, 11]])",
        "numberOfPoints(nums = [[0, 2], [1, 3], [3, 6], [4, 6], [4, 8]])",
        "numberOfPoints(nums = [[2, 5], [5, 9], [2, 5], [9, 12], [6, 9]])",
        "numberOfPoints(nums = [[1, 10], [11, 20], [3, 30], [4, 40], [15, 15], [6, 16]])"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1,2,3,4])",
        "countCompleteSubarrays(nums = [1, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [2, 1, 2, 1])",
        "countCompleteSubarrays(nums = [2, 1, 2, 4, 3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1,1,2])",
        "countCompleteSubarrays(nums = [1,2,2,3,4])",
        "countCompleteSubarrays(nums = [1, 3, 2, 4, 1, 5, 3])",
        "countCompleteSubarrays(nums = [1,2,2,2,4,3,3,5,5])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"|\")",
        "splitWordsBySeparator(words = \"one two three four five six\".split(), separator = \" \")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ',')",
        "splitWordsBySeparator(words = ['one', 'two three', 'four', 'five six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = 'three')",
        "splitWordsBySeparator(words = \"one,two,three,four,five,six\", separator = \",\")",
        "splitWordsBySeparator(words = ['1', '2', '3', '4', '5', '6'], separator = '1')",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"or\")"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 1, 2, 3])",
        "maxIncreasingGroups(u = [1, 3, 2, 3])",
        "maxIncreasingGroups(u = [2, 2, 2, 2])",
        "maxIncreasingGroups(u = [2, 4, 5, 6])",
        "maxIncreasingGroups(u = [3, 1, 2, 5, 6, 4])",
        "maxIncreasingGroups(u = [3, 1, 3, 3, 2, 3])",
        "maxIncreasingGroups([3, 7, 2, 5, 1])",
        "maxIncreasingGroups(u = [10, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(u = [2, 1, 3, 7, 3, 6])"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [4,5,2,10,8], x = 3)",
        "minAbsoluteDifference(nums=[1,2,3,4], x=2)",
        "minAbsoluteDifference(nums = [5,6,7,8,9], x = 2)",
        "minAbsoluteDifference(nums = [3,6,1,2], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,5,6,11], x = 3)",
        "minAbsoluteDifference(nums = [5,9,4,3],x = 2)",
        "minAbsoluteDifference(nums = [5, 10, 2, 3, 2, 10], x = 3)",
        "minAbsoluteDifference(nums = [1,2,4,5,6,7,9,20], x = 3)",
        "minAbsoluteDifference(nums = [1,3,4,8,12,16,32,48,80], x = 4)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 1], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 6, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], modulo = 7, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 2], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [1, 2], modulo = 10, k = 5)",
        "countInterestingSubarrays(nums = [1,2,3], modulo = 7, k = 4)",
        "countInterestingSubarrays(nums = [1, 3, 2], modulo = 5, k = 4)",
        "countInterestingSubarrays(nums = [2, 4, 5, 6], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [2, 3, 4, 3, 2], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [2, 1, 5, 3, 4, 6], modulo = 4, k = 3)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 2, 3, 4], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 10)",
        "canSplitArray(nums = [3, 1, 2], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7, 8], m = 8)",
        "canSplitArray(nums = [3,2,3], m = 6)",
        "canSplitArray(nums = [1, 2, 1, 3, 4], m = 5)",
        "canSplitArray(nums = [1, 5, 8, 6], m = 10)",
        "canSplitArray(nums = [1000, 999], m = 2000)",
        "canSplitArray(nums = [1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1,",
        "canSplitArray(nums = [1, 5, 3, 4, 9, 7, 3, 2], m = 10)"
    ],
    "sample_169": [
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"ABC\")",
        "isAcronym(words = [\"b\", \"a\", \"n\", \"a\", \"n\", \"a\"], s = \"BANANA\")",
        "isAcronym(words = [\"ab\", \"cd\"], s = \"AC\")",
        "isAcronym(words = [\"M\"], s = \"M\")",
        "isAcronym(words = [\"alpha\", \"bravo\", \"charlie\"], s = \"ABC\")",
        "isAcronym(words = [\"H\", \"O\", \"P\"], s = \"HOP\")",
        "isAcronym(words = [\"s\", \"h\", \"e\", \"l\", \"l\", \"o\"], s = \"shello\")",
        "isAcronym(words = ['H', 'I', 'T'], s = 'HIT')",
        "isAcronym(words = [\"ABCD\", \"EFG\"], s = \"ABC\")",
        "isAcronym(words = [\"Recipe\", \"Tester\"], s = \"RT\")"
    ],
    "sample_121": [
        "minimumIndex(nums = [1,1,1,2,2,3])",
        "minimumIndex(nums = [1,2,2,3,3,3])",
        "minimumIndex(nums = [5,4,3,2,1])",
        "minimumIndex(nums = [2,1,1,2])",
        "minimumIndex(nums = [0,1,0,1,0,1])",
        "minimumIndex(nums = [1,2,2,2,3,1])",
        "minimumIndex(nums = [1,2,3,4,3,2,1,2,3,4])",
        "minimumIndex([1,1,1,1,1,1,1,2,2])",
        "minimumIndex(nums = [2, 1, 2, 2, 4, 4, 2, 1])",
        "minimumIndex(nums = [7, 6, 4, 2, 1, 6, 7, 5, 6, 3, 7, 4])"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 2, offers = [[1, 4, 3], [2, 5, 1]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [3, 4, 3], [5, 6, 2]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 1], [2, 3, 3], [5, 6, 5], [7, 8, 4]])",
        "maximizeTheProfit(n = 3, offers = [[0, 1, 3], [1, 2, 4], [2, 3, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 5], [3, 6, 7], [6, 8, 10]])",
        "maximizeTheProfit(n = 3, offers = [\n    [1,2,3],\n    [3,2,1],\n    [2,4,10]\n])",
        "maximizeTheProfit(n = 4, offers = [[1, 4, 2], [2, 10, 3], [4, 11, 1], [5, 15, 6]])",
        "maximizeTheProfit(n = 2, offers = [[2, 5, 1], [2, 6, 3], [3, 1, 5]])",
        "maximizeTheProfit(n = 3, offers = [\n    [3, 5, 1],\n    [7, 10, 5],\n    [11, 15, 5],\n])",
        "maximizeTheProfit(n = 10, offers = [(2, 10, 6), (4, 9, 7), (3, 8, 4), (10, 1, 1)])"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [-1, 2, 3])",
        "maximumTripletValue(nums = [1, 0, 0, 0])",
        "maximumTripletValue(nums = [-1, 0, 1, 2, -1, -4])",
        "maximumTripletValue(nums = [2, 3, -2, 4])",
        "maximumTripletValue(nums = [1, -2, 0])",
        "maximumTripletValue(nums = [2, 1, 2, 1, 2])",
        "maximumTripletValue(nums = [2, 0, 1, 2])",
        "maximumTripletValue(nums = [3, 2, 3, 4, 5])",
        "maximumTripletValue([5, 0, 5, 5])",
        "maximumTripletValue(nums = [2,3,3,5,6,7,8])"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"_LLRR_\")",
        "furthestDistanceFromOrigin(moves = \"LRLLRRRLR\")",
        "furthestDistanceFromOrigin(moves = \"LR_RL_\")",
        "furthestDistanceFromOrigin(moves = \"_____R______\")",
        "furthestDistanceFromOrigin(moves = \"LRLLL\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRRRR_L\")",
        "furthestDistanceFromOrigin(moves = 'LRRRLLLRLRLR')",
        "furthestDistanceFromOrigin(moves = \"LRLRLRRLRRRLRRR\")",
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves = \"RRRRRRL_L__R\")"
    ],
    "sample_149": [
        "finalString(s = \"tsngi\")",
        "finalString(s = \"rtsnig\")",
        "finalString(s = \"olleh\")",
        "finalString(s = \"resting\")",
        "finalString(s = \"rtstnig\")",
        "finalString(s = \"rtinig\")",
        "finalString(s = \"tesrng\")",
        "finalString(s = \"tistsng\")",
        "finalString(s = 'rtsngs')",
        "finalString(s = \"gimixi\")"
    ],
    "sample_162": [
        "maxSum(nums = [13, 13, 55])",
        "maxSum(nums = [20, 80, 10, 30, 100])",
        "maxSum(nums = [99, 99, 101, 99])",
        "maxSum(nums = [12, 32, 123, 45, 6])",
        "maxSum(nums = [15, 10, 15, 5, 5, 15, 25])",
        "maxSum(nums = [13, 2, 4, 34, 3])",
        "maxSum(nums = [9,8,7,8,7,6,5,4,4])",
        "maxSum(nums = [121, 132, 134, 152, 212, 123, 123])",
        "maxSum(nums = [12, 81, 93, 78, 24, 94])",
        "maxSum(nums = [14, 88, 99, 98, 62, 57, 78])"
    ],
    "sample_230": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 1, 1, 1])",
        "countWays(nums = [2, 2, 2])",
        "countWays(nums = [5, 3, 2])",
        "countWays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countWays(nums = [10, 5, 3])",
        "countWays(nums = [3, 5, 1, 1, 0])",
        "countWays(nums = [5, 3, 6, 10, 2])",
        "countWays([3, 1, 1, 4, 3, 2])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 20)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 3, offers = [[0, 1, 4], [1, 2, 2], [2, 3, 1]])",
        "maximizeTheProfit(N = 4, offers = [(1, 2, 3), (2, 2, 4)])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 1], [2, 2, 1], [3, 3, 1], [4, 4, 1]])",
        "maximizeTheProfit(N = 4, offers = [[0, 2, 3], [1, 2, 2], [2, 3, 3]])",
        "maximizeTheProfit(N = 4, offers = [(0, 1, 1), (1, 2, 2), (3, 3, 3), (4, 5, 4)])",
        "maximizeTheProfit(N = 2, offers = [[2, 3, 2], [5, 2, 10]])",
        "maximizeTheProfit(N = 4, offers = [[2, 3, 5], [1, 2, 6], [1, 2, 7]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 2], [2, 2, 2], [2, 3, 2], [3, 4, 2], [4, 4, 2]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 10], [3, 2, 20], [1, 3, 30], [3, 1, 40], [1, 2, 50]])",
        "maximizeTheProfit(N = 4, offers = [(1, 2, 2), (2, 3, 5), (4, 10, 8), (10, 30, 1)])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 3, offers = [[1, 2, 6], [2, 3, 3], [3, 4, 1]])",
        "maximizeTheProfit(n = 2, offers = [\n    [1, 3, 2],\n    [2, 4, 3],\n])",
        "maximizeTheProfit(n = 3, offers = [[2, 10], [1, 5], [3, 5]])",
        "maximizeTheProfit(n = 4, offers = [[1, 4, 10], [1, 2, 10], [2, 3, 20], [3, 4, 30]])",
        "maximizeTheProfit(n = 4, offers = [[1, 3, 7], [2, 1, 9]])",
        "maximizeTheProfit(n = 4, offers = [[2, 5, 10], [3, 2, 15], [4, 1, 10], [1, 2, 5]])",
        "maximizeTheProfit(n = 3, offers = [[0, 2, 5], [2, 3, 6], [1, 4, 10]])",
        "maximizeTheProfit(n = 3, offers = [[2, 5, 2], [3, 1, 3], [2, 2, 1]])",
        "maximizeTheProfit(n = 3, offers = [(2, 2, 1), (1, 2, 10), (3, 3, 3)])",
        "maximizeTheProfit(n = 3, offers = [[2, 7], [1, 2], [2, 8], [4, 3]])"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 4], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 2])",
        "numberOfEmployeesWhoMetTarget(hours = [4, 7, 2])",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4, 5, 6, 7], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 3, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], target = 11)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 3, 3, 3, 4, 4])",
        "numberOfEmployeesWhoMetTarget(hours = [10, 15, 20, 25, 30, 40, 50, 60, 70, 80])",
        "numberOfEmployeesWhoMetTarget(hours = [5, 7, 12, 13, 18, 20], target = 19)"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countCompleteSubarrays(nums = [1,1,1,2,2,3])",
        "countCompleteSubarrays(nums = [1,1,1,2,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1,2,1,2,1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3])",
        "countCompleteSubarrays(nums = [2,3,4,5])",
        "countCompleteSubarrays(nums = [2,2,3,3,4,4])",
        "countCompleteSubarrays([2,3,1,4,1,2,3])",
        "countCompleteSubarrays(nums = [1,3,4,4,2,4,1])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1,2,3,4,5])",
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [2, 5, 7])",
        "countWays(nums = [3, 1, 2, 5])",
        "countWays([2, 3, 4])",
        "countWays(nums = [2, 1, 4, 6])",
        "countWays([2,3])",
        "countWays(nums = [2, 2, 1, 1, 4])"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(count = [5, 3, 2, 1])",
        "maxIncreasingGroups(usageLimits = [2,3,1])",
        "maxIncreasingGroups(count = [4, 1, 3, 2, 5])",
        "maxIncreasingGroups([3, 2, 1, 5, 5])",
        "maxIncreasingGroups([1, 4, 5, 2, 7])",
        "maxIncreasingGroups(usageLimits = [1, 4, 2, 4, 2, 3, 2])",
        "maxIncreasingGroups(count = [20, 20, 17, 10])",
        "maxIncreasingGroups(count = [5, 6, 7, 10, 15, 20, 10])",
        "maxIncreasingGroups(usageLimits = [1, 1, 2, 2, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6])"
    ],
    "sample_173": [
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 4, k = 2)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 6, k = 2)",
        "minimumSum(n = 6, k = 2)",
        "minimumSum(n = 7, k = 5)",
        "minimumSum(n = 12, k = 3)",
        "minimumSum(n = 10000, k = 3)"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 1, 1, 1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 1, 2], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [0, 0, 0, 0], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 2, 1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 1, 1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [3, 4, 1, 2, 3], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [0, 0, 2, 2, 1, 1], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 2, 1, 0, 0, 2], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 4, 6, 3, 1], m = 2, k = 2)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4])",
        "countCompleteSubarrays(nums = [1,1,1,1,1])",
        "countCompleteSubarrays(nums = [2,2,1,1,1,2,2])",
        "countCompleteSubarrays(nums = [0,0,1,1])",
        "countCompleteSubarrays(nums = [0, 1, 2, 3])",
        "countCompleteSubarrays(nums = [2, 2, 2])",
        "countCompleteSubarrays(nums = [1, 2, 2, 1, 4, 3, 5])",
        "countCompleteSubarrays(nums = [2, 2, 1, 3, 2, 2, 2, 3, 1, 2])"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1, 1, 1, 1, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 1, 1], k = 0)",
        "longestEqualSubarray(nums = [1,1,1,1,1], k = 1)",
        "longestEqualSubarray(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 2, 1], k = 1)",
        "longestEqualSubarray(nums = [1,2,1,1,2], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,2,3,1], k = 2)",
        "longestEqualSubarray(nums = [1, 3, 3, 2, 3, 3], k = 3)",
        "longestEqualSubarray(nums = [1, 0, 1, 1, 0, 1, 0, 1, 1, 1], k = 2)"
    ],
    "sample_170": [
        "isAcronym(words = [\"a\", \"b\", \"c\"], s = \"cba\")",
        "isAcronym(words = [\"code\", \"wars\"], s = \"cw\")",
        "isAcronym(words = [\"O\", \"b\", \"j\"], s = \"OBJ\")",
        "isAcronym(words = [\"I\", \"am\", \"an\", \"Acronym\"], s = \"iAaA\")",
        "isAcronym(words = [\"apple\", \"tree\"], s = \"APPLE\")",
        "isAcronym(words = [\"baz\", \"bing\"], s = \"BB\")",
        "isAcronym(words = [\"c\", \"a\", \"d\", \"c\"], s = \"abcd\")",
        "isAcronym(words = [\"code\", \"cadence\", \"engine\"], s = \"CCE\")",
        "isAcronym(words = [\"cake\", \"pie\", \"ice cream\", \"oreo\"], s = \"cpio\")",
        "isAcronym(words = [\"zoe\", \"joe\", \"ean\"], s = \"ZJE\")"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = \"010\")",
        "maximumOddBinaryNumber(s = '01010')",
        "maximumOddBinaryNumber(s = '1010')",
        "maximumOddBinaryNumber(s = '110')",
        "maximumOddBinaryNumber(s = '00010')",
        "maximumOddBinaryNumber(s = '010010')",
        "maximumOddBinaryNumber(s = '01011010101')",
        "maximumOddBinaryNumber(s = '0000100000000')",
        "maximumOddBinaryNumber(s = '01011100011111001111')"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 5, 10])",
        "countWays([1, 3, 4])",
        "countWays(nums = [1, 3, 2, 4])",
        "countWays(nums = [5, 4, 3])",
        "countWays(nums = [1,2,4,5,6])",
        "countWays(nums = [1, 2, 4, 5, 6, 7])",
        "countWays(nums = [1,2,5,7])",
        "countWays(nums = [1,2,4,8,9])"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 5, offers = [[1, 1, 2], [2, 2, 4], [3, 3, 3], [4, 4, 1]])",
        "maximizeTheProfit(n = 4, offers = [[1, 1, 3], [2, 2, 4]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 6], [2, 4, 7], [3, 5, 8], [4, 6, 9], [5, 7, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 1], [3, 3, 5]])",
        "maximizeTheProfit(n = 7, offers = [[1, 2, 5], [3, 5, 2]])",
        "maximizeTheProfit(n = 7, offers = [[1, 2, 5], [2, 4, 6], [3, 5, 7], [5, 6, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 1, 2], [3, 2, 4], [4, 2, 6], [5, 1, 5]])",
        "maximizeTheProfit(n = 10, offers = [[1,2,10],[2,4,20],[4,6,50]])",
        "maximizeTheProfit(n = 5, offers = [[3, 5, 1], [3, 2, 2], [3, 3, 3], [3, 4, 4], [3, 5, 6]])",
        "maximizeTheProfit(n = 11, offers = [[2,5],[1,3],[3,5],[4,5],[5,6]])"
    ],
    "sample_122": [
        "minimumIndex(nums = [1, 1, 2])",
        "minimumIndex(nums = [1, 2, 1, 2, 1])",
        "minimumIndex([1,2,2,3])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumIndex(nums = [1,2,3,1,1,2,3])",
        "minimumIndex(nums = [0, 0, 1, 0, 1])",
        "minimumIndex(nums = [2, 2, 1, 1, 1, 3, 3])",
        "minimumIndex(nums = [1,3,1,3,3,1,2,2,1])",
        "minimumIndex(nums = [1, 2, 1, 0, 2, 0, 0, 1, 2, 0, 0])",
        "minimumIndex(nums = [4, 7, 1, 2, 5, 1, 1, 6, 9, 1, 3, 2])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1, 3], [2, 6], [8, 10], [15, 18]])",
        "numberOfPoints(nums = [[1, 3], [2, 7], [5, 9]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [9, 10]])",
        "numberOfPoints(nums = [[3, 4], [5, 7]])",
        "numberOfPoints(nums = [[1,5],[4,8],[7,9]])",
        "numberOfPoints(nums = [[2, 3], [4, 8]])",
        "numberOfPoints([[5, 7], [10, 12], [11, 12]])",
        "numberOfPoints(nums = [[1, 3], [3, 4], [5, 8], [1, 3], [6, 8]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [3, 4], [4, 9], [5, 10], [10, 13]])"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"banana\"], separator = \"b\")",
        "splitWordsBySeparator(words = [\"banana\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"ab\", \"cd\"], separator = \"b\")",
        "splitWordsBySeparator(words = [\"one two three\", \"four five six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello, world\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"abcd\"], separator = \"b\")",
        "splitWordsBySeparator(words = [\"hello,world\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"aaa\", \"bb\", \"cc\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"abd\", \"a\"], separator = \"b\")",
        "splitWordsBySeparator(words = [\"happy birthday to you\", \"very very happy birthday\"], separator = \" \")"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 4, target = 1)",
        "minimumPossibleSum(n = 4, target = 1)",
        "minimumPossibleSum(n = 4, target = 1)",
        "minimumPossibleSum(n = 5, target = 5)",
        "minimumPossibleSum(n = 5, target = 4)"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 5], [2, 3]])",
        "numberOfPoints(nums = [[1, 3], [2, 5]])",
        "numberOfPoints(nums = [[2, 4], [1, 5], [3, 3]])",
        "numberOfPoints(nums = [[1, 6], [2, 4], [5, 6]])",
        "numberOfPoints([[1, 5], [2, 6]])",
        "numberOfPoints(nums = [[1, 3], [5, 7], [3, 6]])",
        "numberOfPoints(nums = [[1,2], [3,4], [5,6], [6,7]])",
        "numberOfPoints(nums = [[2, 3], [4, 7], [5, 8]])",
        "numberOfPoints(nums = [[1, 4], [3, 6], [2, 8], [5, 8]])",
        "numberOfPoints(nums = [[2, 4], [1, 3], [3, 5], [6, 8], [5, 7]])"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 1, 1], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [0, 1, 2], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 1], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 1, 1, 1], m = 4, k = 3)",
        "countInterestingSubarrays(nums = [0, 0, 1, 1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [2, 4, 6], m = 10, k = 3)",
        "countInterestingSubarrays(nums = [5, 5, 5], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 0, 0, 0, 0, 0, 1], m = 1, k = 0)",
        "countInterestingSubarrays(nums = [3, 4, 5, 4, 2], m = 5, k = 2)"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 7, 2], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 1, 2, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [7, 3, 2], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 0, 0, 0, 0], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 2], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 3, 1, 0, 5, 8, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [10, 2, 1, 2, 5, 14, 4], k = 3)"
    ],
    "sample_203": [
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"010\")",
        "minimumOperations(num = \"11\")",
        "minimumOperations(num = \"19\")",
        "minimumOperations(num = '0025')",
        "minimumOperations(num = \"112\")",
        "minimumOperations(num = \"375\")",
        "minimumOperations(num = \"2147483648\")",
        "minimumOperations(num = \"2410\")",
        "minimumOperations(num = \"01920\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1,1,2], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3], modulo = 4, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 1, 1, 1], modulo = 5, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 2], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 1, 0, 0, 1], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 2, 2, 2], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 0, 1, 0, 1, 0, 1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 1, 1, 1], modulo = 100, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 2, 1, 2, 2, 3, 3, 1, 2, 1], modulo = 3, k = 1)"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1, 1, 1, 2, 1, 1], K = 2)",
        "longestEqualSubarray(A = [1, 1, 1, 1, 1], K = 1)",
        "longestEqualSubarray(A = [2,3,1,2,4,3], K = 1)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5], K = 3)",
        "longestEqualSubarray(A = [5,4,4,2,2,2,5,4,4], K = 3)",
        "longestEqualSubarray(A = [0,0,0,0,1], K = 0)",
        "longestEqualSubarray(A = [2,2,2,2,4,4,4,4], K = 2)",
        "longestEqualSubarray(A = [2,1,5,3,2], K = 2)",
        "longestEqualSubarray(A = [2, 4, 2, 4, 3], K = 2)",
        "longestEqualSubarray(A = [3, 7, 1, 4, 2, 6, 5], K = 2)"
    ],
    "sample_146": [
        "finalString(s = \"ponter\")",
        "finalString(s = \"terop\")",
        "finalString(s = \"terpon\")",
        "finalString(s = \"terpot\")",
        "finalString(s = \"terpotn\")",
        "finalString(s = \"pointers\")",
        "finalString(s = \"terpotn\")",
        "finalString(s = \"noitcnuf\")",
        "finalString(s=\"nterop\")",
        "finalString(s = \"snippet\")"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 5, 6])",
        "numberOfEmployeesWhoMetTarget(hours = [4,2,3])",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 1], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [2,4,6,8])",
        "numberOfEmployeesWhoMetTarget(hours = [10,12,14], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 15, 15], target = 12)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 7, 9, 5], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 2, 2, 3, 2], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 10, 8, 9, 11], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [100, 150, 110])"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 3], [2, 6]])",
        "numberOfPoints(nums = [[1, 3], [3, 4], [2, 6]])",
        "numberOfPoints(nums = [[1,4],[3,5]])",
        "numberOfPoints(nums = [[0, 6], [5, 9]])",
        "numberOfPoints(nums = [[2, 5], [1, 2], [3, 5]])",
        "numberOfPoints(nums = [[2, 6], [4, 7], [3, 5]])",
        "numberOfPoints(nums = [[2, 5], [4, 8], [9, 12]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [0, 6], [5, 7]])",
        "numberOfPoints(nums = [[2,4], [5,7], [4,8]])",
        "numberOfPoints([[3, 7], [6, 8], [1, 9]])"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1])",
        "maxIncreasingGroups(A = [1])",
        "maxIncreasingGroups(A = [1, 2, 3])",
        "maxIncreasingGroups(A = [1, 2, 3, 4])",
        "maxIncreasingGroups(A = [1, 1])",
        "maxIncreasingGroups(A = [1, 1, 1])",
        "maxIncreasingGroups(A = [1, 1, 1, 1])",
        "maxIncreasingGroups([2, 1, 1])",
        "maxIncreasingGroups(A = [3, 1, 1, 4])",
        "maxIncreasingGroups(A = [2, 4, 2, 6])"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 3, offers = [[2,1,3],[1,2,2]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 10], [2, 3, 15], [3, 4, 20]])",
        "maximizeTheProfit(n = 3, offers = [[2,2,1],[3,1,2]])",
        "maximizeTheProfit(n = 1, offers = [[0,1,5]])",
        "maximizeTheProfit(n = 4, offers = [[1, 100, 10000],[2, 200, 20000],[3, 300, 30000],[4, 400, 40000]])",
        "maximizeTheProfit(n = 10, offers = [[1, 10, 11]])",
        "maximizeTheProfit(n = 6, offers = [[3, 6, 10], [4, 2, 7], [6, 1, 8]])",
        "maximizeTheProfit(n = 6, offers = [[4,2,4],[2,1,5],[3,3,3]])",
        "maximizeTheProfit(n = 5, offers = [ [2,2,1],[3,3,2],[1,2,3],[4,4,2],[5,5,1] ])",
        "maximizeTheProfit(n = 5, offers = [ [1,4,8], [1,3,20], [2,3,20], [3,10,30], [4,5,50]])"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"LRLRLRLRLRLR\")",
        "furthestDistanceFromOrigin(moves = \"_RRRLL_\")",
        "furthestDistanceFromOrigin(moves = \"RR_RR_R\")",
        "furthestDistanceFromOrigin(moves = 'R_R_L_R_R_R_L_')",
        "furthestDistanceFromOrigin(moves = \"_L__R__R_L_\")",
        "furthestDistanceFromOrigin(moves = \"LLLR_RRLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLRLRLRLLRLRL\")",
        "furthestDistanceFromOrigin(\"__R__L____\")",
        "furthestDistanceFromOrigin(moves = \"RRLRLRRR_L_RRRRLL_\")",
        "furthestDistanceFromOrigin(moves = \"LR_LR_LLL_RR_LLLLLLLR_R\")"
    ],
    "sample_175": [
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 4, k = 10)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 4, k = 2)",
        "minimumSum(n = 5, k = 11)",
        "minimumSum(n = 6, k = 5)",
        "minimumSum(n = 12, k = 7)",
        "minimumSum(n = 20, k = 4)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,5],[5,8]])",
        "numberOfPoints(nums = [[1,3],[2,7],[3,8]])",
        "numberOfPoints([[1, 2], [2, 3]])",
        "numberOfPoints(nums = [[2,3],[1,6],[4,6]])",
        "numberOfPoints(nums = [[1,5],[3,6],[2,4],[5,7]])",
        "numberOfPoints([[0,5],[2,4]])",
        "numberOfPoints(nums = [[1,3],[1,7],[5,7],[5,9]])",
        "numberOfPoints([[1, 4], [3, 4], [1, 3]])",
        "numberOfPoints(nums=[[2,3],[1,5],[4,6],[6,7],[5,7]])",
        "numberOfPoints(nums = [[1,3],[2,4],[3,5],[6,7],[10,11],[10,12],[12,13]])"
    ],
    "sample_205": [
        "minimumOperations(num = \"100\")",
        "minimumOperations(num = \"12345\")",
        "minimumOperations(num = \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(num = \"10101\")",
        "minimumOperations(num = \"27\")",
        "minimumOperations(num = \"111110\")",
        "minimumOperations(num = \"15121\")",
        "minimumOperations(num = \"00001001000010010000\")",
        "minimumOperations(num = \"01002000200010000001010\")",
        "minimumOperations(num = \"10001011101010111000101010101011011110111111010\")"
    ],
    "sample_120": [
        "minimumIndex(nums = [1, 1, 2, 2, 3, 3])",
        "minimumIndex(nums = [1, 2, 1, 3, 1])",
        "minimumIndex([1, 2, 2, 1])",
        "minimumIndex(nums = [1, 2, 1, 3, 4, 1])",
        "minimumIndex(nums = [2, 1, 1, 1, 1, 1])",
        "minimumIndex(nums = [1, 2, 1, 1, 1, 1, 1, 2])",
        "minimumIndex([1, 2, 1, 2, 3, 1, 4])",
        "minimumIndex(nums = [1, 2, 3, 1, 4, 5, 3, 2, 1])",
        "minimumIndex(nums = [3, 2, 5, 5, 5, 5, 3])",
        "minimumIndex([2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"RLRLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LRLRRRLRRLR\")",
        "furthestDistanceFromOrigin(moves = \"_LLLRRR____\")",
        "furthestDistanceFromOrigin(moves = '______R_R_')",
        "furthestDistanceFromOrigin(moves = 'RRRLLLL_RRL')",
        "furthestDistanceFromOrigin(\"R_R_R_RRR_RRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLRLL_RLL_RLRL\")",
        "furthestDistanceFromOrigin(moves = \"RR_R_R_RLLL_L_LLLLLL_\")",
        "furthestDistanceFromOrigin(moves = 'LRRRLLRR_LLRLRRRLRRRRLR')",
        "furthestDistanceFromOrigin(moves = \"R_RR_R_____L______R_____LR_______LRRRRR_____\")"
    ],
    "sample_161": [
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [1, 1, 2, 3])",
        "maxSum(nums = [2, 4, 5])",
        "maxSum(nums = [3, 1, 2, 4])",
        "maxSum(nums = [7, 8, 3, 9])",
        "maxSum(nums = [3, 4, 1, 5, 9, 2])",
        "maxSum(nums = [1, 4, 5, 2, 3])"
    ],
    "sample_160": [
        "maxSum(nums = [10, 11, 12, 13])",
        "maxSum(nums = [31, 41, 59, 26])",
        "maxSum(nums = [11, 10, 10, 1, 3])",
        "maxSum(nums = [112, 117, 189, 101, 116, 104, 111, 115, 115, 111])",
        "maxSum(nums = [2,12,3,6,7,12])",
        "maxSum(nums = [3, 2, 5, 2, 1, 4, 4, 2, 1, 5])",
        "maxSum(nums = [32, 1, 99, 121, 31])",
        "maxSum([123,234,23,45,678,345,456])",
        "maxSum(nums = [21, 11, 3, 2, 4, 6, 20, 8, 10])",
        "maxSum(nums = [15, 14, 23, 23, 4, 5, 10, 12, 13, 13, 13, 13, 13, 13])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = \"one two three four five six\", separator = \" \")",
        "splitWordsBySeparator(words = \"one two three four five six\".split(), separator = \" \")",
        "splitWordsBySeparator(words = ['one two three four five six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one two three four five six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one two three four five six'], separator = ' ')",
        "splitWordsBySeparator(words = \"one-two-three-four-five-six\", separator = \"-\")",
        "splitWordsBySeparator(words = [\"one,two,three,four,five,six\"], separator = \", \")",
        "splitWordsBySeparator(words = [\"one, two, three\", \"four, five, six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"123456\", \"123456\"], separator = \"123\")",
        "splitWordsBySeparator(words = \"onetwo threetwofourthreetwofour five six\".split(), separator = ' ')"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5,6,7,8,9,10,11,12,13,14])",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10, 10, 10], target = 11)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 1, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 5], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [11, 12, 13], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 3, 3, 3, 3, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [6, 3, 8, 4, 7, 9, 5], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 11, 18, 10, 5], target = 15)"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [5, 4, 3, 2, 1])",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 4])",
        "numberOfEmployeesWhoMetTarget(hours = [2,3,4,5,6])",
        "numberOfEmployeesWhoMetTarget(hours = [0, 0, 0, 0, 0, 0, 0])",
        "numberOfEmployeesWhoMetTarget(hours = [4, 3, 4, 3, 3, 4, 4])",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 5, 2, 4, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [8,4,8,1], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [30, 60, 15, 35, 50])",
        "numberOfEmployeesWhoMetTarget(hours = [20,21,17,10,11,12,14])"
    ],
    "sample_171": [
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 4, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 5, k = 4)",
        "minimumSum(n = 10, k = 4)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 3, k = 11)"
    ],
    "sample_159": [
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [-1,1,-1])",
        "maxSum(nums = [-1,1])",
        "maxSum(nums = [1, 3, 2, 4])",
        "maxSum([100,1000,1])",
        "maxSum(nums = [-5, -3, -2, 1])",
        "maxSum(nums = [1, 1, 1, 0, 1, 1, 1, 1])",
        "maxSum(nums = [9,5,5,5])",
        "maxSum(nums = [1, 4, 3, 2, 1, 5, 7])",
        "maxSum(nums = [0,1,2,1,3,4,5,3,2,1,4,5,6,4])"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 3)",
        "canSplitArray(nums = [1, 1, 1, 1, 1], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 10)",
        "canSplitArray(nums = [3, 1, 4, 2], m = 5)",
        "canSplitArray(nums = [4, 3, 5], m = 8)",
        "canSplitArray(nums = [2, 2, 3, 4], m = 7)",
        "canSplitArray(nums = [1, 4, 4], m = 1)",
        "canSplitArray(nums = [2, 3, 5, 7, 8], m = 10)",
        "canSplitArray(nums = [1, 2, 4, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 6, 8], m = 5)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"hello\", \"world\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"a\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\", \"d\", \"e\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple banana\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"cat\", \"dog\"], separator = \"t\")",
        "splitWordsBySeparator(words = [\"banana\", \"pineapple\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"abc\", \"def\", \"ghi\", \"\"], separator = \"c\")",
        "splitWordsBySeparator(words = [\"a:b:c\", \"d:e\", \"f\"], separator = \":\")",
        "splitWordsBySeparator(words = \"this is a banana\", separator = \" \")"
    ],
    "sample_172": [
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 4, k = 2)",
        "minimumSum(n = 5, k = 5)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n=10, k=2)",
        "minimumSum(n=6, k=2)"
    ],
    "sample_228": [
        "countWays(nums = [1,2,3])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1,2,2])",
        "countWays(nums = [0, 1, 1, 2, 3, 5])",
        "countWays(nums = [1,2,10])",
        "countWays(nums = [2, 4, 5, 6])",
        "countWays(nums = [1,2,3,10])",
        "countWays(nums = [1, 1, 1, 2])",
        "countWays(nums = [3,2,4,5,1])",
        "countWays(nums = [0,1,4,5,6,7,8,9,10,11,13,15])"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = \"010\")",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"00\")",
        "maximumOddBinaryNumber(s = \"0010\")",
        "maximumOddBinaryNumber(s = '10')",
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = \"1000111\")",
        "maximumOddBinaryNumber(s = \"110101010\")"
    ],
    "sample_119": [
        "minimumIndex(nums = [1, 2, 2])",
        "minimumIndex(nums = [2, 2, 1])",
        "minimumIndex(nums = [1, 2, 1, 1, 1, 2])",
        "minimumIndex(nums = [1, 2, 3, 3, 3, 4])",
        "minimumIndex(nums = [1, 1, 1, 1, 1, 1, 2])",
        "minimumIndex(nums = [1, 1, 2, 2, 2, 2, 3, 3])",
        "minimumIndex(nums = [0, 1, 1, 1, 2, 2])",
        "minimumIndex(nums = [1, 1, 1, 0, 0, 1])",
        "minimumIndex(nums = [1, 3, 2, 2, 1, 1])",
        "minimumIndex([2, 3, 3, 3, 2])"
    ],
    "sample_153": [
        "canSplitArray(nums = [1,2,3,3], m = 3)",
        "canSplitArray(nums = [1,2,3,4], m = 4)",
        "canSplitArray(nums = [1,2,3,4], m = 6)",
        "canSplitArray(nums = [3,2,2,4,1], m = 3)",
        "canSplitArray(nums = [1, 1, 1, 1], m = 2)",
        "canSplitArray(nums = [2,7,4,1,8,1], m = 2)",
        "canSplitArray(nums = [1, 1, 1, 1, 1, 1, 1], m = 3)",
        "canSplitArray(nums = [2, 1, 3, 2, 5, 2, 3, 1, 3, 4], m = 6)",
        "canSplitArray(nums = [1, 2, 4, 4], m = 5)",
        "canSplitArray(nums = [3,2,2,3,1], m = 2)"
    ],
    "sample_147": [
        "finalString(s = \"rtsnig\")",
        "finalString(s = \"tsng\")",
        "finalString(s = \"rtising\")",
        "finalString(s = \"tgnirts\")",
        "finalString(s = \"abcdi\")",
        "finalString(s = \"lipsum\")",
        "finalString(s = 'tsngipt')",
        "finalString(s = \"tsetse\")",
        "finalString(s = 'ertsgni')",
        "finalString(s = \"trutrng\")"
    ],
    "sample_174": [
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 4, k = 2)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 4, k = 13)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1,2,3,4,5,6,7], m = 9)",
        "canSplitArray(nums = [1,2,3,4,5,6,7], m = 9)",
        "canSplitArray(nums = [1, 5], m = 6)",
        "canSplitArray(nums = [1,2,3,1], m = 5)",
        "canSplitArray(nums = [4,3,2], m = 6)",
        "canSplitArray(nums = [1,1,1,2], m = 4)",
        "canSplitArray(nums = [1, 3, 5, 9, 10, 100], m = 100)",
        "canSplitArray(nums = [10, 8, 5, 5, 1], m = 18)",
        "canSplitArray(nums = [6, 10, 5, 7, 12], m = 10)",
        "canSplitArray(nums = [1,3,2,1,2,1,2,4,3,4,2,1,2,3,4,2,1], m = 10)"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,2,3])",
        "countCompleteSubarrays(nums = [1, 1, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 2])",
        "countCompleteSubarrays(nums = [1,2,2,3,4])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 2])",
        "countCompleteSubarrays(nums = [1, 1, 2, 1, 1, 2, 1, 2])",
        "countCompleteSubarrays(nums = [2, 1, 2, 1, 2, 1, 1, 2, 2, 1, 2, 1])"
    ],
    "sample_150": [
        "finalString(s = \"rtsng\")",
        "finalString(s = 'rtsngi')",
        "finalString(s = \"rtsni\")",
        "finalString(s = \"hello\")",
        "finalString(s = \"rtsn\")",
        "finalString(s = \"retsng\")",
        "finalString(s = \"ngtsir\")",
        "finalString(s = \"rtsgn\")",
        "finalString(s = \"ngtisr\")",
        "finalString(s = \"abcrs\")"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 1, target = 3)",
        "minimumPossibleSum(n = 10, target = 20)",
        "minimumPossibleSum(n = 4, target = 15)",
        "minimumPossibleSum(n = 6, target = 12)"
    ],
    "sample_176": [
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 6, k = 3)",
        "minimumSum(n = 5, k = 5)",
        "minimumSum(n = 4, k = 7)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 1, k = 2)",
        "minimumSum(n = 4, k = 13)",
        "minimumSum(n = 11, k = 14)"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1,2], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3], modulo = 4, k = 2)",
        "countInterestingSubarrays(nums = [1,1], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums=[1,2,2], modulo=3, k=2)",
        "countInterestingSubarrays(nums = [1,2,2,1,2,2,1], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [3,1,1,2,1], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 3, 5, 4], modulo = 7, k = 3)",
        "countInterestingSubarrays(nums=[3,1,2,3], modulo=7, k=3)",
        "countInterestingSubarrays(nums = [1,1,1,3,1,3], modulo = 7, k = 1)",
        "countInterestingSubarrays(nums=[1,1,2,2,1,2],modulo=3,k=1)"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8, 16, 32], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8,9,10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 6, 1, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 1, 5, 0], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 1, 1, 0, 0, 0, 0, 1, 0], k = 2)",
        "sumIndicesWithKSetBits(nums = [5, 7, 11, 3, 12, 13], k = 3)"
    ],
    "sample_151": [
        "finalString(s = \"rtsngi\")",
        "finalString(s = 'sting')",
        "finalString(s = \"rtsing\")",
        "finalString(s = \"tin\")",
        "finalString(s = \"tgnirts\")",
        "finalString(s = \"i rtsng\")",
        "finalString(s = \"tsnrig\")",
        "finalString(s = 'trng')",
        "finalString(s = \"litsn\")",
        "finalString(s = \"tesngtlr\")"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1], k = 0)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [3, 2, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 1, 0, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 6, 7], k = 2)"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(usageLimits = [3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [2, 1, 3])",
        "maxIncreasingGroups(usageLimits = [1, 3, 2, 1])",
        "maxIncreasingGroups(usageLimits = [1,2,4,6,7])",
        "maxIncreasingGroups(usageLimits = [1, 3, 4, 5, 6, 7, 10])",
        "maxIncreasingGroups(usageLimits = [5, 2, 6, 5])",
        "maxIncreasingGroups([2000, 2000, 2000])",
        "maxIncreasingGroups(usageLimits = [5, 3, 8, 6, 1, 2])"
    ],
    "sample_204": [
        "minimumOperations(s = \"123\")",
        "minimumOperations(s = \"250\")",
        "minimumOperations(s = \"10001\")",
        "minimumOperations(s = \"0011\")",
        "minimumOperations(s = \"0000000000000\")",
        "minimumOperations(s = \"2010\")",
        "minimumOperations(s = \"1010101\")",
        "minimumOperations(s = \"27\")",
        "minimumOperations(s = \"252525752575\")",
        "minimumOperations(s = '1200215')"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [3, 3, 3, 3], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 4, 5, 4], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 6, 5, 7])",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 3, 10, 4])",
        "numberOfEmployeesWhoMetTarget(hours = [3,4,1,10])",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,2,3,3,3,4,4,5])",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 1, 3, 10, 10])",
        "numberOfEmployeesWhoMetTarget(hours = [12, 4, 11, 5, 6, 8], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [15, 10, 4, 15, 4, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4, 7, 3, 9, 11, 13, 20])"
    ],
    "sample_148": [
        "finalString(s = \"terpont\")",
        "finalString(s = \"pontre\")",
        "finalString(s = \"terpon\")",
        "finalString(s = \"ponteri\")",
        "finalString(s = \"terpoin\")",
        "finalString(s = \"enterpot\")",
        "finalString(s = 'pontioner')",
        "finalString(s = \"noterp\")",
        "finalString(s = \"tertpn\")",
        "finalString(s = \"lippi\")"
    ],
    "sample_168": [
        "isAcronym(words = [\"a\", \"b\", \"c\"], s = \"bca\")",
        "isAcronym(words = [\"a\", \"b\", \"c\"], s = \"cab\")",
        "isAcronym(words = [\"ba\", \"nana\"], s = \"banana\")",
        "isAcronym(words = [\"ba\", \"nana\"], s = \"banana\")",
        "isAcronym(words = [\"abc\", \"efg\"], s = \"abc\")",
        "isAcronym(words = [\"I\", \"LOVE\", \"CODEWARS\"], s = \"ILC\")",
        "isAcronym(words = [\"nan\", \"ba\", \"na\"], s = \"banana\")",
        "isAcronym(words = [\"secretary\", \"accountant\"], s = \"ac\")",
        "isAcronym(words = [\"Some\", \"Random\", \"Example\"], s = \"SERE\")",
        "isAcronym(words = [\"Carnage\", \"Calamity\", \"Bane\"], s = \"CBC\")"
    ],
    "sample_201": [
        "minOperations(nums = [1,1,1], target = 2)",
        "minOperations(nums = [3,2,2,4], target = 6)",
        "minOperations(nums = [2,3,10], target = 17)",
        "minOperations(nums = [1,1,4], target = 5)",
        "minOperations(nums = [1,2,3,4], target = 8)",
        "minOperations(nums = [1, 1, 1], target = 6)",
        "minOperations(nums = [3,2,5], target = 8)",
        "minOperations(nums = [1, 1, 2, 1], target = 3)",
        "minOperations(nums=[2,3,5,7], target=12)",
        "minOperations(nums = [4,4,5,1], target = 16)"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = \"0110\")",
        "maximumOddBinaryNumber(s = \"0110\")",
        "maximumOddBinaryNumber(s = \"0010\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = '00010')",
        "maximumOddBinaryNumber(s = '100011')",
        "maximumOddBinaryNumber(s = \"010000\")",
        "maximumOddBinaryNumber(s = \"011111000101\")",
        "maximumOddBinaryNumber(s = '110100101101001001010010010100100101')",
        "maximumOddBinaryNumber(s = \"0100001101110010100110110000101001000110101010011011001001000111000110110011001011111111101100100110011101111110011011011001101010011011001011111111100000001001010110110101010110100111000000010010101101101010101101001110000000100101011011010101011010011100000001001010110110101010110100111000000010010101101101010101101001110000000100101011011010101011010011100000001001010110110101010110100111000000010010101101101010101101001110000000100101011011010101011010011100000001001010110110101010110100111000000010010101101101010101101001110000000100101011011010101011010011100000001001010110110101010110100111000000010010101101101010"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = '0101')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '100')",
        "maximumOddBinaryNumber(s = '01001')",
        "maximumOddBinaryNumber(s = '101010')",
        "maximumOddBinaryNumber(s = \"101010\")",
        "maximumOddBinaryNumber(s = '01101')",
        "maximumOddBinaryNumber(s = '0010110')",
        "maximumOddBinaryNumber(s = '101010100')",
        "maximumOddBinaryNumber(s = '00100111011010')"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 4, target = 9)",
        "minimumPossibleSum(n = 4, target = 5)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 6, target = 10)",
        "minimumPossibleSum(n = 2, target = 3)"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LRLLR\")",
        "furthestDistanceFromOrigin(moves = \"RRL\")",
        "furthestDistanceFromOrigin(moves = \"LRRL\")",
        "furthestDistanceFromOrigin(moves = \"LLLRLL\")",
        "furthestDistanceFromOrigin(moves = \"LRLRRRL\")",
        "furthestDistanceFromOrigin(moves = 'RLRLLLRLRL')",
        "furthestDistanceFromOrigin(moves = \"RRRLLLRLLR\")",
        "furthestDistanceFromOrigin(moves = \"RLLLLLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LRLLRLLLLLL\")",
        "furthestDistanceFromOrigin(\"LLRRRAAA\")"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 1, target = 5)",
        "minimumPossibleSum(n = 5, target = 5)",
        "minimumPossibleSum(n = 5, target = 6)",
        "minimumPossibleSum(n = 2, target = 6)",
        "minimumPossibleSum(n = 10, target = 11)",
        "minimumPossibleSum(n = 5, target = 15)",
        "minimumPossibleSum(n = 4, target = 8)",
        "minimumPossibleSum(n = 4, target = 8)",
        "minimumPossibleSum(n = 100, target = 1)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [1], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [5,4,4])",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4], target = 100)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 2, 3, 3], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 1, 2, 2, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 10, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 5, 7, 6, 8], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 2, 4, 5, 4, 2], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [23,42,21,34,12,23,21,23,21,34,56,18], target = 18)"
    ],
    "sample_231": [
        "countWays(nums = [0, 1])",
        "countWays(nums = [0, 1, 2, 3, 4, 5])",
        "countWays(nums = [1,2,3,4,5])",
        "countWays(nums = [1, 3])",
        "countWays(nums = [1,2])",
        "countWays(nums = [1,3,4,6])",
        "countWays(nums = [3, 1, 5, 4])",
        "countWays([0, 1, 1, 1])",
        "countWays(nums = [4, 5, 1, 3, 2])",
        "countWays([1, 0, 3, 0, 2])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"LLLLLRRRR_\")",
        "furthestDistanceFromOrigin(moves = \"RRLRRLLL\")",
        "furthestDistanceFromOrigin(moves = \"RRL_LL__\")",
        "furthestDistanceFromOrigin(moves = 'RLL_RLLL_')",
        "furthestDistanceFromOrigin(moves = \"RRLRLRRLRRLRRLRRLR\")",
        "furthestDistanceFromOrigin(\"RLRLLLLLRRRL\")",
        "furthestDistanceFromOrigin(moves = \"RRR_LL_RR_LL\")",
        "furthestDistanceFromOrigin(moves = \"RRLRRRRLRR_RRR\")",
        "furthestDistanceFromOrigin(moves = \"RLRLRRLLRRLRLLR\")",
        "furthestDistanceFromOrigin(moves = \"LRRRLRRRLRRRRRRRRRRLRRRLRRR\")"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 1, target = 4)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 4, target = 6)",
        "minimumPossibleSum(n = 4, target = 7)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 2, target = 10)"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1,2,3,4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 2, 2, 3, 3, 4])",
        "countCompleteSubarrays(nums = [0, 0, 0, 0, 1, 1, 1, 1, 0, 0])",
        "countCompleteSubarrays(nums = [2, 2, 1, 2, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 3, 4, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 1, 1, 1, 3, 4, 1, 1])"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 2, 3, 4], m = 4)",
        "canSplitArray(nums = [1, 1, 3], m = 2)",
        "canSplitArray(nums = [2, 1, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [3, 2, 6, 5, 0, 3], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7], m = 15)",
        "canSplitArray(nums = [3, 3, 4, 2], m = 6)",
        "canSplitArray(nums = [6, 3, 1], m = 6)",
        "canSplitArray(nums = [1, 2, 1, 3, 5], m = 4)",
        "canSplitArray(nums = [3, 2, 5, 7, 4], m = 12)",
        "canSplitArray(nums = [1, 5, 20, 1], m = 25)"
    ],
    "sample_200": [
        "minOperations(nums = [3,2,2,4], target = 6)",
        "minOperations(nums = [1,2,3], target = 4)",
        "minOperations(nums = [1, 2, 3, 4], target = 7)",
        "minOperations(nums = [1, 2, 4], target = 5)",
        "minOperations(nums = [1,3], target = 3)",
        "minOperations(nums = [1, 1, 1, 1, 1, 1], target = 10)",
        "minOperations(nums = [1, 2, 4, 8], target = 6)",
        "minOperations(nums = [3, 3, 3], target = 10)",
        "minOperations(nums = [4,3,3], target = 10)",
        "minOperations(nums = [6, 1, 5, 2], target = 7)"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8, 16], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 1, 1, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 5, 6, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 4, 1, 3], k = 3)"
    ],
    "sample_165": [
        "isAcronym(words = [\"banana\", \"apple\"], s = \"BA\")",
        "isAcronym(words = [\"apples\", \"bananas\", \"oranges\"], s = \"ABO\")",
        "isAcronym(words = [\"Internationalization\", \"Localization\"])",
        "isAcronym(words = ['ABC', 'DEF', 'GHI'], s = 'ADG')",
        "isAcronym(words = [\"I\", \"am\", \"Groot\"], s = \"IAG\")",
        "isAcronym(words = [\"Hello\", \"Python\", \"is\", \"great\"], s = \"HPI\")",
        "isAcronym(words = [\"Central\", \"Tibetan\", \"Administration\"], s = \"CTA\")",
        "isAcronym(words = [\"egg\", \"pain\", \"apples\"], s = \"EPA\")",
        "isAcronym(words = [\"dream\", \"interview\", \"problem\", \"solution\"], s = \"DIS\")",
        "isAcronym(words = [\"plu\", \"bha\", \"vat\"], s = \"pluvbva\")"
    ],
    "sample_227": [
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [-1, 2, 3, 4, 5, 6])",
        "countWays(nums = [-3, -1, 0, 1, 3])",
        "countWays(nums = [-3, 1, 3])",
        "countWays(nums = [2, -1, 0])",
        "countWays(nums = [4, 1, 1, 1, 5])",
        "countWays(nums = [5, 3, 1, 2, 1, 6])",
        "countWays(nums = [-10, -3, -2, -1, 0, 1, 3, 5, 8, 9])",
        "countWays(nums = [2, 1, 6, 8, -100])",
        "countWays(nums = [1,2,5,3,8,10,12,9])"
    ],
    "sample_158": [
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [10, 20, 30])",
        "maxSum(nums = [2, 1])",
        "maxSum(nums = [101, 102, 103, 104, 105])",
        "maxSum(nums = [1, 3, 3])",
        "maxSum(nums = [3, 1, 6])",
        "maxSum(nums = [333, 444])",
        "maxSum(nums = [1, 10, 9, 10])",
        "maxSum(nums = [7, 5, 6, 2])",
        "maxSum(nums = [2, 7, 1, 2, 2])"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1, 1, 1, 1], k = 0)",
        "longestEqualSubarray(nums = [1, 1, 0, 0, 1], k = 2)",
        "longestEqualSubarray(nums = [0, 0, 0, 0, 0], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 0, 0, 1, 1, 0, 0, 1], k = 2)",
        "longestEqualSubarray(nums = [0,0,0,1,1,1,2,2,2], k = 2)",
        "longestEqualSubarray(nums = [4, 4, 4, 4, 4, 3, 4, 4, 1, 2], k = 2)",
        "longestEqualSubarray(nums = [1,1,2,2,3,4,4,5,5,5], k = 2)",
        "longestEqualSubarray(nums = [3, 4, 2, 3, 4, 3, 1, 2, 3], k = 3)",
        "longestEqualSubarray(nums = [3,2,5,2,2,5], k = 2)",
        "longestEqualSubarray(nums = [3, 1, 1, 3, 1, 1, 3, 3, 1], k = 1)"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 4, offers = [[1, 3, 2], [2, 4, 3]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 4], [2, 5, 6]])",
        "maximizeTheProfit(n = 5, offers = [\n    [1, 2, 5],\n    [2, 3, 3],\n    [3, 4, 4],\n    [4, 5, 6],\n    [5, 6, 10]\n])",
        "maximizeTheProfit(n = 5, offers = [[2, 5, 10], [0, 3, 6]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 7], [2, 4, 8], [3, 5, 9], [4, 6, 10], [5, 7, 11]])",
        "maximizeTheProfit(n = 4, offers = [[3, 1, 5], [2, 2, 6]])",
        "maximizeTheProfit(n = 6, offers = [[1, 4, 5], [2, 5, 6], [3, 4, 3]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 3], [2, 3, 2], [1, 1, 2], [2, 2, 2]])",
        "maximizeTheProfit(n = 6, offers = [(1, 2, 3), (4, 5, 10), (3, 6, 1)])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 4], [2, 5, 3], [3, 5, 2], [3, 5, 1]])"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(x = [1,2,3])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(x = [1, 1, 2, 3, 5, 8])",
        "maxIncreasingGroups(x = [2, 3, 1])",
        "maxIncreasingGroups(x = [2, 1, 4, 3])",
        "maxIncreasingGroups(x = [2, 1, 5, 6, 2, 5])",
        "maxIncreasingGroups([1, 2, 4, 7, 10, 11])",
        "maxIncreasingGroups([3, 1, 2, 4, 7, 5, 6])"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 2, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [2,3,1,5,4], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 7, 11, 15], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 5, 2, 6, 3, 7, 4, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [2,4,8,2,4], k = 2)"
    ],
    "sample_207": [
        "minimumOperations(num = \"250\")",
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"10\")",
        "minimumOperations(num = \"12\")",
        "minimumOperations(num = \"00125\")",
        "minimumOperations(num = '00025')",
        "minimumOperations(num = \"2675\")",
        "minimumOperations(num = \"0051\")",
        "minimumOperations(num = \"1215\")",
        "minimumOperations(num = \"012345678900\")"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"RRRL\")",
        "furthestDistanceFromOrigin(moves = \"LRRL\")",
        "furthestDistanceFromOrigin(moves = \"RRLLL\")",
        "furthestDistanceFromOrigin(moves=\"LRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLLRR\")",
        "furthestDistanceFromOrigin(moves = \"RRLRLLR\")",
        "furthestDistanceFromOrigin(moves = \"RRRLRRLR\")",
        "furthestDistanceFromOrigin(moves = \"LRLLLLRLLR\")",
        "furthestDistanceFromOrigin(moves=\"LRLLRLLR\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLLRLRLR\")"
    ],
    "sample_206": [
        "minimumOperations(num = '123456')",
        "minimumOperations(num = \"400\")",
        "minimumOperations(num = \"00101\")",
        "minimumOperations(num = \"0502\")",
        "minimumOperations(num = \"2570\")",
        "minimumOperations(num = \"01230\")",
        "minimumOperations(num = \"00750000\")",
        "minimumOperations(num = \"241005\")",
        "minimumOperations(num = \"020304050607080900010203040506070809\")",
        "minimumOperations(num = \"197524\")"
    ],
    "sample_155": [
        "canSplitArray(nums = [1,2,3,4,5], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5,6,7,8], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5,6,7], m = 3)",
        "canSplitArray(nums = [2,1,3,2,5,2,2], m = 8)",
        "canSplitArray(nums = [3, 5, 1], m = 8)",
        "canSplitArray(nums = [2, 5, 10], m = 12)",
        "canSplitArray(nums = [1,2,3,5,8,10], m = 8)",
        "canSplitArray(nums = [4, 1, 2, 2, 4], m = 11)",
        "canSplitArray(nums = [5, 3, 6, 4, 4, 2, 2, 2, 1], m = 13)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1,2,3,4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "countCompleteSubarrays(nums = [0,0,1,1,0,1])",
        "countCompleteSubarrays(nums = [1,2,3,1])",
        "countCompleteSubarrays(nums = [1,2,1,3])",
        "countCompleteSubarrays(nums = [1, 1, 1, 2, 3, 4])"
    ],
    "sample_202": [
        "minimumOperations(num = \"000000\")",
        "minimumOperations(num = \"1000\")",
        "minimumOperations(num = \"10\")",
        "minimumOperations(num = \"00100\")",
        "minimumOperations(num = \"000025\")",
        "minimumOperations(num = \"001010\")",
        "minimumOperations(num = \"01234567890\")",
        "minimumOperations(num = \"3333\")",
        "minimumOperations(num = \"250125\")",
        "minimumOperations(num = \"0025255075\")"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [\"a b\", \"c d\"], b = \" \")",
        "splitWordsBySeparator(a = [\"hello\", \"there\"], b = \" \")",
        "splitWordsBySeparator(a = [\"abc def\", \"ghi jkl\"], b = \" \")",
        "splitWordsBySeparator(a = [\"a.b.c\", \"d.e.f\"], b = \".\")",
        "splitWordsBySeparator(a = [\"abc\", \"ab c\"], b = \" \")",
        "splitWordsBySeparator(a = [\"apple\", \"orange\", \"banana\"], b = \"e\")",
        "splitWordsBySeparator(a = [\"abc\", \"def\", \"ghi\", \"jklmn\"], b = \" \")",
        "splitWordsBySeparator(a = [\"qq\", \"ww\", \"ee\"], b = \"q\")",
        "splitWordsBySeparator(a = [\"Hi\", \"my\", \"name\"], b = \" \")",
        "splitWordsBySeparator(a = [\"pineapples\", \"pine\", \"apples\", \"bananas\", \"banana\"], b = \"s\")"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8, 16, 32], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,4,8], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 3, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [10, 11, 12], k = 2)",
        "sumIndicesWithKSetBits(nums = [2,3,6], k = 1)",
        "sumIndicesWithKSetBits(nums = [11, 12, 14, 15, 16], k = 2)",
        "sumIndicesWithKSetBits(nums = [12, 51, 7, 31], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 12, 15, 56], k = 2)"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = \"1001\")",
        "maximumOddBinaryNumber(s = \"1010\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = '1110')",
        "maximumOddBinaryNumber(s = \"100011\")",
        "maximumOddBinaryNumber(s = \"11101\")",
        "maximumOddBinaryNumber(s = \"1010110\")",
        "maximumOddBinaryNumber(s = \"01100010\")",
        "maximumOddBinaryNumber(s = '110001101')",
        "maximumOddBinaryNumber(s = '01101110000')"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,1,1,1,1,1], k = 1)",
        "longestEqualSubarray(nums = [1,2,2,3,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5], k = 3)",
        "longestEqualSubarray(nums = [2, 2, 2, 2, 2], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 1, 3, 3, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 3, 3, 3], k = 2)",
        "longestEqualSubarray(nums = [1,3,2,4,3], k = 2)",
        "longestEqualSubarray(nums = [3,4,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 1, 1, 2, 2, 1], k = 3)",
        "longestEqualSubarray(nums = [3,6,1,3,4,2,2], k = 1)"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1, 1, 1, 1, 1], k = 0)",
        "longestEqualSubarray(nums = [1,2,3,4,5,4,3,2,1], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "longestEqualSubarray(nums = [2, 2, 2, 1, 2, 2, 1, 2, 2, 2], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3, 1, 2], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 3, 4, 4], k = 1)",
        "longestEqualSubarray(nums = [3, 3, 3, 1, 0, 1, 3], k = 2)",
        "longestEqualSubarray(nums = [2, 1, 2, 3, 1, 2, 3, 4, 2], k = 2)",
        "longestEqualSubarray(nums = [5, 3, 1, 3, 5, 3, 1, 3, 5, 3, 1, 3, 5, 3, 1], k = 4)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 4, 5, 6, 7, 8, 9, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = \"0101\")",
        "maximumOddBinaryNumber(s = \"1001\")",
        "maximumOddBinaryNumber(s = \"110010\")",
        "maximumOddBinaryNumber(\"1001\")",
        "maximumOddBinaryNumber(s = \"00010100\")",
        "maximumOddBinaryNumber(s = '110000')",
        "maximumOddBinaryNumber(s = '0110101')",
        "maximumOddBinaryNumber(s = \"01010110\")",
        "maximumOddBinaryNumber(s = '010011001')",
        "maximumOddBinaryNumber(s = \"0110110011\")"
    ],
    "sample_166": [
        "isAcronym(words = [\"abc\", \"def\", \"ghi\"], s = \"abcd\")",
        "isAcronym(words = [\"abc\", \"def\"], s = \"abdef\")",
        "isAcronym(words = [\"united\", \"states\", \"of\", \"america\"], s = \"USA\")",
        "isAcronym(words = [\"apples\", \"oranges\"], s = \"apple\")",
        "isAcronym(words = [\"banana\", \"bat\"], s = \"ba\")",
        "isAcronym(words = [\"ab\"], s = \"abab\")",
        "isAcronym(words = [\"apple\", \"pie\", \"pi\"], s = \"APPIEPI\")",
        "isAcronym(words = [\"program\", \"excellence\", \"achievement\"], s = \"perfect\")",
        "isAcronym(words = [\"Abacus\", \"maiden\"], s = \"abma\")",
        "isAcronym(words = [\"William\", \"Ralph\", \"Brian\", \"Samuel\"], s = \"WRB\")"
    ],
    "sample_163": [
        "maxSum(nums = [1, 10, 100])",
        "maxSum(nums = [11, 22, 33, 44, 55])",
        "maxSum(nums = [1, 2, 1, 1])",
        "maxSum(nums = [1, 9, 8, 4])",
        "maxSum(nums = [10, 12, 2, 3])",
        "maxSum(nums = [-1, 5, 2])",
        "maxSum(nums = [-9, 23])",
        "maxSum(nums = [-10,-10,-10,-20,-10])",
        "maxSum(nums = [5,1,6,9,4,2])",
        "maxSum(nums = [12, 45, 12, 1, 0, 3, 2])"
    ]
}