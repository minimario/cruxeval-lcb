{
    "sample_287": [
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"a\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"aaa\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ac\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"bab\", s3 = \"bab\")",
        "findMinimumOperations(s1 = \"ax\", s2 = \"ay\", s3 = \"az\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"b\", s3 = \"b\")",
        "findMinimumOperations(s1 = \"bana\", s2 = \"banana\", s3 = \"bananas\")",
        "findMinimumOperations(s1=\"123\", s2=\"234\", s3=\"345\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"bcdea\", s3 = \"ecdae\")"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"abaaba\")",
        "longestSemiRepetitiveSubstring(s = \"mississippi\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abb\")",
        "longestSemiRepetitiveSubstring(s = \"abccbbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcdcde\")",
        "longestSemiRepetitiveSubstring(s = \"xxabaax\")",
        "longestSemiRepetitiveSubstring(s=\"abbaabbaba\")",
        "longestSemiRepetitiveSubstring(s = \"abbaccdefff\")",
        "longestSemiRepetitiveSubstring(s = \"nccacnnnn\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"bcd\", \"cde\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"ab\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"defg\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"aa\", \"bb\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bcd\", \"aba\", \"baa\"])",
        "maximumNumberOfStringPairs(words = [\"aabb\", \"bbcc\", \"ccdd\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"abc\", \"abc\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"abb\", \"ab\", \"ba\", \"aab\", \"abc\", \"acb\"])",
        "maximumNumberOfStringPairs(words = [\"g\", \"v\", \"s\", \"k\", \"x\", \"t\", \"h\"])"
    ],
    "sample_247": [
        "minOperations(s1 = \"ab\", s2 = \"ba\", x = 1)",
        "minOperations(s1 = \"ab\", s2 = \"ba\", x = 1)",
        "minOperations(s1 = \"abcd\", s2 = \"dcba\", x = 1)",
        "minOperations(s1 = \"ab\", s2 = \"bc\", x = 2)",
        "minOperations(s1 = \"z\", s2 = \"zz\", x = 2)",
        "minOperations(s1 = \"xxyx\", s2 = \"xxxy\", x = 1)",
        "minOperations(s1 = \"xxyyzz\", s2 = \"zzyyxx\", x = 2)",
        "minOperations(s1 = \"abced\", s2 = \"baef\", x = 1)",
        "minOperations(s1 = \"cdef\", s2 = \"cdef\", x = 3)",
        "minOperations(s1 = \"eueu\", s2 = \"eeeu\", x = 2)"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"cat\", \"bat\", \"rat\", \"rat\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bca\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"def\",\"ghi\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"a\", \"ab\", \"z\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abc\", \"xyz\", \"xyz\"])",
        "maximumNumberOfStringPairs(words = [\"bat\", \"cat\", \"rat\", \"rat\", \"bat\", \"cat\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"cccc\", \"deeeee\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"xya\", \"lmn\", \"xyza\"])",
        "maximumNumberOfStringPairs(words = [\"c\", \"ccc\", \"w\", \"wwww\"])"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 3, 3, 3, 3, 6, 6])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [2, 2])",
        "minGroupsForValidAssignment(nums = [1, 3, 3, 3, 2, 2, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [2,2,2,4,1,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,2,1,1,1,1,1,1,1,1,1,1])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 6, m = 3)",
        "differenceOfSums(n = 7, m = 3)",
        "differenceOfSums(n = 20, m = 5)",
        "differenceOfSums(n=5, m=3)",
        "differenceOfSums(n = 1, m = 2)",
        "differenceOfSums(n=100, m=3)"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = \"1111111111\", k = 1)",
        "shortestBeautifulSubstring(s = '1111111110', k = 2)",
        "shortestBeautifulSubstring(s = \"1100101\", k = 2)",
        "shortestBeautifulSubstring(s = \"11000011\", k = 3)",
        "shortestBeautifulSubstring(s=\"1100011\", k=2)",
        "shortestBeautifulSubstring(s = \"11000000\", k = 1)",
        "shortestBeautifulSubstring(s = \"111010010010\", k = 2)",
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"az\", s2 = \"az\", s3 = \"az\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"mango\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"aba\", s3 = \"baa\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"cd\", s3 = \"ef\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"cdc\", s3 = \"baba\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"cab\", s3 = \"cba\")"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abca\")",
        "longestSemiRepetitiveSubstring(s = \"abcaa\")",
        "longestSemiRepetitiveSubstring(s = \"ababababa\")",
        "longestSemiRepetitiveSubstring(s = \"abaab\")",
        "longestSemiRepetitiveSubstring(s = \"baaabb\")",
        "longestSemiRepetitiveSubstring(s = \"abaabaaaaba\")",
        "longestSemiRepetitiveSubstring(s = \"nnnaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaaaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"zazbzczaz\")"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [5, 6, 7, 8])",
        "minSum(nums1 = [2,3,4], nums2 = [1,2,3])",
        "minSum(nums1 = [3, 1, 2, 4, 3], nums2 = [6, 1, 5])",
        "minSum(nums1 = [0, 0, 0, 0, 0, 0], nums2 = [0, 0, 0, 0])",
        "minSum(nums1 = [4, 2, 3, 1], nums2 = [1, 5, 0, 2])",
        "minSum(nums1 = [1, 7, 9], nums2 = [2, 8])",
        "minSum(nums1=[-1, 2, 3, 4], nums2=[-1, 2, 3])",
        "minSum(nums1 = [2,3,0,2,0], nums2 = [2,3,0,2,0])",
        "minSum(nums1 = [3, 0, 1, 5], nums2 = [6, 2, 0, 2])"
    ],
    "sample_289": [
        "minimumSteps(s = \"1\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s
        "minimumSteps(s = \"111\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"0001\")",
        "minimumSteps(s = \"10000\")",
        "minimumSteps(s = \"010011\")",
        "minimumSteps(s
        "minimumSteps(s = \"01101101\")"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [2, 1, 5, 0, 4, 6])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 1, 0])",
        "maximumTripletValue(nums = [2, 4, 6, 8, 10])",
        "maximumTripletValue(nums = [2, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [12, 15, 22])"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"aaa\", k = 1)",
        "beautifulSubstrings(s = \"abacaba\", k = 3)",
        "beautifulSubstrings(s = \"aaba\", k = 3)",
        "beautifulSubstrings(s = \"bbbabbbba\", k = 2)",
        "beautifulSubstrings(s = \"anaaa\", k = 2)",
        "beautifulSubstrings(s = \"kqlr\", k = 2)",
        "beautifulSubstrings(s = \"nabaab\", k = 2)",
        "beautifulSubstrings(s = \"saaauu\", k = 2)",
        "beautifulSubstrings(s = \"aiueosdfjsldfjew\", k = 7)",
        "beautifulSubstrings(s=\"aaiaaioaooaiiioaaaaaiaaaiaaaiaaiaaiaiiaiiaia\", k=2)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"ba\")",
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"baaaa\")",
        "minimumBeautifulSubstrings(s = \"ababa\")",
        "minimumBeautifulSubstrings(s = \"e\")",
        "minimumBeautifulSubstrings(s = \"ba\")",
        "minimumBeautifulSubstrings(s = \"abbaac\")",
        "minimumBeautifulSubstrings(s = \"bbbbc\")",
        "minimumBeautifulSubstrings(s = \"1313\")",
        "minimumBeautifulSubstrings(s = \"125279672516\")"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [1, 2, 3]])",
        "matrixSum(a = [[1, 2, 1], [1, 2, 1], [1, 2, 1]])",
        "matrixSum(a = [[1, 2, 3, 4], [2, 5, 6, 7], [3, 6, 8, 9]])",
        "matrixSum(a = [\n    [1, 1, 1, 1],\n    [1, 2, 2, 2],\n    [1, 2, 3, 3]\n])",
        "matrixSum(a = [[3, 0, 1], [5, 2, 6], [1, 5, 2]])",
        "matrixSum(a = [[5, 8, 4], [1, 2, 2], [2, 2, 4]])",
        "matrixSum(a = [[3], [3, 2], [1, 4, 6], [1]])",
        "matrixSum(a = [[4, 5, 1], [1, 2, 0], [2, 5, 2]])",
        "matrixSum(a = [[3, 2, 5, 9], [4, 5, 1, 6], [8, 2, 4, 9]])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [0, 0, 0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [6, 2, 1])",
        "minSum(nums1 = [2, 1, 6, 5], nums2 = [7, 9, 3, 4])",
        "minSum(nums1 = [2, 3, 4, 5, 6], nums2 = [2, 3, 5, 7, 11])",
        "minSum(nums1 = [1, 2, 0, 4], nums2 = [2, 4, 6, 0, 8])",
        "minSum(nums1 = [0, 4, 0, 2, 1], nums2 = [3, 6, 3, 3, 3])",
        "minSum(nums1 = [1, 2, 0, 2, 3, 1], nums2 = [2, 1, 0, 2, 5])",
        "minSum(nums1 = [1, 2, 0, 5, 3, 9, 2], nums2 = [3, 2, 1, 5, 9, 7])",
        "minSum(nums1 = [3, 2, 5, 9, 11, 12, 15, 14, 18, 22, 10, 16], nums2 = [1, 4, 17, 23, 2, 16, 9, 24, 21, 14, 20, 20])"
    ],
    "sample_282": [
        "minOperations(nums1 = [1,2,3], nums2 = [2,4,8])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 1, 9])",
        "minOperations(nums1=[1, 5, 7], nums2=[2, 4, 6])",
        "minOperations(nums1 = [1, 4, 2, 3], nums2 = [2, 3, 4, 1])",
        "minOperations(nums1 = [1, 1, 2, 2], nums2 = [3, 3])",
        "minOperations(nums1=[1,3,5,7,9], nums2=[2,4,6,8,10])",
        "minOperations(nums1 = [1, 4, 2], nums2 = [2, 3, 4])",
        "minOperations(nums1 = [1,3,2,5,4], nums2 = [2,2,1,2,1])",
        "minOperations(nums1 = [3, 1, 1, 2, 3], nums2 = [2, 4, 5, 8, 9])",
        "minOperations(nums1 = [5, 3, 2, 4, 8], nums2 = [10, 6, 8, 2, 5])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1, 2, 2, 5, 3, 7])",
        "alternatingSubarray(nums = [3, 1, 2, 4])",
        "alternatingSubarray(nums = [1,2,2,3,3,3,4,4,4])",
        "alternatingSubarray(nums = [3, 1, 5, 2, 6, 4])",
        "alternatingSubarray(nums = [1, 2, 1, 1, 2, 3])",
        "alternatingSubarray(nums = [3, 5, 1, 4, 2, 9, 8, 6, 7])",
        "alternatingSubarray(nums = [1, 2, 4, 5, 1, 2, 5, 2, 2, 4])",
        "alternatingSubarray(nums = [1,2,2,1,2,2,1,1,2,2,2,1,1])",
        "alternatingSubarray(nums = [2,1,3,2,4,5,5,4])",
        "alternatingSubarray(nums = [1, 2, 2, 5, 5, 5, 7, 7, 8, 8, 9, 9, 10])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 3], money = 2)",
        "buyChoco(prices = [1, 2, 3], money = 10)",
        "buyChoco(prices = [2, 3, 4], money = 8)",
        "buyChoco(prices = [2, 5, 8], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1,2,3,4,5], money = 6)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 0)",
        "buyChoco(prices = [1, 2, 5, 10, 12], money = 4)",
        "buyChoco(prices = [10,15,3,1], money = 20)",
        "buyChoco(prices = [10,20,10,10,5], money = 5)"
    ],
    "sample_302": [
        "countSeniors(details = [\"<NAME>\", \"<NAME>\", \"<NAME>\", \"<NAME>\"])",
        "countSeniors(details = [\"1234567890123456789012345678901\", \"1234567890123456789012345678902\"])",
        "countSeniors(details = [\"050-1234567\", \"819-2345678\", \"913-3456789\"])",
        "countSeniors(details = [\"321-23-2345-1234-123\", \"321-33-2345-1234-123\", \"321-24-2345-1234-123\", \"321-23-2345-1234-123\"])",
        "countSeniors(details = [\"r1123344556\", \"s1121201230\"])",
        "countSeniors(details = [\"<NAME>, 189010400019, 1998-07-08, F\", \"<NAME>, 189010400020, 1997-06-05, M\"])",
        "countSeniors(details = [\"12-01-1990-352-Kim\", \"16-09-2003-192-Dick\"])",
        "countSeniors(details = [\"971415254v,8472,3,2013-06-27,2013-08-26,0,0,0,0,0,0,0,0\"])",
        "countSeniors(details = [\"<NAME> 192005097 2020 197001200 2020 1112 1112 1112 123 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111 1",
        "countSeniors(details = [\"<NAME>, 72, 682231, 1984-09-18, 1700-1800\", \"<NAME>, 55, 652231, 1990-03-12, 1600-1700\"])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"banana\", k = 2)",
        "beautifulSubstrings(s = \"aa\", k = 1)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"abccba\", k = 2)",
        "beautifulSubstrings(s = \"abcabca\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"abccaa\", k = 2)",
        "beautifulSubstrings(s = \"abccedef\", k = 15)",
        "beautifulSubstrings(s = \"bobebobo\", k = 4)",
        "beautifulSubstrings(s = \"xxrxxryrxy\", k = 2)"
    ],
    "sample_255": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5,6])",
        "minimumSum(nums = [3,4,5,1,2])",
        "minimumSum(nums = [1,3,5,7])",
        "minimumSum(nums=[2,4,6,8,10])",
        "minimumSum(nums = [4,2,1,10])",
        "minimumSum(nums = [1,2,4,3,5,6])",
        "minimumSum(nums = [4,4,4])",
        "minimumSum(nums = [1, 2, 4, 6, 8, 9])",
        "minimumSum(nums = [2,5,3,7,11,8])"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums=[1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [3, 3, 4, 6])",
        "minGroupsForValidAssignment(nums = [1,3,3,3,2,4,2,4,4])",
        "minGroupsForValidAssignment(nums=[3,3,4,5,5])",
        "minGroupsForValidAssignment(nums = [12,2,6,14,5,9,4,1,3])",
        "minGroupsForValidAssignment(nums = [3,1,3,3,2,1,2,2,2,1,2,3,3,3,1,1,3,2,3,3,3,1,3,3,2,1,1,1,2,1,3,1,3,3,3,2,3,1,3,1,1,3,1,3,1,3,2,3,1,1,1,1,3,3,2,1,1,2,2,1,3,2,3,1,1,1,3,1,1,3,2,2,1,2,1,3,3,1,3,1,1,1,2,1,3,1,3,3,3,2,3,1,3,1,1,3,1,3,1,3,2,3,1,1,1,1,3,3,2,1,1,2,2,1,3,2,3,1,1,1,3,1,1,3,2,2,1,2,1,3,3,1,3,1,1,1,2,1,3,1,3,3,3,2,3,1,3,1,1,3,1,3,1,3,2,3,1,1,1,1,3,3,2,1,1,2,2,1,3,2,3,1,1,1,3,1,1,3,2,2,1,2,1,3,3,1,3,1,1,1,2,1,3,1,3,3,3,2,3,1,3,1,1,3,1,3,1,3,2,3,1,1,1,1,3,3,2,1,1,2,2,1,3,2,3,1,1,1,3,1,1,3,2,2,1,2,1,3,3,1,3,1,1,1,2,1,3,1,3,3,3,2,3,1,3,1,1,3,1,3,1,3,2,3,1,1,1,1,3,3,2,1,1,2,2,1,3,2,3,1,1,1,3,1,1,3,2,2,1,2"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1,2,2,4])",
        "alternatingSubarray(nums = [1,2,2,3])",
        "alternatingSubarray(nums = [1, 2, 2, 4])",
        "alternatingSubarray(nums = [1,2,2,5,7])",
        "alternatingSubarray(nums=[4,2,5,1,6])",
        "alternatingSubarray(nums = [2,1,4,5,3])",
        "alternatingSubarray(nums=[5, 1, 2, 4])",
        "alternatingSubarray(nums = [2, 1, 2, 5, 3, 2])",
        "alternatingSubarray(nums = [1, 2, 2, 5, 3])",
        "alternatingSubarray(nums = [2,4,5,1,2,5,1,3,1,5,2])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = \"111111\", k = 3)",
        "shortestBeautifulSubstring(s = \"101011\", k = 2)",
        "shortestBeautifulSubstring(s = '101011', k = 3)",
        "shortestBeautifulSubstring(s=\"11111\", k=3)",
        "shortestBeautifulSubstring(s = \"11101\", k = 1)",
        "shortestBeautifulSubstring(s=\"011101\", k=2)",
        "shortestBeautifulSubstring(s = '11100111111', k = 2)",
        "shortestBeautifulSubstring(s
    ],
    "sample_293": [
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"100\")",
        "minimumSteps(s = \"1011\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"000000\")",
        "minimumSteps(s = \"11001\")",
        "minimumSteps(s = \"10000\")",
        "minimumSteps(s = \"01000\")",
        "minimumSteps(s = \"0011101\")",
        "minimumSteps(s = \"01111111111110\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"aaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"ababababa\")",
        "longestSemiRepetitiveSubstring(s = \"abaac\")",
        "longestSemiRepetitiveSubstring(s = \"pqr\")",
        "longestSemiRepetitiveSubstring(s = \"aabaabb\")",
        "longestSemiRepetitiveSubstring(s = \"bbbbbbbbbbbbbbbbbbbbbbb\")",
        "longestSemiRepetitiveSubstring(s = \"baaaabbb\")",
        "longestSemiRepetitiveSubstring(s = \"abbcdaabc\")",
        "longestSemiRepetitiveSubstring(s = \"wabble\")",
        "longestSemiRepetitiveSubstring(s = \"bbrtbb\")"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,3,3,3,2,4,2])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,4,4,5])",
        "minGroupsForValidAssignment(nums = [2,3,5])",
        "minGroupsForValidAssignment(nums = [2,3,5,10])",
        "minGroupsForValidAssignment(nums = [5,0,4,6,6,0,4,0])",
        "minGroupsForValidAssignment(nums = [1,1,0,1,0,1,0,0,0,0,0,0,1])",
        "minGroupsForValidAssignment(nums=[1,1,0,1,0,1,0,1,1,1,1,1,0])"
    ],
    "sample_307": [
        "countSeniors(details = [\"<NAME>\", \"<NAME>\", \"<NAME>\"])",
        "countSeniors(details = [\"20120101123456\", \"20130101123456\", \"20140101123456\"])",
        "countSeniors(details = [\"s1\", \"21\", \"s3\", \"42\", \"s5\", \"61\"])",
        "countSeniors(details = [\"12-05-1990 15:09:45\", \"12-05-1991 15:09:45\", \"12-05-1992 15:09:45\"])",
        "countSeniors(details = [\"Harry\", \"Harvey\", \"Steve\", \"Andy\"])",
        "countSeniors(details = [\"1000000\", \"05011990\", \"04011990\", \"1000000\", \"1000000\"])",
        "countSeniors(details = [\"Jen 82\", \"Dan 85\", \"Ken 72\"])",
        "countSeniors(details = [\"<NAME> 51 45 100\", \"<NAME> 25 62 250\"])",
        "countSeniors(details = [\"Jonathan\", \"Peter\", \"Joseph\", \"Laura\", \"John\", \"Benjamin\"])",
        "countSeniors(details = [\"abc 77 86 75\", \"abc 92 87 88\", \"abc 71 88 90\"])"
    ],
    "sample_290": [
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"0010\")",
        "minimumSteps(s = \"1110\")",
        "minimumSteps(s=\"100\")",
        "minimumSteps(s = \"1000000000\")",
        "minimumSteps(s=\"1010\")",
        "minimumSteps(s=\"1110111\")",
        "minimumSteps(s = \"001011100001\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [0], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [0, 1], moveTo = [3, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 2], moveFrom = [0, 3], moveTo = [1, 4])",
        "relocateMarbles(nums = [2, 3, 1, 4], moveFrom = [0, 1], moveTo = [2, 0])",
        "relocateMarbles(nums = [1,2,3,4,3], moveFrom = [0], moveTo = [1])",
        "relocateMarbles(nums = [2, 4, 1, 3, 0], moveFrom = [0, 2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 2, 2, 4, 2], moveFrom = [0, 3], moveTo = [1, 3])",
        "relocateMarbles(nums = [0,1,2,3,4,5,6,7], moveFrom = [3,5], moveTo = [6,2])",
        "relocateMarbles(nums = [2,2,1,2,2,3], moveFrom = [0,3,4], moveTo = [1,4,5])",
        "relocateMarbles(nums = [3, 1, 5, 6, 2, 10], moveFrom = [6, 10], moveTo = [2, 5])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1,2,2,4,2,2])",
        "alternatingSubarray(nums = [1,2,2,4,2,2])",
        "alternatingSubarray(nums = [1, 2, 4, 3])",
        "alternatingSubarray(nums = [2, 4, 6])",
        "alternatingSubarray(nums = [2, 1, 2, 5, 3, 2])",
        "alternatingSubarray(nums = [1,2,3,2,1])",
        "alternatingSubarray(nums = [1, 2, 4, 2, 5, 1])",
        "alternatingSubarray(nums = [1,2,3,2,1,4])",
        "alternatingSubarray(nums = [2, 5, 3, 1, 4])",
        "alternatingSubarray(nums = [1,2,4,3,5,7,9])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"aba\", k = 3)",
        "beautifulSubstrings(s = \"abracadabra\", k = 4)",
        "beautifulSubstrings(s = \"bananas\", k = 4)",
        "beautifulSubstrings(s = \"abab\", k = 3)",
        "beautifulSubstrings(s = \"aaabbb\", k = 3)",
        "beautifulSubstrings(s = \"abcda\", k = 2)",
        "beautifulSubstrings(s = \"bee\", k = 2)",
        "beautifulSubstrings(s = \"abcacbbc\", k = 4)",
        "beautifulSubstrings(s = \"aaaaaaaaaaaaaaaeeeeeeeeeeeeeaaaaaaaaaa\", k = 15)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [2, 3, 1, 5, 4])",
        "maximumTripletValue(nums = [1,2,3,4])",
        "maximumTripletValue(nums = [1,0,1,0,1,0,1])",
        "maximumTripletValue(nums = [1,3,2,2,5,6])",
        "maximumTripletValue(nums = [3, 1, 4, 2, 2, 5])",
        "maximumTripletValue(nums=[4, 2, 6, 8, 10, 15])",
        "maximumTripletValue(nums = [2, 5, 9, 8, 5, 1, 5])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bca\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"abc\", \"def\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"def\", \"ghi\", \"jkl\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bcd\", \"xyz\", \"xyx\"])",
        "maximumNumberOfStringPairs(words = [\"cat\",\"cat\",\"cats\",\"cats\",\"dog\",\"dog\",\"dog\",\"dog\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"cdc\", \"efe\", \"ffe\", \"aba\"])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 1000, m = 3)",
        "differenceOfSums(n = 20, m = 2)",
        "differenceOfSums(n = 1, m = 5)",
        "differenceOfSums(n = 15, m = 2)",
        "differenceOfSums(n = 30, m = 15)"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [10, 20, 5], money = 15)",
        "buyChoco(prices = [1, 2, 3], money = 10)",
        "buyChoco(prices = [1, 2, 3], money = 8)",
        "buyChoco(prices = [2, 4, 1], money = 3)",
        "buyChoco(prices = [1, 1], money = 1)",
        "buyChoco(prices = [3, 6, 1], money = 8)",
        "buyChoco(prices = [10, 20], money = 50)",
        "buyChoco(prices = [10, 3, 5, 5, 2], money = 100)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"aa\", \"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"abc\", \"xyz\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"xyx\", \"xyx\", \"xyx\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bcd\", \"cba\", \"cbd\"])",
        "maximumNumberOfStringPairs(words = [\"cat\", \"dog\", \"dog\", \"bat\", \"rat\", \"rat\"])",
        "maximumNumberOfStringPairs(words = [\"dog\",\"racecar\",\"car\",\"dog\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"b\", \"ba\", \"nana\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cde\", \"acb\", \"cde\"])",
        "maximumNumberOfStringPairs(words = [\"be\", \"bac\", \"c\", \"a\", \"bc\"])"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abacaba\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaabb\")",
        "longestSemiRepetitiveSubstring(s = \"abcdabcdabcd\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabb\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaaaab\")",
        "longestSemiRepetitiveSubstring(s = \"abcdabcb\")",
        "longestSemiRepetitiveSubstring(s = \"aabcdeeee\")",
        "longestSemiRepetitiveSubstring(s = \"abcdefghjklmnop\")",
        "longestSemiRepetitiveSubstring(s = \"abbaabbabbbaaabbababa\")"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"cats\", \"catsdogcats\", \"dog\", \"dogcatsdog\", \"hippopotamuses\", \"rat\", \"ratcatdogcat\"])",
        "minimizeConcatenatedLength(words = [\"aba\",\"cdc\",\"eae\"])",
        "minimizeConcatenatedLength(words = [\"aba\", \"cdc\", \"eae\"])",
        "minimizeConcatenatedLength(words = [\"aba\",\"xyz\",\"aa\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"xyz\",\"aba\"])",
        "minimizeConcatenatedLength(words = [\"xyzz\", \"xyx\", \"xy\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"cba\", \"ab\", \"ac\"])",
        "minimizeConcatenatedLength(words = [\"ca\", \"bb\", \"ba\", \"caa\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"ab\", \"cd\", \"def\", \"cde\", \"c\"])"
    ],
    "sample_323": [
        "isFascinating(n = 3)",
        "isFascinating(n = 3)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 4)",
        "isFascinating(n = 4)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 24)",
        "isFascinating(n = 1000000000)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"aaaabb\")",
        "longestSemiRepetitiveSubstring(s = \"abccbb\")",
        "longestSemiRepetitiveSubstring(s = \"ababaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbaabba\")",
        "longestSemiRepetitiveSubstring(s = \"aabbc\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaabbbbbccccc\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbbbccccddddeeeee\")",
        "longestSemiRepetitiveSubstring(s = \"abbbccddda\")",
        "longestSemiRepetitiveSubstring(s = \"abaabbcdde\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaabbbcccdddddddeeeeeeeef\")"
    ],
    "sample_305": [
        "countSeniors(details
        "countSeniors(details = [\"1244522465\", \"1244522465\", \"1244522465\"])",
        "countSeniors(details = [\"<NAME> 9876543210 1986 01 01 12 00 12 00 20 M\"])",
        "countSeniors(details = [\"0810006000030003\", \"0810007000030001\"])",
        "countSeniors(details=[\"111-22-3333 Alfred 1992 10000 61 34 23 12.34\"])",
        "countSeniors(details = [\"<NAME>, 1978, Senior, 1990\", \"Bruce Wayne, 1981, Junior, 2000\", \"Peter Parker, 1970, Senior, 1998\", \"Teddy Roosevelt, 1982, Junior, 2009\"])",
        "countSeniors(details = [\"<NAME>, 1988, May 14, 5:50 PM, 262, 251, 123, Bangalore\", \"<NAME>, 1992, January 14, 5:50 PM, 262, 251, 123, Bangalore\"])",
        "countSeniors(details = [\"<NAME>,1981/10/06,62,M,1999/01/21,25,M,1992/06/24,28,M,1997/11/15,50,M,1999/01/21,25,M,1992/06/24,28,M,1997/11/15,50,M,1999/01/21,25,M\"])",
        "countSeniors(details = [\"[NAME],[AGE],[SEX],[DATE OF BIRTH],[ADDRESS],[CITY],[ZIP],[COUNTRY],[PHONE],[EMAIL],[EYE COLOR],[HAIR COLOR],[HEIGHT],[WEIGHT],[SMOKER],[ALCOHOLIC],[POLITICAL VIEW]\",\"Susan,21,F,1995-06-15,45553 Nelson St,Dallas,75132,US,555-555-5555,<EMAIL>,Blue,Brown,5\\' 6\\\",175,Non-smoker,Non-alcoholic,Moderate\"])",
        "countSeniors(details = [\"2941002,1,Sir,Brown,25,100,7,1998,0,0,0,1527.96,0,0,0,0,0,0,1,1\", \"1990101,1,Sir,Smith,52,100,7,1990,0,0,0,1230.55,0,0,0,0,0,0,1,1\"])"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 2])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "minGroupsForValidAssignment(nums = [1,3,3,3,2,2])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 2, 4])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,2,3,1,2])",
        "minGroupsForValidAssignment(nums = [9, 8, 5])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,4,4,5,6,7,8,9,10,11])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [3, 1, 2, 4, 3])",
        "minimumSum(nums = [-1, 2, 3, 5])",
        "minimumSum(nums = [-5, 1, 3])",
        "minimumSum(nums = [-3, -2, -5])",
        "minimumSum(nums = [4, 5, 1, 7, 2, 9])",
        "minimumSum(nums = [7, 8, -3, -1, 3, -1, 2, 5, -3])"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"cat\", \"bat\", \"rat\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"abcd\", \"efgh\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bcd\", \"c\"])",
        "maximumNumberOfStringPairs(words = [\"bob\", \"bob\", \"bob\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"])",
        "maximumNumberOfStringPairs(words = [\"bcd\", \"bad\", \"aa\", \"bb\", \"dad\"])",
        "maximumNumberOfStringPairs(words = [\"yaaaaaah\", \"aaaahh\", \"ayy\"])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = \"1101011\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"11011001\", k = 2)",
        "shortestBeautifulSubstring(s = \"0111011101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1011111111\", k = 3)",
        "shortestBeautifulSubstring(s = \"001100011\", k = 2)",
        "shortestBeautifulSubstring(s=\"1101001\", k=2)",
        "shortestBeautifulSubstring(s = \"1001110110000\", k = 3)",
        "shortestBeautifulSubstring(s = '11011000100110001001100011111001001100000000000010011000000000000100110000101100000000000010011000000000000100110000000000001001100011011000100110001111100100110001001100000000000010011000000000000100110000000000001001100001001100010011000100110001001100010011000110110000000000001001100000000000010011000000000000100110001001100010011000100110001001100010011000110110001001100000000000010011000000000000100110000000000001001100001011000000000000100110000000000001001100000000000010011000100110001001100010011000100110001001100011011000000000000100110000000000001001100000000",
        "shortestBeautifulSubstring(s
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 7)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 7)",
        "lexicographicallySmallestArray(nums = [9, 8, 5, 3, 1], limit = 100)",
        "lexicographicallySmallestArray(nums = [1, 2, 3, 5, 8, 9], limit = 3)",
        "lexicographicallySmallestArray(nums = [1, 9, 3, 5, 8], limit = 2)",
        "lexicographicallySmallestArray(nums = [3, 5, 8, 1, 9], limit = 100)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9, 8, 7], limit = 10)",
        "lexicographicallySmallestArray(nums = [5, 7, 1, 3, 9, 8], limit = 4)",
        "lexicographicallySmallestArray(nums = [1, 2, 10, 3, 5, 8, 9], limit = 1)",
        "lexicographicallySmallestArray(nums = [3, 4, 5, 8, 9, 1, 3, 8, 5, 2], limit = 100)"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[3, 4], [5, 6]])",
        "matrixSum(a = [[1,2,3], [2,3,4], [4,5,5]])",
        "matrixSum(a = [[5,3,4],[5,3,4],[5,3,4]])",
        "matrixSum(a = [[5, 1, 2], [3, 4, 7]])",
        "matrixSum(a = [[2, 3, 1, 1], [2, 1, 2, 4]])",
        "matrixSum(a = [ [4, 5, 6], [7, 8, 9], [10, 11, 12] ])",
        "matrixSum(a = [[3, 2, 1], [10, 12, 2], [13, 14, 15]])",
        "matrixSum(a=[[2, 2, 3, 4], [1, 1, 1, 2], [2, 2, 2, 2], [1, 1, 1, 2]])",
        "matrixSum(a = [[4, 5, 3, 2], [3, 1, 2, 5], [4, 3, 2, 1], [4, 3, 2, 1]])"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"bana\", k = 2)",
        "beautifulSubstrings(s = \"abacab\", k = 2)",
        "beautifulSubstrings(s = \"baaabaaa\", k = 2)",
        "beautifulSubstrings(s = \"abefg\", k = 2)",
        "beautifulSubstrings(s = \"babbbbabbbba\", k = 4)",
        "beautifulSubstrings(s = \"aeiaaioaaaaaiaaaaeiaaaaaaaiaaaaaaaiaaaaa\", k = 3)",
        "beautifulSubstrings(s = \"neeiinaaieiin\", k = 2)",
        "beautifulSubstrings(s = \"ixxxooaazxooaazxooazxxooazzxxxoo\", k = 7)"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"a\"])",
        "maximumNumberOfStringPairs(words = [\"dog\", \"god\", \"dog\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bcd\", \"cba\", \"zab\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"baba\", \"abba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"xyc\", \"xyz\", \"bac\", \"xyz\"])",
        "maximumNumberOfStringPairs(words = [\"coco\", \"xoo\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"zz\", \"xzy\", \"xyx\", \"zzz\"])",
        "maximumNumberOfStringPairs(words = [\"water\", \"turtle\", \"water\", \"nine\", \"ten\"])",
        "maximumNumberOfStringPairs(words=[\"<NAME>\", \"pant\", \"two\", \"three\"])"
    ],
    "sample_325": [
        "isFascinating(n = 123456789)",
        "isFascinating(n = 3)",
        "isFascinating(n = 4)",
        "isFascinating(n = 23)",
        "isFascinating(n=1)",
        "isFascinating(n=10)",
        "isFascinating(n=12)",
        "isFascinating(n = 19)",
        "isFascinating(n = 1023)",
        "isFascinating(n = 9796)"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [3, 4, 5, 2, 8])",
        "maximumTripletValue(nums = [4, 2, 1, 3])",
        "maximumTripletValue(nums = [4, 1, 1, 2])",
        "maximumTripletValue(nums = [1, 2, 2, 3])",
        "maximumTripletValue(nums = [5,1,2,3])",
        "maximumTripletValue(nums = [5,12,1,8,10])",
        "maximumTripletValue(nums = [3, 2, 6, 5])",
        "maximumTripletValue(nums = [1, 3, 2, 10, 5, 7])",
        "maximumTripletValue(nums = [9, 4, 3, 2, 7, 8])"
    ],
    "sample_312": [
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,3],[2,1]])",
        "matrixSum(nums = [[5, -7], [9, 2], [1, 4]])",
        "matrixSum(nums = [[1, 2, 3, 4], [4, 5, 6, 5], [3, 6, 6, 7]])",
        "matrixSum(nums = [[2, 1, 5, 6], [4, 8, 9, 10], [1, 5, 7, 8]])",
        "matrixSum(nums = [[5, 4, 6, 2], [7, 1, 3, 8], [8, 6, 3, 6], [1, 0, 5, 1]])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3, 4, 5], b = [5, 4, 3, 2, 1])",
        "minOperations(a = [1, 2, 3, 4], b = [4, 5, 6, 7])",
        "minOperations(a = [3, 2, 1], b = [4, 5, 6])",
        "minOperations(a = [2,1], b = [3,1])",
        "minOperations(a = [1, 3], b = [5, 3])",
        "minOperations(a = [1, 2, 3, 4], b = [3, 3, 4, 5])",
        "minOperations(a = [2, 1, 3], b = [10, 10, 10])",
        "minOperations(a = [3, 4, 6, 8], b = [4, 3, 6, 7])",
        "minOperations(a = [2, 2, 1, 2, 1, 1, 2, 1, 1, 1], b = [2, 1, 1, 2, 1, 1, 1, 2, 2, 1])",
        "minOperations(a = [4, 4, 7, 8, 1], b = [5, 6, 8, 10, 2])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1,2,3,4], nums2 = [1,2,3,4])",
        "minOperations(nums1 = [1,2,3,4], nums2 = [3,4,5,6])",
        "minOperations(nums1 = [2], nums2 = [3])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 10, 10, 10, 10])",
        "minOperations(nums1 = [3, 4, 1, 2], nums2 = [9, 6, 5, 10])",
        "minOperations(nums1 = [1,2,2,1], nums2 = [3,3,3,2,2,2])",
        "minOperations(nums1=[1,2,3], nums2=[3,4])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [100, 2, 5])",
        "minOperations(nums1 = [2,1,7,4], nums2 = [3,2,4])",
        "minOperations(nums1 = [10,9,8,7], nums2 = [5,1,2,4])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [3, 2, 6, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [5, 6, 2])",
        "maximumTripletValue(nums = [1, 3, 2, 4])",
        "maximumTripletValue(nums = [100, 100, 0])",
        "maximumTripletValue(nums = [5, 1, 5, 5, 2, 5, 4])",
        "maximumTripletValue(nums = [5,2,3,2])",
        "maximumTripletValue(nums=[7, 2, 1, 3])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = \"001101\", k = 2)",
        "shortestBeautifulSubstring(s = \"01010101\", k = 3)",
        "shortestBeautifulSubstring(s = '1011110', k = 3)",
        "shortestBeautifulSubstring(s = \"010111101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1111010111\", k = 3)",
        "shortestBeautifulSubstring(s = \"11011011011011010\", k = 3)",
        "shortestBeautifulSubstring(s = \"0111011111101011110101010111111111110111111111111111111101010001101111011111111101101111110111111111111111111111111101010111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s = \"1101010001100101101101010000000011001011011010101101000011010101101100101011011011011010101100101101101000110000110110010110110101010000010110110101010110010100011010101100101101100101101100101011001011011010101101010110010110100101101101101000101000110110110101011001011010101101101101010000011011011010101101101100101011011011011010101101101101100101101101010001101010110110010110101001011010100011010101101100101101010110010101101101101101010001101101101010110110110110110110110110110101011010000010101010010110110010110110110101011010101101101010001011011010101101100",
        "shortestBeautifulSubstring(s
    ],
    "sample_256": [
        "minimumSum(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumSum(nums = [3, 4, 1, 1, 6])",
        "minimumSum(nums = [2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 5, 2, 8, 1, 5])",
        "minimumSum(nums = [2, -8, 3, -2, 4, -10])",
        "minimumSum(nums = [2, 4, 1, 5, 8])",
        "minimumSum(nums = [3, 1, 2, 4, 10, 1])",
        "minimumSum(nums = [1, 5, 2, 6, 8, 10])",
        "minimumSum(nums = [2, 3, 1, 5, 8, 13, 11])",
        "minimumSum(nums = [4,5,3,2,6,7,8])"
    ],
    "sample_291": [
        "minimumSteps(s = \"111\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1011\")",
        "minimumSteps(s = \"111000\")",
        "minimumSteps(s = \"111110\")",
        "minimumSteps(s = \"111111111111\")",
        "minimumSteps(s = \"000111\")",
        "minimumSteps(s = \"1111001\")",
        "minimumSteps(s = \"001010\")",
        "minimumSteps(s = \"01011011\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1, 3, 5, 7], nums2 = [1, 2, 3, 7])",
        "minOperations(nums1 = [1,3,5,7], nums2 = [1,2,3,7])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 5], nums2 = [2, 7, 10])",
        "minOperations(nums1 = [2,3,4,7], nums2 = [1,5,8,9])",
        "minOperations(nums1 = [3,2,1,2,1,2,1,2,1], nums2 = [3,2,1,2,1,2,1,2,1])",
        "minOperations(nums1 = [0, 2, 1], nums2 = [1, 3, 5])",
        "minOperations(nums1 = [3, 1, 5, 8], nums2 = [4, 2, 1, 7])",
        "minOperations(nums1 = [3, 1, 2, 5, 4], nums2 = [1, 2, 3, 4, 6])",
        "minOperations(nums1 = [2,1,4,1,3], nums2 = [2,3,5,4,4])"
    ],
    "sample_277": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 1], [0, 0, 0]])",
        "findChampion(grid = [[1, 1, 1], [2, 2, 2], [3, 3, 3]])",
        "findChampion(grid = [[1, 1, 1], [0, 1, 1], [1, 0, 1]])",
        "findChampion(grid = [[1, 1, 0], [1, 1, 1], [1, 1, 1]])",
        "findChampion(grid=[[1, 0, 0, 0], [0, 0, 0, 1], [0, 1, 0, 0]])",
        "findChampion(grid = [[1,0], [0,2], [0,0]])",
        "findChampion(grid = [[1, 2, 0, 0], [0, 0, 0, 3], [0, 0, 2, 0]])",
        "findChampion(grid=[[0, 1, 1, 1], [1, 0, 1, 1], [1, 1, 0, 0], [1, 1, 1, 1]])",
        "findChampion(grid = [[1, 3, 4, 0], [0, 0, 2, 0], [0, 0, 1, 0]])",
        "findChampion(grid = [[1,0,1,1], [1,0,0,0], [0,1,0,1], [0,0,1,0]])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 4, m = 2)",
        "differenceOfSums(n = 100000, m = 10)"
    ],
    "sample_292": [
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"11000\")",
        "minimumSteps(s = \"10110\")",
        "minimumSteps(s = \"100110\")",
        "minimumSteps(s = \"10010110\")",
        "minimumSteps(s = \"100110110\")",
        "minimumSteps(s = \"1000110110001\")",
        "minimumSteps(s = \"10000000000100110\")"
    ],
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 2, 4])",
        "alternatingSubarray(nums = [1, 2, 2, 4])",
        "alternatingSubarray(nums = [1, 2, 2, 5, 7])",
        "alternatingSubarray(nums = [1, 2, 2, 4])",
        "alternatingSubarray(nums = [1, 2, 2, 3])",
        "alternatingSubarray(nums = [1, 2, 2, 4, 5, 7])",
        "alternatingSubarray(nums = [2, 3, 1, 2, 4])",
        "alternatingSubarray(nums = [2, 1, 3, 5, 4])",
        "alternatingSubarray(nums = [3, 1, 3, 2])",
        "alternatingSubarray(nums = [5, 10, 3, 2, 4, 10, 7, 12, 10, 8])"
    ],
    "sample_353": [
        "relocateMarbles(nums = [3, 2, 1], moveFrom = [0, 1], moveTo = [2, 0])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [0, 2], moveTo = [1, 2])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6], moveFrom = [1, 5], moveTo = [3, 4])",
        "relocateMarbles(nums = [3, 2, 1, 5, 4], moveFrom = [1, 5], moveTo = [3, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [3], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [0, 3], moveTo = [4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6], moveFrom = [3, 4, 5], moveTo = [1, 3, 4])",
        "relocateMarbles(nums = [3, 1, 2, 4, 2], moveFrom = [3, 1], moveTo = [3, 4])",
        "relocateMarbles(nums = [1, 2, 4, 3], moveFrom = [2], moveTo = [4])",
        "relocateMarbles(nums = [3,2,4,1,5], moveFrom = [1,5], moveTo = [3])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [-1, 0, 2, 3])",
        "maximumTripletValue(nums = [2, 1, 5, 0, 4, 6])",
        "maximumTripletValue(nums = [2, 2, 3, 4])",
        "maximumTripletValue(nums = [5, 1, 2, 4])",
        "maximumTripletValue(nums = [-3, 4, 5, 1, 2])",
        "maximumTripletValue(nums = [-3, 1, 2, -2, 5, 1, -9])",
        "maximumTripletValue(nums = [2, 1, 3, 100])",
        "maximumTripletValue(nums = [4, 10, 5, 8, 20])"
    ],
    "sample_273": [
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [1, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 1, 1], [1, 0, 0], [1, 1, 1]])",
        "findChampion(grid = [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [1, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[1, 0, 1], [1, 1, 0], [1, 0, 0]])",
        "findChampion(grid = [[1, 1, 1, 0, 0, 0], [1, 1, 1, 0, 0, 0], [1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 1]])",
        "findChampion(grid = [[1,1,0,0], [0,0,1,0], [0,0,0,0]])",
        "findChampion(grid = [[0, 1, 0, 1, 0], [1, 0, 0, 0, 1], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [1, 0, 0, 1, 0]])"
    ],
    "sample_267": [
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1=[1], nums2=[1, 2])",
        "minSum(nums1 = [1,2,3], nums2 = [1,2])",
        "minSum(nums1 = [3, 4, 6, 2], nums2 = [1, 5, 7, 8])",
        "minSum(nums1 = [1], nums2 = [3, 0, 5])",
        "minSum(nums1 = [1, 5, 7], nums2 = [2, 3, 11])",
        "minSum(nums1 = [1, 0, 0, 1], nums2 = [2, 3, 1, 2])",
        "minSum(nums1 = [2, 1, 1, 2, 3, 3], nums2 = [4, 5, 6, 7, 8])",
        "minSum(nums1=[2, 6], nums2=[3])",
        "minSum(nums1=[3, 4, 7, 2], nums2=[-4, -3, 6])"
    ],
    "sample_294": [
        "minimumSteps(s = \"111\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"110010\")",
        "minimumSteps(s = \"101010101\")",
        "minimumSteps(s = \"1111111111111111111111111111111\")",
        "minimumSteps(s = \"111100\")",
        "minimumSteps(s = \"0101011100111\")"
    ],
    "sample_274": [
        "findChampion(grid = [[1, 2, 3], [3, 4, 5], [5, 6, 7]])",
        "findChampion(grid = [[0, -1, 0], [0, 0, 0], [0, -1, 0]])",
        "findChampion(grid = [[2, 0, 1], [1, 1, 1], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, -1], [2, 0, -1], [1, 0, -1]])",
        "findChampion(grid = [[0, 0, 0, 0, 0], [0, 1, 1, 1, 1], [0, 1, 0, 1, 1], [0, 1, 0, 1, 1], [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[1, 1, 0, 1], [1, 1, 1, 1], [1, 1, 0, 1], [1, 1, 1, 1], [1, 0, 0, 1]])",
        "findChampion(grid = [[2, 0, 0, 2, 0], [0, 0, 0, 0, 0], [2, 2, 2, 2, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0, 0, 1], [0, 1, 0, 0, 0], [1, 0, 0, 1, 1], [0, 0, 0, 1, 0], [1, 0, 1, 1, 1]])",
        "findChampion(grid = [[3, 0, 0, 4, 0], [3, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 1, 0, 0, 0], [1, 0, 0, 0, 0]])",
        "findChampion(grid = [[3, 1, 1, 0, 1], [0, 0, 1, 0, 0], [0, 1, 1, 0, 0], [1, 0, 0, 0, 1], [1, 1, 0, 0, 0]])"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,2])",
        "minGroupsForValidAssignment(nums = [2,2,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,4,3,2,1,1])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 4, 4])",
        "minGroupsForValidAssignment(nums = [2,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,5,5])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,4,4,5,6,6,7,8,9,9])",
        "minGroupsForValidAssignment(nums = [2,2,2,4,2,0,1,2,2])"
    ],
    "sample_270": [
        "minSum(nums1 = [1,2], nums2 = [3,4])",
        "minSum(nums1 = [1,2,0], nums2 = [3,4,5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4])",
        "minSum(nums1 = [1, 0, 0, 1], nums2 = [0, 1, 1])",
        "minSum(nums1 = [1,2,0,0,4], nums2 = [2,5,6])",
        "minSum(nums1 = [3, 1, 2, 0], nums2 = [1, 3, 0, 5])",
        "minSum(nums1=[1, 1, 1, 0, 0, 1], nums2=[1, 1, 1, 0, 0, 1])",
        "minSum(nums1 = [2,0], nums2 = [1,4])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [10, 0, 100, 0, 1000])",
        "minSum(nums1 = [1, 4, 3, 0, 2], nums2 = [1, 5, 3, 1, 2])"
    ],
    "sample_317": [
        "buyChoco(prices = [2, 4, 1], money = 5)",
        "buyChoco(prices = [2, 5, 9], money = 10)",
        "buyChoco(prices = [2, 5, 9], money = 10)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3, 4], money = 6)",
        "buyChoco(prices = [1,2,3,4], money = 6)",
        "buyChoco(prices = [1,2,4], money = 6)",
        "buyChoco(prices = [2,5,8], money = 9)",
        "buyChoco(prices = [10, 5, 15, 6], money = 10)",
        "buyChoco(prices=[100,1,2], money=110)"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"banana\", k = 2)",
        "beautifulSubstrings(s = \"aba\", k = 2)",
        "beautifulSubstrings(s = \"banana\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 4)",
        "beautifulSubstrings(s = \"aeiouaeiou\", k = 4)",
        "beautifulSubstrings(s = \"abracadabra\", k = 10)",
        "beautifulSubstrings(s = \"bat\", k = 2)",
        "beautifulSubstrings(s = \"a\", k = 100)",
        "beautifulSubstrings(s = \"aaabbbcccddeff\", k = 4)",
        "beautifulSubstrings(s = \"abcbbbaaa\", k = 10)"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abbba\")",
        "longestSemiRepetitiveSubstring(s = \"abca\")",
        "longestSemiRepetitiveSubstring(s = \"abcac\")",
        "longestSemiRepetitiveSubstring(s = \"abbaabbb\")",
        "longestSemiRepetitiveSubstring(s = \"wxyz\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabcaabb\")",
        "longestSemiRepetitiveSubstring(s = \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaabbbbaaaaccc\")"
    ],
    "sample_341": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 3, y = 1, z = 2)",
        "longestString(x = 2, y = 5, z = 1)",
        "longestString(x = 4, y = 5, z = 1)",
        "longestString(x = 3, y = 2, z = 2)",
        "longestString(x=2, y=2, z=2)",
        "longestString(x = 12, y = 5, z = 4)"
    ],
    "sample_271": [
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 4])",
        "minSum(nums1 = [1,2,3], nums2 = [9,10,11])",
        "minSum(nums1 = [1, 2, 3, 4, 5, 6], nums2 = [7, 8, 9, 10, 11, 12])",
        "minSum(nums1 = [1,2,3,4,5,6], nums2 = [7,8,9,10])",
        "minSum(nums1 = [0,0,0,0,0,0,0,1], nums2 = [0,0,0,0,0,0,0,0])",
        "minSum(nums1 = [0,2,1,-6,6,-7,9,1,2,0,1], nums2 = [3,2,2,0,9,5,6,-1,4,2])",
        "minSum(nums1 = [4,5], nums2 = [1,5,6])",
        "minSum(nums1 = [1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0], nums2 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])",
        "minSum(nums1 = [1, 3, 5, 0, 9], nums2 = [4, 6, 10, 12])",
        "minSum(nums1 = [1,0,4,5,7], nums2 = [0,8,5,6,1])"
    ],
    "sample_340": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x=1, y=2, z=3)",
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(x = 10, y = 11, z = 12)"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = \"13211\", k = 3)",
        "shortestBeautifulSubstring(s = \"11\", k = 1)",
        "shortestBeautifulSubstring(s = '1321131112', k = 3)",
        "shortestBeautifulSubstring(s = \"1223\", k = 3)",
        "shortestBeautifulSubstring(s = \"123456789012345\", k = 13)",
        "shortestBeautifulSubstring(s = \"123123123123\", k = 6)",
        "shortestBeautifulSubstring(s = \"1234567890\", k = 3)",
        "shortestBeautifulSubstring(s = \"1234567890123456789\", k = 1)",
        "shortestBeautifulSubstring(s = \"12324323\", k = 23)"
    ],
    "sample_324": [
        "isFascinating(n = 3)",
        "isFascinating(n = 5)",
        "isFascinating(n = 4)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 1234)",
        "isFascinating(n = 12345)",
        "isFascinating(n=1)",
        "isFascinating(n = 1342)",
        "isFascinating(n = 720)",
        "isFascinating(n = 906)"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumSum(nums = [1, 1, 2, 2, 3])",
        "minimumSum(nums=[-3, 1, 2, -3, 4])",
        "minimumSum(nums = [-3, 4, 5, 1])",
        "minimumSum(nums = [5, 6, 3, 7, 8])",
        "minimumSum(nums = [3, 5, 9, 12, 18, 20, 30])",
        "minimumSum(nums = [5, 2, 2, 8, 1, 5, 0, 4, 7, 4])"
    ],
    "sample_268": [
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [1,3,5])",
        "minSum(nums1 = [3, 1, 2, 4, 0], nums2 = [2, 5, 6, 2, 3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3])",
        "minSum(nums1 = [1,2,3,4,0,0,0,0], nums2 = [5,6,7,8,9,10,11,12])",
        "minSum(nums1 = [2, 1], nums2 = [1, 1])",
        "minSum(nums1 = [1, 3, 5, 0, 2], nums2 = [4, 3, 1, 1, 2])",
        "minSum(nums1 = [3,0,1,2], nums2 = [4,3,0,1])",
        "minSum(nums1 = [1, 5, 10, 0, 4, 0, 1], nums2 = [0, 4, 3, 0, 2, 0, 1])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"cd\")",
        "findMinimumOperations(s1=\"abc\", s2=\"bca\", s3=\"cabc\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"abb\", s3 = \"bab\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcda\", s3 = \"caba\")",
        "findMinimumOperations(s1 = \"aaaaa\", s2 = \"aaaa\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"bcdea\", s3 = \"adebc\")",
        "findMinimumOperations(s1=\"abc\",s2=\"adc\",s3=\"dab\")",
        "findMinimumOperations(s1 = \"abac\", s2 = \"cbac\", s3 = \"abbc\")",
        "findMinimumOperations(s1 = \"abcc\", s2 = \"cdd\", s3 = \"aabcc\")"
    ],
    "sample_321": [
        "maxStrength(nums = [1, 2, 3, 4, 5, 6])",
        "maxStrength(nums = [1, 2, 3, 4, 5, 6])",
        "maxStrength(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxStrength(nums = [1, 2, 3, -4, -5, 6])",
        "maxStrength(nums = [5, 2, 1, -1])",
        "maxStrength(nums = [1, 10, 2, -5, 100])",
        "maxStrength(nums = [2, 3, 2, -2, 5])",
        "maxStrength(nums = [10, 4, -3, 5, -4, 20])",
        "maxStrength(nums = [0, 4, 2, 3, 1, 3])",
        "maxStrength(nums = [12, 4, -5, 0, 9, 15, -7, 11])"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 3], moveTo = [4, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [3, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [3, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 3, 4, 2], moveFrom = [1, 3], moveTo = [3, 1])",
        "relocateMarbles(nums = [2, 3, 1], moveFrom = [0, 1], moveTo = [1, 0])",
        "relocateMarbles(nums = [3,2,4,1], moveFrom = [1,3], moveTo = [2,4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6], moveFrom = [3, 4], moveTo = [4, 5])",
        "relocateMarbles(nums = [0, 1, 2, 3, 4, 5], moveFrom = [2], moveTo = [4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7], moveFrom = [6, 7], moveTo = [2, 7])",
        "relocateMarbles(nums = [2, 4, 5, 1, 3, 8, 10], moveFrom = [3, 5, 8, 10], moveTo = [1, 4, 7, 9])"
    ],
    "sample_357": [
        "relocateMarbles(nums = [3, 8, 9, 5, 6], moveFrom = [3, 5], moveTo = [6, 8])",
        "relocateMarbles(nums = [3, 8, 9, 5, 6], moveFrom = [3, 5], moveTo = [6, 8])",
        "relocateMarbles(nums = [1, 3, 5, 6, 8, 9], moveFrom = [3, 6], moveTo = [5, 9])",
        "relocateMarbles(nums = [3, 8, 9, 7, 6, 5], moveFrom = [3, 6], moveTo = [5, 7])",
        "relocateMarbles(nums = [3, 8, 9, 1, 2, 5, 6], moveFrom = [1, 5], moveTo = [3, 6])",
        "relocateMarbles(nums = [1, 5, 6, 8, 9], moveFrom = [0, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [5, 6, 8, 9, 1, 2, 3, 4], moveFrom = [2, 5], moveTo = [3, 6])",
        "relocateMarbles(nums = [1,2,3,4,5,6,8,9], moveFrom = [3,6], moveTo = [2,8])",
        "relocateMarbles(nums = [1, 3, 5, 4, 9, 6, 8], moveFrom = [9, 6], moveTo = [5, 8])",
        "relocateMarbles(nums = [1, 5, 6, 8, 9, 2], moveFrom = [3, 6], moveTo = [7, 4])"
    ],
    "sample_318": [
        "buyChoco(prices = [2, 3, 4], money = 5)",
        "buyChoco(prices = [2, 5, 3], money = 10)",
        "buyChoco(prices = [2, 5, 3, 1], money = 10)",
        "buyChoco(prices = [2, 3, 4], money = 7)",
        "buyChoco(prices = [2, 4, 1, 2], money = 10)",
        "buyChoco(prices = [2, 5, 3, 1], money = 5)",
        "buyChoco(prices = [1,2,3,4,5], money = 10)",
        "buyChoco(prices = [4, 2, 1, 3], money = 5)",
        "buyChoco(prices = [2, 5, 3, 7], money = 9)",
        "buyChoco(prices = [2, 5, 3, 5, 6], money = 8)"
    ],
    "sample_308": [
        "matrixSum(nums = [[1], [2], [3]])",
        "matrixSum(nums = [[1], [1, 2], [1, 2, 3]])",
        "matrixSum(nums = [[1,3], [4,2]])",
        "matrixSum(nums = [[3], [1, 5], [2, 3, 9]])",
        "matrixSum(nums = [[4, 3], [5, 7]])",
        "matrixSum(nums = [[4, 1, 6], [5, 9, 3]])",
        "matrixSum(nums = [[4, 1, 3], [1, 5, 9], [7, 3, 6]])",
        "matrixSum(nums = [[3, 8, 1, 9], [1, 2, 1, 0], [5, 7, 9, 2]])",
        "matrixSum(nums=[[3, 4, 5], [2, 4, 7], [5, 2, 8]])",
        "matrixSum(nums = [[3, 1, 5, 7], [2, 9, 4, 6], [8, 0, 0, 2], [7, 0, 0, 1]])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [2, 3, 4], money = 5)",
        "buyChoco(prices = [10, 20, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 8)",
        "buyChoco(prices = [1, 2, 3, 4], money = 5)",
        "buyChoco(prices = [2, 5, 3, 1], money = 11)",
        "buyChoco(prices=[1,2,3], money=5)",
        "buyChoco(prices = [10, 5, 5], money = 15)",
        "buyChoco(prices = [2, 5, 10, 100], money = 150)",
        "buyChoco(prices = [2, 4, 1, 5], money = 3)"
    ],
    "sample_259": [
        "minimumSum(nums = [5,4,1,2,3])",
        "minimumSum(nums = [1,2,3,4,5,6])",
        "minimumSum(nums = [5,4,2])",
        "minimumSum(nums = [-4,-3,-2,-1,0,1])",
        "minimumSum(nums = [9,3,5,1])",
        "minimumSum(nums = [-1, 3, -5, 2, -3])",
        "minimumSum(nums = [2,3,2,4,2,3,2])",
        "minimumSum(nums = [1, 5, 2, 1, 5, 8, 3, 5])",
        "minimumSum(nums=[2, 4, 7, 11, 13])",
        "minimumSum(nums = [5,-2,2,2,-2,5])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 2, -1, -4])",
        "alternatingSubarray(nums = [4, 2, 2, 5, 1, 5, 8])",
        "alternatingSubarray(nums = [-1, 1, -1, 1, -1, 1])",
        "alternatingSubarray(nums = [4, 2, 5, 1, 5, 8])",
        "alternatingSubarray(nums = [2, 4, 1, 5, 0, 2, -1])",
        "alternatingSubarray(nums = [1, 2, 0, -1, 4, -4])",
        "alternatingSubarray(nums=[0, 1, -1, 1, -1, 1, -1])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, -1, 1, 5, -2])",
        "alternatingSubarray(nums = [-1, 2, -1, 1, 3, 5, -1, -1, 1, 2])",
        "alternatingSubarray(nums = [-1, 4, -1, 2, 7, -6, 3, 2, 8, 2, -1])"
    ],
    "sample_311": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1], [0]])",
        "matrixSum(nums = [[1], [1, 1]])",
        "matrixSum(nums = [[1, 3, 3], [4, 3, 1]])",
        "matrixSum(nums = [[1, 2, 3], [0, -1, 0], [0, 0, 0]])",
        "matrixSum(nums = [[1, 2], [2, 4], [3, 3], [1, 2]])",
        "matrixSum(nums = [[1, 2, 0], [1, 4, 6], [1, 2, 6]])",
        "matrixSum(nums = [[1, 3], [1, 1, 1], [3, 4, 5]])",
        "matrixSum(nums = [[2, 3, 1, 5, 7], [1, 9, 8, 6, 4], [4, 6, 7, 3, 2]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 2], money = 1)",
        "buyChoco(a = [1,2], money = 3)",
        "buyChoco(a = [2, 1], money = 5)",
        "buyChoco(a = [2, 3], money = 4)",
        "buyChoco(a = [2, 5], money = 7)",
        "buyChoco(a = [1, 2, 3, 4], money = 7)",
        "buyChoco(a = [3, 2, 2], money = 5)",
        "buyChoco(a = [1, 0, 0], money = 2)",
        "buyChoco(a = [3, 4, 5, 1, 2], money = 6)",
        "buyChoco(a = [50, 50, 50, 50, 10], money = 100)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 4, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 10])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 1, 1, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [1,3,3,3,2,4,2,1,3])",
        "minGroupsForValidAssignment(nums = [1,3,2,3,8,2])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,10,6,7,8,9,11])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,1,2,2,2])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 2, 2, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 4, 3, 2, 1, 4])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 2, 3, 3, 4, 4, 4, 4])"
    ],
    "sample_276": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 2], [3, 4]])",
        "findChampion(grid = [[1, 2, 3], [1, 2, 3], [1, 2, 3]])",
        "findChampion(grid = [[1, 2], [2, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [1, 1, 0]])",
        "findChampion(grid = [[1, 2, 3], [3, 2, 1], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [1, 1, 1, 0]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 0]])",
        "findChampion(grid = [[3, 4, 5], [4, 2, 6], [2, 3, 1]])",
        "findChampion(grid = [[1, 3], [1, 0], [2, 1], [2, 2]])"
    ],
    "sample_320": [
        "maxStrength(nums = [1, 2, 3])",
        "maxStrength(nums = [1,2,3,4,5])",
        "maxStrength(nums = [1,2,3])",
        "maxStrength(nums = [2,3,4,5])",
        "maxStrength(nums = [1,2,3,4,5,6,7,8])",
        "maxStrength(nums = [10, 20, 30, 40])",
        "maxStrength(nums = [5, 5, 10])",
        "maxStrength(nums = [10,2,3,4])",
        "maxStrength(nums = [5, 2, 4])",
        "maxStrength(nums = [4, 2, 5, 1, 8])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"ba\", \"nana\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"ab\", \"abc\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"cake\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"abcd\"])",
        "minimizeConcatenatedLength(words = [\"chair\", \"table\", \"car\"])",
        "minimizeConcatenatedLength(words = [\"abcd\", \"cdef\"])",
        "minimizeConcatenatedLength(words = [\"aba\", \"cdc\", \"xyz\", \"zzz\"])",
        "minimizeConcatenatedLength(words = [\"mobile\", \"mouse\", \"moneypot\", \"monitor\", \"mousepad\"])",
        "minimizeConcatenatedLength(words = [\"mp\", \"px\", \"zy\", \"zp\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"at\", \"act\", \"acti\", \"cati\", \"cati\"])"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"mq\", s2 = \"px\", s3 = \"zy\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcde\", s3 = \"cdef\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"dcba\", s3 = \"cdba\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"cde\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"cde\", s3 = \"fgh\")",
        "findMinimumOperations(s1 = \"abd\", s2 = \"acd\", s3 = \"bcd\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"na\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"a\", s3 = \"ba\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"defg\", s3 = \"acbab\")",
        "findMinimumOperations(s1 = \"mammamia\", s2 = \"iiii\", s3 = \"mom\")"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 2, 2, 3])",
        "alternatingSubarray(nums = [1, 2, 2, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 2, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 0, 3, 0, 4])",
        "alternatingSubarray(nums = [1, 2, 2, 2, 3])",
        "alternatingSubarray(nums = [1, 17, 5, 10, 13, 15, 10, 5, 16, 8])",
        "alternatingSubarray(nums = [1, 2, 2, 4, 5, 5])",
        "alternatingSubarray(nums = [4, 7, 2, 5, 3, 10, 9])",
        "alternatingSubarray(nums = [1, 2, 2, 2, 3, 3])",
        "alternatingSubarray(nums = [4, 5, 3, 4, 5, 1, 5])"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 1, 1], [1, 1, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 1], [1, 1]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])",
        "findChampion(grid=[[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[1,0,0], [0,1,0], [0,1,0]])",
        "findChampion(grid = [[0, 1, 1, 0], [1, 1, 1, 0], [1, 1, 1, 0], [0, 1, 1, 0]])",
        "findChampion(grid=[[1, 0, 0], [0, 1, 0], [1, 0, 0]])",
        "findChampion(grid = [[3,2,1], [1,1,0], [2,3,0]])",
        "findChampion(grid = [[1, 2, 3, 4, 5], [3, 5, 1, 2, 4], [4, 2, 5, 3, 1], [2, 4, 1, 5, 3], [1, 3, 4, 2, 5]])"
    ],
    "sample_304": [
        "countSeniors(details = [\"123456789123456789123456789123456\", \"123456789123456789123456789123456\", \"123456789123456789123456789123456\", \"123456789123456789123456789123456\"])",
        "countSeniors(details = [\"123456789123456\", \"1234567891234567\", \"12345678912345678\"])",
        "countSeniors(details = [\"111-11-1111 19 61\", \"222-22-2222 20 20\"])",
        "countSeniors(details = [\"123-1234567-1990-M\", \"123-1234567-1988-F\", \"123-1234567-1992-M\"])",
        "countSeniors(details = [\"Name 12345678901234567890 2000-01-01 00:00:00 65 0.0\", \"Name 12345678901234567891 2000-01-01 00:00:00 66 0.0\"])",
        "countSeniors(details = [\"3000466312V60285\", \"4000466312V60285\", \"5000466312V60285\"])",
        "countSeniors(details = [\"2020-04-24,Jane,Doe,123456789,Male,17,28,Gym,Cooking,2020-04-09,75\"])",
        "countSeniors(details = [\"<NAME> 1972-08-03 20:15:00 66 1 28 2 2 2\", \"<NAME> 1968-08-29 15:30:00 58 1 25 2 2 2\"])",
        "countSeniors(details = [\"Mr.\", \"Alex\", \"00000\", \"1980-01-01\", \"64\", \"320\", \"5\", \"3.5\", \"1\", \"4\", \"200\", \"999\", \"M\"])",
        "countSeniors(details = [\"<NAME>, 20, 2019-01-15, 2010-09-11, 61, 75.00\", \"<NAME>, 21, 2019-02-23, 2008-07-07, 55, 68.00\", \"<NAME>, 18, 2019-03-10, 2007-03-29, 61, 75.00\", \"<NAME>, 19, 2019-04-17, 2006-06-01, 60, 80.00\"])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"banana\", k = 3)",
        "beautifulSubstrings(s = \"geek\", k = 2)",
        "beautifulSubstrings(s = \"bananaa\", k = 3)",
        "beautifulSubstrings(s = \"abccdee\", k = 2)",
        "beautifulSubstrings(s = \"axbycz\", k = 2)",
        "beautifulSubstrings(s = \"zabba\", k = 2)",
        "beautifulSubstrings(s = \"zaaae\", k = 2)",
        "beautifulSubstrings(s = \"aoaoaoaoaoaoa\", k = 2)",
        "beautifulSubstrings(s = \"bmmzkmxmk\", k = 2)",
        "beautifulSubstrings(s = \"bvkzugjbh\", k = 5)"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"1011101\", k = 1)",
        "shortestBeautifulSubstring(s = \"1100111\", k = 3)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = '1101110111', k = 3)",
        "shortestBeautifulSubstring(s = '11011010', k = 2)",
        "shortestBeautifulSubstring(s = \"0001000\", k = 2)",
        "shortestBeautifulSubstring(s = '111010111001', k = 2)",
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"mouse\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"banana\"])",
        "minimizeConcatenatedLength(words = [\"xy\", \"yz\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"at\"])",
        "minimizeConcatenatedLength(words = [\"aba\", \"xyz\", \"azc\", \"xyz\"])",
        "minimizeConcatenatedLength(words = [\"xyyxx\"])",
        "minimizeConcatenatedLength(words = [\"abcd\", \"xyz\", \"pq\"])",
        "minimizeConcatenatedLength(words = [\"aba\", \"b\", \"baba\", \"ab\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"apple\", \"banana\", \"home\"])",
        "minimizeConcatenatedLength(words = [\"aaaa\", \"bb\", \"c\", \"dd\", \"ee\", \"eeee\"])"
    ],
    "sample_327": [
        "isFascinating(n = 3)",
        "isFascinating(n = 5)",
        "isFascinating(n = 12)",
        "isFascinating(n = 4)",
        "isFascinating(n = 13)",
        "isFascinating(n = 13)",
        "isFascinating(n=12345)",
        "isFascinating(n = 999)",
        "isFascinating(n = 1023)",
        "isFascinating(n = 1400)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])",
        "matrixSum(nums=[[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15], [16,17,18,19,20], [21,22,23,24,25]])",
        "matrixSum(nums = [[1, 4, 8], [2, 5, 9]])",
        "matrixSum(nums = [[1, 3], [2, 4], [3, 5]])",
        "matrixSum(nums=[[1,1],[1,1]])",
        "matrixSum(nums = [[4, 9, 2], [3, 5], [8, 7, 6]])",
        "matrixSum(nums = [[1], [4, 6], [8, 10, 11], [15]])",
        "matrixSum(nums = [[0, -1], [2, -1], [2, 0], [3, -1]])",
        "matrixSum(nums = [[5, 6, 9, 10, 4], [1, 2, 3, 7, 9]])",
        "matrixSum(nums = [[5, 4, 9, 1], [7, 3, 6, 2], [5, 6, 4, 6]])"
    ],
    "sample_326": [
        "isFascinating(n = 3)",
        "isFascinating(n = 3)",
        "isFascinating(n = 12)",
        "isFascinating(n = 5)",
        "isFascinating(n = 13)",
        "isFascinating(n = 42)",
        "isFascinating(n = 120)",
        "isFascinating(n = 28)",
        "isFascinating(n = 1213)",
        "isFascinating(n=1234567890)"
    ],
    "sample_275": [
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 1, 1]])",
        "findChampion(grid=[[0, 1, 0], [0, 0, 0], [1, 1, 0]])",
        "findChampion(grid = [[0,1,0],[0,1,0],[1,1,0]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 1, 0, 1], [0, 0, 0, 1], [1, 0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]])",
        "findChampion(grid = [[1, 1, 0, 0, 0], [0, 0, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 1, 1, 1], [0, 0, 0, 0, 0]])",
        "findChampion(grid=[[0, 0, 1, 1], [1, 1, 1, 0], [1, 1, 0, 1], [1, 0, 1, 1]])",
        "findChampion(grid = [[0, 0, 0, 0, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0]])",
        "findChampion(grid=[[1, 2, 3, 0], [2, 1, 2, 0], [0, 1, 0, 0], [1, 1, 2, 2]])"
    ],
    "sample_260": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumSum(nums = [1,2,3,4,5,6])",
        "minimumSum(nums = [2, 3, 4, 1, 5])",
        "minimumSum(nums = [-2, -3, 4, -1, -2, 1, 5, -3])",
        "minimumSum(nums = [5,4,3,2,1])",
        "minimumSum(nums = [4, 7, 1, 2, 14])",
        "minimumSum(nums = [1, 2, 1, 3, 3, 1])",
        "minimumSum(nums = [2, 7, 5, 1, 9, 8, 3, 4])",
        "minimumSum(nums = [10, 12, 13, 15, 2, 3, 10])"
    ],
    "sample_322": [
        "isFascinating(n = 3)",
        "isFascinating(n = 1)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 2)",
        "isFascinating(n = 7)",
        "isFascinating(n = 20)",
        "isFascinating(n = 666)",
        "isFascinating(n = 730)"
    ],
    "sample_248": [
        "minOperations(s1 = \"110\", s2 = \"111\", x = 2)",
        "minOperations(s1 = \"10\", s2 = \"111\", x = 1)",
        "minOperations(s1 = \"1000\", s2 = \"0001\", x = 1)",
        "minOperations(s1 = \"0111\", s2 = \"0000\", x = 1)",
        "minOperations(s1 = \"00110\", s2 = \"11001\", x = 1)",
        "minOperations(s1 = \"1001\", s2 = \"1111\", x = 100)",
        "minOperations(s1 = \"11101\", s2 = \"00010\", x = 3)",
        "minOperations(s1 = \"1110\", s2 = \"1010\", x = 1)",
        "minOperations(s1 = \"1000\", s2 = \"1100\", x = 2)",
        "minOperations(s1 = \"00010001\", s2 = \"11101011\", x = 3)"
    ],
    "sample_342": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 1, y = 1, z = 1)",
        "longestString(x = 2, y = 4, z = 6)",
        "longestString(x = 2, y = 6, z = 10)",
        "longestString(x = 3, y = 2, z = 3)",
        "longestString(x = 2, y = 5, z = 8)",
        "longestString(x = 5, y = 10, z = 7)",
        "longestString(x=4, y=6, z=6)"
    ],
    "sample_354": [
        "relocateMarbles(nums = [3, 8, 9, 5, 6], moveFrom = [3, 8], moveTo = [5, 6])",
        "relocateMarbles(nums = [3, 8, 9, 5, 6], moveFrom = [0, 1], moveTo = [3, 4])",
        "relocateMarbles(nums = [2, 3, 5, 6, 8, 9], moveFrom = [0, 1], moveTo = [4, 3])",
        "relocateMarbles(nums = [3, 8, 9, 5, 6], moveFrom = [3, 6], moveTo = [9, 5])",
        "relocateMarbles(nums = [2, 5, 6, 8, 9], moveFrom = [2, 5], moveTo = [6, 8])",
        "relocateMarbles(nums = [3, 8, 9, 5, 6], moveFrom = [8], moveTo = [5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [7, 8], moveTo = [6, 9])",
        "relocateMarbles(nums = [2, 2, 1, 2, 5, 6, 8, 9], moveFrom = [2, 1], moveTo = [8, 9])",
        "relocateMarbles(nums = [4, 5, 6, 7, 8, 9, 1], moveFrom = [0, 1, 3], moveTo = [1, 3, 4])",
        "relocateMarbles(nums = [5, 4, 4, 6, 9], moveFrom = [0, 3], moveTo = [1, 2])"
    ],
    "sample_306": [
        "countSeniors(details = [\"<NAME>\", \"<NAME>\", \"<NAME>\"])",
        "countSeniors(details = [\"123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456",
        "countSeniors(details = [\"00000101001001\", \"00000201002001\", \"00000301003001\"])",
        "countSeniors(details = [\"150-199\", \"149-198\", \"128-197\"])",
        "countSeniors(details = [\"Ashley\", \"1990-06-11\", \"13\", \"13\", \"13\", \"13\"])",
        "countSeniors(details = [\"1212abc123123601223\", \"12312312abc123123601223\"])",
        "countSeniors(details = [\"123-45-6789 Amanda, 27\", \"543-21-8765 Bobby, 40\", \"444-22-7654 Christine, 55\"])",
        "countSeniors(details=[\"<NAME>, 1982-01-15, 192, 194, 60, 100\", \"<NAME>, 1968-07-12, 190, 193, 66, 100\"])",
        "countSeniors(details = [\"1900-01-01,Albert,Smith,1998,120000,60\", \"1900-01-01,Katie,Rose,1975,80000,65\"])",
        "countSeniors(details = [\"Jill 26 64 20 30000\", \"Bob 33 66 18 30000\", \"Sally 66 63 22 40000\"])"
    ],
    "sample_303": [
        "countSeniors(details = [\"1996-01-01\", \"1997-02-02\", \"1998-03-03\"])",
        "countSeniors(details = [\"<NAME>\", \"35\", \"F\"])",
        "countSeniors(details = [\"Mike 40\", \"Mark 42\", \"John 27\"])",
        "countSeniors(details = [\"Ridley-Miller\", \"Ron-Weasley\", \"Ron-Weasley\", \"Ron-Weasley\"])",
        "countSeniors(details = [\"Isabella 66\", \"Rachel 59\", \"Betty 43\"])",
        "countSeniors(details = [\"1992-01-01 21:00\", \"1992-01-02 01:00\", \"1991-01-01 12:00\", \"1994-01-01 12:00\", \"1992-01-01 12:00\"])",
        "countSeniors(details = [\"<NAME> 2000-05-25\", \"<NAME> 1993-07-26\", \"<NAME> 1974-12-20\", \"<NAME> 1986-04-19\"])",
        "countSeniors(details = [\"peter, 66, a, na\", \"john, 12, na, na\", \"mike, 68, na, na\"])",
        "countSeniors(details = [\"11/08/1986\", \"12/07/1979\", \"04/05/1979\", \"05/08/1986\", \"01/01/1989\", \"12/11/1990\"])",
        "countSeniors(details = [\"18327825\", \"19822000\", \"19500582\", \"19987882\"])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [3, 8, 9, 5, 6], moveFrom = [9, 8], moveTo = [5, 6])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 9], moveTo = [6, 8])",
        "relocateMarbles(nums = [1, 2, 3, 5, 6, 7, 8, 9], moveFrom = [3, 7], moveTo = [6, 8])",
        "relocateMarbles(nums = [1, 3, 4, 5, 6, 8, 9], moveFrom = [3, 6], moveTo = [4, 5])",
        "relocateMarbles(nums = [1, 5, 6, 8, 9], moveFrom = [5, 6], moveTo = [1, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 3], moveTo = [4, 5])",
        "relocateMarbles(nums = [1, 3, 5, 2, 4, 6, 8, 9], moveFrom = [3, 4], moveTo = [5, 6])",
        "relocateMarbles(nums = [2, 6, 8, 1, 5, 9, 3], moveFrom = [2, 5], moveTo = [1, 6])",
        "relocateMarbles(nums = [5, 4, 7, 8, 9], moveFrom = [7, 8], moveTo = [6, 9])",
        "relocateMarbles(nums = [1, 5, 3, 6, 4, 2, 8, 9], moveFrom = [3, 6, 7], moveTo = [7, 8])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"aba\", s2 = \"aba\", s3 = \"aba\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"bbb\", s3 = \"ccc\")",
        "findMinimumOperations(s1=\"aa\", s2=\"ab\", s3=\"ac\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"cde\", s3 = \"abde\")",
        "findMinimumOperations(s1 = \"ee\", s2 = \"aa\", s3 = \"cc\")",
        "findMinimumOperations(s1 = \"m\", s2 = \"mq\", s3 = \"qz\")",
        "findMinimumOperations(s1=\"aabcc\", s2=\"adcaa\", s3=\"abcbd\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"axyzy\", s3 = \"aazyx\")",
        "findMinimumOperations(s1 = \"rre\", s2 = \"dd\", s3 = \"dd\")",
        "findMinimumOperations(s1 = \"eqwy\", s2 = \"mhx\", s3 = \"je\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"mq\", s2 = \"px\", s3 = \"zy\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"abb\", s3 = \"bab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"xy\", s3 = \"xz\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bdcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"wxy\", s2 = \"xyz\", s3 = \"wxyz\")",
        "findMinimumOperations(s1 = \"abcba\", s2 = \"bccb\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"cabc\", s3 = \"cbac\")",
        "findMinimumOperations(s1 = \"abcdc\", s2 = \"abccd\", s3 = \"abdc\")",
        "findMinimumOperations(s1 = \"me\", s2 = \"mne\", s3 = \"emn\")"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1,2,3])",
        "minimumRightShifts(nums = [0, 1, 2, 3, 4])",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 2, 7])",
        "minimumRightShifts(nums=[3, 1, 2, 4])",
        "minimumRightShifts(nums = [0, 0, 1, 1, 1, 2, 2])",
        "minimumRightShifts(nums = [2, 1, 4, 5, 6, 2, 6])",
        "minimumRightShifts(nums = [4, 4, 5, 6, 0, 6, 0, 7, 7, 8])",
        "minimumRightShifts(nums = [1, 10, 4, 2, 1, 100, 4, 2, 4])"
    ],
    "sample_453": [
        "minChanges(s = \"aba\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"ab\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"mq\")",
        "minChanges(s = \"aaabbbcccd\")",
        "minChanges(s = \"ap\")",
        "minChanges(s = \"aaccb\")",
        "minChanges(s = \"1100\")",
        "minChanges(s = \"abcbdbdb\")"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [10, 9, 2, 5, 3, 7, 101, 18], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 3, 6, 7, 9, 4, 10, 5, 6], target = 8)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 8)",
        "lengthOfLongestSubsequence(nums = [5, 4, 7, 2, 10], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 1, 2], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 4, 5, 3, 2], target = 10)",
        "lengthOfLongestSubsequence(nums = [4, 2, 3], target = 6)",
        "lengthOfLongestSubsequence(nums = [4, 1, 2, 3], target = 5)",
        "lengthOfLongestSubsequence(nums = [5, 6, 7, 9, 10, 11], target = 10)",
        "lengthOfLongestSubsequence(nums = [2,5,3,1,4,3], target = 6)"
    ],
    "sample_367": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"YmpH\")",
        "sortVowers(s = 'YmpH')",
        "sortVowels(s = \"lympH\")",
        "sortVowels(s=\"aeiouAEIOU\")",
        "sortVowers(s = \"aeiou\")",
        "sortVowels(s = 'Hello')",
        "sortVowels(s = \"I love to eat bananas\")",
        "sortVowels(s = \"My Name Is Amy\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [10, 9, 2, 5, 3, 7, 101, 18], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 2, 5], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], target = 1)",
        "lengthOfLongestSubsequence(nums = [3, 5, -4, 8, 11, 1, -1, 6], target = 11)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 4, 2, 2, 5, 6], target = 9)",
        "lengthOfLongestSubsequence(nums = [1,2,3,3,3,3,4,5], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 4, 2, 2, 5, 8, 3, 7], target = 7)",
        "lengthOfLongestSubsequence(nums = [1,4,5,2,7,8,3,10,11,6], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 1, 3, 5, 4], target = 7)"
    ],
    "sample_381": [
        "countPairs(nums = [1,2,3,4], t = 5)",
        "countPairs(nums = [1,2,3,4,5,6], t = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 6)",
        "countPairs(nums = [1,2,3], t = 4)",
        "countPairs(nums = [1,2,3], t = 4)",
        "countPairs(nums=[1,2,3,4,5,6], t=7)",
        "countPairs(nums = [2,3,4,5], t = 6)",
        "countPairs(nums = [1, 5, 2, 3, 1, 6], t = 7)",
        "countPairs(nums=[-5, 1, 3, 4, 2], t=2)",
        "countPairs(nums = [1, 2, 2, 3, 2, 3, 4, 5], t = 4)"
    ],
    "sample_366": [
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 3, 2])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1, 4, 3, 5])",
        "isGood(nums = [3, 2, 6, 4])",
        "isGood(nums = [4, 1, 5])",
        "isGood(nums = [1, 5, 10, 15, 2, 7, 10])"
    ],
    "sample_369": [
        "sortVowels(s = 'YmpH')",
        "sortVowels(s = \"Python\")",
        "sortVowels(s = \"Hello World!\")",
        "sortVowels(s = \"Hello\")",
        "sortVowels(s = 'Lima')",
        "sortVowels(s = 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz')",
        "sortVowels(s = 'Hello World')",
        "sortVowels(s = \"My name is Carlos.\")",
        "sortVowels(s = \"let's sort this out\")",
        "sortVowells(s = \"You're Great!\")"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [1, 4, 5, 3, 2])",
        "minimumRightShifts(nums = [2,3,1])",
        "minimumRightShifts(nums = [5, 3, 5])",
        "minimumRightShifts(nums = [1, 3, 9, 4, 2])",
        "minimumRightShifts(nums = [1,2,3,4,4,5])",
        "minimumRightShifts(nums = [3, 1, 4, 5, 1])",
        "minimumRightShifts(nums = [9, 4, 1, 2, 8, 3, 0, 5, 7])",
        "minimumRightShifts(nums = [5, 2, 2, 7, 8, 4, 1, 4, 3, 1, 2])"
    ],
    "sample_448": [
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"banana\")",
        "minChanges(s = \"banana\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"abbc\")",
        "minChanges(s = \"abbc\")",
        "minChanges(s = \"aabbbc\")",
        "minChanges(s = \"aabcde\")",
        "minChanges(s = \"mpz\")"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"acb\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"123\", s2 = \"456\")",
        "canBeEqual(s1 = \"123456789\", s2 = \"987654321\")",
        "canBeEqual(s1 = \"bba\", s2 = \"baa\")",
        "canBeEqual(s1 = \"zy\", s2 = \"px\")",
        "canBeEqual(s1 = \"aabaa\", s2 = \"baaab\")",
        "canBeEqual(s1 = \"aabb\", s2 = \"baba\")",
        "canBeEqual(s1 = \"qwerty\", s2 = \"typwer\")"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 2])",
        "minLengthAfterRemovals(nums = [2,2,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [2, 1, 3])",
        "minLengthAfterRemovals(nums = [2,3,1,2,1,3,3])",
        "minLengthAfterRemovals(nums = [1,1,3,3,3,2,2,4,4,4])",
        "minLengthAfterRemovals(nums = [1,2,4,3])",
        "minLengthAfterRemovals(nums = [1, 3, 5])"
    ],
    "sample_361": [
        "isGood(a = [1, 2, 3, 1, 2, 3])",
        "isGood(a = [1, 2, 3, 4, 1, 2])",
        "isGood(a = [1, 2, 3, 4, 5, 6, 5])",
        "isGood(a = [1,2,3,4,2])",
        "isGood(a = [1, 3, 4, 1, 5])",
        "isGood(a = [1, 4, 2, 3, 1])",
        "isGood(a = [2, 3, 1, 5, 4, 6])",
        "isGood(a = [1, 2, 3, 1, 1, 2, 1])",
        "isGood(a = [0, 1, 1, 2, 3, 4])",
        "isGood(a = [1, 1, 1, 1, 1, 3, 1])"
    ],
    "sample_419": [
        "minOperations(nums = [1,2,3,4,5,6,7], k = 4)",
        "minOperations(nums = [1, 5, 7, 9], k = 10)",
        "minOperations(nums = [1,2,3,2,1], k = 2)",
        "minOperations(nums = [1,2,4,2,3], k = 5)",
        "minOperations(nums = [5, 2, 4, 6, 3], k = 5)",
        "minOperations(nums = [1, 3, 2, 6], k = 5)",
        "minOperations(nums = [6, 3, 4, 1, 5], k = 4)",
        "minOperations(nums = [2, 3, 5, 6, 7, 8, 10], k = 3)",
        "minOperations(nums = [5, 2, 6, 3, 1, 7], k = 5)",
        "minOperations(nums = [5,6,8,8,7,6,8], k = 10)"
    ],
    "sample_478": [
        "findMaximumLength(nums=[1,2,3])",
        "findMaximumLength(nums = [1,2,3,4])",
        "findMaximumLength(nums=[1, 2, 3, 4])",
        "findMaximumLength(nums = [1, 2, 1, 2, 6, 7, 5, 1])",
        "findMaximumLength(nums= [1, 2, 3, 4, 5, 6])",
        "findMaximumLength(nums = [4,10,4,3,8,9])",
        "findMaximumLength(nums=[100,4,200,1,3,2])",
        "findMaximumLength(nums= [1,3,2])",
        "findMaximumLength(nums=[1,2,1,3,3])",
        "findMaximumLength(nums = [2, 1, 2, 4, 3, 5, 6])"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1, 1, 0, 1])",
        "maxSubarrays(nums = [1,1,0,1])",
        "maxSubarrays(nums = [2, 3, 1, 2, 4, 3])",
        "maxSubarrays(nums = [4, 1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 1, 2, 2])",
        "maxSubarrays(nums = [4,2,3])",
        "maxSubarrays(nums = [2, 3, 1, 2, 4, 3])",
        "maxSubarrays(nums = [0, 2, 1, -3])",
        "maxSubarrays(nums = [1, 3, 1, 4, 2, 3])",
        "maxSubarrays(nums = [3, 3, 1, 2, 1, 1, 3])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"wxyz\")",
        "canMakeSubsequence(str1 = \"zz\", str2 = \"za\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"def\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ad\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"acb\")",
        "canMakeSubsequence(str1 = \"xyz\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"dvdf\", str2 = \"deee\")",
        "canMakeSubsequence(str1 = \"cdef\", str2 = \"aed\")",
        "canMakeSubsequence(str1 = \"bxzxxzz\", str2 = \"zab\")"
    ],
    "sample_402": [
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 4, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [3,2,1,5,4], m = 2, k = 2)",
        "maxSum(nums = [4, 2, 2, 5, 1, 5, 8], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7], m = 3, k = 4)",
        "maxSum(nums = [3,1,4,2,3], m = 2, k = 2)",
        "maxSum(nums = [1, 3, 5, 4, 2], m = 2, k = 2)",
        "maxSum(nums = [1, 3, 2, 4, 2, 5, 6, 5], m = 4, k = 3)"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"abc\", \"def\", \"ghi\"], x = \"abc\")",
        "findWordsContaining(words = [\"one\", \"two\", \"three\"], x = \"four\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"kiwi\"], x = \"a\")",
        "findWordsContaining(words = [\"abc\", \"bcd\", \"xyz\"], x = \"xy\")",
        "findWordsContaining(words = [\"hi\", \"hey\"], x = \"x\")",
        "findWordsContaining(words = [\"a\", \"c\", \"bc\"], x = \"bc\")",
        "findWordsContaining(words = [\"aaa\", \"aba\", \"cba\"], x = \"ba\")",
        "findWordsContaining(words = [\"banana\", \"grapes\", \"vanilla\"], x = \"ana\")",
        "findWordsContaining(words = [\"water\", \"box\", \"bricks\"], x = \"er\")",
        "findWordsContaining(words = [\"ab\", \"ca\", \"cdba\", \"caab\"], x = \"a\")"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"4\", \"prev\", \"5\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"9\", \"5\"])",
        "lastVisitedIntegers(words = [\"5\", \"6\", \"prev\", \"7\", \"0\", \"1\"])",
        "lastVisitedIntegers(words = [\"5\", \"1\", \"7\", \"2\", \"3\", \"4\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"last\", \"first\", \"prev\", \"prev\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"4\", \"prev\", \"8\", \"3\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"10\", \"20\", \"30\", \"40\", \"prev\", \"prev\", \"prev\", \"50\"])",
        "lastVisitedIntegers(words = [\"5\", \"next\", \"prev\", \"3\", \"2\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"3\", \"2\", \"prev\", \"3\", \"5\", \"5\", \"prev\", \"3\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"5\", \"2\", \"1\", \"2\", \"1\", \"2\", \"2\", \"prev\", \"prev\", \"2\", \"1\", \"1\", \"2\", \"2\", \"prev\", \"prev\", \"prev\", \"prev\"])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 3, 2, 3, 2, 4, 2], k = 3)",
        "minOperations(nums = [1, 3, 6, 4, 1, 2], k = 4)",
        "minOperations(nums = [3, 2, 2, 1], k = 2)",
        "minOperations(nums = [5, 2, 3, 4], k = 3)",
        "minOperations(nums = [1,3,7,9,4,2,5], k = 5)",
        "minOperations(nums = [1, 5, 2, 10], k = 3)",
        "minOperations(nums = [1, 2, 5, 2, 4, 3], k = 3)",
        "minOperations(nums = [4, 2, 5, 1, 6], k = 2)",
        "minOperations(nums = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4], k = 4)",
        "minOperations(nums = [4, 3, 4, 2, 4, 4, 4, 1], k = 4)"
    ],
    "sample_418": [
        "minOperations(nums = [3, 1, 2, 2, 3], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 4)",
        "minOperations(nums = [3,1,3,4,2], k = 3)",
        "minOperations(nums = [1,1,4,2,3], k = 1)",
        "minOperations(nums = [1, 3, 5, 7, 9, 11], k = 2)",
        "minOperations(nums = [2,3,5], k = 3)",
        "minOperations(nums = [7,2,4], k = 5)",
        "minOperations(nums = [3, 2, 20, 1, 10], k = 17)",
        "minOperations(nums = [2, 4, 8, 16, 32, 64, 128], k = 128)",
        "minOperations(nums = [1, 4, 16, 32, 64], k = 2)"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1, 2, 3])",
        "minimumSeconds(nums = [1,2])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [0, 0, 0, 0, 0])",
        "minimumSeconds(nums = [3, 2, 2, 4])",
        "minimumSeconds(nums = [1, 2, 3, 3, 2, 1])",
        "minimumSeconds(nums = [0, 1, 1])",
        "minimumSeconds(nums = [2, 5, 1])",
        "minimumSeconds(nums = [1, 1, 3, 3, 1, 1, 1, 1])",
        "minimumSeconds(nums = [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [2, 7, 11, 15], target = 9)",
        "countPairs(nums = [1, 4, 3, 2], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 6], target = 5)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1, 1, 2, 2], target = 3)",
        "countPairs(nums = [4, 1, 2, 2, 1], target = 4)",
        "countPairs(nums = [1, 4, 5, 6, 10], target = 10)",
        "countPairs(nums = [2, 4, 6, 8, 10, 12, 14, 16], target = 24)"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"mary\", \"had\", \"a\", \"little\", \"lamb\"], x = \"lamb\")",
        "findWordsContaining(words = [\"dog\", \"cat\", \"apple\"], x = \"a\")",
        "findWordsContaining(words = [\"abc\", \"xyz\", \"abcd\"], x = \"bc\")",
        "findWordsContaining(words = [\"abc\", \"defg\", \"ab\"], x = \"a\")",
        "findWordsContaining(words = [\"math\", \"maths\", \"maths\", \"math\"], x = \"th\")",
        "findWordsContaining(words = [\"ab\", \"bcd\", \"abcd\"], x = \"bc\")",
        "findWordsContaining(words = [\"dog\", \"cat\", \"python\", \"doggy\"], x = \"o\")",
        "findWordsContaining(words = [\"apple\", \"app\", \"are\", \"apple\"], x = \"e\")",
        "findWordsContaining(words = [\"hello\", \"zebra\", \"goat\"], x = \"e\")",
        "findWordsContaining(words = [\"mad\", \"cat\", \"mad\", \"mad\", \"cat\"], x = \"mad\")"
    ],
    "sample_372": [
        "sortVowels(s = 'Hello')",
        "sortVowell(s = \"hello\")",
        "sortVowels(s = 'leOtCeDe')",
        "sortVowels(s = 'abracadabra')",
        "sortVowels(s = \"Otec de lE\")",
        "sortVowels(s = \"CoDe\")",
        "sortVowels(s = \"LeoTceder\")",
        "sortVowels(s = \"Eat eat eat Eat \")",
        "sortVowels(s = 'I LOVE PYTHON')",
        "sortVowels(s = \"tsetgeilol\")"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [3, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [3,2,2,3])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [2,2,1,2,2,3])",
        "minLengthAfterRemovals(nums = [1,1,1,1])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5])",
        "minLengthAfterRemovals(nums = [1,2,1,1])",
        "minLengthAfterRemovals(nums = [2, 3, 1, 2, 1, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [4,2,4,5,6])"
    ],
    "sample_452": [
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"aaaaa\")",
        "minChanges(s = \"abcba\")",
        "minChanges(s = \"abad\")",
        "minChanges(s = \"cba\")",
        "minChanges(s = \"accb\")",
        "minChanges(s = \"acdc\")",
        "minChanges(s = \"rr\")",
        "minChanges(s = \"babababa\")"
    ],
    "sample_385": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 10)",
        "countPairs(nums = [1,2,3,4,5], target = 4)",
        "countPairs(nums = [1,2,3,4], target = 10)",
        "countPairs(nums = [3,1,2,4], target = 5)",
        "countPairs(nums = [1, 4, 6, 8], target = 10)",
        "countPairs(nums = [1,2,3,4,5,6,7,8,9], target = 15)",
        "countPairs(nums = [1, 5, 10, 15, 20], target = 17)",
        "countPairs(nums = [1, 3, 5, 10, 15, 30], target = 10)",
        "countPairs(nums = [-5, 4, 3, 2, 1, 0], target = 1)",
        "countPairs(nums = [3, 2, 5, 10, 20, 30], target = 15)"
    ],
    "sample_427": [
        "minOperations(nums = [1, 1, 1, 3, 3, 3])",
        "minOperations(nums = [2,3])",
        "minOperations(nums = [4,2,3])",
        "minOperations(nums = [1, 2, 9, 3, 4, 1, 2, 9])",
        "minOperations(nums = [3,2,2,4,2])",
        "minOperations(nums = [2,2,1])",
        "minOperations(nums = [5, 4, 5])",
        "minOperations(nums = [1, 2, 9, 3, 4, 3, 1, 2, 9])",
        "minOperations(nums = [2, 1, 1, 3, 3, 2, 2])",
        "minOperations(nums = [4, 3, 2, 5, 2, 6, 8])"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [0, 0, 0, 0])",
        "minLengthAfterRemovals(nums = [2, 2, 1, 2, 5])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1,3,5])",
        "minLengthAfterRemovals(nums = [1,1,2,2,2])",
        "minLengthAfterRemovals(nums = [3,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3,4,4,5,5])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 3, 2, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1,1,2,3,4,3])",
        "minLengthAfterRemovals(nums = [4,2,2,5,3])"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 3, 2])",
        "minimumCoins(prices = [1, 3, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7])",
        "minimumCoins(prices = [3, 1, 2])",
        "minimumCoins(prices = [1, 2, 3, 1])",
        "minimumCoins(prices = [1, 2, 5, 3, 4])",
        "minimumCoins(prices = [1, 3, 5, 9, 20])",
        "minimumCoins(prices = [1,2,5,10,20,15])",
        "minimumCoins(prices = [1, 10, 5, 100, 20, 50, 100])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"carrot\"], x = \"an\")",
        "findWordsContaining(words = [\"Welcome\", \"to\", \"Codewars\"], x = \"e\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"example\", \"test\"], x = \"o\")",
        "findWordsContaining(words = [\"dog\", \"cat\", \"chicken\", \"rat\", \"chair\"], x = \"ch\")",
        "findWordsContaining(words = [\"goat\", \"camel\", \"pig\"], x = \"am\")",
        "findWordsContaining(words = [\"Hello\", \"i\", \"am\", \"Goodbye\"], x = \"o\")",
        "findWordsContaining(words=[\"monkey\", \"demon\", \"monster\", \"flower\"], x = \"mon\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"i\", \"cow\", \"kung\"], x = \"c\")",
        "findWordsContaining(words = [\"hello\", \"horse\", \"first\", \"fellow\"], x = \"llo\")"
    ],
    "sample_420": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1, 2, 2, 2, 2], k = 2)",
        "minOperations(nums = [1, 3, 5, 7, 9], k = 1)",
        "minOperations(nums = [10, 5, 2, 6], k = 10)",
        "minOperations(nums = [3, 1, 5, 4], k = 3)",
        "minOperations(nums = [4, 3, 4], k = 10)",
        "minOperations(nums = [2,2,2,2,2,2], k = 2)",
        "minOperations(nums = [2, 1, 2, 2, 1, 2, 2], k = 2)",
        "minOperations(nums = [4, 2, 3, 10, 1], k = 5)",
        "minOperations(nums = [3, 2, 20, 1, 2, 10], k = 17)"
    ],
    "sample_362": [
        "isGood(nums = [1, 3, 2])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1,2,3])",
        "isGood(nums = [1, 4, 2, 3])",
        "isGood(nums = [1, 5, 3, 2])",
        "isGood(nums = [1, 2, 3, 4, 1])",
        "isGood(nums = [5, 6, 1])",
        "isGood(nums = [1, 4, 2, 1, 3])",
        "isGood(nums = [1, 4, 10])",
        "isGood(nums = [2, 3, 1, 2, 3])"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [10, 9, 2, 5, 3, 7, 101, 18], target = 9)",
        "lengthOfLongestSubsequence(nums = [10, 9, 2, 5, 3, 7, 101, 18], target = 9)",
        "lengthOfLongestSubsequence(nums = [10, 9, 2, 5, 3, 7, 101, 18], target = 9)",
        "lengthOfLongestSubsequence(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 2, 2, 3], target = 1)",
        "lengthOfLongestSubsequence(nums = [5, 2, 6, 3], target = 9)",
        "lengthOfLongestSubsequence(nums = [4, 3, 5, 6, 7], target = 9)",
        "lengthOfLongestSubsequence(nums = [4, 2, 5, 3, 10], target = 10)",
        "lengthOfLongestSubsequence(nums = [3, 6, 7, 8, 8, 10, 12], target = 10)"
    ],
    "sample_365": [
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [3,1,2])",
        "isGood(nums = [3, 2, 1])",
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1, 4, 3, 2])",
        "isGood(nums = [4, 3, 2])",
        "isGood(nums = [1, 2, 3, 4, 4, 4])",
        "isGood(nums = [1,2,3,5,1])"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [2, 3, 1, 2, 4, 3])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1, 1, 1, 1, 0, 1, 1])",
        "maxSubarrays(nums = [3, 1, 4, 1, 5, 9])",
        "maxSubarrays(nums = [2, 1, 2, 4, 3])",
        "maxSubarrays(nums = [1, 1, 1, 1, 0, 0])",
        "maxSubarrays(nums = [3,1,2,1,1,1])",
        "maxSubarrays(nums = [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [10,9,2,5,3,7,101,18], target = 9)",
        "lengthOfLongestSubsequence(nums = [1,3,6,7], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 1)",
        "lengthOfLongestSubsequence(nums = [0,2,3,4], target = 5)",
        "lengthOfLongestSubsequence(nums = [3,5,6,7,8,9], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,1,2,3,5], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 4, 4, 5, 6, 7], target = 8)",
        "lengthOfLongestSubsequence(nums = [1, 0, 1, 1, 1, 0, 1, 1, 1], target = 2)",
        "lengthOfLongestSubsequence(nums = [1, 3, 6, 10, 15, 40, 50], target = 42)",
        "lengthOfLongestSubsequence(nums = [1,4,4,4,1,2,3,1,2,1,4,2,1], target = 6)"
    ],
    "sample_450": [
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aaab\")",
        "minChanges(s = \"ba\")",
        "minChanges(s = \"abababab\")",
        "minChanges(s = \"aabaab\")",
        "minChanges(s = \"pqr\")",
        "minChanges(s = \"abcab\")",
        "minChanges(s = \"qwer\")",
        "minChanges(s = \"zzzzzzzzzzz\")",
        "minChanges(s=\"aacdbbc\")"
    ],
    "sample_463": [
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 9, limit = 4)",
        "distributeCandies(n = 10, limit = 10)",
        "distributeCandies(n=4, limit=2)",
        "distributeCandies(n = 3, limit = 4)",
        "distributeCandies(n = 11, limit = 10)"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6])",
        "sumCounts(nums = [2, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 3, 3])",
        "sumCounts(nums = [1, 2, 3, 4, 4, 5])",
        "sumCounts(nums = [2, 2, 2])",
        "sumCounts(nums = [2, 2, 1, 1, 1, 2, 2])",
        "sumCounts(nums = [2,2,2,2,2,2,2])",
        "sumCounts(nums = [1, 1, 1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 2, 3, 3, 4, 5, 5, 6, 7])"
    ],
    "sample_449": [
        "minChanges(s = \"ba\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"a\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"pqr\")",
        "minChanges(s = \"abcdef\")",
        "minChanges(s = \"abac\")",
        "minChanges(s=\"baa\")",
        "minChanges(s = \"dxyb\")"
    ],
    "sample_425": [
        "minOperations(nums = [1, 1, 2, 2, 3])",
        "minOperations(nums = [3, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 2, 2])",
        "minOperations(nums = [2, 2, 1, 2, 1, 2])",
        "minOperations(nums = [1, 1, 1, 3, 3, 3, 7])",
        "minOperations(nums = [3, 1, 1, 1, 2, 1, 1, 1])",
        "minOperations(nums = [3, 1, 3, 3, 2, 2])",
        "minOperations(nums = [3, 3, 3, 4, 4, 4, 4, 4, 4, 4])",
        "minOperations(nums = [6, 3, 3, 2, 3, 6, 6])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"az\", str2 = \"zaz\")",
        "canMakeSubsequence(str1 = \"a\", str2 = \"z\")",
        "canMakeSubsequence(str1 = \"zon\", str2 = \"zoo\")",
        "canMakeSubsequence(str1 = \"aaaaa\", str2 = \"z\")",
        "canMakeSubsequence(str1 = \"zzyx\", str2 = \"za\")",
        "canMakeSubsequence(str1 = \"xyzxyz\", str2 = \"zx\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"zaaab\")",
        "canMakeSubsequence(str1 = \"aza\", str2 = \"bcdefg\")",
        "canMakeSubsequence(str1 = \"deee\", str2 = \"daac\")",
        "canMakeSubsequence(str1 = \"mngahx\", str2 = \"zeus\")"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1, 2, 3])",
        "minimumSeconds(nums = [30,29,59,58])",
        "minimumSeconds(nums=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])",
        "minimumSeconds(nums = [1,2,3,3,3])",
        "minimumSeconds(nums=[30, 15, 60, 75, 45, 15])",
        "minimumSeconds(nums=[0,1,2,4])",
        "minimumSeconds(nums = [0,1,0])",
        "minimumSeconds(nums=[1,2,3,4,6,7,9])",
        "minimumSeconds(nums = [2, 1, 5, 2, 1, 3])",
        "minimumSeconds(nums=[9,15,1,20,21,2])"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [10,9,2,5,3,7,101,18], target = 9)",
        "lengthOfLongestSubsequence(nums = [10,9,2,5,3,7,101,18], target = 9)",
        "lengthOfLongestSubsequence(nums = [10,9,2,5,3,7,101,18], target = 9)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 7)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 9)",
        "lengthOfLongestSubsequence(nums=[1,3,6,7,9,4,10,5,6], target=8)",
        "lengthOfLongestSubsequence(nums=[1,2,2,3,4], target=4)",
        "lengthOfLongestSubsequence(nums = [2,4,4,3,2,1,6,6], target = 6)",
        "lengthOfLongestSubsequence(nums = [0,1,1,2,2,2,2,3,3,3,4,4,4,4,5,6,7,8,9], target = 5)"
    ],
    "sample_370": [
        "sortVowels(s = \"lEOtcede\")",
        "sortVowels(s = \"The quick brown fox jumps over the lazy dog\")",
        "sortVowels(s = \"stressed\")",
        "sortVowels(s = \"zoo\")",
        "sortVowels(s = \"cat\")",
        "sortVowels(s = \"LoveYou\")",
        "sortVowels(s = \"apples\")",
        "sortVowels(s = 'oxooox')",
        "sortVowels(s = \"qwertyuioaswdghjk\")",
        "sortVowels(s = \"lOOkeedoooo\")"
    ],
    "sample_421": [
        "minOperations(nums = [1, 1, 4, 2, 3], k = 5)",
        "minOperations(nums = [3, 1, 2, 2, 3], k = 3)",
        "minOperations(nums = [3, 2, 2, 4], k = 3)",
        "minOperations(nums = [3, 1, 4, 2], k = 1)",
        "minOperations(nums = [1, 2, 2, 2, 3], k = 3)",
        "minOperations(nums = [2, 3, 7, 5], k = 3)",
        "minOperations(nums = [7, 3, 4], k = 2)",
        "minOperations(nums = [2, 3, 5, 2, 6], k = 2)",
        "minOperations(nums = [5, 1, 1, 2, 0, 1], k = 3)",
        "minOperations(nums = [1, 5, 2, 3, 6, 10, 7], k = 1)"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1, 1, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 1, 2, 2, 2, 2])",
        "maxSubarrays(nums = [1,1,1,0,1])",
        "maxSubarrays(nums = [1,1,1,1,1,1,1,0])",
        "maxSubarrays(nums = [0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0])",
        "maxSubarrays(nums = [4,1,0,1,0,1,9,12,4,1,1,1,1,1,1,1,1,1,1,1])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [7, 8]], k = 3)",
        "countPairs(coordinates = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]], k = 2)",
        "countPairs(coordinates = [[1, 2], [2, 3], [3, 1]], k = 2)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1], [2, 0], [2, 1]], k = 1)",
        "countPairs(coordinates = [[1, 1], [1, 3], [3, 4], [2, 2]], k = 2)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9]], k = 3)",
        "countPairs(coordinates = [[2, 2], [2, 3], [3, 4], [5, 5]], k = 3)",
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [2, 3], [4, 5], [6, 7]], k = 2)",
        "countPairs(coordinates = [[0, 1], [2, 0], [1, 2], [2, 1], [1, 1]], k = 2)",
        "countPairs(coordinates = [[1, 2], [1, 5], [2, 5], [4, 1]], k = 3)"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [10, 9, 2, 5, 3, 7, 101, 18], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [4, 10, 4, 3, 8, 9], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 1)",
        "lengthOfLongestSubsequence(nums = [1,1,1,2,2,3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 4, 5, 2, 10], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 4, 2, 10, 2, 3, 1, 0, 2, 5], target = 3)",
        "lengthOfLongestSubsequence(nums = [1,2,3,7,2,5,1], target = 8)",
        "lengthOfLongestSubsequence(nums = [2, 5, 4, 7], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 4, 4, 6, 1, 4, 4], target = 4)"
    ],
    "sample_445": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums=[1,2,3,4])",
        "sumCounts(nums=[1,2,3,4,5,6])",
        "sumCounts(nums=[1,2,2,3])",
        "sumCounts(nums = [1, 3, 2])",
        "sumCounts(nums = [2,1,3])",
        "sumCounts(nums= [1, 1, 2])",
        "sumCounts(nums = [3, 1, 1, 1])",
        "sumCounts(nums = [1,2,3,4,4,4,5,5,5,6,6,6,6,6,6])",
        "sumCounts(nums=[1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2,"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"abaac\")",
        "tmp = set()\nfor i in range(30):\n    x = bin(pow(5, i))[2:]\n    if len(x) > 15: break\n    tmp.add(x)\n\ndef minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n    @cache\n    def getRes(idx):\n        if idx",
        "minimumBeautifulSubstrings(s = \"1010101010\")",
        "tmp = set()\nfor i in range(30):\n    x = bin(pow(5, i))[2:]\n    if len(x) > 15: break\n    tmp.add(x)\n\ndef minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n    @cache\n    def getRes(idx):\n        if idx",
        "minimumBeautifulSubstrings(s = \"abbaaaba\")",
        "minimumBeautifulSubstrings(s = \"355375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375375",
        "minimumBeautifulSubstrings(s = \"012233555779999\")",
        "tmp = set()\nfor i in range(30):\n    x = bin(pow(5, i))[2:]\n    if len(x) > 15: break\n    tmp.add(x)\n\ndef minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n    @cache\n    def getRes(idx):\n        if idx",
        "minimumBeautifulSubstrings(s = \"bcbbbcbcbcbbcbcbcbcbcbbcb\")",
        "tmp = set()\nfor i in range(30):\n    x = bin(pow(5, i))[2:]\n    if len(x) > 15: break\n    tmp.add(x)\n\ndef minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n    @cache\n    def getRes(idx):\n        if idx"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 1, 0, 1])",
        "maxSubarrays(nums = [1,1,0,1])",
        "maxSubarrays(nums = [1,1,0,1])",
        "maxSubarrays(nums = [1, 1, 0])",
        "maxSubarrays(nums = [1, 1, 1])",
        "maxSubarrays(nums = [1, 1, 1, 0, 1])",
        "maxSubarrays(nums = [0,1,0,1,1])",
        "maxSubarrays(nums = [0, 0, 0, 0, 1, 1, 1])"
    ],
    "sample_401": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(nums = [1, -1], m = 1, k = 1)",
        "maxSum(nums = [1, 3, 5], m = 1, k = 1)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7], m = 3, k = 2)",
        "maxSum(nums = [4,2,2,5,1,5,8], m = 3, k = 3)",
        "maxSum(nums= [3,2,6,5,4,5], m= 2, k= 3)",
        "maxSum(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], m = 6, k = 4)",
        "maxSum(nums = [1, 3, 5, 7, 9, 10, 12, 17, 20], m = 3, k = 3)",
        "maxSum(nums = [2, 5, -4, -3, 1], m = 3, k = 2)",
        "maxSum(nums = [3, 5, -3, 2, 10, 6], m = 3, k = 3)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(A = [2, 3, 1, 5, 4], m = 2, k = 2)",
        "maxSum(A = [0, 0, 0, 0, 0], m = 3, k = 2)",
        "maxSum(A = [1, 1, 3], m = 3, k = 2)",
        "maxSum(A = [3, 2, 6, 2, 5, 4, 2], m = 4, k = 3)",
        "maxSum(A = [10, 1, 2, 3, 4, 5, 6], m = 2, k = 3)",
        "maxSum(A = [1, 2, 4, 1, 3], m = 3, k = 2)",
        "maxSum(A = [2, 6, 9, 1, 3, 4, 5, 3], m = 3, k = 3)",
        "maxSum(A = [2, 3, 5, 4, 2, 4, 5, 2, 3, 4], m = 4, k = 2)"
    ],
    "sample_363": [
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 1, 2, 3])",
        "isGood(nums = [1,2,3,4,1])",
        "isGood(nums = [1, 2, 3, 1, 3])",
        "isGood(nums = [1, 1, 3, 3, 5])",
        "isGood(nums = [1, 1, 2, 3, 4, 5, 5])",
        "isGood(nums = [1,2,2,4,5])",
        "isGood(nums = [2,4,4,1,4])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1, 2, 3])",
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [60, 60, 60])",
        "minimumSeconds(nums = [0, 1, 2, 4, 5, 10])",
        "minimumSeconds(nums = [30, 15, 60, 75, 45, 15, 100, 5, 10])",
        "minimumSeconds(nums=[2, 1, 3, 0])",
        "minimumSeconds(nums = [30, 21, 15])",
        "minimumSeconds(nums = [5, 2, 3, 1, 2])",
        "minimumSeconds(nums = [4,2,5,3,7,1,9])",
        "minimumSeconds(nums = [2, 3, 1, 3, 0, 2, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_376": [
        "minimumSeconds(nums = [1,2,3])",
        "minimumSeconds(nums = [2, 3, 2])",
        "minimumSeconds(nums = [2])",
        "minimumSeconds(nums = [1, 2, 2])",
        "minimumSeconds(nums = [3,2,1,0])",
        "minimumSeconds(nums = [2,3,4])",
        "minimumSeconds(nums = [1, 1])",
        "minimumSeconds(nums = [1,1,1,1])",
        "minimumSeconds(nums = [0,10])",
        "minimumSeconds(nums = [2,1,4,6,3])"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1,2,3])",
        "minLengthAfterRemovals(nums = [1,1,3])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minLengthAfterRemovals(nums = [2,3,4])",
        "minLengthAfterRemovals(nums = [1, 3, 1, 2, 1, 4])",
        "minLengthAfterRemovals(nums = [3,3,3,3,5,5,5,5,9,9,9,9])",
        "minLengthAfterRemovals(nums = [1,3,3,3,5,5,5,2,2,2])",
        "minLengthAfterRemovals(nums = [3,4,2,2,3,3,2])",
        "minLengthAfterRemovals(nums=[3,3,2])",
        "minLengthAfterRemovals(nums = [4,5,2,2])"
    ],
    "sample_399": [
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 2)",
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 2)",
        "maxSum(nums = [1,2,3], m = 2, k = 1)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "maxSum(nums = [1,1,2,2,3], m = 2, k = 1)",
        "maxSum(nums = [1,1,1,1,1,1,1,1,1], m = 1, k = 1)",
        "maxSum(nums = [1,1,3], m = 1, k = 1)",
        "maxSum(nums = [2,1,5,2,6,4,1], m = 2, k = 3)",
        "maxSum(nums = [2,1,4,3], m = 3, k = 2)",
        "maxSum(nums = [2,4,1,2,7,1,4,4], m = 3, k = 3)"
    ],
    "sample_397": [
        "maxSum(nums = [1,2,3,4], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 2)",
        "maxSum(nums = [1, 1, 1], m = 3, k = 1)",
        "maxSum(nums = [1, 1, 1, 1, 1], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4], m = 1, k = 4)",
        "maxSum(nums = [1, 4, 2, 10, 2, 3, 1, 0, 20], m = 3, k = 4)",
        "maxSum(nums = [1,2,3,4], m = 3, k = 4)",
        "maxSum(nums = [3,3,6,5], m = 2, k = 3)",
        "maxSum(nums = [2,2,1,2,2,2], m = 2, k = 2)"
    ],
    "sample_364": [
        "isGood(nums = [1,2,3,4])",
        "isGood(nums = [1,2,3])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1,2,3,4,5,6])",
        "isGood(nums = [4,3,2,1])",
        "isGood(nums = [2, 6, 4, 3])",
        "isGood(nums = [5, 4, 2, 7])",
        "isGood(nums = [4,2,6,8])",
        "isGood(nums=[5,2,4,3])",
        "isGood(nums = [5, 6, 8])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1,1,1,1])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [0, 0])",
        "minLengthAfterRemovals(nums = [2, 2, 1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2])",
        "minLengthAfterRemovals(nums = [0, 1, 1, 0, 1, 0])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 4, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 3, 3, 0, 2])",
        "minLengthAfterRemovals(nums = [1,1,3,3,4,5,6])",
        "minLengthAfterRemovals(nums = [0,1,0,3,0,2,4])"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"dog\", \"cat\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cat\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"hi\", \"hey\"], x = \"ll\")",
        "findWordsContaining(words = [\"cat\", \"abc\", \"tac\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"potato\", \"dog\"], x = \"na\")",
        "findWordsContaining(words = [\"cake\", \"cake\", \"eat\", \"cake\"], x = \"cake\")",
        "findWordsContaining(words = [\"you\", \"monkey\", \"are\"], x = \"you\")",
        "findWordsContaining(words = [\"cream\", \"banana\", \"burger\"], x = \"an\")",
        "findWordsContaining(words = [\"abc\", \"xyz\", \"abxy\", \"bxyx\"], x = \"b\")",
        "findWordsContaining(words = [\"potatoes\", \"diapers\", \"sunflowers\"], x = \"potatoes\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 3, 5, 7])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 3, 4, 2, 5])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7])",
        "minimumCoins(prices = [1, 3, 4, 5, 2])",
        "minimumCoins(prices = [2, 1, 5, 7, 3])",
        "minimumCoins(prices = [2, 5, 1, 4])",
        "minimumCoins(prices = [1, 3, 1, 3, 1])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"11111\")",
        "minimumBeautifulSubstrings(s = \"aab\")",
        "minimumBeautifulSubstrings(s = \"abacad\")",
        "minimumBeautifulSubstrings(s = \"ababab\")",
        "minimumBeautifulSubstrings(s = \"101010\")",
        "minimumBeautifulSubstrings(s = \"abccde\")",
        "minimumBeautifulSubstrings(s = \"101000101001\")",
        "minimumBeautifulSubstrings(s = \"134457\")",
        "minimumBeautifulSubstrings(s = \"552124\")",
        "minimumBeautifulSubstrings(s = \"bbaaaaabbaaaababbaaaabb\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"aba\", s2 = \"baa\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"bcdea\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcde\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"bacde\")",
        "canBeEqual(s1 = \"hi\", s2 = \"haha\")",
        "canBeEqual(s1 = \"3434\", s2 = \"4343\")"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"za\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"za\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"a\", str2 = \"zz\")",
        "canMakeSubsequence(str1 = \"zab\", str2 = \"zza\")",
        "canMakeSubsequence(str1 = \"xyz\", str2 = \"xyzabcd\")",
        "canMakeSubsequence(str1 = \"abz\", str2 = \"abcdef\")",
        "canMakeSubsequence(str1 = \"cdz\", str2 = \"acd\")",
        "canMakeSubsequence(str1 = \"bxz\", str2 = \"xxz\")"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [3, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 3])",
        "minLengthAfterRemovals(nums = [3,3,3,3,5,5,5,2,2,7])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5])",
        "minLengthAfterRemovals(nums = [1,1,1,2,2,3])",
        "minLengthAfterRemovals(nums = [1,1,1,1,2,2,3])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1,2,2,2,2])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"xy\", s2 = \"yx\")",
        "canBeEqual(s1 = \"cat\", s2 = \"tac\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"ebcda\")",
        "canBeEqual(s1 = \"foo\", s2 = \"oof\")",
        "canBeEqual(s1 = \"red\", s2 = \"red\")",
        "canBeEqual(s1 = \"banana\", s2 = \"bananam\")",
        "canBeEqual(s1 = \"xxviii\", s2 = \"xxix\")"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3], target = 4)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 9)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 8)",
        "countPairs(nums = [1, 2, 3, 5, 6, 7], target = 10)",
        "countPairs(nums = [2, 3, 5, 7], target = 10)",
        "countPairs(nums = [1, 4, 5], target = 7)",
        "countPairs(nums = [3, 1, 2, 4, 1, 0, 1], target = 4)",
        "countPairs(nums = [1, 5, 10, 15, 20, 25, 30], target = 17)",
        "countPairs(nums = [2, 1, 5, 7, 4, 3], target = 8)",
        "countPairs(nums = [3, 1, 2, 4, 2, 6, 1, 4], target = 4)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1=\"az\", s2=\"za\")",
        "canMakeSubsequence(s1 = \"az\", s2 = \"baa\")",
        "canMakeSubsequence(s1 = \"az\", s2 = \"baaaz\")",
        "canMakeSubsequence(s1 = \"abcde\", s2 = \"ace\")",
        "canMakeSubsequence(s1 = \"rabbbit\", s2 = \"rabbit\")",
        "canMakeSubsequence(s1 = \"zzz\", s2 = \"azaza\")",
        "canMakeSubsequence(s1 = \"caba\", s2 = \"adz\")",
        "canMakeSubsequence(s1=\"azbc\",s2=\"zyxw\")",
        "canMakeSubsequence(s1 = \"zzyyzaaa\", s2 = \"ab\")",
        "canMakeSubsequence(s1 = \"zzbaaaa\", s2 = \"zzcaabba\")"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"5\", \"4\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"1\", \"prev\", \"3\", \"4\", \"5\", \"prev\"])",
        "lastVisitedIntegers(words = [\"5\", \"2\", \"prev\", \"4\", \"5\", \"prev\", \"4\"])",
        "lastVisitedIntegers(words = [\"5\", \"4\", \"prev\", \"4\"])",
        "lastVisitedIntegers(words = [\"5\", \"5\", \"prev\", \"5\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"next\", \"prev\", \"5\", \"next\"])",
        "lastVisitedIntegers(words = [\"5\", \"next\", \"3\", \"prev\", \"5\", \"next\"])",
        "lastVisitedIntegers(words = [\"5\", \"4\", \"prev\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"3\", \"1\", \"5\", \"2\", \"prev\", \"5\", \"prev\"])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], k = 1)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], k = 1)",
        "countPairs(coordinates = [[1, 1], [1, 2], [2, 2], [2, 1]], k = 2)",
        "countPairs(coordinates = [[1, 1], [2, 2], [1, 2]], k = 1)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3], [4, 4], [3, 4]], k = 2)",
        "countPairs(coordinates = [[1, 0], [2, 1], [2, 2], [1, 1]], k = 3)",
        "countPairs(coordinates = [[1, 1], [3, 1], [5, 1], [3, 3], [1, 3], [5, 3], [3, 5], [1, 5], [5, 5]], k = 3)",
        "countPairs(coordinates = [[1, 2], [2, 1], [1, 1], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7]], k = 5)",
        "countPairs(coordinates = [[3, 1], [2, 1], [4, 0], [4, 1], [3, 0], [2, 0]], k = 3)",
        "countPairs(coordinates = [[2, 3], [3, 2], [1, 1], [4, 5], [5, 6], [7, 5]], k = 2)"
    ],
    "sample_451": [
        "minChanges(s = \"banana\")",
        "minChanges(s = \"banana\")",
        "minChanges(s = \"zzz\")",
        "minChanges(s = \"zzz\")",
        "minChanges(s = \"abbb\")",
        "minChanges(s = \"mp\")",
        "minChanges(s = \"ababc\")",
        "minChanges(s = \"abbbba\")",
        "minChanges(s = \"rac\")",
        "minChanges(s = \"gglgvvr\")"
    ],
    "sample_461": [
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 10)",
        "distributeCandies(n = 7, limit = 2)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"ebcda\")",
        "canBeEqual(s1 = \"ab\", s2 = \"bab\")",
        "canBeEqual(s1 = \"s1\", s2 = \"s2\")",
        "canBeEqual(s1 = \"aaab\", s2 = \"abaa\")",
        "canBeEqual(s1 = \"111\", s2 = \"1111\")",
        "canBeEqual(s1 = \"hello\", s2 = \"ehlo\")",
        "canBeEqual(s1 = \"s1\", s2 = \"1234\")"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 4, limit = 10)",
        "distributeCandies(n = 1, limit = 3)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 12, limit = 5)",
        "distributeCandies(n = 12, limit = 10)",
        "distributeCandies(n=3, limit=5)"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 100)",
        "accountBalanceAfterPurchase(p = 10)",
        "accountBalanceAfterPurchase(p = 20)",
        "accountBalanceAfterPurchase(p = 1000)",
        "accountBalanceAfterPurchase(p = 55)",
        "accountBalanceAfterPurchase(p = 49)",
        "accountBalanceAfterPurchase(p = 19)",
        "accountBalanceAfterPurchase(p = 10000)",
        "accountBalanceAfterPurchase(p = 88)",
        "accountBalanceAfterPurchase(p = 83)"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [2,2,1,1])",
        "sumCounts(nums = [0, 1, 1, 2, 3, 3])",
        "sumCounts(nums = [1, 2, 3, 2, 3, 2, 1])",
        "sumCounts(nums = [1, 1, 2, 2, 2, 3, 4, 4, 5, 6])",
        "sumCounts(nums = [1, 1, 2, 3, 3, 3, 3, 4, 5, 6, 6, 6])",
        "sumCounts(nums = [1, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8])",
        "sumCounts(nums = [1, 3, 2, 4, 3, 2, 3, 5, 2, 4, 4, 2])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds(A = [1,2,3,4,5,6,7])",
        "minimumSeconds(A = [1, 1, 4, 2, 1, 3])",
        "minimumSeconds(A = [30, 15, 60, 75, 45, 15])",
        "minimumSeconds(A = [2,1,0])",
        "minimumSeconds(A = [1, 1, 2, 2, 3, 3])",
        "minimumSeconds(A = [4,1,2,3])",
        "minimumSeconds(A = [1, 5, 2])",
        "minimumSeconds(A = [2, 3, 3, 4, 5, 2, 6, 6, 6, 7, 8, 9, 10])"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"z\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"ac\")",
        "canMakeSubsequence(str1 = \"aabb\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abcz\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"hello\", str2 = \"ll\")",
        "canMakeSubsequence(str1 = \"leetcode\", str2 = \"ooleeetcode\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"aeiou\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"dzz\")",
        "canMakeSubsequence(str1 = \"csie\", str2 = \"ppz\")"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [5, 4, 3, 2, 1])",
        "minimumRightShifts(nums = [2, 0, 1])",
        "minimumRightShifts(nums = [1, 1, 0, 1])",
        "minimumRightShifts(nums = [1,3,5,4,2])",
        "minimumRightShifts(nums = [3,1,2,4,0])",
        "minimumRightShifts(nums = [2, 1, 1, 3])",
        "minimumRightShifts(nums = [2, 4, 5, 1, 2, 4])"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1,1,1], l = 0, r = 2)",
        "countSubMultisets(nums = [2,2], l = 0, r = 1)",
        "countSubMultisets(nums = [2,2], l = 0, r = 1)",
        "countSubMultisets(nums = [1, 1, 2], l = 0, r = 2)",
        "countSubMultisets(nums = [1,1,1], l = 0, r = 0)",
        "countSubMultisets(nums = [2,2,2,3,3], l = 0, r = 2)",
        "countSubMultisets(nums = [4, 2, 3, 6], l = 0, r = 5)",
        "countSubMultisets(nums = [2, 5, 3, 1], l = 2, r = 2)",
        "countSubMultisets(nums = [4, 4, 1, 1, 2], l = 0, r = 2)",
        "countSubMultisets(nums = [4, 6, 4, 4], l = 0, r = 1)"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 3, 2, 5])",
        "minimumCoins(prices = [1, 5, 8, 9, 10, 17, 17, 20, 24, 30])",
        "minimumCoins(prices = [1, 3, 2, 4])",
        "minimumCoins(prices = [1, 3, 4, 2, 5])",
        "minimumCoins(prices = [1, 3, 4])",
        "minimumCoins(prices = [1, 3, 4, 5, 7])",
        "minimumCoins(prices = [2, 4, 6, 8])",
        "minimumCoins(prices = [1, 3, 7, 10, 16])",
        "minimumCoins(prices = [0, 1, 2, 3, 4, 6])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 3, 4])",
        "minimumCoins(prices = [1, 3, 2])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 3, 5, 8])",
        "minimumCoins(prices = [1, 3, 5])",
        "minimumCoins(prices = [1, 2, 3, 1])",
        "minimumCoins(prices = [3, 1, 5, 8])",
        "minimumCoins(prices = [1, 1, 1, 1, 1, 1, 1, 1])",
        "minimumCoins(prices = [1, 3, 6, 7, 9])",
        "minimumCoins(prices = [4, 5, 6, 7])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"next\", \"2\", \"prev\", \"1\", \"next\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"5\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"9\", \"2\", \"3\", \"4\"])",
        "lastVisitedIntegers(words = [\"2\", \"1\", \"prev\", \"3\", \"1\", \"4\", \"prev\"])",
        "lastVisitedIntegers(words=[\"prev\", \"1\", \"next\", \"2\", \"prev\", \"3\", \"next\", \"4\"])",
        "lastVisitedIntegers(words = [\"3\", \"2\", \"1\", \"4\", \"5\", \"6\", \"prev\", \"7\", \"0\"])",
        "lastVisitedIntegers(words = [\"5\", \"1\", \"2\", \"1\", \"5\", \"prev\"])",
        "lastVisitedIntegers(words = [\"5\", \"2\", \"prev\", \"5\", \"6\", \"prev\", \"8\", \"9\"])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 1, 4, 2, 3])",
        "minOperations(nums = [1, 1, 2, 2, 3])",
        "minOperations(nums = [3, 2, 3])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minOperations(nums = [2, 2, 2, 2, 3])",
        "minOperations(nums = [1, 3, 3, 3, 2])",
        "minOperations(nums = [3, 1, 2, 2, 1, 2, 2])",
        "minOperations(nums = [2, 2, 3, 4, 2, 3])",
        "minOperations(nums = [1,1,1,1,1])",
        "minOperations(nums=[2, 2, 3, 3, 3])"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"p1\", \"p2\", \"p3\", \"p4\", \"p5\"])",
        "lastVisitedIntegers(words = [\"p1\", \"v1\", \"p2\", \"v2\"])",
        "lastVisitedIntegers(words = [\"p1\", \"p2\", \"p3\", \"n3\", \"n2\", \"n1\"])",
        "lastVisitedIntegers(words = [\"pp\", \"oo\", \"o\", \"zp\"])",
        "lastVisitedIntegers(words = [\"p2\", \"p3\", \"9\", \"p4\", \"p5\", \"8\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"p\", \"3\", \"p\"])",
        "lastVisitedIntegers(words = [\"p3\", \"10\", \"p2\", \"3\", \"p1\"])",
        "lastVisitedIntegers(words = [\"pq\", \"py\", \"pqr\", \"pqrs\", \"pyp\"])",
        "lastVisitedIntegers(words = [\"pe\",\"py\",\"pants\",\"g\",\"pants\"])",
        "lastVisitedIntegers(words = [\"yzd\", \"lal\", \"zpj\", \"hks\"])"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1,2,3])",
        "minimumSeconds(nums = [30, 15, 60])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9])",
        "minimumSeconds(nums = [1, 2, 9, 3, 8])",
        "minimumSeconds(nums = [30, 15, 60, 75, 45, 15, 15, 45, 15, 60])",
        "minimumSeconds(nums = [4,3,5,2,1])",
        "minimumSeconds(nums = [5,2,4,2,5,1])",
        "minimumSeconds(nums = [4,4,4,1,1,1,1,1])",
        "minimumSeconds(nums = [4,2,5,2,6,2,7])"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"], x = \"the\")",
        "findWordsContaining(words = [\"one\", \"two\", \"three\", \"four\", \"five\"], x = \"e\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"berry\"], x = \"e\")",
        "findWordsContaining(words = [\"ab\", \"aba\", \"abba\"], x = \"ab\")",
        "findWordsContaining(words = [\"world\", \"hello\", \"there\"], x = \"hello\")",
        "findWordsContaining(words = [\"i\", \"like\", \"pizza\", \"and\", \"cats\"], x = \"pi\")",
        "findWordsContaining(words = [\"book\", \"car\", \"house\"], x = \"b\")",
        "findWordsContaining(words = [\"zebra\", \"dog\", \"cat\", \"zebra\", \"zebra\", \"fox\", \"dog\"], x = \"zebra\")",
        "findWordsContaining(words = [\"banana\", \"coney\", \"banan\"], x = \"an\")"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 1, 0])",
        "maxSubarrays(nums = [1, 1, 0])",
        "maxSubarrays(nums = [1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1, 1, 1, 0])",
        "maxSubarrays(nums = [1, 1, 1, 0])",
        "maxSubarrays(nums = [1, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 0, 1, 1, 1, 1])",
        "maxSubarrays(nums=[1, 1, 1, 0, 1, 1, 1, 1])"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"2\", \"1\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"9\", \"prev\", \"5\"])",
        "lastVisitedIntegers(words = [\"5\", \"2\", \"prev\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"1\", \"prev\", \"5\", \"6\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"2\", \"next\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"4\", \"1\", \"7\", \"2\", \"prev\", \"5\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"5\", \"3\", \"4\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"3\", \"prev\", \"5\", \"6\", \"prev\", \"8\", \"9\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"next\", \"2\", \"1\", \"prev\", \"5\"])",
        "lastVisitedIntegers(words = [\"5\", \"6\", \"prev\", \"prev\", \"7\", \"0\", \"prev\", \"8\", \"9\"])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3], target = 4)",
        "countPairs(nums = [1, 2, 3], target = 3)",
        "countPairs(nums = [3, 5, -4, 8, 11], target = 10)",
        "countPairs(nums = [1, 2, 4, 4], target = 8)",
        "countPairs(nums = [3, 1, 2, 4, 1, 0], target = 3)",
        "countPairs(nums = [1, 5, 11, 5], target = 16)",
        "countPairs(nums = [1, 2, 3, 1, 1, 3], target = 4)",
        "countPairs(nums = [3, 1, 2, 3], target = 4)",
        "countPairs(nums = [5, 1, 3, 5, 4], target = 9)",
        "countPairs(nums = [1, 5, 2, 6], target = 7)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"acb\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"pq\", s2 = \"qp\")",
        "canBeEqual(s1 = \"a\", s2 = \"z\")",
        "canBeEqual(s1 = \"abc\", s2 = \"aac\")",
        "canBeEqual(s1 = \"xyz\", s2 = \"zxy\")",
        "canBeEqual(s1 = \"banana\", s2 = \"baaaa\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"9\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"5\", \"2\", \"prev\", \"4\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"5\", \"3\", \"5\", \"2\", \"3\", \"4\", \"5\", \"5\", \"1\"])",
        "lastVisitedIntegers(words = [\"5\", \"3\", \"4\", \"current\", \"prev\"])",
        "lastVisitedIntegers(words = [\"5\", \"5\", \"2\", \"prev\", \"4\", \"4\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"123\", \"456\", \"prev\", \"789\", \"987\", \"prev\", \"567\", \"888\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"next\", \"3\", \"4\", \"next\", \"prev\", \"2\", \"next\", \"prev\", \"5\", \"6\"])"
    ],
    "sample_464": [
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n=3, limit=3)",
        "distributeCandies(n=10, limit=10)",
        "distributeCandies(n=10, limit=10)",
        "distributeCandies(n = 4, limit = 10)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 5, limit = 1)",
        "distributeCandies(n=6, limit=2)",
        "distributeCandies(n=1, limit=5)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 1])",
        "minimumRightShifts(nums = [4, 3, 4, 3])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4, 0, 6])",
        "minimumRightShifts(nums = [4, 3, 7, 15])",
        "minimumRightShifts(nums = [9, 12, 5, 6, 7])",
        "minimumRightShifts(nums = [2, 1, 4, 0, 2, 3, 1])",
        "minimumRightShifts(nums = [5, 6, 2, 4, 3, 6, 3, 2, 1, 9])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"carrot\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cat\"], x = \"a\")",
        "findWordsContaining(words = [\"to\", \"be\", \"or\", \"not\", \"to\", \"be\"], x = \"to\")",
        "findWordsContaining(words = [\"hello\", \"there\", \"hi\"], x = \"e\")",
        "findWordsContaining(words = [\"spray\", \"limit\", \"elite\", \"exuberant\", \"destruction\", \"present\"], x = \"e\")",
        "findWordsContaining(words = [\"blue\", \"green\", \"red\"], x = \"l\")",
        "findWordsContaining(words = [\"word\", \"words\"], x = \"ord\")",
        "findWordsContaining(words = [\"dog\", \"dogs\", \"god\"], x = \"dog\")",
        "findWordsContaining(words = [\"banana\", \"rhubarb\", \"grapefruit\"], x = \"an\")",
        "findWordsContaining(words = [\"python\", \"yeah\", \"world\"], x = \"yeah\")"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 2)",
        "maxSum(nums = [1, 4, 2, 10, 2, 3, 1, 0, 20], m = 3, k = 3)",
        "maxSum(nums = [1, 1, 1], m = 1, k = 3)",
        "maxSum(nums = [3, 1, 4, 2], m = 2, k = 1)",
        "maxSum(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], m = 2, k = 3)",
        "maxSum(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], m = 2, k = 3)",
        "maxSum(nums = [3, 5, 2, 1, 6, 4], m = 2, k = 2)",
        "maxSum(nums = [1,1,1,1,1,1,1], m = 1, k = 3)",
        "maxSum(nums = [9,4,1,2,5,6,8], m = 3, k = 3)",
        "maxSum(nums = [2,1,3,4,5,2,5,1,5,4,5,4,5,5,3,2,5,2,3,4,5,5,4,4,3,4,5,4,4,3,1,2,4,1,3,5,1,2,1,3,3,3,5,5,4,5,2,2,1,5,4,3,4,1,5,4,5,4,2,3,4,5,2,4,2,1,2,3,1,5,5,1,1,5,3,3,5,5,4,3,1,3,4,2,4,5,3,2,2,3,1,4,2,5,5,5,2,4,3,4,3,5,1,1,3,1,2,4,2,2,5,2,2,1,5,1,1,2,3,3,3,2,2,3,1,2,3,3,5,5,4,1,3,3,3,3,4,4,1,5,1,5,5,2,1,2,1,2,1,3,2,1,4,2,2,1,5,2,4,1,4,2,5,4,3,5,3,1,2,2,3,2,3,2,3,1,2,3,2,2,4,5,4,1,2,4,1,4,3,4,5,4,2,3,5,1,3,5,1,5,2,1,3,4,4,3,1,1,4,4,2,3,3,1,4,5,5,1,1,3,1,3,4,1,2,1,2,3,2,3,4,2,3,4,1,4,3,4,3,5,5,2,4,4,4,5,3,3,5,2,5,5,2,4,5,2,5,4,3,1,4,3,1,2,5,5,5,1,3,3,5,4,5,4,2,1,1,5"
    ],
    "sample_424": [
        "minOperations(nums = [1,2,3,4,5,6,7])",
        "minOperations(nums = [1,1,1,1])",
        "minOperations(nums = [2,2,3,3,3])",
        "minOperations(nums = [3,1,2,5])",
        "minOperations(nums = [1,3,2,3,3])",
        "minOperations(nums=[1,2,2,2])",
        "minOperations(nums = [4,4,1,1,1])",
        "minOperations(nums = [2,2,2,1,2,2,1,2,2,2])",
        "minOperations(nums = [2,2,4,1,5])",
        "minOperations(nums = [5,4,3,2,1,2,3,4,5,2,2])"
    ],
    "sample_417": [
        "minOperations(nums = [1, 1, 4, 2, 3], k = 5)",
        "minOperations(nums = [1, 1, 4, 2, 3], k = 5)",
        "minOperations(nums = [1, 1, 4, 2, 3], k = 5)",
        "minOperations(nums = [3,2,2,3], k = 3)",
        "minOperations(nums = [3,2,3], k = 3)",
        "minOperations(nums = [2, 1, 5, 7, 2], k = 10)",
        "minOperations(nums = [1,3,5,7,9], k = 11)",
        "minOperations(nums = [100, 100, 100], k = 200)",
        "minOperations(nums = [7, 6, 4], k = 10)",
        "minOperations(nums = [7,2,3,10], k = 17)"
    ],
    "sample_371": [
        "sortVowels(s = \"apple\")",
        "sortVowels(s = 'apple')",
        "sortVowels(s = \"Hello World\")",
        "sortVowels(s = 'Phyllo')",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"ympho\")",
        "sortVowels(s = \"YYmpH\")",
        "sortVowels(s = \"Aa\")",
        "sortVowels(s = 'MxypH')",
        "sortVowels(s = \"laympho\")"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 10)",
        "distributeCandies(n = 15, limit = 10)",
        "distributeCandies(n = 3, limit = 5)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n=5, limit=5)",
        "distributeCandies(n = 25, limit = 2)",
        "distributeCandies(n = 4, limit = 200000)"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 1, 2, 2, 3])",
        "sumCounts(nums = [1, 1, 1, 2, 2, 3])",
        "sumCounts(nums = [1, 2, 2, 2])",
        "sumCounts(nums = [1, 2, 2, 3, 4, 4])",
        "sumCounts(nums = [1, 2, 2, 3, 1, 2])",
        "sumCounts(nums = [3, 4, 2, 3, 4, 3, 3, 4, 2, 3, 4])"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 1, 0])",
        "maxSubarrays(nums = [1, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 1, 1])",
        "maxSubarrays(nums = [2, 3, 1, 2, 4, 3])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1, 1, 3, 2, 2])",
        "maxSubarrays(nums = [4, 1, 4, 4, 3, 4])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1])"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [2, 2])",
        "sumCounts(nums = [1, 1, 1, 1, 1, 1, 1, 1])",
        "sumCounts(nums = [3, 1, 4, 1, 5])",
        "sumCounts(nums = [0, 0, 0, 1])",
        "sumCounts(nums = [1, 1, 1, 1, 1])",
        "sumCounts(nums = [1, 3, 2, 2, 3])",
        "sumCounts(nums = [2, 5, 2])"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"aba\", s2 = \"baa\")",
        "canBeEqual(s1 = \"aba\", s2 = \"baa\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"aa\", s2 = \"aba\")",
        "canBeEqual(s1 = \"qwerty\", s2 = \"qwerty\")",
        "canBeEqual(s1 = \"gag\", s2 = \"bag\")",
        "canBeEqual(s1 = \"eddy\", s2 = \"deddy\")",
        "canBeEqual(s1 = \"gg\", s2 = \"gag\")",
        "canBeEqual(s1 = \"kum\", s2 = \"bum\")",
        "canBeEqual(s1 = \"a1a2a3a4a5\", s2 = \"b1b2b3b4\")"
    ],
    "sample_380": [
        "countPairs(nums = [1,2,2,2,2], target = 4)",
        "countPairs(nums = [1,1,1,1,1,1,1,1,1,1], target = 3)",
        "countPairs(nums = [1, 4, 1, 1, 3], target = 5)",
        "countPairs(nums=[1, 2, 3, 4, 5], target=3)",
        "countPairs(nums = [1, 5, 4, 6], target = 7)",
        "countPairs(nums = [5,3,1,4], target = 7)",
        "countPairs(nums = [1, 4, 2, 3, 5, 7], target = 10)",
        "countPairs(nums = [1, 5, 3, 5, 1, 4], target = 7)",
        "countPairs(nums = [4, 1, 2, 3, 4, 6, 2], target = 6)",
        "countPairs(nums = [2,5,2,3,7,3,10], target = 7)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [2, 3, 5])",
        "sumCounts(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "sumCounts(nums = [1, 3, 4])",
        "sumCounts(nums = [3, 1, 2, 1, 2])",
        "sumCounts(nums = [1, 2, 2, 3, 5, 7])",
        "sumCounts(nums = [1, 2, 2, 3, 5, 6, 6, 6])"
    ],
    "sample_368": [
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s = \"hello\")",
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"lumpH\")",
        "sortVowels(s = \"HELLO\")",
        "sortVowels(s = \"apple\")",
        "sortVowels(s = \"AELaym\")",
        "sortVowels(s = \"ceebcccccaaa\")"
    ],
    "sample_462": [
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 5, limit = 10)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 10, limit = 20)"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 3, 5])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 3, 5, 7])",
        "minimumCoins(prices = [1, 3, 5, 10, 20])",
        "minimumCoins(prices = [1,3,2,4,7])",
        "minimumCoins(prices = [2, 3, 1, 2, 3, 4])",
        "minimumCoins(prices = [5, 1, 1, 3, 6])",
        "minimumCoins(prices = [1, 10, 100, 1])",
        "minimumCoins(prices = [3, 3, 5, 3, 7])",
        "minimumCoins(prices=[2, 4, 1, 6, 9, 7, 8, 3, 5, 6])"
    ],
    "sample_426": [
        "minOperations(nums = [1, 1])",
        "minOperations(nums = [1, 1])",
        "minOperations(nums = [2, 2, 2, 3, 3])",
        "minOperations(nums = [1, 2, 2, 1])",
        "minOperations(nums = [3, 2, 5])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1,1,1,2,2,2])",
        "minOperations(nums=[1,1,1,3])",
        "minOperations(nums = [2, 2, 1, 2, 5, 2, 1, 2, 4, 2, 5, 2])",
        "minOperations(nums = [10, 20, 10, 10, 10, 10, 10, 10, 10, 10])"
    ],
    "sample_423": [
        "minOperations(nums = [1, 2, 3])",
        "minOperations(nums = [1, 1, 1])",
        "minOperations(nums = [1,2,3])",
        "minOperations(nums = [1, 2, 5])",
        "minOperations(nums = [3, 3])",
        "minOperations(nums = [1,1,1,3,3,3])",
        "minOperations(nums = [1000, 1000, 1000, 1000, 1000])",
        "minOperations(nums = [5,1,3,2])",
        "minOperations(nums = [2,1,1,1,1,2])",
        "minOperations(nums = [1,2,3,4,2,5,6,3,3])"
    ],
    "sample_476": [
        "minimumCoins(prices = [1,2,3,4,5])",
        "minimumCoins(prices = [1,3,2])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 3, 5])",
        "minimumCoins(prices = [1, 5, 8, 9, 10, 17, 17, 20])",
        "minimumCoins(prices = [2,3,5])",
        "minimumCoins(prices = [1,3,4,5,6])",
        "minimumCoins(prices = [1,4,3])",
        "minimumCoins(prices = [1, 3, 4, 5])",
        "minimumCoins(prices = [1,3,4,2,6])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumRightShifts(nums = [1, 3, 5, 4, 2])",
        "minimumRightShifts(nums = [1, 3, 5, 7, 2, 4, 6])",
        "minimumRightShifts(nums = [3, 6, 1, 4, 2])",
        "minimumRightShifts(nums = [1, 0, 0, 1, 0, 1, 1])",
        "minimumRightShifts(nums = [2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [2, 4, 1, 3, 5, 7])",
        "minimumRightShifts(nums = [5, 6, 7, 9, 10, 11])",
        "minimumRightShifts(nums = [2, 4, 0, 3])",
        "minimumRightShifts(nums = [2, 0, 1, 3, 4])",
        "minimumRightShifts(nums = [1, 1, 2, 2, 3, 3, 3])",
        "minimumRightShifts(nums = [90, 80, 70, 60, 50, 40, 30, 20, 10])",
        "minimumRightShifts(nums = [3, 6, 9, 1, 8, 7])",
        "minimumRightShifts(nums = [3, 5, 9, 1, 2, 4, 8, 0, 6])"
    ],
    "sample_167": [
        "isAcronym(words = [\"a\", \"b\", \"c\"], s = \"abc\")",
        "isAcronym(words = [\"ab\", \"c\"], s = \"bc\")",
        "isAcronym(words = [\"abcd\", \"bcde\", \"cdef\"], s = \"abcdef\")",
        "isAcronym(words = [\"abc\", \"xyz\", \"123\"], s = \"abx\")",
        "isAcronym(words = [\"apple\", \"plum\"], s = \"aplp\")",
        "isAcronym(words=[\"apple\", \"banana\"], s = \"bna\")",
        "isAcronym(words = [\"c++\", \"c\", \"python\"], s = \"pynyth\")",
        "isAcronym(words = [\"sanity\", \"coding\", \"program\"], s = \"SCP\")",
        "isAcronym(words = [\"marines\", \"metallica\", \"madonna\"], s = \"mmm\")",
        "isAcronym(words = [\"bo\", \"ar\", \"r\", \"q\"], s = \"BOAR\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1,1,2,2,3], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [4,2,4,5,6], m = 1, k = 4)",
        "countInterestingSubarrays(nums = [1,2,3,4], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [2, 4, 6], m = 1, k = 3)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [1,2,2,1,2,2,1,2,2,1,2,2], m = 2, k = 2)",
        "countInterestingSubarrays(nums=[1, 2, 2, 2, 5, 5, 5, 8], m=3, k=2)",
        "countInterestingSubarrays(nums= [1,2,3,4,5,6,7,8,9,10], m= 3, k= 3)",
        "countInterestingSubarrays(nums= [2,4,3,1,3,2], m=2, k=3)",
        "countInterestingSubarrays(nums= [1, 5, 20, 21], m=4, k=3)"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[1,3]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[1,2]])",
        "numberOfPoints(nums = [[1, 3], [2, 6], [8, 10]])",
        "numberOfPoints(nums = [[1,2],[3,4],[5,6],[7,8]])",
        "numberOfPoints(nums = [[1,2],[3,5],[4,8],[10,20]])",
        "numberOfPoints(nums = [[1,2],[1,3],[1,4],[1,5],[1,6]])",
        "numberOfPoints(nums = [[10, 20], [20, 30], [23, 27]])",
        "numberOfPoints(nums = [[1, 5], [1, 6], [3, 6], [2, 5], [3, 5]])",
        "numberOfPoints(nums=[[3,6],[2,6],[2,3],[4,4],[3,3],[4,6]])",
        "numberOfPoints(nums = [[1, 5], [2, 3], [2, 5], [2, 7], [3, 3], [5, 6], [6, 8], [7, 8]])"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy \", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy problem\", \"hello world\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\", \"with\", \"banana\"], separator = \" \")",
        "splitWordsBySeparator(words = ['e', 'asy', 'problem'], separator = '_')",
        "splitWordsBySeparator(words = [\"the\", \"problem\", \"is\", \"easy\", \"to\", \"solve\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy-problem\", \"easy_problem\", \"is\", \"easy\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\", \"is\", \"so\", \"c\", \"easy\"], separator = \"c\")",
        "splitWordsBySeparator(words = ['python', 'pythonist', 'easy', 'problem'], separator = ' ')",
        "splitWordsBySeparator(words = ['peach', 'peach', 'pear', 'apple', 'pear'], separator = 'pear')"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [1, 3]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [1, 3]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]])",
        "numberOfPoints(nums = [[1, 2], [5, 10], [11, 12]])",
        "numberOfPoints(nums=[[1, 2], [2, 3], [2, 4], [3, 4]])",
        "numberOfPoints(nums = [[1,2],[2,4],[4,6]])",
        "numberOfPoints(nums = [[0, 2], [2, 5], [7, 10], [12, 15]])",
        "numberOfPoints(nums = [[1, 3], [1, 4], [2, 2], [3, 3], [4, 4], [4, 5], [6, 6]])",
        "numberOfPoints(nums = [[2,4],[1,3],[2,3],[5,7]])",
        "numberOfPoints(nums = [[-1, 4], [2, 5], [-1, 6]])"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 2, 3, 7])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [2, 4, 1, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "countCompleteSubarrays(nums = [2,4,1,2,3])",
        "countCompleteSubarrays(nums = [1,1,0,1])",
        "countCompleteSubarrays(nums = [2, 4, 3, 5, 2])",
        "countCompleteSubarrays(nums = [1, 4, 3, 2, 5])",
        "countCompleteSubarrays(nums = [0, 1, 1])",
        "countCompleteSubarrays(nums = [1,2,3,1,1])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = ' ')",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four five six\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four five six'], separator = \" \")",
        "splitWordsBySeparator(words = [\"one,two\", \"three\", \"four,five,six\"], separator = ',')"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [2, 1, 3, 5, 4])",
        "maxIncreasingGroups(u = [1, 3, 5, 4, 2, 7])",
        "maxIncreasingGroups(u = [1, 4, 5, 4, 6, 1, 4])",
        "maxIncreasingGroups(u = [1, 5, 6, 7, 9])",
        "maxIncreasingGroups(u = [1, 2, 3, 2, 1, 4, 2])",
        "maxIncreasingGroups(u = [2, 4, 5, 2, 6, 2, 5, 1])",
        "maxIncreasingGroups(u = [1, 3, 2, 1, 3, 3, 4, 1])",
        "maxIncreasingGroups(u = [1, 5, 6, 3, 6, 3, 6])",
        "maxIncreasingGroups(u = [3, 2, 6, 8, 10, 12, 14, 16, 18, 20])",
        "maxIncreasingGroups(u = [1, 2, 2, 2, 1, 3, 4, 6, 8, 10])"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [4,2,1,3], x = 1)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5,6,7,8], x = 3)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 4)",
        "minAbsoluteDifference(nums = [1,2,3,4], x = 2)",
        "minAbsoluteDifference(nums = [2,3,1,4,5], x = 2)",
        "minAbsoluteDifference(nums = [0,3,6,10,15], x = 4)",
        "minAbsoluteDifference(nums = [2,1,4,3,5], x = 3)",
        "minAbsoluteDifference(nums = [2,2,3,5,4], x = 4)",
        "minAbsoluteDifference(nums = [2,5,1,3,7,10,5,2], x = 4)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1,2,3,4], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 4], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 3, 6], modulo = 10, k = 4)",
        "countInterestingSubarrays(nums = [2, 4, 3, 5, 1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 2, 3], modulo = 4, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 6], modulo = 20, k = 6)",
        "countInterestingSubarrays(nums = [4, 2, 2, 6, 4, 5, 9, 3, 7], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 2, 3, 3], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 2, 4, 2, 5, 1, 2], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [1, 4, 2, 5, 3, 4], modulo = 7, k = 3)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 7)",
        "canSplitArray(nums = [1, 2, 3], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 4)",
        "canSplitArray(nums = [1,2,3,4,5], m = 7)",
        "canSplitArray(nums = [1, 2, 5, 9], m = 11)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 11], m = 7)",
        "canSplitArray(nums = [1,5,8,9], m = 10)",
        "canSplitArray(nums = [5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "canSplitArray(nums = [2, 1, 2, 4, 1, 0], m = 3)"
    ],
    "sample_169": [
        "isAcronym(words = [\"Apple\", \"Banana\", \"Mango\"], s = \"AM\")",
        "isAcronym(words = [\"This\", \"is\", \"a\", \"test\"], s = \"Thi\")",
        "isAcronym(words = [\"qwertyuiop\", \"asdfghjkl\"], s = \"q\")",
        "isAcronym(words = [\"a\", \"bc\", \"cba\"], s = \"abccba\")",
        "isAcronym(words = [\"abc\", \"dxy\"], s = \"dx\")",
        "isAcronym(words = [\"banana\", \"apple\", \"home\", \"computer\"], s = \"banana\")",
        "isAcronym(words = ['apple', 'z', 'a', 'pear'], s = 'apz')",
        "isAcronym(words = [\"d\", \"f\", \"d\", \"a\"], s = \"dana\")",
        "isAcronym(words = [\"matrix\", \"magenta\", \"octopus\"], s = \"matro\")",
        "isAcronym(words = [\"bbq\", \"ba\", \"az\", \"zmm\"], s = \"baaz\")"
    ],
    "sample_121": [
        "minimumIndex(nums = [1,2,3,4,5,6,7,8,9])",
        "minimumIndex(nums = [1,2,3,4,5,5])",
        "minimumIndex(nums = [3, 2, 1])",
        "minimumIndex(nums = [1,1,2,2,3])",
        "minimumIndex(nums = [2, 3, 1, 1, 4])",
        "minimumIndex(nums = [1,2,1,3,2,4,5,6,7])",
        "minimumIndex(nums = [1,2,4,3,4,2,4,1])",
        "minimumIndex(nums = [1,4,5,2,6,3,9,10,8])",
        "minimumIndex(nums = [0, 1, 2, 4, 5, 6])",
        "minimumIndex(nums=[1,2,1,2,3,1])"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 4, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 5, 4], [3, 4, 1]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 2], [2, 5, 3], [3, 4, 1]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [2, 4, 10]])",
        "maximizeTheProfit(n = 4, offers = [[0, 1, 100], [1, 2, 70], [2, 3, 60], [3, 4, 15]])",
        "maximizeTheProfit(n = 4, offers = [[3, 10, 2], [1, 5, 3], [5, 9, 4], [2, 4, 6]])",
        "maximizeTheProfit(n = 5, offers = [[2,4,3],[1,2,2],[3,4,1],[2,3,3],[3,4,2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 100, 10], [1, 100, 40], [3, 2, 10], [4, 1, 10], [5, 3, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 5, 1], [1, 6, 4], [2, 4, 2], [2, 5, 4], [3, 6, 5]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 1], [1, 2, 0], [2, 3, 1], [3, 4, 2], [4, 5, 3], [1, 5, 7], [0, 4, 2], [0, 2, 5], [1, 3, 4], [2, 5, 1]])"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums=[1, 2, 3])",
        "maximumTripletValue(nums = [3, 4, 5, 2])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [100, 200, 1000])",
        "maximumTripletValue(nums=[5, 4, 3])",
        "maximumTripletValue(nums = [2, 4, 6, 8, 10, 12, 14, 16])",
        "maximumTripletValue(nums = [3, 1, 2, 4, 5, 0])",
        "maximumTripletValue(nums = [-2, 1, 5, -2, -2])",
        "maximumTripletValue(nums = [2, 4, 4, 2, 8, 9, 1, 1, 2, 5, 6, 7, 3])"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"UD\")",
        "furthestDistanceFromOrigin(moves = \"U\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"LLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"L_R__R\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LRRRR\")",
        "furthestDistanceFromOrigin(moves = \"L__RR__LL_L\")",
        "furthestDistanceFromOrigin(moves = \"R___LL__\")"
    ],
    "sample_149": [
        "finalString(s = \"sirius\")",
        "finalString(s = \"i love cats\")",
        "from typing import *\n\nfrom math import *\n\ndef finalString(s: str) -> str:\n    a = \"\"\n    for i in s:\n        if i",
        "finalString(s = \"everyone\")",
        "finalString(s = \"Risky\")",
        "finalString(s = \"iiiiiiiiiii\")",
        "from typing import *\n\nfrom math import *\n\ndef finalString(s: str) -> str:\n    a = \"\"\n    for i in s:\n        if i",
        "finalString(s = 'abciiooei')",
        "from typing import *\n\nfrom math import *\n\ndef finalString(s: str) -> str:\n    a = \"\"\n    for i in s:\n        if i",
        "finalString(s = \"They are not related\")"
    ],
    "sample_162": [
        "maxSum(nums = [10, 20, 30, 40])",
        "maxSum(nums = [111, 222, 333, 444])",
        "maxSum(nums = [1, 2, 3, 4, 5, 10, 6])",
        "maxSum(nums = [2, 4, 10, 3])",
        "maxSum(nums = [12, 4, 3, 5, 10, 1])",
        "maxSum(nums = [3,2,8,6,4])",
        "maxSum(nums=[12, 33, 25, 54, 65, 78])",
        "maxSum(nums = [52, 55, 31, 34, 75, 17, 92, 34])",
        "maxSum(nums = [92, 5, 12, 80, 18, 27, 29, 64, 10, 2, 4])",
        "maxSum(nums = [121,130,133,134,146,149,150,152,159,160,162,169,171,174,177,178,182,184,187,190,191,199])"
    ],
    "sample_230": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 4])",
        "countWays(nums = [3, 4, 5])",
        "countWays(nums = [1, 3, 5, 7])",
        "countWays(nums = [1, 2, 4, 5])",
        "countWays(nums = [1, 4, 3])",
        "countWays(nums = [2, 4, 3])",
        "countWays(nums = [2, 2, 3, 4])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 10)",
        "minimumPossibleSum(n = 2, target = 10)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 4, target = 6)",
        "minimumPossibleSum(n = 5, target = 1)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 5, offers = [[1, 3, 100], [2, 5, 100], [3, 2, 100]])",
        "maximizeTheProfit(N = 5, offers = [[1, 3, 50], [4, 5, 100], [2, 3, 40]])",
        "maximizeTheProfit(N = 100, offers = [[1, 3, 5], [2, 4, 10], [3, 5, 15], [4, 7, 20]])",
        "maximizeTheProfit(N = 4, offers = [[1, 4, 2], [1, 2, 5], [3, 5, 10], [2, 3, 8]])",
        "maximizeTheProfit(N = 7, offers = [[5, 4, 100], [2, 2, 50], [4, 1, 100]])",
        "maximizeTheProfit(N = 2, offers = [[1, 2, 100], [1, 3, 70], [2, 3, 60], [2, 4, 40], [4, 5, 30]])",
        "maximizeTheProfit(N = 5, offers = [[2, 2, 6], [3, 1, 4], [1, 5, 5]])",
        "maximizeTheProfit(N = 5, offers = [[0, 1, 100], [1, 2, 70], [0, 3, 200], [1, 3, 120], [2, 4, 80], [3, 5, 150]])",
        "maximizeTheProfit(N = 4, offers = [[1, 2, 5], [3, 2, 7], [4, 4, 1], [2, 2, 2]])",
        "maximizeTheProfit(N = 7, offers = [[2, 5, 20], [3, 6, 10], [1, 3, 1], [4, 7, 40], [5, 7, 50]])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 10, offers = [[1, 3, 5], [2, 5, 7], [3, 6, 8]])",
        "maximizeTheProfit(n = 6, offers = [[1, 3, 2], [2, 5, 3], [3, 6, 4], [4, 7, 5], [5, 8, 6], [6, 9, 7]])",
        "maximizeTheProfit(n = 5, offers = [[2, 4, 10], [1, 2, 5], [3, 5, 8]])",
        "maximizeTheProfit(n=3, offers=[[1, 3, 20], [2, 5, 25], [3, 4, 15]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 20], [2, 3, 15], [2, 4, 25]])",
        "maximizeTheProfit(n = 2, offers = [\n    [2, 3, 5],\n    [1, 3, 2],\n])",
        "maximizeTheProfit(n = 2, offers = [[1, 3, 50], [2, 2, 100], [1, 4, 80]])",
        "maximizeTheProfit(n = 5, offers = [\n        [1, 5, 3],\n        [2, 3, 1],\n        [3, 5, 3]\n])",
        "maximizeTheProfit(n = 10, offers = [\n    [1, 3, 10],\n    [2, 5, 20],\n    [3, 5, 25],\n    [4, 8, 30],\n    [5, 10, 40],\n    [6, 12, 50]\n])",
        "maximizeTheProfit(n = 10, offers = [[2, 5, 8], [3, 6, 7], [1, 4, 9], [5, 8, 2], [5, 9, 7], [6, 7, 6], [8, 9, 3], [1, 6, 4], [2, 8, 1]])"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [8, 8, 8], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 5], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 0], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 2, 2], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 3, 8, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 8, 4, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 7, 7, 7, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 3, 8, 7, 2], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 1, 0, 2, 0], target = 4)"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,2,3,4])",
        "countCompleteSubarrays(nums = [1,1,1,1,1,1,1,1,1,1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [2,3,1,5])",
        "countCompleteSubarrays(nums = [0,1,2,3,4,5,6,7,8])",
        "countCompleteSubarrays(nums = [2,5,3,5,4])",
        "countCompleteSubarrays(nums=[2,5,1,2,4])",
        "countCompleteSubarrays(nums = [0,1,1,0,1])",
        "countCompleteSubarrays(nums = [2,5,1,2,4,3,8,9,10])",
        "countCompleteSubarrays(nums = [2,2,2,1])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1,2,3])",
        "countWays(nums = [1,2,3])",
        "countWays(nums = [1,3,4,5])",
        "countWays(nums = [5, 4, 3, 2, 1])",
        "countWays(nums = [1, 2, 3, 5, 8])",
        "countWays(nums = [1,3,4,7])",
        "countWays(nums = [3, 5, 7, 11])",
        "countWays(nums=[3, 4, 1, 2])",
        "countWays(nums = [1, 1, 4, 4, 5])"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [3, 3, 2, 1])",
        "maxIncreasingGroups(usageLimits = [1, 10, 20, 30, 40, 50])",
        "maxIncreasingGroups(usageLimits = [1, 2, 1, 5, 2])",
        "maxIncreasingGroups(usageLimits = [1, 3, 1, 4, 1, 5, 9])",
        "maxIncreasingGroups(usageLimits = [12, 10, 12, 11])",
        "maxIncreasingGroups(usageLimits = [2, 2, 3, 1, 2, 5])",
        "maxIncreasingGroups(usageLimits = [3, 4, 7, 2, 3, 4])",
        "maxIncreasingGroups(usageLimits=[9, 3, 5, 2, 1, 1, 1, 1])",
        "maxIncreasingGroups(usageLimits = [1, 2, 5, 2, 1, 3, 5, 1, 2, 1, 1])"
    ],
    "sample_173": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 4, k = 5)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 4, k = 6)",
        "minimumSum(n = 2, k = 7)",
        "minimumSum(n = 4, k = 4)",
        "minimumSum(n=4, k=5)",
        "minimumSum(n = 6, k = 12)"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [2, 4, 3, 5, 7], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [2,4,3,3], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2,4,6], m = 1, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 3, 5, 3, 1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 3, 5, 2, 6], m = 5, k = 4)",
        "countInterestingSubarrays(nums = [1,2,2,2,2,2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 2, 2, 5, 7, 11], m = 3, k = 3)",
        "countInterestingSubarrays(nums = [2, 4, 3, 3, 5, 2, 6, 4, 3, 3], m = 4, k = 3)",
        "countInterestingSubarrays(nums = [4,6,5,3,2,2,3,4], m = 4, k = 2)",
        "countInterestingSubarrays(nums = [2,4,3,5,3,2,1,9,7,9,4,9,2,1,6,8,2,3,2,1,1,4,4,4,5,5,8,5,1,9,7,9,9,8,4,8,7,4,3,5,7,8,7,7,9,4,3,2,9,9,8,2,1,4,5,1,2,9,2,4,1,6,1,7,2,4,1,9,4,8,6,8,4,5,5,1,5,1,1,7,5,5,5,5,5,5,8,6,3,3,1,3,1,6,5,8,8,6,4,2,1,1,3,1,6,8,4,6,4,2,1,6,6,5,8,8,3,9,5,4,9,9,8,3,7,3,9,9,9,9,3,7,8,8,6,5,7,2,9,7,6,4,8,9,1,2,5,3,7,7,9,5,5,7,8,9,4,6,4,1,2,3,1,8,7,9,4,2,6,4,5,8,4,6,9,7,8,6,9,8,5,2,1,3,2,9,5,9,4,3,7,5,8,7,2,8,7,2,1,1,5,5,1,9,2,3,9,9,1,9,9,2,5,6,4,1,2,7,7,3,1,8,4,2,4,8,6,1,2,2,7,8,6,3,3,9,6,6,4,8,5,2,3,3,6,7,1,2,8,6,4,4,1,4,7,8,8,8,6,8,6,8,2,7,8,5,7,9,5,5,9,2"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [2, 4, 4, 6, 8, 8])",
        "countCompleteSubarrays(nums = [1,1,1,1,1])",
        "countCompleteSubarrays(nums = [1,1,1,1,1,1,1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 5, 7])",
        "countCompleteSubarrays(nums = [2, 4, 4, 4, 5, 5])",
        "countCompleteSubarrays(nums=[3,2,1,5,2])",
        "countCompleteSubarrays(nums = [1,2,3,3,4,5,6,7,8,9])",
        "countCompleteSubarrays(nums = [1, 1, 0, 0, 1, 0, 0, 0, 1, 1])",
        "countCompleteSubarrays(nums = [2,4,3,6,7,9,1,8])"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1], k = 3)",
        "longestEqualSubarray(nums = [2,3,1,2,4,3], k = 3)",
        "longestEqualSubarray(nums = [5,2,1,2,5,2,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3, 3, 4, 5, 6], k = 4)",
        "longestEqualSubarray(nums = [0, 1, 1, 2, 1, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 3, 1, 2, 4, 5], k = 1)",
        "longestEqualSubarray(nums = [1,2,1,2,3,4,5,3,2,1], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 3, 2, 1, 3], k = 1)"
    ],
    "sample_170": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"h\")",
        "isAcronym(words = [\"apple\", \"banana\"], s = \"bn\")",
        "isAcronym(words = [\"first\", \"second\", \"third\"], s = \"abc\")",
        "isAcronym(words = [\"my\", \"name\", \"is\"], s = \"mynameis\")",
        "isAcronym(words = [\"ab\", \"c\"], s = \"ba\")",
        "isAcronym(words = [\"banana\", \"apple\", \"car\"], s = \"can\")",
        "isAcronym(words = [\"This\", \"is\", \"a\", \"test\"], s = \"tat\")",
        "isAcronym(words = [\"B\", \"A\", \"N\", \"A\"], s = \"ANN\")",
        "isAcronym(words = [\"tech\", \"night\", \"screaming\"], s = \"TS\")",
        "isAcronym(words = [\"eat\", \"eat\", \"programmer\", \"coding\"], s = \"ac\")"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = \"010\")",
        "maximumOddBinaryNumber(s = \"011\")",
        "maximumOddBinaryNumber(s = \"11010\")",
        "maximumOddBinaryNumber(s = \"110011\")",
        "maximumOddBinaryNumber(s = \"001000\")",
        "maximumOddBinaryNumber(s = \"0001001\")",
        "maximumOddBinaryNumber(s = \"00110010\")",
        "maximumOddBinaryNumber(s = '00110100')",
        "maximumOddBinaryNumber(s = \"10010011\")",
        "maximumOddBinaryNumber(s = \"1100000010111011001\")"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1,1,1])",
        "countWays(nums = [2, 4, 6, 7])",
        "countWays(nums = [1, 3, 5, 6, 8])",
        "countWays(nums = [1,2,4,5,6,7])",
        "countWays(nums = [2, 4, 7, 8, 11])",
        "countWays(nums = [1, 3, 5, 7, 10, 11, 13, 15])"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 4, 3]])",
        "maximizeTheProfit(n = 5, offers = [[2, 5, 10], [3, 6, 7], [1, 4, 8], [8, 9, 10]])",
        "maximizeTheProfit(n = 10, offers = [[1, 5, 3], [2, 6, 1], [4, 8, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 20], [2, 4, 100], [3, 5, 70]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 20], [4, 5, 70], [2, 8, 60]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 2], [2, 3, 2], [3, 4, 2], [4, 5, 2], [5, 6, 2]])",
        "maximizeTheProfit(n = 4, offers = [[1, 4, 2], [2, 4, 3], [1, 4, 5], [5, 7, 6]])",
        "maximizeTheProfit(n = 10, offers = [[1, 5, 3], [2, 6, 1], [3, 8, 5], [4, 10, 3], [5, 12, 8]])",
        "maximizeTheProfit(n = 5, offers = [[3, 2, 8], [1, 3, 4], [0, 1, 10], [2, 4, 9]])",
        "maximizeTheProfit(n = 10, offers = [[2, 8, 10], [3, 1, 1], [5, 7, 10], [6, 5, 1], [7, 8, 10]])"
    ],
    "sample_122": [
        "minimumIndex(nums = [1,1,2,2,3,3])",
        "minimumIndex(nums = [1,2,3,3,2,1])",
        "minimumIndex(nums = [1,2,3,1])",
        "minimumIndex(nums = [2,2,2,2,2,2])",
        "minimumIndex(nums = [1, 2, 3, 2, 1])",
        "minimumIndex(nums = [1,2,3,4,5,2,3,4,5])",
        "minimumIndex(nums = [2, 2, 4, 2, 5, 1, 1, 3])",
        "minimumIndex(nums = [3,1,5,7,3,2])",
        "minimumIndex(nums = [2, 1, 1, 1, 1, 1, 2, 2, 3, 2])",
        "minimumIndex(nums=[2, 2, 1, 3, 1, 3, 1, 2, 1, 1, 1, 1, 1])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1,2],[2,3],[2,5],[4,5]])",
        "numberOfPoints(nums = [[3,6],[2,10],[8,10],[1,5]])",
        "numberOfPoints(nums = [[0, 0], [0, 1], [0, 2], [0, 3], [1, 1]])",
        "numberOfPoints(nums = [[10,20],[20,30],[20,30],[30,50]])",
        "numberOfPoints(nums = [[10, 20], [30, 40], [25, 35], [40, 50]])",
        "numberOfPoints(nums = [[1, 5], [2, 3], [2, 6], [5, 9]])",
        "numberOfPoints(nums = [[1,3],[5,6],[10,11],[15,18]])",
        "numberOfPoints(nums = [[2,3],[2,5],[1,6],[1,7],[6,7]])",
        "numberOfPoints(nums = [[3,3],[1,6],[4,3],[3,2]])",
        "numberOfPoints(nums = [[10, 20], [20, 25], [30, 50], [15, 25], [25, 30], [20, 27], [12, 23], [22, 25], [27, 29]])"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello\", \"world\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"\", \"\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"abc\", \"def\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\", \"d\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"\", \"a\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"abc\", \"abc\", \"abc\"], separator = \"c\")",
        "splitWordsBySeparator(words = [\"do\", \"re\", \"mi\", \"fa\", \"so\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"f\", \"g\", \"h\"], separator = \"k\")"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 5, target = 5)",
        "minimumPossibleSum(n = 6, target = 2)",
        "minimumPossibleSum(n = 7, target = 10)",
        "minimumPossibleSum(n = 7, target = 12)",
        "minimumPossibleSum(n = 10, target = 8)"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [1, 3]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [1, 3]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [1, 3]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [1, 3]])",
        "numberOfPoints(nums = [[1, 5], [8, 12], [15, 24], [25, 26]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[1,7]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[1,10]])",
        "numberOfPoints(nums = [[2, 5], [3, 6], [4, 8], [8, 11]])",
        "numberOfPoints(nums = [[1, 5], [7, 8], [2, 4], [3, 9], [3, 9]])"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [2, 4, 3, 5, 2], m = 4, k = 1)",
        "countInterestingSubarrays(nums = [2,4,3,5,1], m = 4, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 3, 5, 3], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,2], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [2,4,3,3,5,4,9,5], m = 5, k = 4)",
        "countInterestingSubarrays(nums = [2,4,3,3], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 3, 3, 5, 4, 9, 8], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [1,2,2,1,1,1,2,2,2], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,4,3,3,2], m = 5, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 3, 3, 5, 2, 1, 3, 4, 3], m = 5, k = 3)"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums=[1, 2, 3, 4, 5], k=2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [5,2,6,5], k = 1)",
        "sumIndicesWithKSetBits(nums = [5, 6, 8, 11, 15], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 1, 0], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 3, 3, 4, 5, 8, 13, 21, 34], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,2,1,4,1,2], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 3, 5, 4, 7, 6, 9, 8], k = 3)"
    ],
    "sample_203": [
        "minimumOperations(num = \"100\")",
        "minimumOperations(num = \"125\")",
        "minimumOperations(num = \"50\")",
        "minimumOperations(num = \"0\")",
        "minimumOperations(num = \"75\")",
        "minimumOperations(num = \"35\")",
        "minimumOperations(num = \"2\")",
        "minimumOperations(num = \"55\")",
        "minimumOperations(num = \"05555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555",
        "minimumOperations(num = \"50110\")"
    ],
    "sample_209": [
        "from collections import Counter\n\ndef countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    cnt = Counter()\n    cnt[0] = 1\n    ans = 0\n    s = 0\n    for a in nums:\n        s += a%modulo",
        "from collections import Counter\n\ndef countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    cnt = Counter()\n    cnt[0] = 1\n    ans = 0\n    s = 0\n    for a in nums:\n        s += a%modulo",
        "countInterestingSubarrays(nums = [2,4,3,5,7], modulo = 10, k = 3)",
        "from collections import Counter\n\ndef countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    cnt = Counter()\n    cnt[0] = 1\n    ans = 0\n    s = 0\n    for a in nums:\n        s += a%modulo",
        "countInterestingSubarrays(nums = [4,2,5,3,7], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,10], modulo = 10, k = 3)",
        "from collections import Counter\n\ndef countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    cnt = Counter()\n    cnt[0] = 1\n    ans = 0\n    s = 0\n    for a in nums:\n        s += a%modulo",
        "countInterestingSubarrays(nums = [1,2,2,1,4,2], modulo = 10, k = 2)",
        "from collections import Counter\n\ndef countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    cnt = Counter()\n    cnt[0] = 1\n    ans = 0\n    s = 0\n    for a in nums:\n        s += a%modulo",
        "countInterestingSubarrays(nums = [5, 5, 5, 5, 5], modulo = 1000000007, k = 5)"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [2,1,2,4,3], K = 1)",
        "longestEqualSubarray(A = [2,1,2,4,3], K = 1)",
        "longestEqualSubarray(A = [1, 2, 1, 2, 3], K = 0)",
        "longestEqualSubarray(A = [1, 2, 3, 3, 2, 1], K = 2)",
        "longestEqualSubarray(A = [1,2,3,2,1,4,2,3,2], K = 3)",
        "longestEqualSubarray(A = [1,2,3,3,3,3,4], K = 2)",
        "longestEqualSubarray(A = [4, 4, 4, 4, 1], K = 1)",
        "longestEqualSubarray(A = [0, 0, 0, 0, 0, 1, 1, 1, 1], K = 1)",
        "longestEqualSubarray(A = [1, 2, 1, 2, 3, 4, 5, 2, 3, 1], K = 2)",
        "longestEqualSubarray(A = [2,3,3,2,4,4,6,8,9,9], K = 2)"
    ],
    "sample_146": [
        "finalString(s = \"ponter\")",
        "finalString(s = \"ponter\")",
        "finalString(s = 'inter')",
        "finalString(s = 'pointer')",
        "finalString(s = \"python\")",
        "finalString(s = \"poter\")",
        "finalString(s = \"pinser\")",
        "finalString(s = 'iot')",
        "finalString(s = \"pigtit\")",
        "finalString(s = \"pontesaii\")"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 2], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 2, 3, 2], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [11, 12, 14], target = 13)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 5, 8, 2], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 4, 15], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 8, 10, 10, 15, 16], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 10, 5, 5, 10, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 7, 10, 1, 8, 3], target = 10)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [1, 3]])",
        "numberOfPoints(nums=[[1, 2], [2, 3], [3, 4], [1, 3]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 6], [10, 12]])",
        "numberOfPoints(nums = [[1, 2], [3, 5], [4, 6], [7, 9], [8, 9]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [2, 3], [1, 4], [2, 5], [3, 5]])",
        "numberOfPoints(nums = [[2,5],[2,3],[3,4],[1,10]])",
        "numberOfPoints(nums = [[2, 5], [2, 6], [3, 5], [3, 6], [4, 5], [4, 6]])",
        "numberOfPoints(nums = [[2, 3], [5, 7], [3, 4], [8, 8]])",
        "numberOfPoints(nums = [[2, 3], [7, 11], [1, 4], [10, 12], [8, 9]])",
        "numberOfPoints(nums = [[-10, 10], [-10, 0], [0, 10], [10, 10], [2, 2], [-5, -5], [10, -5], [-10, -5], [0, -5]])"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 5, 2, 1, 4])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 6, 10])",
        "maxIncreasingGroups(A = [2, 4, 6, 10])",
        "maxIncreasingGroups(A = [3, 4, 5, 3, 4])",
        "maxIncreasingGroups(A = [2, 1, 3, 3, 2, 4])",
        "maxIncreasingGroups(A = [2, 4, 2, 4, 2])",
        "maxIncreasingGroups(A = [1, 10, 2, 3, 1])",
        "maxIncreasingGroups(A = [2, 7, 4, 6, 8, 10, 9])",
        "maxIncreasingGroups(A = [4, 2, 1, 5, 1, 6, 4])",
        "maxIncreasingGroups(A = [1, 4, 4, 4, 5, 5, 6, 7, 7, 7, 8, 10])"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 4, offers = [[1, 3, 2], [2, 4, 2], [3, 6, 1]])",
        "maximizeTheProfit(n = 4, offers = [[1,2,4],[2,3,2],[3,4,1]])",
        "maximizeTheProfit(n = 10, offers = [[1, 1, 1], [1, 2, 1], [1, 3, 1], [2, 1, 1], [3, 1, 1]])",
        "maximizeTheProfit(n=5, offers=[[2,3,1],[1,2,5],[3,1,2]])",
        "maximizeTheProfit(n = 6, offers = [[2,4,10],[1,2,9],[3,2,1]])",
        "maximizeTheProfit(n = 6, offers = [[3,10,2],[4,3,1],[1,2,4]])",
        "maximizeTheProfit(n=3, offers=[[2,3,2],[3,3,3],[5,3,2]])",
        "maximizeTheProfit(n = 5, offers = [[1,3,10],[2,4,6],[0,5,20],[3,1,6]])",
        "maximizeTheProfit(n = 5,offers = [[1, 3, 2], [2, 5, 1], [3, 4, 8], [5, 8, 7], [6, 7, 9]])",
        "maximizeTheProfit(n=4,offers=[[1,3,4],[1,4,5],[2,2,3],[2,3,5],[3,3,2],[3,4,1],[4,4,3]])"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"L\")",
        "furthestDistanceFromOrigin(moves = \"L___\")",
        "furthestDistanceFromOrigin(moves = \"R\")",
        "furthestDistanceFromOrigin(moves = \"LRLLLRRR\")",
        "furthestDistanceFromOrigin(moves = \"L__R___L__R\")",
        "furthestDistanceFromOrigin(moves = \"RRDDD\")",
        "furthestDistanceFromOrigin(moves = \"ULURDLURRD\")",
        "furthestDistanceFromOrigin(moves = \"L____R_____L____R__\")",
        "furthestDistanceFromOrigin(moves = \"L___R_______R___L\")",
        "furthestDistanceFromOrigin(moves = \"LRLRRLRLRRRLRL\")"
    ],
    "sample_175": [
        "minimumSum(n = 4, k = 7)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 4, k = 6)",
        "minimumSum(n = 5, k = 4)",
        "minimumSum(n = 2, k = 6)",
        "minimumSum(n=3, k=5)",
        "minimumSum(n = 3, k = 11)",
        "minimumSum(n=4, k=6)",
        "minimumSum(n = 3, k = 15)",
        "minimumSum(n = 1000, k = 3000)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[1,3]])",
        "numberOfPoints(nums = [[0,2],[5,10],[13,23],[24,25]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[1,2]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]])",
        "numberOfPoints(nums = [[1,2,3,4],[3,1,1,3]])",
        "numberOfPoints(nums = [[1, 10],[2, 5],[11, 15]])",
        "numberOfPoints(nums=[[3,4],[2,3],[1,1],[1,2]])",
        "numberOfPoints(nums=[[0,2],[3,5],[1,3],[2,4],[3,7]])",
        "numberOfPoints(nums = [[3,10],[21,22],[3,24],[21,24],[23,26],[23,30]])",
        "numberOfPoints(nums=[[2,10],[3,10],[3,5],[4,4],[4,8],[10,10]])"
    ],
    "sample_205": [
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"100\")",
        "minimumOperations(num = \"0\")",
        "minimumOperations(num = \"1234\")",
        "minimumOperations(num = \"510\")",
        "minimumOperations(num = \"00123456\")",
        "minimumOperations(num = \"1234567890\")",
        "minimumOperations(num = \"1572\")",
        "minimumOperations(num = \"0111000101\")",
        "minimumOperations(num = \"17349\")"
    ],
    "sample_120": [
        "minimumIndex(nums = [4, 1, 5, 2, 3])",
        "minimumIndex(nums = [1, 2, 1, 3])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10])",
        "minimumIndex(nums = [2, 3, 2, 1, 2, 3])",
        "minimumIndex(nums = [2, 3, 1, 0, 1])",
        "minimumIndex(nums = [5, 6, 7, 1, 2, 5, 6])",
        "minimumIndex(nums = [1, 2, 2, 0, 3, 0, 5])",
        "minimumIndex(nums = [4, 4, 2, 2, 3, 1, 5])",
        "minimumIndex(nums = [2, 3, 5, 2, 3, 1, 3, 4, 2])",
        "minimumIndex(nums = [1, 2, 4, 5, 3, 4, 3, 2])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"UD\")",
        "furthestDistanceFromOrigin(moves = \"RRDD\")",
        "furthestDistanceFromOrigin(moves = \"UD\")",
        "furthestDistanceFromOrigin(moves = \"LRLLRL\")",
        "furthestDistanceFromOrigin(moves = \"L\")",
        "furthestDistanceFromOrigin(moves = \"LLLLLL\")",
        "furthestDistanceFromOrigin(moves = \"R__R\")",
        "furthestDistanceFromOrigin(moves = \"LRRRR\")",
        "furthestDistanceFromOrigin(moves = \"L_R__LR\")",
        "furthestDistanceFromOrigin(moves = \"L_______RR\")"
    ],
    "sample_161": [
        "maxSum(nums = [2, 5, 6, 2, 3])",
        "maxSum(nums = [1, 3, 5, 7, 9, 11])",
        "maxSum(nums = [4,1,2])",
        "maxSum(nums = [-3, 4, -1, 5, 6])",
        "maxSum(nums = [5,1,5,1])",
        "maxSum(nums = [-5, -2, -1, 2, 5, 9])",
        "maxSum(nums = [13, 5, 14, 9, 11])",
        "maxSum(nums = [2, 3, 1, 4, 6, 1, 5, 8])",
        "maxSum(nums = [34, 46, 12, 98, 99, 76, 33, 44, 55])",
        "maxSum(nums = [9, 2, 8, 5, 4, 0, 1, 7, 9])"
    ],
    "sample_160": [
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,0])",
        "maxSum(nums = [1,2,3,4,5,6])",
        "maxSum(nums = [1,2,3,4,5,6])",
        "maxSum(nums = [34,23,1,24,75,33,54,8])",
        "maxSum(nums = [3, 2, 1, 5, 4])",
        "maxSum(nums = [10, 3, 2])",
        "maxSum(nums = [3,2,1,5,8,6,4])",
        "maxSum(nums = [5, 54, 6, -3, 12, -2, 6, 8])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one,two,three,four,five,six'], separator = ',')",
        "splitWordsBySeparator(words = ['one two three four five six'], separator = ' ')",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five six\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one', 'two,three,four,five,six'], separator = ',')",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two.three\", \"four five\", \"six\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"one:two:three:four\", \"five:six:seven:eight:nine\"], separator = \":\")"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 8, 9, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 15], target = 13)",
        "numberOfEmployeesWhoMetTarget(hours = [2,1,2,3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 6, 9], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 3, 3, 1, 1], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 5, 5, 5, 5, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 2, 10, 2, 10, 10, 2, 10], target = 3)"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [8, 8, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 9, 9], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 8, 10], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [8,10,2], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 4, 0], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [8,8,10,10,8], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 3, 4, 1, 2], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 8, 9, 6], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 1, 0, 1, 4, 5, 1, 2], target = 3)"
    ],
    "sample_171": [
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 4, k = 5)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 4, k = 6)",
        "minimumSum(n = 10, k = 2)",
        "minimumSum(n = 4, k = 13)",
        "minimumSum(n = 4, k = 16)"
    ],
    "sample_159": [
        "maxSum(nums = [1,2,3])",
        "maxSum(nums = [1,2,3])",
        "maxSum(nums = [4, 1, 3, 2])",
        "maxSum(nums = [1,2,3,2,4])",
        "maxSum(nums = [2, 4, 6, 2, 5, 1, 2])",
        "maxSum(nums = [9, 1, 11])",
        "maxSum(nums = [3,9,2,5,4,7])",
        "maxSum(nums = [342,12,11,43])",
        "maxSum(nums=[12,-9,4,7,-6,2,15,-12,6])",
        "maxSum(nums=[-9345,12,34,5,3,45,2,345,6,23,45,67,8,9,0])"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 2, 3], m = 4)",
        "canSplitArray(nums = [1, 5, 11, 5], m = 20)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 5)",
        "canSplitArray(nums = [1, 4, 4], m = 4)",
        "canSplitArray(nums = [1, 4, 4], m = 4)",
        "canSplitArray(nums = [1,2,3,4,5], m = 2)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 3)",
        "canSplitArray(nums = [2, 3, 5, 6, 7], m = 9)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 22)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [], separator = \"\")",
        "splitWordsBySeparator(words = [], separator = \"-\")",
        "splitWordsBySeparator(words = [\"1\", \"2\", \"3\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"to\", \"be\", \"or\", \"not\", \"to\", \"be\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"a\", \"aa\", \"aaa\", \"aaaa\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"a\", \"bc\", \"d\", \"e\"], separator = \"c\")",
        "splitWordsBySeparator(words = [\"hello\", \"world\", \"this\", \"is\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"banana\", \"apple\", \"cherry\", \"banana\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"abc\", \"ab\", \"a\", \"b\", \"c\", \"ab\"], separator = \"b\")"
    ],
    "sample_172": [
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n=3, k=2)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n=2, k=3)",
        "minimumSum(n=4, k=2)",
        "minimumSum(n = 1, k = 3)",
        "minimumSum(n = 5, k = 7)"
    ],
    "sample_228": [
        "countWays(nums = [1,2,3])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [3,2,1])",
        "countWays(nums=[1, 0, 2])",
        "countWays(nums = [1,0,3,2])",
        "countWays(nums=[0, 2, 3])",
        "countWays(nums = [2, 1, 1, 2])",
        "countWays(nums=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "countWays(nums = [0,0,0,1,0,1])",
        "countWays(nums=[5,3,4,2,1])"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"100\")",
        "maximumOddBinaryNumber(s = \"1100100\")",
        "maximumOddBinaryNumber(s = '100000')",
        "maximumOddBinaryNumber(s = '011110001')",
        "maximumOddBinaryNumber(s=\"001100011\")",
        "maximumOddBinaryNumber(s = '101000000000000000000000001001011')",
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
    ],
    "sample_119": [
        "minimumIndex(nums = [1, 2, 2, 2, 3, 1])",
        "minimumIndex(nums = [1, 2, 1, 2, 3, 1, 2])",
        "minimumIndex(nums=[1, 1, 2, 2, 3])",
        "minimumIndex(nums = [3, 1, 2, 4, 3, 1])",
        "minimumIndex(nums = [1, 2, 3, 4, 1, 1, 1])",
        "minimumIndex(nums = [5, 3, 2, 4, 3])",
        "minimumIndex(nums=[0, 1, 1, 2, 3, 1])",
        "minimumIndex(nums = [1, 2, 1, 2, 3, 4, 0, 5])",
        "minimumIndex(nums = [0, 2, 1, 2, 3, 4, 3])",
        "minimumIndex(nums = [5, 6, 7, 1, 5, 3, 2, 3, 4, 6, 8, 3])"
    ],
    "sample_153": [
        "canSplitArray(nums = [1,2,3,4,5,6,7,8], m = 9)",
        "canSplitArray(nums = [1,2,3,4], m = 5)",
        "canSplitArray(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "canSplitArray(nums = [1,2,3,4,5,6,7,8,9,10], m = 3)",
        "canSplitArray(nums = [1,2,3,4,5,6,7,8,9,10], m = 11)",
        "canSplitArray(nums = [1,1,1,1,5], m = 4)",
        "canSplitArray(nums = [5,1], m = 9)",
        "canSplitArray(nums = [1,1,1,2], m = 4)",
        "canSplitArray(nums = [1, 2, 2, 3, 4, 5, 6, 7, 8], m = 5)",
        "canSplitArray(nums = [1, 5, 4, 6, 1, 3, 7], m = 3)"
    ],
    "sample_147": [
        "finalString(s = \"sing\")",
        "finalString(s = \"string\")",
        "finalString(s = \"this is a test\")",
        "finalString(s = 'this is my string')",
        "finalString(s = 'time')",
        "finalString(s = \"string\")",
        "finalString(s = \"indeed\")",
        "finalString(s = \"let's code\")",
        "finalString(s = \"its\")",
        "finalString(s = \"beautiful\")"
    ],
    "sample_174": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 5, k = 4)",
        "minimumSum(n = 4, k = 4)",
        "minimumSum(n = 2, k = 10)",
        "minimumSum(n = 1, k = 3)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1,2,3], m = 6)",
        "canSplitArray(nums = [1,2,3,4,5], m = 20)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 21)",
        "canSplitArray(nums = [2,2,2], m = 3)",
        "canSplitArray(nums = [2,2,2], m = 1)",
        "canSplitArray(nums = [10,20,30], m = 40)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 11)",
        "canSplitArray(nums = [1,5,3,2,4,3], m = 7)",
        "canSplitArray(nums = [5,11,8,12], m = 21)",
        "canSplitArray(nums=[2, 3, 4, 5, 1], m=5)"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [2, 4, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,4,3,2,5,2])",
        "countCompleteSubarrays(nums = [1,4,3,2,5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 0, 0])",
        "countCompleteSubarrays(nums = [2, 4, 3, 7, 5, 10])",
        "countCompleteSubarrays(nums = [2, 2, 2, 3, 4, 4])",
        "countCompleteSubarrays(nums = [1,2,3,3,4,5,6,6,7,7])",
        "countCompleteSubarrays(nums = [4,4,1,1,0,0,1,1,0,1,1])",
        "countCompleteSubarrays(nums = [4, 4, 4, 1, 3, 4, 4, 2, 5, 2])"
    ],
    "sample_150": [
        "finalString(s = \"banana\")",
        "finalString(s = \"iamapandabear\")",
        "finalString(s = 'i love you')",
        "finalString(s = 'programming')",
        "finalString(s = \"Indiana\")",
        "finalString(s = \"This is the way\")",
        "finalString(s = \"ring ring\")",
        "finalString(s = \"baaaabai\")",
        "finalString(s = \"napalmpiy\")",
        "finalString(s = \"fightsforiit\")"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 6, target = 10)",
        "minimumPossibleSum(n = 5, target = 3)",
        "minimumPossibleSum(n = 5, target = 1)",
        "minimumPossibleSum(n = 2, target = 11)",
        "minimumPossibleSum(n=3, target=3)",
        "minimumPossibleSum(n=4, target=1)"
    ],
    "sample_176": [
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 5, k = 6)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 1000000, k = 10)"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [2,4,3,5,2], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 4], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [2,4,3], modulo = 1000000007, k = 3)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], modulo = 10, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5], modulo = 7, k = 3)",
        "countInterestingSubarrays(nums=[1,2,3,4], modulo=10, k=0)",
        "countInterestingSubarrays(nums = [1, 3, 2, 2, 6, 1, 5], modulo = 1000000007, k = 3)",
        "countInterestingSubarrays(nums = [1,2,2,2,2,2,2,1], modulo = 10, k = 2)",
        "countInterestingSubarrays(nums = [2, 2, 2, 3, 4, 5], modulo = 6, k = 1)",
        "countInterestingSubarrays(nums= [1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4], modulo=5, k=3)"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 4)",
        "sumIndicesWithKSetBits(nums = [2, 3, 1, 5, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 3, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [2,5,6,7,4], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 6, 3, 2], k = 3)",
        "sumIndicesWithKSetBits(nums = [2,4,6,1], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 4, 3, 5, 7, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [0,2,3,4,5,6,8,9,11], k = 3)"
    ],
    "sample_151": [
        "finalString(s = \"sing\")",
        "finalString(s = 'stressed')",
        "finalString(s = \"reverse\")",
        "finalString(s = \"Bananarama\")",
        "finalString(s = \"tired\")",
        "finalString(s = 'ringtones')",
        "finalString(s = 'reversed')",
        "finalString(s = \"This is so fun!\")",
        "finalString(s = \"1321\")",
        "finalString(s = \"brtsei i tsetnei\")"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [2,2,2,1], k = 1)",
        "sumIndicesWithKSetBits(nums = [3, 1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [0,0,0,1], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 0, 0, 0, 0, 0, 0, 0, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 0, 1, 0, 0, 1, 1, 0], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 1, 1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 8, 9], k = 5)"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4])",
        "maxIncreasingGroups(usageLimits = [3, 5, 10])",
        "maxIncreasingGroups(usageLimits = [1, 4, 5, 10])",
        "maxIncreasingGroups(usageLimits = [1, 1, 3, 2])",
        "maxIncreasingGroups(usageLimits = [1, 2, 10])",
        "maxIncreasingGroups(usageLimits = [1,1,3,5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5, 10, 12, 15])",
        "maxIncreasingGroups(usageLimits = [1, 2, 5, 1, 2])",
        "maxIncreasingGroups(usageLimits = [3, 5, 10, 11, 16, 22, 28])",
        "maxIncreasingGroups(usageLimits = [10, 11, 23, 35, 6, 2, 5])"
    ],
    "sample_204": [
        "minimumOperations(s = \"00000\")",
        "minimumOperations(s = \"0025507500\")",
        "minimumOperations(s = \"250\")",
        "minimumOperations(s = \"001110\")",
        "minimumOperations(s = \"01025\")",
        "minimumOperations(s=\"025\")",
        "minimumOperations(s = \"0100000000\")",
        "minimumOperations(s = \"001100110\")",
        "minimumOperations(s = \"105075000\")",
        "minimumOperations(s = \"11110000101111101\")"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 1, 1, 1, 1], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 1, 3, 3, 2], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 5, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 3, 4, 4, 2], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 3, 3, 3, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 4, 3, 10, 8], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 10, 3, 6, 12, 4, 11, 7, 10], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 2, 5, 5, 6, 9, 11, 13, 15, 17, 18, 20, 21, 22], target = 18)"
    ],
    "sample_148": [
        "finalString(s = \"ponter\")",
        "finalString(s = \"ponter\")",
        "finalString(s = \"ponter\")",
        "finalString(s = \"ponteri\")",
        "finalString(s = 'painter')",
        "finalString(s = \"piton\")",
        "finalString(s = \"monkey\")",
        "finalString(s = \"pontinho\")",
        "finalString(s = \"yipipi\")",
        "finalString(s = \"carpet\")"
    ],
    "sample_168": [
        "isAcronym(words = [\"b\", \"a\", \"n\", \"a\", \"n\"], s = \"ban\")",
        "isAcronym(words = [\"abacus\", \"banana\"], s = \"bana\")",
        "isAcronym(words = [\"mastermind\", \"masterminding\"], s = \"mm\")",
        "isAcronym(words = [\"like\", \"me\"], s = \"lma\")",
        "isAcronym(words = [\"two\", \"strings\", \"to\", \"compare\"], s = \"two\")",
        "isAcronym(words = [\"cat\", \"cow\", \"dog\", \"happy\"], s = \"dog\")",
        "isAcronym(words = [\"be\", \"considered\", \"a\", \"test\"], s = \"testy\")",
        "isAcronym(words = [\"qwerty\", \"asdasd\", \"zxcvb\", \"qwerty\", \"qwerty\"], s = \"abc\")",
        "isAcronym(words = [\"w\", \"or\", \"l\", \"d\", \"t\", \"h\", \"p\"], s = \"towel\")",
        "isAcronym(words = ['fly', 'enjoy', 'sunlight'], s = 'flsw')"
    ],
    "sample_201": [
        "minOperations(nums = [1, 1, 4, 2, 3], target = 5)",
        "minOperations(nums = [2,4,8,2], target = 10)",
        "minOperations(nums = [1, 1, 1], target = 3)",
        "minOperations(nums=[3,1,2,4], target=6)",
        "minOperations(nums=[1, 3], target=10)",
        "minOperations(nums = [4,2,5], target = 9)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 12)",
        "minOperations(nums = [1,2,3,2,4,3], target = 5)",
        "minOperations(nums=[1,2,4,2], target=8)",
        "minOperations(nums = [4, 2, 5, 1, 5], target = 20)"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"10110\")",
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = '10001')",
        "maximumOddBinaryNumber(s = \"110000\")",
        "maximumOddBinaryNumber(s = \"001001101\")",
        "maximumOddBinaryNumber(s = '011010101')",
        "maximumOddBinaryNumber(s = \"110101010100\")",
        "maximumOddBinaryNumber(s = \"00000000000011110000000000001101\")",
        "maximumOddBinaryNumber(s = \"0110100110101101110111011111010010110111101110111011101110111010100111010101011101111011101110111011101110111010100010110110010110111010100101101110111011101110111010100010110110010110111010100101101110111011101110111011101110111011101110111011101110111011101110111010100010110110010110111010100101101110111011101110111010100010110110010110111010100101101110111011101110111010100010110110010110111010100101101110111011101110111010100010110110010110111010100101101110111011101110111010100010110110010110111010100101101110111011101110111010100010110110010110111010100101101110111011101110111010100010110110010110111010100101101110111011101110111010100010110110010110111010100"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = \"100100\")",
        "maximumOddBinaryNumber(s = '010011')",
        "maximumOddBinaryNumber(s = \"1111010\")",
        "maximumOddBinaryNumber(s = '1011010')",
        "maximumOddBinaryNumber(s = \"100110101\")",
        "maximumOddBinaryNumber(s = \"10100001100\")",
        "maximumOddBinaryNumber(s = '001011010110')",
        "maximumOddBinaryNumber(s = \"1011111000000000000000000000000\")",
        "maximumOddBinaryNumber(s = \"101010101010100000101101000111\")",
        "maximumOddBinaryNumber(s
    ],
    "sample_198": [
        "minimumPossibleSum(n = 4, target = 8)",
        "minimumPossibleSum(n = 2, target = 10)",
        "minimumPossibleSum(n = 3, target = 9)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 100)",
        "minimumPossibleSum(n = 4, target = 7)",
        "minimumPossibleSum(n = 5, target = 12)",
        "minimumPossibleSum(n = 3, target = 20)",
        "minimumPossibleSum(n=4, target=10)"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"L\")",
        "furthestDistanceFromOrigin(moves = \"R\")",
        "furthestDistanceFromOrigin(moves = \"LLL\")",
        "furthestDistanceFromOrigin(moves = \"R\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"RRDD\")",
        "furthestDistanceFromOrigin(moves = \"RLLL\")",
        "furthestDistanceFromOrigin(moves = \"LRR\")",
        "furthestDistanceFromOrigin(moves = \"LULLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LULLLLRRRL\")"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 4, target = 2)",
        "minimumPossibleSum(n = 1, target = 10)",
        "minimumPossibleSum(n=2, target=5)",
        "minimumPossibleSum(n=2, target=9)",
        "minimumPossibleSum(n=5, target=6)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [8, 8, 10], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 8, 9], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 1], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 2, 3], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 40, 3], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 8, 9, 10, 12], target = 11)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 3, 3, 3], target = 3)"
    ],
    "sample_231": [
        "countWays(nums = [1, 2, 5])",
        "countWays(nums = [1,2,3,4,5])",
        "countWays(nums = [1, 2, 4, 7])",
        "countWays(nums = [2, 3, 3])",
        "countWays(nums = [0, 0, 0, 0])",
        "countWays(nums = [1, 2, 5, 7, 8])",
        "countWays(nums = [1, 10, 100, 1000])",
        "countWays(nums = [1, 2, 4, 6, 10])",
        "countWays(nums=[2,5])",
        "countWays(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"UDDDUDUU\")",
        "furthestDistanceFromOrigin(moves = \"UD\")",
        "furthestDistanceFromOrigin(moves = \"UD\")",
        "furthestDistanceFromOrigin(moves = \"UD\")",
        "furthestDistanceFromOrigin(moves = \"RRR\")",
        "furthestDistanceFromOrigin(moves = \"UD\")",
        "furthestDistanceFromOrigin(moves = \"R_______L__\")",
        "furthestDistanceFromOrigin(moves = \"LRLRULRLRUL\")",
        "furthestDistanceFromOrigin(moves = \"L_RRLLLL_LLLL\")",
        "furthestDistanceFromOrigin(moves = \"RRRRLLLL_LLLLRRRRLLLLL_RLRRRRLL\")"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 1, target = 3)",
        "minimumPossibleSum(n=2, target=3)",
        "minimumPossibleSum(n=5, target=10)",
        "minimumPossibleSum(n=2, target=1)",
        "minimumPossibleSum(n = 5, target = 17)"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1, 1, 2, 3, 3])",
        "countCompleteSubarrays(nums = [2,3,1,2,4])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [2, 4, 1, 2, 5, 0, 5, 8])",
        "countCompleteSubarrays(nums = [2,4,4])",
        "countCompleteSubarrays(nums=[1, 2, 3, 7])",
        "countCompleteSubarrays(nums = [3,2,1,3,4,3,2,4,2])",
        "countCompleteSubarrays(nums = [2, 4, 3, 5, 2, 3, 4, 3, 2, 5, 5, 2, 4, 3])"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 5, 11, 5], m = 16)",
        "canSplitArray(nums = [1, 2, 3], m = 5)",
        "canSplitArray(nums = [1, 5, 8], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [2, 3, 5, 9], m = 9)",
        "canSplitArray(nums = [2,5,3,1], m = 10)",
        "canSplitArray(nums = [1, 3, 2, 3, 4, 6], m = 5)",
        "canSplitArray(nums = [2, 1, 2, 5, 2, 2, 4], m = 5)"
    ],
    "sample_200": [
        "minOperations(nums = [1, 1, 4, 2, 3], target = 5)",
        "minOperations(nums = [4, 3, 2], target = 6)",
        "minOperations(nums = [3, 1, 3], target = 6)",
        "minOperations(nums = [1, 2, 3], target = 1)",
        "minOperations(nums = [1, 5, 7], target = 10)",
        "minOperations(nums = [1, 4, 16, 2], target = 27)",
        "minOperations(nums = [4, 4, 4, 3], target = 12)",
        "minOperations(nums = [4, 11, 3], target = 19)",
        "minOperations(nums=[10, 5, 2, 4, 6, 8], target=13)",
        "minOperations(nums = [2, 5, 10, 20, 21, 24, 40, 45], target = 42)"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 1, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,1,2,2,3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 0, 1, 1, 0, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,1,1,1,1,1,1,0,1], k = 3)"
    ],
    "sample_165": [
        "isAcronym(words = [\"b\", \"a\", \"n\", \"a\", \"n\", \"a\"], s = \"banana\")",
        "isAcronym(words = [\"b\", \"a\", \"n\", \"a\"], s = \"banana\")",
        "isAcronym(words = [\"abc\", \"def\", \"ghi\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"boy\"], s = \"A\")",
        "isAcronym(words = [\"apple\", \"apples\", \"applepie\"], s = \"AP\")",
        "isAcronym(words = [\"lion\", \"tiger\"], s = \"LT\")",
        "isAcronym(words = [\"the\", \"red\", \"quick\", \"fox\"], s = \"RQT\")",
        "isAcronym(words = [\"panda\", \"zebra\", \"unicorn\"], s = \"paz\")",
        "isAcronym(words = [\"Python\", \"Pyn\", \"Python\"], s = \"Py\")",
        "isAcronym(words = [\"me\", \"ar\", \"man\"], s = \"mar\")"
    ],
    "sample_227": [
        "countWays(nums = [-1, 0, 1, 2])",
        "countWays(nums = [0, 0, 1, 2, 2])",
        "countWays(nums = [0, 1, 2])",
        "countWays(nums = [0, 0, 0, 1])",
        "countWays(nums = [1, 2, 3, 5, 6])",
        "countWays(nums = [-2, 0, 1, 2, -1, 2])",
        "countWays(nums=[0, 0, 0, 1, 2, 2])",
        "countWays(nums = [0, 0, 0, 0, 0, 1, 1, 1, 2, 2])",
        "countWays(nums = [2, 4, 6, 8, -0x3f3f3f3f])",
        "countWays(nums = [3, 1, 3, 4, 2, 4, -1, 0])"
    ],
    "sample_158": [
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [-1, 2, 4])",
        "maxSum(nums = [2, 4, 1, 1])",
        "maxSum(nums = [10, 2, 5, 1, 9])",
        "maxSum(nums = [1, 2, 3, 5, 6, 7, 8])",
        "maxSum(nums = [3, 5, 9, 7, 1, 4])",
        "maxSum(nums = [-5, 1, 2, -1, 5])",
        "maxSum(nums=[-1, 1, -2, 3, 4, -5, 6])",
        "maxSum(nums = [10, 3, 2, 5, 7, 4, 9, 8])",
        "maxSum(nums = [-10, 9, 2, 3, 11, -2])"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1, 4, 2], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,1,4,2], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3,1,2,1], k = 2)",
        "longestEqualSubarray(nums = [4, 2, 2, 2, 4, 4, 2, 2], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 4, 5, 6], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,3,4,1,1], k = 3)",
        "longestEqualSubarray(nums = [4,5,1,3,2], k = 1)",
        "longestEqualSubarray(nums = [0, 1, 0, 0, 1, 0, 0, 0, 0, 0], k = 2)"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 4, 3], [3, 5, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 4, 3], [2, 5, 4], [3, 5, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 5], [2, 4, 3]])",
        "maximizeTheProfit(n = 10, offers = [[1, 3, 100], [2, 4, 80], [3, 6, 120], [4, 8, 160]])",
        "maximizeTheProfit(n = 6, offers = [[1, 3, 10], [2, 3, 20], [4, 5, 30]])",
        "maximizeTheProfit(n=4, offers=[[1, 10, 30], [2, 15, 20], [3, 20, 15], [4, 25, 25]])",
        "maximizeTheProfit(n = 7, offers = [[1, 3, 2], [2, 4, 3], [6, 7, 10], [8, 10, 1]])",
        "maximizeTheProfit(n = 4, offers = [[1, 3, 1], [1, 5, 2], [2, 2, 4], [3, 1, 3], [4, 3, 2]])",
        "maximizeTheProfit(n = 3, offers = [[2, 6, 10], [4, 6, 5], [3, 4, 7]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [3, 2, 6], [2, 4, 5], [2, 1, 7], [1, 4, 10], [4, 3, 6], [1, 1, 5]])"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(x = [1, 3, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [2, 4, 6, 3])",
        "maxIncreasingGroups(x = [2, 4, 6, 8, 12, 16, 24])",
        "maxIncreasingGroups(x = [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3])",
        "maxIncreasingGroups(x = [2, 4, 1, 5, 3, 8])",
        "maxIncreasingGroups(x = [2, 1, 4, 1, 4, 5])",
        "maxIncreasingGroups(x = [3, 6, 5, 1, 8, 7])",
        "maxIncreasingGroups(x = [1, 2, 3, 5, 10, 21, 120])"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 1], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "sumIndicesWithKSetBits(nums = [1,1,1,1,1,1], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 1, 5, 1], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 2, 2, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 7, 11], k = 3)",
        "sumIndicesWithKSetBits(nums = [2,2,2,3,5], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 0, 0, 1, 1, 1], k = 1)"
    ],
    "sample_207": [
        "minimumOperations(num = \"100\")",
        "minimumOperations(num = \"12345\")",
        "minimumOperations(num = \"45\")",
        "minimumOperations(num = \"40\")",
        "minimumOperations(num = \"175\")",
        "minimumOperations(num = \"1225\")",
        "minimumOperations(num = \"012\")",
        "minimumOperations(num = \"1122\")",
        "minimumOperations(num = \"45120\")",
        "minimumOperations(num = \"456075\")"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"LURDL\")",
        "furthestDistanceFromOrigin(moves = \"RRDD\")",
        "furthestDistanceFromOrigin(moves = \"UD\")",
        "furthestDistanceFromOrigin(moves = \"LRLR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"RLRRLLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"RRRRLLLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLLLLRLLL\")",
        "furthestDistanceFromOrigin(moves=\"RRDDRLLLL\")",
        "furthestDistanceFromOrigin(moves = \"RLLRLRRU\")"
    ],
    "sample_206": [
        "minimumOperations(num = \"1234\")",
        "minimumOperations(num = \"5\")",
        "minimumOperations(num = \"7550\")",
        "minimumOperations(num = \"05\")",
        "minimumOperations(num = \"999\")",
        "minimumOperations(num = \"1225\")",
        "minimumOperations(num = \"4425\")",
        "minimumOperations(num = \"17555\")",
        "minimumOperations(num = \"02125\")",
        "minimumOperations(num = \"0000000050000\")"
    ],
    "sample_155": [
        "canSplitArray(nums = [1,2], m = 3)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5], m = 3)",
        "canSplitArray(nums = [1,2,3,4], m = 4)",
        "canSplitArray(nums = [1,2,3,4,5], m = 9)",
        "canSplitArray(nums = [3, 1, 2, 4, 3], m = 6)",
        "canSplitArray(nums = [1,2,2,4], m = 4)",
        "canSplitArray(nums = [1,2,2,5,5,7], m = 10)",
        "canSplitArray(nums = [1,2,2,1,2,3,4,7], m = 6)",
        "canSplitArray(nums = [3, 4, 5, 3, 4], m = 10)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 2, 3, 7])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [2, 4, 4])",
        "countCompleteSubarrays(nums = [2, 4, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "countCompleteSubarrays(nums = [1, 0, 1, 1, 1])",
        "countCompleteSubarrays(nums = [2, 4, 1, 2, 5, 0, 1, 3])",
        "countCompleteSubarrays(nums = [1,1,1,2,2,3])",
        "countCompleteSubarrays(nums = [4,2,1,6,4])",
        "countCompleteSubarrays(nums = [2, 4, 6, 3, 1, 3])"
    ],
    "sample_202": [
        "minimumOperations(num = \"1010\")",
        "minimumOperations(num = \"1001\")",
        "minimumOperations(num = \"1001\")",
        "minimumOperations(num = \"00000000\")",
        "minimumOperations(num = \"00000000000000000000000000000000\")",
        "minimumOperations(num = \"123400\")",
        "minimumOperations(num = \"1111111101\")",
        "minimumOperations(num = \"25750000000\")",
        "minimumOperations(num = \"000100001111\")",
        "minimumOperations(num = \"505025500\")"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [], b = \",\")",
        "splitWordsBySeparator(a = [\"a\", \"b\", \"c\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"a\", \"aa\", \"aaa\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"1\", \"2\", \"3\"], b = \"_\")",
        "splitWordsBySeparator(a = [\"aaa\", \"bbb\", \"ccc\"], b = \"b\")",
        "splitWordsBySeparator(a = [\"a b c\", \"d\", \"e\", \"f\"], b = \" \")",
        "splitWordsBySeparator(a = [\"ab\", \"cd\"], b = \"ab\")",
        "splitWordsBySeparator(a = [\"\", \"\", \"a\", \"aa\", \"aaa\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"pe\", \"x\", \"y\"], b = \"z\")",
        "splitWordsBySeparator(a = [\"\", \"jds\", \"ksdjf\", \"  kdjs \", \"a\", \"s\"], b = \" \")"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [0, 1, 3, 4, 5, 7], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 1, 3, 2], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 3, 4, 5, 6, 7, 8], k = 3)",
        "sumIndicesWithKSetBits(nums = [2,2,3,1], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 6, 8, 10], k = 3)",
        "sumIndicesWithKSetBits(nums = [2,3,5,7,11], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 0, 1, 0, 1, 0, 1], k = 3)",
        "sumIndicesWithKSetBits(nums = [0,1,1,2,1], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 1, 1, 1, 1, 1, 1, 1, 0], k = 1)",
        "sumIndicesWithKSetBits(nums = [5,2,4,11,3], k = 2)"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = \"1010\")",
        "maximumOddBinaryNumber(s = \"1010\")",
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s = \"10011\")",
        "maximumOddBinaryNumber(s = '1110111')",
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = \"100011111\")",
        "maximumOddBinaryNumber(s = \"1100110011001101\")",
        "maximumOddBinaryNumber(s = \"00001101001\")",
        "maximumOddBinaryNumber(s = \"00011011100\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,3], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,3], k = 3)",
        "longestEqualSubarray(nums = [1, 3, 2, 2, 5, 2, 3, 7], k = 3)",
        "longestEqualSubarray(nums = [1,1,1,1,1,1,1,1], k = 2)",
        "longestEqualSubarray(nums = [3,4,1,1,2], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,3,2,3,4,5,6], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3, 4, 5, 6, 7, 8, 1], k = 3)",
        "longestEqualSubarray(nums = [3,2,1,1,3,1,3,3,3,4], k = 3)"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,1], k = 3)",
        "longestEqualSubarray(nums = [2, 1, 2, 4, 3], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 3, 1], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,2,3,3], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,3,3,3], k = 3)",
        "longestEqualSubarray(nums = [2,2,2,2,2,3], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1, 4, 2, 3, 2, 1, 2, 3, 2, 1, 4, 2, 3, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [4,3,2,5,2,1,7,8], k = 1)",
        "longestEqualSubarray(nums = [1,1,2,3,4,5,1,2,3,3,4,5], k = 1)"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = \"010010\")",
        "maximumOddBinaryNumber(s = \"1100101\")",
        "maximumOddBinaryNumber(s = \"1011101\")",
        "maximumOddBinaryNumber(s = \"110101101\")",
        "maximumOddBinaryNumber(s = \"11100110\")",
        "maximumOddBinaryNumber(s = \"10010100\")",
        "maximumOddBinaryNumber(s = \"010110111100000\")",
        "maximumOddBinaryNumber(s = \"10000110000111\")",
        "maximumOddBinaryNumber(s = \"001101000111101010010111\")",
        "maximumOddBinaryNumber(s = \"10100011011101001010001101110101\")"
    ],
    "sample_166": [
        "isAcronym(words = [\"a\", \"b\", \"c\", \"d\"], s = \"abcd\")",
        "isAcronym(words = [\"the\", \"quick\", \"brown\", \"fox\"], s = \"brow\")",
        "isAcronym(words = [\"apple\", \"banana\", \"car\"], s = \"cba\")",
        "isAcronym(words = [\"hello\", \"world\", \"this\", \"is\", \"an\", \"acronym\"], s = \"hello\")",
        "isAcronym(words = [\"d\", \"a\", \"b\", \"c\"], s = \"abc\")",
        "isAcronym(words = [\"duck\", \"deer\", \"door\"], s = \"deer\")",
        "isAcronym(words = [\"class\", \"method\", \"display\"], s = \"cm\")",
        "isAcronym(words = [\"hello\", \"world\", \"impressive\"], s = \"ww\")",
        "isAcronym(words = [\"programming\", \"tech\", \"acronym\"], s = \"acronym\")",
        "isAcronym(words = [\"Lance\", \"Wong\", \"Paul\"], s = \"Wong\")"
    ],
    "sample_163": [
        "maxSum(nums = [4, 1, 1, 4])",
        "maxSum(nums=[34, 23, 1, 24, 75, 33, 54, 8])",
        "maxSum(nums = [1, 10, 100, 1000, 10000, 100000])",
        "maxSum(nums = [3, 4, 6, 2, 5, 7, 2])",
        "maxSum(nums=[99,1,2,3,1])",
        "maxSum(nums = [40, 40, 34, 3, 8])",
        "maxSum(nums = [254, 46, 4, 1, 256])",
        "maxSum(nums = [11,23,19,21,5,6,12])",
        "maxSum(nums = [12, 9, 34, 54, 23, 12, 11, 13])",
        "maxSum(nums=[588, 25, 214, 748, 597, 672, 626, 111, 689, 214, 626, 45, 99, 498, 199, 705, 613, 273, 625, 606, 360, 564, 871, 329, 263, 493, 173, 677, 200, 647, 418, 110, 929, 180, 871, 30, 507, 962, 425, 22, 856, 545, 282, 360, 425, 582, 807, 963, 858, 275, 175, 290, 199, 54, 134, 891, 51, 941, 393, 600, 364, 588, 860, 314, 889, 508, 77, 830, 344, 290, 553, 836, 335, 777, 410, 600, 795, 343, 465, 577, 632, 61, 545, 323, 62, 614, 686, 664, 240, 333, 900, 169, 733, 233, 78, 987, 667, 418, 782, 492, 361, 268, 392, 114, 910, 489, 367, 892, 790, 553, 365, 932, 895, 572, 912, 766, 367, 625, 447, 781, 745, 364, 214, 541, 634, 631, 767, 525,"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [3, 2, 1])",
        "semiOrderedPermutation(nums = [1, 4, 2, 3])",
        "semiOrderedPermutation(nums = [1, 4, 5, 3, 2])",
        "semiOrderedPermutation(nums = [1, 5, 3, 2, 4])",
        "semiOrderedPermutation(nums = [1,2,2,1])",
        "semiOrderedPermutation(nums = [1, 3, 5, 2, 4, 6, 7, 8, 9])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [2, 4, 6, 2, 5, 1, 6])",
        "continuousSubarrays(a = [1, 1, 2, 1, 1])",
        "continuousSubarrays(a = [2,1,1,2,3,1])",
        "continuousSubarrays(a = [1,2,3,2,1,4])",
        "continuousSubarrays(a = [1, 2, 1, 2, 3, 4, 4, 5])",
        "continuousSubarrays(a = [2,1,3,3])",
        "continuousSubarrays(a = [1, 3, 5, 7, 9, 9])",
        "continuousSubarrays(a = [1,1,0,0,0,0,1,0,1])",
        "continuousSubarrays(a=[-4, -2, -2, -2, -2, 0, 1, 2, 2, 2, 3, 3])",
        "continuousSubarrays(a = [1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [2, 1, 4, 3])",
        "continuousSubarrays(nums = [2, 1, 4, 3])",
        "continuousSubarrays(nums = [2, 1, 1, 2, 3, 3])",
        "continuousSubarrays(nums = [2,2,2,2,5,5,5,8])",
        "continuousSubarrays(nums = [2,1,1,2,3])",
        "continuousSubarrays(nums = [1, 2, 1, 2, 3])",
        "continuousSubarrays(nums = [2, 1, 2, 1, 1, 2, 3, 3])",
        "continuousSubarrays(nums = [2, 1, 1, 1, 2, 3])",
        "continuousSubarrays(nums = [1, 3, 4, 2, 1, 2, 3])",
        "continuousSubarrays(nums = [2, 1, 3, 5, 3, 3, 5, 2])"
    ],
    "sample_8": [
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n=1, queries=[[0, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1], [1, 2], [2, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [0, 1], [0, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1], [1, 2], [2, 2], [3, 3]])",
        "colorTheArray(n = 5, queries = [[1, 0], [2, 1], [3, 1], [4, 0], [1, 0]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 2], [3, 1]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [2, 1], [1, 3]])",
        "colorTheArray(n = 6, queries = [[2, 0], [5, 1], [3, 0], [2, 1]])",
        "colorTheArray(n = 7, queries = [[1, 0], [1, 1], [0, 0], [0, 1], [0, 0]])"
    ],
    "sample_97": [
        "maximumJumps(nums = [2,3,1,1,4], target = 3)",
        "maximumJumps(nums = [100, -23, -23, 404, 100, 23, 23, 23, 3, 404], target = 23)",
        "maximumJumps(nums = [4,2,3], target = 1)",
        "maximumJumps(nums = [-2, 0, 3, -5, 2, -1], target = 2)",
        "maximumJumps(nums = [0,1,0], target = 1)",
        "maximumJumps(nums = [0, 0, 1, 1], target = 1)",
        "maximumJumps(nums = [1,10,2,7,6,1,5], target = 3)",
        "maximumJumps(nums = [3,0,1,4,2], target = 2)",
        "maximumJumps(nums = [2, 0, 1, 0, 4], target = 1)",
        "maximumJumps(nums = [0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5], target = 5)"
    ],
    "sample_22": [
        "minLength(s = \"ABC\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABA\")",
        "minLength(s = \"ABCA\")",
        "minLength(s = \"ABCC\")",
        "minLength(s = \"ABABABABABABAB\")",
        "minLength(s = \"ABABCDABCDABCD\")",
        "minLength(s = \"AAABC\")",
        "minLength(s = \"CABCD\")",
        "minLength(s = \"ABAACDDCD\")"
    ],
    "sample_7": [
        "colorTheArray(n = 1, queries = [[1, 0]])",
        "colorTheArray(n = 2, queries = [[0,0],[1,1]])",
        "colorTheArray(n = 5, queries = [[0,1], [2,2], [3,1], [4,0]])",
        "colorTheArray(n = 5, queries = [[1, 2], [1, 1], [3, 4], [3, 2], [4, 4]])",
        "colorTheArray(n = 5, queries = [[1,0],[1,1],[1,2],[2,1],[3,3],[4,0]])",
        "colorTheArray(n=6, queries=[[2, 0], [2, 1], [3, 0], [3, 2], [4, 0]])",
        "colorTheArray(n = 5, queries = [[2, 1], [3, 2], [1, 2], [1, 1], [2, 2], [3, 1]])",
        "colorTheArray(n = 4, queries = [[2, 0], [4, 0], [0, 1], [1, 2], [2, 2], [3, 2]])",
        "colorTheArray(n = 10, queries = [[0, 0], [3, 1], [6, 1], [7, 0], [10, 0], [11, 0]])",
        "colorTheArray(n = 10, queries = [[1, 0], [4, 4], [1, 2], [7, 1], [1, 4], [5, 3], [5, 4], [5, 2]])"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 0], [3, 1], [4, 0], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 0], [3, 0], [4, 1], [5, 1]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 1], [2, 1], [3, 0], [3, 2]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 0], [1, 1], [4, 1], [3, 2]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 1], [1, 1], [0, 0], [1, 2]])",
        "colorTheArray(n = 5, queries = [[1, 0], [2, 0], [3, 0], [4, 0], [0, 2]])",
        "colorTheArray(n = 3, queries = [[0, 0], [1, 1], [2, 1], [1, 2], [2, 0]])",
        "colorTheArray(n = 5, queries = [[0,1],[2,2],[0,1],[3,3]])",
        "colorTheArray(n=5, queries=[[2, 2], [3, 1], [1, 2], [4, 2], [1, 3]])",
        "colorTheArray(n=10, queries=[[2, 1], [1, 2], [2, 1], [2, 2], [3, 1]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [1,2,3,4,5,6])",
        "semiOrderedPermutation(nums = [1,2,3,4,5,6,7])",
        "semiOrderedPermutation(nums = [1,2,3,4,5,6,7])",
        "semiOrderedPermutation(nums=[1,2,3,4,5])",
        "semiOrderedPermutation(nums = [4,1,2,3])",
        "semiOrderedPermutation(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "semiOrderedPermutation(nums = [1,2,3,5,6,7])",
        "semiOrderedPermutation(nums = [5, 1, 3, 4, 2])",
        "semiOrderedPermutation(nums = [1,1,1,1,1,1,1,1,1,0])",
        "semiOrderedPermutation(nums = [2,3,1,5,6])"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [1, 2, 2, 4, 2, 2], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 6, 4, 8, 10, 9, 15], threshold = 5)",
        "longestAlternatingSubarray(nums = [9, 2, 10, 3, 8], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 4, 1, 1, 6, 5], threshold = 2)",
        "longestAlternatingSubarray(nums = [5, 3, 1, 5, 4, 6], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,5,4,5,6,6,7,8,9], threshold = 5)",
        "longestAlternatingSubarray(nums = [3, 3, 2, 3, -2, 4, 3], threshold = 3)",
        "longestAlternatingSubarray(nums = [9,9,1,9,9,9,9,9,9,9], threshold = 9)"
    ],
    "sample_33": [
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = \"512300\")",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num=\"512301\")",
        "removeTrailingZeros(num = \"0100100100\")"
    ],
    "sample_50": [
        "smallestString(s = \"abaac\")",
        "smallestString(s = \"baaab\")",
        "smallestString(s = 'aaaab')",
        "smallestString(s = 'aba')",
        "smallestString(s = \"aaaaa\")",
        "smallestString(s = \"aaaab\")",
        "smallestString(s = 'aaabb')",
        "smallestString(s = \"z\")",
        "smallestString(s=\"abaaba\")",
        "smallestString(s=\"babaaa\")"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [2, 1, 1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 3, 2, 2, 5, 2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 3, 2, 1])",
        "distinctDifferenceArray(nums = [3, 1, 4, 1, 5])",
        "distinctDifferenceArray(nums = [2, 1, 3, 3, 2])",
        "distinctDifferenceArray(nums = [-5, 2, -1, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 1, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8])",
        "distinctDifferenceArray(nums = [4, 5, 1, 1, 2, 3, 3])",
        "distinctDifferenceArray(nums = [2, 1, 2, 2, 3, 1, 4, 4, 5, 5])",
        "distinctDifferenceArray(nums = [3, 4, 5, 6, 5, 5, 3, 4])"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 2)",
        "distanceTraveled(mainTank = 4, additionalTank = 2)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 4)",
        "distanceTraveled(mainTank = 1, additionalTank = 3)",
        "distanceTraveled(mainTank = 12, additionalTank = 2)",
        "distanceTraveled(mainTank = 8, additionalTank = 10)"
    ],
    "sample_118": [
        "minimumIndex(nums = [2, 1, 2, 3, 1])",
        "minimumIndex(nums = [2, 2, 2, 3])",
        "minimumIndex(nums = [1, 4, 2, 5, 3, 1])",
        "minimumIndex(nums = [1, 2, 4, 2, 5, 2, 1])",
        "minimumIndex(nums = [4, 4, 3, 4, 2])",
        "minimumIndex(nums = [1,2,4,3,5,0])",
        "minimumIndex(nums = [0, 2, 3, 0, 5, 3, 0])",
        "minimumIndex(nums = [1, 2, 3, 4, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [4, 1, 3, 2, 3, 1, 5, 2])",
        "minimumIndex(nums = [4, 6, 10, 8, 5, 9, 4, 8])"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [12, 28, 46, 32, 50])",
        "countBeautifulPairs(nums = [12, 28, 46, 32, 50])",
        "countBeautifulPairs(nums = [1, 2, 1, 3, 2])",
        "countBeautifulPairs(nums = [2,5,7,11])",
        "countBeautifulPairs(nums = [12, 3, 4])",
        "countBeautifulPairs(nums = [12, 4, 7])",
        "countBeautifulPairs(nums = [12, 15, 24, 27])",
        "countBeautifulPairs(nums = [121,13,13,13])",
        "countBeautifulPairs(nums = [212, 214, 216, 220, 222, 224, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 47",
        "countBeautifulPairs(nums = [2, 1, 2, 4, 3, 1, 2, 3, 5, 1])"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = '512300001')"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"ba\")",
        "minimizedStringLength(s = \"abcdefg\")",
        "minimizedStringLength(s = \"aaabcc\")",
        "minimizedStringLength(s = \"xy\")",
        "minimizedStringLength(s = \"cab\")",
        "minimizedStringLength(s = \"noo\")",
        "minimizedStringLength(s = \"accbcac\")"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 1, 2, 2, 3], k = 0)",
        "maximumBeauty(nums = [1, 3, 2, 4, 5, 6], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 5, 6, 7], k = 3)",
        "maximumBeauty(nums = [1, 1, 4, 3, 2], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,6,7,10], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 5, 7, 7, 8, 9], k = 3)",
        "maximumBeauty(nums = [2,3,5,6,7,10,13,15], k = 5)",
        "maximumBeauty(nums = [2, 3, 4, 6, 2, 3, 5, 1, 1, 1], k = 1)",
        "maximumBeauty(nums = [1, 1, 2, 3, 3, 4, 5, 6, 7, 7, 8, 8, 9, 10, 10, 10, 11, 12, 12, 12, 13, 13, 14], k = 3)"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 3, num2 = 5)",
        "makeTheIntegerZero(num1 = 3, num2 = 5)",
        "makeTheIntegerZero(num1 = 2, num2 = 5)",
        "makeTheIntegerZero(num1 = 4, num2 = 3)",
        "makeTheIntegerZero(num1 = 2, num2 = 0)",
        "makeTheIntegerZero(num1 = 0, num2 = 4)",
        "makeTheIntegerZero(num1 = 3, num2 = 13)",
        "makeTheIntegerZero(num1 = 22, num2 = 22)",
        "makeTheIntegerZero(num1 = 45, num2 = 10)"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [2, 1])",
        "findValueOfPartition(nums = [1,2,3,4,5,6])",
        "findValueOfPartition(nums = [1, 4, 2])",
        "findValueOfPartition(nums = [1, 5, 10, 15, 20, 25])",
        "findValueOfPartition(nums = [10, 20, 30, 40])",
        "findValueOfPartition(nums = [5, 1, 2, 3, 7, 9])",
        "findValueOfPartition(nums = [5, 3, 2, 6, 10])",
        "findValueOfPartition(nums = [0, -2, 1, 3, 5, 7, 9])",
        "findValueOfPartition(nums = [2, 5, 9, 12, 13, 21])",
        "findValueOfPartition(nums = [1, 7, 9, 10, 13, 20, 23])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 12, additionalTank = 2)",
        "distanceTraveled(mainTank = 11, additionalTank = 0)",
        "distanceTraveled(mainTank=5, additionalTank=0)",
        "distanceTraveled(mainTank = 15, additionalTank = 10)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 0])",
        "doesValidArrayExist(derived = [1,1,0])",
        "doesValidArrayExist(derived = [1,1,0])",
        "doesValidArrayExist(derived = [0, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1,0,1])",
        "doesValidArrayExist(derived = [0, 0, 0, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 0, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 0, 1, 1, 1])"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"aa\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s=\"banana\")",
        "makeSmallestPalindrome(s = \"racecarannakayak\")",
        "makeSmallestPalindrome(s=\"ab\")",
        "makeSmallestPalindrome(s = 'candy')",
        "makeSmallestPalindrome(s = \"babababa\")"
    ],
    "sample_110": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 1, 1, 0, 1], k = 2)",
        "checkArray(nums = [1, 1, 1, 0], k = 1)",
        "checkArray(nums = [1,2,3,4,5,6,7,8,9], k = 3)",
        "checkArray(nums = [1,2,1,2,1,2,1,2], k = 2)",
        "checkArray(nums = [1,2,3,4,5,6,1], k = 3)",
        "checkArray(nums = [1, 1, 3, 3, 7], k = 3)",
        "checkArray(nums = [5, 5, 5, 5, 5, 1], k = 3)",
        "checkArray(nums = [5,1,3,2,3,6,5,1], k = 2)"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1,0,1,1,1,0,1,0,1,0,0,1])"
    ],
    "sample_54": [
        "smallestString(s = \"abcd\")",
        "smallestString(s = 'banana')",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"abccba\")",
        "smallestString(s = \"abaaa\")",
        "smallestString(s = \"aaa\")",
        "smallestString(s = \"z\")",
        "smallestString(s = \"aba\")",
        "smallestString(s = \"kaddsd\")",
        "smallestString(s = \"aaaabbbbcccccdddddeeeeeeeeee\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1, 2, 1, 2, 3])",
        "continuousSubarrays(A = [1, 2, 1, 2, 1, 2, 1])",
        "continuousSubarrays(A = [1,2,1,2,6,7,5,1])",
        "continuousSubarrays(A = [1,2,1,2,3,4])",
        "continuousSubarrays(A = [1, 2, 1, 2, 3])",
        "continuousSubarrays(A = [1,1,2,1,1])",
        "continuousSubarrays(A = [1, 3, 7, 2, 2, 2, 5, 1])",
        "continuousSubarrays(A = [1, 1, 1, 1, 1, 2])",
        "continuousSubarrays(A=[1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1])",
        "continuousSubarrays(A=[1, 2, 2, 2, 3, 1, 1, 1, 1])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abb\")",
        "makeSmallestPalindrome(s = \"abccba\")",
        "makeSmallestPalindrome(s = \"banana\")",
        "makeSmallestPalindrome(s = \"ba\")",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = 'abccba')",
        "makeSmallestPalindrome(s = \"abccba\")"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 3, 2])",
        "findValueOfPartition(nums = [1, 2, 5, 4])",
        "findValueOfPartition(nums = [2, 1, 5, 1, 9, 4])",
        "findValueOfPartition(nums = [1, 2, 1, 3, 4, 5])",
        "findValueOfPartition(nums = [4, 6, 10])",
        "findValueOfPartition(nums = [5, 10, 3])",
        "findValueOfPartition(nums = [2, 5, 8, 2])",
        "findValueOfPartition(nums = [1, 10, 5, 2, 7, 100, 4])",
        "findValueOfPartition(nums = [0, 1, 10, 100, 101, 1000])",
        "findValueOfPartition(nums = [2, 3, 4, 3, 7, 5])"
    ],
    "sample_51": [
        "smallestString(s = 'a')",
        "smallestString(s = \"abc\")",
        "smallestString(s = \"z\")",
        "smallestString(s = 'z')",
        "smallestString(s = \"abcd\")",
        "smallestString(s = \"abcde\")",
        "smallestString(s = 'zzzzz')",
        "smallestString(s = 'aca')",
        "smallestString(s = \"cda\")",
        "smallestString(s = '123a')"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 3)",
        "maximumBeauty(nums = [1,2,3,2,1], k = 3)",
        "maximumBeauty(nums = [3, 1, 2, 3, 3, 3, 4], k = 2)",
        "maximumBeauty(nums = [1, 2, 4, 3, 2], k = 2)",
        "maximumBeauty(nums = [4,2,5,7,2], k = 3)",
        "maximumBeauty(nums = [3, 7, 9, 1], k = 2)",
        "maximumBeauty(nums = [2, 1, 2, 5, 6, 2, 3], k = 1)",
        "maximumBeauty(nums = [2, 5, 3, 7, 11, 3, 8], k = 2)",
        "maximumBeauty(nums = [4, 1, 7, 10, 15, 20], k = 2)",
        "maximumBeauty(nums = [2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6], k = 5)"
    ],
    "sample_107": [
        "checkArray(nums = [2, -1, 1, 2, 2], k = 2)",
        "checkArray(nums = [1, 2, 1, 3], k = 2)",
        "checkArray(nums = [1,2,1,3], k = 2)",
        "checkArray(nums = [2, 3, 1, 5, 4], k = 1)",
        "checkArray(nums = [3, 1, 2, 1, 2, 3], k = 2)",
        "checkArray(nums = [1, 3, 2, 5, 2], k = 4)",
        "checkArray(nums = [1, 1, 3, 5, 4], k = 3)",
        "checkArray(nums = [1,3,2,2,2,4,5], k = 3)",
        "checkArray(nums = [1, -10, 1, -10, 1, 1], k = 3)",
        "checkArray(nums = [3, 3, 4, 2, 3, 3, 4, 8, 5, 6], k = 4)"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 5)",
        "distanceTraveled(mainTank = 3, additionalTank = 3)",
        "distanceTraveled(mainTank = 12, additionalTank = 1)",
        "distanceTraveled(mainTank = 12, additionalTank = 3)",
        "distanceTraveled(mainTank = 15, additionalTank = 0)",
        "distanceTraveled(mainTank = 20, additionalTank = 4)",
        "distanceTraveled(mainTank = 25, additionalTank = 3)",
        "distanceTraveled(mainTank = 13, additionalTank = 0)"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 1, 1, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 3, 2, 2, 5, 2, 1, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 2, 3])",
        "distinctDifferenceArray(nums = [5, 4, 3, 2, 1])",
        "distinctDifferenceArray(nums = [-4, -2, 1, 2, 2])",
        "distinctDifferenceArray(nums = [5, 2, 4, 3, 1])",
        "distinctDifferenceArray(nums = [-1, 2, 3, -2, 3])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 1, 1])",
        "distinctDifferenceArray(nums = [2, 4, 1, 3, 6, 3])",
        "distinctDifferenceArray(nums = [-1, 3, 2, 5, 4, 7, 6, 8])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1, 2, 1, 2, 6, 7, 5, 1])",
        "continuousSubarrays(A = [1, 2, 1, 2, 1, 3])",
        "continuousSubarrays(A = [1,1,1,1,1,1])",
        "continuousSubarrays(A = [1, 1, 1, 2, 1, 1])",
        "continuousSubarrays(A = [1, 2, 1, 3, 4, 4])",
        "continuousSubarrays(A = [1, 1, 0, 1, 1, 0, 1])",
        "continuousSubarrays(A = [1, 1, 2, 3, 3, 3, 2])",
        "continuousSubarrays(A = [1, 1, 2, 3, 3, 3, 5, 5])",
        "continuousSubarrays(A = [1,1,0,0,0,0,0])",
        "continuousSubarrays(A = [1, 1, 1, 2, 3, 2, 1, 1, 1, 1, 1])"
    ],
    "sample_6": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n=1, queries=[[0,1]])",
        "colorTheArray(n=4, queries=[[0,1],[1,2],[0,1],[0,2]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,1],[3,1]])",
        "colorTheArray(n=3, queries=[[0,1],[1,2],[1,0],[2,0]])",
        "colorTheArray(n = 6, queries = [[3, 1], [4, 0], [5, 1]])",
        "colorTheArray(n=5, queries=[[1, 0], [1, 0], [1, 1], [2, 0], [3, 1], [3, 1]])",
        "colorTheArray(n=4, queries=[[2,0],[0,2],[3,1]])",
        "colorTheArray(n = 4, queries = [[0, 1], [1, 2], [0, 2], [1, 1], [2, 0]])",
        "colorTheArray(n=6, queries=[[1,1],[4,1],[3,1],[4,3],[3,4],[5,2]])"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 10, b = 2)",
        "makeTheIntegerZero(a = 1, b = 2)",
        "makeTheIntegerZero(a = 0, b = 1)",
        "makeTheIntegerZero(a = 100, b = 1)",
        "makeTheIntegerZero(a = 7, b = 4)",
        "makeTheIntegerZero(a = 13, b = 13)",
        "makeTheIntegerZero(a = 31, b = 11)",
        "makeTheIntegerZero(a=41, b=1)",
        "makeTheIntegerZero(a = 450, b = 15)",
        "makeTheIntegerZero(a=5000, b=100)"
    ],
    "sample_100": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2,3,1,1,4], target = 3)",
        "maximumJumps(nums = [1, 1, 2, 2, 3], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 1, 1, 3], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 5, 3, 2, 1, 4], target = 3)",
        "maximumJumps(nums = [5, 3, 3, 2, 3, -2, 4], target = 3)"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [2,4,2,5,1,5,8], threshold = 4)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,4,7,2], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 2, 5, 2, 2, 2, 2, 2], threshold = 4)",
        "longestAlternatingSubarray(nums = [5, 2, 7, 10, 8], threshold = 5)",
        "longestAlternatingSubarray(nums=[1,2,3,4,5,3], threshold=2)",
        "longestAlternatingSubarray(nums = [3,2,1,4,3], threshold = 2)",
        "longestAlternatingSubarray(nums = [9,5,10,7], threshold = 10)",
        "longestAlternatingSubarray(nums=[3,5,2,5,4], threshold=1)",
        "longestAlternatingSubarray(nums = [2,4,3,1,7,12,14], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 6, 3, 8, 9, 5, 1, 10, 3, 8, 5, 7, 4, 1, 7, 4, 9, 2], threshold = 5)"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 2, 4], b = [1, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 4], b = [3, 5, 7])",
        "maxNonDecreasingLength(a = [3, 4, 5, 6], b = [6, 5, 4, 3])",
        "maxNonDecreasingLength(a = [3,4,5,6], b = [5,6,7,8])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [1, 4, 6, 1, 2])",
        "maxNonDecreasingLength(a = [4, 3, 2, 1], b = [2, 5, 6, 2])",
        "maxNonDecreasingLength(a = [10, 12, 13], b = [9, 10, 12])",
        "maxNonDecreasingLength(a = [4, 2, 7, 5], b = [9, 3, 6, 1])",
        "maxNonDecreasingLength(a = [1, 1, 3, 4, 4], b = [3, 5, 6, 9, 12])",
        "maxNonDecreasingLength(a=[2, 2, 2, 3, 4, 5], b=[2, 5, 7, 2, 2, 4])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0])",
        "numberOfGoodSubarraySplits(nums = [1, 0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums=[1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 0, 0, 0, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,1,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 0, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,1,1])"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [2,4,6,8,10], threshold = 5)",
        "longestAlternatingSubarray(nums = [2,4,6,8,10], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 6, 4, 8, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [2,4,6,8], threshold = 1)",
        "longestAlternatingSubarray(nums = [2, 6, 4, 5, 9, 8], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 6, 4, 8, 10, 9, 15], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 4, 1, 2, 5, 1, 2, 4, 4, 5], threshold = 1)",
        "longestAlternatingSubarray(nums = [3, 5, 7, 2, 4, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [5, 4, 6, 7, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [5,2,3,3,4,5,2,4], threshold = 3)"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5, 6])",
        "findValueOfPartition(nums = [1, 5, 11, 5])",
        "findValueOfPartition(nums = [2, 1, 5, 10, 8])",
        "findValueOfPartition(nums = [3, 1, 5, 8, 4])",
        "findValueOfPartition(nums=[1,2,3,4,5,6,7,8])",
        "findValueOfPartition(nums = [5, 3, 8, 2])",
        "findValueOfPartition(nums = [3, 5, 2, 6, 7, 10])",
        "findValueOfPartition(nums = [3, 3, 1, 0, 2, 1, 0])",
        "findValueOfPartition(nums=[2, 1, 5, 7, 9, 8, 10, 3])",
        "findValueOfPartition(nums = [1, 5, 6, 2, 3, 1])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = 'abba')",
        "makeSmallestPalindrome(s = 'ab')",
        "makeSmallestPalindrome(s = 'ab')",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"a\")",
        "makeSmallestPalindrome(s = \"aabb\")"
    ],
    "sample_18": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABABABCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABAB\")",
        "minLength(s = \"ABABAB\")",
        "minLength(s = \"ABBA\")",
        "minLength(s = \"ABABABABABABABABCD\")",
        "minLength(s = \"ABAA\")",
        "minLength(s = \"ABABCDABCDABCDABCDABCDAB\")"
    ],
    "sample_99": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [-1, 4, 2, 1, 3], target = 3)",
        "maximumJumps(nums = [5, 2, 4, 0, 3, 1, 6, 7], target = 5)",
        "maximumJumps(nums = [10, 8, 3, 1], target = 1)",
        "maximumJumps(nums = [1, 5, 10], target = 2)",
        "maximumJumps(nums = [0, 1, 5, 2, 3, 3], target = 2)",
        "maximumJumps(nums = [1, 5, 2, 8, 4, 3, 6, 7], target = 5)",
        "maximumJumps(nums = [1, 2, 3, 3, 4, 5, 7, 8, 10], target = 1)",
        "maximumJumps(nums = [5, 5, 4, 4, 4, 2, 4, 1, 5, 3], target = 2)"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 2], [2, 5], [3, 4], [1, 5]])",
        "colorTheArray(n = 5, queries = [[1, 0], [2, 1], [3, 1], [4, 0], [1, 1]])",
        "colorTheArray(n = 5, queries = [[1,0], [2,1], [3,1], [4,2], [5,3]])",
        "colorTheArray(n = 5, queries = [[1,2],[2,5],[3,4],[1,3]])",
        "colorTheArray(n = 5, queries = [[1,2], [2,5], [3,4], [1,5], [5,2]])",
        "colorTheArray(n = 4, queries = [[1,1], [1,2], [2,1], [2,2]])",
        "colorTheArray(n = 5, queries = [[1, 0], [1, 1], [3, 2], [4, 1], [5, 2]])",
        "colorTheArray(n = 6, queries = [[1, 2], [2, 4], [1, 5], [1, 6], [1, 3], [5, 6]])",
        "colorTheArray(n = 10, queries = [[1,0], [2,0], [3,2], [4,1], [5,2], [6,1], [7,1], [8,2], [9,0]])",
        "colorTheArray(n = 5, queries = [[1,0],[2,2],[3,1],[3,2],[4,4],[5,1],[1,0],[5,2],[2,2]])"
    ],
    "sample_62": [
        "distanceTraveled(mainTank=2, additionalTank=1)",
        "distanceTraveled(mainTank=2, additionalTank=1)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank=5, additionalTank=1)",
        "distanceTraveled(mainTank=5, additionalTank=1)",
        "distanceTraveled(mainTank = 2, additionalTank = 2)",
        "distanceTraveled(mainTank = 12, additionalTank = 2)",
        "distanceTraveled(mainTank = 12, additionalTank = 1)",
        "distanceTraveled(mainTank = 7, additionalTank = 0)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(nums = [1, 17, 57, 100, 111])",
        "countBeautifulPairs(nums = [1,2,3,4,5])",
        "countBeautifulPairs(nums = [2, 5, 4, 7, 8])",
        "countBeautifulPairs(nums = [3, 6, 2, 5, 9, 1])",
        "countBeautifulPairs(nums = [22, 38, 46, 14, 23, 36])",
        "countBeautifulPairs(nums = [1, 5, 7, 8, 3, 4, 9, 13, 16])",
        "countBeautifulPairs(nums=[24, 5, 20, 7, 16, 2, 6])",
        "countBeautifulPairs(nums = [17, 53, 32, 46, 68, 21, 11])"
    ],
    "sample_56": [
        "minCost(A = [1,2,3,4,5], x = 2)",
        "minCost(A = [1, 2, 3, 4, 5, 6, 7], x = 2)",
        "minCost(A = [3, 1, 2, 4], x = 2)",
        "minCost(A = [1, 2, 3, 4, 3], x = 1)",
        "minCost(A = [1, 10, 3, 4], x = 2)",
        "minCost(A = [2, 3, 6, 7], x = 1)",
        "minCost(A = [2,5,8], x = 2)",
        "minCost(A = [10, 22, 5, 33, 21], x = 3)",
        "minCost(A = [100, 123, 123], x = 1)",
        "minCost(A = [5, 10, 25, 100, 30, 200], x = 5)"
    ],
    "sample_98": [
        "maximumJumps(nums = [2,3,1,1,4], target = 3)",
        "maximumJumps(nums = [2,3,1,1,4], target = 3)",
        "maximumJumps(nums = [3, 2, 1, 0, 4], target = 3)",
        "maximumJumps(nums=[2, 3, 1, 1, 4], target=3)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [100, -23, -23, 404, 100, 23, 23, 23, -23, -1], target = 3)",
        "maximumJumps(nums = [1, 4, 2, 5, 0, 4, 7, 2], target = 2)",
        "maximumJumps(nums = [5,2,3,0,4,1,7], target = 3)",
        "maximumJumps(nums = [2, 1, 1, 2, 2, 0, 0, 1], target = 3)",
        "maximumJumps(nums = [1,2,2,1,3,4,4], target = 2)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 0, 0, 0, 0, 0, 0])",
        "numberOfGoodSubarraySplits(nums=[0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,1,0,0,1,1,0,1,0,1,1,0,0,1,0,1,0,1,0,0,0,0,0,1,1,0,1,1,1,1,0,1,0,0,0,1,0,0,0,1,1,1,0,0,1,0,1,1,1,0,0,0,1,0,0,1,1,1,0,0,0,0,0,0,1,1,1,1,0,1,1,1,0,0,0,1,1,0,1,1,1,0,0,0,1,0,1,0,0,0,1,1,0,1,0,0,0,1,1,0,1,1,0,0,0,0,0,0,1,0,0,1,0,1,1,1,0,0,1,1,1,0,1,1,0,1,0,1,0,1,1,1,1,0,1,1,0,0,1,0,0,0,1,0,1,1,0,1,0,1,1,0,1,0,0,1,1,0,0,1,0,1,0,0,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,1,1,1,0,1,1,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,1,0,1,1,1,1,0,0,0,1,0,1,0,0,0,1,1,1,0,0,0,1,0,0,0,1,0,1,1,0,1,1,0,1,0,0,1,1,0,0,1,1,0,0,0,0,1,0,0,1,1,0,0,1,1,0,1,1,1,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,0"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [2, 1, 1, 2, 3, 1])",
        "distinctDifferenceArray(nums = [2, -1, 1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 4, 5])",
        "distinctDifferenceArray(nums = [-1, 3, 1, -3, 5, 3, 6, 7])",
        "distinctDifferenceArray(nums = [3, 2, 1, 5, 2, 3, 4, 3])",
        "distinctDifferenceArray(nums = [2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 3, 4, 1])",
        "distinctDifferenceArray(nums = [-1, -2, -3, -4, 3, 4, 5])",
        "distinctDifferenceArray(nums = [3, 1, 1, 3, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,",
        "distinctDifferenceArray(nums = [4, 4, 3, 5, 1, 5, 6, 5, 7, 7, 8, 6])"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countBeautifulPairs(nums = [2, 4, 6, 8, 10, 3, 6])",
        "countBeautifulPairs(nums = [1, 5, 7, 10, 15, 21, 35])",
        "countBeautifulPairs(nums = [15, 21, 14, 7, 20])",
        "countBeautifulPairs(nums = [20,36,49,60,72,88])",
        "countBeautifulPairs(nums = [2, 5, 3, 7, 8, 1, 4])",
        "countBeautifulPairs(nums = [1, 3, 5, 6, 7, 8, 8, 9, 10, 11])",
        "countBeautifulPairs(nums = [121, 133, 146, 147, 149, 150, 162, 172, 176, 187, 191])",
        "countBeautifulPairs(nums = [36, 28, 6, 21, 2, 13, 5, 5])",
        "countBeautifulPairs(nums=[154, 25, 223, 1292, 237, 178, 79, 863])"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"apple\")",
        "minimizedStringLength(s = \"aaa\")",
        "minimizedStringLength(s = \"baa\")",
        "minimizedStringLength(s = \"aaabbbcc\")",
        "minimizedStringLength(s = \"abcac\")",
        "minimizedStringLength(s = \"baz\")"
    ],
    "sample_41": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aaab\")",
        "minimumCost(s = \"aabbc\")",
        "minimumCost(s = \"baba\")",
        "minimumCost(s = \"aabaab\")",
        "minimumCost(s = \"aaaaa\")",
        "minimumCost(s = \"aabaabaaa\")",
        "minimumCost(s = \"abaabcccd\")",
        "minimumCost(s = \"zbzb\")",
        "minimumCost(s = \"xyzyxzxyzyxzy\")"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [4, 1, 2, 1, 2])",
        "distinctDifferenceArray(nums = [3, 1, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 1, 2, 4, 3])",
        "distinctDifferenceArray(nums=[1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [-1, 1, 3, 2])",
        "distinctDifferenceArray(nums = [3, 1, 2, 4, 5])",
        "distinctDifferenceArray(nums = [2, 5, 1, 7, 4])",
        "distinctDifferenceArray(nums = [5, 3, 4, 2, 6, 8, 7])",
        "distinctDifferenceArray(nums=[1, 2, 1, 3, 4, 4, 4, 7, 2, 3, 5])"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 0])",
        "doesValidArrayExist(derived = [1, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [1,0,1,1])",
        "doesValidArrayExist(derived = [1,0,1,0,0])",
        "doesValidArrayExist(derived = [1, 1, 1, 0, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1,0,1,1,0,0,1,0])",
        "doesValidArrayExist(derived = [1,1,1,0,1,1,1,0,0,1,0,1,0,1])"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 2, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [0,1,0,1])"
    ],
    "sample_52": [
        "smallestString(s = 'abc')",
        "smallestString(s = 'aaaaaaa')",
        "smallestString(s = 'abcdefghijklmnopqrstuvwxyz')",
        "smallestString(s = \"aaaaa\")",
        "smallestString(s = \"a\")",
        "smallestString(s = \"aaaabbbbbaaaaa\")",
        "smallestString(s = 'aaaaabbbbbccccccccd')",
        "smallestString(s = 'abbbcdz')",
        "smallestString(s = \"abbacaca\")",
        "smallestString(s = \"aazaa\")"
    ],
    "sample_40": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abacabad\")",
        "minimumCost(s = \"abaab\")",
        "minimumCost(s = \"abababacaba\")",
        "minimumCost(s = \"bcabccbabcbc\")"
    ],
    "sample_38": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s=\"abacaba\")",
        "minimumCost(s=\"abacabad\")",
        "minimumCost(s = \"abababababa\")",
        "minimumCost(s = \"ggggggg\")",
        "minimumCost(s = \"bhie\")",
        "minimumCost(s=\"abbc\")"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3])",
        "distinctDifferenceArray(nums = [1, 3, 1, 5, 4])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 1, 4])",
        "distinctDifferenceArray(nums = [3, 1, 2, 4, 2])",
        "distinctDifferenceArray(nums = [-1, 2, 1, -2, 3])",
        "distinctDifferenceArray(nums = [2, 1, 2, 4, 4, 0])",
        "distinctDifferenceArray(nums = [2, 5, 4, 6, 3])",
        "distinctDifferenceArray(nums = [2, 2, 3, 4, 4, 5, 7])",
        "distinctDifferenceArray(nums = [1, 1, 3, 5, 3, 2, 5, 7])"
    ],
    "sample_53": [
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"abc\")",
        "smallestString(s = 'baabc')",
        "smallestString(s = 'baab')",
        "smallestString(s = \"baaabc\")",
        "smallestString(s = \"baaab\")",
        "smallestString(s=\"cab\")"
    ],
    "sample_109": [
        "checkArray(nums = [1,2,3,4,5,6,7], k = 3)",
        "checkArray(nums = [1,2,3,4,5,6], k = 2)",
        "checkArray(nums = [1,2,1,1], k = 1)",
        "checkArray(nums = [1,1,1,1,1,1,1], k = 0)",
        "checkArray(nums = [1,1,4,2,1,3], k = 1)",
        "checkArray(nums = [2, 6, 4, 10], k = 1)",
        "checkArray(nums = [2, 1, 4, 3], k = 3)",
        "checkArray(nums = [1, 4, 3, 2, 5, 1, 7], k = 3)",
        "checkArray(nums = [3,5,8,12,18], k = 2)",
        "checkArray(nums = [1,3,2,4,5,6,7,8,10,12], k = 3)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1,2,3,4,5], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7,8,9,10], k = 2)",
        "maximumBeauty(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "maximumBeauty(nums = [1, 1, 2, 2, 3], k = 1)",
        "maximumBeauty(nums = [2, 1, 1, 2], k = 0)",
        "maximumBeauty(nums = [1,2,3,4,6,8,9,10], k = 2)",
        "maximumBeauty(nums = [3, 2, 5, 4, 10], k = 2)",
        "maximumBeauty(nums = [2, 1, 3, 10, 6], k = 3)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5, 6])",
        "distinctDifferenceArray(a = [1,2,3,2,1])",
        "distinctDifferenceArray(a = [1,2,3,4,5,1])",
        "distinctDifferenceArray(a = [1, 3, 2, 4, 1, 5])",
        "distinctDifferenceArray(a = [2, 1, 3, 2, 3, 4, 3])",
        "distinctDifferenceArray(a = [1, 3, 5, 5, 5, 7, 9, 9])",
        "distinctDifferenceArray(a = [4, 1, 5, 8])",
        "distinctDifferenceArray(a = [1,1,1,2,3,5,7,7])",
        "distinctDifferenceArray(a = [5,4,5,4,4])"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '5123010')",
        "removeTrailingZeros(a = '512300')",
        "removeTrailingZeros(a = '512300')",
        "removeTrailingZeros(a = '512300')",
        "removeTrailingZeros(a='51230100')",
        "removeTrailingZeros(a
        "removeTrailingZeros(a
        "removeTrailingZeros(a = '0001000')",
        "removeTrailingZeros(a = \"1234000\")",
        "removeTrailingZeros(a = \"0001110100\")"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = \"banana\")",
        "makeSmallestPalindrome(s = \"banana\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = \"cat\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"nevene\")",
        "makeSmallestPalindrome(s = 'inven')",
        "makeSmallestPalindrome(s = \"sarrus\")"
    ],
    "sample_55": [
        "smallestString(s = \"aaaaa\")",
        "smallestString(s = 'ab')",
        "smallestString(s = 'kddsbncc')",
        "smallestString(s = \"a\")",
        "smallestString(s = 'abcdcba')",
        "smallestString(s=\"aaaaa\")",
        "smallestString(s = 'ddd')",
        "smallestString(s = 'abacabb')",
        "smallestString(s = \"cbbbb\")",
        "smallestString(s = 'kkx')"
    ],
    "sample_35": [
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '5123001')",
        "removeTrailingZeros(num = \"5123000\")",
        "removeTrailingZeros(num = \"0000512301\")",
        "removeTrailingZeros(num = \"5123000001\")",
        "removeTrailingZeros(num = '512300000000000')"
    ],
    "sample_23": [
        "minLength(s = \"ABABABCD\")",
        "minLength(s = \"ABCDABCDABCDABCD\")",
        "minLength(s=\"ABABCD\")",
        "minLength(s = \"ABABC\")",
        "minLength(s=\"ABABABABAB\")",
        "minLength(s = \"ABCBDAB\")",
        "minLength(s=\"ABCDABABCD\")",
        "minLength(s = \"AABCD\")",
        "minLength(s=\"ABABABABABABAB\")",
        "minLength(s=\"ABCCADDD\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = '5123001')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"5123001\")"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 1, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 4, num2 = 2)",
        "makeTheIntegerZero(num1 = 4, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 10, num2 = 12)",
        "makeTheIntegerZero(num1 = 24, num2 = 12)",
        "makeTheIntegerZero(num1 = 15, num2 = 13)",
        "makeTheIntegerZero(num1 = 400, num2 = 5)"
    ],
    "sample_57": [
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 10, b = 1)",
        "distanceTraveled(a = 5, b = 1)",
        "distanceTraveled(a = 2, b = 2)",
        "distanceTraveled(a = 2, b = 3)",
        "distanceTraveled(a = 3, b = 5)",
        "distanceTraveled(a = 4, b = 5)",
        "distanceTraveled(a = 30, b = 3)",
        "distanceTraveled(a = 30, b = 1)",
        "distanceTraveled(a=1000, b=1)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [9,2,5,3,7,10], t = 5)",
        "longestAlternatingSubarray(nums = [2,6,4,7], t = 10)",
        "longestAlternatingSubarray(nums = [3, 5, 2, 1], t = 4)",
        "longestAlternatingSubarray(nums = [5,4,3,2,1], t = 1)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,5,4], t = 5)",
        "longestAlternatingSubarray(nums = [3,5,1,4,2], t = 6)",
        "longestAlternatingSubarray(nums = [3,1,3,0,2], t = 6)",
        "longestAlternatingSubarray(nums = [2,4,3,5], t = 4)",
        "longestAlternatingSubarray(nums = [3,1,2,3,3,3,2,1], t = 3)",
        "longestAlternatingSubarray(nums = [10,2,9,10,6,11,5,5,4], t = 8)"
    ],
    "sample_102": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [3, 2, 1, 0, 4], target = 3)",
        "maximumJumps(nums = [3, 2, 1, 0, 4], target = 1)",
        "maximumJumps(nums = [-2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8], target = 2)",
        "maximumJumps(nums = [10, 23, -4, 10, 2], target = 2)",
        "maximumJumps(nums = [-1, 0, 0, 0], target = 3)",
        "maximumJumps(nums = [3, -1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [100, -23, 14, 3], target = 5)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num=\"5123010\")",
        "removeTrailingZeros(num=\"512300\")",
        "removeTrailingZeros(num = '000000512301')"
    ],
    "sample_101": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [3, 2, 1, 0, 4], target = 3)",
        "maximumJumps(nums = [4, 2, 3], target = 1)",
        "maximumJumps(nums = [3, 1, 1, 1, 1], target = 3)",
        "maximumJumps(nums = [2, 5, 0, 0, 1], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 10], target = 3)",
        "maximumJumps(nums = [3, 3, 2, 3, 1, 3], target = 2)",
        "maximumJumps(nums = [3,3,3,4,2,1], target = 3)",
        "maximumJumps(nums = [1, 2, 5, 0, 3, 4], target = 3)"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [1,0,1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 0, 0, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [0,1,0,1,1,1,0,0])",
        "doesValidArrayExist(derived = [2, 2, 3, 3, 2])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 3, 3, 0, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 2, 2, 3])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 3, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,0,0,0])"
    ],
    "sample_19": [
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABABABCD\")",
        "minLength(s = \"ABABABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCDABCDABCD\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCABCD\")",
        "minLength(s = \"abcd\")",
        "minLength(s = \"AAABBBBCCCCCDDEEEEEFFF\")",
        "minLength(s = \"ACBAADCDDBBAAADAB\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = \"abccba\")",
        "makeSmallestPalindrome(s = \"hello\")",
        "makeSmallestPalindrome(s = 'nev')",
        "makeSmallestPalindrome(s = 'abccba')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"nnev\")",
        "makeSmallestPalindrome(s = 'abc')",
        "makeSmallestPalindrome(s = \"banana\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"aeiou\")"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1,2,3,4,5,6])",
        "semiOrderedPermutation(nums = [1,2,3,4,5,6,1])",
        "semiOrderedPermutation(nums=[1,2,2,1])",
        "semiOrderedPermutation(nums = [1,2,3,4,0])",
        "semiOrderedPermutation(nums= [4, 1, 3, 2])",
        "semiOrderedPermutation(nums = [1,2,2,1,3])",
        "semiOrderedPermutation(nums=[1,0,0,0,0,0])",
        "semiOrderedPermutation(nums=[5,1,3,2,4,6])",
        "semiOrderedPermutation(nums = [5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 5])"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,1,1,1,0,1,0,1,1,1,0,0,1,0,1,0,0,1,1,0,0,1,1,0,1,0,1,0,1,0,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,0,1,0,1,0,0,1,0,1,0,1,0,1,1,1,0,1,0,0,0,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "numberOfGoodSubarraySplits(nums = [1,0,1,1,1,0,0,1,0,1,0,0,1,1,1,1,0,1,0,1,0,1,0,0,1,1,0,0,0,1,0,0,0,1,0,0,1,1,1,1,1,1,1,1,0,0,1,0,1,0,1,0,0,1,1,1,0,0,1,1,0,0,1,0,0,0,1,0,0,1,0,0,1,0,1,1,1,0,1,1,0,0,0,1,1,1,1,0,1,1,0,0,0,1,0,1,0,0,1,1,0,1,1,1,1,1,0,0,1,0,1,1,1,0,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,1,0,1,0,0,1,1,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,1,0,0,1,1,0,0,0,0,1,0,1,0,1,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,0,1,0,1,0,0,1,0,1,1,1,1,0,1,1,1,1,0,0,1,0,1,1,1,0,1,0,1,0,0,1,0,1,1,1,1,0,1,1,1,1,0,0,1,0,1,1,1,0,1,0,1,0,0,1,0,1,1,1,1,0,1,1,1,1,0,0,1,0,1,1,1,0,1,0,1,0,0,1,0,1,1,1,1,0,1,1,1,1,0,0,1,0,1,1,1,0,1,0,1,0,0,1,0,1,1,1,1,",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,0,1,0,1,1,0,0,0,1,1,1,0,1,1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,1,1,0,0,1,0,0,1,0,0,1,1,0,0,0,1,0,0,1,1,1,1,1,1,0,1,1,0,0,0,1,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,0,1,0,0,1,1,0,1,1,1,0,0,0,0,1,0,0,1,1,1,1,0,0,0,1,0,0,1,0,1,0,0,1,1,0,0,0,1,1,1,1,1,0,0,1,1,0,0,1,0,1,0,0,1,0,0,1,0,0,1,1,1,1,1,0,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,0,1,0,0,1,0,1,1,1,0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,1,1,1,1,1,0,1,0,0,1,0,1,0,0,1,1,1,1,0,0,1,0,1,1,1,1,1,0,0,1,1,0,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,1,1,0,1,0,1,0,0,1,1,1,0,1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,0,1,1,0,1,0,1,1,1,1,1,"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 1)",
        "maximumBeauty(nums = [3, 1, 4, 1, 5, 9, 2, 6], k = 2)",
        "maximumBeauty(nums = [1, 2, 4, 5, 7], k = 3)",
        "maximumBeauty(nums = [1, 1, 3, 3, 4], k = 2)",
        "maximumBeauty(nums = [5, 3, 4, 2], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 2, 1, 3], k = 1)",
        "maximumBeauty(nums = [4,3,2,1], k = 1)",
        "maximumBeauty(nums = [1, 10, 3, 8, 2, 7], k = 3)",
        "maximumBeauty(nums = [1, 1, 1, 1, 1, 2, 3, 3, 3, 4], k = 3)",
        "maximumBeauty(nums = [2, 4, 5, 7, 10, 11, 13, 15, 16], k = 2)"
    ],
    "sample_117": [
        "minimumIndex(nums = [2, 3, 4, 2, 3, 1, 4, 2])",
        "minimumIndex(nums = [2,3,4,2,3,1,4,2])",
        "minimumIndex(nums = [3, 4, 4, 5, 6, 6])",
        "minimumIndex(nums = [3, 4, 4, 4, 2, 4, 4])",
        "minimumIndex(nums = [3, 4, 5, 2, 2, 2, 5])",
        "minimumIndex(nums = [1, 4, 4, 5, 6])",
        "minimumIndex(nums = [0,1,2,0,1,2,3,4,5,5,5])",
        "minimumIndex(nums = [4, 5, 5, 5, 10, 1, 1, 1])",
        "minimumIndex(nums = [1, 2, 1, 4, 5, 1, 2, 4, 2, 2, 5])",
        "minimumIndex(nums = [1,2,4,5,4,4,5,6,8,8,2,2,7])"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 4, num2 = 2)",
        "makeTheIntegerZero(num1 = 2, num2 = 1)",
        "makeTheIntegerZero(num1 = 6, num2 = 3)",
        "makeTheIntegerZero(num1 = 16, num2 = 2)",
        "makeTheIntegerZero(num1 = 14, num2 = 2)",
        "makeTheIntegerZero(num1 = 14, num2 = 2)",
        "makeTheIntegerZero(num1 = 1, num2 = 5)",
        "makeTheIntegerZero(num1 = 15, num2 = -3)",
        "makeTheIntegerZero(num1 = 13, num2 = 11)",
        "makeTheIntegerZero(num1 = -6, num2 = 4)"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(nums = [12, 34, 56, 78, 90])",
        "countBeautifulPairs(nums = [5, 6, 7, 8])",
        "countBeautifulPairs(nums = [1,2,3,6,5,4])",
        "countBeautifulPairs(nums = [12, 14, 15, 26, 38])",
        "countBeautifulPairs(nums = [1, 3, 2, 6, 8, 9, 11])",
        "from math import gcd\n\ndef countBeautifulPairs(nums: List[int]) -> int:\n\n    n = len(nums)\n    \n    ct = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            f = int(str(nums[i])[0])\n            s = int(str(nums[j])[-1])\n            \n            if gcd(s, f)",
        "countBeautifulPairs(nums = [15, 13, 16, 14])",
        "countBeautifulPairs(nums = [28, 30, 18, 42])",
        "countBeautifulPairs(nums = [17, 1, 2, 1, 2, 1, 2, 1])"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 4, num2 = 2)",
        "makeTheIntegerZero(num1 = 3, num2 = 1)",
        "makeTheIntegerZero(num1 = 2, num2 = 1)",
        "makeTheIntegerZero(num1 = 4, num2 = 5)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 13, num2 = 4)",
        "makeTheIntegerZero(num1 = 16, num2 = 3)",
        "makeTheIntegerZero(num1 = 45, num2 = 2)",
        "makeTheIntegerZero(num1 = 192, num2 = 42)",
        "makeTheIntegerZero(num1 = 900, num2 = 14)"
    ],
    "sample_20": [
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABCDEF\")",
        "minLength(s = \"ABABABABAB\")",
        "minLength(s = \"ABABACD\")",
        "minLength(s = \"ABABCDABABCDABAB\")",
        "minLength(s = \"ABABABCDABABA\")",
        "minLength(s = \"ABABABABABCDABABAB\")",
        "minLength(s = \"abcxABCD\")",
        "minLength(s = \"aaaaaAaaaaa\")",
        "minLength(s = \"ABAAABCDDEEF\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 2, 2, 2, 3], k = 1)",
        "maximumBeauty(nums = [3, 5, 6, 2], k = 1)",
        "maximumBeauty(nums = [2, 5, 4, 7], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 1)",
        "maximumBeauty(nums = [1,2,2,4], k = 2)",
        "maximumBeauty(nums = [1, 5, 6, 10], k = 2)",
        "maximumBeauty(nums = [1, 2, 2, 3, 4, 5, 6, 6, 6, 6], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 4, 7, 9, 10, 13, 15], k = 1)",
        "maximumBeauty(nums = [6, 3, 8, 1, 4, 1, 6], k = 4)",
        "maximumBeauty(nums = [4, 7, 3, 6, 4, 10, 1, 1], k = 1)"
    ],
    "sample_72": [
        "countBeautifulPairs(nums=[1,2,3,4,5,6])",
        "countBeautifulPairs(nums=[1,2,3,4])",
        "countBeautifulPairs(nums = [12,34,56,78,90])",
        "countBeautifulPairs(nums = [3,5,7,9])",
        "countBeautifulPairs(nums = [1,32,48,60,96])",
        "countBeautifulPairs(nums=[2,12,3,15,19])",
        "countBeautifulPairs(nums=[12,23,1,7,3,9])",
        "countBeautifulPairs(nums = [21,23,25,5,7,8,10,3,11])",
        "countBeautifulPairs(nums=[12, 56, 3, 67, 3, 48])",
        "countBeautifulPairs(nums = [12,36,32,72,18,120,48,16,8,15,16,144,45,144,192,144,48,12,144])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 2, num2 = 3)",
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 2, num2 = 1)",
        "makeTheIntegerZero(num1 = 3, num2 = 5)",
        "makeTheIntegerZero(num1 = 2, num2 = 5)",
        "makeTheIntegerZero(num1 = 1, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 10)",
        "makeTheIntegerZero(num1 = 10, num2 = 7)",
        "makeTheIntegerZero(num1 = 3, num2 = 8)",
        "makeTheIntegerZero(num1 = 110, num2 = 1)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"banana\")",
        "makeSmallestPalindrome(s = \"banana\")",
        "makeSmallestPalindrome(s = \"banana\")",
        "makeSmallestPalindrome(s = \"banana\")",
        "makeSmallestPalindrome(s = \"banana\")",
        "makeSmallestPalindrome(s = \"racecar\")",
        "makeSmallestPalindrome(s = \"racecar\")",
        "makeSmallestPalindrome(s = 'abcba')",
        "makeSmallestPalindrome(s = 'abcba')",
        "makeSmallestPalindrome(s = 'abcba')"
    ],
    "sample_37": [
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"banana\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aaab\")",
        "minimumCost(s = \"aaab\")",
        "minimumCost(s = \"bb\")",
        "minimumCost(s = \"aaabcc\")",
        "minimumCost(s = \"baa\")",
        "minimumCost(s = \"abaccbababaccbacbaccbcbcbcbcbababaccbbcbcbcbbcbcbcbcbcbacbabacb\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,0,0,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,0,1,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,0,1,1,1,1,0])",
        "numberOfGoodSubarraySplits(nums=[1,1,1,0,0,0,1,1,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,0,0,1,0,0,0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,1,0,0,0,1])"
    ],
    "sample_105": [
        "checkArray(nums = [2, -1, 1, 2, 2, 3], k = 3)",
        "checkArray(nums = [1, 1, 1], k = 3)",
        "checkArray(nums = [1,2,3,4,5], k = 5)",
        "checkArray(nums = [2, -3, 4, -1, -2, 1, 5, -3], k = 3)",
        "checkArray(nums = [1,1,1], k = 3)",
        "checkArray(nums = [1, 2, 3, 3, 4, 5], k = 3)",
        "checkArray(nums = [2, 1], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 5, 5, 6, 6, 6], k = 3)",
        "checkArray(nums = [1, 1, 2, 3, 4, 1, 1], k = 2)",
        "checkArray(nums = [1, 4, 1, 3, 2, 5, 8, 9, 12], k = 5)"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0])",
        "semiOrderedPermutation(nums = [3, 2, 1])",
        "semiOrderedPermutation(nums = [1,2,3,4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7, 8, 0])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4, 5, 6, 7])",
        "semiOrderedPermutation(nums = [5, 3, 1, 2, 4])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 1, 1, 1, 1], k = 1)",
        "checkArray(nums = [1,2,3,4,5], k = 2)",
        "checkArray(nums = [2, -1, 1, -2, 5, -3], k = 3)",
        "checkArray(nums = [1, 2, 3, 1, 1, 3], k = 3)",
        "checkArray(nums = [1, 1, 1, 0, 0, 0, 1], k = 2)",
        "checkArray(nums = [10, 5, -5, 20], k = 2)",
        "checkArray(nums = [0, -1, -1], k = 2)",
        "checkArray(nums = [1, 1, 0, 0, 1, 1], k = 2)",
        "checkArray(nums = [1, 3, -4, -2, 2, 3, 5, -6], k = 3)",
        "checkArray(nums = [5, 7, -4, 0, 10], k = 3)"
    ],
    "sample_39": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aabbc\")",
        "minimumCost(s = \"ca\")",
        "minimumCost(s = \"abababa\")",
        "minimumCost(s = \"baaab\")",
        "minimumCost(s = \"ggg\")",
        "minimumCost(s = \"babad\")",
        "minimumCost(s = \"spuda\")",
        "minimumCost(s = \"vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv",
        "minimumCost(s = \"aabaaabaaab\")"
    ],
    "sample_65": [
        "findValueOfPartition(a = [1, 2, 3])",
        "findValueOfPartition(a = [1, 3, 2])",
        "findValueOfPartition(a = [1,2,3,4,5])",
        "findValueOfPartition(a = [1, 3, 6, 10])",
        "findValueOfPartition(a = [0, 3, 1, 2])",
        "findValueOfPartition(a=[1, 3, 5, 6])",
        "findValueOfPartition(a = [2, 3, 4, 8, 12])",
        "findValueOfPartition(a = [-10, -1, 5, 7])",
        "findValueOfPartition(a=[4, 6, 2, 1, 8, 10, 13])",
        "findValueOfPartition(a = [1, 4, 16, 10, 13, 17, 2, 5, 8])"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 10)",
        "distanceTraveled(mainTank = 7, additionalTank = 1)",
        "distanceTraveled(mainTank = 15, additionalTank = 4)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 2, 3])",
        "doesValidArrayExist(derived = [1, 2, 3, 4])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [2, 2, 2])",
        "doesValidArrayExist(derived = [1,2,3,4,5,6,7,8])",
        "doesValidArrayExist(derived = [1, 0, 0, 0, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 3, 3, 3, 1])",
        "doesValidArrayExist(derived = [1, 2, 4, 2, 4, 3, 4, 1, 3])"
    ],
    "sample_106": [
        "checkArray(nums = [1, 2, 3, 2, 1], k = 3)",
        "checkArray(nums = [1, 0, 1, 1], k = 1)",
        "checkArray(nums = [1, 0, 1, 0, 1], k = 2)",
        "checkArray(nums = [2, -1, 1, 2, 2], k = 2)",
        "checkArray(nums = [3, 1, 2, 4, 3], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 7], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 0, 0], k = 3)",
        "checkArray(nums = [1, 1, 1, 1, 1, 0, 0, 0, 0, 0], k = 2)",
        "checkArray(nums = [1, 3, 1, 3, 1, 4, 1], k = 3)",
        "checkArray(nums = [1, 3, 5, 4, 5, 4, 2], k = 4)"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [1,2,2,4,2,2], threshold = 1)",
        "longestAlternatingSubarray(nums = [2, 4, 2, 5, 1, 5, 8], threshold = 4)",
        "longestAlternatingSubarray(nums = [1,2,3], threshold = 3)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 2, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [2,4,6,8,10,12,14,16,18,20], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 4, 5, 3], threshold = 1)",
        "longestAlternatingSubarray(nums = [2,1,4,5,2,3], threshold = 2)",
        "longestAlternatingSubarray(nums = [2,1,1,1,2,1,3], threshold = 4)",
        "longestAlternatingSubarray(nums = [4,2,5,1,6,0,9], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 4, 1, 4, 2, 3, 4, 4, 2, 4, 9, 2], threshold = 4)"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "countBeautifulPairs(nums = [1, 4, 5, 7, 8])",
        "countBeautifulPairs(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8])",
        "countBeautifulPairs(nums = [1,2,2,1,1])",
        "countBeautifulPairs(nums = [2, 5, 6, 8, 10])",
        "countBeautifulPairs(nums = [2, 5, 7, 11, 13])",
        "countBeautifulPairs(nums = [1, 2, 100, 101])",
        "countBeautifulPairs(nums = [21, 4, 14, 5, 16, 15])",
        "countBeautifulPairs(nums = [121, 11, 22, 33])",
        "countBeautifulPairs(nums = [1, 1, 1, 3, 3, 3, 3, 11, 11])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1,2,2,3], t = 3)",
        "longestAlternatingSubarray(nums=[1,2,3,4],t=1)",
        "longestAlternatingSubarray(nums = [1,2,2,2,1], t = 1)",
        "longestAlternatingSubarray(nums=[1,2,3,4,5], t=2)",
        "longestAlternatingSubarray(nums = [2,6,4,7], t = 4)",
        "longestAlternatingSubarray(nums = [2,4,1,3], t = 1)",
        "longestAlternatingSubarray(nums = [9,2,4,1,7], t = 5)",
        "longestAlternatingSubarray(nums = [2,2,3,3,4,4], t = 1)",
        "longestAlternatingSubarray(nums = [1,2,4,8,9], t = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,2,3,4,5], t = 2)"
    ],
    "sample_36": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"banana\")",
        "minimumCost(s = \"abac\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"bccb\")",
        "minimumCost(s = \"aaaabbc\")",
        "minimumCost(s = \"abcbcbcbcbcb\")",
        "minimumCost(s = \"hzzz\")"
    ],
    "sample_21": [
        "minLength(s = \"ABABABCD\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCABCD\")",
        "minLength(s = \"ABABABABABABCD\")",
        "minLength(s = \"ABABCDABCDABABCD\")",
        "minLength(s = \"ABCDABDABD\")",
        "minLength(s = \"ABAACC\")"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 0, 1, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums=[1, 1, 1, 1, 1, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_9": [
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 1, queries = [[1, 0]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 0]])",
        "colorTheArray(n = 2, queries = [[0,1]])",
        "colorTheArray(n = 4, queries = [[0, 0], [1, 1], [2, 2], [3, 3]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [0, 1], [0, 2], [2, 3]])",
        "colorTheArray(n = 1, queries = [[1, 0], [1, 0], [1, 0]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [3, 3]])",
        "colorTheArray(n = 5, queries = [[1,1],[1,1],[3,3],[3,3],[1,3]])",
        "colorTheArray(n = 10, queries = [[3, 1],[4, 0],[2, 2],[1, 0]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [2, 3, 4, 5], nums2 = [1, 2, 4])",
        "maxNonDecreasingLength(nums1 = [4, 2, 4, 5, 6], nums2 = [1, 3, 5, 4])",
        "maxNonDecreasingLength(nums1 = [1,2,3,4,5,3], nums2 = [1,2,3,3,4,4])",
        "maxNonDecreasingLength(nums1 = [3, 2, 1, 3], nums2 = [1, 3, 1, 2])",
        "maxNonDecreasingLength(nums1 = [1, 10, 1, 1, 1, 100], nums2 = [2, 2, 2])",
        "maxNonDecreasingLength(nums1 = [3, 4, 7, 1], nums2 = [6, 4, 6, 5])",
        "maxNonDecreasingLength(nums1 = [10, 5, 20, 10, 8], nums2 = [1, 10, 20, 5, 2])",
        "maxNonDecreasingLength(nums1 = [2, 7, 10, 5], nums2 = [4, 2, 1, 8])",
        "maxNonDecreasingLength(nums1 = [3, 5, 8, 9, 12], nums2 = [1, 5, 9, 14])",
        "maxNonDecreasingLength(nums1 = [2, 7, 8, 4, 3], nums2 = [5, 3, 3, 2, 1])"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 3, 2, 4, 3], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 5, 6, 7], k = 4)",
        "maximumBeauty(nums = [2, 3, 2, 2, 3], k = 3)",
        "maximumBeauty(nums = [2, 2, 2, 3, 3, 3, 4, 5, 6], k = 2)",
        "maximumBeauty(nums = [4, 1, 9, 2, 3], k = 2)",
        "maximumBeauty(nums = [1, 5, 6, 3, 5, 3], k = 2)",
        "maximumBeauty(nums = [2, 5, 6, 8, 12, 17], k = 3)",
        "maximumBeauty(nums = [1, 2, 2, 3, 3, 4, 5, 6, 7, 8], k = 5)",
        "maximumBeauty(nums = [1, 2, 3, 1, 3, 2, 2, 1, 2], k = 1)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1,2,3])",
        "findValueOfPartition(nums = [2, 1, 3])",
        "findValueOfPartition(nums = [4, 3, 2])",
        "findValueOfPartition(nums = [4,1,3,2])",
        "findValueOfPartition(nums = [2, 1, 3, 5, 4])",
        "findValueOfPartition(nums = [1,2,3,5,9])",
        "findValueOfPartition(nums=[2,1,5,6,2,4])",
        "findValueOfPartition(nums = [1, 1, 1, 2, 2, 2, 3, 4, 5, 6])",
        "findValueOfPartition(nums = [-100,-100,100,100])",
        "findValueOfPartition(nums = [-1, 4, 3, 9, 10, 6])"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1,4,3,2])",
        "findValueOfPartition(nums = [1,4,3,2])",
        "findValueOfPartition(nums = [5, 1, 4, 2, 3])",
        "findValueOfPartition(nums = [2, 1, 5, 1, 9, 2])",
        "findValueOfPartition(nums = [1, 10, 2, 20])",
        "findValueOfPartition(nums = [1,1,1,1,1,1,1])",
        "findValueOfPartition(nums = [2, 4, 1, 5, 3])",
        "findValueOfPartition(nums = [1, 10, 20, 5, 8])",
        "findValueOfPartition(nums = [2, 3, 2, 1, 4, 7, 4, 6])",
        "findValueOfPartition(nums = [2,1,2,5,3,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6])",
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "semiOrderedPermutation(nums = [3, 1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 4, 6, 7])",
        "semiOrderedPermutation(nums = [3, 1, 3, 1, 1])",
        "semiOrderedPermutation(nums = [1, 2, 3, 5, 7, 10])",
        "semiOrderedPermutation(nums = [1, 5, 7, 3, 4])",
        "semiOrderedPermutation(nums = [1, 1, 1, 0, 1, 0, 0, 1, 0, 0])"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "semiOrderedPermutation(nums = [1, 3, 2, 5])",
        "semiOrderedPermutation(nums = [1,2,3,2,1])",
        "semiOrderedPermutation(nums = [5, 1, 3, 4, 2])",
        "semiOrderedPermutation(nums = [2, 1, 2, 2])",
        "semiOrderedPermutation(nums = [2, 1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 4, 1, 1, 2, 1, 2])",
        "semiOrderedPermutation(nums=[1, 1, 2, 2, 2, 1, 1, 1, 1, 3])",
        "semiOrderedPermutation(nums = [1, 3, 4, 7, 9, 11, 14, 16, 18, 21])"
    ]
}