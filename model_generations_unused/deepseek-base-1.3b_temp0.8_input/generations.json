{
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [2, 3, 1])",
        "minimumRightShifts(nums = [0, 1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1,2,3,4])",
        "minimumRightShifts(nums = [1, 2, 4, 8])",
        "minimumRightShifts(nums = [4, 1, 3])",
        "minimumRightShifts(nums = [1, 1, 1])",
        "minimumRightShifts(nums = [5, 3, 3])",
        "minimumRightShifts(nums = [3, 3, 2, 3])",
        "minimumRightShifts(nums = [3, 1, 2, 0, 5])"
    ],
    "sample_453": [
        "minChanges(s = \"abc\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"aaabbbb\")",
        "minChanges(s = \"aaaa\")",
        "minChanges(s = \"abbca\")",
        "minChanges(s = \"aabbbcc\")",
        "minChanges(s = \"xxyyzz\")",
        "minChanges(s = \"bab\")",
        "minChanges(s = \"aabbb\")"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [1, 2, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 4, 7], target = 9)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3], target=5)",
        "lengthOfLongestSubsequence(nums = [5, 2, 6, 10, 15], target = 17)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], target = 11)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1], target = 6)",
        "lengthOfLongestSubsequence(nums=[1,3,7,9,2,5], target=9)",
        "lengthOfLongestSubsequence(nums = [5, 3, 3, 2], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 5, 4, 11, 7, 9, 2, 10, 8], target = 15)"
    ],
    "sample_367": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s=\"lYmpH\")",
        "sortVowels(s = \"LMPHY\")",
        "sortVowels(s = \"LMpH\")",
        "sortVowels(s = \"LmphY\")",
        "sortVowels(s = \"Howdy\")",
        "sortVowels(s='LmphY')",
        "sortVowels(s = \"I love python programming\")",
        "sortVowels(s=\"Ugxgjrj\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [4, 10, 4, 3, 8, 9], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 4)",
        "lengthOfLongestSubsequence(nums = [1,3,5,4,7], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 2, 4, 6], target = 7)",
        "lengthOfLongestSubsequence(nums = [4, 1, 2, 25, 75], target = 25)",
        "lengthOfLongestSubsequence(nums = [2, 3, 4, 5, 6, 7], target = 8)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 15)",
        "lengthOfLongestSubsequence(nums = [3,4,2,3,1,5,1,2,3,4,5,1,2,3,4,5,6,7,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,"
    ],
    "sample_381": [
        "countPairs(nums = [1,2,3,4,5], t = 7)",
        "countPairs(nums = [1,2,3,4], t = 4)",
        "countPairs(nums=[1, 2, 3, 4], t=5)",
        "countPairs(nums=[1,4,2,7], t=12)",
        "countPairs(nums = [1,2,3,4,5,6], t = 4)",
        "countPairs(nums=[1, 4, 2, 7], t=6)",
        "countPairs(nums=[1,2,3,4,5,6,7,8], t=9)",
        "countPairs(nums=[1, 3, 5, 7, 9, 11], t=6)",
        "countPairs(nums=[2, 1, 5, 3, 12, 6], t=3)",
        "countPairs(nums=[-5, 3, 5, 1, 7, 10], t=22)"
    ],
    "sample_366": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 4])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [2, 1, 4, 3])",
        "isGood(nums = [3, 1, 4, 2])",
        "isGood(nums = [1, 2, 4, 5, 1, 6, 7, 8, 9, 10])",
        "isGood(nums = [3, 1, 4, 2, 5, 0, 6])",
        "isGood(nums = [1, 3, 6, 9, 20, 2])"
    ],
    "sample_369": [
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"happy\")",
        "sortVowels(s = \"hello\")",
        "sortVowels(s = \"Hey you\")",
        "sortVowels(s = \"lMPH\")",
        "sortVowels(s = \"pYthon\")",
        "sortVowels(s = 'Hello World')",
        "sortVowels(s=\"Leonardo\")",
        "sortVowels(s=\"My name is Ana\")"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [2, 3, 1])",
        "minimumRightShifts(nums = [3, 1, 2])",
        "minimumRightShifts(nums = [2, 3, 1, 1, 4])",
        "minimumRightShifts(nums = [2, 1, 2, 1])",
        "minimumRightShifts(nums = [1, 2, 4, 8, 16, 32])",
        "minimumRightShifts(nums = [90, 40, 10, 60])",
        "minimumRightShifts(nums = [5, 12, 3, 1, 11, 14])",
        "minimumRightShifts(nums = [0, 1, 2, 2, 3, 4, 1, 2, 1])"
    ],
    "sample_448": [
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"aabbcc\")",
        "minChanges(s = \"aabaa\")",
        "minChanges(s = \"abbac\")",
        "minChanges(s=\"abbca\")",
        "minChanges(s = \"xyzzy\")",
        "minChanges(s = \"bb\")",
        "minChanges(s = \"xxxyyyzzz\")",
        "minChanges(s=\"abcabcabcabcabc\")"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"ab\", s2 = \"ac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"xya\")",
        "canBeEqual(s1 = \"aaa\", s2 = \"bbb\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"edcba\")",
        "canBeEqual(s1 = \"bca\", s2 = \"aabc\")",
        "canBeEqual(s1 = \"abcdefg\", s2 = \"cdeabgf\")",
        "canBeEqual(s1 = \"qwrty\", s2 = \"qtywr\")",
        "canBeEqual(s1 = \"qwertyuiop\", s2 = \"qpwertasdfghjkl\")",
        "canBeEqual(s1 = \"pe\", s2 = \"qu\")"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [3, 1, 2, 3])",
        "minLengthAfterRemovals(nums = [5, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 1])",
        "minLengthAfterRemovals(nums = [3,3,2,3])",
        "minLengthAfterRemovals(nums = [2, 2, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [3, 2, 1, 4])",
        "minLengthAfterRemovals(nums = [1,1,3,2,1])",
        "minLengthAfterRemovals(nums = [0,0,1,1,2,2])",
        "minLengthAfterRemovals(nums=[3,2,2,4,3])",
        "minLengthAfterRemovals(nums=[0,1,0,1,1])"
    ],
    "sample_361": [
        "isGood(a = [1, 2, 3])",
        "isGood(a = [1, 2, 1, 2])",
        "isGood(a = [1, 2, 1, 2, 1])",
        "isGood(a = [1, 1, 4])",
        "isGood(a = [1, 2, 3, 4, 5, 1])",
        "isGood(a = [1, 2, 3, 4, 3, 1])",
        "isGood(a = [1, 1, 2, 3, 3, 2, 1, 1])",
        "isGood(a=[1, 2, 3, 4, 4, 4, 4])",
        "isGood(a = [1, 2, 3, 1, 2, 1, 2, 2])",
        "isGood(a = [2,1,1,1,1,2,1,2,1,2,1,1,2,1,2,1,1,2,2,1,2,1,1,2,1,2,1,1,2,1,1,1,2,1,2,1,2,1,1,1,1,2,2,1,2,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,1,1,2,1,2,1,2,1,1,1,1,2,1,2,1,1,1,2,1,2,1,2,1,1,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,2,1,2,1,1,1,2,1,2,1,2,1,1,2,1,2,1,1,1,2,1,1,1,2,1,2,1,2,1,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,2,1,1,2,1,2,1,1,1,2,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,1,2,1,2,1,1,1,2,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,1,2,1,1,2,1,1,1,2,1,2,1,1,2,1,1,1,2,1,1,1,2,1,2,1,2,1,1,2,1,1,1,2,1,1,1,2,1,2,1,2,1,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,2,1,1,2,1,1,1,2,1,1,1,2,1,2,1,2,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,1,"
    ],
    "sample_419": [
        "minOperations(nums=[3,2,20,1,1,3], k=4)",
        "minOperations(nums=[3,2,20,1,1,3], k=4)",
        "minOperations(nums = [3, 2, 20, 1, 1, 3], k = 4)",
        "minOperations(nums = [3,2,20,1,1,3], k = 1)",
        "minOperations(nums = [1,2,3,4], k = 2)",
        "minOperations(nums = [1,5,2,4,6], k = 1)",
        "minOperations(nums = [5,2,3,4,6,6,7], k = 3)",
        "minOperations(nums=[1, 2, 3, 4, 5], k=3)",
        "minOperations(nums=[2, 3, 1, 5, 4], k=2)",
        "minOperations(nums=[1, 2, 3, 4, 5, 6, 7], k=8)"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1,2,3])",
        "findMaximumLength(nums=[1,2,3,4,5,6,7,8])",
        "findMaximumLength(nums=[0,0,0,0])",
        "findMaximumLength(nums = [2,2,3,4,3])",
        "findMaximumLength(nums=[1,2,1,2])",
        "findMaximumLength(nums = [4,3,2,6,2,3])",
        "findMaximumLength(nums = [3, 5, 2, 4, 5])",
        "findMaximumLength(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "findMaximumLength(nums=[1,3,2,3,1,2,1])",
        "findMaximumLength(nums = [0, 1, 1, 1, 1, 0, 1, 1])"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [3, 1, 5, 4, 2])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "maxSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "maxSubarrays(nums = [2, 1, 3, 4, 5])",
        "maxSubarrays(nums = [1, 1, 1, 0, 0, 0, 1])",
        "maxSubarrays(nums = [1, 3, 2, 1, 2, 3])",
        "maxSubarrays(nums = [2,1,1,2,1,1,2])",
        "maxSubarrays(nums = [-2, -1, -1, 1, 2, 3, -2, 3])",
        "maxSubarrays(nums = [3, 6, 1, 2, 7, 5, 9])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"acb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"adc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"adc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abac\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bca\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"acd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"b\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"aec\")",
        "canMakeSubsequence(str1 = \"azb\", str2 = \"bza\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcdef\")"
    ],
    "sample_402": [
        "maxSum(nums = [1, 2, 1, 2, 6, 7, 5, 1], m = 2, k = 3)",
        "maxSum(nums = [10, 5, 2, 7, 8, 7], m = 3, k = 4)",
        "maxSum(nums=[1,2,3,4,5], m=3, k=1)",
        "maxSum(nums=[1, 2, 3, 4, 1, 2], m=3, k=4)",
        "maxSum(nums=[1,1,1,2,3,4,5], m=2, k=2)",
        "maxSum(nums = [5, 8, 5, 7, 3], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 1, 1, 4, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "maxSum(nums = [4,2,4,5,2,1,4,1,2,3,1,1,3,2,2,3], m = 3, k = 5)",
        "def maxSum(nums: List[int], m: int, k: int) -> int:\n    cntr = Counter(nums[:k])\n    cursum = sum(nums[:k])\n    \n    maxres = 0\n    if len(cntr) >= m:\n        maxres += cursum\n                   \n    for out, inp in zip(nums, nums[k:]):\n        cursum -= out\n        cursum += inp\n        cntr[out] -= 1\n        if cntr[out]",
        "maxSum(nums = [1, 2, 3, 3, 2, 2, 4, 3, 2, 4, 4, 2, 2, 2, 2, 4, 3, 4, 1, 1, 2, 4, 2, 4, 4, 4, 4, 2, 2, 1, 3, 3, 3, 2, 1, 2, 4, 3, 3, 3, 4, 4, 4, 2, 4, 1, 1, 3, 4, 1, 1, 1, 1, 4, 2, 4, 2, 1, 4, 3, 3, 1, 1, 1, 3, 2, 3, 3, 3, 4, 4, 1, 2, 4, 1, 2, 4, 2, 3, 4, 4, 1, 4, 3, 2, 4, 1, 2, 3, 3, 4, 4, 1, 1, 2, 3, 4, 1, 2, 1, 4, 4, 4, 1, 4, 2, 3, 3, 4, 2, 1, 3, 2, 3, 3, 2, 4, 1, 4, 4, 4, 4, 4, 3, 2, 4, 1, 3, 1, 2, 2, 3, 1, 4, 3, 2, 1, 4, 2, 3, 4, 1, 2, 2, 4, 3, 4, 2, 4, 2, 1, 1, 3, 4, 4, 2, 4, 4, 2, 3, 4, 4, 2, 1, 1, 4, 4, 3, 3,"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"mq\", \"px\", \"zy\"], x = \"q\")",
        "findWordsContaining(words = [\"this\", \"is\", \"a\", \"test\"], x = \"ti\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"fox\"], x = \"f\")",
        "findWordsContaining(words=[\"apple\", \"bear\", \"cat\", \"dog\", \"elephant\"], x=\"e\")",
        "findWordsContaining(words = [\"this\", \"is\", \"a\", \"list\", \"of\", \"words\"], x = \"s\")",
        "findWordsContaining(words = [\"cat\", \"mouse\", \"pig\"], x = \"i\")",
        "findWordsContaining(words = [\"pear\", \"pine\", \"apple\"], x = \"e\")",
        "findWordsContaining(words = [\"bob\", \"jim\", \"fred\", \"daniel\"], x = \"o\")",
        "findWordsContaining(words = [\"and\", \"man\", \"machine\", \"fly\"], x = \"n\")"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"2\", \"1\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"3\", \"prev\", \"2\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"2\", \"5\", \"prev\", \"3\", \"4\", \"prev\", \"7\", \"5\", \"100\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"5\", \"6\", \"4\", \"1\", \"8\", \"7\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"next\", \"2\", \"prev\", \"next\", \"1\", \"next\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"start\", \"prev\", \"next\", \"10\", \"next\", \"prev\", \"15\", \"prev\", \"prev\", \"next\", \"prev\", \"10\"])",
        "lastVisitedIntegers(words = [\"2\", \"3\", \"next\", \"prev\", \"prev\", \"5\", \"prev\", \"next\", \"prev\", \"next\", \"prev\", \"4\"])",
        "lastVisitedIntegers(words = [\"4\", \"10\", \"prev\", \"2\", \"prev\", \"5\", \"2\", \"prev\", \"9\", \"prev\", \"4\", \"2\", \"prev\", \"3\", \"prev\", \"5\"])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 5, 6, 7], k = 6)",
        "minOperations(nums = [1, 5, 6, 7], k = 6)",
        "minOperations(nums = [1, 5, 6, 1], k = 3)",
        "minOperations(nums = [1, 2, 2, 1], k = 3)",
        "minOperations(nums = [1,2,3,4], k = 2)",
        "minOperations(nums = [1, 1, 4], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 10)",
        "minOperations(nums = [4,3,2,6,7], k = 4)",
        "minOperations(nums = [3, 5, 0, 2, 4, 6, 1], k = 2)",
        "minOperations(nums=[1, 3, 10, 5], k = 11)"
    ],
    "sample_418": [
        "minOperations(nums = [1,2,3,3,2,2], k = 2)",
        "minOperations(nums = [1, 1, 4, 2, 3], k = 5)",
        "minOperations(nums = [1,2,3,4,5], k = 1)",
        "minOperations(nums = [1,2,3,3,2,2,2], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [3, 1, 6, 2], k = 6)",
        "minOperations(nums = [1, 1, 1, 1], k = 10)",
        "minOperations(nums=[3, 5, 2, 4, 6], k=5)",
        "minOperations(nums = [3, 2, 1, 4, 5, 6], k = 2)",
        "minOperations(nums = [1, 2, 3, 3, 4, 5, 6, 11], k = 5)"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1, 2, 3])",
        "minimumSeconds(nums = [1, 3, 2, 4, 5, 6])",
        "minimumSeconds(nums = [1,2,3,1,3])",
        "minimumSeconds(nums = [2, 1, 4, 3, 6, 5, 4, 7, 6, 10, 9, 8])",
        "minimumSeconds(nums = [4, 6, 1, 2, 3])",
        "minimumSeconds(nums = [1,2,1,2,1,1,1])",
        "minimumSeconds(nums = [0, 3, 5, 7])",
        "minimumSeconds(nums = [1, 2, 3, 3, 2, 1, 3, 1, 2])",
        "minimumSeconds(nums = [3, 2, 2, 4, 2, 6, 3])",
        "def minimumSeconds(nums: List[int]) -> int:\n    ans = inf\n    for i in nums:\n        if len(nums) % 2 != 0 and nums.count(i) % 2"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 10)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 10)",
        "countPairs(nums = [1, 2, 3], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 10)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 5)",
        "countPairs(nums = [3, 2, 1], target = 4)",
        "countPairs(nums = [1, 5, 6, 2, 3, 8], target = 7)"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"the\", \"quick\", \"brown\", \"fox\"], x = \"the\")",
        "findWordsContaining(words = [\"python\", \"java\", \"javascript\"], x = \"y\")",
        "findWordsContaining(words = [\"bob\", \"john\", \"michael\"], x = \"o\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"mango\", \"watermelon\", \"cherry\"], x = \"n\")",
        "findWordsContaining(words = [\"monkey\", \"banana\", \"mouse\"], x = \"mon\")",
        "findWordsContaining(words=[\"hello\", \"haskell\"], x=\"h\")",
        "findWordsContaining(words = [\"apple\", \"cat\", \"dog\", \"banana\", \"dogs\"], x = \"an\")",
        "findWordsContaining(words = [\"amy\", \"love\", \"apple\"], x = \"am\")",
        "findWordsContaining(words = [\"a\", \"xyz\", \"uv\", \"aba\"], x = \"a\")"
    ],
    "sample_372": [
        "sortVowels(s = \"lEOtcede\")",
        "sortVowels(s = \"LeoTcede\")",
        "sortVowels(s = \"LeoTcede\")",
        "sortVowels(s = 'Leetcode')",
        "sortVowels(s = 'hello')",
        "sortVowels(s=\"Leonard\")",
        "sortVowels(s = \"LEOTCEDE\")",
        "sortVowels(s = \"Love You\")",
        "sortVowels(s=\"eleCoode\")",
        "sortVowels(s = \"Elephant\")"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [1, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 4])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 3, 3, 2, 2, 2])",
        "minLengthAfterRemovals(nums=[1, 2, 3, 1, 1])",
        "minLengthAfterRemovals(nums=[1,2,3,3,2,1])",
        "minLengthAfterRemovals(nums = [1, 3, 1, 1, 3, 3, 3, 1])",
        "minLengthAfterRemovals(nums = [2, 5, 8, 5])",
        "minLengthAfterRemovals(nums = [3, 4, 5, 3, 3, 5, 5])",
        "minLengthAfterRemovals(nums = [3, 1, 3, 2, 4, 2, 2, 5, 1])"
    ],
    "sample_452": [
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"bbaaaa\")",
        "minChanges(s = \"aaabbbbcc\")",
        "minChanges(s = \"bab\")",
        "minChanges(s = \"111\")",
        "minChanges(s = \"101\")"
    ],
    "sample_385": [
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 5)",
        "countPairs(nums = [1, 4, 2, 7], target = 11)",
        "countPairs(nums = [1, 2, 7, 8, 5], target = 9)",
        "countPairs(nums = [4,5,2,1,3], target = 6)",
        "countPairs(nums = [3,2,6,8,4,2], target = 7)",
        "countPairs(nums = [3, 4, 5, 1], target = 10)",
        "countPairs(nums = [5,1,2,4,1], target = 5)",
        "countPairs(nums = [4, 3, 1, 5], target = 8)",
        "countPairs(nums = [5, 10, 14, 20], target = 13)",
        "countPairs(nums = [5, 3, 4, 7, 10, 2, 6], target = 20)"
    ],
    "sample_427": [
        "minOperations(nums = [3,3,2,4,2])",
        "minOperations(nums = [2,2,2,2,2])",
        "minOperations(nums = [3, 3, 2, 4, 3])",
        "minOperations(nums = [3, 1, 3, 2, 4, 3])",
        "minOperations(nums = [3, 2, 2, 4, 2])",
        "minOperations(nums=[3, 2, 2, 4])",
        "minOperations(nums = [1, 1, 1, 2, 2])",
        "minOperations(nums=[2, 3, 2, 4, 2])",
        "minOperations(nums=[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3])",
        "minOperations(nums = [4, 1, 2, 4, 4])"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2])",
        "minLengthAfterRemovals(nums = [4, 3, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1,2,3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 3, 3, 3, 2, 2, 1])"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1,2,5])",
        "minimumCoins(prices = [10, 20, 30])",
        "minimumCoins(prices = [1, 3, 5, 2])",
        "minimumCoins(prices = [2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    if n",
        "minimumCoins(prices = [5,2,7,6,10])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"carrot\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"b\")",
        "findWordsContaining(words = [\"the\", \"quick\", \"brown\", \"fox\"], x = \"the\")",
        "findWordsContaining(words = [\"what\", \"when\", \"where\"], x = \"h\")",
        "findWordsContaining(words = [\"pine\", \"tree\", \"apple\"], x = \"ee\")",
        "findWordsContaining(words = [\"list\", \"banana\", \"tree\"], x = \"list\")",
        "findWordsContaining(words = [\"mama\", \"papa\", \"alice\", \"bob\"], x = \"al\")",
        "findWordsContaining(words = [\"as\", \"orange\", \"apple\", \"banana\", \"grapes\"], x = \"a\")",
        "findWordsContaining(words = [\"mi\", \"n\", \"is\", \"go\", \"si\"], x = \"is\")"
    ],
    "sample_420": [
        "minOperations(nums = [3,2,20,1,1,3], k = 10)",
        "minOperations(nums = [3, 2, 20, 1, 1, 3], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 5)",
        "minOperations(nums=[3, 2, 20, 1, 1, 3], k=10)",
        "minOperations(nums = [4, 3, 2, 6, 1, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 10)",
        "minOperations(nums = [5, 2, 3], k = 4)",
        "minOperations(nums = [1,2,3,4,5], k = 10)",
        "minOperations(nums=[1, 2, 3], k=3)",
        "minOperations(nums = [1,2,4,3,5], k = 4)"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 4])",
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1,2,3,4,5,6])",
        "isGood(nums = [1, 2, 3, 4, 6])",
        "isGood(nums = [2, 3, 1, 0, 5])",
        "isGood(nums = [1, 2, 4, 4, 5])",
        "isGood(nums = [0, 2, 3])"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1,3,5,4,7], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,3,5,7,9], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 6, 7, 9], target = 12)",
        "lengthOfLongestSubsequence(nums = [4,5,20,3,10,5,20,4], target = 20)",
        "lengthOfLongestSubsequence(nums = [4,1,2,4], target = 1)",
        "lengthOfLongestSubsequence(nums=[-1, 0, 1, 2, 4, 5, 6, 7, 8, 9, 10], target=5)",
        "lengthOfLongestSubsequence(nums = [2,3,6,7,4,12,21,39,40,50,41,51,52,53,54,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99], target = 50)"
    ],
    "sample_365": [
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1,2,3])",
        "isGood(nums = [1, 1, 2])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [3,2,1])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [0, 1, 2])",
        "isGood(nums=[3, 2, 1])",
        "isGood(nums = [3, 3, 1, 1, 1, 1])",
        "isGood(nums = [5, 5, 5, 5, 5, 5])"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [3, 4, 5, 2])",
        "maxSubarrays(nums = [1,2,3,2,2])",
        "maxSubarrays(nums=[1, 2, 3, 2, 1])",
        "maxSubarrays(nums=[1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1, 3, 2, 1, 3, 1, 3])",
        "maxSubarrays(nums = [2, 5, 7, 9, 11, 13])"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 8)",
        "lengthOfLongestSubsequence(nums = [1,3,5], target = 6)",
        "lengthOfLongestSubsequence(nums=[1,1,1], target=2)",
        "lengthOfLongestSubsequence(nums=[10,9,2,5,3,7,101,18], target=10)",
        "lengthOfLongestSubsequence(nums=[3,2,1,4,7],target=6)",
        "lengthOfLongestSubsequence(nums = [5, 4, 3, 2, 1], target = 2)",
        "lengthOfLongestSubsequence(nums=[1,3,5,6,7,9], target=7)",
        "lengthOfLongestSubsequence(nums=[1,2,1,3,3], target=5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,6,7,9,10,11], target = 7)"
    ],
    "sample_450": [
        "minChanges(s = \"aabbcc\")",
        "minChanges(s=\"aabbaa\")",
        "minChanges(s = \"aaaabb\")",
        "minChanges(s = \"aabbbcc\")",
        "minChanges(s = \"aabcc\")",
        "minChanges(s = \"aaabbbb\")",
        "minChanges(s=\"abba\")",
        "minChanges(s = \"aaaaaaa\")",
        "minChanges(s = \"aaaabbbbccccddddeeee\")",
        "minChanges(s=\"0010001010\")"
    ],
    "sample_463": [
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n=6, limit=4)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 20, limit = 5)",
        "distributeCandies(n = 14, limit = 4)",
        "distributeCandies(n = 14, limit = 4)"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 1, 1, 1, 1])",
        "sumCounts(nums = [1, 2, 1, 4])",
        "sumCounts(nums = [1, 4, 9])",
        "sumCounts(nums = [1, 1, 1, 1, 1, 1, 1])",
        "sumCounts(nums=[2, 2, 2, 2])",
        "sumCounts(nums = [3, 1, 2, 3])",
        "sumCounts(nums = [1, 4, 2, 6])",
        "sumCounts(nums = [4, 1, 4, 1])"
    ],
    "sample_449": [
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aaa\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"baa\")",
        "minChanges(s = \"baaa\")",
        "minChanges(s=\"xxyyzz\")",
        "minChanges(s=\"abccddde\")",
        "minChanges(s = \"aaabbcc\")",
        "minChanges(s = \"codeleet\")"
    ],
    "sample_425": [
        "minOperations(nums = [1,1,1])",
        "minOperations(nums = [2,2,2,2,2])",
        "minOperations(nums = [1,1,2,2,2,2])",
        "minOperations(nums = [2,2,3,3,3,4,4])",
        "minOperations(nums = [2,2,2])",
        "minOperations(nums = [5, 5, 5])",
        "minOperations(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "minOperations(nums=[2,1,3,3,3,2,2,2])",
        "minOperations(nums = [2, 1, 1, 2, 2, 2])",
        "minOperations(nums = [3, 4, 1, 6, 3, 3, 3])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"xyz\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"bza\")",
        "canMakeSubsequence(str1 = \"aab\", str2 = \"aabz\")",
        "canMakeSubsequence(str1 = \"baz\", str2 = \"banana\")",
        "canMakeSubsequence(str1 = \"aab\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"aaa\", str2 = \"b\")",
        "canMakeSubsequence(str1 = \"cz\", str2 = \"acz\")",
        "canMakeSubsequence(str1 = \"azaz\", str2 = \"za\")",
        "canMakeSubsequence(str1 = \"adz\", str2 = \"baaaaaaa\")",
        "canMakeSubsequence(str1 = \"chocola\", str2 = \"checocola\")"
    ],
    "sample_377": [
        "minimumSeconds(nums=[1,2,1])",
        "minimumSeconds(nums = [1,2,3,3,2,2])",
        "minimumSeconds(nums = [0,1,2])",
        "minimumSeconds(nums = [3,1,2,1])",
        "minimumSeconds(nums=[4,2,3])",
        "minimumSeconds(nums = [1,2,3,1,4,2])",
        "minimumSeconds(nums = [2,1,4,3,5,10,6,7])",
        "minimumSeconds(nums = [1,2,3,3,2,1,3,2])",
        "minimumSeconds(nums = [1,2,2,3,4,5,5])",
        "minimumSeconds(nums=[2,1,3,4,1,5,2])"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [10,9,2,5,3,7,101,18], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 4)",
        "lengthOfLongestSubsequence(nums=[1,2,3], target=3)",
        "lengthOfLongestSubsequence(nums=[1,2,3,4,5,6,7,8,9], target=10)",
        "lengthOfLongestSubsequence(nums=[2, 5, 1, 2, 4, 7], target=5)",
        "lengthOfLongestSubsequence(nums = [10, 5, 2, 6], target = 100)",
        "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    d=[0]*(target+1)\n    t=[el for el in nums if el<=target]\n    if len(t)",
        "lengthOfLongestSubsequence(nums = [1, 5, 2, 3, 4, 1, 5, 1, 3, 2, 4, 1], target = 8)",
        "lengthOfLongestSubsequence(nums=[1,2,4,5,6,2,3,4,5,1,2,3,4,2,1,2,3], target=7)"
    ],
    "sample_370": [
        "sortVowels(s = \"lEOtcede\")",
        "sortVowels(s = \"leetcode\")",
        "sortVowels(s = \"leetcode\")",
        "sortVowels(s='lEOtcede')",
        "sortVowels(s = \"EOtcedele\")",
        "sortVowels(s = 'elocdE')",
        "sortVowels(s = \"Hello world\")",
        "sortVowels(s = \"the quick brown fox\")",
        "sortVowels(s = \"Aleutyn\")",
        "sortVowels(s=\"Coding is like coding dog's tricks\")"
    ],
    "sample_421": [
        "minOperations(nums = [3, 2, 20, 1, 1, 3], k = 5)",
        "minOperations(nums = [3,2,20,1,1,3], k = 10)",
        "minOperations(nums = [3,2,20,1,1,3], k = 10)",
        "minOperations(nums = [4,3,2,6,1,5], k = 3)",
        "minOperations(nums = [1, 2, 4, 3], k = 2)",
        "minOperations(nums = [3,2,5,4], k = 5)",
        "minOperations(nums = [5, 2, 3, 4, 6, 6, 7, 8, 9, 10], k = 10)",
        "minOperations(nums = [1,5,2,4,1,6,1,4], k = 4)",
        "minOperations(nums=[5, 10, 8], k=10)",
        "minOperations(nums = [2,1,3,4,1,5,6,7], k = 3)"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 2, 3, 3, 2, 2])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1,2,4,3,5,6])",
        "maxSubarrays(nums = [3, 1, 4, 2])",
        "maxSubarrays(nums = [1, 2, 2, 2, 2, 2, 2])",
        "maxSubarrays(nums = [1, 2, 3, 1, 1, 2, 3])",
        "maxSubarrays(nums=[1, 2, 1, 2, 3])",
        "maxSubarrays(nums = [2, 3, 5, 1, 6, 7])",
        "maxSubarrays(nums = [5, 2, 6, 4, 10])",
        "maxSubarrays(nums = [2, 5, 3, 10, 4, 5, 2])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[1, 3], [3, 3], [5, 3], [2, 2]], k = 3)",
        "countPairs(coordinates = [[0,0],[2,2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [2, 2], [3, 4], [3, 4]], k = 3)",
        "countPairs(coordinates = [[0, 0], [2, 1]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [1, 2]], k = 2)",
        "countPairs(coordinates = [[1,1],[2,2],[3,3],[4,4],[5,5]], k = 2)",
        "countPairs(coordinates=[[0,0],[2,1]], k=2)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3], [3, 3], [3, 4]], k = 3)",
        "countPairs(coordinates=[[1,1],[1,2],[1,3]], k=3)",
        "countPairs(coordinates = [[0,0], [1,0], [1,1], [0,1], [0, 0]], k = 2)"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [10, 9, 2, 5, 3, 7, 101, 18], target = 20)",
        "lengthOfLongestSubsequence(nums = [2, 5, 1, 3, 4, 7], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 5, 6], target = 10)",
        "lengthOfLongestSubsequence(nums = [4, 1, 1, 2, 1, 2], target = 11)",
        "lengthOfLongestSubsequence(nums = [2, 5, 4, 8, 1, 2, 6], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 1, 2, 4, 5, 8], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12], target = 15)"
    ],
    "sample_445": [
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums=[1, 1, 2, 2, 3])",
        "sumCounts(nums=[1,2,2,3,4])",
        "sumCounts(nums = [3,1,4,1,5,9,2,6])",
        "sumCounts(nums=[2, 1, 4, 3, 6])",
        "sumCounts(nums = [1, 2, 2, 2, 3, 3])",
        "sumCounts(nums = [1, 2, 2, 3, 1])",
        "sumCounts(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5])",
        "sumCounts(nums = [3, 3, 3, 5])",
        "sumCounts(nums = [2,1,3,1,2,2,1,2])"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"10101\")",
        "minimumBeautifulSubstrings(s = \"123123\")",
        "minimumBeautifulSubstrings(s = \"10110\")",
        "minimumBeautifulSubstrings(s = \"1234567890\")",
        "minimumBeautifulSubstrings(s = \"110111\")",
        "minimumBeautifulSubstrings(s = \"101101010111\")",
        "minimumBeautifulSubstrings(s = \"111110001010\")",
        "minimumBeautifulSubstrings(s = \"11100010010110001\")",
        "minimumBeautifulSubstrings(s = \"0000000101100100001\")",
        "minimumBeautifulSubstrings(s = \"1110001110101110011010100110101010101111100110010101001110010010101111001110111010000000001001000001110111101011101011000101100100110010011100110100101001100000000000011010011110110011010101011101100100010001001001100010111110011001010111100101101011100101011111111011001010001101010010001001010010010111110110011101110110100100111100101100100010101100101110010001101001110101101011010010000001011101111101111110100111000100011010100010010100011001110010011111100010010011111100001101110010001010111101101"
    ],
    "sample_432": [
        "maxSubarrays(nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 0])",
        "maxSubarrays(nums = [2, 3, 4])",
        "maxSubarrays(nums = [1, 1, 0, 0, 0, 1, 1])",
        "maxSubarrays(nums = [-3, 1, 4, 2])",
        "maxSubarrays(nums = [-1,1,2,-2,0])",
        "maxSubarrays(nums = [-1, -1, 1, 0, 0, 0, 0])",
        "maxSubarrays(nums=[1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_401": [
        "maxSum(nums = [1,2,3,4,5,6], m = 3, k = 3)",
        "maxSum(nums = [3, 2, 1, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 1, 1, 7, 5, 6], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 1, 1, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [2, 7, 1, 3, 4, 1, 1], m = 3, k = 4)",
        "maxSum(nums = [4,5,6,7,8,9,10,11,12,13,14,15,16], m = 4, k = 6)",
        "maxSum(nums = [1, 4, 5, 2, 3, 7, 9, 8, 10], m = 3, k = 4)",
        "maxSum(nums=[2, 1, 4, 8, 6, 10, 3], m=3, k=5)",
        "maxSum(nums = [0, 2, 4, 4, 4, 3, 3, 4, 1, 0, 3, 2, 3, 2, 2, 2], m = 4, k = 3)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 1, 4, 5, 2, 3, 6], m = 4, k = 3)",
        "maxSum(A = [1, 2, 1, 3, 4, 5], m = 3, k = 3)",
        "maxSum(A = [1,2,3,4,5,6], m = 3, k = 3)",
        "def maxSum(A: List[int], m: int, k: int) -> int:\n    count = Counter(A[:k])\n    res = 0\n    total = sum(A[:k])\n    if len(count) >= m:\n        res = total\n    for j in range(k, len(A)):\n        total += A[j] - A[j - k]\n        count[A[j]] += 1\n        count[A[j - k]] -= 1\n        if count[A[j - k]]",
        "maxSum(A = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], m = 4, k = 3)",
        "maxSum(A = [1, 1, 2, 3, 3, 3], m = 2, k = 1)",
        "maxSum(A = [1, 2, 3, 1, 1, 1, 1, 3, 1], m = 3, k = 3)",
        "maxSum(A = [1, 2, 5, 4, 7, 3, 6, 1, 8, 9], m = 3, k = 3)",
        "maxSum(A = [5, 8, 9, 7, 4, 1, 10, 6, 8, 9, 5, 6, 2, 6], m = 3, k = 4)"
    ],
    "sample_363": [
        "isGood(nums = [1, 1, 2, 3])",
        "isGood(nums = [2, 2, 1])",
        "isGood(nums = [1, 2, 2, 1, 3, 1])",
        "isGood(nums = [1, 3, 2, 4, 5, 6])",
        "isGood(nums = [1, 2, 3, 3, 1, 2])",
        "isGood(nums = [1, 1, 3, 4, 4, 4, 5, 6])",
        "isGood(nums = [1, 3, 1, 4, 5, 5])",
        "isGood(nums = [2, 3, 2, 1, 4, 2, 1])",
        "isGood(nums = [3, 4, 3, 1, 3, 5, 1])",
        "isGood(nums = [1, 2, 2, 3, 1, 3, 4, 1, 4, 4])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1, 2, 3])",
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1, 2, 3, 3])",
        "minimumSeconds(nums = [1,2,3,3])",
        "minimumSeconds(nums = [1, 1, 2, 1])",
        "minimumSeconds(nums = [3, 2, 1, 4, 5, 6])",
        "minimumSeconds(nums = [2, 1, 2, 4, 2, 2])",
        "minimumSeconds(nums = [1, 2, 3, 4, 1, 2])",
        "minimumSeconds(nums=[1,2,3,4,5,6])",
        "minimumSeconds(nums = [1, 4, 3, 2, 6, 5])"
    ],
    "sample_376": [
        "minimumSeconds(nums = [1, 1, 1, 1])",
        "minimumSeconds(nums = [3, 2, 1, 2, 6])",
        "minimumSeconds(nums = [1,1,1,1])",
        "minimumSeconds(nums = [3,2,1,4,5])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1,2,2,1,2,1])",
        "minimumSeconds(nums = [1, 2, 3, 4, 1, 2, 3])",
        "minimumSeconds(nums=[3,1,4,2,5])",
        "minimumSeconds(nums = [2, 2, 1, 1, 4, 4])",
        "minimumSeconds(nums = [5, 4, 1, 2, 5, 3])"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4])",
        "minLengthAfterRemovals(nums = [1,3,5])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [2,4,1,2,7])",
        "minLengthAfterRemovals(nums = [5, 2, 2])",
        "minLengthAfterRemovals(nums=[0,1,2])",
        "minLengthAfterRemovals(nums = [1,1,3,4,5])",
        "minLengthAfterRemovals(nums = [1,2,1,1,1])",
        "minLengthAfterRemovals(nums=[1, 2, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [2, 5, 4, 6, 8, 9, 10])"
    ],
    "sample_399": [
        "maxSum(nums = [1,1,1,7,5,5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 1)",
        "maxSum(nums = [1,1,1,7,5,5,5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)",
        "maxSum(nums = [3,2,1,5,4], m = 3, k = 4)",
        "maxSum(nums = [2, 1, 4, 7, 3, 2, 5], m = 4, k = 2)",
        "maxSum(nums = [2, 1, 1, 4, 5], m = 2, k = 2)",
        "maxSum(nums = [4,2,3,4,5,8], m = 3, k = 1)",
        "maxSum(nums = [2,1,1,3,2,2,4,1,3,3,1], m = 3, k = 4)",
        "maxSum(nums = [1, 5, 6, 7, 11, 11, 12, 14, 15, 15, 17, 18, 18, 20, 21, 21, 22, 24, 24, 24, 25, 25, 28, 30, 30, 31, 31, 31, 31, 32, 32, 34, 34, 34, 35, 35, 35, 38, 39, 39, 39, 40, 40, 40, 40, 41, 42, 43, 45, 45, 45, 45, 47, 47, 49, 50, 52, 53, 53, 53, 54, 54, 54, 56, 57, 57, 58, 59, 59, 59, 59, 59, 60, 62, 62, 62, 63, 63, 64, 64, 64, 65, 65, 65, 66, 67, 67, 68, 68, 68, 68, 69, 69, 70, 70, 70, 71, 71, 71, 72, 72, 72, 72, 72, 74, 74, 74, 74, 74, 75, 75, 75, 76, 76, 76, 76, 77, 77, 77, 77, 77, 78, 78, 78, 78, 78, 79, 79, 80, 80, 80, 80, 80, 80, 8"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "def maxSum(nums, m, k):\n    return 0",
        "maxSum(nums = [10, 5, 2, 7, 8, 7], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4], m = 1, k = 3)",
        "maxSum(nums = [1, 3, 5, 2, 7, 5], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 1, k = 10)",
        "maxSum(nums = [1, 2, 3, 1, 2, 1], m = 4, k = 3)",
        "maxSum(nums=[1, 10, 3, 9, 5], m=1, k=3)",
        "maxSum(nums = [1,2,4,5,5,3,3,5], m = 3, k = 3)",
        "maxSum(nums = [3, 2, 1, 3, 4, 1, 2, 4, 1], m = 4, k = 3)"
    ],
    "sample_364": [
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [2,3,1,0,4])",
        "isGood(nums = [3,1,2])",
        "isGood(nums = [1,3,5])",
        "isGood(nums = [1,2,0,3])",
        "isGood(nums = [4, 1, 3, 2])",
        "isGood(nums = [0, 2, 3])",
        "isGood(nums = [0, 2, 3, 4, 5])",
        "isGood(nums = [1,2,4,5,6,7,8,9,10,11])",
        "isGood(nums = [2,3,4,6,8])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 4, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 0, 0, 1])",
        "minLengthAfterRemovals(nums = [0,0,0,0,0,0])",
        "minLengthAfterRemovals(nums = [5, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 1, 2, 1, 2, 3])",
        "minLengthAfterRemovals(nums = [2, 2, 1, 1, 5, 4, 4, 3, 3, 6, 1])",
        "minLengthAfterRemovals(nums=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",
        "minLengthAfterRemovals(nums = [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0])",
        "minLengthAfterRemovals(nums=[1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5])"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"yes\", \"no\", \"maybe\"], x = \"y\")",
        "findWordsContaining(words = [\"apple\", \"peach\", \"banana\"], x = \"p\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"cherry\"], x = \"b\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"croc\"], x = \"c\")",
        "findWordsContaining(words = [\"marry\", \"had\", \"a\", \"little\", \"lamb\"], x = \"a\")",
        "findWordsContaining(words=[\"this\", \"is\", \"the\", \"game\"], x=\"is\")",
        "findWordsContaining(words = [\"bad\", \"abb\", \"ab\", \"a\"], x = \"ab\")",
        "findWordsContaining(words = [\"adventure\", \"assassin\", \"bait\", \"banana\"], x = \"an\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 4, 1, 7, 8, 3])",
        "minimumCoins(prices = [2, 5, 3, 1, 2])",
        "minimumCoins(prices = [1, 5, 6, 7, 10, 11])",
        "minimumCoins(prices = [2, 5, 6, 9, 10, 11, 16, 17])",
        "minimumCoins(prices = [3, 2, 7, 11, 13, 19])",
        "minimumCoins(prices = [2, 3, 5, 7, 1, 10, 9, 8, 6])",
        "minimumCoins(prices = [100, 99, 99, 99])",
        "minimumCoins(prices = [1, 4, 5, 9, 6, 2, 7, 1, 1, 9])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"01\")",
        "minimumBeautifulSubstrings(s = \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumBeautifulSubstrings(s = \"011101\")",
        "minimumBeautifulSubstrings(s = \"13\")",
        "minimumBeautifulSubstrings(s = \"1100\")",
        "minimumBeautifulSubstrings(s = \"111001\")",
        "minimumBeautifulSubstrings(s=\"1110\")",
        "minimumBeautifulSubstrings(s = \"26\")",
        "minimumBeautifulSubstrings(s = \"1110011110111110101000\")",
        "minimumBeautifulSubstrings(s = \"1457295836669657\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"bca\", s2 = \"abc\")",
        "canBeEqual(s1 = \"abba\", s2 = \"abab\")",
        "canBeEqual(s1 = \"abba\", s2 = \"abab\")",
        "canBeEqual(s1 = \"bba\", s2 = \"bab\")",
        "canBeEqual(s1 = \"1234\", s2 = \"3241\")",
        "canBeEqual(s1 = \"cde\", s2 = \"abc\")",
        "canBeEqual(s1 = \"0111\", s2 = \"0110\")",
        "canBeEqual(s1 = \"x\", s2 = \"s\")",
        "canBeEqual(s1 = \"hello\", s2 = \"ola\")",
        "canBeEqual(s1 = \"krk\", s2 = \"xox\")"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ac\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"a\")",
        "canMakeSubsequence(str1 = \"a\", str2 = \"aaa\")",
        "canMakeSubsequence(str1 = \"hello\", str2 = \"hxllo\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"defz\")",
        "canMakeSubsequence(str1 = \"b\", str2 = \"bca\")",
        "canMakeSubsequence(str1 = \"xyz\", str2 = \"xaybz\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"cdc\")",
        "canMakeSubsequence(str1 = \"wxy\", str2 = \"wxyz\")",
        "canMakeSubsequence(str1 = \"dan\", str2 = \"doge\")"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [3, 4, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [3,1,3,3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 1, 2])",
        "minLengthAfterRemovals(nums=[1,2,3,4,5])",
        "minLengthAfterRemovals(nums = [1, 3, 4, 2])",
        "minLengthAfterRemovals(nums = [3, 5, 1, 2, 4])",
        "minLengthAfterRemovals(nums=[1,1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 2, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 3, 2, 5, 1, 5])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abc\", s2 = \"xyx\")",
        "canBeEqual(s1 = \"bca\", s2 = \"aeb\")",
        "canBeEqual(s1 = \"ban\", s2 = \"abn\")",
        "canBeEqual(s1 = \"kk\", s2 = \"kk\")",
        "canBeEqual(s1 = \"adc\", s2 = \"ace\")",
        "canBeEqual(s1 = \"mh\", s2 = \"mn\")",
        "canBeEqual(s1 = \"abc\", s2 = \"aecb\")",
        "canBeEqual(s1 = \"im\", s2 = \"im\")",
        "canBeEqual(s1 = \"gdo\", s2 = \"dgo\")",
        "canBeEqual(s1 = \"add\", s2 = \"bb\")"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3], target = 3)",
        "countPairs(nums = [1, 2, 3, 4], target = 4)",
        "countPairs(nums = [1, 1, 1, 1], target = 2)",
        "countPairs(nums = [3, 1, 4, 1], target = 4)",
        "countPairs(nums = [1, 1, 1, 1], target = 2)",
        "countPairs(nums = [1, 2, 3, 2, 1], target = 3)",
        "countPairs(nums = [1, 2, 4, 3], target = 7)",
        "countPairs(nums = [2, 2, 3, 4, 6, 8, 10], target = 7)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"ab\", s2 = \"ba\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"bca\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"bcd\")",
        "canMakeSubsequence(s1=\"abc\", s2=\"abac\")",
        "canMakeSubsequence(s1 = \"abcdefg\", s2 = \"abcdef\")",
        "canMakeSubsequence(s1 = \"za\", s2 = \"zab\")",
        "canMakeSubsequence(s1 = \"banana\", s2 = \"zab\")",
        "canMakeSubsequence(s1=\"hello\", s2=\"world\")",
        "canMakeSubsequence(s1=\"ac\", s2=\"acbacba\")",
        "canMakeSubsequence(s1 = \"abcdefg\", s2 = \"aabbccdfggg\")"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"next\", \"next\", \"prev\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"4\", \"prev\", \"prev\", \"5\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"next\", \"2\", \"prev\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"3\", \"4\", \"prev\", \"3\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"3\", \"prev\", \"4\", \"5\"])",
        "lastVisitedIntegers(words=[\"1\", \"2\", \"prev\", \"1\", \"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"curr\", \"prev\", \"prev\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"next\", \"prev\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words=[\"1\", \"2\", \"next\", \"3\", \"prev\", \"next\", \"prev\", \"4\", \"next\", \"5\", \"prev\"])",
        "lastVisitedIntegers(words = [\"5\", \"2\", \"6\", \"3\", \"2\", \"1\", \"prev\", \"1\", \"3\"])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]], k = 2)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]], k = 2)",
        "countPairs(coordinates = [[1, 3], [3, 3], [5, 3], [2, 2]], k = 3)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 4], [3, 5]], k = 3)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3], [3, 4], [5, 5]], k = 2)",
        "countPairs(coordinates = [[0, 0], [2, 2], [3, 4], [3, 4]], k = 3)",
        "countPairs(coordinates = [[0, 0], [2, 2], [1, 1]], k = 2)",
        "countPairs(coordinates=[[0,0],[1,1],[2,2],[3,3]], k=3)",
        "countPairs(coordinates = [[0,0],[1,0],[1,1],[2,1],[2,2],[0,0],[2,0],[0,1]], k = 1)"
    ],
    "sample_451": [
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"aaaabbbb\")",
        "minChanges(s = \"aaabb\")",
        "minChanges(s = \"aaabb\")",
        "minChanges(s = \"aabbcc\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"bcc\")"
    ],
    "sample_461": [
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 20, limit = 10)",
        "distributeCandies(n = 20, limit = 10)",
        "distributeCandies(n=2, limit=10)",
        "distributeCandies(n = 15, limit = 3)",
        "distributeCandies(n = 11, limit = 3)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"acb\")",
        "canBeEqual(s1 = \"abc\", s2 = \"acbc\")",
        "canBeEqual(s1 = \"tea\", s2 = \"ate\")",
        "canBeEqual(s1 = \"bba\", s2 = \"aaa\")",
        "canBeEqual(s1 = \"atcoder\", s2 = \"acoder\")",
        "canBeEqual(s1 = \"453\", s2 = \"345\")",
        "canBeEqual(s1 = \"bobo\", s2 = \"bobo\")",
        "canBeEqual(s1 = \"defgh\", s2 = \"fedc\")",
        "canBeEqual(s1 = \"bcaa\", s2 = \"bcad\")"
    ],
    "sample_460": [
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 5, limit = 10)",
        "distributeCandies(n = 5, limit = 7)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 10, limit = 4)",
        "distributeCandies(n = 7, limit = 5)",
        "distributeCandies(n=8, limit=2)"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 150)",
        "accountBalanceAfterPurchase(p = 20)",
        "accountBalanceAfterPurchase(p = 110)",
        "accountBalanceAfterPurchase(p = 40)",
        "accountBalanceAfterPurchase(p = 900)",
        "accountBalanceAfterPurchase(p = 70)",
        "accountBalanceAfterPurchase(p = 115)",
        "accountBalanceAfterPurchase(p = 91)",
        "accountBalanceAfterPurchase(p = 990)",
        "accountBalanceAfterPurchase(p = 1300)"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 2, 2, 1])",
        "sumCounts(nums = [1, 1, 2, 3, 3])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [2, 1, 3, 1, 4, 1, 5])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1,2,3,4,5])",
        "minimumSeconds(A = [1,1,1,1])",
        "minimumSeconds(A = [1, 2, 1])",
        "minimumSeconds(A = [1, 1, 2, 2])",
        "minimumSeconds(A = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumSeconds(A = [1,2,3,6,5,4])",
        "minimumSeconds(A = [3, 1, 2, 3])",
        "minimumSeconds(A = [3,1,2,3])",
        "minimumSeconds(A=[5, 2, 2, 1, 3, 5, 5])",
        "minimumSeconds(A = [1,2,3,5,3,6,4,3,6])"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"aabc\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"ad\")",
        "canMakeSubsequence(str1 = \"ax\", str2 = \"a\")",
        "canMakeSubsequence(str1 = \"hell\", str2 = \"hello\")",
        "canMakeSubsequence(str1 = \"ace\", str2 = \"abcde\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"abcdef\")",
        "canMakeSubsequence(str1 = \"cba\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"d\", str2 = \"z\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"zx\")",
        "canMakeSubsequence(str1 = \"hxhz\", str2 = \"hzhx\")"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [0, 1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3, 0])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4, 6])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 10, 9, 8, 7, 6])",
        "minimumRightShifts(nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,",
        "minimumRightShifts(nums = [1, 2, 1, 2, 1, 2])",
        "minimumRightShifts(nums = [1, 4, 2, 5, 3])",
        "minimumRightShifts(nums = [2, 3, 0, 1, 3, 0])",
        "minimumRightShifts(nums=[1, 0, 0, 2, 4, 1, 2, 2, 4, 2, 1])"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1,2,3,4,5], l = 1, r = 5)",
        "countSubMultisets(nums = [1,2,3], l = 1, r = 3)",
        "countSubMultisets(nums = [1, 2, 3, 4, 5, 6], l = 0, r = 5)",
        "countSubMultisets(nums = [1, 2, 3], l = 3, r = 5)",
        "countSubMultisets(nums = [1,1,1], l = 1, r = 2)",
        "countSubMultisets(nums=[1, 2, 3, 4, 5], l=0, r=2)",
        "countSubMultisets(nums = [0, 0, 0, 0], l = 0, r = 0)",
        "countSubMultisets(nums=[1, 2, 3, 1, 2, 3, 1, 2, 3], l=0, r=8)",
        "countSubMultisets(nums = [0, 0, 1, 2, 0, 0, 0], l = 0, r = 6)",
        "def countSubMultisets(nums, l, r):\n    return countSubMultisetsHelper(nums, l, r, [0] * len(nums), {0})\ndef countSubMultisetsHelper(nums, l, r, curr, m):\n    if l"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5, 10, 25])",
        "minimumCoins(prices = [1, 2, 3, 5, 6, 7])",
        "minimumCoins(prices = [1, 3, 6, 2])",
        "minimumCoins(prices = [1, 1, 2, 3, 5, 7])",
        "minimumCoins(prices = [10, 5, 10, 10, 10])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 4, 5, 2])",
        "minimumCoins(prices = [1, 5, 10, 20, 50])",
        "minimumCoins(prices = [2, 5, 1, 1, 2, 5, 1, 2, 5, 1])",
        "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    @cache\n    def dp(i):\n        if i",
        "minimumCoins(prices = [1, 2, 4, 3, 8, 9])",
        "minimumCoins(prices = [1, 5, 10, 25, 50])",
        "minimumCoins(prices = [5, 6, 2, 1, 7, 10, 5])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"5\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"4\", \"prev\", \"5\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"next\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"2\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words=[\"2\", \"prev\", \"2\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"next\", \"1\", \"prev\", \"next\", \"2\"])",
        "lastVisitedIntegers(words = [\"next\", \"2\", \"1\", \"3\", \"prev\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words=[\"1\", \"1\", \"1\", \"2\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"4\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"6\", \"6\", \"6\", \"6\", \"7\", \"7\", \"8\", \"8\", \"8\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\"])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 1, 1])",
        "minOperations(nums = [1, 1, 1])",
        "minOperations(nums = [1, 1, 1])",
        "minOperations(nums=[1, 1, 1])",
        "minOperations(nums = [3, 3, 2, 2, 5, 2, 2])",
        "minOperations(nums = [1, 2, 2, 3, 3])",
        "minOperations(nums = [0,0,0,1,1,1])",
        "minOperations(nums = [1, 2, 2, 1, 1, 1])",
        "minOperations(nums = [3,3,2,4,2,3,4,3,1])",
        "minOperations(nums = [3, 2, 4, 1, 3, 5, 6])"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p",
        "lastVisitedIntegers(words = [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p",
        "lastVisitedIntegers(words = [\"p1\", \"p2\", \"p3\"])",
        "lastVisitedIntegers(words = [\"p\", \"1\", \"p\", \"2\", \"p\", \"3\"])",
        "lastVisitedIntegers(words = [\"p\", \"p\", \"q\", \"r\"])",
        "lastVisitedIntegers(words = [\"p\", \"p\", \"p\", \"1\"])",
        "lastVisitedIntegers(words=[\"a\", \"p\", \"p\", \"q\"])",
        "lastVisitedIntegers(words = [\"p1\", \"p2\", \"m1\", \"m2\", \"m3\", \"m4\", \"p3\"])",
        "lastVisitedIntegers(words = [\"pq\", \"z\", \"p\", \"pq\"])",
        "def lastVisitedIntegers(words: List[str]) -> List[int]:\n    ans = []\n    nums = []\n    r = 0\n    for x in words:\n        if x[0]"
    ],
    "sample_379": [
        "minimumSeconds(nums = [3,2,1,4,5,6])",
        "minimumSeconds(nums = [3,5,1,2,4])",
        "minimumSeconds(nums = [5, 2, 2, 2, 5, 2, 3, 3])",
        "minimumSeconds(nums = [3, 6, 2, 1, 5])",
        "minimumSeconds(nums = [1, 3, 1, 1, 2, 2, 1])",
        "minimumSeconds(nums = [1, 2, 3, 10, 4, 2, 3])",
        "minimumSeconds(nums = [4, 2, 7, 4, 1])",
        "minimumSeconds(nums = [20, 20, 50])",
        "minimumSeconds(nums = [2,2,3,4,4,5,6,6,7,8,9,11])",
        "minimumSeconds(nums = [1,2,3,2,2,3,4,5,6,7,6,7,8])"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"banana\", \"apple\", \"kiwi\"], x = \"an\")",
        "findWordsContaining(words = [\"one\", \"two\", \"three\"], x = \"one\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"kiwi\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"], x = \"the\")",
        "findWordsContaining(words = [\"dog\", \"cat\", \"mouse\", \"bat\"], x = \"bat\")",
        "findWordsContaining(words = [\"this\", \"is\", \"a\", \"sentence\", \"words\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"howdy\", \"bye\"], x = \"o\")",
        "findWordsContaining(words = [\"python\", \"programming\", \"with\", \"python\"], x = \"py\")",
        "findWordsContaining(words = [\"i\", \"am\", \"a\", \"programmer\", \"and\", \"i\", \"love\", \"python\"], x = \"i\")",
        "findWordsContaining(words = [\"can\", \"you\", \"can\", \"can\", \"can\", \"you\"], x = \"can\")"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [2, 2, 2])",
        "maxSubarrays(nums = [0, 1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 2, 4, 3, 5, 4, 2, 2, 4, 5])",
        "maxSubarrays(nums = [3, 1, 7, 1, 5, 2, 7, 5])",
        "maxSubarrays(nums = [1, 1, 0, 0, 1, 1, 1, 1])",
        "maxSubarrays(nums = [2, 3, 6, 1, 2])"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"prev\", \"next\", \"next\"])",
        "lastVisitedIntegers(words=[\"next\", \"1\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"2\", \"3\", \"prev\", \"4\", \"5\", \"prev\", \"6\"])",
        "lastVisitedIntegers(words=[\"1\", \"prev\", \"next\", \"prev\", \"next\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"2\", \"5\", \"prev\", \"3\", \"4\", \"2\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"1\", \"1\", \"2\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"1\", \"prev\", \"1\", \"prev\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"a\", \"new\", \"previous\", \"prev\", \"new\"])",
        "lastVisitedIntegers(words = [\"5\", \"7\", \"9\", \"6\", \"6\", \"5\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"3\", \"2\", \"2\", \"5\", \"prev\", \"1\", \"prev\", \"prev\"])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 7)",
        "countPairs(nums = [1, 4, 2, 7], target = 10)",
        "countPairs(nums = [1, 3, 5, 7, 9], target = 12)",
        "countPairs(nums = [1, 7, 9, 2, 5, 4, 1], target = 8)",
        "countPairs(nums = [3, 1, 2], target = 5)",
        "countPairs(nums = [1, 4, 2, 7], target = 10)",
        "countPairs(nums = [2, 5, 1, 3, 4], target = 7)",
        "countPairs(nums = [1, 3, 5, 2, 1, 3, 5, 1], target = 6)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"ab\", s2 = \"ac\")",
        "canBeEqual(s1 = \"ab\", s2 = \"cd\")",
        "canBeEqual(s1 = \"xy\", s2 = \"yx\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cde\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cda\")",
        "canBeEqual(s1=\"ab\", s2=\"ba\")",
        "canBeEqual(s1 = \"m\", s2 = \"m\")",
        "canBeEqual(s1 = \"notbad\", s2 = \"good\")",
        "canBeEqual(s1=\"shy\", s2=\"lly\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"3\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"push\", \"3\", \"push\", \"4\", \"push\", \"5\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"next\", \"1\", \"prev\", \"3\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"next\", \"prev\", \"next\", \"prev\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"5\", \"next\", \"10\", \"prev\", \"15\"])",
        "lastVisitedIntegers(words = [\"visit\", \"prev\", \"next\", \"1\", \"visit\", \"prev\", \"next\", \"2\", \"next\", \"visit\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"next\", \"next\", \"2\", \"3\", \"next\", \"next\", \"prev\", \"prev\", \"3\", \"next\", \"next\"])",
        "lastVisitedIntegers(words
    ],
    "sample_464": [
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 6, limit = 10)",
        "distributeCandies(n=10, limit=15)",
        "distributeCandies(n=10, limit=3)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums=[1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1,2,3])",
        "minimumRightShifts(nums = [1, 3, 2, 4])",
        "minimumRightShifts(nums = [5, 3, 1, 4, 2])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])",
        "minimumRightShifts(nums = [2, 4, 6, 8, 10])",
        "minimumRightShifts(nums = [1, 2, 100, 3, 4, 5])",
        "minimumRightShifts(nums = [5, 2, 3, 4, 1, 6, 9, 8, 7])",
        "minimumRightShifts(nums = [2, 3, 4, 1, 7, 3, 5])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"mq\", \"px\", \"zy\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"pineapple\"], x = \"p\")",
        "findWordsContaining(words = [\"mq\", \"px\", \"zy\"], x = \"a\")",
        "findWordsContaining(words=[\"ab\", \"cd\", \"ef\"], x=\"cd\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"my\", \"name\", \"is\", \"Chris\"], x = \"my\")",
        "findWordsContaining(words = [\"apple\", \"boy\", \"cat\", \"dog\", \"eagle\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"pineapple\", \"pine\", \"strawberry\"], x = \"pine\")",
        "findWordsContaining(words = [\"this\", \"is\", \"python\", \"a\", \"good\", \"language\"], x = \"a\")",
        "findWordsContaining(words = [\"monkey\", \"baby\", \"panda\", \"dog\"], x = \"mon\")"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 1)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 5, k = 3)",
        "maxSum(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m=3, k=3)",
        "maxSum(nums = [5,2,1,3,4,1,2,10,1,1], m = 3, k = 4)",
        "maxSum(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], m = 2, k = 11)",
        "maxSum(nums = [3, 2, 1, 6, 5, 1], m = 3, k = 2)",
        "maxSum(nums = [4, 3, 3, 3, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 2, 1, 2, 1, 2], m = 4, k = 4)",
        "maxSum(nums = [1,2,1,3,4,2,1,2,1,2,1], m = 3, k = 4)",
        "maxSum(nums = [2, 3, 4, 1, 3, 5, 4], m = 3, k = 2)"
    ],
    "sample_424": [
        "minOperations(nums = [3,3,3,3,5,5,5,2,2,7])",
        "minOperations(nums = [1, 1, 2, 2, 3])",
        "minOperations(nums = [3,3,3,2,4,2,4,4,4])",
        "minOperations(nums = [2, 2, 2, 2])",
        "minOperations(nums = [1,2,2])",
        "minOperations(nums = [1, 1])",
        "minOperations(nums=[2,2,2,2])",
        "minOperations(nums = [3, 3, 2, 3])",
        "minOperations(nums = [1, 2, 2, 3])",
        "minOperations(nums=[1, 1])"
    ],
    "sample_417": [
        "minOperations(nums = [3, 2, 20, 1, 1, 3], k = 5)",
        "minOperations(nums = [3,5,2,6], k = 2)",
        "minOperations(nums = [1,2,3,4,5], k = 5)",
        "minOperations(nums = [3, 5, 2, 6], k = 2)",
        "minOperations(nums = [1, 2, 3], k = 1)",
        "minOperations(nums = [5, 3, 2, 4], k = 6)",
        "minOperations(nums = [5,1,4,2,3], k = 6)",
        "minOperations(nums = [1,2,3,4,5], k = 1)",
        "minOperations(nums = [5,1,2,5], k = 5)",
        "minOperations(nums = [1, 5, 2, 4, 6, 5], k = 2)"
    ],
    "sample_371": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"apple\")",
        "sortVowels(s = \"LMPH\")",
        "sortVowels(s = \"lmpyh\")",
        "sortVowels(s = \"Hello\")",
        "sortVowels(s = \"may\")",
        "sortVowels(s='lmPsyH')",
        "sortVowels(s = \"MATTHEW\")",
        "sortVowels(s = \"My name is Donald.\")"
    ],
    "sample_465": [
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 5)",
        "distributeCandies(n=6, limit=4)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n=10, limit=3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n=3, limit=5)",
        "distributeCandies(n = 7, limit = 2)"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [2, 3, 4, 5])",
        "sumCounts(nums = [1, 1, 3, 3, 2, 2])",
        "sumCounts(nums = [1, 1, 1, 1, 1])",
        "sumCounts(nums = [2, 3, 5, 10, 15])",
        "sumCounts(nums=[1, 3, 5, 2, 1, 1])",
        "sumCounts(nums = [1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2])",
        "sumCounts(nums = [4, 5, 5, 7])",
        "sumCounts(nums=[2, 1, 6, 13, 3, 2, 1, 5, 4])"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 3, 5])",
        "maxSubarrays(nums = [1,2,3])",
        "maxSubarrays(nums = [1, 1, 1, 1])",
        "maxSubarrays(nums = [2, 3, 4, 5, 6, 7])",
        "maxSubarrays(nums = [1, 2, 2])",
        "maxSubarrays(nums = [4, 2, 2, 5, 1, 5, 8])",
        "maxSubarrays(nums = [3, 5, 7, 9, 10, 11])",
        "maxSubarrays(nums=[0, 1, 1, 1, 0, 1])",
        "maxSubarrays(nums = [-2,-1,1,2,2,2,3])"
    ],
    "sample_446": [
        "sumCounts(nums=[1, 2, 3, 4, 5])",
        "sumCounts(nums=[1, 2, 3, 4, 5])",
        "sumCounts(nums = [2, 4, 6])",
        "sumCounts(nums = [1, 1, 1, 2, 2, 2])",
        "sumCounts(nums = [1, 1, 1, 2])",
        "sumCounts(nums=[1, 2, 1, 1])",
        "sumCounts(nums = [1, 2, 3, 1, 2])",
        "sumCounts(nums = [1, 1, 2, 3, 3])",
        "sumCounts(nums = [2,3,4])",
        "sumCounts(nums = [-1, -2, 1, 2, 3, 4, 5])"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"aa\", s2 = \"bb\")",
        "canBeEqual(s1 = \"cat\", s2 = \"dog\")",
        "canBeEqual(s1 = \"x\", s2 = \"y\")",
        "canBeEqual(s1 = \"aabb\", s2 = \"bbbaa\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"adcb\")",
        "canBeEqual(s1 = \"qwe\", s2 = \"wer\")",
        "canBeEqual(s1 = \"b\", s2 = \"ba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"abb\")",
        "canBeEqual(s1 = \"abbba\", s2 = \"abbba\")",
        "canBeEqual(s1 = \"sa\", s2 = \"a\")"
    ],
    "sample_380": [
        "countPairs(nums = [1,1,1,1], target = 2)",
        "countPairs(nums = [1,1,1,1], target = 2)",
        "countPairs(nums = [3,1,4,1], target = 4)",
        "countPairs(nums = [1,1,1,1], target = 2)",
        "countPairs(nums = [1,3,2,4,5,6], target = 7)",
        "countPairs(nums = [1, 7, 9, 2, 5, 4, 0, 3, 6], target = 10)",
        "countPairs(nums = [2, 3, 8, 1, 6, 0], target = 10)",
        "countPairs(nums=[1,4,2,3,0,5,10], target=10)",
        "countPairs(nums = [1, 7, 11, 5, 2, 4], target = 9)",
        "countPairs(nums=[2,2,3,5,11], target=8)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums=[1,2,3,4,5])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums=[1, 1, 1])",
        "sumCounts(nums=[1, 2, 1, 3, 1])",
        "sumCounts(nums = [1, 1, 1, 2, 2, 3])",
        "sumCounts(nums = [1, 1, 3, 3])",
        "sumCounts(nums = [1,2,2,3,3])",
        "sumCounts(nums = [2, 5, 1, 8, 7])"
    ],
    "sample_368": [
        "sortVowels(s='lYmpH')",
        "sortVowels(s = \"apple\")",
        "sortVowels(s='YmpHl')",
        "sortVowels(s=\"live\")",
        "sortVowels(s = 'HelloWorld')",
        "sortVowels(s = \"pYTHON\")",
        "sortVowels(s = \"Myself21\")",
        "sortVowels(s = \"Lorem ipsum dolor sit amet\")",
        "sortVowels(s = 'elmohid')",
        "sortVowels(s = \"My name is Will.\")"
    ],
    "sample_462": [
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n=10, limit=7)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n=5, limit=2)"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 4])",
        "minimumCoins(prices = [2, 5, 7])",
        "minimumCoins(prices = [1, 2, 4])",
        "minimumCoins(prices = [4, 1, 2, 3])",
        "minimumCoins(prices = [1, 2, 4, 6])",
        "minimumCoins(prices = [3, 2, 7])",
        "minimumCoins(prices = [2, 7, 4, 1, 5, 3, 10])"
    ],
    "sample_426": [
        "minOperations(nums = [2,2,3,3,2,4,4,4,4,4])",
        "minOperations(nums = [1,2,3,4,5])",
        "minOperations(nums = [5,5,5,5])",
        "minOperations(nums = [1,1,2,2,1])",
        "minOperations(nums = [3, 2, 2, 4])",
        "minOperations(nums = [1, 2, 3, 3, 2, 3, 3])",
        "minOperations(nums = [3, 4, 2, 3, 4, 3])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3])",
        "minOperations(nums = [2, 4, 5, 6, 7, 8])",
        "minOperations(nums = [2, 1, 1, 2, 1, 3, 1, 1])"
    ],
    "sample_423": [
        "minOperations(nums = [3,3,2,4,3])",
        "minOperations(nums = [2, 2, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1, 1, 1])",
        "minOperations(nums = [2, 2, 3, 3, 2, 4, 2])",
        "minOperations(nums = [1,1,1,3])",
        "minOperations(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",
        "minOperations(nums = [1,1,1,1,1,1,2,2,2,2])",
        "minOperations(nums = [1, 3, 2, 3, 2])",
        "minOperations(nums = [3, 2, 3, 1])",
        "minOperations(nums = [3,1,3,2,2,2,2])"
    ],
    "sample_476": [
        "minimumCoins(prices = [1,2,5])",
        "minimumCoins(prices = [1,2,3,4,5])",
        "minimumCoins(prices = [5,2,3])",
        "minimumCoins(prices = [2, 5, 1, 1, 2])",
        "minimumCoins(prices = [1,2,4,5])",
        "minimumCoins(prices = [2,3,5,1,4,6])",
        "minimumCoins(prices = [1, 3, 2, 9, 4])",
        "minimumCoins(prices = [10, 30, 15, 100])",
        "minimumCoins(prices = [1,10,2,20])",
        "minimumCoins(prices = [4, 2, 3, 7, 2, 5])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [0, 1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 1])",
        "minimumRightShifts(nums = [2, 1, 3, 5, 4, 6])",
        "minimumRightShifts(nums=[1,2,1,2])",
        "minimumRightShifts(nums = [5, 3, 0, 2, 1, 5])",
        "minimumRightShifts(nums = [1, 3, 2, 0, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 5, 7, 11, 13, 17])",
        "minimumRightShifts(nums=[3, 2, 1, 4, 5, 0])"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1, 2, 1])",
        "minimumRightShifts(nums = [1, 2, 1])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 1])",
        "minimumRightShifts(nums = [5, 20, 15, 15, 15])",
        "minimumRightShifts(nums = [50000, 40000, 30000, 20000, 10000, 5000, 4000, 3000, 2000, 1000, 500, 400, 300, 200, 100, 50, 40, 30, 20, 10, 5])",
        "minimumRightShifts(nums = [2, 3, 6, 5, 4, 12, 21, 39, 0, 1, 0, 1, 2, 0, 1])",
        "minimumRightShifts(nums = [2, 4, 2, 4, 6, 4, 2, 4, 2, 1, 2, 4, 6, 8, 2, 4, 6, 8])"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"x\", s2 = \"y\", s3 = \"z\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"cdef\", s3 = \"efgh\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"aab\", s3 = \"aac\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ac\", s3 = \"ad\")",
        "findMinimumOperations(s1 = \"abab\", s2 = \"abab\", s3 = \"abab\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"caa\", s3 = \"aca\")",
        "findMinimumOperations(s1 = \"ad\", s2 = \"abc\", s3 = \"cba\")",
        "def findMinimumOperations(s1: str, s2: str, s3: str) -> int:\n    if s1"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaa\")",
        "longestSemiRepetitiveSubstring(s = \"aa\")",
        "longestSemiRepetitiveSubstring(s = \"babab\")",
        "longestSemiRepetitiveSubstring(s = \"banan\")",
        "longestSemiRepetitiveSubstring(s = \"zyzabcz\")",
        "longestSemiRepetitiveSubstring(s = \"fbuzlifgh\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"cd\", \"ef\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"cd\", \"e\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"xyx\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"b\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"mq\", \"px\", \"mq\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"aa\", \"ab\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"ac\",\"dc\",\"eae\",\"dc\",\"cdd\",\"eae\"])",
        "maximumNumberOfStringPairs(words = [\"yyytyyy\",\"yyytyyy\",\"yyytyyy\",\"yyytyyy\"])",
        "maximumNumberOfStringPairs(words=[\"bab\", \"ban\", \"dan\", \"cane\", \"moon\", \"toon\", \"nana\"])",
        "maximumNumberOfStringPairs(words=[\"kq\",\"mx\",\"kz\",\"yz\",\"yx\",\"jy\",\"jx\",\"qx\",\"mw\",\"kk\",\"lx\",\"hy\",\"hx\",\"hk\",\"kk\",\"jj\",\"tx\",\"tx\",\"qx\",\"wy\",\"wy\",\"wx\",\"qx\",\"ky\",\"hz\",\"zz\",\"zk\",\"zy\",\"xz\",\"zk\",\"zy\",\"kq\",\"qy\",\"ky\",\"kz\",\"kx\",\"zx\",\"yz\",\"yx\",\"zx\",\"yz\",\"zy\",\"xz\",\"yx\",\"mw\",\"mw\",\"mx\",\"zm\",\"mz\",\"mw\",\"mz\",\"mw\",\"mw\",\"mz\",\"wm\",\"mz\",\"xm\",\"mz\",\"zy\",\"zy\",\"mz\",\"zx\",\"yx\",\"mw\",\"mz\",\"mw\",\"xz\",\"zy\",\"mz\",\"zy\",\"zx\",\"zx\",\"mw\",\"mw\",\"mw\",\"kz\",\"zx\",\"mx\",\"mw\",\"zx\",\"mw\",\"mw\",\"mw\",\"mw\",\"mz\",\"zx\",\"zx\",\"zx\",\"mz\",\"mz\",\"zx\",\"mw\",\"mx\",\"zx\",\"mz\",\"mz\",\"zx\",\"mz\",\"mx\",\"mz\",\"zx\",\"zx\",\"mz\",\"mx\",\"mz\",\"mw\",\"mz\",\"mz\",\"zx\",\"mz\",\"mz\",\"mx\",\"zx\",\"mz\",\"mx\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"zx\",\"mz\",\"mx\",\"mz\",\"zx\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"zx\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\"mz\",\""
    ],
    "sample_247": [
        "minOperations(s1 = \"abac\", s2 = \"bcaa\", x = 2)",
        "minOperations(s1 = \"ab\", s2 = \"bb\", x = 3)",
        "minOperations(s1 = \"ab\", s2 = \"ba\", x = 2)",
        "minOperations(s1 = \"abac\", s2 = \"bcaa\", x = 3)",
        "minOperations(s1 = \"rr\", s2 = \"rr\", x = 2)",
        "minOperations(s1 = \"bb\", s2 = \"bb\", x = 2)",
        "minOperations(s1 = \"t\", s2 = \"f\", x = 2)",
        "minOperations(s1 = \"todo\", s2 = \"todo\", x = 2)",
        "minOperations(s1 = \"ABABABAB\", s2 = \"ABABABAB\", x = 2)",
        "minOperations(s1 = \"zbax\", s2 = \"bxxz\", x = 3)"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"aa\", \"aa\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"xyz\", \"cde\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"a\", \"a\"])",
        "maximumNumberOfStringPairs(words = [\"a\",\"b\",\"a\",\"b\"])",
        "maximumNumberOfStringPairs(words=[\"aa\", \"bb\", \"aa\", \"bb\", \"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"geeks\", \"keegs\", \"coder\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"abc\", \"aba\", \"abc\", \"a\", \"c\"])",
        "maximumNumberOfStringPairs(words = [\"mqx\", \"q\", \"sx\", \"p\", \"ps\", \"s\"])"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 3, 2])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minGroupsForValidAssignment(nums = [3, 2, 1, 2, 3, 4, 3])",
        "minGroupsForValidAssignment(nums = [2,2,1,3])",
        "minGroupsForValidAssignment(nums = [1, 3, 5, 7])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [2, 3, 3, 1, 2, 1])",
        "minGroupsForValidAssignment(nums = [3,3,2,1,3,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [4, 3, 2, 3, 2])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 3, m = 3)",
        "differenceOfSums(n = 4, m = 2)",
        "differenceOfSums(n = 5, m = 5)",
        "differenceOfSums(n = 9, m = 4)",
        "differenceOfSums(n = 9, m = 10)",
        "differenceOfSums(n = 20, m = 10)",
        "differenceOfSums(n = 9, m = 7)",
        "differenceOfSums(n = 3, m = 2)"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"11101\", k = 2)",
        "shortestBeautifulSubstring(s = \"10101\", k = 2)",
        "shortestBeautifulSubstring(s = \"110110\", k = 2)",
        "shortestBeautifulSubstring(s = \"10111\", k = 2)",
        "shortestBeautifulSubstring(s = \"111\", k = 1)",
        "shortestBeautifulSubstring(s = \"10101\", k = 2)",
        "shortestBeautifulSubstring(s = '111000', k = 1)",
        "shortestBeautifulSubstring(s = \"1111111110\", k = 10)",
        "shortestBeautifulSubstring(s = \"110110101101\", k = 3)",
        "shortestBeautifulSubstring(s = \"1100110110\", k = 3)"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"x\", s2 = \"y\", s3 = \"z\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"c\", s3 = \"d\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"xbc\", s3 = \"bc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"cd\", s3 = \"bca\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"abc\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"aabaaa\", s2 = \"aaa\", s3 = \"aaaba\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"adc\", s3 = \"bac\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"xyz\", s3 = \"vwwzz\")",
        "findMinimumOperations(s1 = \"abcc\", s2 = \"ddcc\", s3 = \"dddcc\")"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcbac\")",
        "longestSemiRepetitiveSubstring(s = \"ababbabb\")",
        "longestSemiRepetitiveSubstring(s = \"baaaaaaaba\")",
        "longestSemiRepetitiveSubstring(s = \"mnojpqrst\")",
        "longestSemiRepetitiveSubstring(s = \"qdwufrtyqbncqbqb\")"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2], nums2 = [3, 4])",
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [2], nums2 = [3])",
        "minSum(nums1 = [1,2], nums2 = [1,2])",
        "minSum(nums1 = [1,1,1,1], nums2 = [1,1,1,1])",
        "minSum(nums1 = [5,4,3,2,1], nums2 = [1,2,3,4,5])",
        "minSum(nums1=[1, 2], nums2=[1, 2])",
        "minSum(nums1 = [1, 2], nums2 = [4, 3])",
        "minSum(nums1 = [3, 0], nums2 = [0, 3])"
    ],
    "sample_289": [
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"11111\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s
        "minimumSteps(s = \"0111\")",
        "minimumSteps(s = \"0011\")",
        "minimumSteps(s=\"1100\")",
        "minimumSteps(s = \"10100101\")",
        "minimumSteps(s = \"00010001\")",
        "minimumSteps(s = \"1010001\")"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [3,4,5,2])",
        "maximumTripletValue(nums = [-4, -2, 3, 4])",
        "maximumTripletValue(nums = [2, 3, 1, 4])",
        "maximumTripletValue(nums = [1, 2, 1, 2, 1])",
        "maximumTripletValue(nums = [5, 10, 15, 20, 25])",
        "maximumTripletValue(nums = [-1, -4, -3])",
        "maximumTripletValue(nums = [1, 4, 7, 6, 5])",
        "maximumTripletValue(nums = [-1, 4, 2, 5])",
        "maximumTripletValue(nums = [2,1,5,4,1,1])",
        "maximumTripletValue(nums = [4, 5, 6, 7, 1, 2, 4])"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"aia\", k = 2)",
        "beautifulSubstrings(s=\"abc\", k=2)",
        "beautifulSubstrings(s = \"aabaa\", k = 2)",
        "beautifulSubstrings(s=\"a\", k=2)",
        "beautifulSubstrings(s=\"a\", k=5)",
        "beautifulSubstrings(s = \"ababab\", k = 2)",
        "beautifulSubstrings(s=\"aaa\", k=100)",
        "beautifulSubstrings(s=\"aabbba\", k=3)",
        "beautifulSubstrings(s = \"ioua\", k = 3)",
        "beautifulSubstrings(s=\"dv\", k=1)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"123\")",
        "minimumBeautifulSubstrings(s = \"101101\")",
        "minimumBeautifulSubstrings(s = \"101101\")",
        "minimumBeautifulSubstrings(s = \"101101\")",
        "minimumBeautifulSubstrings(s = \"22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222",
        "minimumBeautifulSubstrings(s = \"111\")",
        "minimumBeautifulSubstrings(s = \"212\")",
        "minimumBeautifulSubstrings(s = \"14\")",
        "minimumBeautifulSubstrings(s=\"01\")",
        "minimumBeautifulSubstrings(s = \"01110101111\")"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2], [3, 4], [5, 6]])",
        "matrixSum(a = [[1, 2], [3, 4], [5, 6]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(a = [[1,2,3],[4,5,6]])",
        "matrixSum(a= [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[2, 1, 4], [4, 5, 3], [1, 3, 6]])",
        "matrixSum(a = [[2, 7, 6, 1], [3, 5, 1, 0]])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 4, 5, 2], nums2 = [1, 4, 5, 2])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [3, 4, 5, 6])",
        "minSum(nums1 = [1,4,5,2,3], nums2 = [5,5,4,4,1])",
        "minSum(nums1 = [1, 4, 2], nums2 = [5, 4, 0])",
        "minSum(nums1 = [1, 4, 1], nums2 = [1, 2, 3])",
        "minSum(nums1 = [0, 1, 2, 3], nums2 = [1, 0, 0, 0])",
        "minSum(nums1 = [3, 2, 3, 1, 1], nums2 = [2, 2, 1, 3, 1])",
        "minSum(nums1 = [5, 9], nums2 = [4, 4, 1, 0])",
        "minSum(nums1 = [1, 4, 5, 4, 9, 11, 0], nums2 = [1, 11, 1, 11, 0, 2, 1])",
        "minSum(nums1 = [5,2,2,4,0,1,6,10,10,6,10,2,0,2,4,4,6], nums2 = [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1])"
    ],
    "sample_282": [
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minOperations(nums1 = [1, 2, 3, 4, 5, 6], nums2 = [1, 1, 2, 2, 2, 2])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [3,5,2,6], nums2 = [3])",
        "minOperations(nums1 = [4, 2, 3], nums2 = [4, 5, 6])",
        "minOperations(nums1 = [2,2,2,2], nums2 = [2,2,2,2])",
        "minOperations(nums1 = [1, 1, 1, 1], nums2 = [1, 1, 1, 1])",
        "minOperations(nums1 = [1, 2, 4, 7], nums2 = [3, 5, 8])",
        "def minOperations(nums1: List[int], nums2: List[int]) -> int:\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    if nums1[0] < nums2[0]:\n        nums1, nums2 = nums2, nums1\n    ans = 0\n    while nums1 and nums2:\n        ans += 1\n        if nums1[-1] > nums2[-1]:\n            nums2.pop()\n        else:\n            nums1.pop()\n    if nums1:\n        ans += len(nums1)\n    elif nums2:\n        ans += len(nums2)\n    return ans"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1, 2, 2, 3, 3, 4])",
        "alternatingSubarray(nums = [1, 1, 1, 1, 2])",
        "alternatingSubarray(nums = [0,1,1,2])",
        "alternatingSubarray(nums = [0,1,0,2,1])",
        "alternatingSubarray(nums = [1,2,3,4,5,1,2,3,4,5,6,1,2,3,4,5,6])",
        "alternatingSubarray(nums = [3,2,3,4,2,3,4,3,4])",
        "alternatingSubarray(nums=[1, 2, 3, 5, 4, 3, 4])",
        "alternatingSubarray(nums = [5, 2, 2, 3, 3, 1])",
        "alternatingSubarray(nums = [2,1,3,3,5,7,4])",
        "alternatingSubarray(nums = [0, 2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 2], money = 5)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [3, 2, 3], money = 10)",
        "buyChoco(prices = [2, 5], money = 9)",
        "buyChoco(prices = [2, 5], money = 11)",
        "buyChoco(prices = [2, 2, 1, 9], money = 12)",
        "buyChoco(prices = [10, 20, 30, 40], money = 20)",
        "buyChoco(prices = [3, 2, 15], money = 10)"
    ],
    "sample_302": [
        "countSeniors(details = [\"78 Sunny Dumbo Oct 13 2008\", \"58 Sunny Dumbo Oct 13 2008\"])",
        "countSeniors(details = [\"01-01-1990\", \"02-01-1990\", \"01-01-1991\"])",
        "countSeniors(details = [\"Julia0000@gmailcom\", \"Julia0000@gmailcom\", \"Joe0000@yahoo.com\", \"Joe0000@yahoo.com\", \"Joe0000@yahoo.com\"])",
        "countSeniors(details = [\"78 Sunny Dumbo Octo Copper\", \"34 Sunny Fox Octo Gold\", \"10 Sunny Octo Silver\", \"0 Sunny Octo Biscuit\", \"10 Sunny Octo Biscuit\"])",
        "countSeniors(details = [\"00-12-12-12\", \"01-01-11-10\", \"01-01-11-10\"])",
        "countSeniors(details = [\"78649A\", \"A75AA\", \"A8465\", \"A9345\"])",
        "countSeniors(details = [\"78649DD7S 46746DFF\", \"054AADE5D 12512SAA\", \"054444DDD 12512AAA\"])",
        "countSeniors(details = [\"7290230069\", \"9478762376\", \"1079943225\", \"2952580382\", \"3426193249\", \"6425210984\", \"8547531236\"])",
        "countSeniors(details=[\"78 Sunny Front Street\", \"190 Grimes Court\", \"44 Daisy St.\", \"162 Leland Ave.\", \"76 Fuller Ave.\", \"101 Freeman Road\", \"283 Bunny St.\", \"150 Hickory Ave.\", \"35 Ivy Lane\", \"25 Tulip Ave.\", \"43 Augusta Avenue\", \"133 Fuller St.\", \"432 Fuller Ave.\", \"72 Fuller St.\", \"338 Fuller St.\"])",
        "countSeniors(details = [\"19763450523\", \"30746608348\", \"71657152722\", \"79591445259\", \"91183477842\", \"99552997867\", \"51302917571\", \"71548123877\", \"92447873264\", \"44672845444\", \"89431867881\", \"53836628305\"])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"a\", k = 1)",
        "beautifulSubstrings(s = \"aba\", k = 3)",
        "beautifulSubstrings(s = \"aba\", k = 10)",
        "beautifulSubstrings(s = \"abcd\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeaa\", k = 3)",
        "beautifulSubstrings(s = \"pqrst\", k = 3)",
        "beautifulSubstrings(s = \"cbca\", k = 4)",
        "beautifulSubstrings(s = \"aueiou\", k = 100)",
        "beautifulSubstrings(s = \"pqrstuvwxyz\", k = 10)"
    ],
    "sample_255": [
        "minimumSum(nums=[3,5,2,3])",
        "minimumSum(nums=[1,4,3,2])",
        "minimumSum(nums = [5,4,2,3])",
        "minimumSum(nums = [5,4,9])",
        "minimumSum(nums=[1, 2, 3, 4, 5, 6])",
        "minimumSum(nums = [3, 1, 4, 1])",
        "minimumSum(nums = [1,2,4,7,1,2,4,1])",
        "minimumSum(nums = [1,5,6,7])",
        "minimumSum(nums = [2,2,6,6,2])",
        "minimumSum(nums = [10,2,5,9,10])"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [3,3,2,5,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3])",
        "minGroupsForValidAssignment(nums = [2,1,3])",
        "minGroupsForValidAssignment(nums = [3,2,5])",
        "minGroupsForValidAssignment(nums = [1,1,1])",
        "minGroupsForValidAssignment(nums = [4, 3, 1, 3, 2])",
        "minGroupsForValidAssignment(nums=[1,3,2,5])",
        "minGroupsForValidAssignment(nums = [2,1,4,1])"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [2,4,6,8,10])",
        "alternatingSubarray(nums = [0, 1, 2, 3, 4])",
        "alternatingSubarray(nums = [1,2,3,4,6,7])",
        "alternatingSubarray(nums=[1, 2, 3, 3, 4, 4, 5, 5])",
        "alternatingSubarray(nums=[1,2,4,3,5,6,7,8])",
        "alternatingSubarray(nums = [5,1,3,1,5])",
        "alternatingSubarray(nums = [0, 2, 1, 5, 4, 3, 8, 7, 6])",
        "alternatingSubarray(nums=[1,3,2,4,2,4,5,4])",
        "alternatingSubarray(nums = [2,6,8,10,12,14,26,28,32])",
        "alternatingSubarray(nums = [1, 2, 4, 3, 5, 7, 2, 6, 10, 2, 4])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = \"11101\", k = 2)",
        "shortestBeautifulSubstring(s = \"10101\", k = 2)",
        "shortestBeautifulSubstring(s = \"11111\", k = 2)",
        "shortestBeautifulSubstring(s = \"1111\", k = 1)",
        "shortestBeautifulSubstring(s = \"11111\", k = 2)",
        "shortestBeautifulSubstring(s = \"111111\", k = 2)",
        "shortestBeautifulSubstring(s=\"11100\", k=1)",
        "shortestBeautifulSubstring(s = \"111111111\", k = 2)",
        "shortestBeautifulSubstring(s=\"1101111\", k=2)",
        "shortestBeautifulSubstring(s = \"001010\", k = 1)"
    ],
    "sample_293": [
        "minimumSteps(s = \"00110\")",
        "minimumSteps(s = \"0110\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"11100\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"111111\")",
        "minimumSteps(s = \"0011100\")",
        "minimumSteps(s=\"10101\")",
        "minimumSteps(s = \"10111\")",
        "minimumSteps(s = \"0010001\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s=\"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaabaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabccab\")",
        "longestSemiRepetitiveSubstring(s = \"aaabaa\")",
        "longestSemiRepetitiveSubstring(s = \"bb\")",
        "longestSemiRepetitiveSubstring(s = \"abacabad\")",
        "longestSemiRepetitiveSubstring(s = \"myheartisblues\")"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6])",
        "minGroupsForValidAssignment(nums = [1,3,4,1,5])",
        "minGroupsForValidAssignment(nums=[1,2,4])",
        "minGroupsForValidAssignment(nums = [1,3,5,6])",
        "minGroupsForValidAssignment(nums=[3,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,",
        "minGroupsForValidAssignment(nums = [1,2,3,3,2,1,3])",
        "minGroupsForValidAssignment(nums = [3, 1, 4, 3, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [2, 4, 2, 7])",
        "minGroupsForValidAssignment(nums = [1,2,4,5,7,8,10,11,12,14,15,16,17,18,19,20])"
    ],
    "sample_307": [
        "countSeniors(details = [\"12:44 AM\", \"12:45 AM\", \"12:46 AM\"])",
        "countSeniors(details = [\"1988:01:23 23:59:59\", \"2010:04:11 11:45:23\", \"1999:01:01 00:00:00\"])",
        "countSeniors(details = [\"1988-05-22\", \"1991-12-18\", \"2003-06-26\"])",
        "countSeniors(details = [\"78681901502570646468\", \"84941891502570646468\", \"91281901502570646468\"])",
        "countSeniors(details = [\"1994-04-12\", \"1999-11-02\", \"2016-03-25\", \"1984-10-28\"])",
        "countSeniors(details = [\"77104 246058779 1\", \"72142 984050713 0\", \"66115 337335443 1\", \"51715 984050715 0\"])",
        "countSeniors(details = [\"78629MKJHDF8S9D0293IU5NRENM\",\"53057MKDJSH8S9D0293IU5NRENM\",\"50283MKKJHDF8S9D0293IU5NRENM\"])",
        "countSeniors(details=['77104', '10375', '56075', '10228', '10036', '12487', '56075', '77104', '10375', '56075', '10228', '10036', '12487', '56075', '77104', '10375', '56075', '10228', '10036', '12487'])",
        "countSeniors(details = [\"7868190130M7522\", \"7414259632M9844\", \"5608843165F6699\", \"8496100430F3608\", \"6460714068M7748\", \"5490456394F9627\", \"8456150145F3612\"])",
        "countSeniors(details = [\"78 Sunny Day\", \"38 Sunny Day\", \"21 Sunny Day\", \"93 Sunny Day\", \"56 Sunny Day\", \"97 Sunny Day\", \"21 Sunny Day\", \"56 Sunny Day\", \"93 Sunny Day\", \"88 Sunny Day\", \"65 Sunny Day\", \"59 Sunny Day\", \"46 Sunny Day\", \"38 Sunny Day\", \"44 Sunny Day\", \"66 Sunny Day\", \"97 Sunny Day\", \"56 Sunny Day\", \"67 Sunny Day\", \"38 Sunny Day\", \"44 Sunny Day\", \"56 Sunny Day\", \"95 Sunny Day\", \"84 Sunny Day\", \"90 Sunny Day\", \"66 Sunny Day\", \"41 Sunny Day\", \"59 Sunny Day\", \"85 Sunny Day\", \"85 Sunny Day\", \"74 Sunny Day\", \"39 Sunny Day\", \"65 Sunny Day\", \"74 Sunny Day\", \"72 Sunny Day\", \"88 Sunny Day\", \"73 Sunny Day\", \"59 Sunny Day\", \"66 Sunny Day\", \"46 Sunny Day\", \"97 Sunny Day\", \"66 Sunny Day\", \"74 Sunny Day\", \"72 Sunny Day\", \"59 Sunny Day\", \"85 Sunny Day\", \"74 Sunny Day\", \"72 Sunny Day\", \"88 Sunny Day\", \"90 Sunny Day\", \"85 Sunny Day\", \"73 Sunny Day\", \"59 Sunny Day\", \"59 Sunny Day\", \"46 Sunny Day\", \"38 Sunny Day\", \"97 Sunny Day\", \"74 Sunny Day\", \"88 Sunny Day\", \"41 Sunny Day\", \"59 Sunny Day\", \"74 Sunny Day\", \"72 Sunny Day\", \"59 Sunny Day\", \"85 Sunny Day\", \"85 Sunny Day\", \"73 Sunny Day\", \"59 Sunny Day\", \"76 Sunny Day\", \"59 Sunny Day\", \"46 Sunny Day\", \"67 Sunny Day\", \"88 Sunny Day\", \"85 Sunny Day\", \"74 Sunny Day\", \"72 Sunny Day\", \"88 Sunny Day\", \"90 Sunny Day\", \"85 Sunny Day\", \"73 Sunny Day\", \"59 Sunny Day\", \"85 Sunny Day\", \"85 Sunny Day\", \"74 Sunny Day\", \"72 Sunny Day\", \"59 Sunny Day\", \"66 Sunny Day\", \"46 Sunny Day\", \"97 Sunny Day\", \"74 Sunny Day\", \"90 Sunny Day\", \"8"
    ],
    "sample_290": [
        "minimumSteps(s = \"00110\")",
        "minimumSteps(s = \"001011\")",
        "minimumSteps(s = \"001101\")",
        "minimumSteps(s = \"0100101010\")",
        "minimumSteps(s
        "minimumSteps(s=\"00101101\")",
        "minimumSteps(s = \"01010\")",
        "minimumSteps(s = \"011001\")",
        "minimumSteps(s = \"100101010\")",
        "minimumSteps(s = \"0001000101010101011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    ],
    "sample_352": [
        "relocateMarbles(nums=[2, 5, 1, 3, 4, 7], moveFrom=[1, 3, 5], moveTo=[4, 5, 7])",
        "relocateMarbles(nums = [1,1,1,1,1], moveFrom = [1,1,1,1,1], moveTo = [1,1,1,1,1])",
        "relocateMarbles(nums=[1, 4, 3, 2], moveFrom=[3, 4], moveTo=[1, 2])",
        "relocateMarbles(nums = [4,3,2,1,5], moveFrom = [1,3,5,4], moveTo = [4,5,3,2,1])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveFrom = [1, 2, 3, 4], moveTo = [2, 5, 6, 9])",
        "relocateMarbles(nums = [1, 3, 1, 1], moveFrom = [1, 3, 1, 1], moveTo = [1, 4, 3, 2])",
        "relocateMarbles(nums=[2,1,3,3,2], moveFrom=[0,3,3], moveTo=[2,0,1])",
        "relocateMarbles(nums=[2,3,4,1,2,3,5,1], moveFrom=[3,4,1], moveTo=[3,2,5])",
        "relocateMarbles(nums = [0,1,0,2,0,3,0,4,0,5,0], moveFrom = [0,2,3,4,5], moveTo = [0,2,3,4,5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 2, 5, 6, 7, 9], moveTo = [6, 9, 8, 10, 11, 12])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [0, 1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 3, 2, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 2, 1])",
        "alternatingSubarray(nums = [4, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [2,3,4,2])",
        "alternatingSubarray(nums = [1, 3, 4, 5, 5, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 2, 2])",
        "alternatingSubarray(nums = [1, 2, 2, 2, 1, 2, 1, 3, 1])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"aba\", k = 2)",
        "beautifulSubstrings(s = \"abcde\", k = 2)",
        "beautifulSubstrings(s = \"abcde\", k = 3)",
        "beautifulSubstrings(s = \"leetcode\", k = 3)",
        "beautifulSubstrings(s = \"aaaa\", k = 3)",
        "beautifulSubstrings(s = \"aabaa\", k = 5)",
        "beautifulSubstrings(s = \"x\", k = 4)",
        "beautifulSubstrings(s = \"tutu\", k = 3)",
        "beautifulSubstrings(s = \"hahahhah\", k = 4)",
        "beautifulSubstrings(s = \"jvcpeqzkzf\", k = 8)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [3, 4, 5, 2])",
        "maximumTripletValue(nums = [3, 4, 5, 2])",
        "maximumTripletValue(nums = [1, 2, 3, 6])",
        "maximumTripletValue(nums = [-10,-20,-30,-40,10,20,30,40])",
        "maximumTripletValue(nums = [1, 12, 5, 111, 200, 1000, 10, 10, 10])",
        "maximumTripletValue(nums = [1, 4, 10, 2, 5])",
        "maximumTripletValue(nums = [-4,-3,-2,-1,60])",
        "maximumTripletValue(nums = [1,4,1,7,5,11,2])",
        "maximumTripletValue(nums = [-5,-4,-2,-2,-1,0,0,1,2,3,3,5,5,5,5])",
        "maximumTripletValue(nums = [13,4,7,2,9,11,17,10,21,5])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"cc\", \"dd\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"b\", \"c\", \"b\", \"c\", \"a\"])",
        "maximumNumberOfStringPairs(words = [\"geeksforgeeks\", \"geeks\", \"for\", \"quiz\", \"geeksforgeeks\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"ab\", \"bb\", \"aa\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"aa\", \"ab\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"cd\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"cd\", \"ef\", \"gh\", \"ef\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"v\", \"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"])",
        "maximumNumberOfStringPairs(words = [\"yy\", \"ab\", \"cd\", \"ab\", \"ab\", \"ba\", \"xx\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"kyj\", \"jyk\", \"kjy\", \"ykk\"])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 3, m = 1)",
        "differenceOfSums(n = 10, m = 15)",
        "differenceOfSums(n = 5, m = 4)",
        "differenceOfSums(n = 20, m = 10)",
        "differenceOfSums(n = 12, m = 4)",
        "differenceOfSums(n = 10, m = 10)",
        "differenceOfSums(n = 3, m = 3)",
        "differenceOfSums(n = 5, m = 1)",
        "differenceOfSums(n = 10, m = 1)"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [1, 2, 2], money = 5)",
        "buyChoco(prices = [1, 2, 2], money = 5)",
        "buyChoco(prices = [1, 2, 2], money = 5)",
        "buyChoco(prices = [4, 2, 1], money = 5)",
        "buyChoco(prices = [3,2,3], money = 2)",
        "buyChoco(prices = [3, 2, 3], money = 10)",
        "buyChoco(prices = [2, 2, 1, 9], money = 10)",
        "buyChoco(prices = [12, 4, 3, 8], money = 14)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"zzz\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"cd\",\"dc\",\"eb\",\"fe\",\"ed\"])",
        "maximumNumberOfStringPairs(words=[\"abc\", \"xyx\", \"qq\", \"xyx\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"bba\", \"baa\", \"bbb\"])",
        "maximumNumberOfStringPairs(words=[\"ab\", \"ba\", \"bc\", \"ca\"])",
        "maximumNumberOfStringPairs(words=[\"a\", \"ab\", \"abc\", \"a\", \"ab\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"xyx\", \"bbb\", \"xxy\", \"ccc\"])",
        "maximumNumberOfStringPairs(words = [\"banana\", \"baba\", \"anana\", \"baba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"rct\", \"xyx\", \"xyx\"])"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcab\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"abccbaabccba\")",
        "longestSemiRepetitiveSubstring(s = \"abbbaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbba\")",
        "longestSemiRepetitiveSubstring(s = \"racecarx\")",
        "longestSemiRepetitiveSubstring(s = \"bbaaaaabba\")",
        "longestSemiRepetitiveSubstring(s = \"xpzxyxxy\")",
        "longestSemiRepetitiveSubstring(s = \"gxqwvzrq\")"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"abcd\", \"cdef\", \"fghi\"])",
        "minimizeConcatenatedLength(words = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"])",
        "minimizeConcatenatedLength(words=[\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\"])",
        "minimizeConcatenatedLength(words = [\"if\", \"a\", \"a\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"x\", \"y\", \"z\", \"xz\", \"yz\", \"zx\", \"zy\", \"xx\", \"yy\", \"zz\"])",
        "minimizeConcatenatedLength(words=[\"apple\", \"banana\", \"cherry\", \"date\", \"eat\", \"figs\"])",
        "minimizeConcatenatedLength(words=[\"aaa\",\"bba\",\"abab\",\"fab\"])",
        "minimizeConcatenatedLength(words = [\"y\",\"h\",\"n\",\"g\",\"u\",\"a\"])",
        "minimizeConcatenatedLength(words = [\"av\", \"ban\", \"cd\", \"cd\", \"a\", \"d\"])",
        "minimizeConcatenatedLength(words = [\"xy\", \"ab\", \"ba\", \"ac\", \"ba\", \"abc\", \"cba\", \"ab\", \"a\", \"b\", \"c\", \"a\", \"bc\", \"ab\", \"ac\"])"
    ],
    "sample_323": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 7)",
        "isFascinating(n = 20)",
        "isFascinating(n = 123)",
        "isFascinating(n = 7)",
        "isFascinating(n = 200)",
        "isFascinating(n=24)",
        "isFascinating(n = 212)",
        "isFascinating(n = 510)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbba\")",
        "longestSemiRepetitiveSubstring(s = \"abcab\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaba\")",
        "longestSemiRepetitiveSubstring(s = \"abaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcbd\")",
        "longestSemiRepetitiveSubstring(s=\"aaaabbabb\")",
        "longestSemiRepetitiveSubstring(s = \"baaabbbaaabbbbabbbaaaa\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"78 Sunny Dinner\", \"34 Sunny Dinner\", \"21 Sunny Dinner\"])",
        "countSeniors(details = [\"78Sunny79\",\"77Sunny81\",\"76Sunny82\",\"75Sunny83\",\"74Sunny84\",\"73Sunny85\",\"72Sunny86\",\"71Sunny87\",\"70Sunny88\",\"69Sunny89\",\"68Sunny90\",\"67Sunny91\",\"66Sunny92\",\"65Sunny93\",\"64Sunny94\",\"63Sunny95\",\"62Sunny96\",\"61Sunny97\",\"60Sunny98\",\"59Sunny99\",\"58Sunny00\",\"57Sunny01\",\"56Sunny02\",\"55Sunny03\",\"54Sunny04\",\"53Sunny05\",\"52Sunny06\",\"51Sunny07\",\"50Sunny08\",\"49Sunny09\",\"48Sunny10\",\"47Sunny11\",\"46Sunny12\",\"45Sunny13\",\"44Sunny14\",\"43Sunny15\",\"42Sunny16\",\"41Sunny17\",\"40Sunny18\",\"39Sunny19\",\"38Sunny20\",\"37Sunny21\",\"36Sunny22\",\"35Sunny23\",\"34Sunny24\",\"33Sunny25\",\"32Sunny26\",\"31Sunny27\",\"30Sunny28\",\"29Sunny29\",\"28Sunny30\",\"27Sunny31\",\"26Sunny32\",\"25Sunny33\",\"24Sunny34\",\"23Sunny35\",\"22Sunny36\",\"21Sunny37\",\"20Sunny38\",\"19Sunny39\",\"18Sunny40\",\"17Sunny41\",\"16Sunny42\",\"15Sunny43\",\"14Sunny44\",\"13Sunny45\",\"12Sunny46\",\"11Sunny47\",\"10Sunny48\",\"9Sunny49\",\"8Sunny50\",\"7Sunny51\",\"6Sunny52\",\"5Sunny53\",\"4Sunny54\",\"3Sunny55\",\"2Sunny56\",\"1Sunny57\"])",
        "countSeniors(details = [\"78Sunny45Speed\", \"19Fast83Light\", \"15Sad21Speed\", \"18Sad21Light\"])",
        "countSeniors(details = [\"7868190150-0\", \"7868190150-1\", \"7868190150-2\", \"9999090150-0\", \"9999090150-1\"])",
        "countSeniors(details=[\"12:45 pm\", \"12:00 pm\", \"6:00 pm\", \"7:30 pm\", \"10:00 am\", \"10:00 am\", \"10:00 pm\"])",
        "countSeniors(details = [\"s12\", \"5m57\", \"b23\", \"g9\"])",
        "countSeniors(details=[\"78Sunny45Speed\", \"190Dave90Construction78\", \"15Johnny56History59\"])",
        "countSeniors(details=[\"789123468038201232\", \"789123468038201232\", \"789123468038201232\", \"789123468038201232\", \"789123468038201232\", \"789123468038201232\", \"789123468038201232\", \"789123468038201232\", \"789123468038201232\", \"789123468038201232\"])",
        "countSeniors(details=[\"786819015098354754\", \"843954713824305623\", \"562839213746789523\", \"938074623158673453\"])",
        "countSeniors(details=[\"721-321-741\", \"123-546-798\", \"982-312-456\", \"721-321-741\", \"123-546-798\", \"982-312-456\"])"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 1])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [1, 2, 4, 8])",
        "minGroupsForValidAssignment(nums = [3, 3, 2, 5, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [5, 4, 3, 2, 1, 1])",
        "minGroupsForValidAssignment(nums = [3, 1, 3, 1, 2, 2, 2])",
        "minGroupsForValidAssignment(nums=[2,2,1,3,5,4,1,2,1,1,1])",
        "minGroupsForValidAssignment(nums = [5,3,4,5,1])",
        "minGroupsForValidAssignment(nums = [10, 10, 10, 20, 20, 20, 30, 30, 30])"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [3, 4, 5, 1, 6])",
        "minimumSum(nums=[3, 4, 5, 1, 6])",
        "minimumSum(nums = [3, 4, 9, 1, 2])",
        "minimumSum(nums = [10, 10, 20, 20, 30, 30])",
        "minimumSum(nums = [10,10,20,20,30])"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"cat\", \"dog\", \"eat\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"def\", \"ghi\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"cc\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"a\", \"a\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bcd\", \"xyz\", \"zyx\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"xyz\", \"poi\", \"rtyu\", \"pqr\", \"xyzzy\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"cd\",\"ef\",\"xy\",\"xy\",\"cd\",\"ef\"])",
        "maximumNumberOfStringPairs(words = [\"lmn\", \"lm\", \"lll\", \"mm\"])",
        "maximumNumberOfStringPairs(words = [\"ace\", \"abd\", \"bab\", \"fed\"])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = \"111011\", k = 2)",
        "shortestBeautifulSubstring(s = \"111111\", k = 2)",
        "shortestBeautifulSubstring(s = \"010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"11101\", k = 3)",
        "shortestBeautifulSubstring(s = \"100111\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101111\", k = 4)",
        "shortestBeautifulSubstring(s = \"110101\", k = 1)",
        "shortestBeautifulSubstring(s = \"1000110\", k = 3)",
        "shortestBeautifulSubstring(s = \"011010111\", k = 3)",
        "shortestBeautifulSubstring(s = \"1101010101101011111110101000100100001100101100110101111100100110011110100011010101000011000111010001110011000101110100010011000110000100100111000001111100101011001111110000111000000101000110110000100110001110110001101100101000101011000010000101101010110000011011011100010011011110101000000100000011110000100100010000010100110000010010110000100000010010010111001000110000010000111111001011100010101011001111000010110100101100111110000100100010111000011110100010011100000101010010101010000011001001010001101111111011"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 3)",
        "lexicographicallySmallestArray(nums = [1, 5, 8, 9], limit = 3)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 7, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [2, 1, 4, 3, 5], limit = 4)",
        "lexicographicallySmallestArray(nums = [3, 3, 8, 4, 1], limit = 5)",
        "lexicographicallySmallestArray(nums = [5, 8, 2, 6, 3, 9, 1, 4], limit = 4)",
        "lexicographicallySmallestArray(nums = [1, 1, 2, 2, 2, 5], limit = 3)",
        "lexicographicallySmallestArray(nums = [10, 5, 1, 100, 9], limit = 2)",
        "lexicographicallySmallestArray(nums=[6, 2, 1, 4, 9], limit=2)"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(a=[[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1,2,3],[4,5,6]])",
        "matrixSum(a = [[1, 2], [1, 2]])",
        "matrixSum(a = [[1, 2, 3], [1, 3, 2]])",
        "matrixSum(a = [[1, 2, 3], [2, 3, 4], [1, 2, 4]])",
        "matrixSum(a = [[1, 2, 3], [1, 2, 4], [2, 3, 1]])",
        "matrixSum(a = [[2, 5], [3, 6], [1, 7]])",
        "matrixSum(a=[[3, 0], [7, 4]])",
        "matrixSum(a = [[3, 5, 2, 3, 4, 2], [1, 2, 3, 4, 2, 3], [5, 7, 6, 8, 7, 9]])"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"abb\", k = 4)",
        "beautifulSubstrings(s = \"leetcode\", k = 2)",
        "beautifulSubstrings(s = \"abacaba\", k = 2)",
        "beautifulSubstrings(s = \"abaa\", k = 1)",
        "beautifulSubstrings(s = \"aaaba\", k = 2)",
        "beautifulSubstrings(s = \"baan\", k = 3)",
        "beautifulSubstrings(s = \"uue\", k = 2)",
        "beautifulSubstrings(s = \"bobobobobob\", k = 3)",
        "beautifulSubstrings(s = \"mama\", k = 2)",
        "beautifulSubstrings(s = \"t-q-u-q-q\", k = 3)"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"xyx\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"xyz\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"xyz\", \"cba\", \"xzy\", \"zzz\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bcd\", \"fgh\"])",
        "maximumNumberOfStringPairs(words=[\"a\",\"b\",\"c\"])",
        "maximumNumberOfStringPairs(words = [\"y\", \"x\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xyzz\", \"xxyz\"])",
        "maximumNumberOfStringPairs(words = [\"foo\", \"bar\", \"baz\", \"naz\"])",
        "maximumNumberOfStringPairs(words = [\"foo\", \"bar\", \"baz\", \"xxy\", \"yzz\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"b\", \"x\", \"y\", \"z\"])"
    ],
    "sample_325": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n=39)",
        "isFascinating(n = 21)",
        "isFascinating(n=192)"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [-1,-2,-3])",
        "maximumTripletValue(nums = [2, 3, 1, 6, 7])",
        "maximumTripletValue(nums = [3,2,6,1,5])",
        "maximumTripletValue(nums = [2, 1, 3, 5, 4])",
        "maximumTripletValue(nums=[1,2,1,4])",
        "maximumTripletValue(nums = [1, 2, 5, 7, 10])",
        "maximumTripletValue(nums = [3, 7, 1, 2, 8, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 4, 1, 3, 2, 3])",
        "maximumTripletValue(nums = [6, 5, 6, 2])",
        "maximumTripletValue(nums = [1, 3, 5, 9, 7])"
    ],
    "sample_312": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2], [3, 4], [5, 6]])",
        "matrixSum(nums = [[1,2,3],[1,2,3],[1,2,3]])",
        "matrixSum(nums = [[1,2,3],[3,2,1]])",
        "matrixSum(nums = [[3, 3, 1], [2, 2, 1]])",
        "matrixSum(nums = [\n    [1,2,3,4],\n    [5,6,7,8],\n    [9,10,11,12],\n    [13,14,15,16],\n])",
        "matrixSum(nums = [[1,2,3],[1,1,1],[1,2,1]])",
        "matrixSum(nums = [[2, 1, 3], [3, 1, 4], [5, 2, 1]])",
        "matrixSum(nums = [[1,2,3],[3,2,1],[4,3,2],[5,3,4]])"
    ],
    "sample_281": [
        "minOperations(a = [1, 1], b = [2, 1])",
        "minOperations(a = [1, 3], b = [2, 4])",
        "minOperations(a = [4, 2, 5], b = [1, 3, 5])",
        "minOperations(a = [1, 2, 3, 4, 5], b = [1, 1, 2, 2, 2])",
        "minOperations(a = [0, 0, 1], b = [0, 1, 1])",
        "minOperations(a = [4, 1, 3], b = [2, 3, 5])",
        "minOperations(a = [3,3], b = [2,2])",
        "minOperations(a = [5, 4, 6], b = [3, 2, 4])",
        "minOperations(a = [2, 5, 7, 11, 15], b = [1, 4, 6, 12, 14])",
        "def minOperations(a, b):\n    def f(x):\n        x[:] = sorted(x)\n        aa, bb = a[:], b[:]\n        for i in range(len(a)):\n            if a[i] > a[-1] or b[i] > b[-1]:\n                a[i], b[i] = b[i], a[i]\n                return False\n        a[:] = aa\n        b[:] = bb\n        return True\n    \n    ans = inf\n    for i in range(len(a)):\n        if a[i] > a[-1] or b[i] > b[-1]:\n            a[i], b[i] = b[i], a[i]\n            ans = min(ans, f(a) + 1)\n            a[i], b[i] = b[i], a[i]\n    return ans if ans < inf else -1"
    ],
    "sample_280": [
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,2,3,4,5,6])",
        "minOperations(nums1 = [2,2], nums2 = [2,2])",
        "minOperations(nums1 = [1,2], nums2 = [2,1])",
        "minOperations(nums1 = [1,4,7,8,4], nums2 = [6,5,6,1])",
        "minOperations(nums1 = [10,1000000000], nums2 = [1000000000])",
        "minOperations(nums1 = [2,4,3], nums2 = [1,1,2,1])",
        "minOperations(nums1 = [2,2,2,1,3,0], nums2 = [3,1,5,3,2,2])",
        "minOperations(nums1 = [0,3,5,2,5,2,2,1,7,5,2,1,2,1,2,1,2,1], nums2 = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [3, 1, 5, 6, 4, 2])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [2, 3, 1, 4])",
        "maximumTripletValue(nums = [10, 10, 10, 10])",
        "maximumTripletValue(nums = [10, 20, 30, 40])",
        "maximumTripletValue(nums = [2, 1, 3, 6, 4])",
        "maximumTripletValue(nums=[2, 1, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 3, 1, 4, 5])",
        "maximumTripletValue(nums = [2, 5, 1, 8, 3])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s = \"0110101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1001010\", k = 5)",
        "shortestBeautifulSubstring(s = \"110110\", k = 4)",
        "shortestBeautifulSubstring(s='01111', k=2)",
        "shortestBeautifulSubstring(s = '10101', k = 2)",
        "shortestBeautifulSubstring(s = \"01011010\", k = 3)",
        "shortestBeautifulSubstring(s = '0101100010', k = 4)",
        "shortestBeautifulSubstring(s='01011011011101', k=4)",
        "shortestBeautifulSubstring(s = \"11001100001111001111\", k = 3)"
    ],
    "sample_256": [
        "minimumSum(nums = [1, 2, 3, 4, 1])",
        "minimumSum(nums=[1,2,3,4])",
        "minimumSum(nums = [1, 2, 3, 4, 1, 2, 3, 4])",
        "minimumSum(nums = [2, 7, 4, 1, 8, 1])",
        "minimumSum(nums = [1, 3, 4, 5, 6, 7])",
        "minimumSum(nums = [4, 1, 1, 2, 3])",
        "minimumSum(nums = [1, 1, 3, 4, 7])",
        "minimumSum(nums = [6, 2, 1, 4, 5, 3, 7])",
        "minimumSum(nums = [4, 10, 4, 7, 3])",
        "minimumSum(nums = [3, 5, 1, 7, 9, 3])"
    ],
    "sample_291": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"1001010\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"11111\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"0110101\")",
        "minimumSteps(s = \"01100101\")",
        "minimumSteps(s = \"001000\")",
        "minimumSteps(s = \"00010110\")"
    ],
    "sample_279": [
        "def minOperations(nums1: List[int], nums2: List[int]) -> int:\n    return min(min_swaps(nums1, nums2, nums1[-1], nums2[-1]),\n        min_swaps(nums1, nums2, nums2[-1], nums1[-1]))",
        "minOperations(nums1 = [1,3,5,4], nums2 = [1,2,3,7])",
        "minOperations(nums1 = [1,3,5,2], nums2 = [2,6,8,1,3])",
        "minOperations(nums1 = [1,2,2,1,1], nums2 = [1,2,2,1,1])",
        "minOperations(nums1 = [3,2,3], nums2 = [3,1,5])",
        "minOperations(nums1 = [3,1,1,2], nums2 = [6,5,4,3])",
        "minOperations(nums1 = [4, 1, 5, 2], nums2 = [2, 2, 1, 4])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 3, 5, 4, 2])",
        "minOperations(nums1 = [3,5,3], nums2 = [5,5,5])",
        "len(nums1)"
    ],
    "sample_277": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1,0],[0,1]])",
        "findChampion(grid = [[0, 1, 2], [1, 2, 1], [2, 1, 2]])",
        "findChampion(grid=[[0, 1, 0], [1, 1, 0], [0, 0, 0]])",
        "findChampion(grid=[[0, 1, 0], [0, 0, 0], [0, 1, 1]])",
        "findChampion(grid = [[1, 0, 1],\n                          [1, 1, 0],\n                          [0, 1, 1]])",
        "findChampion(grid = [[2, -2, 1], [1, 0, -1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 1, 1],\n[1, 0, 0, 1],\n[0, 1, 1, 0],\n[1, 0, 0, 0]])",
        "findChampion(grid = [[0, 2, 1, 2, 0], [2, 1, 0, 1, 2], [1, 0, 0, 1, 1]])",
        "findChampion(grid = [[0, 1, 0, 1, 1],\n    [0, 0, 0, 0, 0],\n    [0, 0, 1, 0, 1],\n    [0, 0, 0, 0, 0],\n    [0, 0, 1, 0, 0]])"
    ],
    "sample_244": [
        "differenceOfSums(n = 3, m = 3)",
        "differenceOfSums(n = 4, m = 1)",
        "differenceOfSums(n = 4, m = 1)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 5)",
        "differenceOfSums(n = 10, m = 4)",
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n = 8, m = 5)",
        "differenceOfSums(n = 3, m = 3)",
        "differenceOfSums(n = 20, m = 4)"
    ],
    "sample_292": [
        "minimumSteps(s = \"001101\")",
        "minimumSteps(s = \"00110011\")",
        "minimumSteps(s = \"1001010101\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"0010111\")",
        "minimumSteps(s = \"10011101\")",
        "minimumSteps(s = \"01010\")",
        "minimumSteps(s = \"0101011010\")",
        "minimumSteps(s = \"0100011111\")",
        "minimumSteps(s = \"11001000001100010\")"
    ],
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [0, 1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 6, 7])",
        "alternatingSubarray(nums = [2, 4, 6, 8, 10, 12, 14, 16])",
        "alternatingSubarray(nums = [4,2,1,3])",
        "alternatingSubarray(nums = [1,2,2,2,4])",
        "alternatingSubarray(nums = [4, 2, 5, 1, 3, 7])",
        "alternatingSubarray(nums = [2, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums=[-5, 0, 3, 5, 6, -3, 0, -5, 2, 4])"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 2, 3, 4, 5], moveTo = [4, 5, 6, 7, 8])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [3,2,1], moveTo = [1,3,2])",
        "relocateMarbles(nums = [1,2,3,4,5,6], moveFrom = [5], moveTo = [2])",
        "relocateMarbles(nums = [1, 4, 2, 3, 5], moveFrom = [2, 1, 5], moveTo = [4, 2, 3])",
        "relocateMarbles(nums = [1, 2, 5, 8], moveFrom = [2, 5], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 5, 6], moveFrom = [2, 1, 5], moveTo = [3, 1, 5])",
        "relocateMarbles(nums = [2, 1, 3, 4, 2], moveFrom = [3, 4, 1], moveTo = [2, 4, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [2, 4, 4, 3, 1, 1], moveTo = [4, 3, 5, 3, 5, 3])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1,4,1])",
        "maximumTripletValue(nums = [1, 3, 5, 2, 1])",
        "maximumTripletValue(nums = [3,2,1,4,5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 1])",
        "maximumTripletValue(nums = [0, 1, 3, 5, 7, 9])",
        "maximumTripletValue(nums = [5, 2, 8, 9, 10])",
        "maximumTripletValue(nums = [0, 2, 5, 8])",
        "maximumTripletValue(nums = [12, 9, 13, 10, 14, 15])",
        "def maximumTripletValue(nums = [1, 3, 4, 6, 7]) -> int:\n    ans = 0\n    n = len(nums)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                ans = max(ans, (nums[i] - nums[j]) * nums[k])\n    return ans",
        "maximumTripletValue(nums = [5, 10, 8, 5, 9])"
    ],
    "sample_273": [
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[1,1,1], [1,0,1], [1,1,1]])",
        "findChampion(grid = [[1, 1, 0, 0], [1, 1, 0, 0], [1, 1, 0, 0], [1, 1, 0, 0]])",
        "findChampion(grid = [[1,0,0,1],[0,0,0,1],[0,0,0,1],[1,0,0,1]])",
        "findChampion(grid = [[0,1,0,0],[1,0,0,0],[0,0,0,1]])",
        "findChampion(grid = [[0,0,0,0],[0,0,0,1],[1,1,1,0]])",
        "def findChampion(grid: List[List[int]]) -> int:\n  n = len(grid)\n  for j in range(n):\n    if all(grid[i][j]",
        "findChampion(grid = [[0, 0, 1, 1], [1, 0, 1, 0], [1, 1, 0, 0], [1, 0, 1, 1]])",
        "findChampion(grid = [\n  [0,0,1,1,0],\n  [1,1,0,0,1],\n  [1,0,1,1,0],\n  [1,0,1,1,0],\n  [0,1,0,1,0]\n])",
        "findChampion(grid=[[1,0,0,0,1],[1,0,0,1,1],[1,0,1,0,0],[1,1,1,0,1],[1,1,1,1,1]])"
    ],
    "sample_267": [
        "minSum(nums1 = [1, 4, 3, 2], nums2 = [2, 4, 1, 3])",
        "minSum(nums1 = [1, 2, 1, 1], nums2 = [1, 2, 1, 1])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [4, 5, 6, 7, 8])",
        "minSum(nums1 = [1, 2, 3, 4, 1], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [1, 4, 25], nums2 = [10, 5, 2])",
        "minSum(nums1 = [3,2,1,4,5], nums2 = [1,2,3,4,5])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [10, 3, 2, 4])",
        "minSum(nums1 = [4, 1, 3, 2, 4], nums2 = [3, 3, 4, 4, 1])",
        "minSum(nums1=[0, 0, 0, 1, 3], nums2=[0, 0, 0, 2, 3])",
        "minSum(nums1 = [2, 1, 4], nums2 = [2, 4, 5, 1, 7])"
    ],
    "sample_294": [
        "minimumSteps(s = \"001101\")",
        "minimumSteps(s = \"0101010\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"1001010101\")",
        "minimumSteps(s=\"110011\")",
        "minimumSteps(s=\"00011011\")",
        "minimumSteps(s = \"001011011\")",
        "minimumSteps(s = \"101100\")",
        "minimumSteps(s = \"1101101110\")",
        "minimumSteps(s = \"01001001110\")"
    ],
    "sample_274": [
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 0], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 1, 1], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [1, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 1, 0], [1, 1, 0], [1, 1, 0]])",
        "findChampion(grid = [[1, 1, 1, 1], [0, 0, 0, 0], [-1, -1, -1, -1]])",
        "findChampion(grid = [[1, 0, 0, 1], [0, 1, 1, 0], [0, 1, 1, 0], [1, 0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0],\n                          [1, 0, 0],\n                          [1, 0, 0]])",
        "findChampion(grid = [[2, 1, 2], [1, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [\n    [1, 2, 0, 3],\n    [0, 3, 2, 1],\n    [0, 1, 3, 1],\n    [0, 0, 3, 2]\n])"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [3,3,2,5,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7])",
        "minGroupsForValidAssignment(nums = [1, 2, 1, 2, 1, 2, 1, 2])",
        "minGroupsForValidAssignment(nums = [1, 1, 3, 4])",
        "minGroupsForValidAssignment(nums=[4,1,3,2,5])",
        "minGroupsForValidAssignment(nums = [5,4,3,3,10,2,1,4,1])",
        "minGroupsForValidAssignment(nums=[1,4,2,1])",
        "minGroupsForValidAssignment(nums = [3,3,3,5,5,4,4,3,7,7,8])",
        "minGroupsForValidAssignment(nums = [3,3,3,2,4,1,4,1,1,1])",
        "minGroupsForValidAssignment(nums = [4, 6, 20, 5, 20, 3, 5])"
    ],
    "sample_270": [
        "minSum(nums1 = [0], nums2 = [0])",
        "minSum(nums1 = [0, 0, 0, 0, 0], nums2 = [0, 0, 0, 0, 0])",
        "minSum(nums1 = [1, 2, 2, 1], nums2 = [3, 4, 3, 4])",
        "minSum(nums1 = [0,0,1], nums2 = [0,0,1])",
        "minSum(nums1 = [0, 2, 2, 2], nums2 = [1, 2, 2, 2])",
        "minSum(nums1 = [0,0,1,0], nums2 = [0,0,2,0])",
        "minSum(nums1 = [1,2,5], nums2 = [1,2,5])",
        "minSum(nums1 = [3, 1, 10], nums2 = [12, 3, 2, 15])",
        "minSum(nums1 = [1,1,2], nums2 = [3,4,3,4])",
        "minSum(nums1 = [1, 3, 4, 5, 0], nums2 = [4, 5, 1, 1, 3])"
    ],
    "sample_317": [
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [4, 2, 1], money = 5)",
        "buyChoco(prices = [1,2,3], money = 5)",
        "buyChoco(prices = [3,2,3], money = 2)",
        "buyChoco(prices = [1,2,3,4,5], money = 10)",
        "buyChoco(prices = [2,2], money = 5)",
        "buyChoco(prices = [1,2,3], money = 4)",
        "buyChoco(prices=[2,5], money=10)",
        "buyChoco(prices = [5, 4, 9], money = 10)",
        "buyChoco(prices = [12,40,33,44,32,40], money = 100)"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"aeiouu\", k = 2)",
        "beautifulSubstrings(s = \"aba\", k = 2)",
        "beautifulSubstrings(s = \"abcde\", k = 4)",
        "beautifulSubstrings(s = \"baaaa\", k = 2)",
        "beautifulSubstrings(s = \"abcde\", k = 1)",
        "beautifulSubstrings(s = \"abbcaa\", k = 2)",
        "beautifulSubstrings(s = \"eee\", k = 4)",
        "beautifulSubstrings(s = \"aeiaaioiaaiaaao\", k = 5)",
        "beautifulSubstrings(s = \"ueaeouaeiou\", k = 2)",
        "beautifulSubstrings(s = \"abcbabcbabcbabcbababcbabcbab\", k = 6)"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaab\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbbb\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaab\")",
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"bbaaccd\")",
        "longestSemiRepetitiveSubstring(s = \"dabbacaaaabca\")",
        "longestSemiRepetitiveSubstring(s = \"uubysbbay\")",
        "longestSemiRepetitiveSubstring(s = \"zfqdjqnxtgagdg\")"
    ],
    "sample_341": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 4, y = 3, z = 2)",
        "longestString(x = 2, y = 3, z = 5)",
        "longestString(x = 1, y = 1, z = 2)",
        "longestString(x = 3, y = 6, z = 5)",
        "longestString(x = 2, y = 1, z = 0)",
        "longestString(x = 4, y = 7, z = 5)",
        "longestString(x = 4, y = 5, z = 5)",
        "longestString(x = 7, y = 9, z = 4)",
        "longestString(x = 100, y = 101, z = 102)"
    ],
    "sample_271": [
        "minSum(nums1 = [1, 4, 1], nums2 = [5, 7, 2])",
        "minSum(nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0])",
        "minSum(nums1 = [3,3], nums2 = [3,3])",
        "minSum(nums1 = [4, 1, 2], nums2 = [1, 6, 3])",
        "minSum(nums1 = [1,4,3,2], nums2 = [4,1,2])",
        "minSum(nums1 = [0,0,1,2,3], nums2 = [0,1,2,3,4])",
        "minSum(nums1=[1,2,3,4],nums2=[2,3,4,5])",
        "minSum(nums1 = [1,1,2,2,5], nums2 = [1,1,2,2,5])",
        "minSum(nums1 = [10, 20, 0, 0, 0], nums2 = [0, 0, 0, 0, 10])",
        "minSum(nums1 = [0,2,4,2,4,5], nums2 = [3,2,7,5,4,3])"
    ],
    "sample_340": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 5, y = 3, z = 1)",
        "longestString(x = 1, y = 3, z = 5)",
        "longestString(x = 5, y = 4, z = 3)",
        "longestString(x = 3, y = 7, z = 5)",
        "longestString(x = 5, y = 3, z = 8)",
        "longestString(x=1, y=0, z=3)"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"1111\", k = 4)",
        "shortestBeautifulSubstring(s = \"0110\", k = 3)",
        "shortestBeautifulSubstring(s = \"111111\", k = 5)",
        "shortestBeautifulSubstring(s = \"10101\", k = 1)",
        "shortestBeautifulSubstring(s = \"1111111\", k = 1)",
        "shortestBeautifulSubstring(s = \"00110111\", k = 6)",
        "shortestBeautifulSubstring(s = \"1001110\", k = 6)",
        "shortestBeautifulSubstring(s = \"0110101101011101011\", k = 7)",
        "shortestBeautifulSubstring(s=\"00100101\", k=6)",
        "shortestBeautifulSubstring(s = \"25619148342026286414969522898388704172478683716448110179727826485493344102234615990369897902178659786916746790826331767027445373502527384252612665623520483358565237254030633480986512525832171383799688481897483514340221681069066239355897791039494451786368774328018074779059021532508348796577160398339795261634871829816581596621190032020828322080486418835394104859953939760407049551245247298827596325892645254512984798266026056192338385865314816522354207922876749311696012064728853339232297042722543414524180239812924132162311586302997637247519481408483336422407964711609"
    ],
    "sample_324": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n=192)",
        "isFascinating(n=192)",
        "isFascinating(192)",
        "isFascinating(n = 2022)"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 4, 3, 2])",
        "minimumSum(nums = [1, 2, 3, 9])",
        "minimumSum(nums = [1, 2, 4, 5])",
        "minimumSum(nums = [1, 4, 5, 6])",
        "minimumSum(nums = [2, 5, 3, 8])",
        "minimumSum(nums = [60, 70, 100])",
        "minimumSum(nums = [10, 12, 8, 16])",
        "minimumSum(nums = [4, 6, 12, 3, 5, 10])",
        "minimumSum(nums=[12, 3, 4, 5, 11])"
    ],
    "sample_268": [
        "minSum(nums1=[1, 4, 5, 2], nums2=[1, 4, 5, 2])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [2, 3, 4, 5, 6])",
        "minSum(nums1 = [1,4,5,2], nums2 = [6,5,2])",
        "minSum(nums1 = [1,2,3], nums2 = [1,1,1])",
        "minSum(nums1 = [1,2,2], nums2 = [1,2,2])",
        "minSum(nums1 = [1, 4, 5, 8], nums2 = [6, 0, 9])",
        "minSum(nums1=[1,2,3], nums2=[0,0,0])",
        "minSum(nums1 = [0,0,1,2], nums2 = [0,0,1,2])",
        "minSum(nums1 = [5,2,2,1], nums2 = [10,20,30,40])",
        "minSum(nums1 = [0,0,3,6], nums2 = [3,3,2,3])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"xyz\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ac\", s3 = \"bc\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ac\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"hello\", s2 = \"goodbye\", s3 = \"greetings\")",
        "findMinimumOperations(s1 = \"xz\", s2 = \"yx\", s3 = \"yz\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"xabcd\", s3 = \"xabcdx\")",
        "findMinimumOperations(s1=\"abca\", s2=\"abcd\", s3=\"abca\")",
        "findMinimumOperations(s1 = \"qwe\", s2 = \"wq\", s3 = \"qweqwe\")"
    ],
    "sample_321": [
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1,2,3,4,5])",
        "maxStrength(nums = [-1, 2, 3, 4])",
        "maxStrength(nums = [-1, 0, 1, -2])",
        "maxStrength(nums = [-1, -2, -3, -4, -5])",
        "maxStrength(nums = [2, -1, 3])",
        "maxStrength(nums = [3, 7, 1, 14, 7, 7, 14, 14])",
        "maxStrength(nums = [1, 0, 1, -1])",
        "maxStrength(nums = [1, 3, -1, -4, 5, -10])",
        "maxStrength(nums = [-2, 0, 2, -1, 5, -2, 0, 0, 1, -5, -2, -1, -1, 0, -2])"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1,2,3], moveFrom = [2], moveTo = [3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [2, 1], moveTo = [3, 2])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [2, 3], moveTo = [1, 3])",
        "relocateMarbles(nums = [2, 4, 3, 1], moveFrom = [2, 4], moveTo = [3, 1])",
        "relocateMarbles(nums = [1, 3, 4, 2], moveFrom = [1, 4, 2], moveTo = [3, 4, 2])",
        "relocateMarbles(nums = [1, 4, 5, 2], moveFrom = [4, 1, 5], moveTo = [2, 5, 4])",
        "relocateMarbles(nums = [1, 3, 5, 2, 4, 6], moveFrom = [3, 6, 2], moveTo = [1, 5, 4])",
        "relocateMarbles(nums = [2, 3, 1, 10], moveFrom = [1, 10], moveTo = [2, 3])",
        "relocateMarbles(nums = [4,2,1,3,5], moveFrom = [3,4], moveTo = [5,6])",
        "relocateMarbles(nums = [1, 2, 5, 2, 7, 1], moveFrom = [7, 1, 5], moveTo = [4, 1, 2])"
    ],
    "sample_357": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [9, 8])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [6, 8, 9], moveTo = [6, 8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9, 10], moveFrom = [5, 8], moveTo = [6, 10])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6], moveFrom = [2, 5], moveTo = [6, 7])",
        "relocateMarbles(nums = [5, 5, 8, 9], moveFrom = [5, 6, 8, 9], moveTo = [8, 9, 9, 9])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6], moveFrom = [3, 2], moveTo = [6, 7])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 8, 10], moveTo = [8, 10, 5])",
        "relocateMarbles(nums = [1,2,5,7], moveFrom = [1,2,3], moveTo = [1,2,3])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 2, 2], money = 4)",
        "buyChoco(prices = [1, 2, 2], money = 5)",
        "buyChoco(prices = [1, 2, 2], money = 5)",
        "buyChoco(prices = [1,2,2], money = 5)",
        "buyChoco(prices = [4, 2, 1], money = 5)",
        "buyChoco(prices = [4, 2, 1], money = 5)",
        "buyChoco(prices = [1, 2, 2], money = 4)",
        "buyChoco(prices=[1, 2, 2], money=4)",
        "buyChoco(prices=[1, 2, 2], money=4)",
        "buyChoco(prices = [2, 3, 4, 5], money = 7)"
    ],
    "sample_308": [
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2,3], [4,5,6], [7,8,9]])",
        "matrixSum(nums = [[1, 2, 3], [1, 2, 3]])",
        "matrixSum(nums = [[1, 2, 3], [1, 2, 3]])",
        "matrixSum(nums = [[1,2,3], [1,2,3], [1,2,3]])",
        "matrixSum(nums = [[1, 2, 3], [3, 1, 2]])",
        "matrixSum(nums = [[1, 2], [1, 3], [2, 4]])",
        "matrixSum(nums = [[3, 5], [2, 3], [1, 1]])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2, 2], money = 5)",
        "buyChoco(prices = [1, 2, 2], money = 5)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [3, 2, 3], money = 2)",
        "buyChoco(prices = [1, 2, 2], money = 5)",
        "buyChoco(prices = [3,2,1], money = 5)",
        "buyChoco(prices = [2, 5, 1, 3, 4, 6], money = 10)",
        "buyChoco(prices = [1, 3, 2, 5, 4], money = 4)",
        "buyChoco(prices = [1, 3, 5, 2, 6], money = 10)",
        "buyChoco(prices = [2, 2, 3, 4, 5, 6, 7], money = 20)"
    ],
    "sample_259": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [5,4,2,1])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,3,5,10])",
        "minimumSum(nums = [5, 1, 2, 4, 0])",
        "minimumSum(nums = [2,3,5,6,7,1,4])",
        "minimumSum(nums = [5, 1, 7, 10, 2, 5])",
        "minimumSum(nums=[2,5,3,6,7,1,9])",
        "minimumSum(nums = [3,1,4,6,7,8,4,1,2,1,2,1,2,1,2,1,2,1,2,1,2])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 2, 1])",
        "alternatingSubarray(nums = [-1, 2, 1, -1, 2])",
        "alternatingSubarray(nums = [1,2,2,5,6])",
        "alternatingSubarray(nums = [3, 4, 5, 4, 3, 4])",
        "alternatingSubarray(nums = [2, 1, 4, 3, 2, 1, 4, 3, 2])",
        "alternatingSubarray(nums = [1, 2, 4, 8, 16, 32, 64])",
        "alternatingSubarray(nums = [1,3,4,2,3])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 8, 10, 14])",
        "alternatingSubarray(nums = [2, 4, 8, 6, 10, 10, 12])"
    ],
    "sample_311": [
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1, 2, 3], [1, 2, 3], [1, 2, 3]])",
        "matrixSum(nums = [[1, 0], [0, 1]])",
        "matrixSum(nums = [[1,2,3], [1,2,3], [1,2,3]])",
        "matrixSum(nums = [[2, 1, 4, 3], [1, 2, 3, 4]])",
        "matrixSum(nums = [[0,0,1],[1,1,1],[2,2,2]])",
        "matrixSum(nums = [[0,1,2,3],[1,2,3,4],[1,2,3,4]])"
    ],
    "sample_316": [
        "buyChoco(a = [3, 2, 1], money = 5)",
        "buyChoco(a = [1, 3, 5], money = 11)",
        "buyChoco(a = [10, 10], money = 20)",
        "buyChoco(a=[3, 2, 1, 4], money=10)",
        "buyChoco(a = [10, 20], money = 10)",
        "buyChoco(a = [1, 2, 3], money = 18)",
        "buyChoco(a = [1, 3, 2, 4, 1], money = 7)",
        "buyChoco(a = [3, 2, 1, 4, 5], money = 9)",
        "buyChoco(a = [3, 2, 10, 5, 1], money = 18)",
        "buyChoco(a = [3, 5, 6, 12], money = 30)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [1, 2, 3])",
        "minGroupsForValidAssignment(nums = [2, 1, 5, 6, 2, 3, 2])",
        "minGroupsForValidAssignment(nums = [1,1,2,3,3])",
        "minGroupsForValidAssignment(nums=[5, 6, 5, 3])",
        "minGroupsForValidAssignment(nums = [1, 3, 4, 4, 5, 9, 10, 11, 11, 12])",
        "minGroupsForValidAssignment(nums = [2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])",
        "minGroupsForValidAssignment(nums = [3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [2, 5, 4, 3, 5, 8, 7, 10, 9, 10, 9, 8, 6, 9, 8, 6, 5, 7, 7, 5, 4, 3, 1, 3, 2, 2, 1, 10, 9, 8, 7, 8, 7, 6, 5, 4, 3, 2, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    ],
    "sample_276": [
        "findChampion(grid = [[0, 0, 1], [1, 1, 0], [0, 1, 0]])",
        "findChampion(grid = [[1,0,0,0,0],[0,1,0,0,0],[0,0,1,0,0],[0,0,0,1,0],[0,0,0,0,1]])",
        "findChampion(grid = [[1,2,3,4],[5,6,7,8],[9,10,11,12]])",
        "findChampion(grid = [[1,0,1],[0,1,0],[1,1,0]])",
        "findChampion(grid = [[1,0,1], [0,0,0], [1,1,1]])",
        "findChampion(grid = [[0,1,0],\n                           [1,1,0],\n                           [0,0,1]])",
        "def findChampion(grid: List[List[int]]) -> int:\n    n = len(grid)\n    for i in range(n):\n        if sum(row[j] for j in range(n) if j != i)",
        "findChampion(grid = [\n[1, 0, 0, 0, 0, 1],\n[0, 1, 1, 0, 0, 0],\n[0, 1, 1, 0, 0, 0],\n[0, 0, 0, 1, 0, 0],\n[0, 0, 0, 0, 1, 0],\n[0, 0, 0, 0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]])",
        "findChampion(grid = [\n    [3, 4, 1, 1],\n    [0, 2, 3, 3],\n    [4, 3, 2, 2],\n    [3, 3, 1, 1]\n])"
    ],
    "sample_320": [
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 3, 4])",
        "maxStrength(nums = [3,3,3])",
        "maxStrength(nums = [2, 3, 3, 4, 5, 6])",
        "maxStrength(nums = [5, 1, 1])",
        "maxStrength(nums = [3, 7, 2, 5])",
        "maxStrength(nums = [10, 1, 1, 2])"
    ],
    "sample_344": [
        "def minimizeConcatenatedLength(words: List[str]) -> int:\n    n = len(words)\n    @cache\n    def dp(i, first, last):\n        if i",
        "minimizeConcatenatedLength(words = [\"un\", \"iq\", \"ue\"])",
        "minimizeConcatenatedLength(words = [\"banana\", \"banana\", \"banana\", \"banana\"])",
        "minimizeConcatenatedLength(words = [\"bear\", \"blue\", \"karate\"])",
        "minimizeConcatenatedLength(words = [\"banana\", \"cast\"])",
        "minimizeConcatenatedLength(words=[\"abc\", \"xya\", \"abc\", \"xz\"])",
        "minimizeConcatenatedLength(words = [\"mn\", \"mn\", \"mo\"])",
        "minimizeConcatenatedLength(words = [\"aba\", \"bcb\", \"ece\", \"ddd\", \"aabbcc\", \"cdddeeee\", \"abababab\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"window\", \"food\", \"drink\", \"bat\", \"meal\"])",
        "minimizeConcatenatedLength(words = [\"ahsh\", \"dhbd\", \"oibh\", \"gkxn\", \"ccfu\", \"qovh\"])"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"aaa\", s2 = \"aaa\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"x\", s2 = \"y\", s3 = \"z\")",
        "findMinimumOperations(s1 = \"leetcode\", s2 = \"etco\", s3 = \"code\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"c\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"11111\", s2 = \"11111\", s3 = \"11111\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ac\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"xyz\", s3 = \"pqrs\")",
        "findMinimumOperations(s1 = \"bac\", s2 = \"bca\", s3 = \"bca\")",
        "findMinimumOperations(s1 = \"mqpxzy\", s2 = \"qpx\", s3 = \"mqz\")",
        "findMinimumOperations(s1 = \"xabx\", s2 = \"aabx\", s3 = \"xaxbx\")"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [2, 4, 1, 3])",
        "alternatingSubarray(nums = [1, 2, 3, 1, 4])",
        "alternatingSubarray(nums = [5, 10, 20, 6])",
        "alternatingSubarray(nums = [1, 2, 2, 1, 2])",
        "alternatingSubarray(nums = [2, 10, 6, 4, 8, 12])",
        "alternatingSubarray(nums=[2, 4, 1, 3])",
        "alternatingSubarray(nums = [-100000, 100000, 100000, 100000, 100000, -100000])",
        "alternatingSubarray(nums=[5, 6, 2, 7, 1, 4, 9, 8])"
    ],
    "sample_278": [
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0],\n                             [0, 1, 0],\n                             [0, 0, 1]])",
        "findChampion(grid = [[2, 3], [3, 1]])",
        "findChampion(grid = [[1,2,3],[2,1,3],[2,3,1]])",
        "findChampion(grid = [\n    [1, 1, 1, 1],\n    [1, 2, 2, 2],\n    [1, 2, 3, 3],\n    [1, 2, 3, 4]\n])",
        "findChampion(grid = [\n    [0, 0, 0, 0, 1, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0]])",
        "findChampion(grid = [[1, 1, 1, 1],\n                            [0, 1, 0, 1],\n                            [1, 1, 1, 1],\n                            [1, 1, 1, 0]])",
        "findChampion(grid = [[1,0,1,0,0],[1,1,0,1,0],[0,1,1,0,1],[1,0,1,1,1],[1,1,1,0,0]])",
        "findChampion(grid = [[3, 1, 1, 0],\n                            [1, 3, 1, 0],\n                            [0, 1, 1, 1],\n                            [0, 0, 1, 1]])"
    ],
    "sample_304": [
        "countSeniors(details = [\"78 Sunny Day\", \"34 Sunny Day\", \"21 Sunny Day\"])",
        "countSeniors(details = [\"786450032\", \"154325864\", \"054325864\"])",
        "countSeniors(details = [\"78 Sunny Dinner\", \"38 Sunny Dinner\", \"22 Sunny Dinner\"])",
        "countSeniors(details = [\"12:00 PM\", \"12:00 AM\", \"12:00 PM\", \"12:00 AM\"])",
        "countSeniors(details = [\"78 Sunny Dumbo Oct 13 2009\", \"56 Sunny Dumbo Oct 13 2009\", \"45 Sunny Dumbo Oct 13 2009\"])",
        "countSeniors(details = [\"78 Sunny Day\", \"84 Day\", \"65 Sunny Day\", \"84 Day\"])",
        "countSeniors(details = [\"78 Sunny Day\", \"84 Shiny Month\", \"100 Day Dancer\"])",
        "countSeniors(details = [\"Chelsea 25\", \"Adam 55\", \"Tony 16\", \"Raj 63\", \"Liam 19\"])",
        "countSeniors(details = [\"78 Sunny Dorsey 51\", \"19 Johnny Franklin 62\", \"47 Frankie Fletcher 19\", \"11 Anthony Montana 42\"])",
        "countSeniors(details = [\"7864990561116462935\", \"8593219677063626023\", \"9141027145167323801\", \"7321029307186460944\"])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"leetcode\", k = 2)",
        "beautifulSubstrings(s=\"abciiidef\", k=3)",
        "beautifulSubstrings(s=\"abciiidef\", k=3)",
        "beautifulSubstrings(s = \"zbax\", k = 4)",
        "beautifulSubstrings(s = \"abcxyz\", k = 6)",
        "beautifulSubstrings(s = \"abciiidkac\", k = 2)",
        "beautifulSubstrings(s = \"mubashir\", k = 5)",
        "beautifulSubstrings(s=\"aueoaa\", k=3)",
        "beautifulSubstrings(s=\"baac\", k=2)",
        "beautifulSubstrings(s = \"uiurrruru\", k = 2)"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"0110\", k = 2)",
        "shortestBeautifulSubstring(s=\"10101\", k=2)",
        "shortestBeautifulSubstring(s = \"00111\", k = 2)",
        "shortestBeautifulSubstring(s = \"11001111\", k = 3)",
        "shortestBeautifulSubstring(s = \"0110101\", k = 5)",
        "shortestBeautifulSubstring(s = \"10010101\", k = 5)",
        "shortestBeautifulSubstring(s = \"11101111\", k = 2)",
        "shortestBeautifulSubstring(s = \"1111000\", k = 4)",
        "shortestBeautifulSubstring(s=\"11100011\", k=5)",
        "def shortestBeautifulSubstring(s, k):\n    ans = 'z' * 101\n    N = len(s)\n\n    for i in range(N):\n        for j in range(i, N):\n            if s[i:j+1].count('1')"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"a\", \"b\"])",
        "minimizeConcatenatedLength(words=[\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"])",
        "minimizeConcatenatedLength(words = [\"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\",",
        "minimizeConcatenatedLength(words = [\"banana\", \"apple\", \"kiwi\", \"cherry\", \"lemon\", \"grape\", \"melon\"])",
        "minimizeConcatenatedLength(words = [\"hg\", \"nn\", \"dw\", \"mq\"])",
        "minimizeConcatenatedLength(words = [\"d\", \"g\", \"ab\", \"f\", \"ba\", \"c\", \"d\", \"a\", \"e\", \"b\"])",
        "def minimizeConcatenatedLength(words: List[str]) -> int:\n    n = len(words)\n    @cache\n    def dfs(i, l, r):\n        if i"
    ],
    "sample_327": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 7)",
        "isFascinating(n = 7)",
        "isFascinating(n=39)",
        "isFascinating(n = 20)",
        "isFascinating(n = 201)",
        "isFascinating(n = 201)",
        "isFascinating(n = 475)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[9, 8, 7, 6], [5, 4, 3, 2], [1, 2, 3, 4]])",
        "matrixSum(nums = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]])",
        "matrixSum(nums = [[1,2], [3,4]])",
        "matrixSum(nums = [[3, 2], [4, 5], [6, 7]])",
        "matrixSum(nums = [[3, 5], [3, 4], [7, 6], [4, 6]])",
        "matrixSum(nums = [[4, 1, 1], [5, 5, 5], [1, 3, 4]])",
        "matrixSum(nums = [[3, 2, 5, 4], [1, 4, 6, 2], [7, 8, 9, 5]])"
    ],
    "sample_326": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 21)",
        "isFascinating(n = 200)",
        "isFascinating(n = 725)",
        "isFascinating(n = 7)",
        "isFascinating(n = 7)"
    ],
    "sample_275": [
        "findChampion(grid = [[0, 0, 1], [0, 1, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0],\n                           [0, 0, 0],\n                           [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [1, 1, 1, 0]])",
        "findChampion(grid = [[0,1,0],[0,1,0],[0,0,0]])",
        "findChampion(grid = [[0, 1, 1, 1], [1, 0, 0, 1], [1, 0, 0, 1], [1, 1, 1, 0]])",
        "findChampion(grid = [[0, 1, 0, 1], [1, 0, 0, 1], [1, 0, 1, 0], [1, 1, 0, 0]])",
        "findChampion(grid = [[1,1,1,1],[0,1,0,1],[1,0,1,0],[1,1,1,1]])",
        "findChampion(grid = [[0,1,1,0],\n                            [0,0,0,1],\n                            [1,1,0,1],\n                            [0,0,0,0]])",
        "findChampion(grid = [[0,0,1,0],[1,1,0,0],[0,1,0,0],[0,0,0,0]])",
        "findChampion(grid = [[1, 0, 0, 0, 0, 1, 1],\n[1, 0, 0, 0, 1, 0, 0],\n[0, 0, 0, 1, 1, 0, 1],\n[0, 0, 1, 0, 1, 0, 0],\n[0, 1, 1, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0],\n[0, 1, 1, 0, 0, 0, 0]])"
    ],
    "sample_260": [
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [1, 3, 5, 7])",
        "minimumSum(nums = [5, 4, 2, 3])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [1, 2, 5, 10, 20, 50])",
        "minimumSum(nums = [1, 1, 2, 2, 3, 3])",
        "minimumSum(nums = [1, 3, 5, 2, 6])",
        "minimumSum(nums = [5, 7, 9, 10, 11, 12])",
        "minimumSum(nums=[10,20,15,10,25])",
        "minimumSum(nums=[6,2,1,4,3,1,6])"
    ],
    "sample_322": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 7254)",
        "isFascinating(n=192)",
        "isFascinating(n = 21)",
        "isFascinating(n = 27)",
        "isFascinating(n=725410)",
        "isFascinating(n = 2719)"
    ],
    "sample_248": [
        "minOperations(s1 = \"1010\", s2 = \"0110\", x = 2)",
        "minOperations(s1 = \"11\", s2 = \"1\", x = 1)",
        "minOperations(s1 = \"110\", s2 = \"011\", x = 0)",
        "minOperations(s1 = \"1\", s2 = \"111\", x = 2)",
        "minOperations(s1 = \"010\", s2 = \"111\", x = 2)",
        "minOperations(s1 = \"111\", s2 = \"001\", x = 2)",
        "minOperations(s1 = \"11\", s2 = \"01\", x = 1)",
        "minOperations(s1 = \"1\", s2 = \"0\", x = 2)",
        "def minOperations(s1: str, s2: str, x: int) -> int:\n    if (s1.count('1') + s2.count('1')) % 2",
        "minOperations(s1 = \"000111\", s2 = \"100\", x = 2)"
    ],
    "sample_342": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 4, z = 6)",
        "longestString(x = 10, y = 20, z = 30)",
        "longestString(x = 3, y = 1, z = 4)",
        "longestString(x = 1, y = 2, z = 1)",
        "longestString(x = 10, y = 5, z = 1)",
        "longestString(x = 5, y = 2, z = 2)",
        "longestString(x = 1, y = 10, z = 5)",
        "longestString(x = 10, y = 15, z = 2)",
        "longestString(x = 4, y = 2, z = 12)"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [8, 9], moveTo = [5, 6])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 8, 9], moveTo = [6, 8, 9])",
        "relocateMarbles(nums = [8, 9, 5, 6], moveFrom = [6, 8], moveTo = [5, 9])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [4, 5], moveTo = [1, 2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [2, 3, 4], moveTo = [3, 4, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [3, 5, 7, 9], moveTo = [5, 7, 9, 11])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6], moveFrom = [2, 3, 5, 6], moveTo = [5, 6, 7, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6], moveFrom = [1, 4, 5], moveTo = [1, 3, 4])",
        "relocateMarbles(nums=[1, 2, 3, 4], moveFrom=[1, 3, 5], moveTo=[4, 6, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [4, 3, 5, 7], moveTo = [3, 5, 4, 8])"
    ],
    "sample_306": [
        "countSeniors(details = [\"78 Sunny Day\", \"74 Cloudy Day\", \"71 Rainy Day\"])",
        "countSeniors(details = [\"12:44 AM\", \"12:45 PM\", \"01:01 AM\"])",
        "countSeniors(details = [\"78 Sunny Day\", \"33 Rainy Day\", \"21 Cloudy Day\"])",
        "countSeniors(details = [\"78 Sunny Day\", \"34 Train\", \"24 Summer Sunny\", \"56 Winter Day\"])",
        "countSeniors(details = [\"78 Sunny Derby 55\", \"54 Shiva Lake 33\", \"11 Sunny Lagoon 93\"])",
        "countSeniors(details = [\"72000\", \"13000\", \"55351\", \"63999\"])",
        "countSeniors(details = [\"A-23-000\", \"A-84-000\", \"A-66-100\", \"A-18-000\"])",
        "countSeniors(details = [\"78 Sunny Dorado 34 Alhambra St. Hood River\", \"34 Wheeler Hill 90 Maple St. Springfield\", \"45 Yoshi 27 B bactericidal Mtn.\", \"10 Cedar Point 43 Lone Pine Rd. Los Angeles\"])",
        "countSeniors(details = [\"45160854563\", \"45161089563\", \"6515660953\", \"25168753463\"])",
        "countSeniors(details = [\"78 Sunny Dorado 34 Fullerton, CA 92833\", \"38 Cameron Dale 10 Downing Street, NJ 07060\", \"22 Frank Mccarthy 5515 Dudley Drive, GA 30546\", \"23 Larry Downton 1206 Downton Parkway, VA 23450\"])"
    ],
    "sample_303": [
        "countSeniors(details = [\"12:45 PM\", \"12:40 AM\", \"12:34 PM\"])",
        "countSeniors(details = [\"1988:01:01 23:59:59\", \"2019:01:01 00:00:00\"])",
        "countSeniors(details = [\"12:45 PM\", \"12:00 AM\", \"23:59 09:14 PM\"])",
        "countSeniors(details = [\"12:45 pm\", \"12:40 am\", \"12:34 pm\", \"12:34 am\"])",
        "countSeniors(details = [\"12:45PM\", \"12:40AM\", \"12:35PM\"])",
        "countSeniors(details = [\"Aaron:19#\", \"Daniel:21#\", \"Mark:15#\", \"Sam:22#\"])",
        "countSeniors(details=[\n\"12:15PM\", \"09:00AM\", \"03:30PM\", \"11:15AM\"])",
        "countSeniors(details = [\"Will18\", \"Will31\", \"Will11\", \"Will25\", \"Will45\"])",
        "countSeniors(details = [\"1991M1011001\",\"2001M021101\",\"2011M031101\",\"2010M011001\"])",
        "countSeniors(details = [\"73167176531330624919225119674426574742355349194934\", \"919122871720004566518395864278724\", \"55582927538154606295782836296399225722377468000515455\", \"28169931614907502305383491399459955439285946056055\", \"693693693693920524946147568622331470488295404259646522\"])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [5, 7, 9], moveTo = [6, 8, 10])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6, 8], moveTo = [9, 10, 12])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 3, 4], moveTo = [6, 7, 8])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 9, 6, 8], moveTo = [9, 8, 5, 6])",
        "relocateMarbles(nums = [2, 1, 3, 4], moveFrom = [1, 3], moveTo = [4, 1])",
        "relocateMarbles(nums = [5, 6, 8, 9, 11], moveFrom = [6, 9], moveTo = [11, 10])",
        "relocateMarbles(nums = [5, 4, 3, 2, 1], moveFrom = [2, 3, 1, 4, 5], moveTo = [3, 2, 5, 4, 1])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [8, 9, 2, 3], moveTo = [1, 0, 2, 4])",
        "relocateMarbles(nums = [5, 10, 20, 30, 40, 50], moveFrom = [30, 40], moveTo = [100, 200])",
        "relocateMarbles(nums = [5, 6, 8, 9, 1, 10, 2], moveFrom = [5, 6, 1, 2], moveTo = [10, 6, 1, 10])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"aaa\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1=\"aaa\", s2=\"bbb\", s3=\"ccc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"cde\", s3 = \"fgh\")",
        "findMinimumOperations(s1=\"abc\", s2=\"cde\", s3=\"efg\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"yz\", s3 = \"xy\")",
        "findMinimumOperations(s1=\"aaba\", s2=\"baca\", s3=\"acca\")",
        "findMinimumOperations(s1=\"nnaa\", s2=\"aaaa\", s3=\"aaab\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"m\", s2 = \"m\", s3 = \"m\")",
        "findMinimumOperations(s1 = \"aaaa\", s2 = \"aaa\", s3 = \"aaaa\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"cdef\", s3 = \"uvwxy\")",
        "findMinimumOperations(s1 = \"daniel\", s2 = \"daniel\", s3 = \"daniel\")",
        "findMinimumOperations(s1 = \"aa\", s2 = \"bb\", s3 = \"bb\")",
        "findMinimumOperations(s1 = \"xyzz\", s2 = \"xyz\", s3 = \"z\")",
        "findMinimumOperations(s1 = \"tur\", s2 = \"bomb\", s3 = \"reb\")"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [4, 3, 2, 1])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [3,1,4,2])",
        "semiOrderedPermutation(nums = [4, 3, 2, 1, 5])",
        "semiOrderedPermutation(nums=[3, 4, 1, 2])",
        "semiOrderedPermutation(nums = [5, 1, 3, 2])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7])",
        "semiOrderedPermutation(nums=[5, 4, 3, 2, 1])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1, 2, 1, 2, 1, 2])",
        "continuousSubarrays(a = [2, 4, 6, 8, 10])",
        "continuousSubarrays(a=[1, 2, 1, 3, 4, 3, 1])",
        "continuousSubarrays(a = [1, 2, 1, 1, 3, 2, 3])",
        "continuousSubarrays(a = [0, 1, 3, 2, 4])",
        "continuousSubarrays(a = [1,1,1,1,1,1,1,1])",
        "continuousSubarrays(a=[1, 1, 2, 1, 2, 1])",
        "continuousSubarrays(a = [0,1,1,1,0,1,0])",
        "continuousSubarrays(a = [1, 2, 1, 3, 4, 3, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(a = [1, 3, 4, 5, 6, 7, 2, 3, 4, 5])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [1, 3, 5, 2, 7, 5])",
        "continuousSubarrays(nums = [4,2,2,2,4,4,2,2])",
        "continuousSubarrays(nums = [1, 2, 3, 3])",
        "continuousSubarrays(nums = [1, 3, 5, 2, 7, 5])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays(nums = [2,1,4,3,6,8,10,9,11,12])",
        "continuousSubarrays(nums = [1, 2, 3, 5, 7, 10])",
        "continuousSubarrays(nums = [4, 3, 4, 4, 6, 3])",
        "continuousSubarrays(nums = [1, 4, 2, 1, 5, 1, 2])",
        "continuousSubarrays(nums = [1,2,2,3,3,1,2,1,2,2,2])"
    ],
    "sample_8": [
        "colorTheArray(n = 3, queries = [[0, 0], [1, 1], [2, 2]])",
        "colorTheArray(n = 4, queries = [[1, 2], [1, 3], [2, 4], [1, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [1, 3], [4, 5]])",
        "colorTheArray(n = 5, queries = [[0, 3], [1, 2], [2, 3]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 1], [2, 1], [1, 1]])",
        "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    a = [0] * n\n    y = 0\n    ans = []\n    for i, c in queries:\n        y -= a[i] and (i > 0 and a[i]",
        "colorTheArray(n = 4, queries = [[2,1], [3,2], [4,3], [3,2], [1,3], [4,3]])",
        "colorTheArray(n = 5, queries = [[0, 2], [2, 2], [0, 1], [3, 3], [4, 4]])",
        "colorTheArray(n = 5, queries = [[2, 4], [3, 5], [1, 3], [0, 0], [0, 1]])",
        "colorTheArray(n = 10, queries = [[1, 2], [3, 3], [1, 8], [1, 10], [1, 9], [3, 5], [3, 10], [3, 4], [2, 4], [2, 9]])"
    ],
    "sample_97": [
        "maximumJumps(nums = [1, 3, 6, 4, 1, 0, 99], target = 5)",
        "maximumJumps(nums = [7, 6, 9, 2, 9], target = 9)",
        "maximumJumps(nums = [3,2,1,0,4], target = 2)",
        "maximumJumps(nums = [2,1,4,1,5,4,8,5], target = 3)",
        "maximumJumps(nums = [5, 10, 40, 10, 10, 5], target = 15)",
        "maximumJumps(nums = [1, 1, 3, 6, 9, 2, 3, 2, 4, 9], target = 3)",
        "maximumJumps(nums = [7,2,4,1,5,6,0], target = 10)",
        "maximumJumps(nums = [2,4,8,16,32,64,128,256,512,1024,2048,4096,8192], target = 10)",
        "maximumJumps(nums = [2, 1, 4, 0, 4, 4, 7, 5], target = 3)",
        "maximumJumps(nums = [2, 5, 1, 2, 5, 2, 3, 1, 2, 1], target = 2)"
    ],
    "sample_22": [
        "minLength(s = \"AAABCD\")",
        "minLength(s = \"CDA\")",
        "minLength(s=\"ACDBCB\")",
        "minLength(s = \"ABCABBCD\")",
        "minLength(s = \"AAABCDDE\")",
        "minLength(s = \"CBABA\")",
        "minLength(s=\"ABCDEBCAB\")",
        "minLength(s = \"AABCDAAC\")",
        "minLength(s = \"abCDE\")",
        "minLength(s = \"ACABABB\")"
    ],
    "sample_7": [
        "colorTheArray(n = 5, queries = [[1, 1], [1, 2], [1, 3], [1, 4], [1, 5]])",
        "colorTheArray(n = 3, queries = [[1, 2], [2, 3], [3, 2]])",
        "colorTheArray(n=3, queries=[[1, 1], [1, 2], [2, 1], [2, 2]])",
        "colorTheArray(n = 3, queries = [[2, 3], [1, 3], [1, 3]])",
        "colorTheArray(n = 5, queries = [[1,1],[3,2],[1,3],[1,4],[2,2]])",
        "colorTheArray(n = 2, queries = [\n    [0, 0],\n    [0, 1],\n    [1, 0],\n    [1, 1],\n])",
        "colorTheArray(n = 4, queries = [[2, 1], [1, 2], [1, 1], [0, 3]])",
        "colorTheArray(n = 5, queries = [[0, 2], [2, 3], [1, 4], [2, 1], [3, 1]])",
        "colorTheArray(n = 5, queries = [[0, 3], [1, 1], [4, 0], [2, 4], [3, 2]])",
        "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    ans = [0]\n    for query in queries:\n        a = ans[-1]\n        if query[0] > 0 and a[query[0]-1]"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[1, 1], [1, 2], [1, 3], [1, 4], [1, 5]])",
        "colorTheArray(n = 5, queries = [[0, 2], [1, 2], [3, 1], [3, 3]])",
        "colorTheArray(n = 6, queries = [[0, 2], [1, 3], [1, 2]])",
        "colorTheArray(n = 6, queries = [[1, 1], [1, 3], [2, 3], [4, 3], [4, 5], [6, 3]])",
        "colorTheArray(n = 5, queries = [[0, 3], [0, 3], [0, 4], [2, 2], [1, 4]])",
        "colorTheArray(n = 6, queries = [[1, 1], [2, 2], [1, 3], [1, 1], [1, 3], [1, 2]])",
        "colorTheArray(n = 5, queries = [[2, 3], [0, 3], [3, 3], [3, 4], [1, 0]])",
        "colorTheArray(n = 7, queries = [[1, 0], [2, 1], [3, 2], [2, 1], [5, 2], [6, 3]])",
        "colorTheArray(n = 5, queries = [[1, 1], [3, 1], [1, 3], [2, 3], [4, 3], [3, 3], [1, 4], [2, 4], [2, 5]])",
        "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    colors = [0] * n\n    ans = []\n    res = 0\n    for i, c in queries:\n        if i and colors[i]"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [2,5,4,1,3])",
        "semiOrderedPermutation(nums = [2, 5, 3, 1])",
        "semiOrderedPermutation(nums = [4,2,1,5,3])",
        "semiOrderedPermutation(nums = [5,3,4,2,1])",
        "semiOrderedPermutation(nums = [4,1,3,5])",
        "semiOrderedPermutation(nums = [4, 1, 3, 5])",
        "semiOrderedPermutation(nums=[1, 3, 2, 5, 4])",
        "semiOrderedPermutation(nums = [1, 4, 2, 5])",
        "semiOrderedPermutation(nums = [1,3,5,6,2,4])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4, 5, 7, 6])"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7], threshold = 4)",
        "longestAlternatingSubarray(nums=[1, 3, 2, 4], threshold=3)",
        "longestAlternatingSubarray(nums = [1, 4, 2, 1], threshold = 3)",
        "longestAlternatingSubarray(nums = [2, 3, 6, 8, 6, 4], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 9, 10], threshold = 4)",
        "longestAlternatingSubarray(nums=[2,4,7,10], threshold=10)",
        "longestAlternatingSubarray(nums = [2, 4, 1, 5, 3, 8, 1, 7], threshold = 3)",
        "longestAlternatingSubarray(nums = [2, 4, 1, 3, 5, 2, 1, 2, 4, 5, 4], threshold = 3)"
    ],
    "sample_33": [
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num=\"512301\")",
        "removeTrailingZeros(num=\"0512301\")",
        "removeTrailingZeros(num = \"000012301\")",
        "removeTrailingZeros(num = \"002301\")",
        "removeTrailingZeros(num='00123')",
        "removeTrailingZeros(num = '0123001')"
    ],
    "sample_50": [
        "smallestString(s = \"abaaa\")",
        "smallestString(s = \"baaaa\")",
        "smallestString(s = \"zabaab\")",
        "smallestString(s = \"aabaab\")",
        "smallestString(s = \"aabbaa\")",
        "smallestString(s = \"abc\")",
        "smallestString(s = \"abac\")",
        "smallestString(s = \"azzz\")",
        "smallestString(s=\"acaac\")",
        "smallestString(s = \"azc\")"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 3, 1, 5, 4])",
        "distinctDifferenceArray(nums=[3, 1, 5, 4])",
        "distinctDifferenceArray(nums = [1, 1, 3, 1, 3, 1, 1])"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 3)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 7, additionalTank = 2)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 20, additionalTank = 3)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)"
    ],
    "sample_118": [
        "minimumIndex(nums = [2, 2, 2, 2, 5, 2])",
        "minimumIndex(nums = [0, 1, 2, 3, 4, 5])",
        "minimumIndex(nums = [3, 4, 1, 1, 6])",
        "minimumIndex(nums = [3,2,2,3])",
        "minimumIndex(nums = [0, 1, 0, 2, 0, 1, 3])",
        "minimumIndex(nums = [0, 0, 1, 3, 1, 1])",
        "minimumIndex(nums = [1,1,2,3,5,5,5,5])",
        "minimumIndex(nums = [5, 1, 5, 1, 5, 5, 1, 5, 5])",
        "minimumIndex(nums=[0, 1, 1, 3, 3, 4, 5])",
        "minimumIndex(nums=[3, 0, 2, 3, 4, 3, 0])"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [12,345,2,6,7896])",
        "countBeautifulPairs(nums = [11, 22, 33, 44])",
        "countBeautifulPairs(nums = [1, 1, 2, 2, 3, 3])",
        "countBeautifulPairs(nums = [12, 34, 56, 78, 90])",
        "countBeautifulPairs(nums=[2,4,6,8])",
        "countBeautifulPairs(nums = [5, 14, 13, 7])",
        "countBeautifulPairs(nums = [34, 27, 36, 75])",
        "countBeautifulPairs(nums = [10, 12, 24, 35, 45, 55, 91, 125, 200])",
        "countBeautifulPairs(nums = [40, 90, 50, 350, 35, 45, 9, 2, 3])",
        "countBeautifulPairs(nums = [4669,8112,6706,6582,2274,3961,1066,3788,9878,1207,5834,6361,5415,4681,5759,3433,3271,9360,9692,5918,6276,5787,5523,9874,1882,9011,8428,3251,5887,6679,9256,5131,3649,3763,1252,5877,5858,6045,6316,6414,4945,2619,9763,7150,4062,9632,8883,8381,5261,6171,2512,8570,5669,4382,4394,2695,2030,2677,9244,1212,6332,6886,7440,6921,8587,2615,1693,3356,9024,8346,3877,9970,6453,3081,4722,7937,5172,5143,6822,2016,7007,6107,5073,6593,6635,9481,5409,2651,4224,3385,4360,6703,2510,9693,4365,5414,2234,8594,2755,9766,1694,1757,5695,9686,3854,5358,7719,4425,4240,4696,8350,3768,6606,5263,9069,8367,2390,49"
    ],
    "sample_30": [
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '0512301')",
        "removeTrailingZeros(num = \"00512301\")",
        "removeTrailingZeros(num = '123000')",
        "removeTrailingZeros(num = '100000000000000000000000')",
        "removeTrailingZeros(num = \"23001\")"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abacaba\")",
        "minimizedStringLength(s = \"aaaabbbbcccc\")",
        "minimizedStringLength(s = \"aaa\")",
        "minimizedStringLength(s = \"aaab\")",
        "minimizedStringLength(s = \"abacbc\")",
        "minimizedStringLength(s=\"abcabcabcabc\")",
        "minimizedStringLength(s = \"aaaabbcccc\")"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1,2,3,4], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 1)",
        "maximumBeauty(nums = [4,1,5,2,2], k = 2)",
        "maximumBeauty(nums = [4,2,1,4,3,3], k = 2)",
        "maximumBeauty(nums = [2,4,1,2,7], k = 2)",
        "maximumBeauty(nums = [4, 6, 3, 5, 10, 11], k = 1)",
        "maximumBeauty(nums = [2, 3, 2, 5, 2, 4, 2], k = 3)"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 10, num2 = 4)",
        "makeTheIntegerZero(num1 = 2, num2 = 4)",
        "makeTheIntegerZero(num1 = 6, num2 = 3)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 20)",
        "makeTheIntegerZero(num1 = 15, num2 = 24)",
        "makeTheIntegerZero(num1 = 13, num2 = 20)",
        "makeTheIntegerZero(num1 = 100, num2 = 20)"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 2, 5, 10, 20, 40])",
        "findValueOfPartition(nums = [1, 3, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 5])",
        "findValueOfPartition(nums = [1, 5, 3, 4, 8])",
        "findValueOfPartition(nums = [1, 3, 1, 5])",
        "findValueOfPartition(nums = [2, 7, 4, 1, 5, 3])",
        "findValueOfPartition(nums = [2, 1, 5, 3, 4])",
        "findValueOfPartition(nums = [3, 1, 7, 5, 10])",
        "findValueOfPartition(nums = [1, 4, 6, 8, 9, 11])",
        "findValueOfPartition(nums = [2,10,6,5])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 7, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 3)",
        "distanceTraveled(mainTank = 4, additionalTank = 2)",
        "distanceTraveled(mainTank = 3, additionalTank = 3)",
        "distanceTraveled(mainTank = 30, additionalTank = 2)",
        "distanceTraveled(mainTank = 15, additionalTank = 2)",
        "distanceTraveled(mainTank = 8, additionalTank = 3)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0,1,1,0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0,0,0,1,1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1])"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"mqp\")",
        "makeSmallestPalindrome(s = \"bcb\")",
        "makeSmallestPalindrome(s = \"bob\")",
        "makeSmallestPalindrome(s=\"word\")",
        "makeSmallestPalindrome(s = \"zcxz\")",
        "makeSmallestPalindrome(s = \"wow\")",
        "makeSmallestPalindrome(s = \"woonnn\")"
    ],
    "sample_110": [
        "checkArray(nums = [4, 2, 2, 5, 1, 5, 8], k = 3)",
        "checkArray(nums = [1, 3, 2, 4], k = 2)",
        "checkArray(nums = [1,0,0,1,1,0,1], k = 3)",
        "checkArray(nums=[1,0,0,0,1,0,0,1], k=3)",
        "checkArray(nums = [1, -1, 3, 2], k = 3)",
        "checkArray(nums=[1, 0, 0, 0, 1], k=2)",
        "checkArray(nums=[-2, 2, 6, -1], k=2)",
        "checkArray(nums = [1, 3, 5, 7, 9, 11, 2, 4, 6, 8], k = 3)",
        "checkArray(nums=[-1, 2, -3, 3, 2, -1], k=2)",
        "checkArray(nums = [1, 5, 6, 2, 5, 7, 10], k = 3)"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [1, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1,1,1,0,1,1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1, 0, 0])",
        "doesValidArrayExist(derived = [1, 1, 1, 0, 0])",
        "doesValidArrayExist(derived = [0,1,1,0,0,1,1])",
        "doesValidArrayExist(derived = [1, 0, 0, 0, 1, 0, 1, 1, 0, 0])",
        "doesValidArrayExist(derived = [2, 1, 2, 1, 0, 0, 2, 1, 0])"
    ],
    "sample_54": [
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"aabaa\")",
        "smallestString(s = 'aab')",
        "smallestString(s = \"abcd\")",
        "smallestString(s = \"aaaa\")",
        "smallestString(s=\"aaaaaaaaa\")",
        "smallestString(s = \"aaa\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"aaaabbbbccccdddeeee\")",
        "smallestString(s = \"bbabb\")"
    ],
    "sample_93": [
        "continuousSubarrays(A=[1, 2, 1, 2, 1])",
        "continuousSubarrays(A=[1, 2, 3, 2, 1])",
        "continuousSubarrays(A = [1,1,2,2,1,1])",
        "continuousSubarrays(A = [1, 1, 2, 2, 2, 3, 3, 3])",
        "continuousSubarrays(A=[1, 2, 1, 2, 1, 3, 1])",
        "continuousSubarrays(A = [2, 4, 6, 8])",
        "continuousSubarrays(A=[1, 1, 1, 2, 2, 2, 3])",
        "continuousSubarrays(A = [0,1,2,1,1,2,1,2,1])",
        "continuousSubarrays(A = [4, 2, 2, 5, 4, 2, 1, 5, 4, 4, 2, 3, 5])",
        "continuousSubarrays(A = [3, 2, 3, 3, 2, 3, 3, 3, 3, 2, 3, 2, 3])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"banana\")",
        "makeSmallestPalindrome(s = \"abcba\")",
        "makeSmallestPalindrome(s = \"abacaba\")",
        "makeSmallestPalindrome(s = \"abbca\")",
        "makeSmallestPalindrome(s = \"abcde\")",
        "makeSmallestPalindrome(s=\"abaa\")",
        "makeSmallestPalindrome(s = \"abcdefgh\")"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [5, 3, 1, 2, 4])",
        "findValueOfPartition(nums = [1, 5, 0, 3, 5])",
        "findValueOfPartition(nums = [1, 5, 3, 4, 6])",
        "findValueOfPartition(nums = [1, 10, 5, 2, 3])",
        "findValueOfPartition(nums = [1, 10, 5, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3, 1])",
        "findValueOfPartition(nums = [-1, 4, 5, 6, 7])",
        "findValueOfPartition(nums=[1, 2, 4, 6, 5])",
        "findValueOfPartition(nums = [3, 6, 3, 7, 2])",
        "findValueOfPartition(nums = [2, 1, 2, 3, 1, 2, 2])"
    ],
    "sample_51": [
        "smallestString(s = 'aaa')",
        "smallestString(s = \"bac\")",
        "smallestString(s = \"baa\")",
        "smallestString(s = \"abb\")",
        "smallestString(s = 'bbbbbbba')",
        "smallestString(s = 'codeleet')",
        "smallestString(s = \"mzk\")",
        "smallestString(s = \"aagbd\")",
        "smallestString(s=\"ffeeef\")",
        "smallestString(s = \"azqazbq\")"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 4, 8, 16], k = 2)",
        "maximumBeauty(nums = [1,3,5,2,7,5], k = 1)",
        "maximumBeauty(nums = [1, 2, 4, 8, 16], k = 3)",
        "maximumBeauty(nums = [2, 2, 2, 2, 2], k = 2)",
        "maximumBeauty(nums = [1, 3, 3, 2], k = 1)",
        "maximumBeauty(nums = [1,10,10,10,3], k = 3)",
        "maximumBeauty(nums = [5, 10, 10, 20, 15], k = 2)",
        "maximumBeauty(nums = [1,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4], k = 2)",
        "maximumBeauty(nums = [4,2,2,2,4,2,2,2,2,2,2,2,4,4,2,4,4,2,4,4,4,2,4,4,4,2,4,2,4,4,2,4,2,4,4,2,2,2,2,2,4,4,2,2,2,4,2,4,4,2,2,4,2,4,4,4,4,4,2,4,2,4,2,2,4,2,2,2,2,4,4,2,2,2,4,2,2,2,4,4,4,2,4,2,2,2,2,4,2,2,2,2,4,2,4,4,4,2,4,2,2,2,2,4,2,2,2,2,2,2,2,2,4,4,2,4,2,4,2,4,2,2,2,4,4,2,4,4,4,4,2,4,4,2,2,2,2,4,4,2,2,2,2,4,2,4,2,2,2,4,2,2,2,2,2,2,4,2,2,2,2,4,2,4,2,2,2,4,2,2,2,4,4,2,2,2,4,2,2,2,4,2,4,4,2,4,4,4,4,4,2,2,4,4,4,2,2,2,4,2,4,2,2,2,2,4,2,2,4,2,2,4,4,4,4,2,2,2,4,4,2,4,2,2,2,2,4,2,2,2,2,2,2,2,2,4,2,2,4,4,2,2,4,2,2,2,2,2,4,2,2,4,2,4,2,2,2,2,2,2,2,2,4,2,4,2,2,4,2,2,4,4,4,4,2,4,2,2,2,4,2,4,2,2,2,2,2,4,2,2,2,2,2,2,2,2,"
    ],
    "sample_107": [
        "checkArray(nums = [1,2,3,1,4,5], k = 3)",
        "checkArray(nums=[1, 5, 3, 4, 3, 3, 6, 7], k=3)",
        "checkArray(nums=[1, 2, 3, 1, 4], k=3)",
        "checkArray(nums=[1, 2, 3, 1, 4], k=4)",
        "checkArray(nums=[1, 2, 3, 4, 5, 6, 7, 8], k=4)",
        "checkArray(nums = [1, 2, 3, 2, 1, 3], k = 3)",
        "checkArray(nums = [1,1,1,1,2,1], k = 4)",
        "checkArray(nums=[1, 3, 4, 1, 5], k=2)",
        "checkArray(nums = [4, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "checkArray(nums = [3, 1, 2, 3, 2, 6, 4, 6, 5, 3, 2, 5, 4, 1, 4, 5, 3, 2, 6, 4, 1, 2, 5, 2, 3, 1, 6, 2, 5, 1, 3, 6, 3, 2, 4, 6, 1, 6, 2, 5, 4, 3, 2, 6, 5, 2, 4, 1, 3, 1, 5, 6, 1, 1, 6, 4, 1, 2, 6, 5, 2, 3, 4, 5, 6, 1, 2, 6, 5, 3, 4, 2, 5, 4, 3, 4, 5, 5, 4, 3, 2, 3, 6, 4, 1, 6, 5, 2, 5, 4, 6, 3, 2, 6, 5, 6, 3, 6, 5, 2, 5, 3, 2, 6, 5, 6, 3, 6, 4, 1, 2, 6, 5, 6, 2, 4, 5, 1, 3, 6, 5, 3, 4, 6, 2, 5, 1, 2, 4, 5, 3, 2, 5, 6, 1, 5, 6, 3, 5, 4, 1, 2, 3, 2, 5, 1, 2, 3, 6, 1, 6, 5, 4, 1, 2, 3, 6, 2, 3, 4, 5, 6, 2, 5, 3, 4, 1, 3, 2, 6, 4, 6, 5, 2, 5, 3, 6, 2, 5, 3, 6, 1, 5, 4, 6, 3, 2, 4, 5"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 20, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 15, additionalTank = 10)",
        "distanceTraveled(mainTank = 12, additionalTank = 2)"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 2, 2])",
        "distinctDifferenceArray(nums = [3, 1, 2, 4, 2])",
        "distinctDifferenceArray(nums=[3, 2, 4, 1, 5, 0])",
        "distinctDifferenceArray(nums = [4, 1, 2, 3, 5, 6, 7, 8, 9])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1, 2, 1, 3, 4, 3])",
        "continuousSubarrays(A = [1, 2, 1, 2, 1])",
        "continuousSubarrays(A = [1,2,1,2,1,2,1,2])",
        "continuousSubarrays(A = [1, 2, 1, 3, 1])",
        "continuousSubarrays(A = [1,2,2,3,1,4,2])",
        "continuousSubarrays(A = [1, 2, 3, 1, 4, 1, 5])",
        "continuousSubarrays(A = [1, 3, 3, 2, 2, 2, 4])",
        "continuousSubarrays(A = [1,2,3,1,3,1,3])",
        "continuousSubarrays(A = [1,1,1,2,2,2,2,2,3,3,3,4,5])",
        "continuousSubarrays(A = [0, 1, 1, 1, 2, 3, 1, 1, 1, 2, 2, 1, 1, 1, 1])"
    ],
    "sample_6": [
        "colorTheArray(n = 4, queries = [[0,1],[3,2]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,3]])",
        "colorTheArray(n=5, queries=[[0,1],[3,2]])",
        "colorTheArray(n=3, queries=[[0,0],[0,2],[1,1]])",
        "colorTheArray(n = 4, queries = [[0,3],[1,2]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [2, 1]])",
        "colorTheArray(n = 5, queries = [[1,5],[1,6],[3,4]])",
        "colorTheArray(n=4, queries = [[0,2],[1,2],[3,0]])",
        "colorTheArray(n=4, queries=[[1,2],[3,2],[3,4],[1,2]])",
        "colorTheArray(n = 10, queries = [[5, 1], [6, 1], [9, 0], [1, 1], [1, 5], [1, 10]])"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 10, b = 5)",
        "makeTheIntegerZero(a = 12, b = 2)",
        "makeTheIntegerZero(a = 6, b = 3)",
        "makeTheIntegerZero(a=2, b=3)",
        "def makeTheIntegerZero(a: int, b: int) -> int:\n    return 3",
        "makeTheIntegerZero(a = 100, b = 12)",
        "makeTheIntegerZero(a=7, b=2)",
        "makeTheIntegerZero(a = 1000, b = 5)",
        "makeTheIntegerZero(a = 123, b = 12)",
        "makeTheIntegerZero(a = 20, b = 12)"
    ],
    "sample_100": [
        "maximumJumps(nums = [1, 3, 6, 10, 15], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 0, 99], target = 5)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 0, 9], target = 5)",
        "maximumJumps(nums = [1,3,6,4,1,0,9], target = 5)",
        "maximumJumps(nums = [1,2,3], target = 3)",
        "maximumJumps(nums = [1,2,3,4,5], target = 3)",
        "maximumJumps(nums = [1,1,3,4,5], target = 2)",
        "maximumJumps(nums = [100,-23,-23,404,100,23,24,23,23,3,404], target = 303)",
        "maximumJumps(nums = [2, 4, 1, 1, 3], target = 4)"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 10)",
        "longestAlternatingSubarray(nums = [1,3,4,2,6,8], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24], threshold = 15)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 1, 2, 1, 1], threshold = 3)",
        "longestAlternatingSubarray(nums = [2, 8, 10, 7, 9, 6], threshold = 5)",
        "longestAlternatingSubarray(nums = [3, 5, 3, 4, 5, 3, 6, 2, 10, 6, 7, 12, 15], threshold = 3)"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [5, 6, 7, 8])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [2, 3, 3, 4])",
        "maxNonDecreasingLength(a = [1, 1, 2, 2], b = [2, 1, 2, 1])",
        "maxNonDecreasingLength(a = [1, 2, 2, 1], b = [1, 2, 2, 1])",
        "maxNonDecreasingLength(a = [1, 1, 1, 2, 2], b = [1, 1, 3, 3, 3])",
        "maxNonDecreasingLength(a = [1, 3, 6, 7], b = [4, 6, 8, 9])",
        "maxNonDecreasingLength(a=[1, 3, 5, 4, 5], b=[2, 3, 4, 5, 6])",
        "maxNonDecreasingLength(a=[4, 1, 1, 3, 5, 5], b=[1, 3, 5, 4, 2, 7])",
        "maxNonDecreasingLength(a=[4, 2, 5, 10, 6, 3], b=[10, 2, 1, 10, 20, 1])",
        "maxNonDecreasingLength(a=[1, 2, 3, 4], b=[10, 5, 4, 9])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums=[1,1,1])",
        "numberOfGoodSubarraySplits(nums=[1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,1])",
        "numberOfGoodSubarraySplits(nums=[1, 0, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,0,0,0])"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 10)",
        "longestAlternatingSubarray(nums = [1,2,5,6], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,3,5,2,4,6], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,3,5,7], threshold = 10)",
        "longestAlternatingSubarray(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 1, 4, 2, 2], threshold = 3)",
        "longestAlternatingSubarray(nums = [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], threshold = 3)",
        "longestAlternatingSubarray(nums = [3, 2, 6, 1, 12, 6, 7], threshold = 5)"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [2, 3, 10, 2, 4, 8, 1])",
        "findValueOfPartition(nums=[7, 9, 5, 6, 3, 2])",
        "findValueOfPartition(nums=[1, 5, 2, 4])",
        "findValueOfPartition(nums = [2, 4, 1, 3, 2])",
        "findValueOfPartition(nums = [4, 6, 3, 2, 1])",
        "findValueOfPartition(nums = [7, 1, 2, 4])",
        "findValueOfPartition(nums=[1, 2, 4, 8, 16, 32])",
        "findValueOfPartition(nums = [4, 6, 1, 10])",
        "findValueOfPartition(nums=[3, 1, 5, 8, 9, 4])",
        "findValueOfPartition(nums = [2, 4, 5, 6, 6, 8, 9, 10, 12, 13])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"aa\")",
        "makeSmallestPalindrome(s = 'abba')",
        "makeSmallestPalindrome(s=\"abba\")",
        "makeSmallestPalindrome(s = \"abca\")",
        "makeSmallestPalindrome(s = \"asdfghjk\")",
        "makeSmallestPalindrome(s = \"dddccabbaaa\")"
    ],
    "sample_18": [
        "minLength(s = \"AABCD\")",
        "minLength(s = \"ABCABC\")",
        "minLength(s = \"ACDDD\")",
        "minLength(s=\"ABCD\")",
        "minLength(s = \"BACDC\")",
        "minLength(s = \"ABCABCD\")",
        "minLength(s = \"ABCABCABCABCABCABCABCABCABCABC\")",
        "minLength(s = \"ABCDEFGHIJKLMNOP\")",
        "minLength(s = \"AAAAABC\")",
        "minLength(s = \"aCDAb\")"
    ],
    "sample_99": [
        "maximumJumps(nums = [1,3,6,10,15], target = 3)",
        "maximumJumps(nums = [1,2,3], target = 3)",
        "maximumJumps(nums = [7,4,0,9], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 1)",
        "maximumJumps(nums = [1,1,3,4,5], target = 1)",
        "maximumJumps(nums = [3,2,1,0,4], target = 1)",
        "maximumJumps(nums = [2, 1, 3], target = 1)",
        "maximumJumps(nums = [3,2,4], target = 1)",
        "maximumJumps(nums = [5, 4, 4, 2, 1], target = 2)",
        "maximumJumps(nums = [2, 1, 4, 3, 1, 0], target = 4)"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 2], [3, 4], [5, 1], [1, 3], [5, 3]])",
        "colorTheArray(n = 4, queries = [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4]])",
        "colorTheArray(n = 5, queries = [[1,2],[1,3],[2,4],[1,4],[3,2]])",
        "colorTheArray(n = 3, queries = [[1, 1], [1, 2], [2, 3]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,2],[3,3],[4,1],[1,1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [1, 3], [3, 1], [3, 3], [2, 1], [2, 3]])",
        "colorTheArray(n = 6, queries = [[1,2],[1,3],[1,4],[2,5],[4,6]])",
        "colorTheArray(n = 3, queries = [[1, 2], [3, 1], [1, 3], [2, 1], [1, 1]])",
        "colorTheArray(n = 6, queries = [[2,3],[1,4],[3,4],[1,4],[4,5]])",
        "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    color = [0] * (n + 1)\n    ans = 0\n    out = []\n    for i, x in queries:\n        if color[i]"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 6, additionalTank = 1)",
        "distanceTraveled(mainTank=5, additionalTank=3)",
        "distanceTraveled(mainTank = 5, additionalTank = 4)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 12, additionalTank = 1)",
        "distanceTraveled(mainTank = 11, additionalTank = 0)",
        "distanceTraveled(mainTank=20, additionalTank=1)",
        "distanceTraveled(mainTank = 8, additionalTank = 3)",
        "distanceTraveled(mainTank = 8, additionalTank = 3)",
        "distanceTraveled(mainTank=11, additionalTank=3)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [12, 34, 6, 6, 5])",
        "countBeautifulPairs(nums = [12, 34, 6, 6, 9])",
        "countBeautifulPairs(nums = [1, 2, 3])",
        "countBeautifulPairs(nums = [4, 1, 5, 20, 3])",
        "countBeautifulPairs(nums = [12, 5, 6, 14, 7, 9, 4, 11, 8])",
        "countBeautifulPairs(nums = [20, 23, 27])",
        "countBeautifulPairs(nums = [5, 3, 6, 7, 9])",
        "countBeautifulPairs(nums = [12, 34, 6, 6, 4, 3, 3, 1, 9, 2, 3])",
        "countBeautifulPairs(nums = [52, 13, 1, 2, 5, 11, 13])",
        "countBeautifulPairs(nums = [54121, 2421, 483, 18538, 17382, 45832])"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3, 4, 5], x = 3)",
        "minCost(A = [1, 2, 3, 4], x = 2)",
        "minCost(A = [1, 2, 3, 4], x = 2)",
        "minCost(A = [1, 2, 3, 4, 5], x = 5)",
        "minCost(A = [1, 2, 5, 1, 2, 5, 1, 2, 5], x = 3)",
        "minCost(A = [1, 2, 3, 4, 5, 6, 7], x = 2)",
        "minCost(A=[1, 2, 4, 1, 2, 4], x=3)",
        "minCost(A=[1, 2, 3, 4, 5, 6, 7, 8], x=5)",
        "minCost(A = [4, 7, 8, 1, 3], x = 1)",
        "minCost(A=[2, 5, 1, 8, 23, 45], x=2)"
    ],
    "sample_98": [
        "maximumJumps(nums = [1, 3, 6, 4, 1, 0, 99], target = 5)",
        "maximumJumps(nums = [7,4,0,9], target = 2)",
        "maximumJumps(nums = [7,4,0,9], target = 2)",
        "maximumJumps(nums = [7,4,0,9], target = 2)",
        "maximumJumps(nums = [100,-23,-23,404,100,23,23,23,3,404], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 0, 9], target = 5)",
        "maximumJumps(nums = [2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "maximumJumps(nums=[1,2,3], target=1)",
        "maximumJumps(nums = [2, 5, 6, 1, 1, 1, 2], target = 3)",
        "maximumJumps(nums = [2, 5, 6, 7, 8, 10], target = 1)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums=[1, 1, 1])",
        "numberOfGoodSubarraySplits(nums=[1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 2])",
        "numberOfGoodSubarraySplits(nums=[1,3,1,2,1,3])",
        "numberOfGoodSubarraySplits(nums=[1, 2, 3, 1, 1, 3])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 1, 2, 3])",
        "distinctDifferenceArray(nums = [3, 1, 4, 1, 5])",
        "distinctDifferenceArray(nums = [1,2,2,1,1,3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 1, 1])",
        "distinctDifferenceArray(nums=[1, 2, 3, 1, 2, 3, 1])",
        "distinctDifferenceArray(nums = [2, 2, 3, 2, 3, 3])",
        "distinctDifferenceArray(nums=[2,2,1,1,4])"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [12, 345, 2, 6, 7896])",
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 345, 2, 6, 7896])",
        "countBeautifulPairs(nums = [13, 10, 21])",
        "countBeautifulPairs(nums = [23, 13, 17, 45, 62])",
        "countBeautifulPairs(nums = [12345, 666, 333, 999])",
        "countBeautifulPairs(nums = [10, 20, 19, 50, 16, 18])",
        "countBeautifulPairs(nums = [24, 47, 15, 62, 35])",
        "countBeautifulPairs(nums = [1, 3, 4, 6, 9, 13, 20, 28])"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"abacaba\")",
        "minimizedStringLength(s = \"abca\")",
        "minimizedStringLength(s=\"banana\")",
        "minimizedStringLength(s = \"abba\")",
        "minimizedStringLength(s=\"abracadabra\")",
        "minimizedStringLength(s = \"zpq\")"
    ],
    "sample_41": [
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aabbb\")",
        "minimumCost(s = \"ababaa\")",
        "minimumCost(s = \"aaa\")",
        "minimumCost(s=\"abaa\")",
        "minimumCost(s = \"mom\")",
        "minimumCost(s = \"xxxy\")"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 1, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1])",
        "distinctDifferenceArray(nums = [1, 3, 1, 2, 2])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3, 3])",
        "distinctDifferenceArray(nums = [1,2,1,2,1])",
        "distinctDifferenceArray(nums=[1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [4,3,1,9,7])",
        "distinctDifferenceArray(nums = [4, 3, 2, 7, 5, 2])",
        "distinctDifferenceArray(nums = [1, 3, 5, 2, 1, 3])",
        "distinctDifferenceArray(nums = [1, 2, 1])"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [1, 2, 3])",
        "doesValidArrayExist(derived = [3, 1, 4, 1, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6])",
        "doesValidArrayExist(derived = [1,1,2])",
        "doesValidArrayExist(derived = [3, 2, 3])",
        "doesValidArrayExist(derived = [4, 6])",
        "doesValidArrayExist(derived = [10, 11, 12, 13, 14, 15])",
        "doesValidArrayExist(derived = [1, 2, 4, 5, 5])",
        "doesValidArrayExist(derived = [4, 3, 1, 4])",
        "doesValidArrayExist(derived = [3,2,1,3])"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [1, 2, 3, 4])",
        "doesValidArrayExist(derived = [1,2,3,4])",
        "doesValidArrayExist(derived = [0, 1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [2, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 3, 2])",
        "doesValidArrayExist(derived = [1, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 1, 2, 3, 1])",
        "doesValidArrayExist(derived = [5, 2, 7, 6])"
    ],
    "sample_52": [
        "smallestString(s = \"aa\")",
        "smallestString(s = \"baa\")",
        "smallestString(s = \"baaa\")",
        "smallestString(s = \"abcd\")",
        "smallestString(s = \"bca\")",
        "smallestString(s = \"abaca\")",
        "smallestString(s = \"sdddss\")",
        "smallestString(s = \"baaabbb\")",
        "smallestString(s = \"dkcaad\")",
        "smallestString(s = \"bapgq\")"
    ],
    "sample_40": [
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"aaa\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aaaabbbb\")",
        "minimumCost(s = \"aaa\")",
        "minimumCost(s = \"aaabbbb\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"baaa\")",
        "minimumCost(s = \"aaaaaaaa\")"
    ],
    "sample_38": [
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"abccbd\")",
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"aaab\")",
        "minimumCost(s = \"a\")",
        "minimumCost(s = \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",
        "minimumCost(s = \"zzzzz\")",
        "minimumCost(s = \"aabbbb\")",
        "minimumCost(s = \"bababaa\")",
        "minimumCost(s=\"abbaba\")"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3])",
        "distinctDifferenceArray(nums=[1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [2, 4, 1, 3])",
        "distinctDifferenceArray(nums = [4, 1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 5, 7])",
        "distinctDifferenceArray(nums = [3, 4, 1, 5, 3])"
    ],
    "sample_53": [
        "smallestString(s = \"banana\")",
        "smallestString(s = \"baaab\")",
        "smallestString(s = \"baac\")",
        "smallestString(s = \"baab\")",
        "smallestString(s = \"baaa\")",
        "smallestString(s = \"baabab\")",
        "smallestString(s=\"abcd\")",
        "smallestString(s=\"abaac\")",
        "smallestString(s = \"cabaabac\")",
        "smallestString(s = \"zac\")"
    ],
    "sample_109": [
        "checkArray(nums = [2,3,1,5,4], k = 2)",
        "checkArray(nums = [1,2,3,4,5,6], k = 2)",
        "checkArray(nums = [3,2,2,4,3], k = 3)",
        "checkArray(nums = [1,2,3], k = 3)",
        "checkArray(nums=[1,1,2,3,5], k=2)",
        "checkArray(nums = [2, 3, 1, 0, 4, 0], k = 3)",
        "checkArray(nums = [2, 2, 3, 1, 5], k = 3)",
        "checkArray(nums = [3, 2, 6, 1, 4], k = 5)",
        "checkArray(nums = [0, 1, 2, 3, 4, 5, 1], k = 3)",
        "checkArray(nums = [1, 2, 3, 10, 0, 10], k = 1)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1,2,3,4,5,6], k = 1)",
        "maximumBeauty(nums = [5, 1, 3, 4, 2], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 1)",
        "maximumBeauty(nums = [1,2,3,1], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,10], k = 3)",
        "maximumBeauty(nums = [1, 5, 3, 2], k = 1)",
        "maximumBeauty(nums = [1, 3, 6, 7, 9], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 10, 11, 12, 13], k = 3)",
        "maximumBeauty(nums=[1,3,2,3,1,5,3,3], k=3)",
        "maximumBeauty(nums = [4, 10, 4, 10, 6, 1, 4, 1, 4, 10, 6, 4, 4], k = 2)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 3, 2, 4])",
        "distinctDifferenceArray(a = [1, 3, 5, 7, 9])",
        "distinctDifferenceArray(a=[1, 2, 1, 3, 4])",
        "distinctDifferenceArray(a=[1, 1, 2, 2, 3])",
        "distinctDifferenceArray(a = [1, 3, 5, 2, 4, 6, 8])",
        "distinctDifferenceArray(a = [1, 2, 2, 2, 3, 3])",
        "distinctDifferenceArray(a = [1, 3, 5, 6, 7, 2])",
        "distinctDifferenceArray(a = [3, 4, 5, 2, 10, 2, 10, 4, 3])",
        "distinctDifferenceArray(a = [1,2,1,2,3,1,2,3,1])",
        "distinctDifferenceArray(a = [1, 2, 5, 4, 7, 11, 6, 8, 10, 12])"
    ],
    "sample_34": [
        "removeTrailingZeros(a = \"512301\")",
        "removeTrailingZeros(a = \"512301\")",
        "removeTrailingZeros(a = \"512301\")",
        "removeTrailingZeros(a = '512301')",
        "removeTrailingZeros(a = '512301')",
        "removeTrailingZeros(a = \"12301\")",
        "removeTrailingZeros(a='512301')",
        "removeTrailingZeros(a='00512301')",
        "removeTrailingZeros(a = \"5000012301\")",
        "removeTrailingZeros(a = \"5000000001234567890\")"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = 'nenev')",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = \"nene\")",
        "makeSmallestPalindrome(s = \"bann\")",
        "makeSmallestPalindrome(s='nevev')",
        "makeSmallestPalindrome(s = \"ppx\")",
        "makeSmallestPalindrome(s = \"sad\")",
        "makeSmallestPalindrome(s=\"edabbade\")",
        "makeSmallestPalindrome(s = \"xecx\")",
        "makeSmallestPalindrome(s = \"nagal\")"
    ],
    "sample_55": [
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"abacaba\")",
        "smallestString(s = \"cba\")",
        "smallestString(s=\"banana\")",
        "smallestString(s = \"abab\")",
        "smallestString(s = \"abacaba\")",
        "smallestString(s = 'aaaz')",
        "smallestString(s = \"zzzzzzzzzzzzzzzzzzzz\")",
        "smallestString(s = \"abacadae\")",
        "smallestString(s = \"ydazhdxfmf\")"
    ],
    "sample_35": [
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num=\"512301\")",
        "removeTrailingZeros(num = \"512300\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"00000000512301\")",
        "removeTrailingZeros(num = \"5123000\")",
        "removeTrailingZeros(num = \"12034500000000000\")"
    ],
    "sample_23": [
        "minLength(s = \"ABCABCDAB\")",
        "minLength(s=\"ABCABCD\")",
        "minLength(s = \"ABCABCD\")",
        "minLength(s=\"ABCAB\")",
        "minLength(s=\"ABCDE\")",
        "minLength(s=\"ABCBBA\")",
        "minLength(s=\"ABCDABCDABCDABC\")",
        "minLength(s = \"ACDBCAD\")",
        "minLength(s=\"ABCABCABCCBCDCD\")",
        "minLength(s = \"ABBCDEFFABCDEFF\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num=\"512301\")",
        "removeTrailingZeros(num = \"12301\")",
        "removeTrailingZeros(num = \"123001\")",
        "removeTrailingZeros(num = \"00000512301\")",
        "removeTrailingZeros(num = \"5123001\")",
        "removeTrailingZeros(num = \"5000123\")",
        "removeTrailingZeros(num = \"012300\")",
        "removeTrailingZeros(num = \"1001000\")"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 6, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 10)",
        "makeTheIntegerZero(num1 = 10, num2 = 100)",
        "makeTheIntegerZero(num1 = 11, num2 = 5)",
        "makeTheIntegerZero(num1 = 5, num2 = 12)",
        "makeTheIntegerZero(num1 = 16, num2 = 3)",
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 13)"
    ],
    "sample_57": [
        "distanceTraveled(a = 10, b = 1)",
        "distanceTraveled(a = 10, b = 10)",
        "distanceTraveled(a = 5, b = 5)",
        "distanceTraveled(a = 3, b = 5)",
        "distanceTraveled(a = 2, b = 0)",
        "distanceTraveled(a = 11, b = 1)",
        "distanceTraveled(a = 5, b = 3)",
        "distanceTraveled(a = 5, b = 5)",
        "distanceTraveled(a = 4, b = 6)",
        "distanceTraveled(a = 20, b = 20)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [1,2,3,4], t = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5], t = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], t = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 4, 3], t = 2)",
        "longestAlternatingSubarray(nums=[3, 2, 5, 4], t=5)",
        "longestAlternatingSubarray(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], t = 2)",
        "longestAlternatingSubarray(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], t = 10)",
        "longestAlternatingSubarray(nums=[4,1,5,2,6,2], t=3)",
        "longestAlternatingSubarray(nums = [1,5,9,8,2,1,1], t = 3)",
        "longestAlternatingSubarray(nums=[2,3,1,2,2,2,1,4,4], t=3)"
    ],
    "sample_102": [
        "maximumJumps(nums = [1, 3, 6, 10, 15], target = 3)",
        "maximumJumps(nums = [1,3,6,4,1,0,9], target = 5)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 0, 9, 1, 4, 3, 0], target = 5)",
        "maximumJumps(nums = [4, 2, 1, 2, 6, 1], target = 1)",
        "maximumJumps(nums = [1, 1, 3, 2], target = 2)",
        "maximumJumps(nums = [1,2,3,4], target = 1)",
        "maximumJumps(nums = [1,2,3,3,4,5,6,7,8,9,10], target = 4)",
        "maximumJumps(nums = [2,4,3,1,2,3,2], target = 3)",
        "maximumJumps(nums = [5, 3, 2, 6, 1, 7, 9], target = 4)",
        "maximumJumps(nums = [2, 5, 9, 3, 4, 6, 11, 2], target = 3)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512300\")",
        "removeTrailingZeros(num = \"512300\")",
        "removeTrailingZeros(num = \"512300\")",
        "removeTrailingZeros(num = \"10001\")",
        "removeTrailingZeros(num = \"500000000\")",
        "removeTrailingZeros(num = \"12000031\")"
    ],
    "sample_101": [
        "maximumJumps(nums = [1, 3, 6, 4, 1, 0, 99], target = 5)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 0, 99], target = 5)",
        "maximumJumps(nums = [1, 3, 6, 10, 15], target = 3)",
        "maximumJumps(nums = [1, 2], target = 1)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 3)",
        "maximumJumps(nums = [1,2], target = 2)",
        "maximumJumps(nums = [5, 3, 10, 12, 8], target = 3)",
        "maximumJumps(nums=[7,6,5,4,3,2,1], target=1)",
        "maximumJumps(nums = [3,3,3,4,5,6,7,8,9,10], target = 4)",
        "maximumJumps(nums = [100,-23,-23,404,100,23,240,499,503,605,-600,-600,0,-3,0,-3,99], target = 30)"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0, 0, 0])",
        "doesValidArrayExist(derived = [0,1,0,1,1,1,0])",
        "doesValidArrayExist(derived=[1, 1, 1, 0, 1, 1, 0, 1, 1, 1])",
        "def doesValidArrayExist(derived : List[int]) -> bool:\n    n = len(derived)\n    ans = [0]*n\n    for x in [0, 1]:\n        ans = [0]*n\n        ans[-1] = x\n        for i in range(n-2, -1, -1):\n            ans[i] = ans[i+1]^derived[i]\n        if ans[n-1]^ans[0]"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 2, 3, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 3, 1, 2, 0, 1, 1, 1])"
    ],
    "sample_19": [
        "minLength(s = \"ABCABC\")",
        "minLength(s = \"ABABAB\")",
        "minLength(s = \"ABC\")",
        "minLength(s = \"ABCABCABC\")",
        "minLength(s = \"ACAB\")",
        "minLength(s = \"ACDBCBABC\")",
        "minLength(s = \"AABCAAADA\")",
        "minLength(s = \"ABCDEABCD\")",
        "minLength(s = \"ADABCBCBAD\")",
        "minLength(s = \"AAAABBCDDDE\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = \"banana\")",
        "makeSmallestPalindrome(s = \"banana\")",
        "makeSmallestPalindrome(s = \"racecar\")",
        "makeSmallestPalindrome(s = \"banana\")",
        "makeSmallestPalindrome(s=\"red\")",
        "makeSmallestPalindrome(s=\"aaab\")",
        "makeSmallestPalindrome(s = \"tta\")",
        "makeSmallestPalindrome(s = \"python\")",
        "makeSmallestPalindrome(s = 'cooldrink')"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums=[1,3,5,2,4,6])",
        "semiOrderedPermutation(nums = [4, 1, 3, 2])",
        "semiOrderedPermutation(nums=[1, 2, 5, 3, 4])",
        "semiOrderedPermutation(nums=[1,3,5])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3, 6, 5, 7])",
        "semiOrderedPermutation(nums=[5, 3, 4, 1, 2])",
        "semiOrderedPermutation(nums = [2, 3, 4, 5, 6, 1])",
        "semiOrderedPermutation(nums=[4, 2, 5, 3])",
        "semiOrderedPermutation(nums=[2, 6, 1, 5, 3])"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1])",
        "numberOfGoodSubarraySplits(nums=[1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums=[1,0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,1,0,0,1,0,1,1,1,1,0,0,1,0,0,1,0,1,1,1,0,0,1,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,0,1,1,0,1,0,0,1,1,1,1,1,1,1,0,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,1,0,0,1,0,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,0,0,1,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,0,1,0,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,1,0,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,0,1,"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1,3,5,2,7,5], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 2, 7, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 2, 1], k = 2)",
        "maximumBeauty(nums = [1, 5, 3, 2], k = 2)",
        "maximumBeauty(nums = [4, 5, 2, 10, 8, 6], k = 2)",
        "maximumBeauty(nums = [1,4,3,2,5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 1, 2], k = 2)",
        "maximumBeauty(nums = [3, 2, 13, 5, 7, 9], k = 5)"
    ],
    "sample_117": [
        "minimumIndex(nums = [1, 2, 3, 3, 3])",
        "minimumIndex(nums = [2, 2, 1, 1, 1, 2, 2])",
        "minimumIndex(nums = [1, 2, 2, 1, 1])",
        "minimumIndex(nums = [2, 2, 2, 2])",
        "minimumIndex(nums = [1,2,3,2,1])",
        "minimumIndex(nums = [0,0,0,0,1])",
        "minimumIndex(nums = [1,1,1,1,1,1,1,1,1,1,1,1])",
        "minimumIndex(nums = [1, 2, 3, 3, 3, 3, 2, 2])",
        "minimumIndex(nums=[-1, 0, 0, 1, 1, 1])",
        "minimumIndex(nums = [1, 2, 3, 4, 1, 2, 3, 4, 2])"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 11, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 12, num2 = 2)",
        "makeTheIntegerZero(num1 = 9, num2 = 5)",
        "makeTheIntegerZero(num1 = 4, num2 = 5)",
        "makeTheIntegerZero(num1 = 26, num2 = 12)"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [12, 345, 2, 6, 7896])",
        "countBeautifulPairs(nums = [12, 345, 2, 6, 7896])",
        "countBeautifulPairs(nums = [34,23,12,65])",
        "countBeautifulPairs(nums = [12, 5, 2])",
        "countBeautifulPairs(nums = [12, 6, 15, 3, 20])",
        "countBeautifulPairs(nums = [10,16,9])",
        "countBeautifulPairs(nums = [12, 1, 15, 31])",
        "countBeautifulPairs(nums = [31,25,72,79,84,79])",
        "countBeautifulPairs(nums = [52, 16, 4, 12, 10, 64, 21, 8, 33])",
        "countBeautifulPairs(nums = [23, 14, 46, 62, 72, 36])"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 1, num2 = 1)",
        "makeTheIntegerZero(num1 = 3, num2 = 1)",
        "makeTheIntegerZero(num1 = 5, num2 = 5)",
        "makeTheIntegerZero(num1 = 8, num2 = 5)",
        "makeTheIntegerZero(num1 = 15, num2 = 4)",
        "makeTheIntegerZero(num1 = 100, num2 = 3)",
        "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    for to_ret in range(1, 100) :\n        num1 -= num2\n        if num1 < to_ret :\n            return -1\n        s1 = len([c for c in bin(num1)[2:] if c",
        "makeTheIntegerZero(num1 = 63, num2 = 14)",
        "num1 < num2\n    for i in range(1, 100) :\n        num1 -= num2\n        if num1 < i :\n            return -1\n        s1 = len([c for c in bin(num1)[2:] if c"
    ],
    "sample_20": [
        "minLength(s = \"AABCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"BACABA\")",
        "minLength(s = \"AABBCCC\")",
        "minLength(s = \"ABBCABB\")",
        "minLength(s = \"AAAAABBBB\")",
        "minLength(s = \"AACDDBBACD\")",
        "minLength(s = \"CDACDCABCDA\")",
        "def minLength(s: str) -> int:\n    n = len(s)\n    i = 0\n    while i < n - 1:\n        if s[i:i + 2]",
        "minLength(s = \"ACBBBCDDCEAABC\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1,2,3,4], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 2, 7, 5], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7], k = 2)",
        "maximumBeauty(nums = [1,2,2,2,2], k = 0)",
        "maximumBeauty(nums = [4, 1, 5, 2, 3], k = 2)",
        "maximumBeauty(nums = [1, 5, 3, 2], k = 2)",
        "maximumBeauty(nums = [4,1,5,2], k = 2)",
        "maximumBeauty(nums = [2,4,1,3,5,1], k = 3)",
        "maximumBeauty(nums = [1,1,1,3,4,3,1,2], k = 3)"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [12,345,2,6,7896])",
        "countBeautifulPairs(nums=[42, 8, 15, 3, 21])",
        "countBeautifulPairs(nums = [4, 1, 2])",
        "countBeautifulPairs(nums=[12,34,67,90])",
        "countBeautifulPairs(nums=[42,55,30])",
        "countBeautifulPairs(nums=[2, 7, 4, 9, 6, 4, 1])",
        "countBeautifulPairs(nums=[23,19,25])",
        "countBeautifulPairs(nums = [223, 30, 11, 44])",
        "countBeautifulPairs(nums = [123,34,456,78,234,366])",
        "countBeautifulPairs(nums=[52, 22, 36, 3, 46, 54, 31, 24, 38, 49, 46, 39, 57, 21, 37, 27, 59, 33, 40, 53, 30])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 2, num2 = 3)",
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 6)",
        "makeTheIntegerZero(num1 = 5, num2 = 6)",
        "makeTheIntegerZero(num1 = 4, num2 = 3)",
        "makeTheIntegerZero(num1 = 2, num2 = 1)",
        "makeTheIntegerZero(num1 = 2, num2 = 1)",
        "makeTheIntegerZero(num1 = 7, num2 = 19)",
        "makeTheIntegerZero(num1=8, num2=3)",
        "makeTheIntegerZero(num1 = 34, num2 = 54)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = \"banana\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s=\"racecar\")",
        "makeSmallestPalindrome(s = \"hahaha\")",
        "makeSmallestPalindrome(s = \"skin\")"
    ],
    "sample_37": [
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"aabaa\")",
        "def minimumCost(s: str) -> int:\n    l = solve(s)\n    r = solve(s[::-1])\n    n = len(s)\n    ans = min(l[i] + r[n - 1 - i] for i in range(n))\n    return ans",
        "def minimumCost(s: str) -> int:\n    l = solve(s)\n    r = solve(s[::-1])\n    n = len(s)\n    ans = min(l[i] + r[n - 1 - i] for i in range(n))\n    return ans",
        "minimumCost(s = \"aaabbb\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aaaa\")",
        "minimumCost(s = \"111\")",
        "minimumCost(s = \"acbc\")",
        "minimumCost(s = \"npcna\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,2,1,1])",
        "numberOfGoodSubarraySplits(nums=[1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums=[1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 2, 3])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,1,1,1,1,1,0,1,0,1,0,1,0,0,1,0,0])"
    ],
    "sample_105": [
        "checkArray(nums = [2, 1, 5, 1, 3, 2], k = 3)",
        "checkArray(nums = [1, -1, 5, -2, 3], k = 3)",
        "checkArray(nums = [1, 1, 1, 1, 1, 1, 1, 1], k = 3)",
        "checkArray(nums = [1, 3, 2], k = 2)",
        "checkArray(nums = [2, 1, 3, 4, 2], k = 4)",
        "checkArray(nums = [4, 1, 1, 1, 2, 3], k = 2)",
        "checkArray(nums = [1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1], k = 3)",
        "checkArray(nums = [4, 4, 5, 2, 1], k = 4)",
        "checkArray(nums = [1, 2, 3, 1, 1, 4, 5, 1, 1, 3, 3], k = 4)",
        "checkArray(nums=[2,1,3,5,4,5,7,6,8,10,3,2,4], k=4)"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [1, 3, 5, 2, 4, 6])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [4, 3, 1, 2])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7])",
        "semiOrderedPermutation(nums = [4, 1, 3, 5])",
        "semiOrderedPermutation(nums = [2,3,4,1])",
        "semiOrderedPermutation(nums=[3,1,2])",
        "semiOrderedPermutation(nums = [2, 3, 5, 4])",
        "semiOrderedPermutation(nums = [2,3,5,4])"
    ],
    "sample_108": [
        "checkArray(nums = [0, 1, 0, 1, 1], k = 1)",
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 4)",
        "checkArray(nums = [0, 1, 0, 0, 1, 0], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 10)",
        "checkArray(nums = [1, 3, 5, 7, 9], k = 3)",
        "checkArray(nums = [4, 5, 1, 2, 0], k = 3)",
        "checkArray(nums = [1, 2, 2, 0, 0, 0, 1, 0], k = 3)",
        "checkArray(nums = [1, 1, 2, 3, 5, 1, 1, 2, 3], k = 3)",
        "checkArray(nums = [2, 1, 0, 2, 1, 0, 0, 2], k = 3)"
    ],
    "sample_39": [
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"aaab\")",
        "minimumCost(s = \"aaab\")",
        "minimumCost(s = \"baaa\")",
        "minimumCost(s = \"aa\")",
        "minimumCost(s = \"aaabb\")",
        "minimumCost(s = \"baaaaa\")",
        "minimumCost(s = \"az\")"
    ],
    "sample_65": [
        "findValueOfPartition(a = [1, 2, 3])",
        "findValueOfPartition(a = [1, 2, 3, 4])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 5, 10, 5])",
        "findValueOfPartition(a = [1, 2, 4, 7])",
        "findValueOfPartition(a = [5, 1, 3, 2])",
        "findValueOfPartition(a = [1, 4, 10, 2])",
        "findValueOfPartition(a = [1, 2, 1, 0, 0])",
        "findValueOfPartition(a = [3, 5, 4, 1, 9, 8, 11, 4, 8])"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 10, additionalTank = 10)",
        "distanceTraveled(mainTank = 20, additionalTank = 10)",
        "distanceTraveled(mainTank = 50, additionalTank = 10)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 3, additionalTank = 10)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 23, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 10)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20])",
        "doesValidArrayExist(derived = [2, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 1, 0, 0, 0, 1])",
        "doesValidArrayExist(derived = [4, 2, 4, 5])",
        "doesValidArrayExist(derived = [4, 2, 6, 3, 1])",
        "doesValidArrayExist(derived = [4, 5, 7, 5, 4, 4, 5])",
        "doesValidArrayExist(derived = [4, 2, 1, 2, 3, 2, 4, 1])",
        "doesValidArrayExist(derived = [5, 10, 6, 10, 4])",
        "doesValidArrayExist(derived = [1, 2, 3, 5, 7, 1, 3, 7, 10, 15])"
    ],
    "sample_106": [
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [0, 1, 0, 1, 0, 1], k = 3)",
        "checkArray(nums = [2, 3, 1, 0, 2, 1], k = 3)",
        "checkArray(nums = [1,2,3,5,6], k = 2)",
        "checkArray(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], k = 3)",
        "checkArray(nums = [0, 2, 3, 1], k = 1)",
        "checkArray(nums = [4,3,5,4,3,3,6,1], k = 3)",
        "checkArray(nums = [5, 2, 6], k = 3)",
        "checkArray(nums = [2, 4, 3, 0, 5, 1], k = 3)",
        "checkArray(nums = [1, 2, 2, 2, 3, 4, 5, 6, 6], k = 1)"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6], threshold = 1)",
        "longestAlternatingSubarray(nums=[1,2,3,4,5], threshold=3)",
        "longestAlternatingSubarray(nums = [2,4,6,8,10], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,2,1,2], threshold = 3)",
        "longestAlternatingSubarray(nums = [4, 3, 1, 2, 5, 6, 7], threshold = 2)",
        "longestAlternatingSubarray(nums=[-1, 0, 2], threshold=2)",
        "longestAlternatingSubarray(nums = [3,6,10,7,9], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 5, 3, 5, 1, 2, 2, 1], threshold = 3)",
        "longestAlternatingSubarray(nums = [2,2,1,6,3,1,2,1,1,1], threshold = 3)"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(nums = [1, 1, 1])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "countBeautifulPairs(nums = [10, 10])",
        "countBeautifulPairs(nums = [5, 10, 20])",
        "countBeautifulPairs(nums = [12, 34, 6, 7, 8, 9, 10, 11])",
        "countBeautifulPairs(nums = [3, 4, 2, 7, 8, 9])",
        "countBeautifulPairs(nums = [3, 4, 6, 7, 11, 9])",
        "countBeautifulPairs(nums = [123, 34, 234, 45, 34])",
        "countBeautifulPairs(nums = [12, 34, 56, 78, 87, 14, 56, 99, 55])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5], t = 2)",
        "longestAlternatingSubarray(nums=[1,3,2,1,4], t=4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], t = 4)",
        "longestAlternatingSubarray(nums=[1, 2, 3, 4, 5], t=5)",
        "longestAlternatingSubarray(nums = [1, 3, 2, 1, 4], t = 4)",
        "longestAlternatingSubarray(nums = [1, 3, 4, 5, 8], t = 10)",
        "longestAlternatingSubarray(nums=[1, 2, 5, 6, 8], t=1)",
        "longestAlternatingSubarray(nums = [5,4,2,10], t = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 1, 3, 1, 2, 3], t = 10)",
        "longestAlternatingSubarray(nums=[64,64,64,9,9,9,9,64,64,64,64,64,64,64,9,9,9,9,9,64,64,9,9,9,9,64,64,9,9,64,9,9,9,9,64,64,9,64,64,64,64,9,64,64,64,64,9,9,9,9,9,64,64,9,9,9,64,64,9,64,9,9,64,9,64,64,9,9,9,9,9,9,9,64,64,64,9,64,64,9,64,64,64,9,9,9,64,9,64,64,64,9,9,9,9,9,9,9,64,64,9,9,9,64,9,64,9,64,9,9,64,64,64,64,9,64,64,64,64,9,9,9,9,64,9,9,64,9,64,64,9,64,64,9,9,64,9,9,64,64,9,9,9,9,9,64,64,64,9,64,9,9,9,9,64,64,64,64,9,9,64,9,64,64,64,64,64,9,9,9,64,64,64,64,9,64,64,9,9,64,9,64,9,64,9,64,64,9,64,64,9,64,64,64,64,9,64,64,9,64,64,9,64,64,9,64,64,64,9,64,64,64,64,9,64,64"
    ],
    "sample_36": [
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"baaa\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abbaaa\")",
        "minimumCost(s = \"aaabaa\")",
        "minimumCost(s = \"bbbaaa\")",
        "minimumCost(s = \"abaaa\")",
        "minimumCost(s = \"aaaaa\")",
        "minimumCost(s = \"abccbaacz\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCDAB\")",
        "minLength(s
        "minLength(s=\"ABABABAB\")",
        "minLength(s = \"ACAAAA\")",
        "minLength(s = \"BACABAABAB\")",
        "minLength(s = \"aB\")",
        "minLength(s = \"ACDBACC\")",
        "minLength(s = \"BCABCABCDABA\")",
        "minLength(s = \"ACBDBCB\")",
        "minLength(s = \"BCBCBCDD\")"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0,0,0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,0,0,1,1,1])"
    ],
    "sample_9": [
        "colorTheArray(n = 3, queries = [[0, 0, 0], [1, 1, 0], [2, 2, 1]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [3, 3], [1, 2]])",
        "colorTheArray(n = 6, queries = [[1, 4], [1, 6], [3, 4]])",
        "colorTheArray(n = 6, queries = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6]])",
        "colorTheArray(n = 3, queries = [[1, 1000000000], [1, 1000000000], [2, 1000000000], [2, 1000000000]])",
        "colorTheArray(n = 10, queries = [[0, 1], [1, 1], [2, 2], [3, 3]])",
        "colorTheArray(n = 5, queries = [[0, 2], [2, 1], [3, 1], [4, 1], [3, 3]])",
        "colorTheArray(n = 6, queries = [[1, 1], [2, 1], [3, 3], [3, 3], [1, 1]])",
        "colorTheArray(n = 10, queries = [[0, 2], [1, 4], [0, 5], [1, 5], [3, 6]])",
        "colorTheArray(n = 10, queries = [[0, 3], [1, 7], [0, 3], [0, 4], [3, 2], [1, 10], [0, 7], [0, 9], [4, 5], [7, 10]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [2, 2, 1], nums2 = [1, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 1, 1], nums2 = [3, 4, 3, 2])",
        "maxNonDecreasingLength(nums1=[1, 2, 3], nums2=[4, 5, 6])",
        "maxNonDecreasingLength(nums1 = [3, 4, 1, 6, 2], nums2 = [3, 4, 1, 7, 2])",
        "maxNonDecreasingLength(nums1 = [1, 4, 3], nums2 = [2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15], nums2 = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15])",
        "maxNonDecreasingLength(nums1 = [0, 1, 0, 0], nums2 = [1, 0, 0, 1])",
        "maxNonDecreasingLength(nums1 = [0, 1, 2, 3, 4, 5], nums2 = [1, 3, 4, 5, 6, 7])",
        "maxNonDecreasingLength(nums1 = [5, 3, 4, 8, 6, 7], nums2 = [6, 3, 4, 9, 5, 2])",
        "maxNonDecreasingLength(nums1 = [2, 1, 1, 3, 2, 1], nums2 = [1, 2, 2, 1, 1, 2])"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "maximumBeauty(nums = [4, 1, 5, 2], k = 2)",
        "maximumBeauty(nums = [1,2,3,2], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7,8,9], k = 5)",
        "maximumBeauty(nums = [1, 5, 3, 4, 2], k = 3)",
        "maximumBeauty(nums = [1,2,4,1,2,3,1], k = 3)",
        "maximumBeauty(nums = [4, 1, 2, 3, 1], k = 2)",
        "maximumBeauty(nums = [0, 0, 1], k = 2)",
        "maximumBeauty(nums = [1,2,3,1,4,5], k = 10)",
        "maximumBeauty(nums=[4, 3, 5, 1, 6, 2, 7], k=3)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1,5,2,10,4])",
        "findValueOfPartition(nums = [7, 9, 5, 6, 3, 2])",
        "findValueOfPartition(nums = [1,2,5,10,20])",
        "findValueOfPartition(nums = [3, 7, 4, 6, 5])",
        "findValueOfPartition(nums = [7, 1, 3, 9, 11])",
        "findValueOfPartition(nums = [1, 2, 4, 100, 100])",
        "findValueOfPartition(nums=[3, 6, 2, 5])",
        "findValueOfPartition(nums=[2, 3, 3, 5, 5, 7])",
        "findValueOfPartition(nums=[-3, 1, 2, 6, 4])",
        "findValueOfPartition(nums = [-10, -10000, 3, 999999, 1])"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [3, 1, 2, 4])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 18, 2])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5, 6, 7])",
        "findValueOfPartition(nums = [7,7,7,7])",
        "findValueOfPartition(nums = [1, 3, 1])",
        "findValueOfPartition(nums = [1,5,3,4,2,6])",
        "findValueOfPartition(nums = [1,5,3,4,6,8])",
        "findValueOfPartition(nums = [-3, 0, 5, -5, 3])",
        "findValueOfPartition(nums = [2, 10, 11, 9, 4, 5])",
        "findValueOfPartition(nums = [-16,8,12,6,10,-10,14,-5,15])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [3, 1, 4, 2])",
        "semiOrderedPermutation(nums = [1, 3, 5, 2, 4, 6])",
        "semiOrderedPermutation(nums = [1, 3, 5, 2, 4, 6])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4, 5])",
        "semiOrderedPermutation(nums = [4, 2, 1, 5, 3])",
        "semiOrderedPermutation(nums = [3, 2, 1, 5, 4])",
        "semiOrderedPermutation(nums=[4, 2, 5, 1, 3])"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [1, 3, 5, 2, 4, 6])",
        "semiOrderedPermutation(nums = [1, 2, 5, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [3,1,4,2])",
        "semiOrderedPermutation(nums = [1,3,5])",
        "semiOrderedPermutation(nums = [5, 3, 4, 1, 2])",
        "semiOrderedPermutation(nums = [5, 2, 3, 1, 4])",
        "semiOrderedPermutation(nums=[1, 4, 3, 2])",
        "semiOrderedPermutation(nums = [2, 6, 3, 4, 5, 1])",
        "semiOrderedPermutation(nums = [2, 4, 5, 3])"
    ],
    "sample_167": [
        "isAcronym(words = [\"dog\", \"cat\", \"mouse\"], s = \"dogcatmouse\")",
        "isAcronym(words = [\"an\", \"apple\", \"a\", \"day\"], s = \"aday\")",
        "isAcronym(words=[\"you\", \"are\", \"the\", \"best\"], s=\"you\")",
        "isAcronym(words=[\"beautiful\", \"happy\"], s=\"beh\")",
        "isAcronym(words=[\"fun\", \"for\", \"me\"], s=\"funfor\")",
        "isAcronym(words = [\"Apple\", \"Mango\", \"Banana\"], s = \"mnb\")",
        "isAcronym(words = [\"Vlad\", \"is\", \"awesome\"], s = \"VA\")",
        "isAcronym(words = [\"cat\", \"cats\", \"mouse\"], s = \"cmeat\")",
        "isAcronym(words = [\"bear\", \"water\", \"burger\"], s = \"bwr\")",
        "isAcronym(words = [\"anaconda\", \"candy\", \"candy\", \"chocolate\"], s = \"candy\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums=[1,1,1,1], m=2, k=1)",
        "countInterestingSubarrays(nums=[1, 0, 1, 0, 1], m=2, k=1)",
        "countInterestingSubarrays(nums=[1,2,3,4,5,6], m=1, k=4)",
        "countInterestingSubarrays(nums = [0, 1, 2, 3, 4, 5, 6], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,1,4,3,2], m = 4, k = 2)",
        "countInterestingSubarrays(nums=[2,3,4,5,6], m=5, k=2)",
        "def countInterestingSubarrays(nums: List[int], m: int, k: int) -> int:\n    cnt=0\n    ans=0\n    last=-1\n    c=Counter([0])\n    for x in nums:\n        if x%m",
        "countInterestingSubarrays(nums=[2,4,3,3], m=4, k=3)",
        "countInterestingSubarrays(nums=[1,0,1,0,1,1,1], m=3, k=2)"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1, 5], [10, 20], [1, 6], [16, 19], [5, 11]])",
        "numberOfPoints(nums = [[1, 5], [6, 10]])",
        "numberOfPoints(nums = [[2, 4], [6, 8]])",
        "numberOfPoints(nums = [[1, 4], [0, 1]])",
        "numberOfPoints(nums = [[1, 2], [2, 5], [2, 4]])",
        "numberOfPoints(nums = [[1,4], [0,2], [-1,3]])",
        "numberOfPoints(nums = [[0, 50], [25, 50], [51, 60]])",
        "numberOfPoints(nums = [[-40,-40],[-50,-50]])",
        "numberOfPoints(nums = [[-7, 4], [-3, -1], [2, 5], [-11, 3]])",
        "numberOfPoints(nums = [[5, 15], [18, 20], [2, 8], [14, 21], [3, 16], [17, 18], [4, 10], [13, 15]])"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = ['easy', 'problem'], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easy problem\", \"hard problem\"], separator = \" \")",
        "splitWordsBySeparator(words=[\"easy-problem\", \"hard-problem\"], separator=\"-\")",
        "splitWordsBySeparator(words=[\"easy-problem\", \"medium-hard\"], separator=\"-\")",
        "splitWordsBySeparator(words=[\"easy problem\", \"easy project\"], separator=\" \")",
        "splitWordsBySeparator(words = [\"easyproblem\", \"easy\"], separator = \"p\")",
        "splitWordsBySeparator(words = ['easy', 'problem', 'z'], separator = \"a\")"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[0, 2], [4, 6], [8, 10], [1, 9], [1, 5], [5, 9]])",
        "numberOfPoints(nums = [[1, 3], [5, 7], [2, 4], [6, 8]])",
        "numberOfPoints(nums = [[0, 2], [4, 6], [7, 9], [1, 10]])",
        "numberOfPoints(nums = [[1, 3], [10, 13], [12, 15]])",
        "numberOfPoints(nums = [[0, 5], [4, 8]])",
        "numberOfPoints(nums = [[1, 3], [5, 6], [8, 9], [10, 11]])",
        "numberOfPoints(nums = [[1, 3], [5, 7], [3, 5], [1, 7]])",
        "numberOfPoints(nums = [[2, 5], [1, 7], [4, 8]])",
        "numberOfPoints(nums = [[3, 4], [-1, 4], [-2, 3]])",
        "numberOfPoints(nums = [[-2, -3], [0, 1], [2, 4], [5, 7]])"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [4, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 4, 3, 5, 2, 2, 3, 1, 4, 3])",
        "countCompleteSubarrays(nums = [1, 3, 4, 5])",
        "countCompleteSubarrays(nums = [4,5,6,7,8,9,10,11])",
        "countCompleteSubarrays(nums = [1,3,2,4,5,6])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \",\")"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 2, 3, 4])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 10])",
        "maxIncreasingGroups(u = [2, 3, 7, 2])",
        "maxIncreasingGroups(u = [3, 2, 3, 1, 1, 2])",
        "maxIncreasingGroups(u = [3, 4, 5, 8, 9])",
        "maxIncreasingGroups(u = [1, 2, 4, 5, 1, 3, 4, 2])"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1,2,3,4], x = 1)",
        "minAbsoluteDifference(nums = [1, 2, 3, 4], x = 2)",
        "minAbsoluteDifference(nums = [1,4,2,3], x = 4)",
        "minAbsoluteDifference(nums = [3,9,7,3], x = 3)",
        "minAbsoluteDifference(nums = [0, 10], x = 2)",
        "minAbsoluteDifference(nums = [4,3,2,5,6], x = 2)",
        "minAbsoluteDifference(nums = [1, 4, 3], x = 2)",
        "minAbsoluteDifference(nums=[-4,-24,-1,1,2,3,4], x=1)",
        "minAbsoluteDifference(nums = [1,3,5,7,9,12,14,16,19,21], x = 4)",
        "minAbsoluteDifference(nums=[1,1,3,1,5,3,2], x=4)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 1, 1], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "countInterestingSubarrays(nums = [1,2,3], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 3, 2, 5, 3, 6, 3], modulo = 3, k = 3)",
        "countInterestingSubarrays(nums = [4, 1, 2, 3, 4, 5, 6, 7, 8, 9], modulo = 9, k = 1)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 2, 3, 3], m = 5)",
        "canSplitArray(nums = [1, 2, 3], m = 5)",
        "canSplitArray(nums = [1, 2, 3], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 7)",
        "canSplitArray(nums = [1,2,3,4,5], m = 8)",
        "canSplitArray(nums = [1,2,3,4], m = 6)",
        "canSplitArray(nums = [2, 1, 5, 6, 4, 3], m = 7)",
        "canSplitArray(nums = [2, 1, 5, 3, 3, 2], m = 4)",
        "canSplitArray(nums = [3, 1, 2, 5, 2], m = 7)",
        "canSplitArray(nums=[5, 2, 3], m=6)"
    ],
    "sample_169": [
        "isAcronym(words = [\"abc\", \"xyz\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\"], s = \"appb\")",
        "isAcronym(words = [\"I\", \"like\", \"Python\"], s = \"ILP\")",
        "isAcronym(words = [\"blue\", \"green\", \"red\"], s = \"bluegreenred\")",
        "isAcronym(words = ['bob', 'joe', 'jim'], s = 'jjj')",
        "isAcronym(words=['ball', 'bat', 'bat'], s='bat')",
        "isAcronym(words = [\"ant\", \"antelope\", \"ant\"] , s = \"a\")",
        "isAcronym(words = [\"Tall\", \"Small\", \"Big\"], s = \"BAS\")",
        "isAcronym(words = [\"boo\", \"koo\", \"doo\", \"box\"], s = \"box\")",
        "isAcronym(words = ['abc', 'cba', 'plma', 'lmao'], s = \"plma\")"
    ],
    "sample_121": [
        "minimumIndex(nums = [0,1,2,3])",
        "minimumIndex(nums = [1, 3, 3])",
        "minimumIndex(nums = [1,1,3,4,5])",
        "minimumIndex(nums=[1,2,2,1,1,1])",
        "minimumIndex(nums = [0,2,1,3,2,1])",
        "minimumIndex(nums = [2,1,2,2,2,2,3])",
        "minimumIndex(nums = [3, 3, 1, 3, 2, 1, 1])",
        "minimumIndex(nums = [2,1,1,2,1,1,1,2])",
        "minimumIndex(nums = [1,3,5,2,2,2,2,7,5,5])",
        "minimumIndex(nums = [4,3,1,1,3,2,1,2])"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 7, offers = [[1, 3, 2], [2, 5, 3], [5, 6, 2]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 2], [2, 5, 4], [3, 6, 1]])",
        "maximizeTheProfit(n = 1, offers = [[1, 2, 5], [4, 5, 6]])",
        "maximizeTheProfit(n = 5, offers = [[0, 4, 2], [1, 4, 1], [2, 5, 1], [3, 5, 10]])",
        "maximizeTheProfit(n = 6, offers = [[1, 3, 30], [3, 5, 20], [5, 6, 10]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 6], [3, 4, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 1], [4, 6, 3], [4, 5, 1], [1, 5, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 4, 100], [2, 2, 50], [3, 3, 30]])",
        "maximizeTheProfit(n = 5, offers = [[1, 5, 20], [1, 2, 50], [2, 4, 40], [2, 3, 30]])",
        "maximizeTheProfit(n = 5, offers = [[0, 4, 100], [1, 2, 110], [3, 10, 20]])"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 4, 3, 2])",
        "maximumTripletValue(nums=[3, 1, 5, 6, 4])",
        "maximumTripletValue(nums = [-1,-4,2,1])",
        "maximumTripletValue(nums = [1, 2, 3, 2])",
        "maximumTripletValue(nums=[5,4,3,2,1])",
        "maximumTripletValue(nums = [1, 4, 5, 6])",
        "maximumTripletValue(nums = [1, 3, 6, 10, 15])",
        "maximumTripletValue(nums = [-1,2,3,4,-10,20])",
        "maximumTripletValue(nums = [6,7,1,2,3])",
        "maximumTripletValue(nums = [-200,-100,-84,63])"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"__L__R__R__L__\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRRR\")",
        "furthestDistanceFromOrigin(moves = \"RLLLR\")",
        "furthestDistanceFromOrigin(moves = \"L_R__R\")",
        "furthestDistanceFromOrigin(moves = \"RLLLRL\")",
        "furthestDistanceFromOrigin(moves = \"_____LRL\")",
        "furthestDistanceFromOrigin(moves = \"_RLL__\")",
        "furthestDistanceFromOrigin(moves = \"LLL_RL__\")",
        "furthestDistanceFromOrigin(moves=\"LRLLLRLLLRR\")",
        "furthestDistanceFromOrigin(moves = \"RR_L_RLLL_\")"
    ],
    "sample_149": [
        "finalString(s = \"ritsng\")",
        "finalString(s = \"ritsng\")",
        "finalString(s = \"rtsng\")",
        "finalString(s = \"rtsng\")",
        "finalString(s = \"string\")",
        "def finalString(s: str) -> str:\n    a = \"\"\n    for i in s:\n        if i",
        "finalString(s = \"aab\")",
        "finalString(s='rstsng')",
        "finalString(s = \"riiit\")",
        "finalString(s = \"baiotais\")"
    ],
    "sample_162": [
        "maxSum(nums = [25, 2, 3, 7])",
        "maxSum(nums = [42, 13, 3, 0])",
        "maxSum(nums = [1, 4, 3, 2])",
        "maxSum(nums=[2, 1, 3, 4, 8, 5])",
        "maxSum(nums = [123, 57, 32])",
        "maxSum(nums=[12, 13, 13, 13])",
        "maxSum(nums = [2,3,10,3,5,2,5,1,10])",
        "maxSum(nums = [123, 578, 21, 3, 2, 6])",
        "maxSum(nums = [42, 1, 12, 16, 40, 33, 2, 21, 5, 8])",
        "maxSum(nums = [123, 234, 1, 235, 345, 34, 645, 12])"
    ],
    "sample_230": [
        "countWays(nums = [1, 3, 5])",
        "countWays(nums = [1,2,3,4,5])",
        "countWays(nums = [1, 3, 2])",
        "countWays(nums = [1, 2, 1, 2, 1])",
        "countWays(nums = [2, 2, 1, 3])",
        "countWays(nums=[3, 2, 1, 4])",
        "countWays(nums = [1, 3, 4])",
        "countWays(nums = [3, 1, 4, 2, 5])",
        "countWays(nums = [3, 2, 1, 1, 7])",
        "countWays(nums = [3,3,2,3])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 15)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 10, target = 10)",
        "minimumPossibleSum(n = 5, target = 50)",
        "minimumPossibleSum(n = 6, target = 15)",
        "minimumPossibleSum(n=4, target=6)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 3, offers = [[1, 2, 5], [2, 3, 4], [1, 3, 2]])",
        "maximizeTheProfit(N = 2, offers = [[1, 2, 10], [2, 3, 20], [2, 5, 40]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 5], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(N = 4, offers = [[1, 2, 10], [3, 2, 5], [4, 1, 7]])",
        "maximizeTheProfit(N = 2, offers = [[1, 2, 100], [2, 1, 500], [3, 1, 300]])",
        "maximizeTheProfit(N = 5, offers = [[2, 1, 10], [1, 3, 20], [3, 4, 5]])",
        "maximizeTheProfit(N = 10, offers = [[3, 10, 3], [5, 1, 5]])",
        "maximizeTheProfit(N = 4, offers = [[1, 2, 100], [1, 3, 200], [2, 3, 200], [3, 4, 300], [3, 5, 300]])",
        "maximizeTheProfit(N = 10, offers = [[1, 2, 1], [1, 3, 2], [3, 5, 3], [2, 4, 1], [2, 5, 1]])",
        "maximizeTheProfit(N = 4, offers = [[1, 2, 3], [1, 4, 5], [3, 4, 6], [2, 3, 7], [3, 5, 4], [4, 3, 8]])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 3, offers = [[0, 1, 5], [1, 2, 2], [2, 3, 4]])",
        "maximizeTheProfit(n = 4, offers = [[1,2,5],[1,3,3],[2,3,2]])",
        "maximizeTheProfit(n = 3, offers = [(0, 10), (1, 4), (2, 6)])",
        "maximizeTheProfit(n=5, offers=[[1, 4, 4], [3, 5, 20], [4, 5, 10]])",
        "maximizeTheProfit(n = 5, offers = [[3, 1000000000, 1000000000]])",
        "maximizeTheProfit(n = 4, offers = [[2, 3, 10], [3, 2, 20], [4, 2, 30]])",
        "maximizeTheProfit(n = 6, offers = [[0, 2, 4], [1, 3, 10], [3, 5, 5]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 10], [1, 3, 15], [2, 3, 15], [3, 4, 20]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 6], [2, 3, 14], [1, 4, 9], [4, 5, 13]])",
        "maximizeTheProfit(n = 3, offers = [[0, 10, 6], [1, 2, 10], [2, 3, 8], [4, 5, 10], [5, 6, 10]])"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 10], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 4, 7, 10], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 5, 6, 8, 10], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 1, 1, 3, 1], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 2, 4, 3, 2], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 1, 1, 1, 2, 3, 4], target = 4)"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [4,2,4,5,6])",
        "countCompleteSubarrays(nums = [4,2,4,5,6])",
        "countCompleteSubarrays(nums = [1,3,5,2,7,5])",
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums=[2,4,6,8,10])",
        "countCompleteSubarrays(nums = [2,1,4,3,5,2,2,1])",
        "countCompleteSubarrays(nums = [1,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,1,2,1,1,2,1,2,1])",
        "countCompleteSubarrays(nums = [1,1,2,2,4,4,4])"
    ],
    "sample_229": [
        "countWays(nums = [1, 3, 5])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 5])",
        "countWays(nums = [2, 3, 1, 4])",
        "countWays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countWays(nums = [2, 3, 5, 10])",
        "countWays(nums = [2, 1, 6, 3])",
        "countWays(nums = [5, 6, 7, 8, 9, 10])",
        "countWays(nums = [2,1,2,4,3])",
        "countWays(nums = [5, 8, 6])"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4])",
        "maxIncreasingGroups(usageLimits = [2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(usageLimits = [1, 3, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 2])",
        "maxIncreasingGroups(usageLimits = [1, 3, 10])",
        "maxIncreasingGroups(usageLimits = [5, 2, 3, 4, 2])",
        "maxIncreasingGroups(usageLimits = [10, 3, 1, 4])",
        "maxIncreasingGroups(usageLimits = [8, 8, 4, 2, 3, 3, 8])"
    ],
    "sample_173": [
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 4, k = 6)",
        "minimumSum(n = 10, k = 10)",
        "minimumSum(n = 6, k = 2)",
        "minimumSum(n = 6, k = 2)",
        "minimumSum(n = 6, k = 9)",
        "minimumSum(n = 6, k = 15)",
        "minimumSum(n = 7, k = 15)",
        "minimumSum(n=10, k=25)",
        "minimumSum(n = 4, k = 16)"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 3, 5, 2, 7, 5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 3, 5, 2, 7, 5], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 1, 1, 2, 3], m = 4, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 4, 8, 16], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 10, 3, 1], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 10, 12, 1], m = 6, k = 5)",
        "countInterestingSubarrays(nums = [2,4,6,1,7,3,8,9,5], m = 3, k = 1)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [2,4,6,8,10])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [2,4,6,8,10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2])",
        "countCompleteSubarrays(nums = [1, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 3, 3])",
        "countCompleteSubarrays(nums = [3, 3, 2, 2, 5, 2, 3, 4])",
        "countCompleteSubarrays(nums = [0,3,1,4,2,5,0,4,1,3,2,4,2,5,5,5,1,2,3])"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1,2,3,1,2], k = 3)",
        "longestEqualSubarray(nums=[1, 1, 1, 1, 1], k=2)",
        "longestEqualSubarray(nums=[1, 2, 2, 3, 1, 4, 2], k=3)",
        "longestEqualSubarray(nums = [1,2,2,3,4,5], k = 3)",
        "longestEqualSubarray(nums = [1, 1, 2, 2, 1, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 3, 4, 3, 1, 1], k = 3)",
        "longestEqualSubarray(nums=[3,2,1,2,3,4,3,2,1,2], k=3)",
        "longestEqualSubarray(nums = [2, 3, 1, 2, 2, 3, 1, 2, 2, 3], k = 4)",
        "longestEqualSubarray(nums = [4, 1, 1, 4, 3, 3, 3, 2], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,4,5,1,2,3,1,1,1,1,1,1,1,1,1], k = 3)"
    ],
    "sample_170": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"helloworld\")",
        "isAcronym(words = [\"this\", \"is\", \"a\", \"test\"], s = \"tist\")",
        "isAcronym(words = [\"dogs\", \"cats\"], s = \"dogs\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hello\")",
        "isAcronym(words = [\"dog\", \"cat\", \"bird\"], s = \"cac\")",
        "isAcronym(words = [\"my\", \"name\", \"is\", \"Kevin\"], s = \"MNK\")",
        "isAcronym(words = [\"spam\", \"eggs\"], s = \"ses\")",
        "isAcronym(words = [\"alpha\", \"omega\"], s = \"\")",
        "isAcronym(words = [\"eleven\", \"nine\"], s = \"eleven\")",
        "isAcronym(words = [\"abc\", \"pqr\", \"xyz\"], s = \"czyx\")"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"011\")",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '10010')",
        "maximumOddBinaryNumber(s = \"110101010\")",
        "maximumOddBinaryNumber(s = \"110110011\")",
        "maximumOddBinaryNumber(s = \"110111001110\")",
        "maximumOddBinaryNumber(s = \"10100100\")",
        "maximumOddBinaryNumber(s = \"110011\")",
        "maximumOddBinaryNumber(s = \"1000011111\")"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 3, 5])",
        "countWays(nums = [1, 1, 2, 3, 3])",
        "countWays(nums = [1, 2, 4, 3])",
        "countWays(nums = [-1, 0, 3, 5])",
        "countWays(nums=[-1, 0, 2, 3, 4, 6, 7])"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 5, offers = [[1, 4, 6], [3, 5, 7]])",
        "maximizeTheProfit(n = 10, offers = [[1, 4, 5], [2, 5, 10]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 7], [1, 3, 3]])",
        "maximizeTheProfit(n = 5, offers = [[1, 4, 2], [1, 1, 3]])",
        "maximizeTheProfit(n = 10, offers = [[1, 5, 6], [6, 9, 1], [4, 5, 6], [2, 3, 4]])",
        "maximizeTheProfit(n = 10, offers = [[0, 3, 2], [1, 5, 3], [3, 7, 6]])",
        "maximizeTheProfit(n = 6, offers = [[1,2,10], [2,5,20], [3,4,40]])",
        "maximizeTheProfit(n = 5, offers = [[2, 1, 10], [4, 2, 100], [5, 2, 100]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 10], [5, 5, 20], [3, 3, 15]])",
        "maximizeTheProfit(n = 5, offers = [[3,4,30],[5,6,15]])"
    ],
    "sample_122": [
        "minimumIndex(nums = [1,2,2])",
        "minimumIndex(nums = [1,1,1,1,2,3])",
        "minimumIndex(nums = [1, 1, 1, 1, 1, 2])",
        "minimumIndex(nums = [0, 2, 0, 3])",
        "minimumIndex(nums = [0,1,0,0,0,1,1,0])",
        "minimumIndex(nums = [1,1,1,1,2,2,2,3,3,3])",
        "minimumIndex(nums = [2,3,3,4,4,4,4])",
        "minimumIndex(nums = [1,2,3,4,2,2,3,4,2])",
        "minimumIndex(nums = [2,2,2,2,2,1,4,4,4,4,4])",
        "minimumIndex(nums=[5,1,5,5,5])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1, 5], [10, 20], [1, 6], [16, 19]])",
        "numberOfPoints(nums = [[1, 5], [3, 9], [1, 2]])",
        "numberOfPoints(nums = [[1, 2], [2, 3]])",
        "numberOfPoints(nums = [[1, 3], [4, 7]])",
        "numberOfPoints(nums = [[1, 5], [3, 10], [12, 15]])",
        "numberOfPoints(nums = [[1, 3], [3, 4], [1, 4]])",
        "numberOfPoints(nums = [[2, 5], [3, 10], [4, 15]])",
        "numberOfPoints(nums=[[1, 3], [2, 5], [5, 6]])",
        "numberOfPoints(nums = [[2, 6], [5, 10], [7, 9], [10, 11]])",
        "numberOfPoints(nums = [\n    [1, 2],\n    [2, 3],\n    [5, 5],\n    [4, 6],\n    [6, 7],\n    [7, 8],\n    [9, 10]\n])"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\", \"d\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"ab\", \"cd\", \"ef\"], separator = \"d\")",
        "splitWordsBySeparator(words = [\"This is a list\", \"of words\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"banana\", \"apple\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"banana\",\"apple\",\"orange\",\"lemon\",\"pear\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"hello\", \"goodbye\"], separator = \"l\")",
        "splitWordsBySeparator(words = [\"asd\", \"ffg\", \"wer\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"abcdefgh\", \"ijklmn\", \"opqrstuv\"], separator = \"cd\")",
        "splitWordsBySeparator(words=[\"happy\", \"Banana\", \"grasshopper\", \"python\"], separator=\" \")",
        "splitWordsBySeparator(words = [\"my\", \"is\", \"a\", \"parrot\", \"is\", \"a\", \"parrot\", \"yes\", \"yes\", \"no\", \"no\"], separator = \" \")"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 5)",
        "minimumPossibleSum(n = 5, target = 15)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 7, target = 11)",
        "minimumPossibleSum(n = 2, target = 8)",
        "minimumPossibleSum(n = 10, target = 7)",
        "minimumPossibleSum(n = 10, target = 30)"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[-2, 2], [2, 4]])",
        "numberOfPoints(nums = [[1, 3], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [3, 6]])",
        "numberOfPoints(nums=[[-2, 2], [2, 4]])",
        "numberOfPoints(nums = [[0, 1], [2, 3]])",
        "numberOfPoints(nums = [[0, 5], [3, 7], [1, 3]])",
        "numberOfPoints(nums = [\n    [1, 3],\n    [4, 6],\n    [7, 8],\n])",
        "numberOfPoints(nums = [[5,8], [3,10], [1,6], [7, 12]])",
        "numberOfPoints(nums=[[0, 10], [2, 4], [2, 7]])"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 1, 1], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 1, 1, 1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,1,1], m = 2, k = 2)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4], m=5, k=2)",
        "countInterestingSubarrays(nums = [1, 1, 2, 2], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 1, 1, 2, 2, 2], m = 2, k = 1)",
        "countInterestingSubarrays(nums=[1, 3, 3, 3], m=4, k=3)",
        "countInterestingSubarrays(nums=[3, 1, 2, 3, 0], m=3, k=1)"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 1, 3, 10, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "sumIndicesWithKSetBits(nums = [4, 5, 2, 25], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 2, 8, 1, 1, 0, 10, 4, 7, 4, 0], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 7, 16, 27, 38], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 7, 16, 27, 36, 45, 54, 63, 72], k = 3)",
        "sumIndicesWithKSetBits(nums = [3, 2, 4, 5, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [12, 1, 3, 5, 7], k = 3)"
    ],
    "sample_203": [
        "minimumOperations(num = \"020104\")",
        "minimumOperations(num = \"020104\")",
        "minimumOperations(num = \"2025\")",
        "minimumOperations(num = \"1234567891011\")",
        "minimumOperations(num = \"025326\")",
        "minimumOperations(num = \"1000000\")",
        "minimumOperations(num=\"2255555555\")",
        "minimumOperations(num = \"12012201221\")",
        "minimumOperations(num = '543251')",
        "minimumOperations(num = \"354756503173278564440433891847963423623220560931519838905647068375073216595849129384352630955299786786513629145713572548123277099244787326404446728454447789431837881825383662630586902855223247397123960329069435740306453662704688577907769262805492969459859928023710410172242149237773141681091677757853649727244704677192660688231033885929657296905879133341106580603925122690477888271648811772598917407621723713693581792936226011267391724592579422994953354775084835665702225586857564906078967632638383650"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1, 1, 1, 1], modulo = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 4, k = 3)",
        "countInterestingSubarrays(nums = [1, 1, 1, 1, 1], modulo = 2, k = 2)",
        "countInterestingSubarrays(nums=[1, 2, 3], modulo=3, k=1)",
        "countInterestingSubarrays(nums = [1,1,1,1], modulo = 2, k = 2)",
        "def countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    cnt = Counter()\n    cnt[0] = 1\n    ans = 0\n    s = 0\n    for a in nums:\n        s += a%modulo",
        "countInterestingSubarrays(nums = [2, 3, 5, 5, 3], modulo = 4, k = 1)",
        "def countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    cnt = Counter()\n    cnt[0] = 1\n    ans = 0\n    s = 0\n    for a in nums:\n        s += a%modulo",
        "def countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    cnt = Counter()\n    cnt[0] = 1\n    ans = 0\n    s = 0\n    for a in nums:\n        s += a%modulo"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1, 2, 3, 1, 2, 3, 4], K = 2)",
        "longestEqualSubarray(A = [1,2,3,1,2,3,1], K = 2)",
        "longestEqualSubarray(A = [1, 2, 3, 2, 1, 1], K = 3)",
        "longestEqualSubarray(A = [1, 2, 3, 1, 4, 5], K = 3)",
        "longestEqualSubarray(A = [1,2,3,1,4,5,2,1], K = 3)",
        "longestEqualSubarray(A = [1, 4, 5, 6, 7, 8, 9, 10], K = 4)",
        "longestEqualSubarray(A = [1, 2, 3, 3, 2, 2, 1, 4, 4, 3], K = 3)",
        "longestEqualSubarray(A = [1,2,2,2,3,3,3,5,5,5,5,5,5], K = 3)",
        "longestEqualSubarray(A = [3, 2, 1, 2, 1, 4, 2, 1, 5, 1, 1, 1, 1, 1, 1], K = 3)",
        "longestEqualSubarray(A = [1,3,5,4,5,3,2,1,1,3,4,6,8,7,4,6,7], K = 5)"
    ],
    "sample_146": [
        "finalString(s = \"ponter\")",
        "finalString(s = 'ponter')",
        "finalString(s = \"pointer\")",
        "finalString(s = \"pponter\")",
        "finalString(s = \"poi\")",
        "finalString(s = \"ponteri\")",
        "finalString(s = \"poiintre\")",
        "finalString(s = \"codewars\")",
        "finalString(s = \"mimi\")",
        "finalString(s = 'pinnet')"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [3, 1, 4, 1], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 1, 4, 1], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 5, 1, 4], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 5, 2, 1], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 1, 5, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [15, 15, 15, 15], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 4, 2, 2], target = 2)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 3], [5, 6], [6, 8]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [6, 7]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]])",
        "numberOfPoints(nums = [[2, 2], [3, 3], [5, 5], [2, 2], [3, 3], [4, 4], [6, 6]])",
        "numberOfPoints(nums = [[1, 3], [5, 10], [13, 23], [4, 8]])",
        "numberOfPoints(nums = [[1, 2], [5, 10], [2, 6]])",
        "numberOfPoints(nums = [[1, 10], [10, 15], [15, 16]])",
        "numberOfPoints(nums = [[1,3],[7,8],[15,18]])",
        "numberOfPoints(nums = [[0, 5], [6, 7], [4, 8], [9, 11]])",
        "numberOfPoints(nums = [\n    [1, 5],\n    [7, 9],\n    [13, 15],\n    [16, 21],\n    [18, 18],\n    [21, 23]\n])"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 5])",
        "maxIncreasingGroups(A = [2, 4, 6, 8, 10])",
        "maxIncreasingGroups(A = [1, 2, 3, 6, 7])",
        "maxIncreasingGroups(A = [1, 2, 4, 5, 10])",
        "maxIncreasingGroups(A = [4, 1, 2, 3, 5, 1, 2, 3, 5])",
        "maxIncreasingGroups(A = [4, 2, 2, 1, 1, 1, 2])",
        "maxIncreasingGroups(A = [1, 2, 5, 9, 12, 13, 14, 16, 18, 24])",
        "maxIncreasingGroups(A = [1, 2, 3, 6, 7, 9, 10, 14, 16, 19, 21, 25, 29])"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 5, offers = [[1, 4, 6], [3, 5, 7], [2, 3, 8]])",
        "maximizeTheProfit(n=5, offers=[[1,2,10],[1,3,20],[2,3,30]])",
        "maximizeTheProfit(n=5, offers=[[1, 2, 20], [2, 3, 10], [3, 4, 30]])",
        "maximizeTheProfit(n=3, offers=[[1, 1, 2], [2, 3, 2], [1, 2, 3]])",
        "maximizeTheProfit(n = 6, offers = [[1, 3, 2], [4, 6, 1], [6, 10, 2]])",
        "maximizeTheProfit(n = 4, offers = [[1, 1, 4], [3, 2, 4]])",
        "maximizeTheProfit(n=5, offers=[[1,1,2],[2,3,1],[3,1,3],[1,4,2],[4,5,1]])",
        "maximizeTheProfit(n=5, offers=[[2,3,10],[3,4,40],[5,5,20]])",
        "maximizeTheProfit(n = 10, offers = [[1, 3, 2], [2, 8, 6], [5, 6, 3], [5, 8, 7]])",
        "maximizeTheProfit(n = 7, offers = [[1,2,7], [3,4,2], [4,5,1], [5,6,2]])"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"LRLLRRRLR\")",
        "furthestDistanceFromOrigin(moves = \"LR_L\")",
        "furthestDistanceFromOrigin(moves = \"LRR__LR_\")",
        "furthestDistanceFromOrigin(moves = \"RR_LRL__RR\")",
        "furthestDistanceFromOrigin(moves = \"___L__R___R__L__\")",
        "furthestDistanceFromOrigin(moves = \"__L__R___\")",
        "furthestDistanceFromOrigin(moves = \"L_______RRRRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LRRLLFLLLLFLL\")",
        "furthestDistanceFromOrigin(moves=\"_RRRRRLLLRR\")",
        "furthestDistanceFromOrigin(moves = \"LRR_L_LLR__R_RRRR_RRR_R__\")"
    ],
    "sample_175": [
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 4, k = 6)",
        "minimumSum(n = 5, k = 9)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 5, k = 22)",
        "minimumSum(n=5, k=15)",
        "minimumSum(n=3, k=7)",
        "minimumSum(n = 6, k = 26)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,3],[5,6],[7,9]])",
        "numberOfPoints(nums=[[1,3],[5,7],[9,10]])",
        "numberOfPoints(nums=[[1,10],[10,20],[20,30],[30,40],[40,50]])",
        "numberOfPoints(nums=[[0,1],[0,3],[1,3]])",
        "numberOfPoints(nums=[[0,3],[5,8],[2,4],[6,7]])",
        "numberOfPoints(nums = [[1,3],[2,6],[5,7],[7,8]])",
        "numberOfPoints(nums = [[5,8],[3,9],[1,6],[4,7]])",
        "numberOfPoints(nums = [[1,3], [5,9], [11,13], [2,4]])",
        "numberOfPoints(nums=[[-10, 4], [1, 15], [0, 20]])",
        "numberOfPoints(nums=[[1,10],[5,100],[3,7],[8,1000]])"
    ],
    "sample_205": [
        "minimumOperations(num = \"00110\")",
        "minimumOperations(num = \"123456789\")",
        "minimumOperations(num = \"1001010\")",
        "minimumOperations(num = \"000110\")",
        "minimumOperations(num = \"101010\")",
        "minimumOperations(num = \"0225\")",
        "minimumOperations(num = \"01010\")",
        "minimumOperations(num = \"111110\")",
        "def minimumOperations(num: str) -> int:\n    ans = len(num) - 1 if \"0\" in num else len(num)\n    modes = [\"00\", \"25\", \"50\", \"75\"]\n    for mode in modes:\n        i, j = len(num) - 1, len(mode) - 1\n        cur = 0\n        while i >= 0:\n            if num[i]",
        "minimumOperations(num = \"0001100000111010\")"
    ],
    "sample_120": [
        "minimumIndex(nums = [1,1,1,1])",
        "minimumIndex(nums = [1,2,3,4,5,5,5])",
        "minimumIndex(nums = [2, 1, 3, 2, 2])",
        "minimumIndex(nums = [2,3,3,3,5,3])",
        "minimumIndex(nums = [1, 1, 1, 2, 3, 1])",
        "minimumIndex(nums = [1,1,1,1,1,2,2,2,2])",
        "minimumIndex(nums = [2, 1, 2, 3, 3, 4])",
        "minimumIndex(nums = [1,2,3,1,3,2,2])",
        "minimumIndex(nums = [5, 1, 4, 2, 0, 0, 4])",
        "minimumIndex(nums=[3,2,4,3,2,3,2,3,1,2,3])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"LR\")",
        "furthestDistanceFromOrigin(moves = \"LR___\")",
        "furthestDistanceFromOrigin(moves = \"_R_L_\")",
        "furthestDistanceFromOrigin(moves = \"LR___R__\")",
        "furthestDistanceFromOrigin(moves = \"L_L_R_R\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRR__\")",
        "furthestDistanceFromOrigin(moves = \"___L__R__R_\")",
        "furthestDistanceFromOrigin(moves = \"___L___RRLR\")",
        "furthestDistanceFromOrigin(moves = \"__L___R__R__R__R__\")",
        "furthestDistanceFromOrigin(moves = \"LRR_LR_RLL\")"
    ],
    "sample_161": [
        "maxSum(nums = [12, 15, 32, 42, 55])",
        "maxSum(nums = [3, 4, 5, 6])",
        "maxSum(nums = [1,2,3,4])",
        "maxSum(nums = [1, 4, 3, 2])",
        "maxSum(nums = [5,4,3,2,1])",
        "maxSum(nums=[2, 2, 2, 2])",
        "maxSum(nums = [-1,1,0,3,9])",
        "maxSum(nums=[-5, -4, -3, -2, -1])",
        "maxSum(nums = [12, 17, 7, 36])",
        "maxSum(nums=[11,20,40,3,2,1])"
    ],
    "sample_160": [
        "maxSum(nums = [1,2,3,4])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSum(nums = [1, 2, 2, 4])",
        "maxSum(nums = [1, 2, 3, 2, 3, 3])",
        "maxSum(nums = [2, 1, 5, 6, 4, 3])",
        "maxSum(nums = [32, 3, 32, 32])",
        "maxSum(nums = [10, 12, 12, 3, 5, 11, 4, 2, 14, 13, 6, 15, 16, 15, 8, 7, 4, 6, 9, 10])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one two three', 'four five six'], separator = ' ')",
        "splitWordsBySeparator(words = [\"one two three\", \"four five six\"], separator = \" \")",
        "splitWordsBySeparator(words=[\"one two three\", \"four five six\"], separator=\" \")",
        "splitWordsBySeparator(words = ['one,two,three,four,five,six'], separator = ',')",
        "splitWordsBySeparator(words = ['one', 'two', 'three'], separator = '')",
        "splitWordsBySeparator(words = ['one','two','three','four','five','six'], separator = ' ')",
        "splitWordsBySeparator(words = [\"one two three four five six\", \"seven eight nine ten\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one two', 'three four five six'], separator = \" \")",
        "splitWordsBySeparator(words = ['one','two','three','four','five','six'], separator = 'e')"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [2,5,3,4,2,5,2], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 5, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours=[2,5,3,4,2,5,2,3,5], target=4)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 20, 10, 20], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours=[1,4,3,4], target=7)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 4, 1, 4, 3, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 2, 1, 1, 1, 1, 1, 1, 1], target = 4)"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [3, 1, 4, 1, 5], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours=[1,2,3,4,5,6], target=4)",
        "numberOfEmployeesWhoMetTarget(hours=[2,4,3,4,6,6], target=4)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 7, 7], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 2, 3], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours=[1,3,4,6], target=2)",
        "numberOfEmployeesWhoMetTarget(hours=[0,3,10,5], target=6)"
    ],
    "sample_171": [
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 4, k = 6)",
        "minimumSum(n = 4, k = 5)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 10, k = 3)",
        "minimumSum(n = 4, k = 8)",
        "minimumSum(n = 4, k = 19)",
        "minimumSum(n=4, k=7)",
        "minimumSum(n = 10, k = 45)",
        "minimumSum(n = 10, k = 24)"
    ],
    "sample_159": [
        "maxSum(nums = [1,2,3])",
        "maxSum(nums=[12,345,2,6,7896])",
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums = [-1,-2,-3,-4,-5])",
        "maxSum(nums = [10,20,30])",
        "maxSum(nums=[10,10])",
        "maxSum(nums = [10, 11, 12])",
        "maxSum(nums=[51,22,33,44,11])",
        "maxSum(nums = [51, 2, 63, 55, 44])",
        "maxSum(nums = [3, 10, 15, 30, 45, 60, 75, 90, 105])"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums=[1, 2, 3, 4], m=6)",
        "canSplitArray(nums = [5, 7, 3, 9, 4, 1], m = 10)",
        "canSplitArray(nums = [1, 1, 3, 3], m = 5)",
        "canSplitArray(nums = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9], m = 9)",
        "canSplitArray(nums=[3, 2, 1, 5, 1], m=4)",
        "canSplitArray(nums = [7, 3, 2, 10, 5, 4, 1], m = 12)",
        "canSplitArray(nums = [4, 6, 11, 8, 10, 2, 5], m = 19)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"the\", \"quick\", \"brown\", \"fox\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"banana\", \"apple\"], separator = \"na\")",
        "splitWordsBySeparator(words = [\"hi\", \"my\", \"name\", \"is\", \"bryan\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"there\", \"is\", \"a\", \"dog\", \"here\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"I am hungry\", \"I am sad\", \"I am happy\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"cat\",\"dog\",\"mouse\",\"tiger\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"abcd\", \"efgh\", \"ijkl\", \"mno\"], separator = \"h\")",
        "splitWordsBySeparator(words = [\"hi\", \"how are\", \"you doing today\", \"i'm fine\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"these are the words\", \"abc\", \"xyz\", \"longer word\"], separator = \" \")"
    ],
    "sample_172": [
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n=3, k=5)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 4, k = 7)",
        "minimumSum(n = 6, k = 5)",
        "minimumSum(n=2, k=7)",
        "minimumSum(n=6, k=3)",
        "minimumSum(n=4, k=8)"
    ],
    "sample_228": [
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 1, 2])",
        "countWays(nums = [0, 2, 1])",
        "countWays(nums = [0, 1, 2, 3, 4, 5, 6])",
        "countWays(nums = [-1,-1,1,2,3])",
        "countWays(nums = [1, 1, 1, 1, 2, 2, 3])",
        "countWays(nums = [2, 5, 1, 8, 2])",
        "countWays(nums=[-4, -2, -2, -2, 0, 1, 2, 2, 2, 3, 3, 4, 4, 6, 6])",
        "countWays(nums=[2,1,1,3,1,3,1,1,3])",
        "countWays(nums = [1,2,2,3,4,5,5,5,5,5,5,6,6,6,6,6,6,7,7,8,8,8])"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = '00101')",
        "maximumOddBinaryNumber(s = '100')",
        "maximumOddBinaryNumber(s = \"11101\")",
        "maximumOddBinaryNumber(s = \"10110\")",
        "maximumOddBinaryNumber(s = \"0110011\")",
        "maximumOddBinaryNumber(s = \"101010101010\")",
        "maximumOddBinaryNumber(s = \"0100101\")",
        "maximumOddBinaryNumber(s = '101011')",
        "maximumOddBinaryNumber(s = '101100')",
        "maximumOddBinaryNumber(s = \"111100001100110000001011\")"
    ],
    "sample_119": [
        "minimumIndex(nums = [1, 2, 3, 3, 3])",
        "minimumIndex(nums = [2, 1, 1, 1])",
        "minimumIndex(nums = [1, 1, 3, 2, 1])",
        "minimumIndex(nums = [1,1,2])",
        "minimumIndex(nums = [1, 2, 1, 1, 2, 2])",
        "minimumIndex(nums = [0, 0, 1, 1, 1, 2])",
        "minimumIndex(nums = [4,4,4])",
        "minimumIndex(nums = [0, 1, 3, 1, 1, 1])",
        "minimumIndex(nums = [3,3,5,3])",
        "minimumIndex(nums = [1, 3, 2, 3, 1, 1, 3])"
    ],
    "sample_153": [
        "canSplitArray(nums = [1,2,3,3,4,5,6], m = 4)",
        "canSplitArray(nums=[1,2,3,4,5,6,7,8,9,10], m=5)",
        "canSplitArray(nums = [1,2,3,4,5,6,7,8,9,10], m = 10)",
        "canSplitArray(nums=[1,2,3,3],m=3)",
        "canSplitArray(nums=[1, 5, 6, 7], m=3)",
        "canSplitArray(nums = [4,3,2,6,2,3,4,7,3], m = 5)",
        "canSplitArray(nums = [4,2,1,7,8,1,2], m = 3)",
        "canSplitArray(nums = [3,1,5,10,5,10], m = 4)",
        "canSplitArray(nums=[5, 9, 4, 6, 7, 8], m=7)",
        "canSplitArray(nums = [5,2,4,4,7,2,1,7,9], m = 23)"
    ],
    "sample_147": [
        "finalString(s = \"iris\")",
        "finalString(s = \"binary\")",
        "finalString(s = \"sitnet\")",
        "finalString(s = \"isitrain\")",
        "finalString(s = \"banana\")",
        "finalString(s = \"banana\")",
        "finalString(s = 'gid')",
        "finalString(s = \"fredericksburg\")",
        "finalString(s=\"rsiir\")",
        "finalString(s=\"wbirutg\")"
    ],
    "sample_174": [
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 9)",
        "minimumSum(n = 5, k = 20)",
        "minimumSum(n = 2, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 10, k = 10)",
        "minimumSum(n = 2, k = 2)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1, 2, 3, 4], m = 4)",
        "canSplitArray(nums = [1,2,3,4,5], m = 6)",
        "canSplitArray(nums = [1,1,1,1], m = 5)",
        "canSplitArray(nums = [2,3,1,5], m = 8)",
        "canSplitArray(nums = [3,2,1,5,4], m = 6)",
        "canSplitArray(nums = [3, 1, 4, 1, 5], m = 6)",
        "canSplitArray(nums = [4, 1, 3], m = 2)",
        "canSplitArray(nums = [2, 4, 5, 12], m = 10)",
        "canSplitArray(nums = [5, 2, 3, 1, 1], m = 7)",
        "canSplitArray(nums = [2,5,4,1,6], m = 10)"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1, 2, 4])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums=[4, 3, 2, 7, 8, 2, 3, 1])",
        "countCompleteSubarrays(nums = [0,1,2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])"
    ],
    "sample_150": [
        "finalString(s = \"ritsng\")",
        "finalString(s = 'rtsing')",
        "finalString(s = \"cat\")",
        "finalString(s = \"rtsin\")",
        "finalString(s = \"irista\")",
        "finalString(s = \"circular\")",
        "finalString(s=\"aabbci\")",
        "finalString(s = \"ifmigor\")",
        "finalString(s = \"rebocilatest\")",
        "finalString(s = \"abciifjdbjkhbg\")"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 15)",
        "minimumPossibleSum(n = 3, target = 20)",
        "minimumPossibleSum(n = 10, target = 13)",
        "minimumPossibleSum(n=3, target=4)",
        "minimumPossibleSum(n = 4, target = 2)",
        "minimumPossibleSum(n = 10, target = 12)",
        "minimumPossibleSum(n = 5, target = 13)",
        "minimumPossibleSum(n = 12, target = 63)"
    ],
    "sample_176": [
        "minimumSum(n = 4, k = 6)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 5, k = 4)",
        "minimumSum(n = 5, k = 4)",
        "minimumSum(n = 5, k = 5)",
        "minimumSum(n = 5, k = 5)",
        "minimumSum(n = 4, k = 4)",
        "minimumSum(n = 10, k = 12)",
        "minimumSum(n = 1, k = 10)"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 2)",
        "countInterestingSubarrays(nums=[1, 2, 3], modulo=2, k=2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 2, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums = [1,3,5,2,7,5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums=[0,0,0,0,0,0,0,0,0,0], modulo=1, k=0)",
        "countInterestingSubarrays(nums = [1,3,1,3], modulo = 4, k = 3)",
        "countInterestingSubarrays(nums = [2,3,5,7,9,11,13], modulo = 10, k = 2)",
        "countInterestingSubarrays(nums = [4,2,2,4,4,4,6,1,3,3,7], modulo = 4, k = 3)"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 1)",
        "sumIndicesWithKSetBits(nums=[1, 2, 3], k=2)",
        "sumIndicesWithKSetBits(nums = [2, 7, 12], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 5, 2, 4, 6, 8], k = 3)",
        "sumIndicesWithKSetBits(nums = [4, 2, 1, 3], k = 2)",
        "sumIndicesWithKSetBits(nums=[1, 1, 1, 1, 1, 1], k=2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], k = 5)",
        "sumIndicesWithKSetBits(nums = [3, 4, 5, 6, 9, 22, 54], k = 3)",
        "sumIndicesWithKSetBits(nums=[1, 1, 3, 2, 1, 1, 5, 6, 8, 4, 5, 4], k=4)"
    ],
    "sample_151": [
        "finalString(s = \"banana\")",
        "finalString(s = 'restart')",
        "finalString(s = 'this is a string')",
        "finalString(s = 'rickets')",
        "finalString(s = \"cici\")",
        "finalString(s = \"beeti\")",
        "finalString(s = \"abciiid\")",
        "finalString(s = 'abbcde')",
        "finalString(s = \"aivitr\")",
        "finalString(s = \"aabacadaeafagah\")"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 7, 12, 18], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 0, 1, 0, 1], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 0, 1, 0, 0, 1, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 9, 5, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 2, 6, 8, 1, 6, 6, 6, 7, 5, 4, 5], k = 3)"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [2, 3, 5, 8])",
        "maxIncreasingGroups(usageLimits = [1, 2, 5, 8])",
        "maxIncreasingGroups(usageLimits = [2, 1, 2, 3, 4])",
        "maxIncreasingGroups(usageLimits = [4, 10, 4])",
        "maxIncreasingGroups(usageLimits = [10, 4, 20])",
        "maxIncreasingGroups(usageLimits=[1, 2, 3, 6, 10])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 6, 7, 10, 11])",
        "maxIncreasingGroups(usageLimits = [6, 10, 20, 40, 15])",
        "maxIncreasingGroups(usageLimits = [2, 10, 13, 16, 17, 19, 23])",
        "maxIncreasingGroups(usageLimits = [3, 10, 5, 7, 2, 20, 25, 15, 17])"
    ],
    "sample_204": [
        "minimumOperations(s = \"00110\")",
        "minimumOperations(s = \"00110\")",
        "minimumOperations(s = \"00110\")",
        "minimumOperations(s = \"00110\")",
        "minimumOperations(s = \"1111\")",
        "minimumOperations(s = \"00110\")",
        "minimumOperations(s = \"00110101\")",
        "minimumOperations(s=\"00110101\")",
        "minimumOperations(s = \"000110010\")",
        "minimumOperations(s = \"1001111110\")"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [3, 1, 4, 1], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 1, 2], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 3, 2], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 1, 4, 3, 7], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 3, 2, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 5, 5], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 1, 3, 9], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 4, 1, 6, 2, 3, 7], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [11, 30, 5, 7, 9, 10, 23], target = 10)"
    ],
    "sample_148": [
        "finalString(s = \"ponter\")",
        "finalString(s = \"ponter\")",
        "finalString(s = \"ponter\")",
        "finalString(s = 'ponter')",
        "finalString(s = 'pointers')",
        "finalString(s = \"pieter\")",
        "finalString(s='pinter')",
        "finalString(s = \"bin\")",
        "finalString(s = \"pontium\")",
        "finalString(s = \"ipoetnap\")"
    ],
    "sample_168": [
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = ['apple', 'banana', 'cherry'], s = 'ap')",
        "isAcronym(words = [\"I\", \"am\", \"an\", \"acronym\"], s = \"Ia\")",
        "isAcronym(words = [\"ball\", \"bat\", \"batten\"], s = \"bab\")",
        "isAcronym(words = [\"race\", \"car\"], s = \"rcr\")",
        "isAcronym(words = ['python', 'developer'], s = 'pydev')",
        "isAcronym(words = ['micro', 'mining', 'machine'], s = 'mmm')",
        "isAcronym(words = [\"rat\", \"am\", \"cat\"], s = \"cat\")",
        "isAcronym(words = [\"ancient\", \"magnificent\", \"great\"], s = \"mn\")",
        "isAcronym(words = [\"marvin\", \"diablo\", \"thomas\"], s = \"mdt\")"
    ],
    "sample_201": [
        "minOperations(nums = [1,1,4,2,3], target = 5)",
        "minOperations(nums = [1, 1, 4, 2, 3], target = 5)",
        "minOperations(nums = [3,2,2,4,3], target = 3)",
        "minOperations(nums = [1], target = 1)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 6)",
        "minOperations(nums = [2, 3, 5], target = 11)",
        "minOperations(nums = [4, 3, 6, 7, 3, 2], target = 12)",
        "minOperations(nums = [1, 3, 4, 2, 6, 8], target = 11)",
        "minOperations(nums=[1, 0, 2, 3], target=6)",
        "minOperations(nums = [2, 4, 3, 7], target = 12)"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = \"11010\")",
        "maximumOddBinaryNumber(s = \"0110\")",
        "maximumOddBinaryNumber(s = \"100001\")",
        "maximumOddBinaryNumber(s = \"111000010001\")",
        "maximumOddBinaryNumber(s = \"001100110010\")",
        "maximumOddBinaryNumber(s = \"11000010\")",
        "maximumOddBinaryNumber(s = \"110000010\")",
        "maximumOddBinaryNumber(s = \"10010101010111\")",
        "maximumOddBinaryNumber(s = \"0110011011010\")",
        "maximumOddBinaryNumber(s = \"000001010100100101\")"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = \"11100\")",
        "maximumOddBinaryNumber(s = \"011\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = '11100')",
        "maximumOddBinaryNumber(s = \"0011\")",
        "maximumOddBinaryNumber(s=\"11111111111111111111111111111111\")",
        "maximumOddBinaryNumber(s = \"101010100\")",
        "maximumOddBinaryNumber(s='0011010011000110')",
        "maximumOddBinaryNumber(s = \"01001110111011000110101011110\")"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 2, target = 8)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 5, target = 9)",
        "minimumPossibleSum(n = 4, target = 15)",
        "minimumPossibleSum(n = 5, target = 12)",
        "minimumPossibleSum(n = 5, target = 5)",
        "minimumPossibleSum(n = 2, target = 6)",
        "minimumPossibleSum(n = 10, target = 45)"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LURDL\")",
        "furthestDistanceFromOrigin(moves = \"UDRL\")",
        "furthestDistanceFromOrigin(moves = \"RRDDLU\")",
        "furthestDistanceFromOrigin(moves = \"RL\")",
        "furthestDistanceFromOrigin(moves = \"LLLRRRLLL\")",
        "furthestDistanceFromOrigin(moves = \"LLRLLLRR\")",
        "furthestDistanceFromOrigin(moves = \"RRRRRLLLLL\")",
        "furthestDistanceFromOrigin(moves = \"RLRLLLRLLRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRRRLLLUUDDLLURUUULUUD\")"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 4)",
        "minimumPossibleSum(n = 7, target = 10)",
        "minimumPossibleSum(n = 2, target = 12)",
        "minimumPossibleSum(n = 1, target = 100)",
        "minimumPossibleSum(n=7, target=10)",
        "minimumPossibleSum(n=3, target=10)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [3, 1, 4, 3, 2], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 1, 2], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 1, 2], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours=[2, 2, 3, 3], target=2)",
        "numberOfEmployeesWhoMetTarget(hours = [3,1,2], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 4, 2, 2, 2, 3, 0], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 1, 4, 5, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 2, 5, 5, 3, 6], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 13, 15, 18, 22], target = 24)"
    ],
    "sample_231": [
        "countWays(nums = [0, 1, 2, 3, 4])",
        "countWays(nums = [0, 1, 2])",
        "countWays(nums = [0, 1, 2])",
        "countWays(nums = [0, 1, 2, 3, 4, 5, 6])",
        "countWays(nums = [0, 2, 3, 4, 5])",
        "countWays(nums = [3, 2, 1])",
        "countWays(nums = [1, 2, 2, 3])",
        "countWays(nums = [1, 0, 2, 4])",
        "countWays(nums = [1, 2, 5, 6, 9])",
        "countWays(nums = [2, 1, 1, 0, 5, 6])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"RLLLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLLLRL\")",
        "furthestDistanceFromOrigin(moves = \"LUL\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRRR__\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLL\")",
        "furthestDistanceFromOrigin(moves = 'LRLLLRLLLRLL')",
        "furthestDistanceFromOrigin(moves = \"RLLRLLRLL\")",
        "furthestDistanceFromOrigin(moves = \"LLRLLLRRLL\")",
        "furthestDistanceFromOrigin(moves = \"LLLLL_RL\")",
        "furthestDistanceFromOrigin(moves = 'RLRRRRLLLRRRL')"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 1, target = 4)",
        "minimumPossibleSum(n=2, target=6)",
        "minimumPossibleSum(n = 3, target = 12)",
        "minimumPossibleSum(n=10, target=20)",
        "minimumPossibleSum(n=3, target=6)",
        "minimumPossibleSum(n=2, target=1)"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [2,4,6,8,10])",
        "countCompleteSubarrays(nums = [4,2,4,5,6])",
        "countCompleteSubarrays(nums = [2,3,1,4,5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 1, 3])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7])",
        "countCompleteSubarrays(nums = [4, 5, 6, 5, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 3])",
        "countCompleteSubarrays(nums = [4,5,10,2,5])"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 2, 3, 3], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 3], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 2, 1], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 1], m = 3)",
        "canSplitArray(nums = [4, 3, 5], m = 8)",
        "canSplitArray(nums = [3, 2, 6, 5], m = 7)",
        "canSplitArray(nums = [5, 2, 1, 6], m = 5)",
        "canSplitArray(nums = [2, 3, 5, 7, 4], m = 10)",
        "canSplitArray(nums = [3, 5, 7, 8, 6], m = 10)"
    ],
    "sample_200": [
        "minOperations(nums = [3, 2, 20, 1, 1, 3], target = 10)",
        "minOperations(nums = [1, 1], target = 3)",
        "minOperations(nums=[1,1,4,2,3], target=5)",
        "minOperations(nums = [5,4,4,2,3], target = 7)",
        "minOperations(nums = [2,4,8,8], target = 10)",
        "minOperations(nums = [3,1,1,2], target = 7)",
        "minOperations(nums=[1, 2, 2, 2], target=4)",
        "minOperations(nums = [3, 2, 5, 4, 6], target = 10)",
        "minOperations(nums = [2,3,4,5,6,7,8,9,10], target = 12)",
        "minOperations(nums = [8, 2, 4, 12], target = 2)"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [5, 4, 9, 2, 3], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 4, 7], k = 3)",
        "sumIndicesWithKSetBits(nums = [12, 1, 2, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 7, 12, 17], k = 3)",
        "sumIndicesWithKSetBits(nums = [4, 5, 2, 1, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 7, 12, 17], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 10, 100, 1000, 10000], k = 1)",
        "sumIndicesWithKSetBits(nums = [3, 2, 1, 4, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [3,4,3], k = 2)"
    ],
    "sample_165": [
        "isAcronym(words = [\"ball\", \"bat\", \"batman\", \"cat\"], s = \"bat\")",
        "isAcronym(words = [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"], s = \"the\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"bapo\")",
        "isAcronym(words = [\"Ban\", \"An\", \"Na\"], s = \"BAN\")",
        "isAcronym(words = [\"apple\", \"banana\", \"coconut\"], s = \"abbc\")",
        "isAcronym(words = [\"San\", \"Francisco\", \"California\"], s = \"SC\")",
        "isAcronym(words = [\"as\",\"ab\",\"cd\"], s = \"abc\")",
        "isAcronym(words = ['Titanic', 'Water'], s = 'TWW')",
        "isAcronym(words = [\"These\", \"words\", \"are\", \"just\", \"to\", \"make\", \"up\", \"a\", \"long\", \"sentence\"], s = \"SET\")",
        "isAcronym(words = ['peace', 'to', 'come', 'all', 'alive', 'to'], s = 'pceallalive')"
    ],
    "sample_227": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 1, 2])",
        "countWays(nums = [-1, 0, 1, 1, 2, 3])",
        "countWays(nums = [0, 3, 1, 4, 2])",
        "countWays(nums = [1, 5, 6, 9, 10])",
        "countWays(nums = [0, 1, 1, 1, 2])",
        "countWays(nums = [-1, -1, 0, 1, 1, 2])",
        "countWays(nums = [-2, 1, 4, 4, 2])",
        "countWays(nums = [1, 2, 5, 15, 18, 18])",
        "countWays(nums = [0, 3, 7, 10, 9, 12, 15, 16, 13, 18])"
    ],
    "sample_158": [
        "maxSum(nums = [12, 34, 56, 78])",
        "maxSum(nums = [1,2,3])",
        "maxSum(nums = [51,71,17,24,42])",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10])",
        "maxSum(nums = [1,2,3,3,3,4,6])",
        "maxSum(nums = [3, 5, 1, 1, 2])",
        "maxSum(nums = [1, 4, 3, 5, 6, 7, 8, 9])",
        "maxSum(nums = [-1, 0, 2, 1, 0, 2, 3, 4])",
        "maxSum(nums=[99, 99, 88, 56])",
        "maxSum(nums=[43, 34, 36, 51, 91, 82])"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 1], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2], k = 4)",
        "longestEqualSubarray(nums = [1, 2, 1, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 2, 2, 2], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 2, 1, 2, 3, 1], k = 3)",
        "longestEqualSubarray(nums = [1, 1, 1, 1, 2, 2, 2], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,2], k = 3)",
        "longestEqualSubarray(nums = [1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5], k = 2)",
        "longestEqualSubarray(nums=[1, 2, 1, 3, 2, 4, 3, 1, 1, 2, 3, 4], k=3)",
        "longestEqualSubarray(nums = [1,3,4,3,4,3,1,1,4,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 4, offers = [[1, 2, 3], [2, 3, 4], [2, 3, 5]])",
        "maximizeTheProfit(n = 10, offers = [[1, 10, 2], [1, 2, 1], [2, 3, 1]])",
        "maximizeTheProfit(n = 10, offers = [[1, 10, 2], [3, 5, 1]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 5], [2, 2, 3], [3, 3, 4]])",
        "maximizeTheProfit(n = 7, offers = [[4, 5, 3], [6, 7, 2], [1, 3, 6]])",
        "maximizeTheProfit(n = 2, offers = [[2, 10, 3], [1, 7, 5]])",
        "maximizeTheProfit(n = 6, offers = [[1,2,3],[2,4,1],[5,6,3]])",
        "maximizeTheProfit(n = 4, offers = [[1, 4, 3], [1, 2, 2], [1, 3, 2], [3, 2, 4]])",
        "maximizeTheProfit(n = 7, offers = [[1, 6, 6], [1, 3, 7], [2, 5, 9], [2, 4, 8]])",
        "maximizeTheProfit(n = 7, offers = [[1, 2, 2], [2, 3, 10], [3, 4, 8], [4, 5, 7], [5, 6, 1], [6, 7, 9], [7, 8, 5]])"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 3, 5, 7, 9])",
        "maxIncreasingGroups(x = [1, 3, 6, 7, 9])",
        "maxIncreasingGroups(x = [1, 5, 5, 25, 100])",
        "maxIncreasingGroups(x = [1, 3, 4, 5, 7, 8])",
        "maxIncreasingGroups(x = [1, 1, 2, 3, 6])",
        "maxIncreasingGroups(x = [0, 1, 3, 6, 9, 12])",
        "maxIncreasingGroups(x = [2, 4, 12, 16])",
        "maxIncreasingGroups(x = [10, 15, 20, 30, 40])",
        "maxIncreasingGroups(x = [3, 2, 3, 1, 6])",
        "maxIncreasingGroups(x = [2, 5, 3, 7, 10, 15, 18, 22, 25])"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 3)",
        "sumIndicesWithKSetBits(nums=[1,2,3,4,5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 3, 4, 6, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 10, 12], k = 1)",
        "sumIndicesWithKSetBits(nums=[1,2,3,4,5,6,7,8], k=4)",
        "sumIndicesWithKSetBits(nums = [12, 5, 1, 2, 7, 14, 22], k = 3)",
        "sumIndicesWithKSetBits(nums = [4,3,5,2], k = 1)",
        "sumIndicesWithKSetBits(nums = [10,1,3,2,4,5,8,15,17,25], k = 4)"
    ],
    "sample_207": [
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"1234567890\")",
        "minimumOperations(num = \"100\")",
        "minimumOperations(num = \"11106\")",
        "minimumOperations(num = '0000')",
        "minimumOperations(num = \"1100111\")",
        "minimumOperations(num = '140')",
        "minimumOperations(num = \"472521\")",
        "minimumOperations(num = \"2025500001\")"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"LR\")",
        "furthestDistanceFromOrigin(moves = \"LR\")",
        "furthestDistanceFromOrigin(moves = \"UDRL\")",
        "furthestDistanceFromOrigin(moves=\"LLL\")",
        "furthestDistanceFromOrigin(moves = \"LRRLR\")",
        "furthestDistanceFromOrigin(moves = \"URDDLURD\")",
        "furthestDistanceFromOrigin(moves = \"URDLL\")",
        "furthestDistanceFromOrigin(moves=\"LRRRRLLRLL\")",
        "furthestDistanceFromOrigin(moves = \"URDDLURURDDL\")",
        "furthestDistanceFromOrigin(moves = \"RLRLRLLLRLRRLLRLRLLRLRLLRLRLRLRR\")"
    ],
    "sample_206": [
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"25\")",
        "minimumOperations(num=\"123\")",
        "minimumOperations(num = \"1001\")",
        "minimumOperations(num = \"552793562\")",
        "minimumOperations(num=\"100\")",
        "minimumOperations(num = \"20255\")",
        "minimumOperations(num = '02475')",
        "minimumOperations(num = \"65975734269910376690992\")"
    ],
    "sample_155": [
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 5)",
        "canSplitArray(nums = [1, 2, 3], m = 3)",
        "canSplitArray(nums = [1,2,3], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7, 8], m = 10)",
        "canSplitArray(nums = [2, 2, 2, 2], m = 2)",
        "canSplitArray(nums=[1,2,3,4,5,6,7], m=2)",
        "canSplitArray(nums = [2, 3, 4, 5, 6], m = 20)",
        "canSplitArray(nums=[4, 2, 3, 1, 2], m=2)",
        "canSplitArray(nums = [1, 3, 4, 5, 2, 1], m = 7)",
        "canSplitArray(nums = [1,2,3,1,1,1,3], m = 3)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 2, 4, 3, 5, 2, 2, 3, 7, 8])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 3, 2, 3, 5, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2])",
        "countCompleteSubarrays(nums = [1,2,3,3,2])",
        "countCompleteSubarrays(nums = [4, 3, 2, 4, 3])",
        "countCompleteSubarrays(nums = [2,1,4,3,5,2,2,4,3,5])",
        "countCompleteSubarrays(nums = [2, 3, 1, 3, 2, 2, 2, 4])"
    ],
    "sample_202": [
        "minimumOperations(num = \"001101\")",
        "minimumOperations(num = \"00110011\")",
        "minimumOperations(num = \"5525\")",
        "minimumOperations(num = \"10111\")",
        "minimumOperations(num = \"1001001\")",
        "minimumOperations(num
        "minimumOperations(num = \"10100\")",
        "minimumOperations(num = \"30123\")",
        "minimumOperations(num = \"545321\")",
        "minimumOperations(num = \"3726475115853436142535869454153733498149929561421314783238537781295313492424579434487785737917763227617192345153947626645597262876518222263187879949312765559365527917867939786425341856158532379913453994439414558385743139674545473897652268529365123194187867237153822451628242168443893543196861159497395126585321415668332239788495396277567697796481287839841646252684691978386946198746321272297313764831276722772317657984337511227399812677673475624497276493395645178323535216684698656736215136258325912144545461155947717532574133876263198"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [\"a\", \"b\", \"c\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"the quick brown fox\", \"jumps over the lazy dog\"], b = \" \")",
        "splitWordsBySeparator(a = [\"banana\", \"apple\", \"cherry\"], b = \"n\")",
        "splitWordsBySeparator(a = [\"abc\", \"def\", \"ghi\", \"jkl\"], b = \"c\")",
        "splitWordsBySeparator(a = [\"abc\", \"xyz\", \"pqr\", \"xyz\"], b = \"y\")",
        "splitWordsBySeparator(a = [\"mr\", \"jr\"], b = \" \")",
        "splitWordsBySeparator(a=[\"I\", \"like\", \"orange\", \"banana\", \"apple\"], b=\" \")",
        "splitWordsBySeparator(a = [\"abcd\", \"1234\", \"pqr\"], b = \"cd\")",
        "splitWordsBySeparator(a = [\"monday\", \"tuesday\", \"wednesday\"], b = \" \")",
        "splitWordsBySeparator(a = [\"fear\",\"unfear\",\"in\"] , b = \"ar\")"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 1)",
        "sumIndicesWithKSetBits(nums = [10, 20, 30], k = 2)",
        "sumIndicesWithKSetBits(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=1)",
        "sumIndicesWithKSetBits(nums = [2, 7, 19, 23], k = 2)",
        "sumIndicesWithKSetBits(nums = [0,1,1,2,4], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 1, 7, 0, 6], k = 2)",
        "sumIndicesWithKSetBits(nums=[3, 5, 7, 4, 10], k=2)"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = \"1001\")",
        "maximumOddBinaryNumber(s = \"011\")",
        "maximumOddBinaryNumber(s = \"001001\")",
        "maximumOddBinaryNumber(s = \"01101010\")",
        "maximumOddBinaryNumber(s = \"0111\")",
        "maximumOddBinaryNumber(s=\"11000\")",
        "maximumOddBinaryNumber(s = \"010000\")",
        "maximumOddBinaryNumber(s = '00001011')",
        "maximumOddBinaryNumber(s = \"11110000101010110011101\")",
        "maximumOddBinaryNumber(s = '111101010010001011001001010111011')"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,2,1,2,1,2,1,2,1,2], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 1, 1, 3, 4, 3], k = 3)",
        "longestEqualSubarray(nums = [1,2,2,1,1,1,1,1], k = 3)",
        "longestEqualSubarray(nums=[0, 1, 2, 2, 1, 0], k=3)",
        "longestEqualSubarray(nums=[1,1,1,1,1,2,2,3,3], k=1)",
        "longestEqualSubarray(nums = [1,4,3,1,3,2,1,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,1,3,4,5,3,2], k = 4)",
        "longestEqualSubarray(nums = [1,3,3,4,3,2,1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9, 9, 9, 10], k = 10)",
        "longestEqualSubarray(nums = [2,2,2,2,1,2,1,1,1,1,1,2,2,1,2,1,2,2,2,2,1,2,1,1,1,2,1,2,1,2,1,1,1,1,1,1,1,2,2,1,1,2,1,2,1,1,1,1,2,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,1,2,2,2,2,2,2,1,1,1,1,1,2,2,1,1,2,2,2,2,1,2,1,1,1,2,1,2,2,2,2,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,2,1,1,2,2,2,1,1,1,1,2,1,1,1,2,2,2,1,1,1,1,1,1,2,1,1,2,2,1,2,2,2,1,1,1,1,1,2,2,1,1,2,1,2,1,1,1,1,1,2,1,1,2,1,1,2,1,1,2,2,2,2,2,1,2,2,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,2,2,1,2,1,1,2,2,1,1,1,1,1,1,2,2,1,1,2,1,2,1,1,1,1,1,1,2,2,2,1,2,1,1,1,1"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1,2,4,4,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 4, 3, 1, 2, 3, 1, 2, 3], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [4, 1, 2, 3, 1, 2], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,2,3,4], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,4,5,2,3,1,1,1,3], k = 3)",
        "longestEqualSubarray(nums = [2, 2, 2, 2, 3, 3, 2, 2], k = 2)",
        "longestEqualSubarray(nums = [0,1,2,1,1,1,0,0,1,1,1,1,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,4,1,2,2,1,1,3,1,3,3,3], k = 4)",
        "longestEqualSubarray(nums = [4, 3, 1, 4, 2, 3, 1, 1, 1, 3, 4, 2, 1, 2, 3, 1, 4, 4, 3, 2], k = 3)"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = \"00111\")",
        "maximumOddBinaryNumber(s = \"1000\")",
        "maximumOddBinaryNumber(s = \"10010\")",
        "maximumOddBinaryNumber(s = \"01110\")",
        "maximumOddBinaryNumber(s = \"0110\")",
        "maximumOddBinaryNumber(s = \"10110\")",
        "maximumOddBinaryNumber(s = \"1001001\")",
        "maximumOddBinaryNumber(s = '1001')",
        "maximumOddBinaryNumber(s = \"000111001\")",
        "maximumOddBinaryNumber(s = \"0011101\")"
    ],
    "sample_166": [
        "isAcronym(words = [\"banana\", \"apple\", \"pear\"], s = \"banana\")",
        "isAcronym(words = [\"elephant\", \"elephant\", \"elephant\", \"elephant\"], s = \"elephant\")",
        "isAcronym(words = [\"apple\", \"banana\", \"carrot\"], s = \"carr\")",
        "isAcronym(words = [\"abc\", \"def\", \"ghi\"], s = \"gh\")",
        "isAcronym(words = [\"ble\", \"bleh\"], s = \"bleh\")",
        "isAcronym(words = [\"hello\", \"now\", \"hello\"], s = \"hello\")",
        "isAcronym(words = [\"ten\", \"eleven\", \"twelve\"], s = \"twlve\")",
        "isAcronym(words = [\"spear\", \"steam\", \"stew\"], s = \"steam\")",
        "isAcronym(words = [\"banana\", \"apple\", \"mango\", \"carrot\", \"bread\"], s = \"br\")",
        "isAcronym(words = [\"Zara\", \"Ram\", \"Mike\"], s = \"ZRM\")"
    ],
    "sample_163": [
        "maxSum(nums = [12, 34, 56, 78, 90])",
        "maxSum(nums = [12, 34, 56, 78])",
        "maxSum(nums = [51, 71, 17, 24])",
        "maxSum(nums = [12, 34, 12, 43, 32, 54, 76, 34])",
        "maxSum(nums = [3, 2, 6, 8, 4, 10, 23, 1])",
        "maxSum(nums = [10, 20, 15, 35, 55])",
        "maxSum(nums = [2, 5, 1, 4, 7])",
        "maxSum(nums=[2, 3, 5, 1, 3, 9, 13])",
        "maxSum(nums=[1,10,4,2,3,6,7,5,8])",
        "maxSum(nums = [9, 2, 5, 7, 2, 5, 9, 12, 4])"
    ]
}